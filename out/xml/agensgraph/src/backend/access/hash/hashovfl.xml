<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/backend/access/hash/hashovfl.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * hashovfl.c
 *	  Overflow page management code for the Postgres hash access method
 *
 * Portions Copyright (c) 1996-2020, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/access/hash/hashovfl.c
 *
 * NOTES
 *	  Overflow pages look like ordinary relation pages.
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/hash_xlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/rel.h"</cpp:file></cpp:include>


<function_decl><type><specifier>static</specifier> <name>uint32</name></type> <name>_hash_firstfreebit</name><parameter_list>(<parameter><decl><type><name>uint32</name></type> <name>map</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/*
 * Convert overflow page bit number (its index in the free-page bitmaps)
 * to block number within the index.
 */</comment>
<function><type><specifier>static</specifier> <name>BlockNumber</name></type>
<name>bitno_to_blkno</name><parameter_list>(<parameter><decl><type><name>HashMetaPage</name></type> <name>metap</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>ovflbitnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>splitnum</name> <init>= <expr><name><name>metap</name><operator>-&gt;</operator><name>hashm_ovflpoint</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>i</name></decl>;</decl_stmt>

	<comment type="block">/* Convert zero-based bitnumber to 1-based page number */</comment>
	<expr_stmt><expr><name>ovflbitnum</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<comment type="block">/* Determine the split number for this page (must be &gt;= 1) */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init>
		 <condition><expr><name><name>i</name> <argument_list type="generic">&lt; <argument><expr><name>splitnum</name> <operator>&amp;&amp;</operator> <name>ovflbitnum</name></expr></argument> &gt;</argument_list></name> <name><name>metap</name><operator>-&gt;</operator><name>hashm_spares</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition>
		 <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		 <comment type="block">/* loop */</comment> <empty_stmt>;</empty_stmt></block_content></block></for>

	<comment type="block">/*
	 * Convert to absolute page number by adding the number of bucket pages
	 * that exist before this split point.
	 */</comment>
	<return>return <expr><operator>(</operator><name>BlockNumber</name><operator>)</operator> <operator>(</operator><call><name>_hash_get_totalbuckets</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>ovflbitnum</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _hash_ovflblkno_to_bitno
 *
 * Convert overflow page block number to bit number for free-page bitmap.
 */</comment>
<function><type><name>uint32</name></type>
<name>_hash_ovflblkno_to_bitno</name><parameter_list>(<parameter><decl><type><name>HashMetaPage</name></type> <name>metap</name></decl></parameter>, <parameter><decl><type><name>BlockNumber</name></type> <name>ovflblkno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>splitnum</name> <init>= <expr><name><name>metap</name><operator>-&gt;</operator><name>hashm_ovflpoint</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>bitnum</name></decl>;</decl_stmt>

	<comment type="block">/* Determine the split number containing this page */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>splitnum</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>ovflblkno</name> <operator>&lt;=</operator> <operator>(</operator><name>BlockNumber</name><operator>)</operator> <call><name>_hash_get_totalbuckets</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>				<comment type="block">/* oops */</comment>
		<expr_stmt><expr><name>bitnum</name> <operator>=</operator> <name>ovflblkno</name> <operator>-</operator> <call><name>_hash_get_totalbuckets</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * bitnum has to be greater than number of overflow page added in
		 * previous split point. The overflow page at this splitnum (i) if any
		 * should start from (_hash_get_totalbuckets(i) +
		 * metap-&gt;hashm_spares[i - 1] + 1).
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>bitnum</name> <operator>&gt;</operator> <name><name>metap</name><operator>-&gt;</operator><name>hashm_spares</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator>
			<name>bitnum</name> <operator>&lt;=</operator> <name><name>metap</name><operator>-&gt;</operator><name>hashm_spares</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>bitnum</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>	<comment type="block">/* -1 to convert 1-based to 0-based */</comment>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
			 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid overflow block number %u"</literal></expr></argument>, <argument><expr><name>ovflblkno</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>					<comment type="block">/* keep compiler quiet */</comment>
</block_content>}</block></function>

<comment type="block">/*
 *	_hash_addovflpage
 *
 *	Add an overflow page to the bucket whose last page is pointed to by 'buf'.
 *
 *	On entry, the caller must hold a pin but no lock on 'buf'.  The pin is
 *	dropped before exiting (we assume the caller is not interested in 'buf'
 *	anymore) if not asked to retain.  The pin will be retained only for the
 *	primary bucket.  The returned overflow page will be pinned and
 *	write-locked; it is guaranteed to be empty.
 *
 *	The caller must hold a pin, but no lock, on the metapage buffer.
 *	That buffer is returned in the same state.
 *
 * NB: since this could be executed concurrently by multiple processes,
 * one should not assume that the returned overflow page will be the
 * immediate successor of the originally passed 'buf'.  Additional overflow
 * pages might have been added to the bucket chain in between.
 */</comment>
<function><type><name>Buffer</name></type>
<name>_hash_addovflpage</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>, <parameter><decl><type><name>Buffer</name></type> <name>metabuf</name></decl></parameter>, <parameter><decl><type><name>Buffer</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>retain_pin</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Buffer</name></type>		<name>ovflbuf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Page</name></type>		<name>page</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Page</name></type>		<name>ovflpage</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HashPageOpaque</name></type> <name>pageopaque</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HashPageOpaque</name></type> <name>ovflopaque</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HashMetaPage</name></type> <name>metap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Buffer</name></type>		<name>mapbuf</name> <init>= <expr><name>InvalidBuffer</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Buffer</name></type>		<name>newmapbuf</name> <init>= <expr><name>InvalidBuffer</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BlockNumber</name></type> <name>blkno</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>orig_firstfree</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>splitnum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name>	   <modifier>*</modifier></type><name>freep</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>max_ovflpg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>bit</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>bitmap_page_bit</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>first_page</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>last_bit</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>last_page</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>i</name></decl>,
				<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>page_found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * Write-lock the tail page.  Here, we need to maintain locking order such
	 * that, first acquire the lock on tail page of bucket, then on meta page
	 * to find and lock the bitmap page and if it is found, then lock on meta
	 * page is released, then finally acquire the lock on new overflow buffer.
	 * We need this locking order to avoid deadlock with backends that are
	 * doing inserts.
	 *
	 * Note: We could have avoided locking many buffers here if we made two
	 * WAL records for acquiring an overflow page (one to allocate an overflow
	 * page and another to add it to overflow bucket chain).  However, doing
	 * so can leak an overflow page, if the system crashes after allocation.
	 * Needless to say, it is better to have a single record from a
	 * performance point of view as well.
	 */</comment>
	<expr_stmt><expr><call><name>LockBuffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BUFFER_LOCK_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* probably redundant... */</comment>
	<expr_stmt><expr><call><name>_hash_checkpage</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>LH_BUCKET_PAGE</name> <operator>|</operator> <name>LH_OVERFLOW_PAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* loop to find current tail page, in case someone else inserted too */</comment>
	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>BlockNumber</name></type> <name>nextblkno</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>page</name> <operator>=</operator> <call><name>BufferGetPage</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pageopaque</name> <operator>=</operator> <operator>(</operator><name>HashPageOpaque</name><operator>)</operator> <call><name>PageGetSpecialPointer</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>nextblkno</name> <operator>=</operator> <name><name>pageopaque</name><operator>-&gt;</operator><name>hasho_nextblkno</name></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>BlockNumberIsValid</name><argument_list>(<argument><expr><name>nextblkno</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<comment type="block">/* we assume we do not need to write the unmodified page */</comment>
		<if_stmt><if>if <condition>(<expr><name>retain_pin</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* pin will be retained only for the primary bucket page */</comment>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>(</operator><name><name>pageopaque</name><operator>-&gt;</operator><name>hasho_flag</name></name> <operator>&amp;</operator> <name>LH_PAGE_TYPE</name><operator>)</operator> <operator>==</operator> <name>LH_BUCKET_PAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>LockBuffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BUFFER_LOCK_UNLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>_hash_relbuf</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><name>retain_pin</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>_hash_getbuf</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>nextblkno</name></expr></argument>, <argument><expr><name>HASH_WRITE</name></expr></argument>, <argument><expr><name>LH_OVERFLOW_PAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* Get exclusive lock on the meta page */</comment>
	<expr_stmt><expr><call><name>LockBuffer</name><argument_list>(<argument><expr><name>metabuf</name></expr></argument>, <argument><expr><name>BUFFER_LOCK_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>_hash_checkpage</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>metabuf</name></expr></argument>, <argument><expr><name>LH_META_PAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>metap</name> <operator>=</operator> <call><name>HashPageGetMeta</name><argument_list>(<argument><expr><call><name>BufferGetPage</name><argument_list>(<argument><expr><name>metabuf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* start search at hashm_firstfree */</comment>
	<expr_stmt><expr><name>orig_firstfree</name> <operator>=</operator> <name><name>metap</name><operator>-&gt;</operator><name>hashm_firstfree</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>first_page</name> <operator>=</operator> <name>orig_firstfree</name> <operator>&gt;&gt;</operator> <call><name>BMPG_SHIFT</name><argument_list>(<argument><expr><name>metap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>bit</name> <operator>=</operator> <name>orig_firstfree</name> <operator>&amp;</operator> <call><name>BMPG_MASK</name><argument_list>(<argument><expr><name>metap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>i</name> <operator>=</operator> <name>first_page</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>j</name> <operator>=</operator> <name>bit</name> <operator>/</operator> <name>BITS_PER_MAP</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>bit</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>BITS_PER_MAP</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

	<comment type="block">/* outer loop iterates once per bitmap page */</comment>
	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>BlockNumber</name></type> <name>mapblkno</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Page</name></type>		<name>mappage</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint32</name></type>		<name>last_inpage</name></decl>;</decl_stmt>

		<comment type="block">/* want to end search with the last existing overflow page */</comment>
		<expr_stmt><expr><name>splitnum</name> <operator>=</operator> <name><name>metap</name><operator>-&gt;</operator><name>hashm_ovflpoint</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>max_ovflpg</name> <operator>=</operator> <name><name>metap</name><operator>-&gt;</operator><name>hashm_spares</name><index>[<expr><name>splitnum</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>last_page</name> <operator>=</operator> <name>max_ovflpg</name> <operator>&gt;&gt;</operator> <call><name>BMPG_SHIFT</name><argument_list>(<argument><expr><name>metap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>last_bit</name> <operator>=</operator> <name>max_ovflpg</name> <operator>&amp;</operator> <call><name>BMPG_MASK</name><argument_list>(<argument><expr><name>metap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <name>last_page</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>i</name> <operator>&lt;</operator> <name><name>metap</name><operator>-&gt;</operator><name>hashm_nmaps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>mapblkno</name> <operator>=</operator> <name><name>metap</name><operator>-&gt;</operator><name>hashm_mapp</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>last_page</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>last_inpage</name> <operator>=</operator> <name>last_bit</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>last_inpage</name> <operator>=</operator> <call><name>BMPGSZ_BIT</name><argument_list>(<argument><expr><name>metap</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<comment type="block">/* Release exclusive lock on metapage while reading bitmap page */</comment>
		<expr_stmt><expr><call><name>LockBuffer</name><argument_list>(<argument><expr><name>metabuf</name></expr></argument>, <argument><expr><name>BUFFER_LOCK_UNLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>mapbuf</name> <operator>=</operator> <call><name>_hash_getbuf</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>mapblkno</name></expr></argument>, <argument><expr><name>HASH_WRITE</name></expr></argument>, <argument><expr><name>LH_BITMAP_PAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>mappage</name> <operator>=</operator> <call><name>BufferGetPage</name><argument_list>(<argument><expr><name>mapbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>freep</name> <operator>=</operator> <call><name>HashPageGetBitmap</name><argument_list>(<argument><expr><name>mappage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<for>for <control>(<init>;</init> <condition><expr><name>bit</name> <operator>&lt;=</operator> <name>last_inpage</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>bit</name> <operator>+=</operator> <name>BITS_PER_MAP</name></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>freep</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name>ALL_SET</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>page_found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

				<comment type="block">/* Reacquire exclusive lock on the meta page */</comment>
				<expr_stmt><expr><call><name>LockBuffer</name><argument_list>(<argument><expr><name>metabuf</name></expr></argument>, <argument><expr><name>BUFFER_LOCK_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/* convert bit to bit number within page */</comment>
				<expr_stmt><expr><name>bit</name> <operator>+=</operator> <call><name>_hash_firstfreebit</name><argument_list>(<argument><expr><name><name>freep</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>bitmap_page_bit</name> <operator>=</operator> <name>bit</name></expr>;</expr_stmt>

				<comment type="block">/* convert bit to absolute bit number */</comment>
				<expr_stmt><expr><name>bit</name> <operator>+=</operator> <operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <call><name>BMPG_SHIFT</name><argument_list>(<argument><expr><name>metap</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* Calculate address of the recycled overflow page */</comment>
				<expr_stmt><expr><name>blkno</name> <operator>=</operator> <call><name>bitno_to_blkno</name><argument_list>(<argument><expr><name>metap</name></expr></argument>, <argument><expr><name>bit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/* Fetch and init the recycled page */</comment>
				<expr_stmt><expr><name>ovflbuf</name> <operator>=</operator> <call><name>_hash_getinitbuf</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>blkno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<goto>goto <name>found</name>;</goto>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>

		<comment type="block">/* No free space here, try to advance to next map page */</comment>
		<expr_stmt><expr><call><name>_hash_relbuf</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>mapbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>mapbuf</name> <operator>=</operator> <name>InvalidBuffer</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>					<comment type="block">/* scan from start of next map page */</comment>
		<expr_stmt><expr><name>bit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

		<comment type="block">/* Reacquire exclusive lock on the meta page */</comment>
		<expr_stmt><expr><call><name>LockBuffer</name><argument_list>(<argument><expr><name>metabuf</name></expr></argument>, <argument><expr><name>BUFFER_LOCK_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/*
	 * No free pages --- have to extend the relation to add an overflow page.
	 * First, check to see if we have to add a new bitmap page too.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>last_bit</name> <operator>==</operator> <operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><call><name>BMPGSZ_BIT</name><argument_list>(<argument><expr><name>metap</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * We create the new bitmap page with all pages marked "in use".
		 * Actually two pages in the new bitmap's range will exist
		 * immediately: the bitmap page itself, and the following page which
		 * is the one we return to the caller.  Both of these are correctly
		 * marked "in use".  Subsequent pages do not exist yet, but it is
		 * convenient to pre-mark them as "in use" too.
		 */</comment>
		<expr_stmt><expr><name>bit</name> <operator>=</operator> <name><name>metap</name><operator>-&gt;</operator><name>hashm_spares</name><index>[<expr><name>splitnum</name></expr>]</index></name></expr>;</expr_stmt>

		<comment type="block">/* metapage already has a write lock */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>metap</name><operator>-&gt;</operator><name>hashm_nmaps</name></name> <operator>&gt;=</operator> <name>HASH_MAX_BITMAPS</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PROGRAM_LIMIT_EXCEEDED</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"out of overflow pages in hash index \"%s\""</literal></expr></argument>,
							<argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>newmapbuf</name> <operator>=</operator> <call><name>_hash_getnewbuf</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><call><name>bitno_to_blkno</name><argument_list>(<argument><expr><name>metap</name></expr></argument>, <argument><expr><name>bit</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MAIN_FORKNUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/*
		 * Nothing to do here; since the page will be past the last used page,
		 * we know its bitmap bit was preinitialized to "in use".
		 */</comment>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* Calculate address of the new overflow page */</comment>
	<expr_stmt><expr><name>bit</name> <operator>=</operator> <ternary><condition><expr><call><name>BufferIsValid</name><argument_list>(<argument><expr><name>newmapbuf</name></expr></argument>)</argument_list></call></expr> ?</condition><then>
		<expr><name><name>metap</name><operator>-&gt;</operator><name>hashm_spares</name><index>[<expr><name>splitnum</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name><name>metap</name><operator>-&gt;</operator><name>hashm_spares</name><index>[<expr><name>splitnum</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><name>blkno</name> <operator>=</operator> <call><name>bitno_to_blkno</name><argument_list>(<argument><expr><name>metap</name></expr></argument>, <argument><expr><name>bit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Fetch the page with _hash_getnewbuf to ensure smgr's idea of the
	 * relation length stays in sync with ours.  XXX It's annoying to do this
	 * with metapage write lock held; would be better to use a lock that
	 * doesn't block incoming searches.
	 *
	 * It is okay to hold two buffer locks here (one on tail page of bucket
	 * and other on new overflow page) since there cannot be anyone else
	 * contending for access to ovflbuf.
	 */</comment>
	<expr_stmt><expr><name>ovflbuf</name> <operator>=</operator> <call><name>_hash_getnewbuf</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>blkno</name></expr></argument>, <argument><expr><name>MAIN_FORKNUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>found</name>:</label>

	<comment type="block">/*
	 * Do the update.  No ereport(ERROR) until changes are logged. We want to
	 * log the changes for bitmap page and overflow page together to avoid
	 * loss of pages in case the new page is added.
	 */</comment>
	<expr_stmt><expr><call><name>START_CRIT_SECTION</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>page_found</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>BufferIsValid</name><argument_list>(<argument><expr><name>mapbuf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* mark page "in use" in the bitmap */</comment>
		<expr_stmt><expr><call><name>SETBIT</name><argument_list>(<argument><expr><name>freep</name></expr></argument>, <argument><expr><name>bitmap_page_bit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MarkBufferDirty</name><argument_list>(<argument><expr><name>mapbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* update the count to indicate new overflow page is added */</comment>
		<expr_stmt><expr><name><name>metap</name><operator>-&gt;</operator><name>hashm_spares</name><index>[<expr><name>splitnum</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>BufferIsValid</name><argument_list>(<argument><expr><name>newmapbuf</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>_hash_initbitmapbuffer</name><argument_list>(<argument><expr><name>newmapbuf</name></expr></argument>, <argument><expr><name><name>metap</name><operator>-&gt;</operator><name>hashm_bmsize</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>MarkBufferDirty</name><argument_list>(<argument><expr><name>newmapbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* add the new bitmap page to the metapage's list of bitmaps */</comment>
			<expr_stmt><expr><name><name>metap</name><operator>-&gt;</operator><name>hashm_mapp</name><index>[<expr><name><name>metap</name><operator>-&gt;</operator><name>hashm_nmaps</name></name></expr>]</index></name> <operator>=</operator> <call><name>BufferGetBlockNumber</name><argument_list>(<argument><expr><name>newmapbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>metap</name><operator>-&gt;</operator><name>hashm_nmaps</name></name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>metap</name><operator>-&gt;</operator><name>hashm_spares</name><index>[<expr><name>splitnum</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>MarkBufferDirty</name><argument_list>(<argument><expr><name>metabuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * for new overflow page, we don't need to explicitly set the bit in
		 * bitmap page, as by default that will be set to "in use".
		 */</comment>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/*
	 * Adjust hashm_firstfree to avoid redundant searches.  But don't risk
	 * changing it if someone moved it while we were searching bitmap pages.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>metap</name><operator>-&gt;</operator><name>hashm_firstfree</name></name> <operator>==</operator> <name>orig_firstfree</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>metap</name><operator>-&gt;</operator><name>hashm_firstfree</name></name> <operator>=</operator> <name>bit</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MarkBufferDirty</name><argument_list>(<argument><expr><name>metabuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* initialize new overflow page */</comment>
	<expr_stmt><expr><name>ovflpage</name> <operator>=</operator> <call><name>BufferGetPage</name><argument_list>(<argument><expr><name>ovflbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ovflopaque</name> <operator>=</operator> <operator>(</operator><name>HashPageOpaque</name><operator>)</operator> <call><name>PageGetSpecialPointer</name><argument_list>(<argument><expr><name>ovflpage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ovflopaque</name><operator>-&gt;</operator><name>hasho_prevblkno</name></name> <operator>=</operator> <call><name>BufferGetBlockNumber</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ovflopaque</name><operator>-&gt;</operator><name>hasho_nextblkno</name></name> <operator>=</operator> <name>InvalidBlockNumber</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ovflopaque</name><operator>-&gt;</operator><name>hasho_bucket</name></name> <operator>=</operator> <name><name>pageopaque</name><operator>-&gt;</operator><name>hasho_bucket</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ovflopaque</name><operator>-&gt;</operator><name>hasho_flag</name></name> <operator>=</operator> <name>LH_OVERFLOW_PAGE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ovflopaque</name><operator>-&gt;</operator><name>hasho_page_id</name></name> <operator>=</operator> <name>HASHO_PAGE_ID</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>MarkBufferDirty</name><argument_list>(<argument><expr><name>ovflbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* logically chain overflow page to previous page */</comment>
	<expr_stmt><expr><name><name>pageopaque</name><operator>-&gt;</operator><name>hasho_nextblkno</name></name> <operator>=</operator> <call><name>BufferGetBlockNumber</name><argument_list>(<argument><expr><name>ovflbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>MarkBufferDirty</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* XLOG stuff */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>RelationNeedsWAL</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>XLogRecPtr</name></type>	<name>recptr</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>xl_hash_add_ovfl_page</name></type> <name>xlrec</name></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>xlrec</name><operator>.</operator><name>bmpage_found</name></name> <operator>=</operator> <name>page_found</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>xlrec</name><operator>.</operator><name>bmsize</name></name> <operator>=</operator> <name><name>metap</name><operator>-&gt;</operator><name>hashm_bmsize</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>XLogBeginInsert</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>XLogRegisterData</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>xlrec</name></expr></argument>, <argument><expr><name>SizeOfHashAddOvflPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>XLogRegisterBuffer</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ovflbuf</name></expr></argument>, <argument><expr><name>REGBUF_WILL_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>XLogRegisterBufData</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>pageopaque</name><operator>-&gt;</operator><name>hasho_bucket</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Bucket</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>XLogRegisterBuffer</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>REGBUF_STANDARD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>BufferIsValid</name><argument_list>(<argument><expr><name>mapbuf</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>XLogRegisterBuffer</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>mapbuf</name></expr></argument>, <argument><expr><name>REGBUF_STANDARD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>XLogRegisterBufData</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>bitmap_page_bit</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>BufferIsValid</name><argument_list>(<argument><expr><name>newmapbuf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>XLogRegisterBuffer</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>newmapbuf</name></expr></argument>, <argument><expr><name>REGBUF_WILL_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>XLogRegisterBuffer</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>metabuf</name></expr></argument>, <argument><expr><name>REGBUF_STANDARD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>XLogRegisterBufData</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>metap</name><operator>-&gt;</operator><name>hashm_firstfree</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>recptr</name> <operator>=</operator> <call><name>XLogInsert</name><argument_list>(<argument><expr><name>RM_HASH_ID</name></expr></argument>, <argument><expr><name>XLOG_HASH_ADD_OVFL_PAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>PageSetLSN</name><argument_list>(<argument><expr><call><name>BufferGetPage</name><argument_list>(<argument><expr><name>ovflbuf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>recptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PageSetLSN</name><argument_list>(<argument><expr><call><name>BufferGetPage</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>recptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>BufferIsValid</name><argument_list>(<argument><expr><name>mapbuf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PageSetLSN</name><argument_list>(<argument><expr><call><name>BufferGetPage</name><argument_list>(<argument><expr><name>mapbuf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>recptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>BufferIsValid</name><argument_list>(<argument><expr><name>newmapbuf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PageSetLSN</name><argument_list>(<argument><expr><call><name>BufferGetPage</name><argument_list>(<argument><expr><name>newmapbuf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>recptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>PageSetLSN</name><argument_list>(<argument><expr><call><name>BufferGetPage</name><argument_list>(<argument><expr><name>metabuf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>recptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>END_CRIT_SECTION</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>retain_pin</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>LockBuffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>BUFFER_LOCK_UNLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>_hash_relbuf</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>BufferIsValid</name><argument_list>(<argument><expr><name>mapbuf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>_hash_relbuf</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>mapbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>LockBuffer</name><argument_list>(<argument><expr><name>metabuf</name></expr></argument>, <argument><expr><name>BUFFER_LOCK_UNLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>BufferIsValid</name><argument_list>(<argument><expr><name>newmapbuf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>_hash_relbuf</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>newmapbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>ovflbuf</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 *	_hash_firstfreebit()
 *
 *	Return the number of the first bit that is not set in the word 'map'.
 */</comment>
<function><type><specifier>static</specifier> <name>uint32</name></type>
<name>_hash_firstfreebit</name><parameter_list>(<parameter><decl><type><name>uint32</name></type> <name>map</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>i</name></decl>,
				<decl><type ref="prev"/><name>mask</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>mask</name> <operator>=</operator> <literal type="number">0x1</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BITS_PER_MAP</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>mask</name> <operator>&amp;</operator> <name>map</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>mask</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"firstfreebit found no free bit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>					<comment type="block">/* keep compiler quiet */</comment>
</block_content>}</block></function>

<comment type="block">/*
 *	_hash_freeovflpage() -
 *
 *	Remove this overflow page from its bucket's chain, and mark the page as
 *	free.  On entry, ovflbuf is write-locked; it is released before exiting.
 *
 *	Add the tuples (itups) to wbuf in this function.  We could do that in the
 *	caller as well, but the advantage of doing it here is we can easily write
 *	the WAL for XLOG_HASH_SQUEEZE_PAGE operation.  Addition of tuples and
 *	removal of overflow page has to done as an atomic operation, otherwise
 *	during replay on standby users might find duplicate records.
 *
 *	Since this function is invoked in VACUUM, we provide an access strategy
 *	parameter that controls fetches of the bucket pages.
 *
 *	Returns the block number of the page that followed the given page
 *	in the bucket, or InvalidBlockNumber if no following page.
 *
 *	NB: caller must not hold lock on metapage, nor on page, that's next to
 *	ovflbuf in the bucket chain.  We don't acquire the lock on page that's
 *	prior to ovflbuf in chain if it is same as wbuf because the caller already
 *	has a lock on same.
 */</comment>
<function><type><name>BlockNumber</name></type>
<name>_hash_freeovflpage</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>, <parameter><decl><type><name>Buffer</name></type> <name>bucketbuf</name></decl></parameter>, <parameter><decl><type><name>Buffer</name></type> <name>ovflbuf</name></decl></parameter>,
				   <parameter><decl><type><name>Buffer</name></type> <name>wbuf</name></decl></parameter>, <parameter><decl><type><name>IndexTuple</name> <modifier>*</modifier></type><name>itups</name></decl></parameter>, <parameter><decl><type><name>OffsetNumber</name> <modifier>*</modifier></type><name>itup_offsets</name></decl></parameter>,
				   <parameter><decl><type><name>Size</name> <modifier>*</modifier></type><name>tups_size</name></decl></parameter>, <parameter><decl><type><name>uint16</name></type> <name>nitups</name></decl></parameter>,
				   <parameter><decl><type><name>BufferAccessStrategy</name></type> <name>bstrategy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HashMetaPage</name></type> <name>metap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Buffer</name></type>		<name>metabuf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Buffer</name></type>		<name>mapbuf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BlockNumber</name></type> <name>ovflblkno</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BlockNumber</name></type> <name>prevblkno</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BlockNumber</name></type> <name>blkno</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BlockNumber</name></type> <name>nextblkno</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BlockNumber</name></type> <name>writeblkno</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HashPageOpaque</name></type> <name>ovflopaque</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Page</name></type>		<name>ovflpage</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Page</name></type>		<name>mappage</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name>	   <modifier>*</modifier></type><name>freep</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>ovflbitno</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>bitmappage</name></decl>,
				<decl><type ref="prev"/><name>bitmapbit</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Bucket</name>		<name>bucket</name></type> <name>PG_USED_FOR_ASSERTS_ONLY</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Buffer</name></type>		<name>prevbuf</name> <init>= <expr><name>InvalidBuffer</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Buffer</name></type>		<name>nextbuf</name> <init>= <expr><name>InvalidBuffer</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>update_metap</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Get information from the doomed page */</comment>
	<expr_stmt><expr><call><name>_hash_checkpage</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>ovflbuf</name></expr></argument>, <argument><expr><name>LH_OVERFLOW_PAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ovflblkno</name> <operator>=</operator> <call><name>BufferGetBlockNumber</name><argument_list>(<argument><expr><name>ovflbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ovflpage</name> <operator>=</operator> <call><name>BufferGetPage</name><argument_list>(<argument><expr><name>ovflbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ovflopaque</name> <operator>=</operator> <operator>(</operator><name>HashPageOpaque</name><operator>)</operator> <call><name>PageGetSpecialPointer</name><argument_list>(<argument><expr><name>ovflpage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>nextblkno</name> <operator>=</operator> <name><name>ovflopaque</name><operator>-&gt;</operator><name>hasho_nextblkno</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>prevblkno</name> <operator>=</operator> <name><name>ovflopaque</name><operator>-&gt;</operator><name>hasho_prevblkno</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>writeblkno</name> <operator>=</operator> <call><name>BufferGetBlockNumber</name><argument_list>(<argument><expr><name>wbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>bucket</name> <operator>=</operator> <name><name>ovflopaque</name><operator>-&gt;</operator><name>hasho_bucket</name></name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Fix up the bucket chain.  this is a doubly-linked list, so we must fix
	 * up the bucket chain members behind and ahead of the overflow page being
	 * deleted.  Concurrency issues are avoided by using lock chaining as
	 * described atop hashbucketcleanup.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>BlockNumberIsValid</name><argument_list>(<argument><expr><name>prevblkno</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>prevblkno</name> <operator>==</operator> <name>writeblkno</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>prevbuf</name> <operator>=</operator> <name>wbuf</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>prevbuf</name> <operator>=</operator> <call><name>_hash_getbuf_with_strategy</name><argument_list>(<argument><expr><name>rel</name></expr></argument>,
												 <argument><expr><name>prevblkno</name></expr></argument>,
												 <argument><expr><name>HASH_WRITE</name></expr></argument>,
												 <argument><expr><name>LH_BUCKET_PAGE</name> <operator>|</operator> <name>LH_OVERFLOW_PAGE</name></expr></argument>,
												 <argument><expr><name>bstrategy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>BlockNumberIsValid</name><argument_list>(<argument><expr><name>nextblkno</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>nextbuf</name> <operator>=</operator> <call><name>_hash_getbuf_with_strategy</name><argument_list>(<argument><expr><name>rel</name></expr></argument>,
											 <argument><expr><name>nextblkno</name></expr></argument>,
											 <argument><expr><name>HASH_WRITE</name></expr></argument>,
											 <argument><expr><name>LH_OVERFLOW_PAGE</name></expr></argument>,
											 <argument><expr><name>bstrategy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Note: bstrategy is intentionally not used for metapage and bitmap */</comment>

	<comment type="block">/* Read the metapage so we can determine which bitmap page to use */</comment>
	<expr_stmt><expr><name>metabuf</name> <operator>=</operator> <call><name>_hash_getbuf</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>HASH_METAPAGE</name></expr></argument>, <argument><expr><name>HASH_READ</name></expr></argument>, <argument><expr><name>LH_META_PAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>metap</name> <operator>=</operator> <call><name>HashPageGetMeta</name><argument_list>(<argument><expr><call><name>BufferGetPage</name><argument_list>(<argument><expr><name>metabuf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Identify which bit to set */</comment>
	<expr_stmt><expr><name>ovflbitno</name> <operator>=</operator> <call><name>_hash_ovflblkno_to_bitno</name><argument_list>(<argument><expr><name>metap</name></expr></argument>, <argument><expr><name>ovflblkno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>bitmappage</name> <operator>=</operator> <name>ovflbitno</name> <operator>&gt;&gt;</operator> <call><name>BMPG_SHIFT</name><argument_list>(<argument><expr><name>metap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>bitmapbit</name> <operator>=</operator> <name>ovflbitno</name> <operator>&amp;</operator> <call><name>BMPG_MASK</name><argument_list>(<argument><expr><name>metap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>bitmappage</name> <operator>&gt;=</operator> <name><name>metap</name><operator>-&gt;</operator><name>hashm_nmaps</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid overflow bit number %u"</literal></expr></argument>, <argument><expr><name>ovflbitno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>blkno</name> <operator>=</operator> <name><name>metap</name><operator>-&gt;</operator><name>hashm_mapp</name><index>[<expr><name>bitmappage</name></expr>]</index></name></expr>;</expr_stmt>

	<comment type="block">/* Release metapage lock while we access the bitmap page */</comment>
	<expr_stmt><expr><call><name>LockBuffer</name><argument_list>(<argument><expr><name>metabuf</name></expr></argument>, <argument><expr><name>BUFFER_LOCK_UNLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* read the bitmap page to clear the bitmap bit */</comment>
	<expr_stmt><expr><name>mapbuf</name> <operator>=</operator> <call><name>_hash_getbuf</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>blkno</name></expr></argument>, <argument><expr><name>HASH_WRITE</name></expr></argument>, <argument><expr><name>LH_BITMAP_PAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>mappage</name> <operator>=</operator> <call><name>BufferGetPage</name><argument_list>(<argument><expr><name>mapbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>freep</name> <operator>=</operator> <call><name>HashPageGetBitmap</name><argument_list>(<argument><expr><name>mappage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>ISSET</name><argument_list>(<argument><expr><name>freep</name></expr></argument>, <argument><expr><name>bitmapbit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Get write-lock on metapage to update firstfree */</comment>
	<expr_stmt><expr><call><name>LockBuffer</name><argument_list>(<argument><expr><name>metabuf</name></expr></argument>, <argument><expr><name>BUFFER_LOCK_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* This operation needs to log multiple tuples, prepare WAL for that */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>RelationNeedsWAL</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>XLogEnsureRecordSpace</name><argument_list>(<argument><expr><name>HASH_XLOG_FREE_OVFL_BUFS</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>+</operator> <name>nitups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>START_CRIT_SECTION</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * we have to insert tuples on the "write" page, being careful to preserve
	 * hashkey ordering.  (If we insert many tuples into the same "write" page
	 * it would be worth qsort'ing them).
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>nitups</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>_hash_pgaddmultitup</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>wbuf</name></expr></argument>, <argument><expr><name>itups</name></expr></argument>, <argument><expr><name>itup_offsets</name></expr></argument>, <argument><expr><name>nitups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MarkBufferDirty</name><argument_list>(<argument><expr><name>wbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Reinitialize the freed overflow page.  Just zeroing the page won't
	 * work, because WAL replay routines expect pages to be initialized. See
	 * explanation of RBM_NORMAL mode atop XLogReadBufferExtended.  We are
	 * careful to make the special space valid here so that tools like
	 * pageinspect won't get confused.
	 */</comment>
	<expr_stmt><expr><call><name>_hash_pageinit</name><argument_list>(<argument><expr><name>ovflpage</name></expr></argument>, <argument><expr><call><name>BufferGetPageSize</name><argument_list>(<argument><expr><name>ovflbuf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ovflopaque</name> <operator>=</operator> <operator>(</operator><name>HashPageOpaque</name><operator>)</operator> <call><name>PageGetSpecialPointer</name><argument_list>(<argument><expr><name>ovflpage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ovflopaque</name><operator>-&gt;</operator><name>hasho_prevblkno</name></name> <operator>=</operator> <name>InvalidBlockNumber</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ovflopaque</name><operator>-&gt;</operator><name>hasho_nextblkno</name></name> <operator>=</operator> <name>InvalidBlockNumber</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ovflopaque</name><operator>-&gt;</operator><name>hasho_bucket</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ovflopaque</name><operator>-&gt;</operator><name>hasho_flag</name></name> <operator>=</operator> <name>LH_UNUSED_PAGE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ovflopaque</name><operator>-&gt;</operator><name>hasho_page_id</name></name> <operator>=</operator> <name>HASHO_PAGE_ID</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>MarkBufferDirty</name><argument_list>(<argument><expr><name>ovflbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>BufferIsValid</name><argument_list>(<argument><expr><name>prevbuf</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Page</name></type>		<name>prevpage</name> <init>= <expr><call><name>BufferGetPage</name><argument_list>(<argument><expr><name>prevbuf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>HashPageOpaque</name></type> <name>prevopaque</name> <init>= <expr><operator>(</operator><name>HashPageOpaque</name><operator>)</operator> <call><name>PageGetSpecialPointer</name><argument_list>(<argument><expr><name>prevpage</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>prevopaque</name><operator>-&gt;</operator><name>hasho_bucket</name></name> <operator>==</operator> <name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>prevopaque</name><operator>-&gt;</operator><name>hasho_nextblkno</name></name> <operator>=</operator> <name>nextblkno</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MarkBufferDirty</name><argument_list>(<argument><expr><name>prevbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>BufferIsValid</name><argument_list>(<argument><expr><name>nextbuf</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Page</name></type>		<name>nextpage</name> <init>= <expr><call><name>BufferGetPage</name><argument_list>(<argument><expr><name>nextbuf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>HashPageOpaque</name></type> <name>nextopaque</name> <init>= <expr><operator>(</operator><name>HashPageOpaque</name><operator>)</operator> <call><name>PageGetSpecialPointer</name><argument_list>(<argument><expr><name>nextpage</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>nextopaque</name><operator>-&gt;</operator><name>hasho_bucket</name></name> <operator>==</operator> <name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>nextopaque</name><operator>-&gt;</operator><name>hasho_prevblkno</name></name> <operator>=</operator> <name>prevblkno</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MarkBufferDirty</name><argument_list>(<argument><expr><name>nextbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Clear the bitmap bit to indicate that this overflow page is free */</comment>
	<expr_stmt><expr><call><name>CLRBIT</name><argument_list>(<argument><expr><name>freep</name></expr></argument>, <argument><expr><name>bitmapbit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MarkBufferDirty</name><argument_list>(<argument><expr><name>mapbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* if this is now the first free page, update hashm_firstfree */</comment>
	<if_stmt><if>if <condition>(<expr><name>ovflbitno</name> <operator>&lt;</operator> <name><name>metap</name><operator>-&gt;</operator><name>hashm_firstfree</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>metap</name><operator>-&gt;</operator><name>hashm_firstfree</name></name> <operator>=</operator> <name>ovflbitno</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>update_metap</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MarkBufferDirty</name><argument_list>(<argument><expr><name>metabuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* XLOG stuff */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>RelationNeedsWAL</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>xl_hash_squeeze_page</name></type> <name>xlrec</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>XLogRecPtr</name></type>	<name>recptr</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>xlrec</name><operator>.</operator><name>prevblkno</name></name> <operator>=</operator> <name>prevblkno</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>xlrec</name><operator>.</operator><name>nextblkno</name></name> <operator>=</operator> <name>nextblkno</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>xlrec</name><operator>.</operator><name>ntups</name></name> <operator>=</operator> <name>nitups</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>xlrec</name><operator>.</operator><name>is_prim_bucket_same_wrt</name></name> <operator>=</operator> <operator>(</operator><name>wbuf</name> <operator>==</operator> <name>bucketbuf</name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>xlrec</name><operator>.</operator><name>is_prev_bucket_same_wrt</name></name> <operator>=</operator> <operator>(</operator><name>wbuf</name> <operator>==</operator> <name>prevbuf</name><operator>)</operator></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>XLogBeginInsert</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>XLogRegisterData</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>xlrec</name></expr></argument>, <argument><expr><name>SizeOfHashSqueezePage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * bucket buffer needs to be registered to ensure that we can acquire
		 * a cleanup lock on it during replay.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>xlrec</name><operator>.</operator><name>is_prim_bucket_same_wrt</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>XLogRegisterBuffer</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bucketbuf</name></expr></argument>, <argument><expr><name>REGBUF_STANDARD</name> <operator>|</operator> <name>REGBUF_NO_IMAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>XLogRegisterBuffer</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>wbuf</name></expr></argument>, <argument><expr><name>REGBUF_STANDARD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>xlrec</name><operator>.</operator><name>ntups</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>XLogRegisterBufData</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>itup_offsets</name></expr></argument>,
								<argument><expr><name>nitups</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OffsetNumber</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nitups</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>XLogRegisterBufData</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>itups</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>tups_size</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>XLogRegisterBuffer</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>ovflbuf</name></expr></argument>, <argument><expr><name>REGBUF_STANDARD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * If prevpage and the writepage (block in which we are moving tuples
		 * from overflow) are same, then no need to separately register
		 * prevpage.  During replay, we can directly update the nextblock in
		 * writepage.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>BufferIsValid</name><argument_list>(<argument><expr><name>prevbuf</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>xlrec</name><operator>.</operator><name>is_prev_bucket_same_wrt</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>XLogRegisterBuffer</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>prevbuf</name></expr></argument>, <argument><expr><name>REGBUF_STANDARD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>BufferIsValid</name><argument_list>(<argument><expr><name>nextbuf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>XLogRegisterBuffer</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>nextbuf</name></expr></argument>, <argument><expr><name>REGBUF_STANDARD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>XLogRegisterBuffer</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>mapbuf</name></expr></argument>, <argument><expr><name>REGBUF_STANDARD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>XLogRegisterBufData</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>bitmapbit</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>update_metap</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>XLogRegisterBuffer</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>metabuf</name></expr></argument>, <argument><expr><name>REGBUF_STANDARD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>XLogRegisterBufData</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>metap</name><operator>-&gt;</operator><name>hashm_firstfree</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>recptr</name> <operator>=</operator> <call><name>XLogInsert</name><argument_list>(<argument><expr><name>RM_HASH_ID</name></expr></argument>, <argument><expr><name>XLOG_HASH_SQUEEZE_PAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>PageSetLSN</name><argument_list>(<argument><expr><call><name>BufferGetPage</name><argument_list>(<argument><expr><name>wbuf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>recptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PageSetLSN</name><argument_list>(<argument><expr><call><name>BufferGetPage</name><argument_list>(<argument><expr><name>ovflbuf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>recptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>BufferIsValid</name><argument_list>(<argument><expr><name>prevbuf</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>xlrec</name><operator>.</operator><name>is_prev_bucket_same_wrt</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PageSetLSN</name><argument_list>(<argument><expr><call><name>BufferGetPage</name><argument_list>(<argument><expr><name>prevbuf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>recptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>BufferIsValid</name><argument_list>(<argument><expr><name>nextbuf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PageSetLSN</name><argument_list>(<argument><expr><call><name>BufferGetPage</name><argument_list>(<argument><expr><name>nextbuf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>recptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>PageSetLSN</name><argument_list>(<argument><expr><call><name>BufferGetPage</name><argument_list>(<argument><expr><name>mapbuf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>recptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>update_metap</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PageSetLSN</name><argument_list>(<argument><expr><call><name>BufferGetPage</name><argument_list>(<argument><expr><name>metabuf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>recptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>END_CRIT_SECTION</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* release previous bucket if it is not same as write bucket */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>BufferIsValid</name><argument_list>(<argument><expr><name>prevbuf</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>prevblkno</name> <operator>!=</operator> <name>writeblkno</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>_hash_relbuf</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>prevbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>BufferIsValid</name><argument_list>(<argument><expr><name>ovflbuf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>_hash_relbuf</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>ovflbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>BufferIsValid</name><argument_list>(<argument><expr><name>nextbuf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>_hash_relbuf</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>nextbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>_hash_relbuf</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>mapbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>_hash_relbuf</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>metabuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>nextblkno</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 *	_hash_initbitmapbuffer()
 *
 *	 Initialize a new bitmap page.  All bits in the new bitmap page are set to
 *	 "1", indicating "in use".
 */</comment>
<function><type><name>void</name></type>
<name>_hash_initbitmapbuffer</name><parameter_list>(<parameter><decl><type><name>Buffer</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>uint16</name></type> <name>bmsize</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>initpage</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Page</name></type>		<name>pg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HashPageOpaque</name></type> <name>op</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name>	   <modifier>*</modifier></type><name>freep</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>pg</name> <operator>=</operator> <call><name>BufferGetPage</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* initialize the page */</comment>
	<if_stmt><if>if <condition>(<expr><name>initpage</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>_hash_pageinit</name><argument_list>(<argument><expr><name>pg</name></expr></argument>, <argument><expr><call><name>BufferGetPageSize</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* initialize the page's special space */</comment>
	<expr_stmt><expr><name>op</name> <operator>=</operator> <operator>(</operator><name>HashPageOpaque</name><operator>)</operator> <call><name>PageGetSpecialPointer</name><argument_list>(<argument><expr><name>pg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>hasho_prevblkno</name></name> <operator>=</operator> <name>InvalidBlockNumber</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>hasho_nextblkno</name></name> <operator>=</operator> <name>InvalidBlockNumber</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>hasho_bucket</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>hasho_flag</name></name> <operator>=</operator> <name>LH_BITMAP_PAGE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>hasho_page_id</name></name> <operator>=</operator> <name>HASHO_PAGE_ID</name></expr>;</expr_stmt>

	<comment type="block">/* set all of the bits to 1 */</comment>
	<expr_stmt><expr><name>freep</name> <operator>=</operator> <call><name>HashPageGetBitmap</name><argument_list>(<argument><expr><name>pg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>freep</name></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><name>bmsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Set pd_lower just past the end of the bitmap page data.  We could even
	 * set pd_lower equal to pd_upper, but this is more precise and makes the
	 * page look compressible to xlog.c.
	 */</comment>
	<expr_stmt><expr><operator>(</operator><operator>(</operator><name>PageHeader</name><operator>)</operator> <name>pg</name><operator>)</operator><operator>-&gt;</operator><name>pd_lower</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>freep</name> <operator>+</operator> <name>bmsize</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>pg</name></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 *	_hash_squeezebucket(rel, bucket)
 *
 *	Try to squeeze the tuples onto pages occurring earlier in the
 *	bucket chain in an attempt to free overflow pages. When we start
 *	the "squeezing", the page from which we start taking tuples (the
 *	"read" page) is the last bucket in the bucket chain and the page
 *	onto which we start squeezing tuples (the "write" page) is the
 *	first page in the bucket chain.  The read page works backward and
 *	the write page works forward; the procedure terminates when the
 *	read page and write page are the same page.
 *
 *	At completion of this procedure, it is guaranteed that all pages in
 *	the bucket are nonempty, unless the bucket is totally empty (in
 *	which case all overflow pages will be freed).  The original implementation
 *	required that to be true on entry as well, but it's a lot easier for
 *	callers to leave empty overflow pages and let this guy clean it up.
 *
 *	Caller must acquire cleanup lock on the primary page of the target
 *	bucket to exclude any scans that are in progress, which could easily
 *	be confused into returning the same tuple more than once or some tuples
 *	not at all by the rearrangement we are performing here.  To prevent
 *	any concurrent scan to cross the squeeze scan we use lock chaining
 *	similar to hashbucketcleanup.  Refer comments atop hashbucketcleanup.
 *
 *	We need to retain a pin on the primary bucket to ensure that no concurrent
 *	split can start.
 *
 *	Since this function is invoked in VACUUM, we provide an access strategy
 *	parameter that controls fetches of the bucket pages.
 */</comment>
<function><type><name>void</name></type>
<name>_hash_squeezebucket</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>,
					<parameter><decl><type><name>Bucket</name></type> <name>bucket</name></decl></parameter>,
					<parameter><decl><type><name>BlockNumber</name></type> <name>bucket_blkno</name></decl></parameter>,
					<parameter><decl><type><name>Buffer</name></type> <name>bucket_buf</name></decl></parameter>,
					<parameter><decl><type><name>BufferAccessStrategy</name></type> <name>bstrategy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BlockNumber</name></type> <name>wblkno</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BlockNumber</name></type> <name>rblkno</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Buffer</name></type>		<name>wbuf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Buffer</name></type>		<name>rbuf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Page</name></type>		<name>wpage</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Page</name></type>		<name>rpage</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HashPageOpaque</name></type> <name>wopaque</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HashPageOpaque</name></type> <name>ropaque</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * start squeezing into the primary bucket page.
	 */</comment>
	<expr_stmt><expr><name>wblkno</name> <operator>=</operator> <name>bucket_blkno</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>wbuf</name> <operator>=</operator> <name>bucket_buf</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>wpage</name> <operator>=</operator> <call><name>BufferGetPage</name><argument_list>(<argument><expr><name>wbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>wopaque</name> <operator>=</operator> <operator>(</operator><name>HashPageOpaque</name><operator>)</operator> <call><name>PageGetSpecialPointer</name><argument_list>(<argument><expr><name>wpage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * if there aren't any overflow pages, there's nothing to squeeze. caller
	 * is responsible for releasing the pin on primary bucket page.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>BlockNumberIsValid</name><argument_list>(<argument><expr><name><name>wopaque</name><operator>-&gt;</operator><name>hasho_nextblkno</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>LockBuffer</name><argument_list>(<argument><expr><name>wbuf</name></expr></argument>, <argument><expr><name>BUFFER_LOCK_UNLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Find the last page in the bucket chain by starting at the base bucket
	 * page and working forward.  Note: we assume that a hash bucket chain is
	 * usually smaller than the buffer ring being used by VACUUM, else using
	 * the access strategy here would be counterproductive.
	 */</comment>
	<expr_stmt><expr><name>rbuf</name> <operator>=</operator> <name>InvalidBuffer</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ropaque</name> <operator>=</operator> <name>wopaque</name></expr>;</expr_stmt>
	<do>do
	<block>{<block_content>
		<expr_stmt><expr><name>rblkno</name> <operator>=</operator> <name><name>ropaque</name><operator>-&gt;</operator><name>hasho_nextblkno</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>rbuf</name> <operator>!=</operator> <name>InvalidBuffer</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>_hash_relbuf</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>rbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>rbuf</name> <operator>=</operator> <call><name>_hash_getbuf_with_strategy</name><argument_list>(<argument><expr><name>rel</name></expr></argument>,
										  <argument><expr><name>rblkno</name></expr></argument>,
										  <argument><expr><name>HASH_WRITE</name></expr></argument>,
										  <argument><expr><name>LH_OVERFLOW_PAGE</name></expr></argument>,
										  <argument><expr><name>bstrategy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>rpage</name> <operator>=</operator> <call><name>BufferGetPage</name><argument_list>(<argument><expr><name>rbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ropaque</name> <operator>=</operator> <operator>(</operator><name>HashPageOpaque</name><operator>)</operator> <call><name>PageGetSpecialPointer</name><argument_list>(<argument><expr><name>rpage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>ropaque</name><operator>-&gt;</operator><name>hasho_bucket</name></name> <operator>==</operator> <name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block> while <condition>(<expr><call><name>BlockNumberIsValid</name><argument_list>(<argument><expr><name><name>ropaque</name><operator>-&gt;</operator><name>hasho_nextblkno</name></name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

	<comment type="block">/*
	 * squeeze the tuples.
	 */</comment>
	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OffsetNumber</name></type> <name>roffnum</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>OffsetNumber</name></type> <name>maxroffnum</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>OffsetNumber</name></type> <name><name>deletable</name><index>[<expr><name>MaxOffsetNumber</name></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>IndexTuple</name></type>	<name><name>itups</name><index>[<expr><name>MaxIndexTuplesPerPage</name></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Size</name></type>		<name><name>tups_size</name><index>[<expr><name>MaxIndexTuplesPerPage</name></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>OffsetNumber</name></type> <name><name>itup_offsets</name><index>[<expr><name>MaxIndexTuplesPerPage</name></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint16</name></type>		<name>ndeletable</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint16</name></type>		<name>nitups</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Size</name></type>		<name>all_tups_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>retain_pin</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<label><name>readpage</name>:</label>
		<comment type="block">/* Scan each tuple in "read" page */</comment>
		<expr_stmt><expr><name>maxroffnum</name> <operator>=</operator> <call><name>PageGetMaxOffsetNumber</name><argument_list>(<argument><expr><name>rpage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>roffnum</name> <operator>=</operator> <name>FirstOffsetNumber</name></expr>;</init>
			 <condition><expr><name>roffnum</name> <operator>&lt;=</operator> <name>maxroffnum</name></expr>;</condition>
			 <incr><expr><name>roffnum</name> <operator>=</operator> <call><name>OffsetNumberNext</name><argument_list>(<argument><expr><name>roffnum</name></expr></argument>)</argument_list></call></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>IndexTuple</name></type>	<name>itup</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Size</name></type>		<name>itemsz</name></decl>;</decl_stmt>

			<comment type="block">/* skip dead tuples */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>ItemIdIsDead</name><argument_list>(<argument><expr><call><name>PageGetItemId</name><argument_list>(<argument><expr><name>rpage</name></expr></argument>, <argument><expr><name>roffnum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>itup</name> <operator>=</operator> <operator>(</operator><name>IndexTuple</name><operator>)</operator> <call><name>PageGetItem</name><argument_list>(<argument><expr><name>rpage</name></expr></argument>,
											<argument><expr><call><name>PageGetItemId</name><argument_list>(<argument><expr><name>rpage</name></expr></argument>, <argument><expr><name>roffnum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>itemsz</name> <operator>=</operator> <call><name>IndexTupleSize</name><argument_list>(<argument><expr><name>itup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>itemsz</name> <operator>=</operator> <call><name>MAXALIGN</name><argument_list>(<argument><expr><name>itemsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/*
			 * Walk up the bucket chain, looking for a page big enough for
			 * this item and all other accumulated items.  Exit if we reach
			 * the read page.
			 */</comment>
			<while>while <condition>(<expr><call><name>PageGetFreeSpaceForMultipleTuples</name><argument_list>(<argument><expr><name>wpage</name></expr></argument>, <argument><expr><name>nitups</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <operator>(</operator><name>all_tups_size</name> <operator>+</operator> <name>itemsz</name><operator>)</operator></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>Buffer</name></type>		<name>next_wbuf</name> <init>= <expr><name>InvalidBuffer</name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>bool</name></type>		<name>tups_moved</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>PageIsEmpty</name><argument_list>(<argument><expr><name>wpage</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><name>wblkno</name> <operator>==</operator> <name>bucket_blkno</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>retain_pin</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<expr_stmt><expr><name>wblkno</name> <operator>=</operator> <name><name>wopaque</name><operator>-&gt;</operator><name>hasho_nextblkno</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>BlockNumberIsValid</name><argument_list>(<argument><expr><name>wblkno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/* don't need to move to next page if we reached the read page */</comment>
				<if_stmt><if>if <condition>(<expr><name>wblkno</name> <operator>!=</operator> <name>rblkno</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>next_wbuf</name> <operator>=</operator> <call><name>_hash_getbuf_with_strategy</name><argument_list>(<argument><expr><name>rel</name></expr></argument>,
														   <argument><expr><name>wblkno</name></expr></argument>,
														   <argument><expr><name>HASH_WRITE</name></expr></argument>,
														   <argument><expr><name>LH_OVERFLOW_PAGE</name></expr></argument>,
														   <argument><expr><name>bstrategy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><name>nitups</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>nitups</name> <operator>==</operator> <name>ndeletable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/*
					 * This operation needs to log multiple tuples, prepare
					 * WAL for that.
					 */</comment>
					<if_stmt><if>if <condition>(<expr><call><name>RelationNeedsWAL</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>XLogEnsureRecordSpace</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>+</operator> <name>nitups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

					<expr_stmt><expr><call><name>START_CRIT_SECTION</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/*
					 * we have to insert tuples on the "write" page, being
					 * careful to preserve hashkey ordering.  (If we insert
					 * many tuples into the same "write" page it would be
					 * worth qsort'ing them).
					 */</comment>
					<expr_stmt><expr><call><name>_hash_pgaddmultitup</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>wbuf</name></expr></argument>, <argument><expr><name>itups</name></expr></argument>, <argument><expr><name>itup_offsets</name></expr></argument>, <argument><expr><name>nitups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>MarkBufferDirty</name><argument_list>(<argument><expr><name>wbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* Delete tuples we already moved off read page */</comment>
					<expr_stmt><expr><call><name>PageIndexMultiDelete</name><argument_list>(<argument><expr><name>rpage</name></expr></argument>, <argument><expr><name>deletable</name></expr></argument>, <argument><expr><name>ndeletable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>MarkBufferDirty</name><argument_list>(<argument><expr><name>rbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* XLOG stuff */</comment>
					<if_stmt><if>if <condition>(<expr><call><name>RelationNeedsWAL</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>)</condition>
					<block>{<block_content>
						<decl_stmt><decl><type><name>XLogRecPtr</name></type>	<name>recptr</name></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>xl_hash_move_page_contents</name></type> <name>xlrec</name></decl>;</decl_stmt>

						<expr_stmt><expr><name><name>xlrec</name><operator>.</operator><name>ntups</name></name> <operator>=</operator> <name>nitups</name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>xlrec</name><operator>.</operator><name>is_prim_bucket_same_wrt</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>wbuf</name> <operator>==</operator> <name>bucket_buf</name><operator>)</operator></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</expr_stmt>

						<expr_stmt><expr><call><name>XLogBeginInsert</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>XLogRegisterData</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>xlrec</name></expr></argument>, <argument><expr><name>SizeOfHashMovePageContents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<comment type="block">/*
						 * bucket buffer needs to be registered to ensure that
						 * we can acquire a cleanup lock on it during replay.
						 */</comment>
						<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>xlrec</name><operator>.</operator><name>is_prim_bucket_same_wrt</name></name></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><call><name>XLogRegisterBuffer</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bucket_buf</name></expr></argument>, <argument><expr><name>REGBUF_STANDARD</name> <operator>|</operator> <name>REGBUF_NO_IMAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

						<expr_stmt><expr><call><name>XLogRegisterBuffer</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>wbuf</name></expr></argument>, <argument><expr><name>REGBUF_STANDARD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>XLogRegisterBufData</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>itup_offsets</name></expr></argument>,
											<argument><expr><name>nitups</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OffsetNumber</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nitups</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
							<expr_stmt><expr><call><name>XLogRegisterBufData</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>itups</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>tups_size</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

						<expr_stmt><expr><call><name>XLogRegisterBuffer</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>rbuf</name></expr></argument>, <argument><expr><name>REGBUF_STANDARD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>XLogRegisterBufData</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>deletable</name></expr></argument>,
											<argument><expr><name>ndeletable</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OffsetNumber</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<expr_stmt><expr><name>recptr</name> <operator>=</operator> <call><name>XLogInsert</name><argument_list>(<argument><expr><name>RM_HASH_ID</name></expr></argument>, <argument><expr><name>XLOG_HASH_MOVE_PAGE_CONTENTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<expr_stmt><expr><call><name>PageSetLSN</name><argument_list>(<argument><expr><call><name>BufferGetPage</name><argument_list>(<argument><expr><name>wbuf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>recptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>PageSetLSN</name><argument_list>(<argument><expr><call><name>BufferGetPage</name><argument_list>(<argument><expr><name>rbuf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>recptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>

					<expr_stmt><expr><call><name>END_CRIT_SECTION</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name>tups_moved</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>

				<comment type="block">/*
				 * release the lock on previous page after acquiring the lock
				 * on next page
				 */</comment>
				<if_stmt><if>if <condition>(<expr><name>retain_pin</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>LockBuffer</name><argument_list>(<argument><expr><name>wbuf</name></expr></argument>, <argument><expr><name>BUFFER_LOCK_UNLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>_hash_relbuf</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>wbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

				<comment type="block">/* nothing more to do if we reached the read page */</comment>
				<if_stmt><if>if <condition>(<expr><name>rblkno</name> <operator>==</operator> <name>wblkno</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>_hash_relbuf</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>rbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return;</return>
				</block_content>}</block></if></if_stmt>

				<expr_stmt><expr><name>wbuf</name> <operator>=</operator> <name>next_wbuf</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>wpage</name> <operator>=</operator> <call><name>BufferGetPage</name><argument_list>(<argument><expr><name>wbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>wopaque</name> <operator>=</operator> <operator>(</operator><name>HashPageOpaque</name><operator>)</operator> <call><name>PageGetSpecialPointer</name><argument_list>(<argument><expr><name>wpage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>wopaque</name><operator>-&gt;</operator><name>hasho_bucket</name></name> <operator>==</operator> <name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>retain_pin</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

				<comment type="block">/* be tidy */</comment>
				<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nitups</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>itups</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
				<expr_stmt><expr><name>nitups</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>all_tups_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>ndeletable</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

				<comment type="block">/*
				 * after moving the tuples, rpage would have been compacted,
				 * so we need to rescan it.
				 */</comment>
				<if_stmt><if>if <condition>(<expr><name>tups_moved</name></expr>)</condition><block type="pseudo"><block_content>
					<goto>goto <name>readpage</name>;</goto></block_content></block></if></if_stmt>
			</block_content>}</block></while>

			<comment type="block">/* remember tuple for deletion from "read" page */</comment>
			<expr_stmt><expr><name><name>deletable</name><index>[<expr><name>ndeletable</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>roffnum</name></expr>;</expr_stmt>

			<comment type="block">/*
			 * we need a copy of index tuples as they can be freed as part of
			 * overflow page, however we need them to write a WAL record in
			 * _hash_freeovflpage.
			 */</comment>
			<expr_stmt><expr><name><name>itups</name><index>[<expr><name>nitups</name></expr>]</index></name> <operator>=</operator> <call><name>CopyIndexTuple</name><argument_list>(<argument><expr><name>itup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tups_size</name><index>[<expr><name>nitups</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>itemsz</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>all_tups_size</name> <operator>+=</operator> <name>itemsz</name></expr>;</expr_stmt>
		</block_content>}</block></for>

		<comment type="block">/*
		 * If we reach here, there are no live tuples on the "read" page ---
		 * it was empty when we got to it, or we moved them all.  So we can
		 * just free the page without bothering with deleting tuples
		 * individually.  Then advance to the previous "read" page.
		 *
		 * Tricky point here: if our read and write pages are adjacent in the
		 * bucket chain, our write lock on wbuf will conflict with
		 * _hash_freeovflpage's attempt to update the sibling links of the
		 * removed page.  In that case, we don't need to lock it again.
		 */</comment>
		<expr_stmt><expr><name>rblkno</name> <operator>=</operator> <name><name>ropaque</name><operator>-&gt;</operator><name>hasho_prevblkno</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>BlockNumberIsValid</name><argument_list>(<argument><expr><name>rblkno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* free this overflow page (releases rbuf) */</comment>
		<expr_stmt><expr><call><name>_hash_freeovflpage</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>bucket_buf</name></expr></argument>, <argument><expr><name>rbuf</name></expr></argument>, <argument><expr><name>wbuf</name></expr></argument>, <argument><expr><name>itups</name></expr></argument>, <argument><expr><name>itup_offsets</name></expr></argument>,
						   <argument><expr><name>tups_size</name></expr></argument>, <argument><expr><name>nitups</name></expr></argument>, <argument><expr><name>bstrategy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* be tidy */</comment>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nitups</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>itups</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

		<comment type="block">/* are we freeing the page adjacent to wbuf? */</comment>
		<if_stmt><if>if <condition>(<expr><name>rblkno</name> <operator>==</operator> <name>wblkno</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* retain the pin on primary bucket page till end of bucket scan */</comment>
			<if_stmt><if>if <condition>(<expr><name>wblkno</name> <operator>==</operator> <name>bucket_blkno</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>LockBuffer</name><argument_list>(<argument><expr><name>wbuf</name></expr></argument>, <argument><expr><name>BUFFER_LOCK_UNLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>_hash_relbuf</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>wbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>rbuf</name> <operator>=</operator> <call><name>_hash_getbuf_with_strategy</name><argument_list>(<argument><expr><name>rel</name></expr></argument>,
										  <argument><expr><name>rblkno</name></expr></argument>,
										  <argument><expr><name>HASH_WRITE</name></expr></argument>,
										  <argument><expr><name>LH_OVERFLOW_PAGE</name></expr></argument>,
										  <argument><expr><name>bstrategy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>rpage</name> <operator>=</operator> <call><name>BufferGetPage</name><argument_list>(<argument><expr><name>rbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ropaque</name> <operator>=</operator> <operator>(</operator><name>HashPageOpaque</name><operator>)</operator> <call><name>PageGetSpecialPointer</name><argument_list>(<argument><expr><name>rpage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>ropaque</name><operator>-&gt;</operator><name>hasho_bucket</name></name> <operator>==</operator> <name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* NOTREACHED */</comment>
</block_content>}</block></function>
</unit>
