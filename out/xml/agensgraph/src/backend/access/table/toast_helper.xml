<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/backend/access/table/toast_helper.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * toast_helper.c
 *	  Helper functions for table AMs implementing compressed or
 *    out-of-line storage of varlena attributes.
 *
 * Copyright (c) 2000-2020, PostgreSQL Global Development Group
 *
 * IDENTIFICATION
 *	  src/backend/access/table/toast_helper.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/detoast.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/table.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/toast_helper.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/toast_internals.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type_d.h"</cpp:file></cpp:include>


<comment type="block">/*
 * Prepare to TOAST a tuple.
 *
 * tupleDesc, toast_values, and toast_isnull are required parameters; they
 * provide the necessary details about the tuple to be toasted.
 *
 * toast_oldvalues and toast_oldisnull should be NULL for a newly-inserted
 * tuple; for an update, they should describe the existing tuple.
 *
 * All of these arrays should have a length equal to tupleDesc-&gt;natts.
 *
 * On return, toast_flags and toast_attr will have been initialized.
 * toast_flags is just a single uint8, but toast_attr is an caller-provided
 * array with a length equal to tupleDesc-&gt;natts.  The caller need not
 * perform any initialization of the array before calling this function.
 */</comment>
<function><type><name>void</name></type>
<name>toast_tuple_init</name><parameter_list>(<parameter><decl><type><name>ToastTupleContext</name> <modifier>*</modifier></type><name>ttc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>tupleDesc</name> <init>= <expr><name><name>ttc</name><operator>-&gt;</operator><name>ttc_rel</name><operator>-&gt;</operator><name>rd_att</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>numAttrs</name> <init>= <expr><name><name>tupleDesc</name><operator>-&gt;</operator><name>natts</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>ttc</name><operator>-&gt;</operator><name>ttc_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numAttrs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Form_pg_attribute</name></type> <name>att</name> <init>= <expr><call><name>TupleDescAttr</name><argument_list>(<argument><expr><name>tupleDesc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>struct</name> <name>varlena</name></name> <modifier>*</modifier></type><name>old_value</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>struct</name> <name>varlena</name></name> <modifier>*</modifier></type><name>new_value</name></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>ttc</name><operator>-&gt;</operator><name>ttc_attr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tai_colflags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ttc</name><operator>-&gt;</operator><name>ttc_attr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tai_oldexternal</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>ttc</name><operator>-&gt;</operator><name>ttc_oldvalues</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * For UPDATE get the old and new values of this attribute
			 */</comment>
			<expr_stmt><expr><name>old_value</name> <operator>=</operator>
				<operator>(</operator>struct <name>varlena</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name><name>ttc</name><operator>-&gt;</operator><name>ttc_oldvalues</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>new_value</name> <operator>=</operator>
				<operator>(</operator>struct <name>varlena</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name><name>ttc</name><operator>-&gt;</operator><name>ttc_values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/*
			 * If the old value is stored on disk, check if it has changed so
			 * we have to delete it later.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>att</name><operator>-&gt;</operator><name>attlen</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ttc</name><operator>-&gt;</operator><name>ttc_oldisnull</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator>
				<call><name>VARATT_IS_EXTERNAL_ONDISK</name><argument_list>(<argument><expr><name>old_value</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>ttc</name><operator>-&gt;</operator><name>ttc_isnull</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator>
					<operator>!</operator><call><name>VARATT_IS_EXTERNAL_ONDISK</name><argument_list>(<argument><expr><name>new_value</name></expr></argument>)</argument_list></call> <operator>||</operator>
					<call><name>memcmp</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>old_value</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>new_value</name></expr></argument>,
						   <argument><expr><call><name>VARSIZE_EXTERNAL</name><argument_list>(<argument><expr><name>old_value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/*
					 * The old external stored value isn't needed any more
					 * after the update
					 */</comment>
					<expr_stmt><expr><name><name>ttc</name><operator>-&gt;</operator><name>ttc_attr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tai_colflags</name> <operator>|=</operator> <name>TOASTCOL_NEEDS_DELETE_OLD</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>ttc</name><operator>-&gt;</operator><name>ttc_flags</name></name> <operator>|=</operator> <name>TOAST_NEEDS_DELETE_OLD</name></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<comment type="block">/*
					 * This attribute isn't changed by this update so we reuse
					 * the original reference to the old value in the new
					 * tuple.
					 */</comment>
					<expr_stmt><expr><name><name>ttc</name><operator>-&gt;</operator><name>ttc_attr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tai_colflags</name> <operator>|=</operator> <name>TOASTCOL_IGNORE</name></expr>;</expr_stmt>
					<continue>continue;</continue>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/*
			 * For INSERT simply get the new value
			 */</comment>
			<expr_stmt><expr><name>new_value</name> <operator>=</operator> <operator>(</operator>struct <name>varlena</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name><name>ttc</name><operator>-&gt;</operator><name>ttc_values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<comment type="block">/*
		 * Handle NULL attributes
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>ttc</name><operator>-&gt;</operator><name>ttc_isnull</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>ttc</name><operator>-&gt;</operator><name>ttc_attr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tai_colflags</name> <operator>|=</operator> <name>TOASTCOL_IGNORE</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ttc</name><operator>-&gt;</operator><name>ttc_flags</name></name> <operator>|=</operator> <name>TOAST_HAS_NULLS</name></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * Now look at varlena attributes
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>att</name><operator>-&gt;</operator><name>attlen</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * If the table's attribute says PLAIN always, force it so.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>att</name><operator>-&gt;</operator><name>attstorage</name></name> <operator>==</operator> <name>TYPSTORAGE_PLAIN</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>ttc</name><operator>-&gt;</operator><name>ttc_attr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tai_colflags</name> <operator>|=</operator> <name>TOASTCOL_IGNORE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<comment type="block">/*
			 * We took care of UPDATE above, so any external value we find
			 * still in the tuple must be someone else's that we cannot reuse
			 * (this includes the case of an out-of-line in-memory datum).
			 * Fetch it back (without decompression, unless we are forcing
			 * PLAIN storage).  If necessary, we'll push it out as a new
			 * external value below.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>VARATT_IS_EXTERNAL</name><argument_list>(<argument><expr><name>new_value</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>ttc</name><operator>-&gt;</operator><name>ttc_attr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tai_oldexternal</name> <operator>=</operator> <name>new_value</name></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>att</name><operator>-&gt;</operator><name>attstorage</name></name> <operator>==</operator> <name>TYPSTORAGE_PLAIN</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>new_value</name> <operator>=</operator> <call><name>detoast_attr</name><argument_list>(<argument><expr><name>new_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>new_value</name> <operator>=</operator> <call><name>detoast_external_attr</name><argument_list>(<argument><expr><name>new_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
				<expr_stmt><expr><name><name>ttc</name><operator>-&gt;</operator><name>ttc_values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>new_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>ttc</name><operator>-&gt;</operator><name>ttc_attr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tai_colflags</name> <operator>|=</operator> <name>TOASTCOL_NEEDS_FREE</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>ttc</name><operator>-&gt;</operator><name>ttc_flags</name></name> <operator>|=</operator> <operator>(</operator><name>TOAST_NEEDS_CHANGE</name> <operator>|</operator> <name>TOAST_NEEDS_FREE</name><operator>)</operator></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/*
			 * Remember the size of this attribute
			 */</comment>
			<expr_stmt><expr><name><name>ttc</name><operator>-&gt;</operator><name>ttc_attr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tai_size</name> <operator>=</operator> <call><name>VARSIZE_ANY</name><argument_list>(<argument><expr><name>new_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/*
			 * Not a varlena attribute, plain storage always
			 */</comment>
			<expr_stmt><expr><name><name>ttc</name><operator>-&gt;</operator><name>ttc_attr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tai_colflags</name> <operator>|=</operator> <name>TOASTCOL_IGNORE</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
 * Find the largest varlena attribute that satisfies certain criteria.
 *
 * The relevant column must not be marked TOASTCOL_IGNORE, and if the
 * for_compression flag is passed as true, it must also not be marked
 * TOASTCOL_INCOMPRESSIBLE.
 *
 * The column must have attstorage EXTERNAL or EXTENDED if check_main is
 * false, and must have attstorage MAIN if check_main is true.
 *
 * The column must have a minimum size of MAXALIGN(TOAST_POINTER_SIZE);
 * if not, no benefit is to be expected by compressing it.
 *
 * The return value is the index of the biggest suitable column, or
 * -1 if there is none.
 */</comment>
<function><type><name>int</name></type>
<name>toast_tuple_find_biggest_attribute</name><parameter_list>(<parameter><decl><type><name>ToastTupleContext</name> <modifier>*</modifier></type><name>ttc</name></decl></parameter>,
								   <parameter><decl><type><name>bool</name></type> <name>for_compression</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>check_main</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>tupleDesc</name> <init>= <expr><name><name>ttc</name><operator>-&gt;</operator><name>ttc_rel</name><operator>-&gt;</operator><name>rd_att</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>numAttrs</name> <init>= <expr><name><name>tupleDesc</name><operator>-&gt;</operator><name>natts</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>biggest_attno</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>biggest_size</name> <init>= <expr><call><name>MAXALIGN</name><argument_list>(<argument><expr><name>TOAST_POINTER_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>skip_colflags</name> <init>= <expr><name>TOASTCOL_IGNORE</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>for_compression</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>skip_colflags</name> <operator>|=</operator> <name>TOASTCOL_INCOMPRESSIBLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numAttrs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Form_pg_attribute</name></type> <name>att</name> <init>= <expr><call><name>TupleDescAttr</name><argument_list>(<argument><expr><name>tupleDesc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ttc</name><operator>-&gt;</operator><name>ttc_attr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tai_colflags</name> <operator>&amp;</operator> <name>skip_colflags</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>VARATT_IS_EXTERNAL</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name><name>ttc</name><operator>-&gt;</operator><name>ttc_values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>			<comment type="block">/* can't happen, toast_action would be PLAIN */</comment>
		<if_stmt><if>if <condition>(<expr><name>for_compression</name> <operator>&amp;&amp;</operator>
			<call><name>VARATT_IS_COMPRESSED</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name><name>ttc</name><operator>-&gt;</operator><name>ttc_values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>check_main</name> <operator>&amp;&amp;</operator> <name><name>att</name><operator>-&gt;</operator><name>attstorage</name></name> <operator>!=</operator> <name>TYPSTORAGE_MAIN</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>check_main</name> <operator>&amp;&amp;</operator> <name><name>att</name><operator>-&gt;</operator><name>attstorage</name></name> <operator>!=</operator> <name>TYPSTORAGE_EXTENDED</name> <operator>&amp;&amp;</operator>
			<name><name>att</name><operator>-&gt;</operator><name>attstorage</name></name> <operator>!=</operator> <name>TYPSTORAGE_EXTERNAL</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>ttc</name><operator>-&gt;</operator><name>ttc_attr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tai_size</name> <operator>&gt;</operator> <name>biggest_size</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>biggest_attno</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>biggest_size</name> <operator>=</operator> <name><name>ttc</name><operator>-&gt;</operator><name>ttc_attr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tai_size</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>biggest_attno</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Try compression for an attribute.
 *
 * If we find that the attribute is not compressible, mark it so.
 */</comment>
<function><type><name>void</name></type>
<name>toast_tuple_try_compression</name><parameter_list>(<parameter><decl><type><name>ToastTupleContext</name> <modifier>*</modifier></type><name>ttc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attribute</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Datum</name>	   <modifier>*</modifier></type><name>value</name> <init>= <expr><operator>&amp;</operator><name><name>ttc</name><operator>-&gt;</operator><name>ttc_values</name><index>[<expr><name>attribute</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>new_value</name> <init>= <expr><call><name>toast_compress_datum</name><argument_list>(<argument><expr><operator>*</operator><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ToastAttrInfo</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><operator>&amp;</operator><name><name>ttc</name><operator>-&gt;</operator><name>ttc_attr</name><index>[<expr><name>attribute</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>new_value</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* successful compression */</comment>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>attr</name><operator>-&gt;</operator><name>tai_colflags</name></name> <operator>&amp;</operator> <name>TOASTCOL_NEEDS_FREE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><operator>*</operator><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name>new_value</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>tai_colflags</name></name> <operator>|=</operator> <name>TOASTCOL_NEEDS_FREE</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>tai_size</name></name> <operator>=</operator> <call><name>VARSIZE</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><operator>*</operator><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ttc</name><operator>-&gt;</operator><name>ttc_flags</name></name> <operator>|=</operator> <operator>(</operator><name>TOAST_NEEDS_CHANGE</name> <operator>|</operator> <name>TOAST_NEEDS_FREE</name><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* incompressible, ignore on subsequent compression passes */</comment>
		<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>tai_colflags</name></name> <operator>|=</operator> <name>TOASTCOL_INCOMPRESSIBLE</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Move an attribute to external storage.
 */</comment>
<function><type><name>void</name></type>
<name>toast_tuple_externalize</name><parameter_list>(<parameter><decl><type><name>ToastTupleContext</name> <modifier>*</modifier></type><name>ttc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attribute</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Datum</name>	   <modifier>*</modifier></type><name>value</name> <init>= <expr><operator>&amp;</operator><name><name>ttc</name><operator>-&gt;</operator><name>ttc_values</name><index>[<expr><name>attribute</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>old_value</name> <init>= <expr><operator>*</operator><name>value</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ToastAttrInfo</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><operator>&amp;</operator><name><name>ttc</name><operator>-&gt;</operator><name>ttc_attr</name><index>[<expr><name>attribute</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>tai_colflags</name></name> <operator>|=</operator> <name>TOASTCOL_IGNORE</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <call><name>toast_save_datum</name><argument_list>(<argument><expr><name><name>ttc</name><operator>-&gt;</operator><name>ttc_rel</name></name></expr></argument>, <argument><expr><name>old_value</name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>tai_oldexternal</name></name></expr></argument>,
							  <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>attr</name><operator>-&gt;</operator><name>tai_colflags</name></name> <operator>&amp;</operator> <name>TOASTCOL_NEEDS_FREE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>old_value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>tai_colflags</name></name> <operator>|=</operator> <name>TOASTCOL_NEEDS_FREE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ttc</name><operator>-&gt;</operator><name>ttc_flags</name></name> <operator>|=</operator> <operator>(</operator><name>TOAST_NEEDS_CHANGE</name> <operator>|</operator> <name>TOAST_NEEDS_FREE</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Perform appropriate cleanup after one tuple has been subjected to TOAST.
 */</comment>
<function><type><name>void</name></type>
<name>toast_tuple_cleanup</name><parameter_list>(<parameter><decl><type><name>ToastTupleContext</name> <modifier>*</modifier></type><name>ttc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>tupleDesc</name> <init>= <expr><name><name>ttc</name><operator>-&gt;</operator><name>ttc_rel</name><operator>-&gt;</operator><name>rd_att</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>numAttrs</name> <init>= <expr><name><name>tupleDesc</name><operator>-&gt;</operator><name>natts</name></name></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * Free allocated temp values
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ttc</name><operator>-&gt;</operator><name>ttc_flags</name></name> <operator>&amp;</operator> <name>TOAST_NEEDS_FREE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numAttrs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>ToastAttrInfo</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><operator>&amp;</operator><name><name>ttc</name><operator>-&gt;</operator><name>ttc_attr</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>attr</name><operator>-&gt;</operator><name>tai_colflags</name></name> <operator>&amp;</operator> <name>TOASTCOL_NEEDS_FREE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name><name>ttc</name><operator>-&gt;</operator><name>ttc_values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Delete external values from the old tuple
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ttc</name><operator>-&gt;</operator><name>ttc_flags</name></name> <operator>&amp;</operator> <name>TOAST_NEEDS_DELETE_OLD</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numAttrs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>ToastAttrInfo</name> <modifier>*</modifier></type><name>attr</name> <init>= <expr><operator>&amp;</operator><name><name>ttc</name><operator>-&gt;</operator><name>ttc_attr</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>attr</name><operator>-&gt;</operator><name>tai_colflags</name></name> <operator>&amp;</operator> <name>TOASTCOL_NEEDS_DELETE_OLD</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>toast_delete_datum</name><argument_list>(<argument><expr><name><name>ttc</name><operator>-&gt;</operator><name>ttc_rel</name></name></expr></argument>, <argument><expr><name><name>ttc</name><operator>-&gt;</operator><name>ttc_oldvalues</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Check for external stored attributes and delete them from the secondary
 * relation.
 */</comment>
<function><type><name>void</name></type>
<name>toast_delete_external</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>, <parameter><decl><type><name>Datum</name> <modifier>*</modifier></type><name>values</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>isnull</name></decl></parameter>,
					  <parameter><decl><type><name>bool</name></type> <name>is_speculative</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>tupleDesc</name> <init>= <expr><name><name>rel</name><operator>-&gt;</operator><name>rd_att</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>numAttrs</name> <init>= <expr><name><name>tupleDesc</name><operator>-&gt;</operator><name>natts</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numAttrs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>TupleDescAttr</name><argument_list>(<argument><expr><name>tupleDesc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>attlen</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Datum</name></type>		<name>value</name> <init>= <expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>isnull</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><call><name>VARATT_IS_EXTERNAL_ONDISK</name><argument_list>(<argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>toast_delete_datum</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>is_speculative</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>
</unit>
