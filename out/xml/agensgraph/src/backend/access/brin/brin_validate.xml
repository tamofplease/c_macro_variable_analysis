<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/backend/access/brin/brin_validate.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * brin_validate.c
 *	  Opclass validator for BRIN.
 *
 * Portions Copyright (c) 1996-2020, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * IDENTIFICATION
 *	  src/backend/access/brin/brin_validate.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/amvalidate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/brin_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup_details.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_amop.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_amproc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_opclass.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_opfamily.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/regproc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/syscache.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Validator for a BRIN opclass.
 *
 * Some of the checks done here cover the whole opfamily, and therefore are
 * redundant when checking each opclass in a family.  But they don't run long
 * enough to be much of a problem, so we accept the duplication rather than
 * complicate the amvalidate API.
 */</comment>
<function><type><name>bool</name></type>
<name>brinvalidate</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>opclassoid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>result</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>classtup</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Form_pg_opclass</name></type> <name>classform</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>opfamilyoid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>opcintype</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>opclassname</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>familytup</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Form_pg_opfamily</name></type> <name>familyform</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>opfamilyname</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CatCList</name>   <modifier>*</modifier></type><name>proclist</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>oprlist</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type>		<name>allfuncs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type>		<name>allops</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>grouplist</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OpFamilyOpFuncGroup</name> <modifier>*</modifier></type><name>opclassgroup</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

	<comment type="block">/* Fetch opclass information */</comment>
	<expr_stmt><expr><name>classtup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>CLAOID</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>opclassoid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>classtup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for operator class %u"</literal></expr></argument>, <argument><expr><name>opclassoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>classform</name> <operator>=</operator> <operator>(</operator><name>Form_pg_opclass</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>classtup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>opfamilyoid</name> <operator>=</operator> <name><name>classform</name><operator>-&gt;</operator><name>opcfamily</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>opcintype</name> <operator>=</operator> <name><name>classform</name><operator>-&gt;</operator><name>opcintype</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>opclassname</name> <operator>=</operator> <call><name>NameStr</name><argument_list>(<argument><expr><name><name>classform</name><operator>-&gt;</operator><name>opcname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Fetch opfamily information */</comment>
	<expr_stmt><expr><name>familytup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>OPFAMILYOID</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>opfamilyoid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>familytup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for operator family %u"</literal></expr></argument>, <argument><expr><name>opfamilyoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>familyform</name> <operator>=</operator> <operator>(</operator><name>Form_pg_opfamily</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>familytup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>opfamilyname</name> <operator>=</operator> <call><name>NameStr</name><argument_list>(<argument><expr><name><name>familyform</name><operator>-&gt;</operator><name>opfname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Fetch all operators and support functions of the opfamily */</comment>
	<expr_stmt><expr><name>oprlist</name> <operator>=</operator> <call><name>SearchSysCacheList1</name><argument_list>(<argument><expr><name>AMOPSTRATEGY</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>opfamilyoid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>proclist</name> <operator>=</operator> <call><name>SearchSysCacheList1</name><argument_list>(<argument><expr><name>AMPROCNUM</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>opfamilyoid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Check individual support functions */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>proclist</name><operator>-&gt;</operator><name>n_members</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>proctup</name> <init>= <expr><operator>&amp;</operator><name><name>proclist</name><operator>-&gt;</operator><name>members</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>tuple</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Form_pg_amproc</name></type> <name>procform</name> <init>= <expr><operator>(</operator><name>Form_pg_amproc</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>proctup</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>ok</name></decl>;</decl_stmt>

		<comment type="block">/* Check procedure numbers and function signatures */</comment>
		<switch>switch <condition>(<expr><name><name>procform</name><operator>-&gt;</operator><name>amprocnum</name></name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>BRIN_PROCNUM_OPCINFO</name></expr>:</case>
				<expr_stmt><expr><name>ok</name> <operator>=</operator> <call><name>check_amproc_signature</name><argument_list>(<argument><expr><name><name>procform</name><operator>-&gt;</operator><name>amproc</name></name></expr></argument>, <argument><expr><name>INTERNALOID</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
											<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>INTERNALOID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>BRIN_PROCNUM_ADDVALUE</name></expr>:</case>
				<expr_stmt><expr><name>ok</name> <operator>=</operator> <call><name>check_amproc_signature</name><argument_list>(<argument><expr><name><name>procform</name><operator>-&gt;</operator><name>amproc</name></name></expr></argument>, <argument><expr><name>BOOLOID</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
											<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>INTERNALOID</name></expr></argument>, <argument><expr><name>INTERNALOID</name></expr></argument>,
											<argument><expr><name>INTERNALOID</name></expr></argument>, <argument><expr><name>INTERNALOID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>BRIN_PROCNUM_CONSISTENT</name></expr>:</case>
				<expr_stmt><expr><name>ok</name> <operator>=</operator> <call><name>check_amproc_signature</name><argument_list>(<argument><expr><name><name>procform</name><operator>-&gt;</operator><name>amproc</name></name></expr></argument>, <argument><expr><name>BOOLOID</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
											<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>INTERNALOID</name></expr></argument>, <argument><expr><name>INTERNALOID</name></expr></argument>,
											<argument><expr><name>INTERNALOID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>BRIN_PROCNUM_UNION</name></expr>:</case>
				<expr_stmt><expr><name>ok</name> <operator>=</operator> <call><name>check_amproc_signature</name><argument_list>(<argument><expr><name><name>procform</name><operator>-&gt;</operator><name>amproc</name></name></expr></argument>, <argument><expr><name>BOOLOID</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
											<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>INTERNALOID</name></expr></argument>, <argument><expr><name>INTERNALOID</name></expr></argument>,
											<argument><expr><name>INTERNALOID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>BRIN_PROCNUM_OPTIONS</name></expr>:</case>
				<expr_stmt><expr><name>ok</name> <operator>=</operator> <call><name>check_amoptsproc_signature</name><argument_list>(<argument><expr><name><name>procform</name><operator>-&gt;</operator><name>amproc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<comment type="block">/* Complain if it's not a valid optional proc number */</comment>
				<if_stmt><if>if <condition>(<expr><name><name>procform</name><operator>-&gt;</operator><name>amprocnum</name></name> <operator>&lt;</operator> <name>BRIN_FIRST_OPTIONAL_PROCNUM</name> <operator>||</operator>
					<name><name>procform</name><operator>-&gt;</operator><name>amprocnum</name></name> <operator>&gt;</operator> <name>BRIN_LAST_OPTIONAL_PROCNUM</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>,
							<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_OBJECT_DEFINITION</name></expr></argument>)</argument_list></call><operator>,</operator>
							 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"operator family \"%s\" of access method %s contains function %s with invalid support number %d"</literal></expr></argument>,
									<argument><expr><name>opfamilyname</name></expr></argument>, <argument><expr><literal type="string">"brin"</literal></expr></argument>,
									<argument><expr><call><name>format_procedure</name><argument_list>(<argument><expr><name><name>procform</name><operator>-&gt;</operator><name>amproc</name></name></expr></argument>)</argument_list></call></expr></argument>,
									<argument><expr><name><name>procform</name><operator>-&gt;</operator><name>amprocnum</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
					<continue>continue;</continue>	<comment type="block">/* omit bad proc numbers from allfuncs */</comment>
				</block_content>}</block></if></if_stmt>
				<comment type="block">/* Can't check signatures of optional procs, so assume OK */</comment>
				<expr_stmt><expr><name>ok</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<break>break;</break>
		</block_content>}</block></switch>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_OBJECT_DEFINITION</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"operator family \"%s\" of access method %s contains function %s with wrong signature for support number %d"</literal></expr></argument>,
							<argument><expr><name>opfamilyname</name></expr></argument>, <argument><expr><literal type="string">"brin"</literal></expr></argument>,
							<argument><expr><call><name>format_procedure</name><argument_list>(<argument><expr><name><name>procform</name><operator>-&gt;</operator><name>amproc</name></name></expr></argument>)</argument_list></call></expr></argument>,
							<argument><expr><name><name>procform</name><operator>-&gt;</operator><name>amprocnum</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* Track all valid procedure numbers seen in opfamily */</comment>
		<expr_stmt><expr><name>allfuncs</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>uint64</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name><name>procform</name><operator>-&gt;</operator><name>amprocnum</name></name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* Check individual operators */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>oprlist</name><operator>-&gt;</operator><name>n_members</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>oprtup</name> <init>= <expr><operator>&amp;</operator><name><name>oprlist</name><operator>-&gt;</operator><name>members</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>tuple</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Form_pg_amop</name></type> <name>oprform</name> <init>= <expr><operator>(</operator><name>Form_pg_amop</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>oprtup</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="block">/* Check that only allowed strategy numbers exist */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>oprform</name><operator>-&gt;</operator><name>amopstrategy</name></name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>oprform</name><operator>-&gt;</operator><name>amopstrategy</name></name> <operator>&gt;</operator> <literal type="number">63</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_OBJECT_DEFINITION</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"operator family \"%s\" of access method %s contains operator %s with invalid strategy number %d"</literal></expr></argument>,
							<argument><expr><name>opfamilyname</name></expr></argument>, <argument><expr><literal type="string">"brin"</literal></expr></argument>,
							<argument><expr><call><name>format_operator</name><argument_list>(<argument><expr><name><name>oprform</name><operator>-&gt;</operator><name>amopopr</name></name></expr></argument>)</argument_list></call></expr></argument>,
							<argument><expr><name><name>oprform</name><operator>-&gt;</operator><name>amopstrategy</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/*
			 * The set of operators supplied varies across BRIN opfamilies.
			 * Our plan is to identify all operator strategy numbers used in
			 * the opfamily and then complain about datatype combinations that
			 * are missing any operator(s).  However, consider only numbers
			 * that appear in some non-cross-type case, since cross-type
			 * operators may have unique strategies.  (This is not a great
			 * heuristic, in particular an erroneous number used in a
			 * cross-type operator will not get noticed; but the core BRIN
			 * opfamilies are messy enough to make it necessary.)
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>oprform</name><operator>-&gt;</operator><name>amoplefttype</name></name> <operator>==</operator> <name><name>oprform</name><operator>-&gt;</operator><name>amoprighttype</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>allops</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>uint64</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name><name>oprform</name><operator>-&gt;</operator><name>amopstrategy</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></else></if_stmt>

		<comment type="block">/* brin doesn't support ORDER BY operators */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>oprform</name><operator>-&gt;</operator><name>amoppurpose</name></name> <operator>!=</operator> <name>AMOP_SEARCH</name> <operator>||</operator>
			<call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>oprform</name><operator>-&gt;</operator><name>amopsortfamily</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_OBJECT_DEFINITION</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"operator family \"%s\" of access method %s contains invalid ORDER BY specification for operator %s"</literal></expr></argument>,
							<argument><expr><name>opfamilyname</name></expr></argument>, <argument><expr><literal type="string">"brin"</literal></expr></argument>,
							<argument><expr><call><name>format_operator</name><argument_list>(<argument><expr><name><name>oprform</name><operator>-&gt;</operator><name>amopopr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* Check operator signature --- same for all brin strategies */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_amop_signature</name><argument_list>(<argument><expr><name><name>oprform</name><operator>-&gt;</operator><name>amopopr</name></name></expr></argument>, <argument><expr><name>BOOLOID</name></expr></argument>,
								  <argument><expr><name><name>oprform</name><operator>-&gt;</operator><name>amoplefttype</name></name></expr></argument>,
								  <argument><expr><name><name>oprform</name><operator>-&gt;</operator><name>amoprighttype</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_OBJECT_DEFINITION</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"operator family \"%s\" of access method %s contains operator %s with wrong signature"</literal></expr></argument>,
							<argument><expr><name>opfamilyname</name></expr></argument>, <argument><expr><literal type="string">"brin"</literal></expr></argument>,
							<argument><expr><call><name>format_operator</name><argument_list>(<argument><expr><name><name>oprform</name><operator>-&gt;</operator><name>amopopr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/* Now check for inconsistent groups of operators/functions */</comment>
	<expr_stmt><expr><name>grouplist</name> <operator>=</operator> <call><name>identify_opfamily_groups</name><argument_list>(<argument><expr><name>oprlist</name></expr></argument>, <argument><expr><name>proclist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>opclassgroup</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>grouplist</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OpFamilyOpFuncGroup</name> <modifier>*</modifier></type><name>thisgroup</name> <init>= <expr><operator>(</operator><name>OpFamilyOpFuncGroup</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="block">/* Remember the group exactly matching the test opclass */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>thisgroup</name><operator>-&gt;</operator><name>lefttype</name></name> <operator>==</operator> <name>opcintype</name> <operator>&amp;&amp;</operator>
			<name><name>thisgroup</name><operator>-&gt;</operator><name>righttype</name></name> <operator>==</operator> <name>opcintype</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>opclassgroup</name> <operator>=</operator> <name>thisgroup</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/*
		 * Some BRIN opfamilies expect cross-type support functions to exist,
		 * and some don't.  We don't know exactly which are which, so if we
		 * find a cross-type operator for which there are no support functions
		 * at all, let it pass.  (Don't expect that all operators exist for
		 * such cross-type cases, either.)
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>thisgroup</name><operator>-&gt;</operator><name>functionset</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
			<name><name>thisgroup</name><operator>-&gt;</operator><name>lefttype</name></name> <operator>!=</operator> <name><name>thisgroup</name><operator>-&gt;</operator><name>righttype</name></name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="block">/*
		 * Else complain if there seems to be an incomplete set of either
		 * operators or support functions for this datatype pair.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>thisgroup</name><operator>-&gt;</operator><name>operatorset</name></name> <operator>!=</operator> <name>allops</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_OBJECT_DEFINITION</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"operator family \"%s\" of access method %s is missing operator(s) for types %s and %s"</literal></expr></argument>,
							<argument><expr><name>opfamilyname</name></expr></argument>, <argument><expr><literal type="string">"brin"</literal></expr></argument>,
							<argument><expr><call><name>format_type_be</name><argument_list>(<argument><expr><name><name>thisgroup</name><operator>-&gt;</operator><name>lefttype</name></name></expr></argument>)</argument_list></call></expr></argument>,
							<argument><expr><call><name>format_type_be</name><argument_list>(<argument><expr><name><name>thisgroup</name><operator>-&gt;</operator><name>righttype</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>thisgroup</name><operator>-&gt;</operator><name>functionset</name></name> <operator>!=</operator> <name>allfuncs</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_OBJECT_DEFINITION</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"operator family \"%s\" of access method %s is missing support function(s) for types %s and %s"</literal></expr></argument>,
							<argument><expr><name>opfamilyname</name></expr></argument>, <argument><expr><literal type="string">"brin"</literal></expr></argument>,
							<argument><expr><call><name>format_type_be</name><argument_list>(<argument><expr><name><name>thisgroup</name><operator>-&gt;</operator><name>lefttype</name></name></expr></argument>)</argument_list></call></expr></argument>,
							<argument><expr><call><name>format_type_be</name><argument_list>(<argument><expr><name><name>thisgroup</name><operator>-&gt;</operator><name>righttype</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<comment type="block">/* Check that the originally-named opclass is complete */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>opclassgroup</name> <operator>||</operator> <name><name>opclassgroup</name><operator>-&gt;</operator><name>operatorset</name></name> <operator>!=</operator> <name>allops</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_OBJECT_DEFINITION</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"operator class \"%s\" of access method %s is missing operator(s)"</literal></expr></argument>,
						<argument><expr><name>opclassname</name></expr></argument>, <argument><expr><literal type="string">"brin"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>BRIN_MANDATORY_NPROCS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>opclassgroup</name> <operator>&amp;&amp;</operator>
			<operator>(</operator><name><name>opclassgroup</name><operator>-&gt;</operator><name>functionset</name></name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>int64</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>			<comment type="block">/* got it */</comment>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_OBJECT_DEFINITION</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"operator class \"%s\" of access method %s is missing support function %d"</literal></expr></argument>,
						<argument><expr><name>opclassname</name></expr></argument>, <argument><expr><literal type="string">"brin"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>ReleaseCatCacheList</name><argument_list>(<argument><expr><name>proclist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ReleaseCatCacheList</name><argument_list>(<argument><expr><name>oprlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>familytup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>classtup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
</unit>
