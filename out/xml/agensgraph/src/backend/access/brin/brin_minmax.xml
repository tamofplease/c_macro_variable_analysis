<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/backend/access/brin/brin_minmax.c"><comment type="block">/*
 * brin_minmax.c
 *		Implementation of Min/Max opclass for BRIN
 *
 * Portions Copyright (c) 1996-2020, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * IDENTIFICATION
 *	  src/backend/access/brin/brin_minmax.c
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/brin_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/brin_tuple.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/genam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/stratnum.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_amop.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/datum.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/rel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/syscache.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>MinmaxOpaque</name>
<block>{
	<decl_stmt><decl><type><name>Oid</name></type>			<name>cached_subtype</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FmgrInfo</name></type>	<name><name>strategy_procinfos</name><index>[<expr><name>BTMaxStrategyNumber</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>MinmaxOpaque</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>FmgrInfo</name> <modifier>*</modifier></type><name>minmax_get_strategy_procinfo</name><parameter_list>(<parameter><decl><type><name>BrinDesc</name> <modifier>*</modifier></type><name>bdesc</name></decl></parameter>, <parameter><decl><type><name>uint16</name></type> <name>attno</name></decl></parameter>,
											  <parameter><decl><type><name>Oid</name></type> <name>subtype</name></decl></parameter>, <parameter><decl><type><name>uint16</name></type> <name>strategynum</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><name>Datum</name></type>
<name>brin_minmax_opcinfo</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>typoid</name> <init>= <expr><call><name>PG_GETARG_OID</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BrinOpcInfo</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * opaque-&gt;strategy_procinfos is initialized lazily; here it is set to
	 * all-uninitialized by palloc0 which sets fn_oid to InvalidOid.
	 */</comment>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><call><name>MAXALIGN</name><argument_list>(<argument><expr><call><name>SizeofBrinOpcInfo</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator>
					 <sizeof>sizeof<argument_list>(<argument><expr><name>MinmaxOpaque</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>oi_nstored</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>oi_opaque</name></name> <operator>=</operator> <operator>(</operator><name>MinmaxOpaque</name> <operator>*</operator><operator>)</operator>
		<call><name>MAXALIGN</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>result</name> <operator>+</operator> <call><name>SizeofBrinOpcInfo</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>oi_typcache</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>result</name><operator>-&gt;</operator><name>oi_typcache</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>
		<call><name>lookup_type_cache</name><argument_list>(<argument><expr><name>typoid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Examine the given index tuple (which contains partial status of a certain
 * page range) by comparing it to the given value that comes from another heap
 * tuple.  If the new value is outside the min/max range specified by the
 * existing tuple values, update the index tuple and return true.  Otherwise,
 * return false and do not modify in this case.
 */</comment>
<function><type><name>Datum</name></type>
<name>brin_minmax_add_value</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BrinDesc</name>   <modifier>*</modifier></type><name>bdesc</name> <init>= <expr><operator>(</operator><name>BrinDesc</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BrinValues</name> <modifier>*</modifier></type><name>column</name> <init>= <expr><operator>(</operator><name>BrinValues</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>newval</name> <init>= <expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>isnull</name> <init>= <expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>colloid</name> <init>= <expr><call><name>PG_GET_COLLATION</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FmgrInfo</name>   <modifier>*</modifier></type><name>cmpFn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>compar</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>updated</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Form_pg_attribute</name></type> <name>attr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AttrNumber</name></type>	<name>attno</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * If the new value is null, we record that we saw it if it's the first
	 * one; otherwise, there's nothing to do.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>isnull</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>column</name><operator>-&gt;</operator><name>bv_hasnulls</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>column</name><operator>-&gt;</operator><name>bv_hasnulls</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>attno</name> <operator>=</operator> <name><name>column</name><operator>-&gt;</operator><name>bv_attno</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>TupleDescAttr</name><argument_list>(<argument><expr><name><name>bdesc</name><operator>-&gt;</operator><name>bd_tupdesc</name></name></expr></argument>, <argument><expr><name>attno</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * If the recorded value is null, store the new value (which we know to be
	 * not null) as both minimum and maximum, and we're done.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>column</name><operator>-&gt;</operator><name>bv_allnulls</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>column</name><operator>-&gt;</operator><name>bv_values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>datumCopy</name><argument_list>(<argument><expr><name>newval</name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>attbyval</name></name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>attlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>column</name><operator>-&gt;</operator><name>bv_values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>datumCopy</name><argument_list>(<argument><expr><name>newval</name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>attbyval</name></name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>attlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>column</name><operator>-&gt;</operator><name>bv_allnulls</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Otherwise, need to compare the new value with the existing boundaries
	 * and update them accordingly.  First check if it's less than the
	 * existing minimum.
	 */</comment>
	<expr_stmt><expr><name>cmpFn</name> <operator>=</operator> <call><name>minmax_get_strategy_procinfo</name><argument_list>(<argument><expr><name>bdesc</name></expr></argument>, <argument><expr><name>attno</name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>atttypid</name></name></expr></argument>,
										 <argument><expr><name>BTLessStrategyNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>compar</name> <operator>=</operator> <call><name>FunctionCall2Coll</name><argument_list>(<argument><expr><name>cmpFn</name></expr></argument>, <argument><expr><name>colloid</name></expr></argument>, <argument><expr><name>newval</name></expr></argument>, <argument><expr><name><name>column</name><operator>-&gt;</operator><name>bv_values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>DatumGetBool</name><argument_list>(<argument><expr><name>compar</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>attr</name><operator>-&gt;</operator><name>attbyval</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name><name>column</name><operator>-&gt;</operator><name>bv_values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>column</name><operator>-&gt;</operator><name>bv_values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>datumCopy</name><argument_list>(<argument><expr><name>newval</name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>attbyval</name></name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>attlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>updated</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * And now compare it to the existing maximum.
	 */</comment>
	<expr_stmt><expr><name>cmpFn</name> <operator>=</operator> <call><name>minmax_get_strategy_procinfo</name><argument_list>(<argument><expr><name>bdesc</name></expr></argument>, <argument><expr><name>attno</name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>atttypid</name></name></expr></argument>,
										 <argument><expr><name>BTGreaterStrategyNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>compar</name> <operator>=</operator> <call><name>FunctionCall2Coll</name><argument_list>(<argument><expr><name>cmpFn</name></expr></argument>, <argument><expr><name>colloid</name></expr></argument>, <argument><expr><name>newval</name></expr></argument>, <argument><expr><name><name>column</name><operator>-&gt;</operator><name>bv_values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>DatumGetBool</name><argument_list>(<argument><expr><name>compar</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>attr</name><operator>-&gt;</operator><name>attbyval</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name><name>column</name><operator>-&gt;</operator><name>bv_values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>column</name><operator>-&gt;</operator><name>bv_values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>datumCopy</name><argument_list>(<argument><expr><name>newval</name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>attbyval</name></name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>attlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>updated</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>updated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Given an index tuple corresponding to a certain page range and a scan key,
 * return whether the scan key is consistent with the index tuple's min/max
 * values.  Return true if so, false otherwise.
 */</comment>
<function><type><name>Datum</name></type>
<name>brin_minmax_consistent</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BrinDesc</name>   <modifier>*</modifier></type><name>bdesc</name> <init>= <expr><operator>(</operator><name>BrinDesc</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BrinValues</name> <modifier>*</modifier></type><name>column</name> <init>= <expr><operator>(</operator><name>BrinValues</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ScanKey</name></type>		<name>key</name> <init>= <expr><operator>(</operator><name>ScanKey</name><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>colloid</name> <init>= <expr><call><name>PG_GET_COLLATION</name><argument_list>()</argument_list></call></expr></init></decl>,
				<decl><type ref="prev"/><name>subtype</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AttrNumber</name></type>	<name>attno</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>value</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>matches</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FmgrInfo</name>   <modifier>*</modifier></type><name>finfo</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>sk_attno</name></name> <operator>==</operator> <name><name>column</name><operator>-&gt;</operator><name>bv_attno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* handle IS NULL/IS NOT NULL tests */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>sk_flags</name></name> <operator>&amp;</operator> <name>SK_ISNULL</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>sk_flags</name></name> <operator>&amp;</operator> <name>SK_SEARCHNULL</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>column</name><operator>-&gt;</operator><name>bv_allnulls</name></name> <operator>||</operator> <name><name>column</name><operator>-&gt;</operator><name>bv_hasnulls</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * For IS NOT NULL, we can only skip ranges that are known to have
		 * only nulls.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>sk_flags</name></name> <operator>&amp;</operator> <name>SK_SEARCHNOTNULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><operator>!</operator><name><name>column</name><operator>-&gt;</operator><name>bv_allnulls</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/*
		 * Neither IS NULL nor IS NOT NULL was used; assume all indexable
		 * operators are strict and return false.
		 */</comment>
		<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* if the range is all empty, it cannot possibly be consistent */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>column</name><operator>-&gt;</operator><name>bv_allnulls</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>attno</name> <operator>=</operator> <name><name>key</name><operator>-&gt;</operator><name>sk_attno</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>subtype</name> <operator>=</operator> <name><name>key</name><operator>-&gt;</operator><name>sk_subtype</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>key</name><operator>-&gt;</operator><name>sk_argument</name></name></expr>;</expr_stmt>
	<switch>switch <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>sk_strategy</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>BTLessStrategyNumber</name></expr>:</case>
		<case>case <expr><name>BTLessEqualStrategyNumber</name></expr>:</case>
			<expr_stmt><expr><name>finfo</name> <operator>=</operator> <call><name>minmax_get_strategy_procinfo</name><argument_list>(<argument><expr><name>bdesc</name></expr></argument>, <argument><expr><name>attno</name></expr></argument>, <argument><expr><name>subtype</name></expr></argument>,
												 <argument><expr><name><name>key</name><operator>-&gt;</operator><name>sk_strategy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>matches</name> <operator>=</operator> <call><name>FunctionCall2Coll</name><argument_list>(<argument><expr><name>finfo</name></expr></argument>, <argument><expr><name>colloid</name></expr></argument>, <argument><expr><name><name>column</name><operator>-&gt;</operator><name>bv_values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
										<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>BTEqualStrategyNumber</name></expr>:</case>

			<comment type="block">/*
			 * In the equality case (WHERE col = someval), we want to return
			 * the current page range if the minimum value in the range &lt;=
			 * scan key, and the maximum value &gt;= scan key.
			 */</comment>
			<expr_stmt><expr><name>finfo</name> <operator>=</operator> <call><name>minmax_get_strategy_procinfo</name><argument_list>(<argument><expr><name>bdesc</name></expr></argument>, <argument><expr><name>attno</name></expr></argument>, <argument><expr><name>subtype</name></expr></argument>,
												 <argument><expr><name>BTLessEqualStrategyNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>matches</name> <operator>=</operator> <call><name>FunctionCall2Coll</name><argument_list>(<argument><expr><name>finfo</name></expr></argument>, <argument><expr><name>colloid</name></expr></argument>, <argument><expr><name><name>column</name><operator>-&gt;</operator><name>bv_values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
										<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DatumGetBool</name><argument_list>(<argument><expr><name>matches</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<comment type="block">/* max() &gt;= scankey */</comment>
			<expr_stmt><expr><name>finfo</name> <operator>=</operator> <call><name>minmax_get_strategy_procinfo</name><argument_list>(<argument><expr><name>bdesc</name></expr></argument>, <argument><expr><name>attno</name></expr></argument>, <argument><expr><name>subtype</name></expr></argument>,
												 <argument><expr><name>BTGreaterEqualStrategyNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>matches</name> <operator>=</operator> <call><name>FunctionCall2Coll</name><argument_list>(<argument><expr><name>finfo</name></expr></argument>, <argument><expr><name>colloid</name></expr></argument>, <argument><expr><name><name>column</name><operator>-&gt;</operator><name>bv_values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
										<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>BTGreaterEqualStrategyNumber</name></expr>:</case>
		<case>case <expr><name>BTGreaterStrategyNumber</name></expr>:</case>
			<expr_stmt><expr><name>finfo</name> <operator>=</operator> <call><name>minmax_get_strategy_procinfo</name><argument_list>(<argument><expr><name>bdesc</name></expr></argument>, <argument><expr><name>attno</name></expr></argument>, <argument><expr><name>subtype</name></expr></argument>,
												 <argument><expr><name><name>key</name><operator>-&gt;</operator><name>sk_strategy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>matches</name> <operator>=</operator> <call><name>FunctionCall2Coll</name><argument_list>(<argument><expr><name>finfo</name></expr></argument>, <argument><expr><name>colloid</name></expr></argument>, <argument><expr><name><name>column</name><operator>-&gt;</operator><name>bv_values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
										<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<comment type="block">/* shouldn't happen */</comment>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid strategy number %d"</literal></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>sk_strategy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>matches</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<expr_stmt><expr><call><name>PG_RETURN_DATUM</name><argument_list>(<argument><expr><name>matches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Given two BrinValues, update the first of them as a union of the summary
 * values contained in both.  The second one is untouched.
 */</comment>
<function><type><name>Datum</name></type>
<name>brin_minmax_union</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BrinDesc</name>   <modifier>*</modifier></type><name>bdesc</name> <init>= <expr><operator>(</operator><name>BrinDesc</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BrinValues</name> <modifier>*</modifier></type><name>col_a</name> <init>= <expr><operator>(</operator><name>BrinValues</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BrinValues</name> <modifier>*</modifier></type><name>col_b</name> <init>= <expr><operator>(</operator><name>BrinValues</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>colloid</name> <init>= <expr><call><name>PG_GET_COLLATION</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AttrNumber</name></type>	<name>attno</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Form_pg_attribute</name></type> <name>attr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FmgrInfo</name>   <modifier>*</modifier></type><name>finfo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>needsadj</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>col_a</name><operator>-&gt;</operator><name>bv_attno</name></name> <operator>==</operator> <name><name>col_b</name><operator>-&gt;</operator><name>bv_attno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Adjust "hasnulls" */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>col_a</name><operator>-&gt;</operator><name>bv_hasnulls</name></name> <operator>&amp;&amp;</operator> <name><name>col_b</name><operator>-&gt;</operator><name>bv_hasnulls</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>col_a</name><operator>-&gt;</operator><name>bv_hasnulls</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* If there are no values in B, there's nothing left to do */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>col_b</name><operator>-&gt;</operator><name>bv_allnulls</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>attno</name> <operator>=</operator> <name><name>col_a</name><operator>-&gt;</operator><name>bv_attno</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>TupleDescAttr</name><argument_list>(<argument><expr><name><name>bdesc</name><operator>-&gt;</operator><name>bd_tupdesc</name></name></expr></argument>, <argument><expr><name>attno</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Adjust "allnulls".  If A doesn't have values, just copy the values from
	 * B into A, and we're done.  We cannot run the operators in this case,
	 * because values in A might contain garbage.  Note we already established
	 * that B contains values.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>col_a</name><operator>-&gt;</operator><name>bv_allnulls</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>col_a</name><operator>-&gt;</operator><name>bv_allnulls</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>col_a</name><operator>-&gt;</operator><name>bv_values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>datumCopy</name><argument_list>(<argument><expr><name><name>col_b</name><operator>-&gt;</operator><name>bv_values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
										<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>attbyval</name></name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>attlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>col_a</name><operator>-&gt;</operator><name>bv_values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>datumCopy</name><argument_list>(<argument><expr><name><name>col_b</name><operator>-&gt;</operator><name>bv_values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
										<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>attbyval</name></name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>attlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Adjust minimum, if B's min is less than A's min */</comment>
	<expr_stmt><expr><name>finfo</name> <operator>=</operator> <call><name>minmax_get_strategy_procinfo</name><argument_list>(<argument><expr><name>bdesc</name></expr></argument>, <argument><expr><name>attno</name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>atttypid</name></name></expr></argument>,
										 <argument><expr><name>BTLessStrategyNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>needsadj</name> <operator>=</operator> <call><name>FunctionCall2Coll</name><argument_list>(<argument><expr><name>finfo</name></expr></argument>, <argument><expr><name>colloid</name></expr></argument>, <argument><expr><name><name>col_b</name><operator>-&gt;</operator><name>bv_values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
								 <argument><expr><name><name>col_a</name><operator>-&gt;</operator><name>bv_values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>needsadj</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>attr</name><operator>-&gt;</operator><name>attbyval</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name><name>col_a</name><operator>-&gt;</operator><name>bv_values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>col_a</name><operator>-&gt;</operator><name>bv_values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>datumCopy</name><argument_list>(<argument><expr><name><name>col_b</name><operator>-&gt;</operator><name>bv_values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
										<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>attbyval</name></name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>attlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Adjust maximum, if B's max is greater than A's max */</comment>
	<expr_stmt><expr><name>finfo</name> <operator>=</operator> <call><name>minmax_get_strategy_procinfo</name><argument_list>(<argument><expr><name>bdesc</name></expr></argument>, <argument><expr><name>attno</name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>atttypid</name></name></expr></argument>,
										 <argument><expr><name>BTGreaterStrategyNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>needsadj</name> <operator>=</operator> <call><name>FunctionCall2Coll</name><argument_list>(<argument><expr><name>finfo</name></expr></argument>, <argument><expr><name>colloid</name></expr></argument>, <argument><expr><name><name>col_b</name><operator>-&gt;</operator><name>bv_values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
								 <argument><expr><name><name>col_a</name><operator>-&gt;</operator><name>bv_values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>needsadj</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>attr</name><operator>-&gt;</operator><name>attbyval</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name><name>col_a</name><operator>-&gt;</operator><name>bv_values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>col_a</name><operator>-&gt;</operator><name>bv_values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>datumCopy</name><argument_list>(<argument><expr><name><name>col_b</name><operator>-&gt;</operator><name>bv_values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
										<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>attbyval</name></name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>attlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Cache and return the procedure for the given strategy.
 *
 * Note: this function mirrors inclusion_get_strategy_procinfo; see notes
 * there.  If changes are made here, see that function too.
 */</comment>
<function><type><specifier>static</specifier> <name>FmgrInfo</name> <modifier>*</modifier></type>
<name>minmax_get_strategy_procinfo</name><parameter_list>(<parameter><decl><type><name>BrinDesc</name> <modifier>*</modifier></type><name>bdesc</name></decl></parameter>, <parameter><decl><type><name>uint16</name></type> <name>attno</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>subtype</name></decl></parameter>,
							 <parameter><decl><type><name>uint16</name></type> <name>strategynum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MinmaxOpaque</name> <modifier>*</modifier></type><name>opaque</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>strategynum</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
		   <name>strategynum</name> <operator>&lt;=</operator> <name>BTMaxStrategyNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>opaque</name> <operator>=</operator> <operator>(</operator><name>MinmaxOpaque</name> <operator>*</operator><operator>)</operator> <name><name>bdesc</name><operator>-&gt;</operator><name>bd_info</name><index>[<expr><name>attno</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>oi_opaque</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * We cache the procedures for the previous subtype in the opaque struct,
	 * to avoid repetitive syscache lookups.  If the subtype changed,
	 * invalidate all the cached entries.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>opaque</name><operator>-&gt;</operator><name>cached_subtype</name></name> <operator>!=</operator> <name>subtype</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>uint16</name></type>		<name>i</name></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>BTMaxStrategyNumber</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>opaque</name><operator>-&gt;</operator><name>strategy_procinfos</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fn_oid</name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt></block_content></block></for>
		<expr_stmt><expr><name><name>opaque</name><operator>-&gt;</operator><name>cached_subtype</name></name> <operator>=</operator> <name>subtype</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>opaque</name><operator>-&gt;</operator><name>strategy_procinfos</name><index>[<expr><name>strategynum</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fn_oid</name> <operator>==</operator> <name>InvalidOid</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Form_pg_attribute</name></type> <name>attr</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tuple</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Oid</name></type>			<name>opfamily</name></decl>,
					<decl><type ref="prev"/><name>oprid</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>isNull</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>opfamily</name> <operator>=</operator> <name><name>bdesc</name><operator>-&gt;</operator><name>bd_index</name><operator>-&gt;</operator><name>rd_opfamily</name><index>[<expr><name>attno</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>TupleDescAttr</name><argument_list>(<argument><expr><name><name>bdesc</name><operator>-&gt;</operator><name>bd_tupdesc</name></name></expr></argument>, <argument><expr><name>attno</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>SearchSysCache4</name><argument_list>(<argument><expr><name>AMOPSTRATEGY</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>opfamily</name></expr></argument>)</argument_list></call></expr></argument>,
								<argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>atttypid</name></name></expr></argument>)</argument_list></call></expr></argument>,
								<argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>subtype</name></expr></argument>)</argument_list></call></expr></argument>,
								<argument><expr><call><name>Int16GetDatum</name><argument_list>(<argument><expr><name>strategynum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"missing operator %d(%u,%u) in opfamily %u"</literal></expr></argument>,
				 <argument><expr><name>strategynum</name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>atttypid</name></name></expr></argument>, <argument><expr><name>subtype</name></expr></argument>, <argument><expr><name>opfamily</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>oprid</name> <operator>=</operator> <call><name>DatumGetObjectId</name><argument_list>(<argument><expr><call><name>SysCacheGetAttr</name><argument_list>(<argument><expr><name>AMOPSTRATEGY</name></expr></argument>, <argument><expr><name>tuple</name></expr></argument>,
												 <argument><expr><name>Anum_pg_amop_amopopr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isNull</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>isNull</name> <operator>&amp;&amp;</operator> <call><name>RegProcedureIsValid</name><argument_list>(<argument><expr><name>oprid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>fmgr_info_cxt</name><argument_list>(<argument><expr><call><name>get_opcode</name><argument_list>(<argument><expr><name>oprid</name></expr></argument>)</argument_list></call></expr></argument>,
					  <argument><expr><operator>&amp;</operator><name><name>opaque</name><operator>-&gt;</operator><name>strategy_procinfos</name><index>[<expr><name>strategynum</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
					  <argument><expr><name><name>bdesc</name><operator>-&gt;</operator><name>bd_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>&amp;</operator><name><name>opaque</name><operator>-&gt;</operator><name>strategy_procinfos</name><index>[<expr><name>strategynum</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>
</unit>
