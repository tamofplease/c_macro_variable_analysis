<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/backend/optimizer/geqo/geqo_selection.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * geqo_selection.c
 *	  linear selection scheme for the genetic query optimizer
 *
 * Portions Copyright (c) 1996-2020, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * src/backend/optimizer/geqo/geqo_selection.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<comment type="block">/* contributed by:
   =*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=
   *  Martin Utesch				 * Institute of Automatic Control	   *
   =							 = University of Mining and Technology =
   *  utesch@aut.tu-freiberg.de  * Freiberg, Germany				   *
   =*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=
 */</comment>

<comment type="block">/* this is adopted from D. Whitley's Genitor algorithm */</comment>

<comment type="block" format="doxygen">/*************************************************************/</comment>
<comment type="block">/*															 */</comment>
<comment type="block">/*	Copyright (c) 1990										 */</comment>
<comment type="block">/*	Darrell L. Whitley										 */</comment>
<comment type="block">/*	Computer Science Department								 */</comment>
<comment type="block">/*	Colorado State University								 */</comment>
<comment type="block">/*															 */</comment>
<comment type="block">/*	Permission is hereby granted to copy all or any part of  */</comment>
<comment type="block">/*	this program for free distribution.   The author's name  */</comment>
<comment type="block">/*	and this copyright notice must be included in any copy.  */</comment>
<comment type="block">/*															 */</comment>
<comment type="block" format="doxygen">/*************************************************************/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/geqo_copy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/geqo_random.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/geqo_selection.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>linear_rand</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>bias</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/*
 * geqo_selection
 *	 according to bias described by input parameters,
 *	 first and second genes are selected from the pool
 */</comment>
<function><type><name>void</name></type>
<name>geqo_selection</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>Chromosome</name> <modifier>*</modifier></type><name>momma</name></decl></parameter>, <parameter><decl><type><name>Chromosome</name> <modifier>*</modifier></type><name>daddy</name></decl></parameter>,
			   <parameter><decl><type><name>Pool</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>bias</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>first</name></decl>,
				<decl><type ref="prev"/><name>second</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>first</name> <operator>=</operator> <call><name>linear_rand</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>bias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>second</name> <operator>=</operator> <call><name>linear_rand</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>bias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Ensure we have selected different genes, except if pool size is only
	 * one, when we can't.
	 *
	 * This code was observed to hang up in an infinite loop when the
	 * platform's implementation of erand48() was broken.  We now always use
	 * our own version.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>pool</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<while>while <condition>(<expr><name>first</name> <operator>==</operator> <name>second</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>second</name> <operator>=</operator> <call><name>linear_rand</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>bias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>geqo_copy</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>momma</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>first</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>string_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>geqo_copy</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>daddy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>second</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>string_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * linear_rand
 *	  generates random integer between 0 and input max number
 *	  using input linear bias
 *
 *	  bias is y-intercept of linear distribution
 *
 *	  probability distribution function is: f(x) = bias - 2(bias - 1)x
 *			 bias = (prob of first rule) / (prob of middle rule)
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>linear_rand</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pool_size</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>bias</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>double</name></type>		<name>index</name></decl>;</decl_stmt>			<comment type="block">/* index between 0 and pool_size */</comment>
	<decl_stmt><decl><type><name>double</name></type>		<name>max</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator> <name>pool_size</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * If geqo_rand() returns exactly 1.0 then we will get exactly max from
	 * this equation, whereas we need 0 &lt;= index &lt; max.  Also it seems
	 * possible that roundoff error might deliver values slightly outside the
	 * range; in particular avoid passing a value slightly less than 0 to
	 * sqrt(). If we get a bad value just try again.
	 */</comment>
	<do>do
	<block>{<block_content>
		<decl_stmt><decl><type><name>double</name></type>		<name>sqrtval</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>sqrtval</name> <operator>=</operator> <operator>(</operator><name>bias</name> <operator>*</operator> <name>bias</name><operator>)</operator> <operator>-</operator> <literal type="number">4.0</literal> <operator>*</operator> <operator>(</operator><name>bias</name> <operator>-</operator> <literal type="number">1.0</literal><operator>)</operator> <operator>*</operator> <call><name>geqo_rand</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>sqrtval</name> <operator>&gt;</operator> <literal type="number">0.0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>sqrtval</name> <operator>=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><name>sqrtval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>index</name> <operator>=</operator> <name>max</name> <operator>*</operator> <operator>(</operator><name>bias</name> <operator>-</operator> <name>sqrtval</name><operator>)</operator> <operator>/</operator> <literal type="number">2.0</literal> <operator>/</operator> <operator>(</operator><name>bias</name> <operator>-</operator> <literal type="number">1.0</literal><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block> while <condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">0.0</literal> <operator>||</operator> <name>index</name> <operator>&gt;=</operator> <name>max</name></expr>)</condition>;</do>

	<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <name>index</name></expr>;</return>
</block_content>}</block></function>
</unit>
