<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/backend/optimizer/geqo/geqo_pmx.c"><comment type="block">/*------------------------------------------------------------------------
*
* geqo_pmx.c
*
*	 partially matched crossover [PMX] routines;
*	 PMX operator according to Goldberg &amp; Lingle
*	 (Proc Int'l Conf on GA's)
*
* src/backend/optimizer/geqo/geqo_pmx.c
*
*-------------------------------------------------------------------------
*/</comment>

<comment type="block">/* contributed by:
   =*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=
   *  Martin Utesch				 * Institute of Automatic Control	   *
   =							 = University of Mining and Technology =
   *  utesch@aut.tu-freiberg.de  * Freiberg, Germany				   *
   =*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=
 */</comment>

<comment type="block">/* the pmx algorithm is adopted from Genitor : */</comment>
<comment type="block" format="doxygen">/*************************************************************/</comment>
<comment type="block">/*															 */</comment>
<comment type="block">/*	Copyright (c) 1990										 */</comment>
<comment type="block">/*	Darrell L. Whitley										 */</comment>
<comment type="block">/*	Computer Science Department								 */</comment>
<comment type="block">/*	Colorado State University								 */</comment>
<comment type="block">/*															 */</comment>
<comment type="block">/*	Permission is hereby granted to copy all or any part of  */</comment>
<comment type="block">/*	this program for free distribution.   The author's name  */</comment>
<comment type="block">/*	and this copyright notice must be included in any copy.  */</comment>
<comment type="block">/*															 */</comment>
<comment type="block" format="doxygen">/*************************************************************/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/geqo_random.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/geqo_recombination.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PMX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<comment type="block">/* pmx
 *
 *	 partially matched crossover
 */</comment>
<function><type><name>void</name></type>
<name>pmx</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>Gene</name> <modifier>*</modifier></type><name>tour1</name></decl></parameter>, <parameter><decl><type><name>Gene</name> <modifier>*</modifier></type><name>tour2</name></decl></parameter>, <parameter><decl><type><name>Gene</name> <modifier>*</modifier></type><name>offspring</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_gene</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name>		   <modifier>*</modifier></type><name>failed</name> <init>= <expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><operator>(</operator><name>num_gene</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name>		   <modifier>*</modifier></type><name>from</name> <init>= <expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><operator>(</operator><name>num_gene</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name>		   <modifier>*</modifier></type><name>indx</name> <init>= <expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><operator>(</operator><name>num_gene</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name>		   <modifier>*</modifier></type><name>check_list</name> <init>= <expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><operator>(</operator><name>num_gene</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type>			<name>left</name></decl>,
				<decl><type ref="prev"/><name>right</name></decl>,
				<decl><type ref="prev"/><name>temp</name></decl>,
				<decl><type ref="prev"/><name>i</name></decl>,
				<decl><type ref="prev"/><name>j</name></decl>,
				<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>mx_fail</name></decl>,
				<decl><type ref="prev"/><name>found</name></decl>,
				<decl><type ref="prev"/><name>mx_hold</name></decl>;</decl_stmt>


<comment type="block">/* no mutation so start up the pmx replacement algorithm */</comment>
<comment type="block">/* initialize failed[], from[], check_list[] */</comment>
	<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>num_gene</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name><name>failed</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>from</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>check_list</name><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></for>

<comment type="block">/* locate crossover points */</comment>
	<expr_stmt><expr><name>left</name> <operator>=</operator> <call><name>geqo_randint</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>num_gene</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>right</name> <operator>=</operator> <call><name>geqo_randint</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>num_gene</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>left</name> <operator>&gt;</operator> <name>right</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>temp</name> <operator>=</operator> <name>left</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>left</name> <operator>=</operator> <name>right</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>right</name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>


<comment type="block">/* copy tour2 into offspring */</comment>
	<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>num_gene</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name><name>offspring</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>tour2</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>from</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>DAD</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>check_list</name><index>[<expr><name><name>tour2</name><index>[<expr><name>k</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></for>

<comment type="block">/* copy tour1 into offspring */</comment>
	<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>left</name></expr>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>right</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name><name>check_list</name><index>[<expr><name><name>offspring</name><index>[<expr><name>k</name></expr>]</index></name></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>offspring</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>tour1</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>from</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>MOM</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>check_list</name><index>[<expr><name><name>tour1</name><index>[<expr><name>k</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></for>


<comment type="block">/* pmx main part */</comment>

	<expr_stmt><expr><name>mx_fail</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<comment type="block">/* STEP 1 */</comment>

	<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>left</name></expr>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>right</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>							<comment type="block">/* for all elements in the tour1-2 */</comment>

		<if_stmt><if>if <condition>(<expr><name><name>tour1</name><index>[<expr><name>k</name></expr>]</index></name> <operator>==</operator> <name><name>tour2</name><index>[<expr><name>k</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>			<comment type="block">/* find match in tour2 */</comment>

		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>			<comment type="block">/* substitute elements */</comment>

			<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<while>while <condition>(<expr><operator>!</operator><operator>(</operator><name>found</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>j</name> <operator>&lt;</operator> <name>num_gene</name><operator>)</operator></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>offspring</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name><name>tour1</name><index>[<expr><name>k</name></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>from</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>DAD</name><operator>)</operator></expr>)</condition>
				<block>{<block_content>

					<expr_stmt><expr><name><name>check_list</name><index>[<expr><name><name>offspring</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>offspring</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>tour2</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>check_list</name><index>[<expr><name><name>tour2</name><index>[<expr><name>k</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>

				<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></while>

		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>found</name><operator>)</operator></expr>)</condition>
		<block>{<block_content>						<comment type="block">/* failed to replace gene */</comment>
			<expr_stmt><expr><name><name>failed</name><index>[<expr><name>mx_fail</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>tour1</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>indx</name><index>[<expr><name>mx_fail</name></expr>]</index></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>mx_fail</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

	</block_content>}</block></for>							<comment type="block">/* ... for */</comment>


<comment type="block">/* STEP 2 */</comment>

	<comment type="block">/* see if any genes could not be replaced */</comment>
	<if_stmt><if>if <condition>(<expr><name>mx_fail</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>mx_hold</name> <operator>=</operator> <name>mx_fail</name></expr>;</expr_stmt>

		<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>mx_hold</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

			<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<while>while <condition>(<expr><operator>!</operator><operator>(</operator><name>found</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>j</name> <operator>&lt;</operator> <name>num_gene</name><operator>)</operator></expr>)</condition>
			<block>{<block_content>

				<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>failed</name><index>[<expr><name>k</name></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>offspring</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>from</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>DAD</name><operator>)</operator></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name><name>check_list</name><index>[<expr><name><name>offspring</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>offspring</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>tour2</name><index>[<expr><name><name>indx</name><index>[<expr><name>k</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>check_list</name><index>[<expr><name><name>tour2</name><index>[<expr><name><name>indx</name><index>[<expr><name>k</name></expr>]</index></name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

					<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>failed</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>mx_fail</name><operator>--</operator></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>

				<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></while>

		</block_content>}</block></for>						<comment type="block">/* ... for	 */</comment>

	</block_content>}</block></if></if_stmt>							<comment type="block">/* ... if	 */</comment>


<comment type="block">/* STEP 3 */</comment>

	<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>num_gene</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>

		<if_stmt><if>if <condition>(<expr><name><name>check_list</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

			<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>num_gene</name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>offspring</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>Gene</name><operator>)</operator> <name>k</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>from</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>DAD</name><operator>)</operator></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

					<while>while <condition>(<expr><name>j</name> <operator>&lt;=</operator> <name>num_gene</name></expr>)</condition>
					<block>{<block_content>
						<if_stmt><if>if <condition>(<expr><name><name>check_list</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
						<block>{<block_content>
							<expr_stmt><expr><name><name>offspring</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Gene</name><operator>)</operator> <name>j</name></expr>;</expr_stmt>
							<expr_stmt><expr><name><name>check_list</name><index>[<expr><name>k</name></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
							<expr_stmt><expr><name><name>check_list</name><index>[<expr><name>j</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
							<expr_stmt><expr><name>i</name> <operator>=</operator> <name>num_gene</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
							<expr_stmt><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
						</block_content>}</block></if></if_stmt>

						<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
					</block_content>}</block></while>

				</block_content>}</block></if></if_stmt>				<comment type="block">/* ... if	 */</comment>

				<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></while>					<comment type="block">/* end while */</comment>

		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>							<comment type="block">/* ... for	 */</comment>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>failed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>indx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>check_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* defined(PMX) */</comment>
</unit>
