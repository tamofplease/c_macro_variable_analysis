<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/backend/storage/buffer/buf_init.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * buf_init.c
 *	  buffer manager initialization routines
 *
 * Portions Copyright (c) 1996-2020, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/storage/buffer/buf_init.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/buf_internals.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/bufmgr.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>BufferDescPadded</name> <modifier>*</modifier></type><name>BufferDescriptors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>BufferBlocks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LWLockMinimallyPadded</name> <modifier>*</modifier></type><name>BufferIOLWLockArray</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WritebackContext</name></type> <name>BackendWritebackContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CkptSortItem</name> <modifier>*</modifier></type><name>CkptBufferIds</name></decl>;</decl_stmt>


<comment type="block">/*
 * Data Structures:
 *		buffers live in a freelist and a lookup data structure.
 *
 *
 * Buffer Lookup:
 *		Two important notes.  First, the buffer has to be
 *		available for lookup BEFORE an IO begins.  Otherwise
 *		a second process trying to read the buffer will
 *		allocate its own copy and the buffer pool will
 *		become inconsistent.
 *
 * Buffer Replacement:
 *		see freelist.c.  A buffer cannot be replaced while in
 *		use either by data manager or during IO.
 *
 *
 * Synchronization/Locking:
 *
 * IO_IN_PROGRESS -- this is a flag in the buffer descriptor.
 *		It must be set when an IO is initiated and cleared at
 *		the end of the IO.  It is there to make sure that one
 *		process doesn't start to use a buffer while another is
 *		faulting it in.  see WaitIO and related routines.
 *
 * refcount --	Counts the number of processes holding pins on a buffer.
 *		A buffer is pinned during IO and immediately after a BufferAlloc().
 *		Pins must be released before end of transaction.  For efficiency the
 *		shared refcount isn't increased if an individual backend pins a buffer
 *		multiple times. Check the PrivateRefCount infrastructure in bufmgr.c.
 */</comment>


<comment type="block">/*
 * Initialize shared buffer pool
 *
 * This is called once during shared-memory initialization (either in the
 * postmaster, or in a standalone backend).
 */</comment>
<function><type><name>void</name></type>
<name>InitBufferPool</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>foundBufs</name></decl>,
				<decl><type ref="prev"/><name>foundDescs</name></decl>,
				<decl><type ref="prev"/><name>foundIOLocks</name></decl>,
				<decl><type ref="prev"/><name>foundBufCkpt</name></decl>;</decl_stmt>

	<comment type="block">/* Align descriptors to a cacheline boundary. */</comment>
	<expr_stmt><expr><name>BufferDescriptors</name> <operator>=</operator> <operator>(</operator><name>BufferDescPadded</name> <operator>*</operator><operator>)</operator>
		<call><name>ShmemInitStruct</name><argument_list>(<argument><expr><literal type="string">"Buffer Descriptors"</literal></expr></argument>,
						<argument><expr><name>NBuffers</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>BufferDescPadded</name></expr></argument>)</argument_list></sizeof></expr></argument>,
						<argument><expr><operator>&amp;</operator><name>foundDescs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>BufferBlocks</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator>
		<call><name>ShmemInitStruct</name><argument_list>(<argument><expr><literal type="string">"Buffer Blocks"</literal></expr></argument>,
						<argument><expr><name>NBuffers</name> <operator>*</operator> <operator>(</operator><name>Size</name><operator>)</operator> <name>BLCKSZ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>foundBufs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Align lwlocks to cacheline boundary */</comment>
	<expr_stmt><expr><name>BufferIOLWLockArray</name> <operator>=</operator> <operator>(</operator><name>LWLockMinimallyPadded</name> <operator>*</operator><operator>)</operator>
		<call><name>ShmemInitStruct</name><argument_list>(<argument><expr><literal type="string">"Buffer IO Locks"</literal></expr></argument>,
						<argument><expr><name>NBuffers</name> <operator>*</operator> <operator>(</operator><name>Size</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>LWLockMinimallyPadded</name></expr></argument>)</argument_list></sizeof></expr></argument>,
						<argument><expr><operator>&amp;</operator><name>foundIOLocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * The array used to sort to-be-checkpointed buffer ids is located in
	 * shared memory, to avoid having to allocate significant amounts of
	 * memory at runtime. As that'd be in the middle of a checkpoint, or when
	 * the checkpointer is restarted, memory allocation failures would be
	 * painful.
	 */</comment>
	<expr_stmt><expr><name>CkptBufferIds</name> <operator>=</operator> <operator>(</operator><name>CkptSortItem</name> <operator>*</operator><operator>)</operator>
		<call><name>ShmemInitStruct</name><argument_list>(<argument><expr><literal type="string">"Checkpoint BufferIds"</literal></expr></argument>,
						<argument><expr><name>NBuffers</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CkptSortItem</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>foundBufCkpt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>foundDescs</name> <operator>||</operator> <name>foundBufs</name> <operator>||</operator> <name>foundIOLocks</name> <operator>||</operator> <name>foundBufCkpt</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* should find all of these, or none of them */</comment>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>foundDescs</name> <operator>&amp;&amp;</operator> <name>foundBufs</name> <operator>&amp;&amp;</operator> <name>foundIOLocks</name> <operator>&amp;&amp;</operator> <name>foundBufCkpt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* note: this path is only taken in EXEC_BACKEND case */</comment>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * Initialize all the buffer headers.
		 */</comment>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NBuffers</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>BufferDesc</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>GetBufferDescriptor</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>CLEAR_BUFFERTAG</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>pg_atomic_init_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>wait_backend_pid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

			<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>buf_id</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

			<comment type="block">/*
			 * Initially link all the buffers together as unused. Subsequent
			 * management of this list is done by freelist.c.
			 */</comment>
			<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>freeNext</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>LWLockInitialize</name><argument_list>(<argument><expr><call><name>BufferDescriptorGetContentLock</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>,
							 <argument><expr><name>LWTRANCHE_BUFFER_CONTENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>LWLockInitialize</name><argument_list>(<argument><expr><call><name>BufferDescriptorGetIOLock</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>,
							 <argument><expr><name>LWTRANCHE_BUFFER_IO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>

		<comment type="block">/* Correct last entry of linked list */</comment>
		<expr_stmt><expr><call><name>GetBufferDescriptor</name><argument_list>(<argument><expr><name>NBuffers</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>freeNext</name> <operator>=</operator> <name>FREENEXT_END_OF_LIST</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* Init other shared buffer-management stuff */</comment>
	<expr_stmt><expr><call><name>StrategyInitialize</name><argument_list>(<argument><expr><operator>!</operator><name>foundDescs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Initialize per-backend file flush context */</comment>
	<expr_stmt><expr><call><name>WritebackContextInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>BackendWritebackContext</name></expr></argument>,
						 <argument><expr><operator>&amp;</operator><name>backend_flush_after</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * BufferShmemSize
 *
 * compute the size of shared memory for the buffer pool including
 * data pages, buffer descriptors, hash tables, etc.
 */</comment>
<function><type><name>Size</name></type>
<name>BufferShmemSize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Size</name></type>		<name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/* size of buffer descriptors */</comment>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>add_size</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><call><name>mul_size</name><argument_list>(<argument><expr><name>NBuffers</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BufferDescPadded</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* to allow aligning buffer descriptors */</comment>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>add_size</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>PG_CACHE_LINE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* size of data pages */</comment>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>add_size</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><call><name>mul_size</name><argument_list>(<argument><expr><name>NBuffers</name></expr></argument>, <argument><expr><name>BLCKSZ</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* size of stuff controlled by freelist.c */</comment>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>add_size</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><call><name>StrategyShmemSize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * It would be nice to include the I/O locks in the BufferDesc, but that
	 * would increase the size of a BufferDesc to more than one cache line,
	 * and benchmarking has shown that keeping every BufferDesc aligned on a
	 * cache line boundary is important for performance.  So, instead, the
	 * array of I/O locks is allocated in a separate tranche.  Because those
	 * locks are not highly contended, we lay out the array with minimal
	 * padding.
	 */</comment>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>add_size</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><call><name>mul_size</name><argument_list>(<argument><expr><name>NBuffers</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>LWLockMinimallyPadded</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* to allow aligning the above */</comment>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>add_size</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>PG_CACHE_LINE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* size of checkpoint sort array in bufmgr.c */</comment>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>add_size</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><call><name>mul_size</name><argument_list>(<argument><expr><name>NBuffers</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CkptSortItem</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>
</unit>
