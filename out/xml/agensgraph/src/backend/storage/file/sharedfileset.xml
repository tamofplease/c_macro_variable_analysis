<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/backend/storage/file/sharedfileset.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * sharedfileset.c
 *	  Shared temporary file management.
 *
 * Portions Copyright (c) 1996-2020, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * IDENTIFICATION
 *	  src/backend/storage/file/sharedfileset.c
 *
 * SharedFileSets provide a temporary namespace (think directory) so that
 * files can be discovered by name, and a shared ownership semantics so that
 * shared files survive until the last user detaches.
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_tablespace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/tablespace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/hashfn.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/dsm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/sharedfileset.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SharedFileSetOnDetach</name><parameter_list>(<parameter><decl><type><name>dsm_segment</name> <modifier>*</modifier></type><name>segment</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>datum</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SharedFileSetPath</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>SharedFileSet</name> <modifier>*</modifier></type><name>fileset</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>tablespace</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SharedFilePath</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>SharedFileSet</name> <modifier>*</modifier></type><name>fileset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Oid</name></type>	<name>ChooseTablespace</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SharedFileSet</name> <modifier>*</modifier></type><name>fileset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * Initialize a space for temporary files that can be opened for read-only
 * access by other backends.  Other backends must attach to it before
 * accessing it.  Associate this SharedFileSet with 'seg'.  Any contained
 * files will be deleted when the last backend detaches.
 *
 * Files will be distributed over the tablespaces configured in
 * temp_tablespaces.
 *
 * Under the covers the set is one or more directories which will eventually
 * be deleted when there are no backends attached.
 */</comment>
<function><type><name>void</name></type>
<name>SharedFileSetInit</name><parameter_list>(<parameter><decl><type><name>SharedFileSet</name> <modifier>*</modifier></type><name>fileset</name></decl></parameter>, <parameter><decl><type><name>dsm_segment</name> <modifier>*</modifier></type><name>seg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>uint32</name></type> <name>counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SpinLockInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fileset</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fileset</name><operator>-&gt;</operator><name>refcnt</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fileset</name><operator>-&gt;</operator><name>creator_pid</name></name> <operator>=</operator> <name>MyProcPid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fileset</name><operator>-&gt;</operator><name>number</name></name> <operator>=</operator> <name>counter</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>counter</name> <operator>=</operator> <operator>(</operator><name>counter</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>INT_MAX</name></expr>;</expr_stmt>

	<comment type="block">/* Capture the tablespace OIDs so that all backends agree on them. */</comment>
	<expr_stmt><expr><call><name>PrepareTempTablespaces</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fileset</name><operator>-&gt;</operator><name>ntablespaces</name></name> <operator>=</operator>
		<call><name>GetTempTablespaces</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fileset</name><operator>-&gt;</operator><name>tablespaces</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
						   <argument><expr><call><name>lengthof</name><argument_list>(<argument><expr><name><name>fileset</name><operator>-&gt;</operator><name>tablespaces</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>fileset</name><operator>-&gt;</operator><name>ntablespaces</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* If the GUC is empty, use current database's default tablespace */</comment>
		<expr_stmt><expr><name><name>fileset</name><operator>-&gt;</operator><name>tablespaces</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>MyDatabaseTableSpace</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fileset</name><operator>-&gt;</operator><name>ntablespaces</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * An entry of InvalidOid means use the default tablespace for the
		 * current database.  Replace that now, to be sure that all users of
		 * the SharedFileSet agree on what to do.
		 */</comment>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fileset</name><operator>-&gt;</operator><name>ntablespaces</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>fileset</name><operator>-&gt;</operator><name>tablespaces</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>InvalidOid</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>fileset</name><operator>-&gt;</operator><name>tablespaces</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>MyDatabaseTableSpace</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* Register our cleanup callback. */</comment>
	<expr_stmt><expr><call><name>on_dsm_detach</name><argument_list>(<argument><expr><name>seg</name></expr></argument>, <argument><expr><name>SharedFileSetOnDetach</name></expr></argument>, <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>fileset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Attach to a set of directories that was created with SharedFileSetInit.
 */</comment>
<function><type><name>void</name></type>
<name>SharedFileSetAttach</name><parameter_list>(<parameter><decl><type><name>SharedFileSet</name> <modifier>*</modifier></type><name>fileset</name></decl></parameter>, <parameter><decl><type><name>dsm_segment</name> <modifier>*</modifier></type><name>seg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>success</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fileset</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>fileset</name><operator>-&gt;</operator><name>refcnt</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><operator>++</operator><name><name>fileset</name><operator>-&gt;</operator><name>refcnt</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>success</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fileset</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OBJECT_NOT_IN_PREREQUISITE_STATE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not attach to a SharedFileSet that is already destroyed"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Register our cleanup callback. */</comment>
	<expr_stmt><expr><call><name>on_dsm_detach</name><argument_list>(<argument><expr><name>seg</name></expr></argument>, <argument><expr><name>SharedFileSetOnDetach</name></expr></argument>, <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>fileset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Create a new file in the given set.
 */</comment>
<function><type><name>File</name></type>
<name>SharedFileSetCreate</name><parameter_list>(<parameter><decl><type><name>SharedFileSet</name> <modifier>*</modifier></type><name>fileset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>path</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>File</name></type>		<name>file</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SharedFilePath</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>fileset</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>PathNameCreateTemporaryFile</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* If we failed, see if we need to create the directory on demand. */</comment>
	<if_stmt><if>if <condition>(<expr><name>file</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type>		<name><name>tempdirpath</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name></type>		<name><name>filesetpath</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Oid</name></type>			<name>tablespace</name> <init>= <expr><call><name>ChooseTablespace</name><argument_list>(<argument><expr><name>fileset</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>TempTablespacePath</name><argument_list>(<argument><expr><name>tempdirpath</name></expr></argument>, <argument><expr><name>tablespace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SharedFileSetPath</name><argument_list>(<argument><expr><name>filesetpath</name></expr></argument>, <argument><expr><name>fileset</name></expr></argument>, <argument><expr><name>tablespace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PathNameCreateTemporaryDir</name><argument_list>(<argument><expr><name>tempdirpath</name></expr></argument>, <argument><expr><name>filesetpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>PathNameCreateTemporaryFile</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>file</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Open a file that was created with SharedFileSetCreate(), possibly in
 * another backend.
 */</comment>
<function><type><name>File</name></type>
<name>SharedFileSetOpen</name><parameter_list>(<parameter><decl><type><name>SharedFileSet</name> <modifier>*</modifier></type><name>fileset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>path</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>File</name></type>		<name>file</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SharedFilePath</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>fileset</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>PathNameOpenTemporaryFile</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>file</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Delete a file that was created with SharedFileSetCreate().
 * Return true if the file existed, false if didn't.
 */</comment>
<function><type><name>bool</name></type>
<name>SharedFileSetDelete</name><parameter_list>(<parameter><decl><type><name>SharedFileSet</name> <modifier>*</modifier></type><name>fileset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
					<parameter><decl><type><name>bool</name></type> <name>error_on_failure</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>path</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SharedFilePath</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>fileset</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>PathNameDeleteTemporaryFile</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>error_on_failure</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Delete all files in the set.
 */</comment>
<function><type><name>void</name></type>
<name>SharedFileSetDeleteAll</name><parameter_list>(<parameter><decl><type><name>SharedFileSet</name> <modifier>*</modifier></type><name>fileset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>dirpath</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Delete the directory we created in each tablespace.  Doesn't fail
	 * because we use this in error cleanup paths, but can generate LOG
	 * message on IO error.
	 */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fileset</name><operator>-&gt;</operator><name>ntablespaces</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>SharedFileSetPath</name><argument_list>(<argument><expr><name>dirpath</name></expr></argument>, <argument><expr><name>fileset</name></expr></argument>, <argument><expr><name><name>fileset</name><operator>-&gt;</operator><name>tablespaces</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PathNameDeleteTemporaryDir</name><argument_list>(<argument><expr><name>dirpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
 * Callback function that will be invoked when this backend detaches from a
 * DSM segment holding a SharedFileSet that it has created or attached to.  If
 * we are the last to detach, then try to remove the directories and
 * everything in them.  We can't raise an error on failures, because this runs
 * in error cleanup paths.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>SharedFileSetOnDetach</name><parameter_list>(<parameter><decl><type><name>dsm_segment</name> <modifier>*</modifier></type><name>segment</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>datum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>unlink_all</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SharedFileSet</name> <modifier>*</modifier></type><name>fileset</name> <init>= <expr><operator>(</operator><name>SharedFileSet</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>datum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fileset</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>fileset</name><operator>-&gt;</operator><name>refcnt</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>--</operator><name><name>fileset</name><operator>-&gt;</operator><name>refcnt</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>unlink_all</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fileset</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * If we are the last to detach, we delete the directory in all
	 * tablespaces.  Note that we are still actually attached for the rest of
	 * this function so we can safely access its data.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>unlink_all</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>SharedFileSetDeleteAll</name><argument_list>(<argument><expr><name>fileset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Build the path for the directory holding the files backing a SharedFileSet
 * in a given tablespace.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>SharedFileSetPath</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>SharedFileSet</name> <modifier>*</modifier></type><name>fileset</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>tablespace</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>tempdirpath</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>TempTablespacePath</name><argument_list>(<argument><expr><name>tempdirpath</name></expr></argument>, <argument><expr><name>tablespace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>, <argument><expr><literal type="string">"%s/%s%lu.%u.sharedfileset"</literal></expr></argument>,
			 <argument><expr><name>tempdirpath</name></expr></argument>, <argument><expr><name>PG_TEMP_FILE_PREFIX</name></expr></argument>,
			 <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name><name>fileset</name><operator>-&gt;</operator><name>creator_pid</name></name></expr></argument>, <argument><expr><name><name>fileset</name><operator>-&gt;</operator><name>number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Sorting hat to determine which tablespace a given shared temporary file
 * belongs in.
 */</comment>
<function><type><specifier>static</specifier> <name>Oid</name></type>
<name>ChooseTablespace</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SharedFileSet</name> <modifier>*</modifier></type><name>fileset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>hash</name> <init>= <expr><call><name>hash_any</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><name><name>fileset</name><operator>-&gt;</operator><name>tablespaces</name><index>[<expr><name>hash</name> <operator>%</operator> <name><name>fileset</name><operator>-&gt;</operator><name>ntablespaces</name></name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Compute the full path of a file in a SharedFileSet.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>SharedFilePath</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>SharedFileSet</name> <modifier>*</modifier></type><name>fileset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>dirpath</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SharedFileSetPath</name><argument_list>(<argument><expr><name>dirpath</name></expr></argument>, <argument><expr><name>fileset</name></expr></argument>, <argument><expr><call><name>ChooseTablespace</name><argument_list>(<argument><expr><name>fileset</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>dirpath</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
