<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/backend/storage/lmgr/spin.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * spin.c
 *	   Hardware-independent implementation of spinlocks.
 *
 *
 * For machines that have test-and-set (TAS) instructions, s_lock.h/.c
 * define the spinlock implementation.  This file contains only a stub
 * implementation for spinlocks using PGSemaphores.  Unless semaphores
 * are implemented in a way that doesn't involve a kernel call, this
 * is too slow to be very useful :-(
 *
 *
 * Portions Copyright (c) 1996-2020, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/storage/lmgr/spin.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/pg_sema.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/shmem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/spin.h"</cpp:file></cpp:include>


<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_SPINLOCKS</name></cpp:ifndef>

<comment type="block">/*
 * No TAS, so spinlocks are implemented as PGSemaphores.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_ATOMICS</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_EMULATION_SEMAPHORES</name></cpp:macro> <cpp:value>(NUM_SPINLOCK_SEMAPHORES + NUM_ATOMICS_SEMAPHORES)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_EMULATION_SEMAPHORES</name></cpp:macro> <cpp:value>(NUM_SPINLOCK_SEMAPHORES)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* DISABLE_ATOMICS */</comment>

<decl_stmt><decl><type><name>PGSemaphore</name> <modifier>*</modifier></type><name>SpinlockSemaArray</name></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>							<comment type="block">/* !HAVE_SPINLOCKS */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_EMULATION_SEMAPHORES</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* HAVE_SPINLOCKS */</comment>

<comment type="block">/*
 * Report the amount of shared memory needed to store semaphores for spinlock
 * support.
 */</comment>
<function><type><name>Size</name></type>
<name>SpinlockSemaSize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>NUM_EMULATION_SEMAPHORES</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PGSemaphore</name></expr></argument>)</argument_list></sizeof></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Report number of semaphores needed to support spinlocks.
 */</comment>
<function><type><name>int</name></type>
<name>SpinlockSemas</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>NUM_EMULATION_SEMAPHORES</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_SPINLOCKS</name></cpp:ifndef>

<comment type="block">/*
 * Initialize spinlock emulation.
 *
 * This must be called after PGReserveSemaphores().
 */</comment>
<function><type><name>void</name></type>
<name>SpinlockSemaInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PGSemaphore</name> <modifier>*</modifier></type><name>spinsemas</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>nsemas</name> <init>= <expr><call><name>SpinlockSemas</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * We must use ShmemAllocUnlocked(), since the spinlock protecting
	 * ShmemAlloc() obviously can't be ready yet.
	 */</comment>
	<expr_stmt><expr><name>spinsemas</name> <operator>=</operator> <operator>(</operator><name>PGSemaphore</name> <operator>*</operator><operator>)</operator> <call><name>ShmemAllocUnlocked</name><argument_list>(<argument><expr><call><name>SpinlockSemaSize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nsemas</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>spinsemas</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>PGSemaphoreCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	<expr_stmt><expr><name>SpinlockSemaArray</name> <operator>=</operator> <name>spinsemas</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * s_lock.h hardware-spinlock emulation using semaphores
 *
 * We map all spinlocks onto NUM_EMULATION_SEMAPHORES semaphores.  It's okay to
 * map multiple spinlocks onto one semaphore because no process should ever
 * hold more than one at a time.  We just need enough semaphores so that we
 * aren't adding too much extra contention from that.
 *
 * There is one exception to the restriction of only holding one spinlock at a
 * time, which is that it's ok if emulated atomic operations are nested inside
 * spinlocks. To avoid the danger of spinlocks and atomic using the same sema,
 * we make sure "normal" spinlocks and atomics backed by spinlocks use
 * distinct semaphores (see the nested argument to s_init_lock_sema).
 *
 * slock_t is just an int for this implementation; it holds the spinlock
 * number from 1..NUM_EMULATION_SEMAPHORES.  We intentionally ensure that 0
 * is not a valid value, so that testing with this code can help find
 * failures to initialize spinlocks.
 */</comment>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>s_check_valid</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>lockndx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>lockndx</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>lockndx</name> <operator>&gt;</operator> <name>NUM_EMULATION_SEMAPHORES</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid spinlock number: %d"</literal></expr></argument>, <argument><expr><name>lockndx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>s_init_lock_sema</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>slock_t</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>nested</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>uint32</name></type> <name>counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>offset</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>sema_total</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>idx</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>nested</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * To allow nesting atomics inside spinlocked sections, use a
		 * different spinlock. See comment above.
		 */</comment>
		<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <name>NUM_SPINLOCK_SEMAPHORES</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>sema_total</name> <operator>=</operator> <name>NUM_ATOMICS_SEMAPHORES</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>sema_total</name> <operator>=</operator> <name>NUM_SPINLOCK_SEMAPHORES</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name>idx</name> <operator>=</operator> <operator>(</operator><name>counter</name><operator>++</operator> <operator>%</operator> <name>sema_total</name><operator>)</operator> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>

	<comment type="block">/* double check we did things correctly */</comment>
	<expr_stmt><expr><call><name>s_check_valid</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>lock</name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>s_unlock_sema</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>slock_t</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>lockndx</name> <init>= <expr><operator>*</operator><name>lock</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>s_check_valid</name><argument_list>(<argument><expr><name>lockndx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PGSemaphoreUnlock</name><argument_list>(<argument><expr><name><name>SpinlockSemaArray</name><index>[<expr><name>lockndx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>s_lock_free_sema</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>slock_t</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* We don't currently use S_LOCK_FREE anyway */</comment>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"spin.c does not support S_LOCK_FREE()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>tas_sema</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>slock_t</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>lockndx</name> <init>= <expr><operator>*</operator><name>lock</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>s_check_valid</name><argument_list>(<argument><expr><name>lockndx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Note that TAS macros return 0 if *success* */</comment>
	<return>return <expr><operator>!</operator><call><name>PGSemaphoreTryLock</name><argument_list>(<argument><expr><name><name>SpinlockSemaArray</name><index>[<expr><name>lockndx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* !HAVE_SPINLOCKS */</comment>
</unit>
