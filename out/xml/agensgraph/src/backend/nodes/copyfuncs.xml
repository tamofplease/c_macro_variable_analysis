<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/backend/nodes/copyfuncs.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * copyfuncs.c
 *	  Copy functions for Postgres tree nodes.
 *
 * NOTE: we currently support copying all node types found in parse and
 * plan trees.  We do not support copying executor state trees; there
 * is no need for that, and no point in maintaining all the code that
 * would be needed.  We also do not support copying Path trees, mainly
 * because the circular linkages between RelOptInfo and Path nodes can't
 * be handled easily in a simple depth-first traversal.
 *
 *
 * Portions Copyright (c) 1996-2020, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * IDENTIFICATION
 *	  src/backend/nodes/copyfuncs.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/extensible.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/pathnodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/graphnodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/plannodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/datum.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/rel.h"</cpp:file></cpp:include>


<comment type="block">/*
 * Macros to simplify copying of different kinds of fields.  Use these
 * wherever possible to reduce the chance for silly typos.  Note that these
 * hard-wire the convention that the local variables in a Copy routine are
 * named 'newnode' and 'from'.
 */</comment>

<comment type="block">/* Copy a simple scalar field (int, float, bool, enum, etc) */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPY_SCALAR_FIELD</name><parameter_list>(<parameter><type><name>fldname</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(newnode-&gt;fldname = from-&gt;fldname)</cpp:value></cpp:define>

<comment type="block">/* Copy a field that is a pointer to some kind of Node or Node tree */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPY_NODE_FIELD</name><parameter_list>(<parameter><type><name>fldname</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(newnode-&gt;fldname = copyObjectImpl(from-&gt;fldname))</cpp:value></cpp:define>

<comment type="block">/* Copy a field that is a pointer to a Bitmapset */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPY_BITMAPSET_FIELD</name><parameter_list>(<parameter><type><name>fldname</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(newnode-&gt;fldname = bms_copy(from-&gt;fldname))</cpp:value></cpp:define>

<comment type="block">/* Copy a field that is a pointer to a C string, or perhaps NULL */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPY_STRING_FIELD</name><parameter_list>(<parameter><type><name>fldname</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(newnode-&gt;fldname = from-&gt;fldname ? pstrdup(from-&gt;fldname) : (char *) NULL)</cpp:value></cpp:define>

<comment type="block">/* Copy a field that is a pointer to a simple palloc'd object of size sz */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPY_POINTER_FIELD</name><parameter_list>(<parameter><type><name>fldname</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>do { \
		Size	_size = (sz); \
		if (_size &gt; 0) \
		{ \
			newnode-&gt;fldname = palloc(_size); \
			memcpy(newnode-&gt;fldname, from-&gt;fldname, _size); \
		} \
	} while (0)</cpp:value></cpp:define>

<comment type="block">/* Copy a parse location field (for Copy, this is same as scalar case) */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPY_LOCATION_FIELD</name><parameter_list>(<parameter><type><name>fldname</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(newnode-&gt;fldname = from-&gt;fldname)</cpp:value></cpp:define>


<comment type="block">/* ****************************************************************
 *					 plannodes.h copy functions
 * ****************************************************************
 */</comment>

<comment type="block">/*
 * _copyPlannedStmt
 */</comment>
<function><type><specifier>static</specifier> <name>PlannedStmt</name> <modifier>*</modifier></type>
<name>_copyPlannedStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PlannedStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PlannedStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>PlannedStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>commandType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>queryId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>hasReturning</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>hasModifyingCTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>canSetTag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>transientPlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>dependsOnRole</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>parallelModeNeeded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>jitFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>planTree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>rtable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>resultRelations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>rootResultRelations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>appendRelations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>subplans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_BITMAPSET_FIELD</name><argument_list>(<argument><expr><name>rewindPlanIDs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>rowMarks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>relationOids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>invalItems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>paramExecTypes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>utilityStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>stmt_location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>stmt_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>hasGraphwriteClause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * CopyPlanFields
 *
 *		This function copies the fields of the Plan node.  It is used by
 *		all the copy functions for classes which inherit from Plan.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>CopyPlanFields</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Plan</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>Plan</name> <modifier>*</modifier></type><name>newnode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>startup_cost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>total_cost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>plan_rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>plan_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>parallel_aware</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>parallel_safe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>plan_node_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>targetlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>qual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>lefttree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>righttree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>initPlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_BITMAPSET_FIELD</name><argument_list>(<argument><expr><name>extParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_BITMAPSET_FIELD</name><argument_list>(<argument><expr><name>allParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * _copyPlan
 */</comment>
<function><type><specifier>static</specifier> <name>Plan</name> <modifier>*</modifier></type>
<name>_copyPlan</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Plan</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Plan</name>	   <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>Plan</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * copy node superclass fields
	 */</comment>
	<expr_stmt><expr><call><name>CopyPlanFields</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>newnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * _copyResult
 */</comment>
<function><type><specifier>static</specifier> <name>Result</name> <modifier>*</modifier></type>
<name>_copyResult</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Result</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Result</name>	   <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>Result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * copy node superclass fields
	 */</comment>
	<expr_stmt><expr><call><name>CopyPlanFields</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>Plan</name> <operator>*</operator><operator>)</operator> <name>from</name></expr></argument>, <argument><expr><operator>(</operator><name>Plan</name> <operator>*</operator><operator>)</operator> <name>newnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * copy remainder of node
	 */</comment>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>resconstantqual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyProjectSet
 */</comment>
<function><type><specifier>static</specifier> <name>ProjectSet</name> <modifier>*</modifier></type>
<name>_copyProjectSet</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ProjectSet</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ProjectSet</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>ProjectSet</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * copy node superclass fields
	 */</comment>
	<expr_stmt><expr><call><name>CopyPlanFields</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>Plan</name> <operator>*</operator><operator>)</operator> <name>from</name></expr></argument>, <argument><expr><operator>(</operator><name>Plan</name> <operator>*</operator><operator>)</operator> <name>newnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyModifyTable
 */</comment>
<function><type><specifier>static</specifier> <name>ModifyTable</name> <modifier>*</modifier></type>
<name>_copyModifyTable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ModifyTable</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ModifyTable</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>ModifyTable</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * copy node superclass fields
	 */</comment>
	<expr_stmt><expr><call><name>CopyPlanFields</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>Plan</name> <operator>*</operator><operator>)</operator> <name>from</name></expr></argument>, <argument><expr><operator>(</operator><name>Plan</name> <operator>*</operator><operator>)</operator> <name>newnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * copy remainder of node
	 */</comment>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>operation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>canSetTag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>nominalRelation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>rootRelation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>partColsUpdated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>resultRelations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>resultRelIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>rootResultRelIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>plans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>withCheckOptionLists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>returningLists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>fdwPrivLists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_BITMAPSET_FIELD</name><argument_list>(<argument><expr><name>fdwDirectModifyPlans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>rowMarks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>epqParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>onConflictAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>arbiterIndexes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>onConflictSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>onConflictWhere</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>exclRelRTI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>exclRelTlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyAppend
 */</comment>
<function><type><specifier>static</specifier> <name>Append</name> <modifier>*</modifier></type>
<name>_copyAppend</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Append</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Append</name>	   <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>Append</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * copy node superclass fields
	 */</comment>
	<expr_stmt><expr><call><name>CopyPlanFields</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>Plan</name> <operator>*</operator><operator>)</operator> <name>from</name></expr></argument>, <argument><expr><operator>(</operator><name>Plan</name> <operator>*</operator><operator>)</operator> <name>newnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * copy remainder of node
	 */</comment>
	<expr_stmt><expr><call><name>COPY_BITMAPSET_FIELD</name><argument_list>(<argument><expr><name>apprelids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>appendplans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>first_partial_plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>part_prune_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyMergeAppend
 */</comment>
<function><type><specifier>static</specifier> <name>MergeAppend</name> <modifier>*</modifier></type>
<name>_copyMergeAppend</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>MergeAppend</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MergeAppend</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>MergeAppend</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * copy node superclass fields
	 */</comment>
	<expr_stmt><expr><call><name>CopyPlanFields</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>Plan</name> <operator>*</operator><operator>)</operator> <name>from</name></expr></argument>, <argument><expr><operator>(</operator><name>Plan</name> <operator>*</operator><operator>)</operator> <name>newnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * copy remainder of node
	 */</comment>
	<expr_stmt><expr><call><name>COPY_BITMAPSET_FIELD</name><argument_list>(<argument><expr><name>apprelids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>mergeplans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>numCols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_POINTER_FIELD</name><argument_list>(<argument><expr><name>sortColIdx</name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>numCols</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AttrNumber</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_POINTER_FIELD</name><argument_list>(<argument><expr><name>sortOperators</name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>numCols</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_POINTER_FIELD</name><argument_list>(<argument><expr><name>collations</name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>numCols</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_POINTER_FIELD</name><argument_list>(<argument><expr><name>nullsFirst</name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>numCols</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>part_prune_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyRecursiveUnion
 */</comment>
<function><type><specifier>static</specifier> <name>RecursiveUnion</name> <modifier>*</modifier></type>
<name>_copyRecursiveUnion</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RecursiveUnion</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RecursiveUnion</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>RecursiveUnion</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * copy node superclass fields
	 */</comment>
	<expr_stmt><expr><call><name>CopyPlanFields</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>Plan</name> <operator>*</operator><operator>)</operator> <name>from</name></expr></argument>, <argument><expr><operator>(</operator><name>Plan</name> <operator>*</operator><operator>)</operator> <name>newnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * copy remainder of node
	 */</comment>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>wtParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>numCols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_POINTER_FIELD</name><argument_list>(<argument><expr><name>dupColIdx</name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>numCols</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AttrNumber</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_POINTER_FIELD</name><argument_list>(<argument><expr><name>dupOperators</name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>numCols</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_POINTER_FIELD</name><argument_list>(<argument><expr><name>dupCollations</name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>numCols</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>numGroups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyBitmapAnd
 */</comment>
<function><type><specifier>static</specifier> <name>BitmapAnd</name> <modifier>*</modifier></type>
<name>_copyBitmapAnd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BitmapAnd</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BitmapAnd</name>  <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>BitmapAnd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * copy node superclass fields
	 */</comment>
	<expr_stmt><expr><call><name>CopyPlanFields</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>Plan</name> <operator>*</operator><operator>)</operator> <name>from</name></expr></argument>, <argument><expr><operator>(</operator><name>Plan</name> <operator>*</operator><operator>)</operator> <name>newnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * copy remainder of node
	 */</comment>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>bitmapplans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyBitmapOr
 */</comment>
<function><type><specifier>static</specifier> <name>BitmapOr</name> <modifier>*</modifier></type>
<name>_copyBitmapOr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BitmapOr</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BitmapOr</name>   <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>BitmapOr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * copy node superclass fields
	 */</comment>
	<expr_stmt><expr><call><name>CopyPlanFields</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>Plan</name> <operator>*</operator><operator>)</operator> <name>from</name></expr></argument>, <argument><expr><operator>(</operator><name>Plan</name> <operator>*</operator><operator>)</operator> <name>newnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * copy remainder of node
	 */</comment>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>isshared</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>bitmapplans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyGather
 */</comment>
<function><type><specifier>static</specifier> <name>Gather</name> <modifier>*</modifier></type>
<name>_copyGather</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Gather</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Gather</name>	   <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>Gather</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * copy node superclass fields
	 */</comment>
	<expr_stmt><expr><call><name>CopyPlanFields</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>Plan</name> <operator>*</operator><operator>)</operator> <name>from</name></expr></argument>, <argument><expr><operator>(</operator><name>Plan</name> <operator>*</operator><operator>)</operator> <name>newnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * copy remainder of node
	 */</comment>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>num_workers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>rescan_param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>single_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>invisible</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_BITMAPSET_FIELD</name><argument_list>(<argument><expr><name>initParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyGatherMerge
 */</comment>
<function><type><specifier>static</specifier> <name>GatherMerge</name> <modifier>*</modifier></type>
<name>_copyGatherMerge</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GatherMerge</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GatherMerge</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>GatherMerge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * copy node superclass fields
	 */</comment>
	<expr_stmt><expr><call><name>CopyPlanFields</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>Plan</name> <operator>*</operator><operator>)</operator> <name>from</name></expr></argument>, <argument><expr><operator>(</operator><name>Plan</name> <operator>*</operator><operator>)</operator> <name>newnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * copy remainder of node
	 */</comment>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>num_workers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>rescan_param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>numCols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_POINTER_FIELD</name><argument_list>(<argument><expr><name>sortColIdx</name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>numCols</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AttrNumber</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_POINTER_FIELD</name><argument_list>(<argument><expr><name>sortOperators</name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>numCols</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_POINTER_FIELD</name><argument_list>(<argument><expr><name>collations</name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>numCols</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_POINTER_FIELD</name><argument_list>(<argument><expr><name>nullsFirst</name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>numCols</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_BITMAPSET_FIELD</name><argument_list>(<argument><expr><name>initParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * CopyScanFields
 *
 *		This function copies the fields of the Scan node.  It is used by
 *		all the copy functions for classes which inherit from Scan.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>CopyScanFields</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Scan</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>Scan</name> <modifier>*</modifier></type><name>newnode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CopyPlanFields</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>Plan</name> <operator>*</operator><operator>)</operator> <name>from</name></expr></argument>, <argument><expr><operator>(</operator><name>Plan</name> <operator>*</operator><operator>)</operator> <name>newnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>scanrelid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * _copyScan
 */</comment>
<function><type><specifier>static</specifier> <name>Scan</name> <modifier>*</modifier></type>
<name>_copyScan</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Scan</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Scan</name>	   <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>Scan</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * copy node superclass fields
	 */</comment>
	<expr_stmt><expr><call><name>CopyScanFields</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>Scan</name> <operator>*</operator><operator>)</operator> <name>from</name></expr></argument>, <argument><expr><operator>(</operator><name>Scan</name> <operator>*</operator><operator>)</operator> <name>newnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copySeqScan
 */</comment>
<function><type><specifier>static</specifier> <name>SeqScan</name> <modifier>*</modifier></type>
<name>_copySeqScan</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SeqScan</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SeqScan</name>    <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>SeqScan</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * copy node superclass fields
	 */</comment>
	<expr_stmt><expr><call><name>CopyScanFields</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>Scan</name> <operator>*</operator><operator>)</operator> <name>from</name></expr></argument>, <argument><expr><operator>(</operator><name>Scan</name> <operator>*</operator><operator>)</operator> <name>newnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copySampleScan
 */</comment>
<function><type><specifier>static</specifier> <name>SampleScan</name> <modifier>*</modifier></type>
<name>_copySampleScan</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SampleScan</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SampleScan</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>SampleScan</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * copy node superclass fields
	 */</comment>
	<expr_stmt><expr><call><name>CopyScanFields</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>Scan</name> <operator>*</operator><operator>)</operator> <name>from</name></expr></argument>, <argument><expr><operator>(</operator><name>Scan</name> <operator>*</operator><operator>)</operator> <name>newnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * copy remainder of node
	 */</comment>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>tablesample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyIndexScan
 */</comment>
<function><type><specifier>static</specifier> <name>IndexScan</name> <modifier>*</modifier></type>
<name>_copyIndexScan</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>IndexScan</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>IndexScan</name>  <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>IndexScan</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * copy node superclass fields
	 */</comment>
	<expr_stmt><expr><call><name>CopyScanFields</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>Scan</name> <operator>*</operator><operator>)</operator> <name>from</name></expr></argument>, <argument><expr><operator>(</operator><name>Scan</name> <operator>*</operator><operator>)</operator> <name>newnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * copy remainder of node
	 */</comment>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>indexid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>indexqual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>indexqualorig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>indexorderby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>indexorderbyorig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>indexorderbyops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>indexorderdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyIndexOnlyScan
 */</comment>
<function><type><specifier>static</specifier> <name>IndexOnlyScan</name> <modifier>*</modifier></type>
<name>_copyIndexOnlyScan</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>IndexOnlyScan</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>IndexOnlyScan</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>IndexOnlyScan</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * copy node superclass fields
	 */</comment>
	<expr_stmt><expr><call><name>CopyScanFields</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>Scan</name> <operator>*</operator><operator>)</operator> <name>from</name></expr></argument>, <argument><expr><operator>(</operator><name>Scan</name> <operator>*</operator><operator>)</operator> <name>newnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * copy remainder of node
	 */</comment>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>indexid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>indexqual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>recheckqual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>indexorderby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>indextlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>indexorderdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyBitmapIndexScan
 */</comment>
<function><type><specifier>static</specifier> <name>BitmapIndexScan</name> <modifier>*</modifier></type>
<name>_copyBitmapIndexScan</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BitmapIndexScan</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BitmapIndexScan</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>BitmapIndexScan</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * copy node superclass fields
	 */</comment>
	<expr_stmt><expr><call><name>CopyScanFields</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>Scan</name> <operator>*</operator><operator>)</operator> <name>from</name></expr></argument>, <argument><expr><operator>(</operator><name>Scan</name> <operator>*</operator><operator>)</operator> <name>newnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * copy remainder of node
	 */</comment>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>indexid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>isshared</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>indexqual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>indexqualorig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyBitmapHeapScan
 */</comment>
<function><type><specifier>static</specifier> <name>BitmapHeapScan</name> <modifier>*</modifier></type>
<name>_copyBitmapHeapScan</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BitmapHeapScan</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BitmapHeapScan</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>BitmapHeapScan</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * copy node superclass fields
	 */</comment>
	<expr_stmt><expr><call><name>CopyScanFields</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>Scan</name> <operator>*</operator><operator>)</operator> <name>from</name></expr></argument>, <argument><expr><operator>(</operator><name>Scan</name> <operator>*</operator><operator>)</operator> <name>newnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * copy remainder of node
	 */</comment>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>bitmapqualorig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyTidScan
 */</comment>
<function><type><specifier>static</specifier> <name>TidScan</name> <modifier>*</modifier></type>
<name>_copyTidScan</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TidScan</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TidScan</name>    <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>TidScan</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * copy node superclass fields
	 */</comment>
	<expr_stmt><expr><call><name>CopyScanFields</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>Scan</name> <operator>*</operator><operator>)</operator> <name>from</name></expr></argument>, <argument><expr><operator>(</operator><name>Scan</name> <operator>*</operator><operator>)</operator> <name>newnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * copy remainder of node
	 */</comment>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>tidquals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copySubqueryScan
 */</comment>
<function><type><specifier>static</specifier> <name>SubqueryScan</name> <modifier>*</modifier></type>
<name>_copySubqueryScan</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SubqueryScan</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SubqueryScan</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>SubqueryScan</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * copy node superclass fields
	 */</comment>
	<expr_stmt><expr><call><name>CopyScanFields</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>Scan</name> <operator>*</operator><operator>)</operator> <name>from</name></expr></argument>, <argument><expr><operator>(</operator><name>Scan</name> <operator>*</operator><operator>)</operator> <name>newnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * copy remainder of node
	 */</comment>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>subplan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyFunctionScan
 */</comment>
<function><type><specifier>static</specifier> <name>FunctionScan</name> <modifier>*</modifier></type>
<name>_copyFunctionScan</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FunctionScan</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FunctionScan</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>FunctionScan</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * copy node superclass fields
	 */</comment>
	<expr_stmt><expr><call><name>CopyScanFields</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>Scan</name> <operator>*</operator><operator>)</operator> <name>from</name></expr></argument>, <argument><expr><operator>(</operator><name>Scan</name> <operator>*</operator><operator>)</operator> <name>newnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * copy remainder of node
	 */</comment>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>functions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>funcordinality</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyTableFuncScan
 */</comment>
<function><type><specifier>static</specifier> <name>TableFuncScan</name> <modifier>*</modifier></type>
<name>_copyTableFuncScan</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TableFuncScan</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TableFuncScan</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>TableFuncScan</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * copy node superclass fields
	 */</comment>
	<expr_stmt><expr><call><name>CopyScanFields</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>Scan</name> <operator>*</operator><operator>)</operator> <name>from</name></expr></argument>, <argument><expr><operator>(</operator><name>Scan</name> <operator>*</operator><operator>)</operator> <name>newnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * copy remainder of node
	 */</comment>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>tablefunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyValuesScan
 */</comment>
<function><type><specifier>static</specifier> <name>ValuesScan</name> <modifier>*</modifier></type>
<name>_copyValuesScan</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ValuesScan</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ValuesScan</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>ValuesScan</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * copy node superclass fields
	 */</comment>
	<expr_stmt><expr><call><name>CopyScanFields</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>Scan</name> <operator>*</operator><operator>)</operator> <name>from</name></expr></argument>, <argument><expr><operator>(</operator><name>Scan</name> <operator>*</operator><operator>)</operator> <name>newnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * copy remainder of node
	 */</comment>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>values_lists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyCteScan
 */</comment>
<function><type><specifier>static</specifier> <name>CteScan</name> <modifier>*</modifier></type>
<name>_copyCteScan</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CteScan</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CteScan</name>    <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CteScan</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * copy node superclass fields
	 */</comment>
	<expr_stmt><expr><call><name>CopyScanFields</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>Scan</name> <operator>*</operator><operator>)</operator> <name>from</name></expr></argument>, <argument><expr><operator>(</operator><name>Scan</name> <operator>*</operator><operator>)</operator> <name>newnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * copy remainder of node
	 */</comment>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>ctePlanId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>cteParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyNamedTuplestoreScan
 */</comment>
<function><type><specifier>static</specifier> <name>NamedTuplestoreScan</name> <modifier>*</modifier></type>
<name>_copyNamedTuplestoreScan</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>NamedTuplestoreScan</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>NamedTuplestoreScan</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>NamedTuplestoreScan</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * copy node superclass fields
	 */</comment>
	<expr_stmt><expr><call><name>CopyScanFields</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>Scan</name> <operator>*</operator><operator>)</operator> <name>from</name></expr></argument>, <argument><expr><operator>(</operator><name>Scan</name> <operator>*</operator><operator>)</operator> <name>newnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * copy remainder of node
	 */</comment>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>enrname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyWorkTableScan
 */</comment>
<function><type><specifier>static</specifier> <name>WorkTableScan</name> <modifier>*</modifier></type>
<name>_copyWorkTableScan</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WorkTableScan</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>WorkTableScan</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>WorkTableScan</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * copy node superclass fields
	 */</comment>
	<expr_stmt><expr><call><name>CopyScanFields</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>Scan</name> <operator>*</operator><operator>)</operator> <name>from</name></expr></argument>, <argument><expr><operator>(</operator><name>Scan</name> <operator>*</operator><operator>)</operator> <name>newnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * copy remainder of node
	 */</comment>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>wtParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyForeignScan
 */</comment>
<function><type><specifier>static</specifier> <name>ForeignScan</name> <modifier>*</modifier></type>
<name>_copyForeignScan</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ForeignScan</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ForeignScan</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>ForeignScan</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * copy node superclass fields
	 */</comment>
	<expr_stmt><expr><call><name>CopyScanFields</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>Scan</name> <operator>*</operator><operator>)</operator> <name>from</name></expr></argument>, <argument><expr><operator>(</operator><name>Scan</name> <operator>*</operator><operator>)</operator> <name>newnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * copy remainder of node
	 */</comment>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>operation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>fs_server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>fdw_exprs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>fdw_private</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>fdw_scan_tlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>fdw_recheck_quals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_BITMAPSET_FIELD</name><argument_list>(<argument><expr><name>fs_relids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>fsSystemCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyCustomScan
 */</comment>
<function><type><specifier>static</specifier> <name>CustomScan</name> <modifier>*</modifier></type>
<name>_copyCustomScan</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CustomScan</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CustomScan</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CustomScan</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * copy node superclass fields
	 */</comment>
	<expr_stmt><expr><call><name>CopyScanFields</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>Scan</name> <operator>*</operator><operator>)</operator> <name>from</name></expr></argument>, <argument><expr><operator>(</operator><name>Scan</name> <operator>*</operator><operator>)</operator> <name>newnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * copy remainder of node
	 */</comment>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>custom_plans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>custom_exprs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>custom_private</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>custom_scan_tlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_BITMAPSET_FIELD</name><argument_list>(<argument><expr><name>custom_relids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * NOTE: The method field of CustomScan is required to be a pointer to a
	 * static table of callback functions.  So we don't copy the table itself,
	 * just reference the original one.
	 */</comment>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * CopyJoinFields
 *
 *		This function copies the fields of the Join node.  It is used by
 *		all the copy functions for classes which inherit from Join.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>CopyJoinFields</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Join</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>Join</name> <modifier>*</modifier></type><name>newnode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CopyPlanFields</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>Plan</name> <operator>*</operator><operator>)</operator> <name>from</name></expr></argument>, <argument><expr><operator>(</operator><name>Plan</name> <operator>*</operator><operator>)</operator> <name>newnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>jointype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>inner_unique</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>joinqual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * _copyJoin
 */</comment>
<function><type><specifier>static</specifier> <name>Join</name> <modifier>*</modifier></type>
<name>_copyJoin</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Join</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Join</name>	   <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>Join</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * copy node superclass fields
	 */</comment>
	<expr_stmt><expr><call><name>CopyJoinFields</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>newnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * _copyNestLoop
 */</comment>
<function><type><specifier>static</specifier> <name>NestLoop</name> <modifier>*</modifier></type>
<name>_copyNestLoop</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>NestLoop</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>NestLoop</name>   <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>NestLoop</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * copy node superclass fields
	 */</comment>
	<expr_stmt><expr><call><name>CopyJoinFields</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>Join</name> <operator>*</operator><operator>)</operator> <name>from</name></expr></argument>, <argument><expr><operator>(</operator><name>Join</name> <operator>*</operator><operator>)</operator> <name>newnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * copy remainder of node
	 */</comment>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>nestParams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyNestLoopVLE
 */</comment>
<function><type><specifier>static</specifier> <name>NestLoopVLE</name> <modifier>*</modifier></type>
<name>_copyNestLoopVLE</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>NestLoopVLE</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>NestLoopVLE</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>NestLoopVLE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * copy node superclass fields
	 */</comment>
	<expr_stmt><expr><call><name>CopyJoinFields</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>Join</name> <operator>*</operator><operator>)</operator> <name>from</name></expr></argument>, <argument><expr><operator>(</operator><name>Join</name> <operator>*</operator><operator>)</operator> <name>newnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * copy remainder of node
	 */</comment>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name><name>nl</name><operator>.</operator><name>nestParams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>minHops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>maxHops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyMergeJoin
 */</comment>
<function><type><specifier>static</specifier> <name>MergeJoin</name> <modifier>*</modifier></type>
<name>_copyMergeJoin</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>MergeJoin</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MergeJoin</name>  <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>MergeJoin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>numCols</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * copy node superclass fields
	 */</comment>
	<expr_stmt><expr><call><name>CopyJoinFields</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>Join</name> <operator>*</operator><operator>)</operator> <name>from</name></expr></argument>, <argument><expr><operator>(</operator><name>Join</name> <operator>*</operator><operator>)</operator> <name>newnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * copy remainder of node
	 */</comment>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>skip_mark_restore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>mergeclauses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>numCols</name> <operator>=</operator> <call><name>list_length</name><argument_list>(<argument><expr><name><name>from</name><operator>-&gt;</operator><name>mergeclauses</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_POINTER_FIELD</name><argument_list>(<argument><expr><name>mergeFamilies</name></expr></argument>, <argument><expr><name>numCols</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_POINTER_FIELD</name><argument_list>(<argument><expr><name>mergeCollations</name></expr></argument>, <argument><expr><name>numCols</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_POINTER_FIELD</name><argument_list>(<argument><expr><name>mergeStrategies</name></expr></argument>, <argument><expr><name>numCols</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_POINTER_FIELD</name><argument_list>(<argument><expr><name>mergeNullsFirst</name></expr></argument>, <argument><expr><name>numCols</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyHashJoin
 */</comment>
<function><type><specifier>static</specifier> <name>HashJoin</name> <modifier>*</modifier></type>
<name>_copyHashJoin</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>HashJoin</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HashJoin</name>   <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>HashJoin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * copy node superclass fields
	 */</comment>
	<expr_stmt><expr><call><name>CopyJoinFields</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>Join</name> <operator>*</operator><operator>)</operator> <name>from</name></expr></argument>, <argument><expr><operator>(</operator><name>Join</name> <operator>*</operator><operator>)</operator> <name>newnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * copy remainder of node
	 */</comment>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>hashclauses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>hashoperators</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>hashcollations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>hashkeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * _copyMaterial
 */</comment>
<function><type><specifier>static</specifier> <name>Material</name> <modifier>*</modifier></type>
<name>_copyMaterial</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Material</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Material</name>   <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>Material</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * copy node superclass fields
	 */</comment>
	<expr_stmt><expr><call><name>CopyPlanFields</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>Plan</name> <operator>*</operator><operator>)</operator> <name>from</name></expr></argument>, <argument><expr><operator>(</operator><name>Plan</name> <operator>*</operator><operator>)</operator> <name>newnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * CopySortFields
 *
 *		This function copies the fields of the Sort node.  It is used by
 *		all the copy functions for classes which inherit from Sort.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>CopySortFields</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Sort</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>Sort</name> <modifier>*</modifier></type><name>newnode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CopyPlanFields</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>Plan</name> <operator>*</operator><operator>)</operator> <name>from</name></expr></argument>, <argument><expr><operator>(</operator><name>Plan</name> <operator>*</operator><operator>)</operator> <name>newnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>numCols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_POINTER_FIELD</name><argument_list>(<argument><expr><name>sortColIdx</name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>numCols</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AttrNumber</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_POINTER_FIELD</name><argument_list>(<argument><expr><name>sortOperators</name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>numCols</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_POINTER_FIELD</name><argument_list>(<argument><expr><name>collations</name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>numCols</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_POINTER_FIELD</name><argument_list>(<argument><expr><name>nullsFirst</name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>numCols</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * _copySort
 */</comment>
<function><type><specifier>static</specifier> <name>Sort</name> <modifier>*</modifier></type>
<name>_copySort</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Sort</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Sort</name>	   <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>Sort</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * copy node superclass fields
	 */</comment>
	<expr_stmt><expr><call><name>CopySortFields</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>newnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * _copyIncrementalSort
 */</comment>
<function><type><specifier>static</specifier> <name>IncrementalSort</name> <modifier>*</modifier></type>
<name>_copyIncrementalSort</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>IncrementalSort</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>IncrementalSort</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>IncrementalSort</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * copy node superclass fields
	 */</comment>
	<expr_stmt><expr><call><name>CopySortFields</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>Sort</name> <operator>*</operator><operator>)</operator> <name>from</name></expr></argument>, <argument><expr><operator>(</operator><name>Sort</name> <operator>*</operator><operator>)</operator> <name>newnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * copy remainder of node
	 */</comment>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>nPresortedCols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * _copyGroup
 */</comment>
<function><type><specifier>static</specifier> <name>Group</name> <modifier>*</modifier></type>
<name>_copyGroup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Group</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Group</name>	   <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>Group</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CopyPlanFields</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>Plan</name> <operator>*</operator><operator>)</operator> <name>from</name></expr></argument>, <argument><expr><operator>(</operator><name>Plan</name> <operator>*</operator><operator>)</operator> <name>newnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>numCols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_POINTER_FIELD</name><argument_list>(<argument><expr><name>grpColIdx</name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>numCols</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AttrNumber</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_POINTER_FIELD</name><argument_list>(<argument><expr><name>grpOperators</name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>numCols</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_POINTER_FIELD</name><argument_list>(<argument><expr><name>grpCollations</name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>numCols</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyAgg
 */</comment>
<function><type><specifier>static</specifier> <name>Agg</name> <modifier>*</modifier></type>
<name>_copyAgg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Agg</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Agg</name>		   <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>Agg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CopyPlanFields</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>Plan</name> <operator>*</operator><operator>)</operator> <name>from</name></expr></argument>, <argument><expr><operator>(</operator><name>Plan</name> <operator>*</operator><operator>)</operator> <name>newnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>aggstrategy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>aggsplit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>numCols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_POINTER_FIELD</name><argument_list>(<argument><expr><name>grpColIdx</name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>numCols</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AttrNumber</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_POINTER_FIELD</name><argument_list>(<argument><expr><name>grpOperators</name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>numCols</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_POINTER_FIELD</name><argument_list>(<argument><expr><name>grpCollations</name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>numCols</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>numGroups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>transitionSpace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_BITMAPSET_FIELD</name><argument_list>(<argument><expr><name>aggParams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>groupingSets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyWindowAgg
 */</comment>
<function><type><specifier>static</specifier> <name>WindowAgg</name> <modifier>*</modifier></type>
<name>_copyWindowAgg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WindowAgg</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>WindowAgg</name>  <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>WindowAgg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CopyPlanFields</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>Plan</name> <operator>*</operator><operator>)</operator> <name>from</name></expr></argument>, <argument><expr><operator>(</operator><name>Plan</name> <operator>*</operator><operator>)</operator> <name>newnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>winref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>partNumCols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_POINTER_FIELD</name><argument_list>(<argument><expr><name>partColIdx</name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>partNumCols</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AttrNumber</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_POINTER_FIELD</name><argument_list>(<argument><expr><name>partOperators</name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>partNumCols</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_POINTER_FIELD</name><argument_list>(<argument><expr><name>partCollations</name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>partNumCols</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>ordNumCols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_POINTER_FIELD</name><argument_list>(<argument><expr><name>ordColIdx</name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>ordNumCols</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AttrNumber</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_POINTER_FIELD</name><argument_list>(<argument><expr><name>ordOperators</name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>ordNumCols</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_POINTER_FIELD</name><argument_list>(<argument><expr><name>ordCollations</name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>ordNumCols</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>frameOptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>startOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>endOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>startInRangeFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>endInRangeFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>inRangeColl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>inRangeAsc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>inRangeNullsFirst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyUnique
 */</comment>
<function><type><specifier>static</specifier> <name>Unique</name> <modifier>*</modifier></type>
<name>_copyUnique</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Unique</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Unique</name>	   <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>Unique</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * copy node superclass fields
	 */</comment>
	<expr_stmt><expr><call><name>CopyPlanFields</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>Plan</name> <operator>*</operator><operator>)</operator> <name>from</name></expr></argument>, <argument><expr><operator>(</operator><name>Plan</name> <operator>*</operator><operator>)</operator> <name>newnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * copy remainder of node
	 */</comment>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>numCols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_POINTER_FIELD</name><argument_list>(<argument><expr><name>uniqColIdx</name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>numCols</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AttrNumber</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_POINTER_FIELD</name><argument_list>(<argument><expr><name>uniqOperators</name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>numCols</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_POINTER_FIELD</name><argument_list>(<argument><expr><name>uniqCollations</name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>numCols</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyHash
 */</comment>
<function><type><specifier>static</specifier> <name>Hash</name> <modifier>*</modifier></type>
<name>_copyHash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Hash</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Hash</name>	   <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>Hash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * copy node superclass fields
	 */</comment>
	<expr_stmt><expr><call><name>CopyPlanFields</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>Plan</name> <operator>*</operator><operator>)</operator> <name>from</name></expr></argument>, <argument><expr><operator>(</operator><name>Plan</name> <operator>*</operator><operator>)</operator> <name>newnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * copy remainder of node
	 */</comment>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>hashkeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>skewTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>skewColumn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>skewInherit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>rows_total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copySetOp
 */</comment>
<function><type><specifier>static</specifier> <name>SetOp</name> <modifier>*</modifier></type>
<name>_copySetOp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SetOp</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SetOp</name>	   <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>SetOp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * copy node superclass fields
	 */</comment>
	<expr_stmt><expr><call><name>CopyPlanFields</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>Plan</name> <operator>*</operator><operator>)</operator> <name>from</name></expr></argument>, <argument><expr><operator>(</operator><name>Plan</name> <operator>*</operator><operator>)</operator> <name>newnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * copy remainder of node
	 */</comment>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>strategy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>numCols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_POINTER_FIELD</name><argument_list>(<argument><expr><name>dupColIdx</name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>numCols</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AttrNumber</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_POINTER_FIELD</name><argument_list>(<argument><expr><name>dupOperators</name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>numCols</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_POINTER_FIELD</name><argument_list>(<argument><expr><name>dupCollations</name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>numCols</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>flagColIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>firstFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>numGroups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyLockRows
 */</comment>
<function><type><specifier>static</specifier> <name>LockRows</name> <modifier>*</modifier></type>
<name>_copyLockRows</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>LockRows</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>LockRows</name>   <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>LockRows</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * copy node superclass fields
	 */</comment>
	<expr_stmt><expr><call><name>CopyPlanFields</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>Plan</name> <operator>*</operator><operator>)</operator> <name>from</name></expr></argument>, <argument><expr><operator>(</operator><name>Plan</name> <operator>*</operator><operator>)</operator> <name>newnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * copy remainder of node
	 */</comment>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>rowMarks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>epqParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyLimit
 */</comment>
<function><type><specifier>static</specifier> <name>Limit</name> <modifier>*</modifier></type>
<name>_copyLimit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Limit</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Limit</name>	   <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>Limit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * copy node superclass fields
	 */</comment>
	<expr_stmt><expr><call><name>CopyPlanFields</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>Plan</name> <operator>*</operator><operator>)</operator> <name>from</name></expr></argument>, <argument><expr><operator>(</operator><name>Plan</name> <operator>*</operator><operator>)</operator> <name>newnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * copy remainder of node
	 */</comment>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>limitOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>limitCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>limitOption</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>uniqNumCols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_POINTER_FIELD</name><argument_list>(<argument><expr><name>uniqColIdx</name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>uniqNumCols</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AttrNumber</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_POINTER_FIELD</name><argument_list>(<argument><expr><name>uniqOperators</name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>uniqNumCols</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_POINTER_FIELD</name><argument_list>(<argument><expr><name>uniqCollations</name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>uniqNumCols</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ModifyGraph</name> <modifier>*</modifier></type>
<name>_copyModifyGraph</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ModifyGraph</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ModifyGraph</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>ModifyGraph</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CopyPlanFields</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>Plan</name> <operator>*</operator><operator>)</operator> <name>from</name></expr></argument>, <argument><expr><operator>(</operator><name>Plan</name> <operator>*</operator><operator>)</operator> <name>newnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>operation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>targets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>subplan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>nr_modify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>detach</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>eagerness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>exprs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>sets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>ert_base_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>ert_rtes_added</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyShortestpath
 */</comment>
<function><type><specifier>static</specifier> <name>Shortestpath</name> <modifier>*</modifier></type>
<name>_copyShortestpath</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Shortestpath</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Shortestpath</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>Shortestpath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * copy node superclass fields
	 */</comment>
	<expr_stmt><expr><call><name>CopyJoinFields</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>Join</name> <operator>*</operator><operator>)</operator> <name>from</name></expr></argument>, <argument><expr><operator>(</operator><name>Join</name> <operator>*</operator><operator>)</operator> <name>newnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * copy remainder of node
	 */</comment>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>hashclauses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>end_id_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>end_id_right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>tableoid_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>tableoid_right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>ctid_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>ctid_right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>minhops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>maxhops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyHash2Side
 */</comment>
<function><type><specifier>static</specifier> <name>Hash2Side</name> <modifier>*</modifier></type>
<name>_copyHash2Side</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Hash2Side</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Hash2Side</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>Hash2Side</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * copy node superclass fields
	 */</comment>
	<expr_stmt><expr><call><name>CopyPlanFields</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>Plan</name> <operator>*</operator><operator>)</operator> <name>from</name></expr></argument>, <argument><expr><operator>(</operator><name>Plan</name> <operator>*</operator><operator>)</operator> <name>newnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * copy remainder of node
	 */</comment>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>skewTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>skewColumn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>skewInherit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>skewColType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>skewColTypmod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Dijkstra</name> <modifier>*</modifier></type>
<name>_copyDijkstra</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Dijkstra</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Dijkstra</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>Dijkstra</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CopyPlanFields</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>Plan</name> <operator>*</operator><operator>)</operator> <name>from</name></expr></argument>, <argument><expr><operator>(</operator><name>Plan</name> <operator>*</operator><operator>)</operator> <name>newnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>weight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>weight_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>end_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>edge_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * _copyNestLoopParam
 */</comment>
<function><type><specifier>static</specifier> <name>NestLoopParam</name> <modifier>*</modifier></type>
<name>_copyNestLoopParam</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>NestLoopParam</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>NestLoopParam</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>NestLoopParam</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>paramno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>paramval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyPlanRowMark
 */</comment>
<function><type><specifier>static</specifier> <name>PlanRowMark</name> <modifier>*</modifier></type>
<name>_copyPlanRowMark</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PlanRowMark</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PlanRowMark</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>PlanRowMark</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>rti</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>prti</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>rowmarkId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>markType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>allMarkTypes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>strength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>waitPolicy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>isParent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PartitionPruneInfo</name> <modifier>*</modifier></type>
<name>_copyPartitionPruneInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PartitionPruneInfo</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PartitionPruneInfo</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>PartitionPruneInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>prune_infos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_BITMAPSET_FIELD</name><argument_list>(<argument><expr><name>other_subplans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PartitionedRelPruneInfo</name> <modifier>*</modifier></type>
<name>_copyPartitionedRelPruneInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PartitionedRelPruneInfo</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PartitionedRelPruneInfo</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>PartitionedRelPruneInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>rtindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_BITMAPSET_FIELD</name><argument_list>(<argument><expr><name>present_parts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>nparts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_POINTER_FIELD</name><argument_list>(<argument><expr><name>subplan_map</name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>nparts</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_POINTER_FIELD</name><argument_list>(<argument><expr><name>subpart_map</name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>nparts</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_POINTER_FIELD</name><argument_list>(<argument><expr><name>relid_map</name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>nparts</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>initial_pruning_steps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>exec_pruning_steps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_BITMAPSET_FIELD</name><argument_list>(<argument><expr><name>execparamids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyPartitionPruneStepOp
 */</comment>
<function><type><specifier>static</specifier> <name>PartitionPruneStepOp</name> <modifier>*</modifier></type>
<name>_copyPartitionPruneStepOp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PartitionPruneStepOp</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PartitionPruneStepOp</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>PartitionPruneStepOp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name><name>step</name><operator>.</operator><name>step_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>opstrategy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>exprs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>cmpfns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_BITMAPSET_FIELD</name><argument_list>(<argument><expr><name>nullkeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyPartitionPruneStepCombine
 */</comment>
<function><type><specifier>static</specifier> <name>PartitionPruneStepCombine</name> <modifier>*</modifier></type>
<name>_copyPartitionPruneStepCombine</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PartitionPruneStepCombine</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PartitionPruneStepCombine</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>PartitionPruneStepCombine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name><name>step</name><operator>.</operator><name>step_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>combineOp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>source_stepids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyPlanInvalItem
 */</comment>
<function><type><specifier>static</specifier> <name>PlanInvalItem</name> <modifier>*</modifier></type>
<name>_copyPlanInvalItem</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PlanInvalItem</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PlanInvalItem</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>PlanInvalItem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>cacheId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>hashValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ****************************************************************
 *					   primnodes.h copy functions
 * ****************************************************************
 */</comment>

<comment type="block">/*
 * _copyAlias
 */</comment>
<function><type><specifier>static</specifier> <name>Alias</name> <modifier>*</modifier></type>
<name>_copyAlias</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Alias</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Alias</name>	   <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>Alias</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>aliasname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>colnames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyRangeVar
 */</comment>
<function><type><specifier>static</specifier> <name>RangeVar</name> <modifier>*</modifier></type>
<name>_copyRangeVar</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RangeVar</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RangeVar</name>   <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>RangeVar</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>catalogname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>schemaname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>relname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>inh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>relpersistence</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyTableFunc
 */</comment>
<function><type><specifier>static</specifier> <name>TableFunc</name> <modifier>*</modifier></type>
<name>_copyTableFunc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TableFunc</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TableFunc</name>  <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>TableFunc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>ns_uris</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>ns_names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>docexpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>rowexpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>colnames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>coltypes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>coltypmods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>colcollations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>colexprs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>coldefexprs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_BITMAPSET_FIELD</name><argument_list>(<argument><expr><name>notnulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>ordinalitycol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyIntoClause
 */</comment>
<function><type><specifier>static</specifier> <name>IntoClause</name> <modifier>*</modifier></type>
<name>_copyIntoClause</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>IntoClause</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>IntoClause</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>IntoClause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>colNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>accessMethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>onCommit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>tableSpaceName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>viewQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>skipData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * We don't need a _copyExpr because Expr is an abstract supertype which
 * should never actually get instantiated.  Also, since it has no common
 * fields except NodeTag, there's no need for a helper routine to factor
 * out copying the common fields...
 */</comment>

<comment type="block">/*
 * _copyVar
 */</comment>
<function><type><specifier>static</specifier> <name>Var</name> <modifier>*</modifier></type>
<name>_copyVar</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Var</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Var</name>		   <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>Var</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>varno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>varattno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>vartype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>vartypmod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>varcollid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>varlevelsup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>varnosyn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>varattnosyn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyConst
 */</comment>
<function><type><specifier>static</specifier> <name>Const</name> <modifier>*</modifier></type>
<name>_copyConst</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Const</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Const</name>	   <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>Const</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>consttype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>consttypmod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>constcollid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>constlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>from</name><operator>-&gt;</operator><name>constbyval</name></name> <operator>||</operator> <name><name>from</name><operator>-&gt;</operator><name>constisnull</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * passed by value so just copy the datum. Also, don't try to copy
		 * struct when value is null!
		 */</comment>
		<expr_stmt><expr><name><name>newnode</name><operator>-&gt;</operator><name>constvalue</name></name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>constvalue</name></name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/*
		 * passed by reference.  We need a palloc'd copy.
		 */</comment>
		<expr_stmt><expr><name><name>newnode</name><operator>-&gt;</operator><name>constvalue</name></name> <operator>=</operator> <call><name>datumCopy</name><argument_list>(<argument><expr><name><name>from</name><operator>-&gt;</operator><name>constvalue</name></name></expr></argument>,
										<argument><expr><name><name>from</name><operator>-&gt;</operator><name>constbyval</name></name></expr></argument>,
										<argument><expr><name><name>from</name><operator>-&gt;</operator><name>constlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>constisnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>constbyval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyParam
 */</comment>
<function><type><specifier>static</specifier> <name>Param</name> <modifier>*</modifier></type>
<name>_copyParam</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Param</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Param</name>	   <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>Param</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>paramkind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>paramid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>paramtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>paramtypmod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>paramcollid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyAggref
 */</comment>
<function><type><specifier>static</specifier> <name>Aggref</name> <modifier>*</modifier></type>
<name>_copyAggref</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Aggref</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Aggref</name>	   <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>Aggref</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>aggfnoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>aggtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>aggcollid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>inputcollid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>aggtranstype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>aggargtypes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>aggdirectargs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>aggorder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>aggdistinct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>aggfilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>aggstar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>aggvariadic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>aggkind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>agglevelsup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>aggsplit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyGroupingFunc
 */</comment>
<function><type><specifier>static</specifier> <name>GroupingFunc</name> <modifier>*</modifier></type>
<name>_copyGroupingFunc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GroupingFunc</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GroupingFunc</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>GroupingFunc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>refs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>agglevelsup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyWindowFunc
 */</comment>
<function><type><specifier>static</specifier> <name>WindowFunc</name> <modifier>*</modifier></type>
<name>_copyWindowFunc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WindowFunc</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>WindowFunc</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>WindowFunc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>winfnoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>wintype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>wincollid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>inputcollid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>aggfilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>winref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>winstar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>winagg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copySubscriptingRef
 */</comment>
<function><type><specifier>static</specifier> <name>SubscriptingRef</name> <modifier>*</modifier></type>
<name>_copySubscriptingRef</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SubscriptingRef</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SubscriptingRef</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>SubscriptingRef</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>refcontainertype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>refelemtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>reftypmod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>refcollid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>refupperindexpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>reflowerindexpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>refexpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>refassgnexpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyFuncExpr
 */</comment>
<function><type><specifier>static</specifier> <name>FuncExpr</name> <modifier>*</modifier></type>
<name>_copyFuncExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FuncExpr</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FuncExpr</name>   <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>FuncExpr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>funcid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>funcresulttype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>funcretset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>funcvariadic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>funcformat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>funccollid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>inputcollid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyNamedArgExpr *
 */</comment>
<function><type><specifier>static</specifier> <name>NamedArgExpr</name> <modifier>*</modifier></type>
<name>_copyNamedArgExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>NamedArgExpr</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>NamedArgExpr</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>NamedArgExpr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>argnumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyOpExpr
 */</comment>
<function><type><specifier>static</specifier> <name>OpExpr</name> <modifier>*</modifier></type>
<name>_copyOpExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>OpExpr</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OpExpr</name>	   <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>OpExpr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>opno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>opfuncid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>opresulttype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>opretset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>opcollid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>inputcollid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyDistinctExpr (same as OpExpr)
 */</comment>
<function><type><specifier>static</specifier> <name>DistinctExpr</name> <modifier>*</modifier></type>
<name>_copyDistinctExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DistinctExpr</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DistinctExpr</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>DistinctExpr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>opno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>opfuncid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>opresulttype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>opretset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>opcollid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>inputcollid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyNullIfExpr (same as OpExpr)
 */</comment>
<function><type><specifier>static</specifier> <name>NullIfExpr</name> <modifier>*</modifier></type>
<name>_copyNullIfExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>NullIfExpr</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>NullIfExpr</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>NullIfExpr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>opno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>opfuncid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>opresulttype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>opretset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>opcollid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>inputcollid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyScalarArrayOpExpr
 */</comment>
<function><type><specifier>static</specifier> <name>ScalarArrayOpExpr</name> <modifier>*</modifier></type>
<name>_copyScalarArrayOpExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ScalarArrayOpExpr</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ScalarArrayOpExpr</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>ScalarArrayOpExpr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>opno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>opfuncid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>useOr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>inputcollid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyBoolExpr
 */</comment>
<function><type><specifier>static</specifier> <name>BoolExpr</name> <modifier>*</modifier></type>
<name>_copyBoolExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BoolExpr</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BoolExpr</name>   <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>BoolExpr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>boolop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copySubLink
 */</comment>
<function><type><specifier>static</specifier> <name>SubLink</name> <modifier>*</modifier></type>
<name>_copySubLink</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SubLink</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SubLink</name>    <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>SubLink</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>subLinkType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>subLinkId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>testexpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>operName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>subselect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copySubPlan
 */</comment>
<function><type><specifier>static</specifier> <name>SubPlan</name> <modifier>*</modifier></type>
<name>_copySubPlan</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SubPlan</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SubPlan</name>    <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>SubPlan</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>subLinkType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>testexpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>paramIds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>plan_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>plan_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>firstColType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>firstColTypmod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>firstColCollation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>useHashTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>unknownEqFalse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>parallel_safe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>setParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>parParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>startup_cost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>per_call_cost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyAlternativeSubPlan
 */</comment>
<function><type><specifier>static</specifier> <name>AlternativeSubPlan</name> <modifier>*</modifier></type>
<name>_copyAlternativeSubPlan</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AlternativeSubPlan</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AlternativeSubPlan</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>AlternativeSubPlan</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>subplans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyFieldSelect
 */</comment>
<function><type><specifier>static</specifier> <name>FieldSelect</name> <modifier>*</modifier></type>
<name>_copyFieldSelect</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FieldSelect</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FieldSelect</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>FieldSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>fieldnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>resulttype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>resulttypmod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>resultcollid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyFieldStore
 */</comment>
<function><type><specifier>static</specifier> <name>FieldStore</name> <modifier>*</modifier></type>
<name>_copyFieldStore</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FieldStore</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FieldStore</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>FieldStore</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>newvals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>fieldnums</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>resulttype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyRelabelType
 */</comment>
<function><type><specifier>static</specifier> <name>RelabelType</name> <modifier>*</modifier></type>
<name>_copyRelabelType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RelabelType</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RelabelType</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>RelabelType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>resulttype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>resulttypmod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>resultcollid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>relabelformat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyCoerceViaIO
 */</comment>
<function><type><specifier>static</specifier> <name>CoerceViaIO</name> <modifier>*</modifier></type>
<name>_copyCoerceViaIO</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CoerceViaIO</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CoerceViaIO</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CoerceViaIO</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>resulttype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>resultcollid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>coerceformat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyArrayCoerceExpr
 */</comment>
<function><type><specifier>static</specifier> <name>ArrayCoerceExpr</name> <modifier>*</modifier></type>
<name>_copyArrayCoerceExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ArrayCoerceExpr</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ArrayCoerceExpr</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>ArrayCoerceExpr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>elemexpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>resulttype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>resulttypmod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>resultcollid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>coerceformat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyConvertRowtypeExpr
 */</comment>
<function><type><specifier>static</specifier> <name>ConvertRowtypeExpr</name> <modifier>*</modifier></type>
<name>_copyConvertRowtypeExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ConvertRowtypeExpr</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ConvertRowtypeExpr</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>ConvertRowtypeExpr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>resulttype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>convertformat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyCollateExpr
 */</comment>
<function><type><specifier>static</specifier> <name>CollateExpr</name> <modifier>*</modifier></type>
<name>_copyCollateExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CollateExpr</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CollateExpr</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CollateExpr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>collOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyCaseExpr
 */</comment>
<function><type><specifier>static</specifier> <name>CaseExpr</name> <modifier>*</modifier></type>
<name>_copyCaseExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CaseExpr</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CaseExpr</name>   <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CaseExpr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>casetype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>casecollid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>defresult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyCaseWhen
 */</comment>
<function><type><specifier>static</specifier> <name>CaseWhen</name> <modifier>*</modifier></type>
<name>_copyCaseWhen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CaseWhen</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CaseWhen</name>   <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CaseWhen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyCaseTestExpr
 */</comment>
<function><type><specifier>static</specifier> <name>CaseTestExpr</name> <modifier>*</modifier></type>
<name>_copyCaseTestExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CaseTestExpr</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CaseTestExpr</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CaseTestExpr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>typeId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>typeMod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>collation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyArrayExpr
 */</comment>
<function><type><specifier>static</specifier> <name>ArrayExpr</name> <modifier>*</modifier></type>
<name>_copyArrayExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ArrayExpr</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ArrayExpr</name>  <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>ArrayExpr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>array_typeid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>array_collid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>element_typeid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>elements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>multidims</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyRowExpr
 */</comment>
<function><type><specifier>static</specifier> <name>RowExpr</name> <modifier>*</modifier></type>
<name>_copyRowExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RowExpr</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RowExpr</name>    <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>RowExpr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>row_typeid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>row_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>colnames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyRowCompareExpr
 */</comment>
<function><type><specifier>static</specifier> <name>RowCompareExpr</name> <modifier>*</modifier></type>
<name>_copyRowCompareExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RowCompareExpr</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RowCompareExpr</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>RowCompareExpr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>rctype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>opnos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>opfamilies</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>inputcollids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>largs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>rargs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyCoalesceExpr
 */</comment>
<function><type><specifier>static</specifier> <name>CoalesceExpr</name> <modifier>*</modifier></type>
<name>_copyCoalesceExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CoalesceExpr</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CoalesceExpr</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CoalesceExpr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>coalescetype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>coalescecollid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyMinMaxExpr
 */</comment>
<function><type><specifier>static</specifier> <name>MinMaxExpr</name> <modifier>*</modifier></type>
<name>_copyMinMaxExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>MinMaxExpr</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MinMaxExpr</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>MinMaxExpr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>minmaxtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>minmaxcollid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>inputcollid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copySQLValueFunction
 */</comment>
<function><type><specifier>static</specifier> <name>SQLValueFunction</name> <modifier>*</modifier></type>
<name>_copySQLValueFunction</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SQLValueFunction</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SQLValueFunction</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>SQLValueFunction</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>typmod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyXmlExpr
 */</comment>
<function><type><specifier>static</specifier> <name>XmlExpr</name> <modifier>*</modifier></type>
<name>_copyXmlExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>XmlExpr</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>XmlExpr</name>    <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>XmlExpr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>named_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>arg_names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>xmloption</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>typmod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyNullTest
 */</comment>
<function><type><specifier>static</specifier> <name>NullTest</name> <modifier>*</modifier></type>
<name>_copyNullTest</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>NullTest</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>NullTest</name>   <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>NullTest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>nulltesttype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>argisrow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyBooleanTest
 */</comment>
<function><type><specifier>static</specifier> <name>BooleanTest</name> <modifier>*</modifier></type>
<name>_copyBooleanTest</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BooleanTest</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BooleanTest</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>BooleanTest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>booltesttype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyCoerceToDomain
 */</comment>
<function><type><specifier>static</specifier> <name>CoerceToDomain</name> <modifier>*</modifier></type>
<name>_copyCoerceToDomain</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CoerceToDomain</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CoerceToDomain</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CoerceToDomain</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>resulttype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>resulttypmod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>resultcollid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>coercionformat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyCoerceToDomainValue
 */</comment>
<function><type><specifier>static</specifier> <name>CoerceToDomainValue</name> <modifier>*</modifier></type>
<name>_copyCoerceToDomainValue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CoerceToDomainValue</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CoerceToDomainValue</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CoerceToDomainValue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>typeId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>typeMod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>collation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copySetToDefault
 */</comment>
<function><type><specifier>static</specifier> <name>SetToDefault</name> <modifier>*</modifier></type>
<name>_copySetToDefault</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SetToDefault</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SetToDefault</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>SetToDefault</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>typeId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>typeMod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>collation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyCurrentOfExpr
 */</comment>
<function><type><specifier>static</specifier> <name>CurrentOfExpr</name> <modifier>*</modifier></type>
<name>_copyCurrentOfExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CurrentOfExpr</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CurrentOfExpr</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CurrentOfExpr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>cvarno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>cursor_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>cursor_param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

 <comment type="block">/*
  * _copyNextValueExpr
  */</comment>
<function><type><specifier>static</specifier> <name>NextValueExpr</name> <modifier>*</modifier></type>
<name>_copyNextValueExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>NextValueExpr</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>NextValueExpr</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>NextValueExpr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>seqid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>typeId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyInferenceElem
 */</comment>
<function><type><specifier>static</specifier> <name>InferenceElem</name> <modifier>*</modifier></type>
<name>_copyInferenceElem</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>InferenceElem</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>InferenceElem</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>InferenceElem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>infercollid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>inferopclass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyTargetEntry
 */</comment>
<function><type><specifier>static</specifier> <name>TargetEntry</name> <modifier>*</modifier></type>
<name>_copyTargetEntry</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TargetEntry</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TargetEntry</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>TargetEntry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>resno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>resname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>ressortgroupref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>resorigtbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>resorigcol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>resjunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyRangeTblRef
 */</comment>
<function><type><specifier>static</specifier> <name>RangeTblRef</name> <modifier>*</modifier></type>
<name>_copyRangeTblRef</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RangeTblRef</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RangeTblRef</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>RangeTblRef</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>rtindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyJoinExpr
 */</comment>
<function><type><specifier>static</specifier> <name>JoinExpr</name> <modifier>*</modifier></type>
<name>_copyJoinExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>JoinExpr</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>JoinExpr</name>   <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>JoinExpr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>jointype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>isNatural</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>larg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>rarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>usingClause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>quals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>rtindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>minHops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>maxHops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyFromExpr
 */</comment>
<function><type><specifier>static</specifier> <name>FromExpr</name> <modifier>*</modifier></type>
<name>_copyFromExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FromExpr</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FromExpr</name>   <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>FromExpr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>fromlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>quals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyOnConflictExpr
 */</comment>
<function><type><specifier>static</specifier> <name>OnConflictExpr</name> <modifier>*</modifier></type>
<name>_copyOnConflictExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>OnConflictExpr</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OnConflictExpr</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>OnConflictExpr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>arbiterElems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>arbiterWhere</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>constraint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>onConflictSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>onConflictWhere</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>exclRelIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>exclRelTlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CypherTypeCast</name> <modifier>*</modifier></type>
<name>_copyCypherTypeCast</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CypherTypeCast</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CypherTypeCast</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CypherTypeCast</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>cform</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>cctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>typcategory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CypherMapExpr</name> <modifier>*</modifier></type>
<name>_copyCypherMapExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CypherMapExpr</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CypherMapExpr</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CypherMapExpr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>keyvals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CypherListExpr</name> <modifier>*</modifier></type>
<name>_copyCypherListExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CypherListExpr</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CypherListExpr</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CypherListExpr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>elems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CypherListCompExpr</name> <modifier>*</modifier></type>
<name>_copyCypherListCompExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CypherListCompExpr</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CypherListCompExpr</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CypherListCompExpr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>varname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CypherListCompVar</name> <modifier>*</modifier></type>
<name>_copyCypherListCompVar</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CypherListCompVar</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CypherListCompVar</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CypherListCompVar</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>varname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CypherAccessExpr</name> <modifier>*</modifier></type>
<name>_copyCypherAccessExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CypherAccessExpr</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CypherAccessExpr</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CypherAccessExpr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CypherIndices</name> <modifier>*</modifier></type>
<name>_copyCypherIndices</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CypherIndices</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CypherIndices</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CypherIndices</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>is_slice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>lidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>uidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ****************************************************************
 *						pathnodes.h copy functions
 *
 * We don't support copying RelOptInfo, IndexOptInfo, or Path nodes.
 * There are some subsidiary structs that are useful to copy, though.
 * ****************************************************************
 */</comment>

<comment type="block">/*
 * _copyPathKey
 */</comment>
<function><type><specifier>static</specifier> <name>PathKey</name> <modifier>*</modifier></type>
<name>_copyPathKey</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PathKey</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PathKey</name>    <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>PathKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* EquivalenceClasses are never moved, so just shallow-copy the pointer */</comment>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>pk_eclass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>pk_opfamily</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>pk_strategy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>pk_nulls_first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyRestrictInfo
 */</comment>
<function><type><specifier>static</specifier> <name>RestrictInfo</name> <modifier>*</modifier></type>
<name>_copyRestrictInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RestrictInfo</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RestrictInfo</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>RestrictInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>clause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>is_pushed_down</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>outerjoin_delayed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>can_join</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>pseudoconstant</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>leakproof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>security_level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_BITMAPSET_FIELD</name><argument_list>(<argument><expr><name>clause_relids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_BITMAPSET_FIELD</name><argument_list>(<argument><expr><name>required_relids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_BITMAPSET_FIELD</name><argument_list>(<argument><expr><name>outer_relids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_BITMAPSET_FIELD</name><argument_list>(<argument><expr><name>nullable_relids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_BITMAPSET_FIELD</name><argument_list>(<argument><expr><name>left_relids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_BITMAPSET_FIELD</name><argument_list>(<argument><expr><name>right_relids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>orclause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* EquivalenceClasses are never copied, so shallow-copy the pointers */</comment>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>parent_ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>eval_cost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>norm_selec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>outer_selec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>mergeopfamilies</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* EquivalenceClasses are never copied, so shallow-copy the pointers */</comment>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>left_ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>right_ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>left_em</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>right_em</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* MergeScanSelCache isn't a Node, so hard to copy; just reset cache */</comment>
	<expr_stmt><expr><name><name>newnode</name><operator>-&gt;</operator><name>scansel_cache</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>outer_is_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>hashjoinoperator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>left_bucketsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>right_bucketsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>left_mcvfreq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>right_mcvfreq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyPlaceHolderVar
 */</comment>
<function><type><specifier>static</specifier> <name>PlaceHolderVar</name> <modifier>*</modifier></type>
<name>_copyPlaceHolderVar</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PlaceHolderVar</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PlaceHolderVar</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>PlaceHolderVar</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>phexpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_BITMAPSET_FIELD</name><argument_list>(<argument><expr><name>phrels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>phid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>phlevelsup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copySpecialJoinInfo
 */</comment>
<function><type><specifier>static</specifier> <name>SpecialJoinInfo</name> <modifier>*</modifier></type>
<name>_copySpecialJoinInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SpecialJoinInfo</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SpecialJoinInfo</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>SpecialJoinInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_BITMAPSET_FIELD</name><argument_list>(<argument><expr><name>min_lefthand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_BITMAPSET_FIELD</name><argument_list>(<argument><expr><name>min_righthand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_BITMAPSET_FIELD</name><argument_list>(<argument><expr><name>syn_lefthand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_BITMAPSET_FIELD</name><argument_list>(<argument><expr><name>syn_righthand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>jointype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>lhs_strict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>delay_upper_joins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>semi_can_btree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>semi_can_hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>semi_operators</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>semi_rhs_exprs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>min_hops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>max_hops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyAppendRelInfo
 */</comment>
<function><type><specifier>static</specifier> <name>AppendRelInfo</name> <modifier>*</modifier></type>
<name>_copyAppendRelInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AppendRelInfo</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AppendRelInfo</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>AppendRelInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>parent_relid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>child_relid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>parent_reltype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>child_reltype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>translated_vars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>num_child_cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_POINTER_FIELD</name><argument_list>(<argument><expr><name>parent_colnos</name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>num_child_cols</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AttrNumber</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>parent_reloid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * _copyPlaceHolderInfo
 */</comment>
<function><type><specifier>static</specifier> <name>PlaceHolderInfo</name> <modifier>*</modifier></type>
<name>_copyPlaceHolderInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PlaceHolderInfo</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PlaceHolderInfo</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>PlaceHolderInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>phid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>ph_var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_BITMAPSET_FIELD</name><argument_list>(<argument><expr><name>ph_eval_at</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_BITMAPSET_FIELD</name><argument_list>(<argument><expr><name>ph_lateral</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_BITMAPSET_FIELD</name><argument_list>(<argument><expr><name>ph_needed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>ph_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ****************************************************************
 *					parsenodes.h copy functions
 * ****************************************************************
 */</comment>

<function><type><specifier>static</specifier> <name>RangeTblEntry</name> <modifier>*</modifier></type>
<name>_copyRangeTblEntry</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RangeTblEntry</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RangeTblEntry</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>RangeTblEntry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>rtekind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>relid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>relkind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>rellockmode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>tablesample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>subquery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>security_barrier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>isVLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>jointype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>joinmergedcols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>joinaliasvars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>joinleftcols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>joinrightcols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>functions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>funcordinality</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>tablefunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>values_lists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>ctename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>ctelevelsup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>self_reference</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>coltypes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>coltypmods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>colcollations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>enrname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>enrtuples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>eref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>lateral</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>inh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>inFromCl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>requiredPerms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>checkAsUser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_BITMAPSET_FIELD</name><argument_list>(<argument><expr><name>selectedCols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_BITMAPSET_FIELD</name><argument_list>(<argument><expr><name>insertedCols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_BITMAPSET_FIELD</name><argument_list>(<argument><expr><name>updatedCols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_BITMAPSET_FIELD</name><argument_list>(<argument><expr><name>extraUpdatedCols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>securityQuals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RangeTblFunction</name> <modifier>*</modifier></type>
<name>_copyRangeTblFunction</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RangeTblFunction</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RangeTblFunction</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>RangeTblFunction</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>funcexpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>funccolcount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>funccolnames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>funccoltypes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>funccoltypmods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>funccolcollations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_BITMAPSET_FIELD</name><argument_list>(<argument><expr><name>funcparams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>TableSampleClause</name> <modifier>*</modifier></type>
<name>_copyTableSampleClause</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TableSampleClause</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TableSampleClause</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>TableSampleClause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>tsmhandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>repeatable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>WithCheckOption</name> <modifier>*</modifier></type>
<name>_copyWithCheckOption</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WithCheckOption</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>WithCheckOption</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>WithCheckOption</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>relname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>polname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>qual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>cascaded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SortGroupClause</name> <modifier>*</modifier></type>
<name>_copySortGroupClause</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SortGroupClause</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SortGroupClause</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>SortGroupClause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>tleSortGroupRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>eqop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>sortop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>nulls_first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>hashable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>GroupingSet</name> <modifier>*</modifier></type>
<name>_copyGroupingSet</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GroupingSet</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GroupingSet</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>GroupingSet</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>WindowClause</name> <modifier>*</modifier></type>
<name>_copyWindowClause</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WindowClause</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>WindowClause</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>WindowClause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>refname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>partitionClause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>orderClause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>frameOptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>startOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>endOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>startInRangeFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>endInRangeFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>inRangeColl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>inRangeAsc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>inRangeNullsFirst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>winref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>copiedOrder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RowMarkClause</name> <modifier>*</modifier></type>
<name>_copyRowMarkClause</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RowMarkClause</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RowMarkClause</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>RowMarkClause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>rti</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>strength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>waitPolicy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>pushedDown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>WithClause</name> <modifier>*</modifier></type>
<name>_copyWithClause</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WithClause</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>WithClause</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>WithClause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>ctes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>recursive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>InferClause</name> <modifier>*</modifier></type>
<name>_copyInferClause</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>InferClause</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>InferClause</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>InferClause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>indexElems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>whereClause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>conname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>OnConflictClause</name> <modifier>*</modifier></type>
<name>_copyOnConflictClause</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>OnConflictClause</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OnConflictClause</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>OnConflictClause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>infer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>targetList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>whereClause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CommonTableExpr</name> <modifier>*</modifier></type>
<name>_copyCommonTableExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CommonTableExpr</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CommonTableExpr</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CommonTableExpr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>ctename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>aliascolnames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>ctematerialized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>ctequery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>cterecursive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>cterefcount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>ctecolnames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>ctecoltypes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>ctecoltypmods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>ctecolcollations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>A_Expr</name> <modifier>*</modifier></type>
<name>_copyAExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>A_Expr</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>A_Expr</name>	   <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>A_Expr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>lexpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>rexpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ColumnRef</name> <modifier>*</modifier></type>
<name>_copyColumnRef</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ColumnRef</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ColumnRef</name>  <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>ColumnRef</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ParamRef</name> <modifier>*</modifier></type>
<name>_copyParamRef</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ParamRef</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ParamRef</name>   <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>ParamRef</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>A_Const</name> <modifier>*</modifier></type>
<name>_copyAConst</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>A_Const</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>A_Const</name>    <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>A_Const</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* This part must duplicate _copyValue */</comment>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name><name>val</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<switch>switch <condition>(<expr><name><name>from</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>type</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>T_Integer</name></expr>:</case>
			<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name><name>val</name><operator>.</operator><name>val</name><operator>.</operator><name>ival</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_Float</name></expr>:</case>
		<case>case <expr><name>T_String</name></expr>:</case>
		<case>case <expr><name>T_BitString</name></expr>:</case>
			<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name><name>val</name><operator>.</operator><name>val</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_Null</name></expr>:</case>
			<comment type="block">/* nothing to do */</comment>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized node type: %d"</literal></expr></argument>,
				 <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>from</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FuncCall</name> <modifier>*</modifier></type>
<name>_copyFuncCall</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FuncCall</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FuncCall</name>   <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>FuncCall</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>funcname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>agg_order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>agg_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>agg_within_group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>agg_star</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>agg_distinct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>func_variadic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>over</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>A_Star</name> <modifier>*</modifier></type>
<name>_copyAStar</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>A_Star</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>A_Star</name>	   <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>A_Star</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>A_Indices</name> <modifier>*</modifier></type>
<name>_copyAIndices</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>A_Indices</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>A_Indices</name>  <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>A_Indices</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>is_slice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>lidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>uidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>A_Indirection</name> <modifier>*</modifier></type>
<name>_copyA_Indirection</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>A_Indirection</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>A_Indirection</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>A_Indirection</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>indirection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>A_ArrayExpr</name> <modifier>*</modifier></type>
<name>_copyA_ArrayExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>A_ArrayExpr</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>A_ArrayExpr</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>A_ArrayExpr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>elements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ResTarget</name> <modifier>*</modifier></type>
<name>_copyResTarget</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ResTarget</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ResTarget</name>  <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>ResTarget</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>indirection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>MultiAssignRef</name> <modifier>*</modifier></type>
<name>_copyMultiAssignRef</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>MultiAssignRef</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MultiAssignRef</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>MultiAssignRef</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>colno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>ncolumns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>TypeName</name> <modifier>*</modifier></type>
<name>_copyTypeName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TypeName</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TypeName</name>   <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>TypeName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>typeOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>setof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>pct_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>typmods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>typemod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>arrayBounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SortBy</name> <modifier>*</modifier></type>
<name>_copySortBy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SortBy</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SortBy</name>	   <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>SortBy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>sortby_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>sortby_nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>useOp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>WindowDef</name> <modifier>*</modifier></type>
<name>_copyWindowDef</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>WindowDef</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>WindowDef</name>  <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>WindowDef</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>refname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>partitionClause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>orderClause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>frameOptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>startOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>endOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RangeSubselect</name> <modifier>*</modifier></type>
<name>_copyRangeSubselect</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RangeSubselect</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RangeSubselect</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>RangeSubselect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>lateral</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>subquery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RangeFunction</name> <modifier>*</modifier></type>
<name>_copyRangeFunction</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RangeFunction</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RangeFunction</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>RangeFunction</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>lateral</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>ordinality</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>is_rowsfrom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>functions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>coldeflist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RangeTableSample</name> <modifier>*</modifier></type>
<name>_copyRangeTableSample</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RangeTableSample</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RangeTableSample</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>RangeTableSample</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>repeatable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RangeTableFunc</name> <modifier>*</modifier></type>
<name>_copyRangeTableFunc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RangeTableFunc</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RangeTableFunc</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>RangeTableFunc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>lateral</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>docexpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>rowexpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>namespaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>columns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>alias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RangeTableFuncCol</name> <modifier>*</modifier></type>
<name>_copyRangeTableFuncCol</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RangeTableFuncCol</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RangeTableFuncCol</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>RangeTableFuncCol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>colname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>typeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>for_ordinality</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>is_not_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>colexpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>coldefexpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>TypeCast</name> <modifier>*</modifier></type>
<name>_copyTypeCast</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TypeCast</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TypeCast</name>   <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>TypeCast</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>typeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CollateClause</name> <modifier>*</modifier></type>
<name>_copyCollateClause</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CollateClause</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CollateClause</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CollateClause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>collname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>IndexElem</name> <modifier>*</modifier></type>
<name>_copyIndexElem</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>IndexElem</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>IndexElem</name>  <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>IndexElem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>indexcolname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>collation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>opclass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>opclassopts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>ordering</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>nulls_ordering</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ColumnDef</name> <modifier>*</modifier></type>
<name>_copyColumnDef</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ColumnDef</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ColumnDef</name>  <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>ColumnDef</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>colname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>typeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>inhcount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>is_local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>is_not_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>is_from_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>storage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>raw_default</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>cooked_default</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>identity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>identitySequence</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>generated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>collClause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>collOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>constraints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>fdwoptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Constraint</name> <modifier>*</modifier></type>
<name>_copyConstraint</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Constraint</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Constraint</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>Constraint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>contype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>conname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>deferrable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>initdeferred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>is_no_inherit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>raw_expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>cooked_expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>generated_when</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>including</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>exclusions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>indexname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>indexspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>reset_default_tblspc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>access_method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>where_clause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>pktable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>fk_attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>pk_attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>fk_matchtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>fk_upd_action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>fk_del_action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>old_conpfeqop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>old_pktable_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>skip_validation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>initially_valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DefElem</name> <modifier>*</modifier></type>
<name>_copyDefElem</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DefElem</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DefElem</name>    <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>DefElem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>defnamespace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>defname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>defaction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>LockingClause</name> <modifier>*</modifier></type>
<name>_copyLockingClause</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>LockingClause</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>LockingClause</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>LockingClause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>lockedRels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>strength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>waitPolicy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>XmlSerialize</name> <modifier>*</modifier></type>
<name>_copyXmlSerialize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>XmlSerialize</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>XmlSerialize</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>XmlSerialize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>xmloption</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>typeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RoleSpec</name> <modifier>*</modifier></type>
<name>_copyRoleSpec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RoleSpec</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RoleSpec</name>   <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>RoleSpec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>roletype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>rolename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>TriggerTransition</name> <modifier>*</modifier></type>
<name>_copyTriggerTransition</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TriggerTransition</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TriggerTransition</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>TriggerTransition</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>isNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>isTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Query</name> <modifier>*</modifier></type>
<name>_copyQuery</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Query</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Query</name>	   <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>Query</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>commandType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>querySource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>queryId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>canSetTag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>utilityStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>resultRelation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>hasAggs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>hasWindowFuncs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>hasTargetSRFs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>hasSubLinks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>hasDistinctOn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>hasRecursive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>hasModifyingCTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>hasForUpdate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>hasRowSecurity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>hasGraphwriteClause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>cteList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>rtable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>jointree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>targetList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>override</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>onConflict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>returningList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>groupClause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>groupingSets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>havingQual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>windowClause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>distinctClause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>sortClause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>limitOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>limitCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>limitOption</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>rowMarks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>setOperations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>constraintDeps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>withCheckOptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>stmt_location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>stmt_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>dijkstraWeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>dijkstraWeightOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>dijkstraEndId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>dijkstraEdgeId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>dijkstraLimit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>shortestpathEndIdLeft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>shortestpathEndIdRight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>shortestpathTableOidLeft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>shortestpathTableOidRight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>shortestpathCtidLeft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>shortestpathCtidRight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>shortestpathSource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>shortestpathTarget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>shortestpathMinhops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>shortestpathMaxhops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>shortestpathLimit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name><name>graph</name><operator>.</operator><name>writeOp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name><name>graph</name><operator>.</operator><name>last</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name><name>graph</name><operator>.</operator><name>targets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name><name>graph</name><operator>.</operator><name>nr_modify</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name><name>graph</name><operator>.</operator><name>detach</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name><name>graph</name><operator>.</operator><name>eager</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name><name>graph</name><operator>.</operator><name>pattern</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name><name>graph</name><operator>.</operator><name>exprs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name><name>graph</name><operator>.</operator><name>sets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RawStmt</name> <modifier>*</modifier></type>
<name>_copyRawStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RawStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RawStmt</name>    <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>RawStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>stmt_location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>stmt_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>InsertStmt</name> <modifier>*</modifier></type>
<name>_copyInsertStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>InsertStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>InsertStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>InsertStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>selectStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>onConflictClause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>returningList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>withClause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>override</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DeleteStmt</name> <modifier>*</modifier></type>
<name>_copyDeleteStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DeleteStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DeleteStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>DeleteStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>usingClause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>whereClause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>returningList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>withClause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UpdateStmt</name> <modifier>*</modifier></type>
<name>_copyUpdateStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UpdateStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>UpdateStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>UpdateStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>targetList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>whereClause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>fromClause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>returningList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>withClause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SelectStmt</name> <modifier>*</modifier></type>
<name>_copySelectStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SelectStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SelectStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>SelectStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>distinctClause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>intoClause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>targetList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>fromClause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>whereClause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>groupClause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>havingClause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>windowClause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>valuesLists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>sortClause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>limitOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>limitCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>limitOption</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>lockingClause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>withClause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>all</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>larg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>rarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SetOperationStmt</name> <modifier>*</modifier></type>
<name>_copySetOperationStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SetOperationStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SetOperationStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>SetOperationStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>all</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>larg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>rarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>colTypes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>colTypmods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>colCollations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>groupClauses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AlterTableStmt</name> <modifier>*</modifier></type>
<name>_copyAlterTableStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AlterTableStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AlterTableStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>AlterTableStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>cmds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>relkind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AlterTableCmd</name> <modifier>*</modifier></type>
<name>_copyAlterTableCmd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AlterTableCmd</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AlterTableCmd</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>AlterTableCmd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>subtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>newowner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>behavior</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>recurse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AlterCollationStmt</name> <modifier>*</modifier></type>
<name>_copyAlterCollationStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AlterCollationStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AlterCollationStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>AlterCollationStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>collname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AlterDomainStmt</name> <modifier>*</modifier></type>
<name>_copyAlterDomainStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AlterDomainStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AlterDomainStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>AlterDomainStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>subtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>typeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>behavior</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>GrantStmt</name> <modifier>*</modifier></type>
<name>_copyGrantStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GrantStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GrantStmt</name>  <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>GrantStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>is_grant</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>targtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>objtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>objects</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>privileges</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>grantees</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>grant_option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>behavior</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ObjectWithArgs</name> <modifier>*</modifier></type>
<name>_copyObjectWithArgs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ObjectWithArgs</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ObjectWithArgs</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>ObjectWithArgs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>objname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>objargs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>args_unspecified</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AccessPriv</name> <modifier>*</modifier></type>
<name>_copyAccessPriv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AccessPriv</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AccessPriv</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>AccessPriv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>priv_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>GrantRoleStmt</name> <modifier>*</modifier></type>
<name>_copyGrantRoleStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GrantRoleStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GrantRoleStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>GrantRoleStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>granted_roles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>grantee_roles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>is_grant</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>admin_opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>grantor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>behavior</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AlterDefaultPrivilegesStmt</name> <modifier>*</modifier></type>
<name>_copyAlterDefaultPrivilegesStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AlterDefaultPrivilegesStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AlterDefaultPrivilegesStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>AlterDefaultPrivilegesStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DeclareCursorStmt</name> <modifier>*</modifier></type>
<name>_copyDeclareCursorStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DeclareCursorStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DeclareCursorStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>DeclareCursorStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>portalname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ClosePortalStmt</name> <modifier>*</modifier></type>
<name>_copyClosePortalStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ClosePortalStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ClosePortalStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>ClosePortalStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>portalname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CallStmt</name> <modifier>*</modifier></type>
<name>_copyCallStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CallStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CallStmt</name>   <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CallStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>funccall</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>funcexpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ClusterStmt</name> <modifier>*</modifier></type>
<name>_copyClusterStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ClusterStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ClusterStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>ClusterStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>indexname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CopyStmt</name> <modifier>*</modifier></type>
<name>_copyCopyStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CopyStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CopyStmt</name>   <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CopyStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>attlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>is_from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>is_program</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>whereClause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * CopyCreateStmtFields
 *
 *		This function copies the fields of the CreateStmt node.  It is used by
 *		copy functions for classes which inherit from CreateStmt.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>CopyCreateStmtFields</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CreateStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>CreateStmt</name> <modifier>*</modifier></type><name>newnode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>tableElts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>inhRelations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>partspec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>partbound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>ofTypename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>constraints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>oncommit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>tablespacename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>accessMethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>if_not_exists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CreateStmt</name> <modifier>*</modifier></type>
<name>_copyCreateStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CreateStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CreateStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CreateStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CopyCreateStmtFields</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>newnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>TableLikeClause</name> <modifier>*</modifier></type>
<name>_copyTableLikeClause</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TableLikeClause</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TableLikeClause</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>TableLikeClause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>relationOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DefineStmt</name> <modifier>*</modifier></type>
<name>_copyDefineStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DefineStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DefineStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>DefineStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>oldstyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>defnames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>definition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>if_not_exists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>replace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DropStmt</name> <modifier>*</modifier></type>
<name>_copyDropStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DropStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DropStmt</name>   <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>DropStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>objects</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>removeType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>behavior</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>concurrent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>TruncateStmt</name> <modifier>*</modifier></type>
<name>_copyTruncateStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TruncateStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TruncateStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>TruncateStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>relations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>restart_seqs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>behavior</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CommentStmt</name> <modifier>*</modifier></type>
<name>_copyCommentStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CommentStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CommentStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CommentStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>objtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SecLabelStmt</name> <modifier>*</modifier></type>
<name>_copySecLabelStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SecLabelStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SecLabelStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>SecLabelStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>objtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>provider</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FetchStmt</name> <modifier>*</modifier></type>
<name>_copyFetchStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FetchStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FetchStmt</name>  <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>FetchStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>direction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>howMany</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>portalname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>ismove</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>IndexStmt</name> <modifier>*</modifier></type>
<name>_copyIndexStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>IndexStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>IndexStmt</name>  <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>IndexStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>idxname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>accessMethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>tableSpace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>indexParams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>indexIncludingParams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>whereClause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>excludeOpNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>idxcomment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>indexOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>oldNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>oldCreateSubid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>oldFirstRelfilenodeSubid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>unique</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>primary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>isconstraint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>deferrable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>initdeferred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>transformed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>concurrent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>if_not_exists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>reset_default_tblspc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CreateStatsStmt</name> <modifier>*</modifier></type>
<name>_copyCreateStatsStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CreateStatsStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CreateStatsStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CreateStatsStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>defnames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>stat_types</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>exprs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>relations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>stxcomment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>if_not_exists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AlterStatsStmt</name> <modifier>*</modifier></type>
<name>_copyAlterStatsStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AlterStatsStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AlterStatsStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>AlterStatsStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>defnames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>stxstattarget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CreateFunctionStmt</name> <modifier>*</modifier></type>
<name>_copyCreateFunctionStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CreateFunctionStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CreateFunctionStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CreateFunctionStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>is_procedure</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>replace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>funcname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>parameters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>returnType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FunctionParameter</name> <modifier>*</modifier></type>
<name>_copyFunctionParameter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FunctionParameter</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FunctionParameter</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>FunctionParameter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>argType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>defexpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AlterFunctionStmt</name> <modifier>*</modifier></type>
<name>_copyAlterFunctionStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AlterFunctionStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AlterFunctionStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>AlterFunctionStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>objtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>actions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DoStmt</name> <modifier>*</modifier></type>
<name>_copyDoStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DoStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DoStmt</name>	   <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>DoStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RenameStmt</name> <modifier>*</modifier></type>
<name>_copyRenameStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RenameStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RenameStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>RenameStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>renameType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>relationType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>subname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>newname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>behavior</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AlterObjectDependsStmt</name> <modifier>*</modifier></type>
<name>_copyAlterObjectDependsStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AlterObjectDependsStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AlterObjectDependsStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>AlterObjectDependsStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>objectType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>extname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>remove</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AlterObjectSchemaStmt</name> <modifier>*</modifier></type>
<name>_copyAlterObjectSchemaStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AlterObjectSchemaStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AlterObjectSchemaStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>AlterObjectSchemaStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>objectType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>newschema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AlterOwnerStmt</name> <modifier>*</modifier></type>
<name>_copyAlterOwnerStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AlterOwnerStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AlterOwnerStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>AlterOwnerStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>objectType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>newowner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AlterOperatorStmt</name> <modifier>*</modifier></type>
<name>_copyAlterOperatorStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AlterOperatorStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AlterOperatorStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>AlterOperatorStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>opername</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AlterTypeStmt</name> <modifier>*</modifier></type>
<name>_copyAlterTypeStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AlterTypeStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AlterTypeStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>AlterTypeStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>typeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RuleStmt</name> <modifier>*</modifier></type>
<name>_copyRuleStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RuleStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RuleStmt</name>   <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>RuleStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>rulename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>whereClause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>instead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>actions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>replace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>NotifyStmt</name> <modifier>*</modifier></type>
<name>_copyNotifyStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>NotifyStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>NotifyStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>NotifyStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>conditionname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ListenStmt</name> <modifier>*</modifier></type>
<name>_copyListenStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ListenStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListenStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>ListenStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>conditionname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>UnlistenStmt</name> <modifier>*</modifier></type>
<name>_copyUnlistenStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>UnlistenStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>UnlistenStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>UnlistenStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>conditionname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>TransactionStmt</name> <modifier>*</modifier></type>
<name>_copyTransactionStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TransactionStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TransactionStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>TransactionStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>savepoint_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CompositeTypeStmt</name> <modifier>*</modifier></type>
<name>_copyCompositeTypeStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CompositeTypeStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CompositeTypeStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CompositeTypeStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>typevar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>coldeflist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CreateEnumStmt</name> <modifier>*</modifier></type>
<name>_copyCreateEnumStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CreateEnumStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CreateEnumStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CreateEnumStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>typeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>vals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CreateRangeStmt</name> <modifier>*</modifier></type>
<name>_copyCreateRangeStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CreateRangeStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CreateRangeStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CreateRangeStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>typeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AlterEnumStmt</name> <modifier>*</modifier></type>
<name>_copyAlterEnumStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AlterEnumStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AlterEnumStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>AlterEnumStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>typeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>oldVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>newVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>newValNeighbor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>newValIsAfter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>skipIfNewValExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ViewStmt</name> <modifier>*</modifier></type>
<name>_copyViewStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ViewStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ViewStmt</name>   <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>ViewStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>view</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>aliases</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>replace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>withCheckOption</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>LoadStmt</name> <modifier>*</modifier></type>
<name>_copyLoadStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>LoadStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>LoadStmt</name>   <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>LoadStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CreateDomainStmt</name> <modifier>*</modifier></type>
<name>_copyCreateDomainStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CreateDomainStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CreateDomainStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CreateDomainStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>domainname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>typeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>collClause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>constraints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CreateOpClassStmt</name> <modifier>*</modifier></type>
<name>_copyCreateOpClassStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CreateOpClassStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CreateOpClassStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CreateOpClassStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>opclassname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>opfamilyname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>amname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>datatype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>isDefault</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CreateOpClassItem</name> <modifier>*</modifier></type>
<name>_copyCreateOpClassItem</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CreateOpClassItem</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CreateOpClassItem</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CreateOpClassItem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>itemtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>order_family</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>class_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>storedtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CreateOpFamilyStmt</name> <modifier>*</modifier></type>
<name>_copyCreateOpFamilyStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CreateOpFamilyStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CreateOpFamilyStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CreateOpFamilyStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>opfamilyname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>amname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AlterOpFamilyStmt</name> <modifier>*</modifier></type>
<name>_copyAlterOpFamilyStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AlterOpFamilyStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AlterOpFamilyStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>AlterOpFamilyStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>opfamilyname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>amname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>isDrop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CreatedbStmt</name> <modifier>*</modifier></type>
<name>_copyCreatedbStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CreatedbStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CreatedbStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CreatedbStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AlterDatabaseStmt</name> <modifier>*</modifier></type>
<name>_copyAlterDatabaseStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AlterDatabaseStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AlterDatabaseStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>AlterDatabaseStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AlterDatabaseSetStmt</name> <modifier>*</modifier></type>
<name>_copyAlterDatabaseSetStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AlterDatabaseSetStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AlterDatabaseSetStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>AlterDatabaseSetStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>setstmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DropdbStmt</name> <modifier>*</modifier></type>
<name>_copyDropdbStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DropdbStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DropdbStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>DropdbStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VacuumStmt</name> <modifier>*</modifier></type>
<name>_copyVacuumStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VacuumStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>VacuumStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>VacuumStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>rels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>is_vacuumcmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VacuumRelation</name> <modifier>*</modifier></type>
<name>_copyVacuumRelation</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VacuumRelation</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>VacuumRelation</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>VacuumRelation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>va_cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ExplainStmt</name> <modifier>*</modifier></type>
<name>_copyExplainStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExplainStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ExplainStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>ExplainStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CreateTableAsStmt</name> <modifier>*</modifier></type>
<name>_copyCreateTableAsStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CreateTableAsStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CreateTableAsStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CreateTableAsStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>into</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>relkind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>is_select_into</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>if_not_exists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>RefreshMatViewStmt</name> <modifier>*</modifier></type>
<name>_copyRefreshMatViewStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RefreshMatViewStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RefreshMatViewStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>RefreshMatViewStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>concurrent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>skipData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ReplicaIdentityStmt</name> <modifier>*</modifier></type>
<name>_copyReplicaIdentityStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ReplicaIdentityStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ReplicaIdentityStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>ReplicaIdentityStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>identity_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AlterSystemStmt</name> <modifier>*</modifier></type>
<name>_copyAlterSystemStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AlterSystemStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AlterSystemStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>AlterSystemStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>setstmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CreateSeqStmt</name> <modifier>*</modifier></type>
<name>_copyCreateSeqStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CreateSeqStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CreateSeqStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CreateSeqStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>sequence</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>ownerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>for_identity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>if_not_exists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AlterSeqStmt</name> <modifier>*</modifier></type>
<name>_copyAlterSeqStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AlterSeqStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AlterSeqStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>AlterSeqStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>sequence</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>for_identity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VariableSetStmt</name> <modifier>*</modifier></type>
<name>_copyVariableSetStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VariableSetStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>VariableSetStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>VariableSetStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>is_local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VariableShowStmt</name> <modifier>*</modifier></type>
<name>_copyVariableShowStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VariableShowStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>VariableShowStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>VariableShowStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DiscardStmt</name> <modifier>*</modifier></type>
<name>_copyDiscardStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DiscardStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DiscardStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>DiscardStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CreateTableSpaceStmt</name> <modifier>*</modifier></type>
<name>_copyCreateTableSpaceStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CreateTableSpaceStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CreateTableSpaceStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CreateTableSpaceStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>tablespacename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>owner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DropTableSpaceStmt</name> <modifier>*</modifier></type>
<name>_copyDropTableSpaceStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DropTableSpaceStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DropTableSpaceStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>DropTableSpaceStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>tablespacename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AlterTableSpaceOptionsStmt</name> <modifier>*</modifier></type>
<name>_copyAlterTableSpaceOptionsStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AlterTableSpaceOptionsStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AlterTableSpaceOptionsStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>AlterTableSpaceOptionsStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>tablespacename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>isReset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AlterTableMoveAllStmt</name> <modifier>*</modifier></type>
<name>_copyAlterTableMoveAllStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AlterTableMoveAllStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AlterTableMoveAllStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>AlterTableMoveAllStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>orig_tablespacename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>objtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>roles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>new_tablespacename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>nowait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CreateExtensionStmt</name> <modifier>*</modifier></type>
<name>_copyCreateExtensionStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CreateExtensionStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CreateExtensionStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CreateExtensionStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>extname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>if_not_exists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AlterExtensionStmt</name> <modifier>*</modifier></type>
<name>_copyAlterExtensionStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AlterExtensionStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AlterExtensionStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>AlterExtensionStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>extname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AlterExtensionContentsStmt</name> <modifier>*</modifier></type>
<name>_copyAlterExtensionContentsStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AlterExtensionContentsStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AlterExtensionContentsStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>AlterExtensionContentsStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>extname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>objtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CreateFdwStmt</name> <modifier>*</modifier></type>
<name>_copyCreateFdwStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CreateFdwStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CreateFdwStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CreateFdwStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>fdwname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>func_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AlterFdwStmt</name> <modifier>*</modifier></type>
<name>_copyAlterFdwStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AlterFdwStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AlterFdwStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>AlterFdwStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>fdwname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>func_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CreateForeignServerStmt</name> <modifier>*</modifier></type>
<name>_copyCreateForeignServerStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CreateForeignServerStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CreateForeignServerStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CreateForeignServerStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>servername</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>servertype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>fdwname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>if_not_exists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AlterForeignServerStmt</name> <modifier>*</modifier></type>
<name>_copyAlterForeignServerStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AlterForeignServerStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AlterForeignServerStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>AlterForeignServerStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>servername</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>has_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CreateUserMappingStmt</name> <modifier>*</modifier></type>
<name>_copyCreateUserMappingStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CreateUserMappingStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CreateUserMappingStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CreateUserMappingStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>servername</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>if_not_exists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AlterUserMappingStmt</name> <modifier>*</modifier></type>
<name>_copyAlterUserMappingStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AlterUserMappingStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AlterUserMappingStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>AlterUserMappingStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>servername</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DropUserMappingStmt</name> <modifier>*</modifier></type>
<name>_copyDropUserMappingStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DropUserMappingStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DropUserMappingStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>DropUserMappingStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>servername</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CreateForeignTableStmt</name> <modifier>*</modifier></type>
<name>_copyCreateForeignTableStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CreateForeignTableStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CreateForeignTableStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CreateForeignTableStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CopyCreateStmtFields</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>CreateStmt</name> <operator>*</operator><operator>)</operator> <name>from</name></expr></argument>, <argument><expr><operator>(</operator><name>CreateStmt</name> <operator>*</operator><operator>)</operator> <name>newnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>servername</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ImportForeignSchemaStmt</name> <modifier>*</modifier></type>
<name>_copyImportForeignSchemaStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ImportForeignSchemaStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ImportForeignSchemaStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>ImportForeignSchemaStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>server_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>remote_schema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>local_schema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>list_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>table_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CreateTransformStmt</name> <modifier>*</modifier></type>
<name>_copyCreateTransformStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CreateTransformStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CreateTransformStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CreateTransformStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>replace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>type_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>lang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>fromsql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>tosql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CreateAmStmt</name> <modifier>*</modifier></type>
<name>_copyCreateAmStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CreateAmStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CreateAmStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CreateAmStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>amname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>handler_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>amtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CreateTrigStmt</name> <modifier>*</modifier></type>
<name>_copyCreateTrigStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CreateTrigStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CreateTrigStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CreateTrigStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>trigname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>funcname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>timing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>events</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>columns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>whenClause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>isconstraint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>transitionRels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>deferrable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>initdeferred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>constrrel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CreateEventTrigStmt</name> <modifier>*</modifier></type>
<name>_copyCreateEventTrigStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CreateEventTrigStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CreateEventTrigStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CreateEventTrigStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>trigname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>eventname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>whenclause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>funcname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AlterEventTrigStmt</name> <modifier>*</modifier></type>
<name>_copyAlterEventTrigStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AlterEventTrigStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AlterEventTrigStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>AlterEventTrigStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>trigname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>tgenabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CreatePLangStmt</name> <modifier>*</modifier></type>
<name>_copyCreatePLangStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CreatePLangStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CreatePLangStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CreatePLangStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>replace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>plname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>plhandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>plinline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>plvalidator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>pltrusted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CreateRoleStmt</name> <modifier>*</modifier></type>
<name>_copyCreateRoleStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CreateRoleStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CreateRoleStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CreateRoleStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>stmt_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>role</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AlterRoleStmt</name> <modifier>*</modifier></type>
<name>_copyAlterRoleStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AlterRoleStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AlterRoleStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>AlterRoleStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>role</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AlterRoleSetStmt</name> <modifier>*</modifier></type>
<name>_copyAlterRoleSetStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AlterRoleSetStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AlterRoleSetStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>AlterRoleSetStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>role</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>database</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>setstmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DropRoleStmt</name> <modifier>*</modifier></type>
<name>_copyDropRoleStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DropRoleStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DropRoleStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>DropRoleStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>roles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>LockStmt</name> <modifier>*</modifier></type>
<name>_copyLockStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>LockStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>LockStmt</name>   <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>LockStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>relations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>nowait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ConstraintsSetStmt</name> <modifier>*</modifier></type>
<name>_copyConstraintsSetStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ConstraintsSetStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ConstraintsSetStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>ConstraintsSetStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>constraints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>deferred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ReindexStmt</name> <modifier>*</modifier></type>
<name>_copyReindexStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ReindexStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ReindexStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>ReindexStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>concurrent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CreateSchemaStmt</name> <modifier>*</modifier></type>
<name>_copyCreateSchemaStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CreateSchemaStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CreateSchemaStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CreateSchemaStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>schemaname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>authrole</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>schemaElts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>if_not_exists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CreateConversionStmt</name> <modifier>*</modifier></type>
<name>_copyCreateConversionStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CreateConversionStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CreateConversionStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CreateConversionStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>conversion_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>for_encoding_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>to_encoding_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>func_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CreateCastStmt</name> <modifier>*</modifier></type>
<name>_copyCreateCastStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CreateCastStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CreateCastStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CreateCastStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>sourcetype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>targettype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>inout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PrepareStmt</name> <modifier>*</modifier></type>
<name>_copyPrepareStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PrepareStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PrepareStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>PrepareStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>argtypes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ExecuteStmt</name> <modifier>*</modifier></type>
<name>_copyExecuteStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExecuteStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ExecuteStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>ExecuteStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DeallocateStmt</name> <modifier>*</modifier></type>
<name>_copyDeallocateStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DeallocateStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DeallocateStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>DeallocateStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DropOwnedStmt</name> <modifier>*</modifier></type>
<name>_copyDropOwnedStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DropOwnedStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DropOwnedStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>DropOwnedStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>roles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>behavior</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ReassignOwnedStmt</name> <modifier>*</modifier></type>
<name>_copyReassignOwnedStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ReassignOwnedStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ReassignOwnedStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>ReassignOwnedStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>roles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>newrole</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AlterTSDictionaryStmt</name> <modifier>*</modifier></type>
<name>_copyAlterTSDictionaryStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AlterTSDictionaryStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AlterTSDictionaryStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>AlterTSDictionaryStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>dictname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AlterTSConfigurationStmt</name> <modifier>*</modifier></type>
<name>_copyAlterTSConfigurationStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AlterTSConfigurationStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AlterTSConfigurationStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>AlterTSConfigurationStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>cfgname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>tokentype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>dicts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>override</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>replace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CreatePolicyStmt</name> <modifier>*</modifier></type>
<name>_copyCreatePolicyStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CreatePolicyStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CreatePolicyStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CreatePolicyStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>policy_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>cmd_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>permissive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>roles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>qual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>with_check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AlterPolicyStmt</name> <modifier>*</modifier></type>
<name>_copyAlterPolicyStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AlterPolicyStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AlterPolicyStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>AlterPolicyStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>policy_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>roles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>qual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>with_check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PartitionElem</name> <modifier>*</modifier></type>
<name>_copyPartitionElem</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PartitionElem</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PartitionElem</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>PartitionElem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>collation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>opclass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PartitionSpec</name> <modifier>*</modifier></type>
<name>_copyPartitionSpec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PartitionSpec</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PartitionSpec</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>PartitionSpec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>strategy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>partParams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PartitionBoundSpec</name> <modifier>*</modifier></type>
<name>_copyPartitionBoundSpec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PartitionBoundSpec</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PartitionBoundSpec</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>PartitionBoundSpec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>strategy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>is_default</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>modulus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>remainder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>listdatums</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>lowerdatums</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>upperdatums</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PartitionRangeDatum</name> <modifier>*</modifier></type>
<name>_copyPartitionRangeDatum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PartitionRangeDatum</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PartitionRangeDatum</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>PartitionRangeDatum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PartitionCmd</name> <modifier>*</modifier></type>
<name>_copyPartitionCmd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PartitionCmd</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PartitionCmd</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>PartitionCmd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>bound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CreatePublicationStmt</name> <modifier>*</modifier></type>
<name>_copyCreatePublicationStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CreatePublicationStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CreatePublicationStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CreatePublicationStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>pubname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>tables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>for_all_tables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AlterPublicationStmt</name> <modifier>*</modifier></type>
<name>_copyAlterPublicationStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AlterPublicationStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AlterPublicationStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>AlterPublicationStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>pubname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>tables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>for_all_tables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>tableAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CreateSubscriptionStmt</name> <modifier>*</modifier></type>
<name>_copyCreateSubscriptionStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CreateSubscriptionStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CreateSubscriptionStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CreateSubscriptionStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>subname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>conninfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>publication</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AlterSubscriptionStmt</name> <modifier>*</modifier></type>
<name>_copyAlterSubscriptionStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AlterSubscriptionStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AlterSubscriptionStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>AlterSubscriptionStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>subname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>conninfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>publication</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DropSubscriptionStmt</name> <modifier>*</modifier></type>
<name>_copyDropSubscriptionStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DropSubscriptionStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DropSubscriptionStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>DropSubscriptionStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>subname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>behavior</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CreateGraphStmt</name> <modifier>*</modifier></type>
<name>_copyCreateGraphStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CreateGraphStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CreateGraphStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CreateGraphStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>graphname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>authrole</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>if_not_exists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CreateLabelStmt</name> <modifier>*</modifier></type>
<name>_copyCreateLabelStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CreateLabelStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CreateLabelStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CreateLabelStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>inhRelations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>labelKind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>tablespacename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>if_not_exists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>only_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>fixed_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AlterLabelStmt</name> <modifier>*</modifier></type>
<name>_copyAlterLabelStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AlterLabelStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AlterLabelStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>AlterLabelStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>cmds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>relkind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>missing_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CreateConstraintStmt</name> <modifier>*</modifier></type>
<name>_copyCreateConstraintStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CreateConstraintStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CreateConstraintStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CreateConstraintStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>contype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>graphlabel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>conname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DropConstraintStmt</name> <modifier>*</modifier></type>
<name>_copyDropConstraintStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DropConstraintStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DropConstraintStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>DropConstraintStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>graphlabel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>conname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CreatePropertyIndexStmt</name> <modifier>*</modifier></type>
<name>_copyCreatePropertyIndexStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CreatePropertyIndexStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CreatePropertyIndexStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CreatePropertyIndexStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>idxname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>accessMethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>tableSpace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>indexParams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>whereClause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>excludeOpNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>idxcomment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>indexOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>oldNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>unique</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>primary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>isconstraint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>deferrable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>initdeferred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>transformed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>concurrent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>if_not_exists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CypherStmt</name> <modifier>*</modifier></type>
<name>_copyCypherStmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CypherStmt</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CypherStmt</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CypherStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CypherListComp</name> <modifier>*</modifier></type>
<name>_copyCypherListComp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CypherListComp</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CypherListComp</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CypherListComp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>varname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CypherGenericExpr</name> <modifier>*</modifier></type>
<name>_copyCypherGenericExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CypherGenericExpr</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CypherGenericExpr</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CypherGenericExpr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CypherSubPattern</name> <modifier>*</modifier></type>
<name>_copyCypherSubPattern</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CypherSubPattern</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CypherSubPattern</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CypherSubPattern</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CypherClause</name> <modifier>*</modifier></type>
<name>_copyCypherClause</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CypherClause</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CypherClause</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CypherClause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>detail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CypherMatchClause</name> <modifier>*</modifier></type>
<name>_copyCypherMatchClause</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CypherMatchClause</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CypherMatchClause</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CypherMatchClause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>where</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>optional</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CypherProjection</name> <modifier>*</modifier></type>
<name>_copyCypherProjection</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CypherProjection</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CypherProjection</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CypherProjection</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>distinct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>skip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>where</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CypherCreateClause</name> <modifier>*</modifier></type>
<name>_copyCypherCreateClause</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CypherCreateClause</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CypherCreateClause</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CypherCreateClause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CypherDeleteClause</name> <modifier>*</modifier></type>
<name>_copyCypherDeleteClause</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CypherDeleteClause</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CypherDeleteClause</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CypherDeleteClause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>detach</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>exprs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CypherSetClause</name> <modifier>*</modifier></type>
<name>_copyCypherSetClause</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CypherSetClause</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CypherSetClause</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CypherSetClause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>is_remove</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CypherMergeClause</name> <modifier>*</modifier></type>
<name>_copyCypherMergeClause</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CypherMergeClause</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CypherMergeClause</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CypherMergeClause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>sets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CypherLoadClause</name> <modifier>*</modifier></type>
<name>_copyCypherLoadClause</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CypherLoadClause</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CypherLoadClause</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CypherLoadClause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CypherUnwindClause</name> <modifier>*</modifier></type>
<name>_copyCypherUnwindClause</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CypherUnwindClause</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CypherUnwindClause</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CypherUnwindClause</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CypherPath</name> <modifier>*</modifier></type>
<name>_copyCypherPath</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CypherPath</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CypherPath</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CypherPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>variable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CypherNode</name> <modifier>*</modifier></type>
<name>_copyCypherNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CypherNode</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CypherNode</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CypherNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>variable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>only</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>prop_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CypherRel</name> <modifier>*</modifier></type>
<name>_copyCypherRel</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CypherRel</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CypherRel</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CypherRel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>direction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>variable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>types</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>only</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>varlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>prop_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CypherName</name> <modifier>*</modifier></type>
<name>_copyCypherName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CypherName</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CypherName</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CypherName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_LOCATION_FIELD</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>CypherSetProp</name> <modifier>*</modifier></type>
<name>_copyCypherSetProp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CypherSetProp</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CypherSetProp</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CypherSetProp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>GraphPath</name> <modifier>*</modifier></type>
<name>_copyGraphPath</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GraphPath</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GraphPath</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>GraphPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>variable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>GraphVertex</name> <modifier>*</modifier></type>
<name>_copyGraphVertex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GraphVertex</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GraphVertex</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>GraphVertex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>resno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>create</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>relid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>GraphEdge</name> <modifier>*</modifier></type>
<name>_copyGraphEdge</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GraphEdge</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GraphEdge</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>GraphEdge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>direction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>resno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>relid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>GraphSetProp</name> <modifier>*</modifier></type>
<name>_copyGraphSetProp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GraphSetProp</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GraphSetProp</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>GraphSetProp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>variable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>GraphDelElem</name> <modifier>*</modifier></type>
<name>_copyGraphDelElem</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>GraphDelElem</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GraphDelElem</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>GraphDelElem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>variable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ****************************************************************
 *					extensible.h copy functions
 * ****************************************************************
 */</comment>
<function><type><specifier>static</specifier> <name>ExtensibleNode</name> <modifier>*</modifier></type>
<name>_copyExtensibleNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExtensibleNode</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ExtensibleNode</name> <modifier>*</modifier></type><name>newnode</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>ExtensibleNodeMethods</name> <modifier>*</modifier></type><name>methods</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>methods</name> <operator>=</operator> <call><name>GetExtensibleNodeMethods</name><argument_list>(<argument><expr><name><name>from</name><operator>-&gt;</operator><name>extnodename</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>newnode</name> <operator>=</operator> <operator>(</operator><name>ExtensibleNode</name> <operator>*</operator><operator>)</operator> <call><name>newNode</name><argument_list>(<argument><expr><name><name>methods</name><operator>-&gt;</operator><name>node_size</name></name></expr></argument>,
										 <argument><expr><name>T_ExtensibleNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>extnodename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* copy the private fields */</comment>
	<expr_stmt><expr><call><name><name>methods</name><operator>-&gt;</operator><name>nodeCopy</name></name><argument_list>(<argument><expr><name>newnode</name></expr></argument>, <argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ****************************************************************
 *					value.h copy functions
 * ****************************************************************
 */</comment>
<function><type><specifier>static</specifier> <name>Value</name> <modifier>*</modifier></type>
<name>_copyValue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Value</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Value</name>	   <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>Value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* See also _copyAConst when changing this code! */</comment>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<switch>switch <condition>(<expr><name><name>from</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>T_Integer</name></expr>:</case>
			<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name><name>val</name><operator>.</operator><name>ival</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_Float</name></expr>:</case>
		<case>case <expr><name>T_String</name></expr>:</case>
		<case>case <expr><name>T_BitString</name></expr>:</case>
			<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name><name>val</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_Null</name></expr>:</case>
			<comment type="block">/* nothing to do */</comment>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized node type: %d"</literal></expr></argument>,
				 <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>from</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>
	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>ForeignKeyCacheInfo</name> <modifier>*</modifier></type>
<name>_copyForeignKeyCacheInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ForeignKeyCacheInfo</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ForeignKeyCacheInfo</name> <modifier>*</modifier></type><name>newnode</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>ForeignKeyCacheInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>conoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>conrelid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>confrelid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>nkeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* COPY_SCALAR_FIELD might work for these, but let's not assume that */</comment>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>newnode</name><operator>-&gt;</operator><name>conkey</name></name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>conkey</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>newnode</name><operator>-&gt;</operator><name>conkey</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>newnode</name><operator>-&gt;</operator><name>confkey</name></name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>confkey</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>newnode</name><operator>-&gt;</operator><name>confkey</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>newnode</name><operator>-&gt;</operator><name>conpfeqop</name></name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>conpfeqop</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>newnode</name><operator>-&gt;</operator><name>conpfeqop</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newnode</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * copyObjectImpl -- implementation of copyObject(); see nodes/nodes.h
 *
 * Create a copy of a Node tree or list.  This is a "deep" copy: all
 * substructure is copied too, recursively.
 */</comment>
<function><type><name>void</name> <modifier>*</modifier></type>
<name>copyObjectImpl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name>	   <modifier>*</modifier></type><name>retval</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>from</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Guard against stack overflow due to overly complex expressions */</comment>
	<expr_stmt><expr><call><name>check_stack_depth</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><call><name>nodeTag</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
			<comment type="block">/*
			 * PLAN NODES
			 */</comment>
		<case>case <expr><name>T_PlannedStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyPlannedStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_Plan</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyPlan</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_Result</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyResult</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_ProjectSet</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyProjectSet</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_ModifyTable</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyModifyTable</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_Append</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyAppend</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_MergeAppend</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyMergeAppend</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_RecursiveUnion</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyRecursiveUnion</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_BitmapAnd</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyBitmapAnd</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_BitmapOr</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyBitmapOr</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_Scan</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyScan</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_Gather</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyGather</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_GatherMerge</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyGatherMerge</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_SeqScan</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copySeqScan</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_SampleScan</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copySampleScan</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_IndexScan</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyIndexScan</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_IndexOnlyScan</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyIndexOnlyScan</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_BitmapIndexScan</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyBitmapIndexScan</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_BitmapHeapScan</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyBitmapHeapScan</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_TidScan</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyTidScan</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_SubqueryScan</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copySubqueryScan</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_FunctionScan</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyFunctionScan</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_TableFuncScan</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyTableFuncScan</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_ValuesScan</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyValuesScan</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CteScan</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCteScan</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_NamedTuplestoreScan</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyNamedTuplestoreScan</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_WorkTableScan</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyWorkTableScan</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_ForeignScan</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyForeignScan</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CustomScan</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCustomScan</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_Join</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyJoin</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_NestLoop</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyNestLoop</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_NestLoopVLE</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyNestLoopVLE</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_MergeJoin</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyMergeJoin</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_HashJoin</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyHashJoin</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_Material</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyMaterial</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_Sort</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copySort</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_IncrementalSort</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyIncrementalSort</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_Group</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyGroup</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_Agg</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyAgg</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_WindowAgg</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyWindowAgg</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_Unique</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyUnique</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_Hash</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyHash</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_SetOp</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copySetOp</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_LockRows</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyLockRows</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_Limit</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyLimit</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_ModifyGraph</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyModifyGraph</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_NestLoopParam</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyNestLoopParam</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_PlanRowMark</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyPlanRowMark</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_PartitionPruneInfo</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyPartitionPruneInfo</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_PartitionedRelPruneInfo</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyPartitionedRelPruneInfo</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_PartitionPruneStepOp</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyPartitionPruneStepOp</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_PartitionPruneStepCombine</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyPartitionPruneStepCombine</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_PlanInvalItem</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyPlanInvalItem</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_Shortestpath</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyShortestpath</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_Hash2Side</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyHash2Side</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_Dijkstra</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyDijkstra</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

			<comment type="block">/*
			 * PRIMITIVE NODES
			 */</comment>
		<case>case <expr><name>T_Alias</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyAlias</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_RangeVar</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyRangeVar</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_TableFunc</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyTableFunc</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_IntoClause</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyIntoClause</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_Var</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyVar</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_Const</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyConst</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_Param</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyParam</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_Aggref</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyAggref</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_GroupingFunc</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyGroupingFunc</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_WindowFunc</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyWindowFunc</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_SubscriptingRef</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copySubscriptingRef</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_FuncExpr</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyFuncExpr</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_NamedArgExpr</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyNamedArgExpr</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_OpExpr</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyOpExpr</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_DistinctExpr</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyDistinctExpr</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_NullIfExpr</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyNullIfExpr</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_ScalarArrayOpExpr</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyScalarArrayOpExpr</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_BoolExpr</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyBoolExpr</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_SubLink</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copySubLink</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_SubPlan</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copySubPlan</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_AlternativeSubPlan</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyAlternativeSubPlan</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_FieldSelect</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyFieldSelect</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_FieldStore</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyFieldStore</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_RelabelType</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyRelabelType</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CoerceViaIO</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCoerceViaIO</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_ArrayCoerceExpr</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyArrayCoerceExpr</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_ConvertRowtypeExpr</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyConvertRowtypeExpr</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CollateExpr</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCollateExpr</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CaseExpr</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCaseExpr</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CaseWhen</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCaseWhen</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CaseTestExpr</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCaseTestExpr</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_ArrayExpr</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyArrayExpr</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_RowExpr</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyRowExpr</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_RowCompareExpr</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyRowCompareExpr</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CoalesceExpr</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCoalesceExpr</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_MinMaxExpr</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyMinMaxExpr</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_SQLValueFunction</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copySQLValueFunction</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_XmlExpr</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyXmlExpr</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_NullTest</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyNullTest</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_BooleanTest</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyBooleanTest</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CoerceToDomain</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCoerceToDomain</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CoerceToDomainValue</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCoerceToDomainValue</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_SetToDefault</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copySetToDefault</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CurrentOfExpr</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCurrentOfExpr</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_NextValueExpr</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyNextValueExpr</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_InferenceElem</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyInferenceElem</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_TargetEntry</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyTargetEntry</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_RangeTblRef</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyRangeTblRef</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_JoinExpr</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyJoinExpr</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_FromExpr</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyFromExpr</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_OnConflictExpr</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyOnConflictExpr</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CypherTypeCast</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCypherTypeCast</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CypherMapExpr</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCypherMapExpr</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CypherListExpr</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCypherListExpr</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CypherListCompExpr</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCypherListCompExpr</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CypherListCompVar</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCypherListCompVar</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CypherAccessExpr</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCypherAccessExpr</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CypherIndices</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCypherIndices</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

			<comment type="block">/*
			 * RELATION NODES
			 */</comment>
		<case>case <expr><name>T_PathKey</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyPathKey</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_RestrictInfo</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyRestrictInfo</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_PlaceHolderVar</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyPlaceHolderVar</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_SpecialJoinInfo</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copySpecialJoinInfo</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_AppendRelInfo</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyAppendRelInfo</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_PlaceHolderInfo</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyPlaceHolderInfo</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

			<comment type="block">/*
			 * VALUE NODES
			 */</comment>
		<case>case <expr><name>T_Integer</name></expr>:</case>
		<case>case <expr><name>T_Float</name></expr>:</case>
		<case>case <expr><name>T_String</name></expr>:</case>
		<case>case <expr><name>T_BitString</name></expr>:</case>
		<case>case <expr><name>T_Null</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyValue</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

			<comment type="block">/*
			 * LIST NODES
			 */</comment>
		<case>case <expr><name>T_List</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>list_copy_deep</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

			<comment type="block">/*
			 * Lists of integers and OIDs don't need to be deep-copied, so we
			 * perform a shallow copy via list_copy()
			 */</comment>
		<case>case <expr><name>T_IntList</name></expr>:</case>
		<case>case <expr><name>T_OidList</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>list_copy</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

			<comment type="block">/*
			 * EXTENSIBLE NODES
			 */</comment>
		<case>case <expr><name>T_ExtensibleNode</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyExtensibleNode</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

			<comment type="block">/*
			 * PARSE NODES
			 */</comment>
		<case>case <expr><name>T_Query</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyQuery</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_RawStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyRawStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_InsertStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyInsertStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_DeleteStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyDeleteStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_UpdateStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyUpdateStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_SelectStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copySelectStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_SetOperationStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copySetOperationStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_AlterTableStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyAlterTableStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_AlterTableCmd</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyAlterTableCmd</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_AlterCollationStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyAlterCollationStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_AlterDomainStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyAlterDomainStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_GrantStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyGrantStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_GrantRoleStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyGrantRoleStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_AlterDefaultPrivilegesStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyAlterDefaultPrivilegesStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_DeclareCursorStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyDeclareCursorStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_ClosePortalStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyClosePortalStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CallStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCallStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_ClusterStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyClusterStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CopyStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCopyStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CreateStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCreateStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_TableLikeClause</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyTableLikeClause</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_DefineStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyDefineStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_DropStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyDropStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_TruncateStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyTruncateStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CommentStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCommentStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_SecLabelStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copySecLabelStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_FetchStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyFetchStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_IndexStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyIndexStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CreateStatsStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCreateStatsStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_AlterStatsStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyAlterStatsStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CreateFunctionStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCreateFunctionStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_FunctionParameter</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyFunctionParameter</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_AlterFunctionStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyAlterFunctionStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_DoStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyDoStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_RenameStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyRenameStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_AlterObjectDependsStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyAlterObjectDependsStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_AlterObjectSchemaStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyAlterObjectSchemaStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_AlterOwnerStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyAlterOwnerStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_AlterOperatorStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyAlterOperatorStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_AlterTypeStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyAlterTypeStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_RuleStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyRuleStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_NotifyStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyNotifyStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_ListenStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyListenStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_UnlistenStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyUnlistenStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_TransactionStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyTransactionStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CompositeTypeStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCompositeTypeStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CreateEnumStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCreateEnumStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CreateRangeStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCreateRangeStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_AlterEnumStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyAlterEnumStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_ViewStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyViewStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_LoadStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyLoadStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CreateDomainStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCreateDomainStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CreateOpClassStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCreateOpClassStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CreateOpClassItem</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCreateOpClassItem</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CreateOpFamilyStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCreateOpFamilyStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_AlterOpFamilyStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyAlterOpFamilyStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CreatedbStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCreatedbStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_AlterDatabaseStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyAlterDatabaseStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_AlterDatabaseSetStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyAlterDatabaseSetStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_DropdbStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyDropdbStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_VacuumStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyVacuumStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_VacuumRelation</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyVacuumRelation</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_ExplainStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyExplainStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CreateTableAsStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCreateTableAsStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_RefreshMatViewStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyRefreshMatViewStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_ReplicaIdentityStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyReplicaIdentityStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_AlterSystemStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyAlterSystemStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CreateSeqStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCreateSeqStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_AlterSeqStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyAlterSeqStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_VariableSetStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyVariableSetStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_VariableShowStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyVariableShowStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_DiscardStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyDiscardStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CreateTableSpaceStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCreateTableSpaceStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_DropTableSpaceStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyDropTableSpaceStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_AlterTableSpaceOptionsStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyAlterTableSpaceOptionsStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_AlterTableMoveAllStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyAlterTableMoveAllStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CreateExtensionStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCreateExtensionStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_AlterExtensionStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyAlterExtensionStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_AlterExtensionContentsStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyAlterExtensionContentsStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CreateFdwStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCreateFdwStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_AlterFdwStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyAlterFdwStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CreateForeignServerStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCreateForeignServerStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_AlterForeignServerStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyAlterForeignServerStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CreateUserMappingStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCreateUserMappingStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_AlterUserMappingStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyAlterUserMappingStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_DropUserMappingStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyDropUserMappingStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CreateForeignTableStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCreateForeignTableStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_ImportForeignSchemaStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyImportForeignSchemaStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CreateTransformStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCreateTransformStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CreateAmStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCreateAmStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CreateTrigStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCreateTrigStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CreateEventTrigStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCreateEventTrigStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_AlterEventTrigStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyAlterEventTrigStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CreatePLangStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCreatePLangStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CreateRoleStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCreateRoleStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_AlterRoleStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyAlterRoleStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_AlterRoleSetStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyAlterRoleSetStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_DropRoleStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyDropRoleStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_LockStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyLockStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_ConstraintsSetStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyConstraintsSetStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_ReindexStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyReindexStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CheckPointStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>CheckPointStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CreateSchemaStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCreateSchemaStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CreateConversionStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCreateConversionStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CreateCastStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCreateCastStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_PrepareStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyPrepareStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_ExecuteStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyExecuteStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_DeallocateStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyDeallocateStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_DropOwnedStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyDropOwnedStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_ReassignOwnedStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyReassignOwnedStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_AlterTSDictionaryStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyAlterTSDictionaryStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_AlterTSConfigurationStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyAlterTSConfigurationStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CreatePolicyStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCreatePolicyStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_AlterPolicyStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyAlterPolicyStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CreatePublicationStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCreatePublicationStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_AlterPublicationStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyAlterPublicationStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CreateSubscriptionStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCreateSubscriptionStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_AlterSubscriptionStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyAlterSubscriptionStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_DropSubscriptionStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyDropSubscriptionStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CreateGraphStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCreateGraphStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CreateLabelStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCreateLabelStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_AlterLabelStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyAlterLabelStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CreateConstraintStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCreateConstraintStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_DropConstraintStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyDropConstraintStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CreatePropertyIndexStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCreatePropertyIndexStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CypherStmt</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCypherStmt</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CypherListComp</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCypherListComp</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CypherGenericExpr</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCypherGenericExpr</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CypherSubPattern</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCypherSubPattern</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_A_Expr</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyAExpr</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_ColumnRef</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyColumnRef</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_ParamRef</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyParamRef</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_A_Const</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyAConst</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_FuncCall</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyFuncCall</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_A_Star</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyAStar</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_A_Indices</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyAIndices</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_A_Indirection</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyA_Indirection</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_A_ArrayExpr</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyA_ArrayExpr</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_ResTarget</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyResTarget</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_MultiAssignRef</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyMultiAssignRef</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_TypeCast</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyTypeCast</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CollateClause</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCollateClause</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_SortBy</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copySortBy</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_WindowDef</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyWindowDef</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_RangeSubselect</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyRangeSubselect</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_RangeFunction</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyRangeFunction</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_RangeTableSample</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyRangeTableSample</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_RangeTableFunc</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyRangeTableFunc</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_RangeTableFuncCol</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyRangeTableFuncCol</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_TypeName</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyTypeName</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_IndexElem</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyIndexElem</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_ColumnDef</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyColumnDef</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_Constraint</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyConstraint</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_DefElem</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyDefElem</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_LockingClause</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyLockingClause</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_RangeTblEntry</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyRangeTblEntry</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_RangeTblFunction</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyRangeTblFunction</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_TableSampleClause</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyTableSampleClause</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_WithCheckOption</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyWithCheckOption</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_SortGroupClause</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copySortGroupClause</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_GroupingSet</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyGroupingSet</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_WindowClause</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyWindowClause</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_RowMarkClause</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyRowMarkClause</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_WithClause</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyWithClause</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_InferClause</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyInferClause</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_OnConflictClause</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyOnConflictClause</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CommonTableExpr</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCommonTableExpr</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_ObjectWithArgs</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyObjectWithArgs</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_AccessPriv</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyAccessPriv</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_XmlSerialize</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyXmlSerialize</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_RoleSpec</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyRoleSpec</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_TriggerTransition</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyTriggerTransition</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_PartitionElem</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyPartitionElem</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_PartitionSpec</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyPartitionSpec</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_PartitionBoundSpec</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyPartitionBoundSpec</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_PartitionRangeDatum</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyPartitionRangeDatum</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_PartitionCmd</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyPartitionCmd</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CypherClause</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCypherClause</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CypherMatchClause</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCypherMatchClause</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CypherProjection</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCypherProjection</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CypherCreateClause</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCypherCreateClause</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CypherDeleteClause</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCypherDeleteClause</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CypherSetClause</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCypherSetClause</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CypherMergeClause</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCypherMergeClause</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CypherLoadClause</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCypherLoadClause</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CypherUnwindClause</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCypherUnwindClause</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CypherPath</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCypherPath</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CypherNode</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCypherNode</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CypherRel</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCypherRel</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CypherName</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCypherName</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_CypherSetProp</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyCypherSetProp</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

			<comment type="block">/*
			 * GRAPH NODES
			 */</comment>
		<case>case <expr><name>T_GraphPath</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyGraphPath</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_GraphVertex</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyGraphVertex</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_GraphEdge</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyGraphEdge</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_GraphSetProp</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyGraphSetProp</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_GraphDelElem</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyGraphDelElem</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

			<comment type="block">/*
			 * MISCELLANEOUS NODES
			 */</comment>
		<case>case <expr><name>T_ForeignKeyCacheInfo</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>_copyForeignKeyCacheInfo</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized node type: %d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>nodeTag</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>			<comment type="block">/* keep compiler quiet */</comment>
			<break>break;</break>
	</block_content>}</block></switch>

	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>
</unit>
