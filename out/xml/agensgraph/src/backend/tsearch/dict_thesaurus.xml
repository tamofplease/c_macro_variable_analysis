<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/backend/tsearch/dict_thesaurus.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * dict_thesaurus.c
 *		Thesaurus dictionary: phrase to phrase substitution
 *
 * Portions Copyright (c) 1996-2020, PostgreSQL Global Development Group
 *
 *
 * IDENTIFICATION
 *	  src/backend/tsearch/dict_thesaurus.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/namespace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/defrem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsearch/ts_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsearch/ts_locale.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsearch/ts_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/regproc.h"</cpp:file></cpp:include>


<comment type="block">/*
 * Temporary we use TSLexeme.flags for inner use...
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_USEASIS</name></cpp:macro>		<cpp:value>0x1000</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>LexemeInfo</name>
<block>{
	<decl_stmt><decl><type><name>uint32</name></type>		<name>idsubst</name></decl>;</decl_stmt>		<comment type="block">/* entry's number in DictThesaurus-&gt;subst */</comment>
	<decl_stmt><decl><type><name>uint16</name></type>		<name>posinsubst</name></decl>;</decl_stmt>		<comment type="block">/* pos info in entry */</comment>
	<decl_stmt><decl><type><name>uint16</name></type>		<name>tnvariant</name></decl>;</decl_stmt>		<comment type="block">/* total num lexemes in one variant */</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>LexemeInfo</name></name> <modifier>*</modifier></type><name>nextentry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>LexemeInfo</name></name> <modifier>*</modifier></type><name>nextvariant</name></decl>;</decl_stmt>
}</block></struct></type> <name>LexemeInfo</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>lexeme</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LexemeInfo</name> <modifier>*</modifier></type><name>entries</name></decl>;</decl_stmt>
}</block></struct></type> <name>TheLexeme</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>uint16</name></type>		<name>lastlexeme</name></decl>;</decl_stmt>		<comment type="block">/* number lexemes to substitute */</comment>
	<decl_stmt><decl><type><name>uint16</name></type>		<name>reslen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TSLexeme</name>   <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>			<comment type="block">/* prepared substituted result */</comment>
}</block></struct></type> <name>TheSubstitute</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
	<comment type="block">/* subdictionary to normalize lexemes */</comment>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>subdictOid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TSDictionaryCacheEntry</name> <modifier>*</modifier></type><name>subdict</name></decl>;</decl_stmt>

	<comment type="block">/* Array to search lexeme by exact match */</comment>
	<decl_stmt><decl><type><name>TheLexeme</name>  <modifier>*</modifier></type><name>wrds</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>nwrds</name></decl>;</decl_stmt>			<comment type="block">/* current number of words */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>ntwrds</name></decl>;</decl_stmt>			<comment type="block">/* allocated array length */</comment>

	<comment type="block">/*
	 * Storage of substituted result, n-th element is for n-th expression
	 */</comment>
	<decl_stmt><decl><type><name>TheSubstitute</name> <modifier>*</modifier></type><name>subst</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>nsubst</name></decl>;</decl_stmt>
}</block></struct></type> <name>DictThesaurus</name>;</typedef>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>newLexeme</name><parameter_list>(<parameter><decl><type><name>DictThesaurus</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>idsubst</name></decl></parameter>, <parameter><decl><type><name>uint16</name></type> <name>posinsubst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TheLexeme</name>  <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>nwrds</name></name> <operator>&gt;=</operator> <name><name>d</name><operator>-&gt;</operator><name>ntwrds</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>ntwrds</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>ntwrds</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>wrds</name></name> <operator>=</operator> <operator>(</operator><name>TheLexeme</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TheLexeme</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>d</name><operator>-&gt;</operator><name>ntwrds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>ntwrds</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>wrds</name></name> <operator>=</operator> <operator>(</operator><name>TheLexeme</name> <operator>*</operator><operator>)</operator> <call><name>repalloc</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>wrds</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TheLexeme</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>d</name><operator>-&gt;</operator><name>ntwrds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>wrds</name></name> <operator>+</operator> <name><name>d</name><operator>-&gt;</operator><name>nwrds</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>nwrds</name></name><operator>++</operator></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>lexeme</name></name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>e</name> <operator>-</operator> <name>b</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>lexeme</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>e</name> <operator>-</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>lexeme</name><index>[<expr><name>e</name> <operator>-</operator> <name>b</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>entries</name></name> <operator>=</operator> <operator>(</operator><name>LexemeInfo</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>LexemeInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>entries</name><operator>-&gt;</operator><name>nextentry</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>entries</name><operator>-&gt;</operator><name>idsubst</name></name> <operator>=</operator> <name>idsubst</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>entries</name><operator>-&gt;</operator><name>posinsubst</name></name> <operator>=</operator> <name>posinsubst</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>addWrd</name><parameter_list>(<parameter><decl><type><name>DictThesaurus</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>idsubst</name></decl></parameter>, <parameter><decl><type><name>uint16</name></type> <name>nwrd</name></decl></parameter>, <parameter><decl><type><name>uint16</name></type> <name>posinsubst</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>useasis</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>	<name>nres</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>	<name>ntres</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TheSubstitute</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>nwrd</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>nres</name> <operator>=</operator> <name>ntres</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>idsubst</name> <operator>&gt;=</operator> <name><name>d</name><operator>-&gt;</operator><name>nsubst</name></name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>nsubst</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>nsubst</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>subst</name></name> <operator>=</operator> <operator>(</operator><name>TheSubstitute</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TheSubstitute</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>d</name><operator>-&gt;</operator><name>nsubst</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>nsubst</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>subst</name></name> <operator>=</operator> <operator>(</operator><name>TheSubstitute</name> <operator>*</operator><operator>)</operator> <call><name>repalloc</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>subst</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TheSubstitute</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>d</name><operator>-&gt;</operator><name>nsubst</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>subst</name></name> <operator>+</operator> <name>idsubst</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>lastlexeme</name></name> <operator>=</operator> <name>posinsubst</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>nres</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>ntres</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>ntres</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>ntres</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>res</name></name> <operator>=</operator> <operator>(</operator><name>TSLexeme</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TSLexeme</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>ntres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>ntres</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>res</name></name> <operator>=</operator> <operator>(</operator><name>TSLexeme</name> <operator>*</operator><operator>)</operator> <call><name>repalloc</name><argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>res</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TSLexeme</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>ntres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>res</name><index>[<expr><name>nres</name></expr>]</index></name><operator>.</operator><name>lexeme</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>e</name> <operator>-</operator> <name>b</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>res</name><index>[<expr><name>nres</name></expr>]</index></name><operator>.</operator><name>lexeme</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>e</name> <operator>-</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>res</name><index>[<expr><name>nres</name></expr>]</index></name><operator>.</operator><name><name>lexeme</name><index>[<expr><name>e</name> <operator>-</operator> <name>b</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>res</name><index>[<expr><name>nres</name></expr>]</index></name><operator>.</operator><name>nvariant</name> <operator>=</operator> <name>nwrd</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>useasis</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>res</name><index>[<expr><name>nres</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <name>DT_USEASIS</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>res</name><index>[<expr><name>nres</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>res</name><index>[<expr><operator>++</operator><name>nres</name></expr>]</index></name><operator>.</operator><name>lexeme</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TR_WAITLEX</name></cpp:macro>	<cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TR_INLEX</name></cpp:macro>	<cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TR_WAITSUBS</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TR_INSUBS</name></cpp:macro>	<cpp:value>4</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>thesaurusRead</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>DictThesaurus</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>tsearch_readline_state</name></type> <name>trst</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>idsubst</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>useasis</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>filename</name> <operator>=</operator> <call><name>get_tsearch_config_filename</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"ths"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>tsearch_readline_begin</name><argument_list>(<argument><expr><operator>&amp;</operator><name>trst</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONFIG_FILE_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not open thesaurus file \"%s\": %m"</literal></expr></argument>,
						<argument><expr><name>filename</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>line</name> <operator>=</operator> <call><name>tsearch_readline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>trst</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>state</name> <init>= <expr><name>TR_WAITLEX</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>beginwrd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint32</name></type>		<name>posinsubst</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint32</name></type>		<name>nwrd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>

		<comment type="block">/* is it a comment? */</comment>
		<while>while <condition>(<expr><operator>*</operator><name>ptr</name> <operator>&amp;&amp;</operator> <call><name>t_isspace</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <call><name>pg_mblen</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

		<if_stmt><if>if <condition>(<expr><call><name>t_iseq</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">'#'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator>
			<call><name>t_iseq</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>t_iseq</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<while>while <condition>(<expr><operator>*</operator><name>ptr</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>TR_WAITLEX</name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><call><name>t_iseq</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name>posinsubst</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
								<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONFIG_FILE_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
								 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unexpected delimiter"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
					<expr_stmt><expr><name>state</name> <operator>=</operator> <name>TR_WAITSUBS</name></expr>;</expr_stmt>
				</block_content>}</block></if>
				<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>t_isspace</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>beginwrd</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>state</name> <operator>=</operator> <name>TR_INLEX</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>state</name> <operator>==</operator> <name>TR_INLEX</name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><call><name>t_iseq</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>newLexeme</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>beginwrd</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>idsubst</name></expr></argument>, <argument><expr><name>posinsubst</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>state</name> <operator>=</operator> <name>TR_WAITSUBS</name></expr>;</expr_stmt>
				</block_content>}</block></if>
				<if type="elseif">else if <condition>(<expr><call><name>t_isspace</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>newLexeme</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>beginwrd</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>idsubst</name></expr></argument>, <argument><expr><name>posinsubst</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>state</name> <operator>=</operator> <name>TR_WAITLEX</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>state</name> <operator>==</operator> <name>TR_WAITSUBS</name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><call><name>t_iseq</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>useasis</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>state</name> <operator>=</operator> <name>TR_INSUBS</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>beginwrd</name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <call><name>pg_mblen</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if>
				<if type="elseif">else if <condition>(<expr><call><name>t_iseq</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>useasis</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>state</name> <operator>=</operator> <name>TR_INSUBS</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>beginwrd</name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <call><name>pg_mblen</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if>
				<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>t_isspace</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>useasis</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>beginwrd</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>state</name> <operator>=</operator> <name>TR_INSUBS</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>state</name> <operator>==</operator> <name>TR_INSUBS</name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><call><name>t_isspace</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>beginwrd</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
								<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONFIG_FILE_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
								 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unexpected end of line or lexeme"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
					<expr_stmt><expr><call><name>addWrd</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>beginwrd</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>idsubst</name></expr></argument>, <argument><expr><name>nwrd</name><operator>++</operator></expr></argument>, <argument><expr><name>posinsubst</name></expr></argument>, <argument><expr><name>useasis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>state</name> <operator>=</operator> <name>TR_WAITSUBS</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized thesaurus state: %d"</literal></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

			<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <call><name>pg_mblen</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>

		<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>TR_INSUBS</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>beginwrd</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONFIG_FILE_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unexpected end of line or lexeme"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>addWrd</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>beginwrd</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>idsubst</name></expr></argument>, <argument><expr><name>nwrd</name><operator>++</operator></expr></argument>, <argument><expr><name>posinsubst</name></expr></argument>, <argument><expr><name>useasis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>idsubst</name><operator>++</operator></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>nwrd</name> <operator>&amp;&amp;</operator> <name>posinsubst</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONFIG_FILE_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unexpected end of line"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/*
		 * Note: currently, tsearch_readline can't return lines exceeding 4KB,
		 * so overflow of the word counts is impossible.  But that may not
		 * always be true, so let's check.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>nwrd</name> <operator>!=</operator> <operator>(</operator><name>uint16</name><operator>)</operator> <name>nwrd</name> <operator>||</operator> <name>posinsubst</name> <operator>!=</operator> <operator>(</operator><name>uint16</name><operator>)</operator> <name>posinsubst</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONFIG_FILE_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"too many lexemes in thesaurus entry"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>nsubst</name></name> <operator>=</operator> <name>idsubst</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>tsearch_readline_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name>trst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>TheLexeme</name> <modifier>*</modifier></type>
<name>addCompiledLexeme</name><parameter_list>(<parameter><decl><type><name>TheLexeme</name> <modifier>*</modifier></type><name>newwrds</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nnw</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>tnm</name></decl></parameter>, <parameter><decl><type><name>TSLexeme</name> <modifier>*</modifier></type><name>lexeme</name></decl></parameter>, <parameter><decl><type><name>LexemeInfo</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint16</name></type> <name>tnvariant</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>nnw</name> <operator>&gt;=</operator> <operator>*</operator><name>tnm</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>tnm</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>newwrds</name> <operator>=</operator> <operator>(</operator><name>TheLexeme</name> <operator>*</operator><operator>)</operator> <call><name>repalloc</name><argument_list>(<argument><expr><name>newwrds</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TheLexeme</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>*</operator><name>tnm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>newwrds</name><index>[<expr><operator>*</operator><name>nnw</name></expr>]</index></name><operator>.</operator><name>entries</name> <operator>=</operator> <operator>(</operator><name>LexemeInfo</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>LexemeInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>lexeme</name> <operator>&amp;&amp;</operator> <name><name>lexeme</name><operator>-&gt;</operator><name>lexeme</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>newwrds</name><index>[<expr><operator>*</operator><name>nnw</name></expr>]</index></name><operator>.</operator><name>lexeme</name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name><name>lexeme</name><operator>-&gt;</operator><name>lexeme</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>newwrds</name><index>[<expr><operator>*</operator><name>nnw</name></expr>]</index></name><operator>.</operator><name><name>entries</name><operator>-&gt;</operator><name>tnvariant</name></name> <operator>=</operator> <name>tnvariant</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name><name>newwrds</name><index>[<expr><operator>*</operator><name>nnw</name></expr>]</index></name><operator>.</operator><name>lexeme</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>newwrds</name><index>[<expr><operator>*</operator><name>nnw</name></expr>]</index></name><operator>.</operator><name><name>entries</name><operator>-&gt;</operator><name>tnvariant</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>newwrds</name><index>[<expr><operator>*</operator><name>nnw</name></expr>]</index></name><operator>.</operator><name><name>entries</name><operator>-&gt;</operator><name>idsubst</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>idsubst</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>newwrds</name><index>[<expr><operator>*</operator><name>nnw</name></expr>]</index></name><operator>.</operator><name><name>entries</name><operator>-&gt;</operator><name>posinsubst</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>posinsubst</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>newwrds</name><index>[<expr><operator>*</operator><name>nnw</name></expr>]</index></name><operator>.</operator><name><name>entries</name><operator>-&gt;</operator><name>nextentry</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><operator>(</operator><operator>*</operator><name>nnw</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
	<return>return <expr><name>newwrds</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cmpLexemeInfo</name><parameter_list>(<parameter><decl><type><name>LexemeInfo</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>LexemeInfo</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>b</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>idsubst</name></name> <operator>==</operator> <name><name>b</name><operator>-&gt;</operator><name>idsubst</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>posinsubst</name></name> <operator>==</operator> <name><name>b</name><operator>-&gt;</operator><name>posinsubst</name></name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>tnvariant</name></name> <operator>==</operator> <name><name>b</name><operator>-&gt;</operator><name>tnvariant</name></name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

			<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>tnvariant</name></name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>tnvariant</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>posinsubst</name></name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>posinsubst</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>idsubst</name></name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>idsubst</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cmpLexeme</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TheLexeme</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TheLexeme</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>lexeme</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>lexeme</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>lexeme</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>lexeme</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>lexeme</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cmpLexemeQ</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>cmpLexeme</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>TheLexeme</name> <operator>*</operator><operator>)</operator> <name>a</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>TheLexeme</name> <operator>*</operator><operator>)</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cmpTheLexeme</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>TheLexeme</name> <modifier>*</modifier></type><name>la</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>TheLexeme</name> <operator>*</operator><operator>)</operator> <name>a</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>TheLexeme</name> <modifier>*</modifier></type><name>lb</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>TheLexeme</name> <operator>*</operator><operator>)</operator> <name>b</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>cmpLexeme</name><argument_list>(<argument><expr><name>la</name></expr></argument>, <argument><expr><name>lb</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><operator>-</operator><call><name>cmpLexemeInfo</name><argument_list>(<argument><expr><name><name>la</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>, <argument><expr><name><name>lb</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>compileTheLexeme</name><parameter_list>(<parameter><decl><type><name>DictThesaurus</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>,
				<decl><type ref="prev"/><name>nnw</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
				<decl><type ref="prev"/><name>tnm</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TheLexeme</name>  <modifier>*</modifier></type><name>newwrds</name> <init>= <expr><operator>(</operator><name>TheLexeme</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TheLexeme</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>tnm</name></expr></argument>)</argument_list></call></expr></init></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>ptrwrds</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>d</name><operator>-&gt;</operator><name>nwrds</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>TSLexeme</name>   <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>wrds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lexeme</name></expr></argument>, <argument><expr><literal type="string">"?"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>	<comment type="block">/* Is stop word marker? */</comment>
			<expr_stmt><expr><name>newwrds</name> <operator>=</operator> <call><name>addCompiledLexeme</name><argument_list>(<argument><expr><name>newwrds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nnw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tnm</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>wrds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>entries</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>TSLexeme</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><call><name>FunctionCall4</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>d</name><operator>-&gt;</operator><name>subdict</name><operator>-&gt;</operator><name>lexize</name></name><operator>)</operator></expr></argument>,
															 <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>subdict</name><operator>-&gt;</operator><name>dictData</name></name></expr></argument>)</argument_list></call></expr></argument>,
															 <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>wrds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lexeme</name></expr></argument>)</argument_list></call></expr></argument>,
															 <argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>wrds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lexeme</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
															 <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONFIG_FILE_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"thesaurus sample word \"%s\" isn't recognized by subdictionary (rule %d)"</literal></expr></argument>,
								<argument><expr><name><name>d</name><operator>-&gt;</operator><name>wrds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lexeme</name></expr></argument>,
								<argument><expr><name><name>d</name><operator>-&gt;</operator><name>wrds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>entries</name><operator>-&gt;</operator><name>idsubst</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ptr</name><operator>-&gt;</operator><name>lexeme</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONFIG_FILE_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"thesaurus sample word \"%s\" is a stop word (rule %d)"</literal></expr></argument>,
								<argument><expr><name><name>d</name><operator>-&gt;</operator><name>wrds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lexeme</name></expr></argument>,
								<argument><expr><name><name>d</name><operator>-&gt;</operator><name>wrds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>entries</name><operator>-&gt;</operator><name>idsubst</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"Use \"?\" to represent a stop word within a sample phrase."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else
			<block>{<block_content>
				<while>while <condition>(<expr><name><name>ptr</name><operator>-&gt;</operator><name>lexeme</name></name></expr>)</condition>
				<block>{<block_content>
					<decl_stmt><decl><type><name>TSLexeme</name>   <modifier>*</modifier></type><name>remptr</name> <init>= <expr><name>ptr</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>int</name></type>			<name>tnvar</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>int</name></type>			<name>curvar</name> <init>= <expr><name><name>ptr</name><operator>-&gt;</operator><name>nvariant</name></name></expr></init></decl>;</decl_stmt>

					<comment type="block">/* compute n words in one variant */</comment>
					<while>while <condition>(<expr><name><name>remptr</name><operator>-&gt;</operator><name>lexeme</name></name></expr>)</condition>
					<block>{<block_content>
						<if_stmt><if>if <condition>(<expr><name><name>remptr</name><operator>-&gt;</operator><name>nvariant</name></name> <operator>!=</operator> <operator>(</operator><name>remptr</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>-&gt;</operator><name>nvariant</name></expr>)</condition><block type="pseudo"><block_content>
							<break>break;</break></block_content></block></if></if_stmt>
						<expr_stmt><expr><name>tnvar</name><operator>++</operator></expr>;</expr_stmt>
						<expr_stmt><expr><name>remptr</name><operator>++</operator></expr>;</expr_stmt>
					</block_content>}</block></while>

					<expr_stmt><expr><name>remptr</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
					<while>while <condition>(<expr><name><name>remptr</name><operator>-&gt;</operator><name>lexeme</name></name> <operator>&amp;&amp;</operator> <name><name>remptr</name><operator>-&gt;</operator><name>nvariant</name></name> <operator>==</operator> <name>curvar</name></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><name>newwrds</name> <operator>=</operator> <call><name>addCompiledLexeme</name><argument_list>(<argument><expr><name>newwrds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nnw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tnm</name></expr></argument>, <argument><expr><name>remptr</name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>wrds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>entries</name></expr></argument>, <argument><expr><name>tnvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>remptr</name><operator>++</operator></expr>;</expr_stmt>
					</block_content>}</block></while>

					<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>remptr</name></expr>;</expr_stmt>
				</block_content>}</block></while>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>wrds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lexeme</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>wrds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>wrds</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>wrds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>wrds</name></name> <operator>=</operator> <name>newwrds</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>nwrds</name></name> <operator>=</operator> <name>nnw</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>ntwrds</name></name> <operator>=</operator> <name>tnm</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>nwrds</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>wrds</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>nwrds</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TheLexeme</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>cmpTheLexeme</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* uniq */</comment>
		<expr_stmt><expr><name>newwrds</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>wrds</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ptrwrds</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>wrds</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<while>while <condition>(<expr><name>ptrwrds</name> <operator>-</operator> <name><name>d</name><operator>-&gt;</operator><name>wrds</name></name> <operator>&lt;</operator> <name><name>d</name><operator>-&gt;</operator><name>nwrds</name></name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>cmpLexeme</name><argument_list>(<argument><expr><name>ptrwrds</name></expr></argument>, <argument><expr><name>newwrds</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><call><name>cmpLexemeInfo</name><argument_list>(<argument><expr><name><name>ptrwrds</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>, <argument><expr><name><name>newwrds</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name><name>ptrwrds</name><operator>-&gt;</operator><name>entries</name><operator>-&gt;</operator><name>nextentry</name></name> <operator>=</operator> <name><name>newwrds</name><operator>-&gt;</operator><name>entries</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>newwrds</name><operator>-&gt;</operator><name>entries</name></name> <operator>=</operator> <name><name>ptrwrds</name><operator>-&gt;</operator><name>entries</name></name></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>ptrwrds</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

				<if_stmt><if>if <condition>(<expr><name><name>ptrwrds</name><operator>-&gt;</operator><name>lexeme</name></name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>ptrwrds</name><operator>-&gt;</operator><name>lexeme</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><name>newwrds</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><operator>*</operator><name>newwrds</name> <operator>=</operator> <operator>*</operator><name>ptrwrds</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>

			<expr_stmt><expr><name>ptrwrds</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></while>

		<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>nwrds</name></name> <operator>=</operator> <name>newwrds</name> <operator>-</operator> <name><name>d</name><operator>-&gt;</operator><name>wrds</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>wrds</name></name> <operator>=</operator> <operator>(</operator><name>TheLexeme</name> <operator>*</operator><operator>)</operator> <call><name>repalloc</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>wrds</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TheLexeme</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>d</name><operator>-&gt;</operator><name>nwrds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>compileTheSubstitute</name><parameter_list>(<parameter><decl><type><name>DictThesaurus</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>d</name><operator>-&gt;</operator><name>nsubst</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>TSLexeme</name>   <modifier>*</modifier></type><name>rem</name> <init>= <expr><name><name>d</name><operator>-&gt;</operator><name>subst</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>res</name></expr></init></decl>,
				   <decl><type ref="prev"><modifier>*</modifier></type><name>outptr</name></decl>,
				   <decl><type ref="prev"><modifier>*</modifier></type><name>inptr</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>n</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>outptr</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>subst</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>res</name> <operator>=</operator> <operator>(</operator><name>TSLexeme</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TSLexeme</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>outptr</name><operator>-&gt;</operator><name>lexeme</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>inptr</name> <operator>=</operator> <name>rem</name></expr>;</expr_stmt>

		<while>while <condition>(<expr><name>inptr</name> <operator>&amp;&amp;</operator> <name><name>inptr</name><operator>-&gt;</operator><name>lexeme</name></name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>TSLexeme</name>   <modifier>*</modifier></type><name>lexized</name></decl>,
						<decl><type ref="prev"/><name><name>tmplex</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>inptr</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DT_USEASIS</name></expr>)</condition>
			<block>{<block_content>					<comment type="block">/* do not lexize */</comment>
				<expr_stmt><expr><name><name>tmplex</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>inptr</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>tmplex</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>tmplex</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>lexeme</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>lexized</name> <operator>=</operator> <name>tmplex</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><name>lexized</name> <operator>=</operator> <operator>(</operator><name>TSLexeme</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><call><name>FunctionCall4</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>d</name><operator>-&gt;</operator><name>subdict</name><operator>-&gt;</operator><name>lexize</name></name><operator>)</operator></expr></argument>,
																	 <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>subdict</name><operator>-&gt;</operator><name>dictData</name></name></expr></argument>)</argument_list></call></expr></argument>,
																	 <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name><name>inptr</name><operator>-&gt;</operator><name>lexeme</name></name></expr></argument>)</argument_list></call></expr></argument>,
																	 <argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>inptr</name><operator>-&gt;</operator><name>lexeme</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
																	 <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>lexized</name> <operator>&amp;&amp;</operator> <name><name>lexized</name><operator>-&gt;</operator><name>lexeme</name></name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>int</name></type>			<name>toset</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>lexized</name><operator>-&gt;</operator><name>lexeme</name></name> <operator>&amp;&amp;</operator> <name>outptr</name> <operator>!=</operator> <name><name>d</name><operator>-&gt;</operator><name>subst</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>res</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>outptr</name> <operator>-</operator> <name><name>d</name><operator>-&gt;</operator><name>subst</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>res</name><operator>)</operator></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

				<while>while <condition>(<expr><name><name>lexized</name><operator>-&gt;</operator><name>lexeme</name></name></expr>)</condition>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name>outptr</name> <operator>-</operator> <name><name>d</name><operator>-&gt;</operator><name>subst</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>res</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>n</name></expr>)</condition>
					<block>{<block_content>
						<decl_stmt><decl><type><name>int</name></type>			<name>diff</name> <init>= <expr><name>outptr</name> <operator>-</operator> <name><name>d</name><operator>-&gt;</operator><name>subst</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>res</name></expr></init></decl>;</decl_stmt>

						<expr_stmt><expr><name>n</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>subst</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>res</name> <operator>=</operator> <operator>(</operator><name>TSLexeme</name> <operator>*</operator><operator>)</operator> <call><name>repalloc</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>subst</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>res</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TSLexeme</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>outptr</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>subst</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>res</name> <operator>+</operator> <name>diff</name></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>

					<expr_stmt><expr><operator>*</operator><name>outptr</name> <operator>=</operator> <operator>*</operator><name>lexized</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>outptr</name><operator>-&gt;</operator><name>lexeme</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name><name>lexized</name><operator>-&gt;</operator><name>lexeme</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name>outptr</name><operator>++</operator></expr>;</expr_stmt>
					<expr_stmt><expr><name>lexized</name><operator>++</operator></expr>;</expr_stmt>
				</block_content>}</block></while>

				<if_stmt><if>if <condition>(<expr><name>toset</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>subst</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>res</name><index>[<expr><name>toset</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>|=</operator> <name>TSL_ADDPOS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>lexized</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONFIG_FILE_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"thesaurus substitute word \"%s\" is a stop word (rule %d)"</literal></expr></argument>,
								<argument><expr><name><name>inptr</name><operator>-&gt;</operator><name>lexeme</name></name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONFIG_FILE_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"thesaurus substitute word \"%s\" isn't recognized by subdictionary (rule %d)"</literal></expr></argument>,
								<argument><expr><name><name>inptr</name><operator>-&gt;</operator><name>lexeme</name></name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>inptr</name><operator>-&gt;</operator><name>lexeme</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>inptr</name><operator>-&gt;</operator><name>lexeme</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>inptr</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></while>

		<if_stmt><if>if <condition>(<expr><name>outptr</name> <operator>==</operator> <name><name>d</name><operator>-&gt;</operator><name>subst</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>res</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONFIG_FILE_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"thesaurus substitute phrase is empty (rule %d)"</literal></expr></argument>,
							<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>subst</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>reslen</name> <operator>=</operator> <name>outptr</name> <operator>-</operator> <name><name>d</name><operator>-&gt;</operator><name>subst</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>res</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>rem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>thesaurus_init</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>dictoptions</name> <init>= <expr><operator>(</operator><name>List</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DictThesaurus</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>subdictname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>fileloaded</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><name>DictThesaurus</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DictThesaurus</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<macro><name>foreach</name><argument_list>(<argument>l</argument>, <argument>dictoptions</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>DefElem</name>    <modifier>*</modifier></type><name>defel</name> <init>= <expr><operator>(</operator><name>DefElem</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>defel</name><operator>-&gt;</operator><name>defname</name></name></expr></argument>, <argument><expr><literal type="string">"dictfile"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>fileloaded</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"multiple DictFile parameters"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>thesaurusRead</name><argument_list>(<argument><expr><call><name>defGetString</name><argument_list>(<argument><expr><name>defel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>fileloaded</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>defel</name><operator>-&gt;</operator><name>defname</name></name></expr></argument>, <argument><expr><literal type="string">"dictionary"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>subdictname</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"multiple Dictionary parameters"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>subdictname</name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><call><name>defGetString</name><argument_list>(<argument><expr><name>defel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unrecognized Thesaurus parameter: \"%s\""</literal></expr></argument>,
							<argument><expr><name><name>defel</name><operator>-&gt;</operator><name>defname</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fileloaded</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"missing DictFile parameter"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>subdictname</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"missing Dictionary parameter"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>subdictOid</name></name> <operator>=</operator> <call><name>get_ts_dict_oid</name><argument_list>(<argument><expr><call><name>stringToQualifiedNameList</name><argument_list>(<argument><expr><name>subdictname</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>subdict</name></name> <operator>=</operator> <call><name>lookup_ts_dictionary_cache</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>subdictOid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>compileTheLexeme</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>compileTheSubstitute</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>LexemeInfo</name> <modifier>*</modifier></type>
<name>findTheLexeme</name><parameter_list>(<parameter><decl><type><name>DictThesaurus</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>lexeme</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TheLexeme</name></type>	<name>key</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>nwrds</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>lexeme</name></name> <operator>=</operator> <name>lexeme</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>entries</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>bsearch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>wrds</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>nwrds</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TheLexeme</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>cmpLexemeQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name><name>res</name><operator>-&gt;</operator><name>entries</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>matchIdSubst</name><parameter_list>(<parameter><decl><type><name>LexemeInfo</name> <modifier>*</modifier></type><name>stored</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>idsubst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>res</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>stored</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

		<for>for <control>(<init>;</init> <condition><expr><name>stored</name></expr>;</condition> <incr><expr><name>stored</name> <operator>=</operator> <name><name>stored</name><operator>-&gt;</operator><name>nextvariant</name></name></expr></incr>)</control><block type="pseudo"><block_content>
			<if_stmt><if>if <condition>(<expr><name><name>stored</name><operator>-&gt;</operator><name>idsubst</name></name> <operator>==</operator> <name>idsubst</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>res</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt></block_content></block></for>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>LexemeInfo</name> <modifier>*</modifier></type>
<name>findVariant</name><parameter_list>(<parameter><decl><type><name>LexemeInfo</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>LexemeInfo</name> <modifier>*</modifier></type><name>stored</name></decl></parameter>, <parameter><decl><type><name>uint16</name></type> <name>curpos</name></decl></parameter>, <parameter><decl><type><name>LexemeInfo</name> <modifier>*</modifier><modifier>*</modifier></type><name>newin</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>newn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>LexemeInfo</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>newin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>newn</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<while>while <condition>(<expr><name><name>newin</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>newin</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>idsubst</name> <operator>&lt;</operator> <name><name>ptr</name><operator>-&gt;</operator><name>idsubst</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>newin</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>newin</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>nextentry</name></expr>;</expr_stmt></block_content></block></while>

			<if_stmt><if>if <condition>(<expr><name><name>newin</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>in</name></expr>;</return></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>newin</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>idsubst</name> <operator>&gt;</operator> <name><name>ptr</name><operator>-&gt;</operator><name>idsubst</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>newin</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>

			<while>while <condition>(<expr><name><name>newin</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>idsubst</name> <operator>==</operator> <name><name>ptr</name><operator>-&gt;</operator><name>idsubst</name></name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>newin</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>posinsubst</name> <operator>==</operator> <name>curpos</name> <operator>&amp;&amp;</operator> <name><name>newin</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>tnvariant</name> <operator>==</operator> <name>newn</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>newin</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>

				<expr_stmt><expr><name><name>newin</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>newin</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>nextentry</name></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>newin</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><name>in</name></expr>;</return></block_content></block></if></if_stmt>
			</block_content>}</block></while>

			<if_stmt><if>if <condition>(<expr><name><name>newin</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>idsubst</name> <operator>!=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>idsubst</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>newin</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>

		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>newn</name> <operator>&amp;&amp;</operator> <call><name>matchIdSubst</name><argument_list>(<argument><expr><name>stored</name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>idsubst</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>in</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><call><name>matchIdSubst</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>idsubst</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
		<block>{<block_content>						<comment type="block">/* found */</comment>

			<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>nextvariant</name></name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>in</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* step forward */</comment>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>newn</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>newin</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>newin</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>nextentry</name></expr>;</expr_stmt></block_content></block></for>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>TSLexeme</name> <modifier>*</modifier></type>
<name>copyTSLexeme</name><parameter_list>(<parameter><decl><type><name>TheSubstitute</name> <modifier>*</modifier></type><name>ts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TSLexeme</name>   <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint16</name></type>		<name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>TSLexeme</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TSLexeme</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>ts</name><operator>-&gt;</operator><name>reslen</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ts</name><operator>-&gt;</operator><name>reslen</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ts</name><operator>-&gt;</operator><name>res</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lexeme</name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name><name>ts</name><operator>-&gt;</operator><name>res</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lexeme</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name><name>res</name><index>[<expr><name><name>ts</name><operator>-&gt;</operator><name>reslen</name></name></expr>]</index></name><operator>.</operator><name>lexeme</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>TSLexeme</name> <modifier>*</modifier></type>
<name>checkMatch</name><parameter_list>(<parameter><decl><type><name>DictThesaurus</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>LexemeInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>uint16</name></type> <name>curpos</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>moreres</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><operator>*</operator><name>moreres</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>info</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>idsubst</name></name> <operator>&lt;</operator> <name><name>d</name><operator>-&gt;</operator><name>nsubst</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>nextvariant</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>moreres</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>subst</name><index>[<expr><name><name>info</name><operator>-&gt;</operator><name>idsubst</name></name></expr>]</index></name><operator>.</operator><name>lastlexeme</name> <operator>==</operator> <name>curpos</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>copyTSLexeme</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>subst</name></name> <operator>+</operator> <name><name>info</name><operator>-&gt;</operator><name>idsubst</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>info</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>nextvariant</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>thesaurus_lexize</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DictThesaurus</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>(</operator><name>DictThesaurus</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DictSubState</name> <modifier>*</modifier></type><name>dstate</name> <init>= <expr><operator>(</operator><name>DictSubState</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TSLexeme</name>   <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LexemeInfo</name> <modifier>*</modifier></type><name>stored</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint16</name></type>		<name>curpos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>moreres</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>PG_NARGS</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">4</literal> <operator>||</operator> <name>dstate</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"forbidden call of thesaurus or nested call"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>dstate</name><operator>-&gt;</operator><name>isend</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>stored</name> <operator>=</operator> <operator>(</operator><name>LexemeInfo</name> <operator>*</operator><operator>)</operator> <name><name>dstate</name><operator>-&gt;</operator><name>private_state</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>stored</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>curpos</name> <operator>=</operator> <name><name>stored</name><operator>-&gt;</operator><name>posinsubst</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>d</name><operator>-&gt;</operator><name>subdict</name><operator>-&gt;</operator><name>isvalid</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>subdict</name></name> <operator>=</operator> <call><name>lookup_ts_dictionary_cache</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>subdictOid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>TSLexeme</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><call><name>FunctionCall4</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>d</name><operator>-&gt;</operator><name>subdict</name><operator>-&gt;</operator><name>lexize</name></name><operator>)</operator></expr></argument>,
													 <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>subdict</name><operator>-&gt;</operator><name>dictData</name></name></expr></argument>)</argument_list></call></expr></argument>,
													 <argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
													 <argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,
													 <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&amp;&amp;</operator> <name><name>res</name><operator>-&gt;</operator><name>lexeme</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>TSLexeme</name>   <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>res</name></expr></init></decl>,
				   <decl><type ref="prev"><modifier>*</modifier></type><name>basevar</name></decl>;</decl_stmt>

		<while>while <condition>(<expr><name><name>ptr</name><operator>-&gt;</operator><name>lexeme</name></name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>uint16</name></type>		<name>nv</name> <init>= <expr><name><name>ptr</name><operator>-&gt;</operator><name>nvariant</name></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>uint16</name></type>		<name>i</name></decl>,
						<decl><type ref="prev"/><name>nlex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>LexemeInfo</name> <modifier>*</modifier><modifier>*</modifier></type><name>infos</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>basevar</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
			<while>while <condition>(<expr><name><name>ptr</name><operator>-&gt;</operator><name>lexeme</name></name> <operator>&amp;&amp;</operator> <name>nv</name> <operator>==</operator> <name><name>ptr</name><operator>-&gt;</operator><name>nvariant</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>nlex</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></while>

			<expr_stmt><expr><name>infos</name> <operator>=</operator> <operator>(</operator><name>LexemeInfo</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>LexemeInfo</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nlex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nlex</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
				<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>infos</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>findTheLexeme</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>basevar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lexeme</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
					<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

			<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>nlex</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* no chance to find */</comment>
				<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>infos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>findVariant</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>stored</name></expr></argument>, <argument><expr><name>curpos</name></expr></argument>, <argument><expr><name>infos</name></expr></argument>, <argument><expr><name>nlex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>res</name></expr>)</condition>
	<block>{<block_content>							<comment type="block">/* stop-word */</comment>
		<decl_stmt><decl><type><name>LexemeInfo</name> <modifier>*</modifier></type><name>infos</name> <init>= <expr><call><name>findTheLexeme</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>findVariant</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>stored</name></expr></argument>, <argument><expr><name>curpos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>infos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>info</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>			<comment type="block">/* word isn't recognized */</comment>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>dstate</name><operator>-&gt;</operator><name>private_state</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>info</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>info</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>dstate</name><operator>-&gt;</operator><name>getnext</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>checkMatch</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>curpos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>moreres</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>dstate</name><operator>-&gt;</operator><name>getnext</name></name> <operator>=</operator> <name>moreres</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>dstate</name><operator>-&gt;</operator><name>getnext</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
