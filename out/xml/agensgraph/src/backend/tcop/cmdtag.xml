<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/backend/tcop/cmdtag.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * cmdtag.c
 *	  Data and routines for commandtag names and enumeration.
 *
 * Portions Copyright (c) 1996-2020, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * IDENTIFICATION
 *	  src/backend/tcop/cmdtag.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcop/cmdtag.h"</cpp:file></cpp:include>


<typedef>typedef <type><struct>struct <name>CommandTagBehavior</name>
<block>{
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type>	<name>event_trigger_ok</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type>	<name>table_rewrite_ok</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type>	<name>display_rowcount</name></decl>;</decl_stmt>
}</block></struct></type> <name>CommandTagBehavior</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PG_CMDTAG</name><parameter_list>(<parameter><type><name>tag</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>evtrgok</name></type></parameter>, <parameter><type><name>rwrok</name></type></parameter>, <parameter><type><name>rowcnt</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>{ name, evtrgok, rwrok, rowcnt },</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>CommandTagBehavior</name></type> <name><name>tag_behavior</name><index>[<expr><name>COMMAND_TAG_NEXTTAG</name></expr>]</index></name> <init>= <expr><block>{
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcop/cmdtaglist.h"</cpp:file></cpp:include>
}</block></expr></init></decl>;</decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PG_CMDTAG</name></cpp:undef>

<function><type><name>void</name></type>
<name>InitializeQueryCompletion</name><parameter_list>(<parameter><decl><type><name>QueryCompletion</name> <modifier>*</modifier></type><name>qc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>qc</name><operator>-&gt;</operator><name>commandTag</name></name> <operator>=</operator> <name>CMDTAG_UNKNOWN</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>qc</name><operator>-&gt;</operator><name>nprocessed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>GetCommandTagName</name><parameter_list>(<parameter><decl><type><name>CommandTag</name></type> <name>commandTag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>tag_behavior</name><index>[<expr><name>commandTag</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>command_tag_display_rowcount</name><parameter_list>(<parameter><decl><type><name>CommandTag</name></type> <name>commandTag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>tag_behavior</name><index>[<expr><name>commandTag</name></expr>]</index></name><operator>.</operator><name>display_rowcount</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>command_tag_event_trigger_ok</name><parameter_list>(<parameter><decl><type><name>CommandTag</name></type> <name>commandTag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>tag_behavior</name><index>[<expr><name>commandTag</name></expr>]</index></name><operator>.</operator><name>event_trigger_ok</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>command_tag_table_rewrite_ok</name><parameter_list>(<parameter><decl><type><name>CommandTag</name></type> <name>commandTag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>tag_behavior</name><index>[<expr><name>commandTag</name></expr>]</index></name><operator>.</operator><name>table_rewrite_ok</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Search CommandTag by name
 *
 * Returns CommandTag, or CMDTAG_UNKNOWN if not recognized
 */</comment>
<function><type><name>CommandTag</name></type>
<name>GetCommandTagEnum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>commandname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>CommandTagBehavior</name> <modifier>*</modifier></type><name>base</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>last</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>position</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>result</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>commandname</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>commandname</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>CMDTAG_UNKNOWN</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>base</name> <operator>=</operator> <name>tag_behavior</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>last</name> <operator>=</operator> <name>tag_behavior</name> <operator>+</operator> <call><name>lengthof</name><argument_list>(<argument><expr><name>tag_behavior</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>last</name> <operator>&gt;=</operator> <name>base</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>position</name> <operator>=</operator> <name>base</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>last</name> <operator>-</operator> <name>base</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name>commandname</name></expr></argument>, <argument><expr><name><name>position</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><name>CommandTag</name><operator>)</operator> <operator>(</operator><name>position</name> <operator>-</operator> <name>tag_behavior</name><operator>)</operator></expr>;</return></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>result</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>last</name> <operator>=</operator> <name>position</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>base</name> <operator>=</operator> <name>position</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></while>
	<return>return <expr><name>CMDTAG_UNKNOWN</name></expr>;</return>
</block_content>}</block></function>
</unit>
