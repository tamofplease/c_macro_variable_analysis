<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/backend/tcop/dest.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * dest.c
 *	  support for communication destinations
 *
 *
 * Portions Copyright (c) 1996-2020, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * IDENTIFICATION
 *	  src/backend/tcop/dest.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<comment type="block">/*
 *	 INTERFACE ROUTINES
 *		BeginCommand - initialize the destination at start of command
 *		CreateDestReceiver - create tuple receiver object for destination
 *		EndCommand - clean up the destination at end of command
 *		NullCommand - tell dest that an empty query string was recognized
 *		ReadyForQuery - tell dest that we are ready for a new query
 *
 *	 NOTES
 *		These routines do the appropriate work before and after
 *		tuples are returned by a query to keep the backend and the
 *		"destination" portals synchronized.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/printsimple.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/printtup.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xact.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/copy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/createas.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/matview.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/functions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/tqueue.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/tstoreReceiver.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq/libpq.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq/pqformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/portal.h"</cpp:file></cpp:include>


<comment type="block">/* ----------------
 *		dummy DestReceiver functions
 * ----------------
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>donothingReceive</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>, <parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>donothingStartup</name><parameter_list>(<parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>operation</name></decl></parameter>, <parameter><decl><type><name>TupleDesc</name></type> <name>typeinfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>donothingCleanup</name><parameter_list>(<parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* this is used for both shutdown and destroy methods */</comment>
</block_content>}</block></function>

<comment type="block">/* ----------------
 *		static DestReceiver structs for dest types needing no local state
 * ----------------
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>DestReceiver</name></type> <name>donothingDR</name> <init>= <expr><block>{
	<expr><name>donothingReceive</name></expr>, <expr><name>donothingStartup</name></expr>, <expr><name>donothingCleanup</name></expr>, <expr><name>donothingCleanup</name></expr>,
	<expr><name>DestNone</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>DestReceiver</name></type> <name>debugtupDR</name> <init>= <expr><block>{
	<expr><name>debugtup</name></expr>, <expr><name>debugStartup</name></expr>, <expr><name>donothingCleanup</name></expr>, <expr><name>donothingCleanup</name></expr>,
	<expr><name>DestDebug</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>DestReceiver</name></type> <name>printsimpleDR</name> <init>= <expr><block>{
	<expr><name>printsimple</name></expr>, <expr><name>printsimple_startup</name></expr>, <expr><name>donothingCleanup</name></expr>, <expr><name>donothingCleanup</name></expr>,
	<expr><name>DestRemoteSimple</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>DestReceiver</name></type> <name>spi_printtupDR</name> <init>= <expr><block>{
	<expr><name>spi_printtup</name></expr>, <expr><name>spi_dest_startup</name></expr>, <expr><name>donothingCleanup</name></expr>, <expr><name>donothingCleanup</name></expr>,
	<expr><name>DestSPI</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Globally available receiver for DestNone.
 *
 * It's ok to cast the constness away as any modification of the none receiver
 * would be a bug (which gets easier to catch this way).
 */</comment>
<decl_stmt><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>None_Receiver</name> <init>= <expr><operator>(</operator><name>DestReceiver</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>donothingDR</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* ----------------
 *		BeginCommand - initialize the destination at start of command
 * ----------------
 */</comment>
<function><type><name>void</name></type>
<name>BeginCommand</name><parameter_list>(<parameter><decl><type><name>CommandTag</name></type> <name>commandTag</name></decl></parameter>, <parameter><decl><type><name>CommandDest</name></type> <name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Nothing to do at present */</comment>
</block_content>}</block></function>

<comment type="block">/* ----------------
 *		CreateDestReceiver - return appropriate receiver function set for dest
 * ----------------
 */</comment>
<function><type><name>DestReceiver</name> <modifier>*</modifier></type>
<name>CreateDestReceiver</name><parameter_list>(<parameter><decl><type><name>CommandDest</name></type> <name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * It's ok to cast the constness away as any modification of the none
	 * receiver would be a bug (which gets easier to catch this way).
	 */</comment>

	<switch>switch <condition>(<expr><name>dest</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>DestRemote</name></expr>:</case>
		<case>case <expr><name>DestRemoteExecute</name></expr>:</case>
			<return>return <expr><call><name>printtup_create_DR</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</return>

		<case>case <expr><name>DestRemoteSimple</name></expr>:</case>
			<return>return <expr><call><name>unconstify</name><argument_list>(<argument><expr><name>DestReceiver</name> <operator>*</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>printsimpleDR</name></expr></argument>)</argument_list></call></expr>;</return>

		<case>case <expr><name>DestNone</name></expr>:</case>
			<return>return <expr><call><name>unconstify</name><argument_list>(<argument><expr><name>DestReceiver</name> <operator>*</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>donothingDR</name></expr></argument>)</argument_list></call></expr>;</return>

		<case>case <expr><name>DestDebug</name></expr>:</case>
			<return>return <expr><call><name>unconstify</name><argument_list>(<argument><expr><name>DestReceiver</name> <operator>*</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>debugtupDR</name></expr></argument>)</argument_list></call></expr>;</return>

		<case>case <expr><name>DestSPI</name></expr>:</case>
			<return>return <expr><call><name>unconstify</name><argument_list>(<argument><expr><name>DestReceiver</name> <operator>*</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>spi_printtupDR</name></expr></argument>)</argument_list></call></expr>;</return>

		<case>case <expr><name>DestTuplestore</name></expr>:</case>
			<return>return <expr><call><name>CreateTuplestoreDestReceiver</name><argument_list>()</argument_list></call></expr>;</return>

		<case>case <expr><name>DestIntoRel</name></expr>:</case>
			<return>return <expr><call><name>CreateIntoRelDestReceiver</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

		<case>case <expr><name>DestCopyOut</name></expr>:</case>
			<return>return <expr><call><name>CreateCopyDestReceiver</name><argument_list>()</argument_list></call></expr>;</return>

		<case>case <expr><name>DestSQLFunction</name></expr>:</case>
			<return>return <expr><call><name>CreateSQLFunctionDestReceiver</name><argument_list>()</argument_list></call></expr>;</return>

		<case>case <expr><name>DestTransientRel</name></expr>:</case>
			<return>return <expr><call><name>CreateTransientRelDestReceiver</name><argument_list>(<argument><expr><name>InvalidOid</name></expr></argument>)</argument_list></call></expr>;</return>

		<case>case <expr><name>DestTupleQueue</name></expr>:</case>
			<return>return <expr><call><name>CreateTupleQueueDestReceiver</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></switch>

	<comment type="block">/* should never get here */</comment>
	<expr_stmt><expr><call><name>pg_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* ----------------
 *		EndCommand - clean up the destination at end of command
 * ----------------
 */</comment>
<function><type><name>void</name></type>
<name>EndCommand</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>QueryCompletion</name> <modifier>*</modifier></type><name>qc</name></decl></parameter>, <parameter><decl><type><name>CommandDest</name></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>force_undecorated_output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>completionTag</name><index>[<expr><name>COMPLETION_TAG_BUFSIZE</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CommandTag</name></type>	<name>tag</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tagname</name></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name>dest</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>DestRemote</name></expr>:</case>
		<case>case <expr><name>DestRemoteExecute</name></expr>:</case>
		<case>case <expr><name>DestRemoteSimple</name></expr>:</case>

			<comment type="block">/*
			 * We assume the tagname is plain ASCII and therefore requires no
			 * encoding conversion.
			 *
			 * We no longer display LastOid, but to preserve the wire
			 * protocol, we write InvalidOid where the LastOid used to be
			 * written.
			 *
			 * All cases where LastOid was written also write nprocessed
			 * count, so just Assert that rather than having an extra test.
			 */</comment>
			<expr_stmt><expr><name>tag</name> <operator>=</operator> <name><name>qc</name><operator>-&gt;</operator><name>commandTag</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>tagname</name> <operator>=</operator> <call><name>GetCommandTagName</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>command_tag_display_rowcount</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>force_undecorated_output</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>completionTag</name></expr></argument>, <argument><expr><name>COMPLETION_TAG_BUFSIZE</name></expr></argument>,
						 <argument><expr><ternary><condition><expr><name>tag</name> <operator>==</operator> <name>CMDTAG_INSERT</name></expr> ?</condition><then>
						 <expr><literal type="string">"%s 0 "</literal> <name>UINT64_FORMAT</name></expr> </then><else>: <expr><literal type="string">"%s "</literal> <name>UINT64_FORMAT</name></expr></else></ternary></expr></argument>,
						 <argument><expr><name>tagname</name></expr></argument>, <argument><expr><name><name>qc</name><operator>-&gt;</operator><name>nprocessed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>completionTag</name></expr></argument>, <argument><expr><name>COMPLETION_TAG_BUFSIZE</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>tagname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<expr_stmt><expr><call><name>pq_putmessage</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>completionTag</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>completionTag</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<case>case <expr><name>DestNone</name></expr>:</case>
		<case>case <expr><name>DestDebug</name></expr>:</case>
		<case>case <expr><name>DestSPI</name></expr>:</case>
		<case>case <expr><name>DestTuplestore</name></expr>:</case>
		<case>case <expr><name>DestIntoRel</name></expr>:</case>
		<case>case <expr><name>DestCopyOut</name></expr>:</case>
		<case>case <expr><name>DestSQLFunction</name></expr>:</case>
		<case>case <expr><name>DestTransientRel</name></expr>:</case>
		<case>case <expr><name>DestTupleQueue</name></expr>:</case>
			<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/* ----------------
 *		EndReplicationCommand - stripped down version of EndCommand
 *
 *		For use by replication commands.
 * ----------------
 */</comment>
<function><type><name>void</name></type>
<name>EndReplicationCommand</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>commandTag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>pq_putmessage</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>commandTag</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>commandTag</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* ----------------
 *		NullCommand - tell dest that an empty query string was recognized
 *
 *		In FE/BE protocol version 1.0, this hack is necessary to support
 *		libpq's crufty way of determining whether a multiple-command
 *		query string is done.  In protocol 2.0 it's probably not really
 *		necessary to distinguish empty queries anymore, but we still do it
 *		for backwards compatibility with 1.0.  In protocol 3.0 it has some
 *		use again, since it ensures that there will be a recognizable end
 *		to the response to an Execute message.
 * ----------------
 */</comment>
<function><type><name>void</name></type>
<name>NullCommand</name><parameter_list>(<parameter><decl><type><name>CommandDest</name></type> <name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>dest</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>DestRemote</name></expr>:</case>
		<case>case <expr><name>DestRemoteExecute</name></expr>:</case>
		<case>case <expr><name>DestRemoteSimple</name></expr>:</case>

			<comment type="block">/*
			 * tell the fe that we saw an empty query string.  In protocols
			 * before 3.0 this has a useless empty-string message body.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>PG_PROTOCOL_MAJOR</name><argument_list>(<argument><expr><name>FrontendProtocol</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>pq_putemptymessage</name><argument_list>(<argument><expr><literal type="char">'I'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>pq_putmessage</name><argument_list>(<argument><expr><literal type="char">'I'</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<break>break;</break>

		<case>case <expr><name>DestNone</name></expr>:</case>
		<case>case <expr><name>DestDebug</name></expr>:</case>
		<case>case <expr><name>DestSPI</name></expr>:</case>
		<case>case <expr><name>DestTuplestore</name></expr>:</case>
		<case>case <expr><name>DestIntoRel</name></expr>:</case>
		<case>case <expr><name>DestCopyOut</name></expr>:</case>
		<case>case <expr><name>DestSQLFunction</name></expr>:</case>
		<case>case <expr><name>DestTransientRel</name></expr>:</case>
		<case>case <expr><name>DestTupleQueue</name></expr>:</case>
			<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/* ----------------
 *		ReadyForQuery - tell dest that we are ready for a new query
 *
 *		The ReadyForQuery message is sent so that the FE can tell when
 *		we are done processing a query string.
 *		In versions 3.0 and up, it also carries a transaction state indicator.
 *
 *		Note that by flushing the stdio buffer here, we can avoid doing it
 *		most other places and thus reduce the number of separate packets sent.
 * ----------------
 */</comment>
<function><type><name>void</name></type>
<name>ReadyForQuery</name><parameter_list>(<parameter><decl><type><name>CommandDest</name></type> <name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>dest</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>DestRemote</name></expr>:</case>
		<case>case <expr><name>DestRemoteExecute</name></expr>:</case>
		<case>case <expr><name>DestRemoteSimple</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><call><name>PG_PROTOCOL_MAJOR</name><argument_list>(<argument><expr><name>FrontendProtocol</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>pq_beginmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'Z'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>pq_sendbyte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><call><name>TransactionBlockStatusCode</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>pq_endmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>pq_putemptymessage</name><argument_list>(<argument><expr><literal type="char">'Z'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<comment type="block">/* Flush output at end of cycle in any case. */</comment>
			<expr_stmt><expr><call><name>pq_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>DestNone</name></expr>:</case>
		<case>case <expr><name>DestDebug</name></expr>:</case>
		<case>case <expr><name>DestSPI</name></expr>:</case>
		<case>case <expr><name>DestTuplestore</name></expr>:</case>
		<case>case <expr><name>DestIntoRel</name></expr>:</case>
		<case>case <expr><name>DestCopyOut</name></expr>:</case>
		<case>case <expr><name>DestSQLFunction</name></expr>:</case>
		<case>case <expr><name>DestTransientRel</name></expr>:</case>
		<case>case <expr><name>DestTupleQueue</name></expr>:</case>
			<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>
</unit>
