<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/backend/regex/regexec.c"><comment type="block">/*
 * re_*exec and friends - match REs
 *
 * Copyright (c) 1998, 1999 Henry Spencer.  All rights reserved.
 *
 * Development of this software was funded, in part, by Cray Research Inc.,
 * UUNET Communications Services Inc., Sun Microsystems Inc., and Scriptics
 * Corporation, none of whom are responsible for the results.  The author
 * thanks all of them.
 *
 * Redistribution and use in source and binary forms -- with or without
 * modification -- are permitted for any purpose, provided that
 * redistributions in source form retain this entire copyright notice and
 * indicate the origin and nature of any modifications.
 *
 * I'd appreciate being given credit for this package in the documentation
 * of software which uses it, but that is not a requirement.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
 * HENRY SPENCER BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * src/backend/regex/regexec.c
 *
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"regex/regguts.h"</cpp:file></cpp:include>



<comment type="block">/* lazy-DFA representation */</comment>
<struct>struct <name>arcp</name>
<block>{								<comment type="block">/* "pointer" to an outarc */</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>sset</name></name> <modifier>*</modifier></type><name>ss</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>color</name></type>		<name>co</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>sset</name>
<block>{								<comment type="block">/* state set */</comment>
	<decl_stmt><decl><type><name>unsigned</name>   <modifier>*</modifier></type><name>states</name></decl>;</decl_stmt>			<comment type="block">/* pointer to bitvector */</comment>
	<decl_stmt><decl><type><name>unsigned</name></type>	<name>hash</name></decl>;</decl_stmt>			<comment type="block">/* hash of bitvector */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive>  <cpp:macro><name>HASH</name><parameter_list>(<parameter><type><name>bv</name></type></parameter>, <parameter><type><name>nw</name></type></parameter>)</parameter_list></cpp:macro>	 <cpp:value>(((nw) == 1) ? *(bv) : hash(bv, nw))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>  <cpp:macro><name>HIT</name><parameter_list>(<parameter><type><name>h</name></type></parameter>,<parameter><type><name>bv</name></type></parameter>,<parameter><type><name>ss</name></type></parameter>,<parameter><type><name>nw</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ss)-&gt;hash == (h) &amp;&amp; ((nw) == 1 || \
		memcmp(VS(bv), VS((ss)-&gt;states), (nw)*sizeof(unsigned)) == 0))</cpp:value></cpp:define>
	<decl_stmt><decl><type><name>int</name></type>			<name>flags</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive>  <cpp:macro><name>STARTER</name></cpp:macro>	 <cpp:value>01</cpp:value></cpp:define>			<comment type="block">/* the initial state set */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive>  <cpp:macro><name>POSTSTATE</name></cpp:macro>	 <cpp:value>02</cpp:value></cpp:define>			<comment type="block">/* includes the goal state */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive>  <cpp:macro><name>LOCKED</name></cpp:macro>		 <cpp:value>04</cpp:value></cpp:define>			<comment type="block">/* locked in cache */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive>  <cpp:macro><name>NOPROGRESS</name></cpp:macro>  <cpp:value>010</cpp:value></cpp:define>		<comment type="block">/* zero-progress state set */</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>arcp</name></name></type> <name>ins</name></decl>;</decl_stmt>			<comment type="block">/* chain of inarcs pointing here */</comment>
	<decl_stmt><decl><type><name>chr</name>		   <modifier>*</modifier></type><name>lastseen</name></decl>;</decl_stmt>		<comment type="block">/* last entered on arrival here */</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>sset</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>outs</name></decl>;</decl_stmt>			<comment type="block">/* outarc vector indexed by color */</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>arcp</name></name> <modifier>*</modifier></type><name>inchain</name></decl>;</decl_stmt>		<comment type="block">/* chain-pointer vector for outarcs */</comment>
}</block>;</struct>

<struct>struct <name>dfa</name>
<block>{
	<decl_stmt><decl><type><name>int</name></type>			<name>nssets</name></decl>;</decl_stmt>			<comment type="block">/* size of cache */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>nssused</name></decl>;</decl_stmt>		<comment type="block">/* how many entries occupied yet */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>nstates</name></decl>;</decl_stmt>		<comment type="block">/* number of states */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>ncolors</name></decl>;</decl_stmt>		<comment type="block">/* length of outarc and inchain vectors */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>wordsper</name></decl>;</decl_stmt>		<comment type="block">/* length of state-set bitvectors */</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>sset</name></name> <modifier>*</modifier></type><name>ssets</name></decl>;</decl_stmt>			<comment type="block">/* state-set cache */</comment>
	<decl_stmt><decl><type><name>unsigned</name>   <modifier>*</modifier></type><name>statesarea</name></decl>;</decl_stmt>		<comment type="block">/* bitvector storage */</comment>
	<decl_stmt><decl><type><name>unsigned</name>   <modifier>*</modifier></type><name>work</name></decl>;</decl_stmt>			<comment type="block">/* pointer to work area within statesarea */</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>sset</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>outsarea</name></decl>;</decl_stmt>		<comment type="block">/* outarc-vector storage */</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>arcp</name></name> <modifier>*</modifier></type><name>incarea</name></decl>;</decl_stmt>		<comment type="block">/* inchain storage */</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>cnfa</name></name> <modifier>*</modifier></type><name>cnfa</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>colormap</name></name> <modifier>*</modifier></type><name>cm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>chr</name>		   <modifier>*</modifier></type><name>lastpost</name></decl>;</decl_stmt>		<comment type="block">/* location of last cache-flushed success */</comment>
	<decl_stmt><decl><type><name>chr</name>		   <modifier>*</modifier></type><name>lastnopr</name></decl>;</decl_stmt>		<comment type="block">/* location of last cache-flushed NOPROGRESS */</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>sset</name></name> <modifier>*</modifier></type><name>search</name></decl>;</decl_stmt>		<comment type="block">/* replacement-search-pointer memory */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>cptsmalloced</name></decl>;</decl_stmt>	<comment type="block">/* were the areas individually malloced? */</comment>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>mallocarea</name></decl>;</decl_stmt>		<comment type="block">/* self, or master malloced area, or NULL */</comment>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WORK</name></cpp:macro>	<cpp:value>1</cpp:value></cpp:define>				<comment type="block">/* number of work bitvectors needed */</comment>

<comment type="block">/* setup for non-malloc allocation for small cases */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FEWSTATES</name></cpp:macro>	<cpp:value>20</cpp:value></cpp:define>			<comment type="block">/* must be less than UBITS */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FEWCOLORS</name></cpp:macro>	<cpp:value>15</cpp:value></cpp:define>
<struct>struct <name>smalldfa</name>
<block>{
	<decl_stmt><decl><type><name><name>struct</name> <name>dfa</name></name></type>	<name>dfa</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>sset</name></name></type> <name><name>ssets</name><index>[<expr><name>FEWSTATES</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type>	<name><name>statesarea</name><index>[<expr><name>FEWSTATES</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>WORK</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>sset</name></name> <modifier>*</modifier></type><name><name>outsarea</name><index>[<expr><name>FEWSTATES</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>FEWCOLORS</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>arcp</name></name></type> <name><name>incarea</name><index>[<expr><name>FEWSTATES</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>FEWCOLORS</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOMALLOC</name></cpp:macro>	<cpp:value>((struct smalldfa *)NULL)</cpp:value></cpp:define>	<comment type="block">/* force malloc */</comment>



<comment type="block">/* internal variables, bundled for easy passing around */</comment>
<struct>struct <name>vars</name>
<block>{
	<decl_stmt><decl><type><name>regex_t</name>    <modifier>*</modifier></type><name>re</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>guts</name></name> <modifier>*</modifier></type><name>g</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>eflags</name></decl>;</decl_stmt>			<comment type="block">/* copies of arguments */</comment>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>nmatch</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>regmatch_t</name> <modifier>*</modifier></type><name>pmatch</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>rm_detail_t</name> <modifier>*</modifier></type><name>details</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>chr</name>		   <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>			<comment type="block">/* start of string */</comment>
	<decl_stmt><decl><type><name>chr</name>		   <modifier>*</modifier></type><name>search_start</name></decl>;</decl_stmt>	<comment type="block">/* search start of string */</comment>
	<decl_stmt><decl><type><name>chr</name>		   <modifier>*</modifier></type><name>stop</name></decl>;</decl_stmt>			<comment type="block">/* just past end of string */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>err</name></decl>;</decl_stmt>			<comment type="block">/* error code if any (0 none) */</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>dfa</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>subdfas</name></decl>;</decl_stmt>		<comment type="block">/* per-tree-subre DFAs */</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>dfa</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>ladfas</name></decl>;</decl_stmt>		<comment type="block">/* per-lacon-subre DFAs */</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>sset</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>lblastcss</name></decl>;</decl_stmt>	<comment type="block">/* per-lacon-subre lookbehind restart data */</comment>
	<decl_stmt><decl><type><name>chr</name>		  <modifier>*</modifier><modifier>*</modifier></type><name>lblastcp</name></decl>;</decl_stmt>		<comment type="block">/* per-lacon-subre lookbehind restart data */</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>smalldfa</name></name></type> <name>dfa1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>smalldfa</name></name></type> <name>dfa2</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VISERR</name><parameter_list>(<parameter><type><name>vv</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>((vv)-&gt;err != 0)</cpp:value></cpp:define>	<comment type="block">/* have we seen an error yet? */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISERR</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>VISERR(v)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VERR</name><parameter_list>(<parameter><type><name>vv</name></type></parameter>,<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>((vv)-&gt;err = ((vv)-&gt;err ? (vv)-&gt;err : (e)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERR</name><parameter_list>(<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>VERR(v, e)</cpp:value></cpp:define>		<comment type="block">/* record an error */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOERR</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>{if (ISERR()) return v-&gt;err;}</cpp:value></cpp:define>	<comment type="block">/* if error seen, return it */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFF</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>((p) - v-&gt;start)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOFF</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((long)OFF(p))</cpp:value></cpp:define>



<comment type="block">/*
 * forward declarations
 */</comment>
<comment type="block">/* === regexec.c === */</comment>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>dfa</name></name> <modifier>*</modifier></type><name>getsubdfa</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vars</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>subre</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>dfa</name></name> <modifier>*</modifier></type><name>getladfa</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vars</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>find</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vars</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>cnfa</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>colormap</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>cfind</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vars</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>cnfa</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>colormap</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>cfindloop</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vars</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>cnfa</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>colormap</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dfa</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dfa</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>chr</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>zapallsubs</name><parameter_list>(<parameter><decl><type><name>regmatch_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>zaptreesubs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vars</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>subre</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>subset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vars</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>subre</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>chr</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>chr</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>cdissect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vars</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>subre</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>chr</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>chr</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>ccondissect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vars</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>subre</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>chr</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>chr</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>crevcondissect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vars</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>subre</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>chr</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>chr</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>cbrdissect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vars</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>subre</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>chr</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>chr</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>caltdissect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vars</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>subre</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>chr</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>chr</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>citerdissect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vars</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>subre</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>chr</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>chr</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>creviterdissect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vars</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>subre</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>chr</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>chr</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* === rege_dfa.c === */</comment>
<function_decl><type><specifier>static</specifier> <name>chr</name> <modifier>*</modifier></type><name>longest</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vars</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dfa</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>chr</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>chr</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>chr</name> <modifier>*</modifier></type><name>shortest</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vars</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dfa</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>chr</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>chr</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>chr</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>chr</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>matchuntil</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vars</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dfa</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>chr</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sset</name></name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>chr</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>chr</name> <modifier>*</modifier></type><name>lastcold</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vars</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dfa</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>dfa</name></name> <modifier>*</modifier></type><name>newdfa</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vars</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>cnfa</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>colormap</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>smalldfa</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>freedfa</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dfa</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>unsigned</name></type> <name>hash</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>sset</name></name> <modifier>*</modifier></type><name>initialize</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vars</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dfa</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>chr</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>sset</name></name> <modifier>*</modifier></type><name>miss</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vars</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dfa</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sset</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>color</name></type></decl></parameter>, <parameter><decl><type><name>chr</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>chr</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>lacon</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vars</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>cnfa</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>chr</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>color</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>sset</name></name> <modifier>*</modifier></type><name>getvacant</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vars</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dfa</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>chr</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>chr</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>sset</name></name> <modifier>*</modifier></type><name>pickss</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vars</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dfa</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>chr</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>chr</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/*
 * pg_regexec - match regular expression
 */</comment>
<function><type><name>int</name></type>
<name>pg_regexec</name><parameter_list>(<parameter><decl><type><name>regex_t</name> <modifier>*</modifier></type><name>re</name></decl></parameter>,
		   <parameter><decl><type><specifier>const</specifier> <name>chr</name> <modifier>*</modifier></type><name>string</name></decl></parameter>,
		   <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
		   <parameter><decl><type><name>size_t</name></type> <name>search_start</name></decl></parameter>,
		   <parameter><decl><type><name>rm_detail_t</name> <modifier>*</modifier></type><name>details</name></decl></parameter>,
		   <parameter><decl><type><name>size_t</name></type> <name>nmatch</name></decl></parameter>,
		   <parameter><decl><type><name>regmatch_t</name></type> <name><name>pmatch</name><index>[]</index></name></decl></parameter>,
		   <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>vars</name></name></type> <name>var</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>register</specifier> <name><name>struct</name> <name>vars</name></name> <modifier>*</modifier></type><name>v</name> <init>= <expr><operator>&amp;</operator><name>var</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>st</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>backref</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive>  <cpp:macro><name>LOCALMAT</name></cpp:macro>	 <cpp:value>20</cpp:value></cpp:define>
	<decl_stmt><decl><type><name>regmatch_t</name></type>	<name><name>mat</name><index>[<expr><name>LOCALMAT</name></expr>]</index></name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive>  <cpp:macro><name>LOCALDFAS</name></cpp:macro>	 <cpp:value>40</cpp:value></cpp:define>
	<decl_stmt><decl><type><name><name>struct</name> <name>dfa</name></name> <modifier>*</modifier></type><name><name>subdfas</name><index>[<expr><name>LOCALDFAS</name></expr>]</index></name></decl>;</decl_stmt>

	<comment type="block">/* sanity checks */</comment>
	<if_stmt><if>if <condition>(<expr><name>re</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>string</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>re</name><operator>-&gt;</operator><name>re_magic</name></name> <operator>!=</operator> <name>REMAGIC</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>REG_INVARG</name></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>re</name><operator>-&gt;</operator><name>re_csize</name></name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>chr</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>REG_MIXED</name></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>search_start</name> <operator>&gt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>REG_NOMATCH</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Initialize locale-dependent support */</comment>
	<expr_stmt><expr><call><name>pg_set_regex_collation</name><argument_list>(<argument><expr><name><name>re</name><operator>-&gt;</operator><name>re_collation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* setup */</comment>
	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>re</name></name> <operator>=</operator> <name>re</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>g</name></name> <operator>=</operator> <operator>(</operator>struct <name>guts</name> <operator>*</operator><operator>)</operator> <name><name>re</name><operator>-&gt;</operator><name>re_guts</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>cflags</name></name> <operator>&amp;</operator> <name>REG_EXPECT</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>details</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>REG_INVARG</name></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>info</name></name> <operator>&amp;</operator> <name>REG_UIMPOSSIBLE</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>REG_NOMATCH</name></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>backref</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>info</name></name> <operator>&amp;</operator> <name>REG_UBACKREF</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>eflags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>cflags</name></name> <operator>&amp;</operator> <name>REG_NOSUB</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>nmatch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>				<comment type="block">/* override client */</comment>
	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>nmatch</name></name> <operator>=</operator> <name>nmatch</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>backref</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* need work area */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>nsub</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name>LOCALMAT</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>pmatch</name></name> <operator>=</operator> <name>mat</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>pmatch</name></name> <operator>=</operator> <operator>(</operator><name>regmatch_t</name> <operator>*</operator><operator>)</operator> <call><name>MALLOC</name><argument_list>(<argument><expr><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>nsub</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator>
											  <sizeof>sizeof<argument_list>(<argument><expr><name>regmatch_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>pmatch</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>REG_ESPACE</name></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>nmatch</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>nsub</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>pmatch</name></name> <operator>=</operator> <name>pmatch</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>nmatch</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>zapallsubs</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>pmatch</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>nmatch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>details</name></name> <operator>=</operator> <name>details</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <operator>(</operator><name>chr</name> <operator>*</operator><operator>)</operator> <name>string</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>search_start</name></name> <operator>=</operator> <operator>(</operator><name>chr</name> <operator>*</operator><operator>)</operator> <name>string</name> <operator>+</operator> <name>search_start</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>stop</name></name> <operator>=</operator> <operator>(</operator><name>chr</name> <operator>*</operator><operator>)</operator> <name>string</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>err</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>subdfas</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ladfas</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>lblastcss</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>lblastcp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<comment type="block">/* below this point, "goto cleanup" will behave sanely */</comment>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>ntree</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name><name>v</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>ntree</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <name>LOCALDFAS</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>subdfas</name></name> <operator>=</operator> <name>subdfas</name></expr>;</expr_stmt></block_content></block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>subdfas</name></name> <operator>=</operator> <operator>(</operator>struct <name>dfa</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>MALLOC</name><argument_list>(<argument><expr><name>n</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>dfa</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>subdfas</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>st</name> <operator>=</operator> <name>REG_ESPACE</name></expr>;</expr_stmt>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>subdfas</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></for>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>nlacons</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name><name>v</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>nlacons</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ladfas</name></name> <operator>=</operator> <operator>(</operator>struct <name>dfa</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>MALLOC</name><argument_list>(<argument><expr><name>n</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>dfa</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>ladfas</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>st</name> <operator>=</operator> <name>REG_ESPACE</name></expr>;</expr_stmt>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ladfas</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></for>
		<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>lblastcss</name></name> <operator>=</operator> <operator>(</operator>struct <name>sset</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>MALLOC</name><argument_list>(<argument><expr><name>n</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sset</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>lblastcp</name></name> <operator>=</operator> <operator>(</operator><name>chr</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>MALLOC</name><argument_list>(<argument><expr><name>n</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>chr</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>lblastcss</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>v</name><operator>-&gt;</operator><name>lblastcp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>st</name> <operator>=</operator> <name>REG_ESPACE</name></expr>;</expr_stmt>
			<goto>goto <name>cleanup</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>lblastcss</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>lblastcp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* do it */</comment>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>tree</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>backref</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>cfind</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>tree</name><operator>-&gt;</operator><name>cnfa</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>cmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>find</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>tree</name><operator>-&gt;</operator><name>cnfa</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>cmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="block">/* copy (portion of) match vector over if necessary */</comment>
	<if_stmt><if>if <condition>(<expr><name>st</name> <operator>==</operator> <name>REG_OKAY</name> <operator>&amp;&amp;</operator> <name><name>v</name><operator>-&gt;</operator><name>pmatch</name></name> <operator>!=</operator> <name>pmatch</name> <operator>&amp;&amp;</operator> <name>nmatch</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>zapallsubs</name><argument_list>(<argument><expr><name>pmatch</name></expr></argument>, <argument><expr><name>nmatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>nmatch</name> <operator>&lt;</operator> <name><name>v</name><operator>-&gt;</operator><name>nmatch</name></name><operator>)</operator></expr> ?</condition><then> <expr><name>nmatch</name></expr> </then><else>: <expr><name><name>v</name><operator>-&gt;</operator><name>nmatch</name></name></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>VS</name><argument_list>(<argument><expr><name>pmatch</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>VS</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>pmatch</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>n</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>regmatch_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* clean up */</comment>
<label><name>cleanup</name>:</label>
	<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>pmatch</name></name> <operator>!=</operator> <name>pmatch</name> <operator>&amp;&amp;</operator> <name><name>v</name><operator>-&gt;</operator><name>pmatch</name></name> <operator>!=</operator> <name>mat</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>pmatch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>subdfas</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name><name>v</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>ntree</name></name></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>subdfas</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>freedfa</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>subdfas</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></for>
		<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>subdfas</name></name> <operator>!=</operator> <name>subdfas</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>subdfas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>ladfas</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name><name>v</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>nlacons</name></name></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>ladfas</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>freedfa</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>ladfas</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>ladfas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>lblastcss</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>lblastcss</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>lblastcp</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>lblastcp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>st</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * getsubdfa - create or re-fetch the DFA for a tree subre node
 *
 * We only need to create the DFA once per overall regex execution.
 * The DFA will be freed by the cleanup step in pg_regexec().
 */</comment>
<function><type><specifier>static</specifier> <name><name>struct</name> <name>dfa</name></name> <modifier>*</modifier></type>
<name>getsubdfa</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vars</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>,
		  <parameter><decl><type><name><name>struct</name> <name>subre</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>subdfas</name><index>[<expr><name><name>t</name><operator>-&gt;</operator><name>id</name></name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>subdfas</name><index>[<expr><name><name>t</name><operator>-&gt;</operator><name>id</name></name></expr>]</index></name> <operator>=</operator> <call><name>newdfa</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>cnfa</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>cmap</name></name></expr></argument>, <argument><expr><name>DOMALLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>ISERR</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name><name>v</name><operator>-&gt;</operator><name>subdfas</name><index>[<expr><name><name>t</name><operator>-&gt;</operator><name>id</name></name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * getladfa - create or re-fetch the DFA for a LACON subre node
 *
 * Same as above, but for LACONs.
 */</comment>
<function><type><specifier>static</specifier> <name><name>struct</name> <name>dfa</name></name> <modifier>*</modifier></type>
<name>getladfa</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vars</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>,
		 <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>n</name> <operator>&lt;</operator> <name><name>v</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>nlacons</name></name> <operator>&amp;&amp;</operator> <name><name>v</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>lacons</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>ladfas</name><index>[<expr><name>n</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name><name>struct</name> <name>subre</name></name> <modifier>*</modifier></type><name>sub</name> <init>= <expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>lacons</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ladfas</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>newdfa</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sub</name><operator>-&gt;</operator><name>cnfa</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>cmap</name></name></expr></argument>, <argument><expr><name>DOMALLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>ISERR</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name><name>v</name><operator>-&gt;</operator><name>ladfas</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * find - find a match for the main NFA (no-complications case)
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>find</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vars</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>,
	 <parameter><decl><type><name><name>struct</name> <name>cnfa</name></name> <modifier>*</modifier></type><name>cnfa</name></decl></parameter>,
	 <parameter><decl><type><name><name>struct</name> <name>colormap</name></name> <modifier>*</modifier></type><name>cm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>dfa</name></name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>dfa</name></name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>chr</name>		   <modifier>*</modifier></type><name>begin</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>chr</name>		   <modifier>*</modifier></type><name>end</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>chr</name>		   <modifier>*</modifier></type><name>cold</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>chr</name>		   <modifier>*</modifier></type><name>open</name></decl>;</decl_stmt>			<comment type="block">/* open and close of range of possible starts */</comment>
	<decl_stmt><decl><type><name>chr</name>		   <modifier>*</modifier></type><name>close</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>hitend</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>shorter</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>tree</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SHORTER</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

	<comment type="block">/* first, a shot with the search RE */</comment>
	<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>newdfa</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>search</name></name></expr></argument>, <argument><expr><name>cm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>dfa1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><call><name>ISERR</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>s</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>NOERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MDEBUG</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"\nsearch at %ld\n"</literal><operator>,</operator> <call><name>LOFF</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>start</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cold</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>close</name> <operator>=</operator> <call><name>shortest</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>search_start</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>search_start</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>stop</name></name></expr></argument>,
					 <argument><expr><operator>&amp;</operator><name>cold</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>freedfa</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>NOERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>cflags</name></name> <operator>&amp;</operator> <name>REG_EXPECT</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>details</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>cold</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>details</name><operator>-&gt;</operator><name>rm_extend</name><operator>.</operator><name>rm_so</name></name> <operator>=</operator> <call><name>OFF</name><argument_list>(<argument><expr><name>cold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>details</name><operator>-&gt;</operator><name>rm_extend</name><operator>.</operator><name>rm_so</name></name> <operator>=</operator> <call><name>OFF</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>stop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>details</name><operator>-&gt;</operator><name>rm_extend</name><operator>.</operator><name>rm_eo</name></name> <operator>=</operator> <call><name>OFF</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>stop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* unknown */</comment>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>close</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>			<comment type="block">/* not found */</comment>
		<return>return <expr><name>REG_NOMATCH</name></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>nmatch</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>			<comment type="block">/* found, don't need exact location */</comment>
		<return>return <expr><name>REG_OKAY</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* find starting point and match */</comment>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>cold</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>open</name> <operator>=</operator> <name>cold</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cold</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MDEBUG</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"between %ld and %ld\n"</literal><operator>,</operator> <call><name>LOFF</name><argument_list>(<argument><expr><name>open</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name>LOFF</name><argument_list>(<argument><expr><name>close</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>newdfa</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>cnfa</name></expr></argument>, <argument><expr><name>cm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>dfa1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><call><name>ISERR</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>d</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>NOERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>begin</name> <operator>=</operator> <name>open</name></expr>;</init> <condition><expr><name>begin</name> <operator>&lt;=</operator> <name>close</name></expr>;</condition> <incr><expr><name>begin</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>MDEBUG</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"\nfind trying at %ld\n"</literal><operator>,</operator> <call><name>LOFF</name><argument_list>(<argument><expr><name>begin</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>shorter</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>shortest</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>begin</name></expr></argument>, <argument><expr><name>begin</name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>stop</name></name></expr></argument>,
						   <argument><expr><operator>(</operator><name>chr</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hitend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>longest</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>begin</name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>stop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hitend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>ISERR</name><argument_list>()</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>freedfa</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name><name>v</name><operator>-&gt;</operator><name>err</name></name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>hitend</name> <operator>&amp;&amp;</operator> <name>cold</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>cold</name> <operator>=</operator> <name>begin</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>end</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>				<comment type="block">/* NOTE BREAK OUT */</comment>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>end</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block">/* search RE succeeded so loop should */</comment>
	<expr_stmt><expr><call><name>freedfa</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* and pin down details */</comment>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>nmatch</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>pmatch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>rm_so</name> <operator>=</operator> <call><name>OFF</name><argument_list>(<argument><expr><name>begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>pmatch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>rm_eo</name> <operator>=</operator> <call><name>OFF</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>cflags</name></name> <operator>&amp;</operator> <name>REG_EXPECT</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>cold</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>details</name><operator>-&gt;</operator><name>rm_extend</name><operator>.</operator><name>rm_so</name></name> <operator>=</operator> <call><name>OFF</name><argument_list>(<argument><expr><name>cold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>details</name><operator>-&gt;</operator><name>rm_extend</name><operator>.</operator><name>rm_so</name></name> <operator>=</operator> <call><name>OFF</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>stop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>details</name><operator>-&gt;</operator><name>rm_extend</name><operator>.</operator><name>rm_eo</name></name> <operator>=</operator> <call><name>OFF</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>stop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* unknown */</comment>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>nmatch</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>			<comment type="block">/* no need for submatches */</comment>
		<return>return <expr><name>REG_OKAY</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* find submatches */</comment>
	<return>return <expr><call><name>cdissect</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>tree</name></name></expr></argument>, <argument><expr><name>begin</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * cfind - find a match for the main NFA (with complications)
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>cfind</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vars</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>,
	  <parameter><decl><type><name><name>struct</name> <name>cnfa</name></name> <modifier>*</modifier></type><name>cnfa</name></decl></parameter>,
	  <parameter><decl><type><name><name>struct</name> <name>colormap</name></name> <modifier>*</modifier></type><name>cm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>dfa</name></name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>dfa</name></name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>chr</name>		   <modifier>*</modifier></type><name>cold</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>ret</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>newdfa</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>search</name></name></expr></argument>, <argument><expr><name>cm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>dfa1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>NOERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>newdfa</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>cnfa</name></expr></argument>, <argument><expr><name>cm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>dfa2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>ISERR</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>d</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>freedfa</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name><name>v</name><operator>-&gt;</operator><name>err</name></name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>cfindloop</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>cnfa</name></expr></argument>, <argument><expr><name>cm</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>freedfa</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>freedfa</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>NOERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>cflags</name></name> <operator>&amp;</operator> <name>REG_EXPECT</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>details</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>cold</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>details</name><operator>-&gt;</operator><name>rm_extend</name><operator>.</operator><name>rm_so</name></name> <operator>=</operator> <call><name>OFF</name><argument_list>(<argument><expr><name>cold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>details</name><operator>-&gt;</operator><name>rm_extend</name><operator>.</operator><name>rm_so</name></name> <operator>=</operator> <call><name>OFF</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>stop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>details</name><operator>-&gt;</operator><name>rm_extend</name><operator>.</operator><name>rm_eo</name></name> <operator>=</operator> <call><name>OFF</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>stop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* unknown */</comment>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * cfindloop - the heart of cfind
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>cfindloop</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vars</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>,
		  <parameter><decl><type><name><name>struct</name> <name>cnfa</name></name> <modifier>*</modifier></type><name>cnfa</name></decl></parameter>,
		  <parameter><decl><type><name><name>struct</name> <name>colormap</name></name> <modifier>*</modifier></type><name>cm</name></decl></parameter>,
		  <parameter><decl><type><name><name>struct</name> <name>dfa</name></name> <modifier>*</modifier></type><name>d</name></decl></parameter>,
		  <parameter><decl><type><name><name>struct</name> <name>dfa</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
		  <parameter><decl><type><name>chr</name> <modifier>*</modifier><modifier>*</modifier></type><name>coldp</name></decl></parameter>)</parameter_list>			<comment type="block">/* where to put coldstart pointer */</comment>
<block>{<block_content>
	<decl_stmt><decl><type><name>chr</name>		   <modifier>*</modifier></type><name>begin</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>chr</name>		   <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>chr</name>		   <modifier>*</modifier></type><name>cold</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>chr</name>		   <modifier>*</modifier></type><name>open</name></decl>;</decl_stmt>			<comment type="block">/* open and close of range of possible starts */</comment>
	<decl_stmt><decl><type><name>chr</name>		   <modifier>*</modifier></type><name>close</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>chr</name>		   <modifier>*</modifier></type><name>estart</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>chr</name>		   <modifier>*</modifier></type><name>estop</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>er</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>shorter</name> <init>= <expr><name><name>v</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>tree</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SHORTER</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>hitend</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>d</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>s</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cold</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>close</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>search_start</name></name></expr>;</expr_stmt>
	<do>do
	<block>{<block_content>
		<comment type="block">/* Search with the search RE for match range at/beyond "close" */</comment>
		<expr_stmt><expr><call><name>MDEBUG</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"\ncsearch at %ld\n"</literal><operator>,</operator> <call><name>LOFF</name><argument_list>(<argument><expr><name>close</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>close</name> <operator>=</operator> <call><name>shortest</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>close</name></expr></argument>, <argument><expr><name>close</name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>stop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cold</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>ISERR</name><argument_list>()</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>coldp</name> <operator>=</operator> <name>cold</name></expr>;</expr_stmt>
			<return>return <expr><name><name>v</name><operator>-&gt;</operator><name>err</name></name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>close</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>				<comment type="block">/* no more possible match anywhere */</comment>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>cold</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>open</name> <operator>=</operator> <name>cold</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>cold</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<comment type="block">/* Search for matches starting between "open" and "close" inclusive */</comment>
		<expr_stmt><expr><call><name>MDEBUG</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"cbetween %ld and %ld\n"</literal><operator>,</operator> <call><name>LOFF</name><argument_list>(<argument><expr><name>open</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name>LOFF</name><argument_list>(<argument><expr><name>close</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>begin</name> <operator>=</operator> <name>open</name></expr>;</init> <condition><expr><name>begin</name> <operator>&lt;=</operator> <name>close</name></expr>;</condition> <incr><expr><name>begin</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><call><name>MDEBUG</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"\ncfind trying at %ld\n"</literal><operator>,</operator> <call><name>LOFF</name><argument_list>(<argument><expr><name>begin</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>estart</name> <operator>=</operator> <name>begin</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>estop</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>stop</name></name></expr>;</expr_stmt>
			<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
			<block>{<block_content>
				<comment type="block">/* Here we use the top node's detailed RE */</comment>
				<if_stmt><if>if <condition>(<expr><name>shorter</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>shortest</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>begin</name></expr></argument>, <argument><expr><name>estart</name></expr></argument>,
								   <argument><expr><name>estop</name></expr></argument>, <argument><expr><operator>(</operator><name>chr</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hitend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>longest</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>begin</name></expr></argument>, <argument><expr><name>estop</name></expr></argument>,
								  <argument><expr><operator>&amp;</operator><name>hitend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
				<if_stmt><if>if <condition>(<expr><call><name>ISERR</name><argument_list>()</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><operator>*</operator><name>coldp</name> <operator>=</operator> <name>cold</name></expr>;</expr_stmt>
					<return>return <expr><name><name>v</name><operator>-&gt;</operator><name>err</name></name></expr>;</return>
				</block_content>}</block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><name>hitend</name> <operator>&amp;&amp;</operator> <name>cold</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>cold</name> <operator>=</operator> <name>begin</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><name>end</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
					<break>break;</break></block_content></block></if></if_stmt>		<comment type="block">/* no match with this begin point, try next */</comment>
				<expr_stmt><expr><call><name>MDEBUG</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"tentative end %ld\n"</literal><operator>,</operator> <call><name>LOFF</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* Dissect the potential match to see if it really matches */</comment>
				<expr_stmt><expr><name>er</name> <operator>=</operator> <call><name>cdissect</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>tree</name></name></expr></argument>, <argument><expr><name>begin</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>er</name> <operator>==</operator> <name>REG_OKAY</name></expr>)</condition>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>nmatch</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>pmatch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>rm_so</name> <operator>=</operator> <call><name>OFF</name><argument_list>(<argument><expr><name>begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>pmatch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>rm_eo</name> <operator>=</operator> <call><name>OFF</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
					<expr_stmt><expr><operator>*</operator><name>coldp</name> <operator>=</operator> <name>cold</name></expr>;</expr_stmt>
					<return>return <expr><name>REG_OKAY</name></expr>;</return>
				</block_content>}</block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><name>er</name> <operator>!=</operator> <name>REG_NOMATCH</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>ERR</name><argument_list>(<argument><expr><name>er</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><operator>*</operator><name>coldp</name> <operator>=</operator> <name>cold</name></expr>;</expr_stmt>
					<return>return <expr><name>er</name></expr>;</return>
				</block_content>}</block></if></if_stmt>
				<comment type="block">/* Try next longer/shorter match with same begin point */</comment>
				<if_stmt><if>if <condition>(<expr><name>shorter</name></expr>)</condition>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name>end</name> <operator>==</operator> <name>estop</name></expr>)</condition><block type="pseudo"><block_content>
						<break>break;</break></block_content></block></if></if_stmt>	<comment type="block">/* no more, so try next begin point */</comment>
					<expr_stmt><expr><name>estart</name> <operator>=</operator> <name>end</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name>end</name> <operator>==</operator> <name>begin</name></expr>)</condition><block type="pseudo"><block_content>
						<break>break;</break></block_content></block></if></if_stmt>	<comment type="block">/* no more, so try next begin point */</comment>
					<expr_stmt><expr><name>estop</name> <operator>=</operator> <name>end</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></for>					<comment type="block">/* end loop over endpoint positions */</comment>
		</block_content>}</block></for>						<comment type="block">/* end loop over beginning positions */</comment>

		<comment type="block">/*
		 * If we get here, there is no possible match starting at or before
		 * "close", so consider matches beyond that.  We'll do a fresh search
		 * with the search RE to find a new promising match range.
		 */</comment>
		<expr_stmt><expr><name>close</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block> while <condition>(<expr><name>close</name> <operator>&lt;</operator> <name><name>v</name><operator>-&gt;</operator><name>stop</name></name></expr>)</condition>;</do>

	<expr_stmt><expr><operator>*</operator><name>coldp</name> <operator>=</operator> <name>cold</name></expr>;</expr_stmt>
	<return>return <expr><name>REG_NOMATCH</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * zapallsubs - initialize all subexpression matches to "no match"
 *
 * Note that p[0], the overall-match location, is not touched.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>zapallsubs</name><parameter_list>(<parameter><decl><type><name>regmatch_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
		   <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rm_so</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rm_eo</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
 * zaptreesubs - initialize subexpressions within subtree to "no match"
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>zaptreesubs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vars</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>,
			<parameter><decl><type><name><name>struct</name> <name>subre</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>n</name> <init>= <expr><name><name>t</name><operator>-&gt;</operator><name>subno</name></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>n</name> <operator>&lt;</operator> <name><name>v</name><operator>-&gt;</operator><name>nmatch</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>pmatch</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>rm_so</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>pmatch</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>rm_eo</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>left</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>zaptreesubs</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>right</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>zaptreesubs</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * subset - set subexpression match data for a successful subre
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>subset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vars</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>,
	   <parameter><decl><type><name><name>struct</name> <name>subre</name></name> <modifier>*</modifier></type><name>sub</name></decl></parameter>,
	   <parameter><decl><type><name>chr</name> <modifier>*</modifier></type><name>begin</name></decl></parameter>,
	   <parameter><decl><type><name>chr</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>n</name> <init>= <expr><name><name>sub</name><operator>-&gt;</operator><name>subno</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>n</name> <operator>&gt;=</operator> <name><name>v</name><operator>-&gt;</operator><name>nmatch</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>MDEBUG</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"setting %d\n"</literal><operator>,</operator> <name>n</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>pmatch</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>rm_so</name> <operator>=</operator> <call><name>OFF</name><argument_list>(<argument><expr><name>begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>pmatch</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>rm_eo</name> <operator>=</operator> <call><name>OFF</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * cdissect - check backrefs and determine subexpression matches
 *
 * cdissect recursively processes a subre tree to check matching of backrefs
 * and/or identify submatch boundaries for capture nodes.  The proposed match
 * runs from "begin" to "end" (not including "end"), and we are basically
 * "dissecting" it to see where the submatches are.
 *
 * Before calling any level of cdissect, the caller must have run the node's
 * DFA and found that the proposed substring satisfies the DFA.  (We make
 * the caller do that because in concatenation and iteration nodes, it's
 * much faster to check all the substrings against the child DFAs before we
 * recurse.)
 *
 * A side-effect of a successful match is to save match locations for
 * capturing subexpressions in v-&gt;pmatch[].  This is a little bit tricky,
 * so we make the following rules:
 * 1. Before initial entry to cdissect, all match data must have been
 *    cleared (this is seen to by zapallsubs).
 * 2. Before any recursive entry to cdissect, the match data for that
 *    subexpression tree must be guaranteed clear (see zaptreesubs).
 * 3. When returning REG_OKAY, each level of cdissect will have saved
 *    any relevant match locations.
 * 4. When returning REG_NOMATCH, each level of cdissect will guarantee
 *    that its subexpression match locations are again clear.
 * 5. No guarantees are made for error cases (i.e., other result codes).
 * 6. When a level of cdissect abandons a successful sub-match, it will
 *    clear that subtree's match locations with zaptreesubs before trying
 *    any new DFA match or cdissect call for that subtree or any subtree
 *    to its right (that is, any subtree that could have a backref into the
 *    abandoned match).
 * This may seem overly complicated, but it's difficult to simplify it
 * because of the provision that match locations must be reset before
 * any fresh DFA match (a rule that is needed to make dfa_backref safe).
 * That means it won't work to just reset relevant match locations at the
 * start of each cdissect level.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>						<comment type="block">/* regexec return code */</comment>
<name>cdissect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vars</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>,
		 <parameter><decl><type><name><name>struct</name> <name>subre</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>,
		 <parameter><decl><type><name>chr</name> <modifier>*</modifier></type><name>begin</name></decl></parameter>,			<comment type="block">/* beginning of relevant substring */</comment>
		 <parameter><decl><type><name>chr</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>				<comment type="block">/* end of same */</comment>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>er</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>t</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MDEBUG</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"cdissect %ld-%ld %c\n"</literal><operator>,</operator> <call><name>LOFF</name><argument_list>(<argument><expr><name>begin</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name>LOFF</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call><operator>,</operator> <name><name>t</name><operator>-&gt;</operator><name>op</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* handy place to check for operation cancel */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>CANCEL_REQUESTED</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>re</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>REG_CANCEL</name></expr>;</return></block_content></block></if></if_stmt>
	<comment type="block">/* ... and stack overrun */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>STACK_TOO_DEEP</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>re</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>REG_ETOOBIG</name></expr>;</return></block_content></block></if></if_stmt>

	<switch>switch <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>op</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><literal type="char">'='</literal></expr>:</case>				<comment type="block">/* terminal node */</comment>
			<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>left</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>t</name><operator>-&gt;</operator><name>right</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>er</name> <operator>=</operator> <name>REG_OKAY</name></expr>;</expr_stmt>		<comment type="block">/* no action, parent did the work */</comment>
			<break>break;</break>
		<case>case <expr><literal type="char">'b'</literal></expr>:</case>				<comment type="block">/* back reference */</comment>
			<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>left</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>t</name><operator>-&gt;</operator><name>right</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>er</name> <operator>=</operator> <call><name>cbrdissect</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>begin</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'.'</literal></expr>:</case>				<comment type="block">/* concatenation */</comment>
			<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>left</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>t</name><operator>-&gt;</operator><name>right</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>left</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SHORTER</name></expr>)</condition><block type="pseudo"><block_content>	<comment type="block">/* reverse scan */</comment>
				<expr_stmt><expr><name>er</name> <operator>=</operator> <call><name>crevcondissect</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>begin</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>er</name> <operator>=</operator> <call><name>ccondissect</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>begin</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'|'</literal></expr>:</case>				<comment type="block">/* alternation */</comment>
			<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>left</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>er</name> <operator>=</operator> <call><name>caltdissect</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>begin</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'*'</literal></expr>:</case>				<comment type="block">/* iteration */</comment>
			<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>left</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>left</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SHORTER</name></expr>)</condition><block type="pseudo"><block_content>	<comment type="block">/* reverse scan */</comment>
				<expr_stmt><expr><name>er</name> <operator>=</operator> <call><name>creviterdissect</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>begin</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>er</name> <operator>=</operator> <call><name>citerdissect</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>begin</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'('</literal></expr>:</case>				<comment type="block">/* capturing */</comment>
			<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>left</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>t</name><operator>-&gt;</operator><name>right</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>subno</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>er</name> <operator>=</operator> <call><name>cdissect</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><name>begin</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>er</name> <operator>==</operator> <name>REG_OKAY</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>subset</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>begin</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><name>er</name> <operator>=</operator> <name>REG_ASSERT</name></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<comment type="block">/*
	 * We should never have a match failure unless backrefs lurk below;
	 * otherwise, either caller failed to check the DFA, or there's some
	 * inconsistency between the DFA and the node's innards.
	 */</comment>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>er</name> <operator>!=</operator> <name>REG_NOMATCH</name> <operator>||</operator> <operator>(</operator><name><name>t</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>BACKR</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>er</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * ccondissect - dissect match for concatenation node
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>						<comment type="block">/* regexec return code */</comment>
<name>ccondissect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vars</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>,
			<parameter><decl><type><name><name>struct</name> <name>subre</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>,
			<parameter><decl><type><name>chr</name> <modifier>*</modifier></type><name>begin</name></decl></parameter>,			<comment type="block">/* beginning of relevant substring */</comment>
			<parameter><decl><type><name>chr</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>			<comment type="block">/* end of same */</comment>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>dfa</name></name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>dfa</name></name> <modifier>*</modifier></type><name>d2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>chr</name>		   <modifier>*</modifier></type><name>mid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>er</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>left</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>t</name><operator>-&gt;</operator><name>left</name><operator>-&gt;</operator><name>cnfa</name><operator>.</operator><name>nstates</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>right</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>t</name><operator>-&gt;</operator><name>right</name><operator>-&gt;</operator><name>cnfa</name><operator>.</operator><name>nstates</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name><name>t</name><operator>-&gt;</operator><name>left</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SHORTER</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>getsubdfa</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>NOERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>d2</name> <operator>=</operator> <call><name>getsubdfa</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>NOERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MDEBUG</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"cconcat %d\n"</literal><operator>,</operator> <name><name>t</name><operator>-&gt;</operator><name>id</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* pick a tentative midpoint */</comment>
	<expr_stmt><expr><name>mid</name> <operator>=</operator> <call><name>longest</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>begin</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>NOERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>mid</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>REG_NOMATCH</name></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>MDEBUG</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"tentative midpoint %ld\n"</literal><operator>,</operator> <call><name>LOFF</name><argument_list>(<argument><expr><name>mid</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* iterate until satisfaction or failure */</comment>
	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
	<block>{<block_content>
		<comment type="block">/* try this midpoint on for size */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>longest</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>d2</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>end</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>er</name> <operator>=</operator> <call><name>cdissect</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><name>begin</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>er</name> <operator>==</operator> <name>REG_OKAY</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>er</name> <operator>=</operator> <call><name>cdissect</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>right</name></name></expr></argument>, <argument><expr><name>mid</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>er</name> <operator>==</operator> <name>REG_OKAY</name></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/* satisfaction */</comment>
					<expr_stmt><expr><call><name>MDEBUG</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"successful\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return <expr><name>REG_OKAY</name></expr>;</return>
				</block_content>}</block></if></if_stmt>
				<comment type="block">/* Reset left's matches (right should have done so itself) */</comment>
				<expr_stmt><expr><call><name>zaptreesubs</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>er</name> <operator>!=</operator> <name>REG_NOMATCH</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>er</name></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>NOERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* that midpoint didn't work, find a new one */</comment>
		<if_stmt><if>if <condition>(<expr><name>mid</name> <operator>==</operator> <name>begin</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* all possibilities exhausted */</comment>
			<expr_stmt><expr><call><name>MDEBUG</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%d no midpoint\n"</literal><operator>,</operator> <name><name>t</name><operator>-&gt;</operator><name>id</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>REG_NOMATCH</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>mid</name> <operator>=</operator> <call><name>longest</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>begin</name></expr></argument>, <argument><expr><name>mid</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>NOERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>mid</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* failed to find a new one */</comment>
			<expr_stmt><expr><call><name>MDEBUG</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%d failed midpoint\n"</literal><operator>,</operator> <name><name>t</name><operator>-&gt;</operator><name>id</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>REG_NOMATCH</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>MDEBUG</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%d: new midpoint %ld\n"</literal><operator>,</operator> <name><name>t</name><operator>-&gt;</operator><name>id</name></name><operator>,</operator> <call><name>LOFF</name><argument_list>(<argument><expr><name>mid</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* can't get here */</comment>
	<return>return <expr><name>REG_ASSERT</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * crevcondissect - dissect match for concatenation node, shortest-first
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>						<comment type="block">/* regexec return code */</comment>
<name>crevcondissect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vars</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>,
			   <parameter><decl><type><name><name>struct</name> <name>subre</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>,
			   <parameter><decl><type><name>chr</name> <modifier>*</modifier></type><name>begin</name></decl></parameter>,		<comment type="block">/* beginning of relevant substring */</comment>
			   <parameter><decl><type><name>chr</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>		<comment type="block">/* end of same */</comment>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>dfa</name></name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>dfa</name></name> <modifier>*</modifier></type><name>d2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>chr</name>		   <modifier>*</modifier></type><name>mid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>er</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>left</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>t</name><operator>-&gt;</operator><name>left</name><operator>-&gt;</operator><name>cnfa</name><operator>.</operator><name>nstates</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>right</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>t</name><operator>-&gt;</operator><name>right</name><operator>-&gt;</operator><name>cnfa</name><operator>.</operator><name>nstates</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>left</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SHORTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>getsubdfa</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>NOERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>d2</name> <operator>=</operator> <call><name>getsubdfa</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>NOERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MDEBUG</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"crevcon %d\n"</literal><operator>,</operator> <name><name>t</name><operator>-&gt;</operator><name>id</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* pick a tentative midpoint */</comment>
	<expr_stmt><expr><name>mid</name> <operator>=</operator> <call><name>shortest</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>begin</name></expr></argument>, <argument><expr><name>begin</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>(</operator><name>chr</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>NOERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>mid</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>REG_NOMATCH</name></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>MDEBUG</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"tentative midpoint %ld\n"</literal><operator>,</operator> <call><name>LOFF</name><argument_list>(<argument><expr><name>mid</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* iterate until satisfaction or failure */</comment>
	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
	<block>{<block_content>
		<comment type="block">/* try this midpoint on for size */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>longest</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>d2</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>end</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>er</name> <operator>=</operator> <call><name>cdissect</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><name>begin</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>er</name> <operator>==</operator> <name>REG_OKAY</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>er</name> <operator>=</operator> <call><name>cdissect</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>right</name></name></expr></argument>, <argument><expr><name>mid</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>er</name> <operator>==</operator> <name>REG_OKAY</name></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/* satisfaction */</comment>
					<expr_stmt><expr><call><name>MDEBUG</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"successful\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return <expr><name>REG_OKAY</name></expr>;</return>
				</block_content>}</block></if></if_stmt>
				<comment type="block">/* Reset left's matches (right should have done so itself) */</comment>
				<expr_stmt><expr><call><name>zaptreesubs</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>er</name> <operator>!=</operator> <name>REG_NOMATCH</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>er</name></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>NOERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* that midpoint didn't work, find a new one */</comment>
		<if_stmt><if>if <condition>(<expr><name>mid</name> <operator>==</operator> <name>end</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* all possibilities exhausted */</comment>
			<expr_stmt><expr><call><name>MDEBUG</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%d no midpoint\n"</literal><operator>,</operator> <name><name>t</name><operator>-&gt;</operator><name>id</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>REG_NOMATCH</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>mid</name> <operator>=</operator> <call><name>shortest</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>begin</name></expr></argument>, <argument><expr><name>mid</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>(</operator><name>chr</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>NOERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>mid</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* failed to find a new one */</comment>
			<expr_stmt><expr><call><name>MDEBUG</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%d failed midpoint\n"</literal><operator>,</operator> <name><name>t</name><operator>-&gt;</operator><name>id</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>REG_NOMATCH</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>MDEBUG</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%d: new midpoint %ld\n"</literal><operator>,</operator> <name><name>t</name><operator>-&gt;</operator><name>id</name></name><operator>,</operator> <call><name>LOFF</name><argument_list>(<argument><expr><name>mid</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* can't get here */</comment>
	<return>return <expr><name>REG_ASSERT</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * cbrdissect - dissect match for backref node
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>						<comment type="block">/* regexec return code */</comment>
<name>cbrdissect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vars</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>,
		   <parameter><decl><type><name><name>struct</name> <name>subre</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>,
		   <parameter><decl><type><name>chr</name> <modifier>*</modifier></type><name>begin</name></decl></parameter>,			<comment type="block">/* beginning of relevant substring */</comment>
		   <parameter><decl><type><name>chr</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>			<comment type="block">/* end of same */</comment>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>n</name> <init>= <expr><name><name>t</name><operator>-&gt;</operator><name>subno</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>numreps</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>tlen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>brlen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>chr</name>		   <modifier>*</modifier></type><name>brstring</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>chr</name>		   <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>min</name> <init>= <expr><name><name>t</name><operator>-&gt;</operator><name>min</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>max</name> <init>= <expr><name><name>t</name><operator>-&gt;</operator><name>max</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>t</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <literal type="char">'b'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>n</name> <operator>&lt;</operator> <name><name>v</name><operator>-&gt;</operator><name>nmatch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>MDEBUG</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"cbackref n%d %d{%d-%d}\n"</literal><operator>,</operator> <name><name>t</name><operator>-&gt;</operator><name>id</name></name><operator>,</operator> <name>n</name><operator>,</operator> <name>min</name><operator>,</operator> <name>max</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* get the backreferenced string */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>pmatch</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>rm_so</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>REG_NOMATCH</name></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>brstring</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>start</name></name> <operator>+</operator> <name><name>v</name><operator>-&gt;</operator><name>pmatch</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>rm_so</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>brlen</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>pmatch</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>rm_eo</name> <operator>-</operator> <name><name>v</name><operator>-&gt;</operator><name>pmatch</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>rm_so</name></expr>;</expr_stmt>

	<comment type="block">/* special cases for zero-length strings */</comment>
	<if_stmt><if>if <condition>(<expr><name>brlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * matches only if target is zero length, but any number of
		 * repetitions can be considered to be present
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>begin</name> <operator>==</operator> <name>end</name> <operator>&amp;&amp;</operator> <name>min</name> <operator>&lt;=</operator> <name>max</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>MDEBUG</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"cbackref matched trivially\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>REG_OKAY</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><name>REG_NOMATCH</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>begin</name> <operator>==</operator> <name>end</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* matches only if zero repetitions are okay */</comment>
		<if_stmt><if>if <condition>(<expr><name>min</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>MDEBUG</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"cbackref matched trivially\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>REG_OKAY</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><name>REG_NOMATCH</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * check target length to see if it could possibly be an allowed number of
	 * repetitions of brstring
	 */</comment>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>end</name> <operator>&gt;</operator> <name>begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tlen</name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>begin</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>tlen</name> <operator>%</operator> <name>brlen</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>REG_NOMATCH</name></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>numreps</name> <operator>=</operator> <name>tlen</name> <operator>/</operator> <name>brlen</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>numreps</name> <operator>&lt;</operator> <name>min</name> <operator>||</operator> <operator>(</operator><name>numreps</name> <operator>&gt;</operator> <name>max</name> <operator>&amp;&amp;</operator> <name>max</name> <operator>!=</operator> <name>DUPINF</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>REG_NOMATCH</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* okay, compare the actual string contents */</comment>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <name>begin</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>numreps</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call>(<modifier>*</modifier><name><name>v</name><operator>-&gt;</operator><name>g</name><operator>-&gt;</operator><name>compare</name></name>) <argument_list>(<argument><expr><name>brstring</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>brlen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>REG_NOMATCH</name></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>brlen</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>MDEBUG</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"cbackref matched\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>REG_OKAY</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * caltdissect - dissect match for alternation node
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>						<comment type="block">/* regexec return code */</comment>
<name>caltdissect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vars</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>,
			<parameter><decl><type><name><name>struct</name> <name>subre</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>,
			<parameter><decl><type><name>chr</name> <modifier>*</modifier></type><name>begin</name></decl></parameter>,			<comment type="block">/* beginning of relevant substring */</comment>
			<parameter><decl><type><name>chr</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>			<comment type="block">/* end of same */</comment>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>dfa</name></name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>er</name></decl>;</decl_stmt>

	<comment type="block">/* We loop, rather than tail-recurse, to handle a chain of alternatives */</comment>
	<while>while <condition>(<expr><name>t</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <literal type="char">'|'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>left</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>t</name><operator>-&gt;</operator><name>left</name><operator>-&gt;</operator><name>cnfa</name><operator>.</operator><name>nstates</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>MDEBUG</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"calt n%d\n"</literal><operator>,</operator> <name><name>t</name><operator>-&gt;</operator><name>id</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>getsubdfa</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>NOERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>longest</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>begin</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>end</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>MDEBUG</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"calt matched\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>er</name> <operator>=</operator> <call><name>cdissect</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><name>begin</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>er</name> <operator>!=</operator> <name>REG_NOMATCH</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>er</name></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>NOERR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>right</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>REG_NOMATCH</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * citerdissect - dissect match for iteration node
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>						<comment type="block">/* regexec return code */</comment>
<name>citerdissect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vars</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>,
			 <parameter><decl><type><name><name>struct</name> <name>subre</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>,
			 <parameter><decl><type><name>chr</name> <modifier>*</modifier></type><name>begin</name></decl></parameter>,		<comment type="block">/* beginning of relevant substring */</comment>
			 <parameter><decl><type><name>chr</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>			<comment type="block">/* end of same */</comment>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>dfa</name></name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>chr</name>		  <modifier>*</modifier><modifier>*</modifier></type><name>endpts</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>chr</name>		   <modifier>*</modifier></type><name>limit</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>min_matches</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>max_matches</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>nverified</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>k</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>er</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>left</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>t</name><operator>-&gt;</operator><name>left</name><operator>-&gt;</operator><name>cnfa</name><operator>.</operator><name>nstates</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name><name>t</name><operator>-&gt;</operator><name>left</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SHORTER</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>begin</name> <operator>&lt;=</operator> <name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * For the moment, assume the minimum number of matches is 1.  If zero
	 * matches are allowed, and the target string is empty, we are allowed to
	 * match regardless of the contents of the iter node --- but we would
	 * prefer to match once, so that capturing parens get set.  (An example of
	 * the concern here is a pattern like "()*\1", which historically this
	 * code has allowed to succeed.)  Therefore, we deal with the zero-matches
	 * case at the bottom, after failing to find any other way to match.
	 */</comment>
	<expr_stmt><expr><name>min_matches</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>min</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>min_matches</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>min_matches</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * We need workspace to track the endpoints of each sub-match.  Normally
	 * we consider only nonzero-length sub-matches, so there can be at most
	 * end-begin of them.  However, if min is larger than that, we will also
	 * consider zero-length sub-matches in order to find enough matches.
	 *
	 * For convenience, endpts[0] contains the "begin" pointer and we store
	 * sub-match endpoints in endpts[1..max_matches].
	 */</comment>
	<expr_stmt><expr><name>max_matches</name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>begin</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>max_matches</name> <operator>&gt;</operator> <name><name>t</name><operator>-&gt;</operator><name>max</name></name> <operator>&amp;&amp;</operator> <name><name>t</name><operator>-&gt;</operator><name>max</name></name> <operator>!=</operator> <name>DUPINF</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>max_matches</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>max</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>max_matches</name> <operator>&lt;</operator> <name>min_matches</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>max_matches</name> <operator>=</operator> <name>min_matches</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>endpts</name> <operator>=</operator> <operator>(</operator><name>chr</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>MALLOC</name><argument_list>(<argument><expr><operator>(</operator><name>max_matches</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>chr</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>endpts</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>REG_ESPACE</name></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>endpts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>begin</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>getsubdfa</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>ISERR</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name>endpts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name><name>v</name><operator>-&gt;</operator><name>err</name></name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>MDEBUG</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"citer %d\n"</literal><operator>,</operator> <name><name>t</name><operator>-&gt;</operator><name>id</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Our strategy is to first find a set of sub-match endpoints that are
	 * valid according to the child node's DFA, and then recursively dissect
	 * each sub-match to confirm validity.  If any validity check fails,
	 * backtrack that sub-match and try again.  And, when we next try for a
	 * validity check, we need not recheck any successfully verified
	 * sub-matches that we didn't move the endpoints of.  nverified remembers
	 * how many sub-matches are currently known okay.
	 */</comment>

	<comment type="block">/* initialize to consider first sub-match */</comment>
	<expr_stmt><expr><name>nverified</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>limit</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>

	<comment type="block">/* iterate until satisfaction or failure */</comment>
	<while>while <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* try to find an endpoint for the k'th sub-match */</comment>
		<expr_stmt><expr><name><name>endpts</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>longest</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>endpts</name><index>[<expr><name>k</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>ISERR</name><argument_list>()</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name>endpts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name><name>v</name><operator>-&gt;</operator><name>err</name></name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>endpts</name><index>[<expr><name>k</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* no match possible, so see if we can shorten previous one */</comment>
			<expr_stmt><expr><name>k</name><operator>--</operator></expr>;</expr_stmt>
			<goto>goto <name>backtrack</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>MDEBUG</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%d: working endpoint %d: %ld\n"</literal><operator>,</operator>
				<name><name>t</name><operator>-&gt;</operator><name>id</name></name><operator>,</operator> <name>k</name><operator>,</operator> <call><name>LOFF</name><argument_list>(<argument><expr><name><name>endpts</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* k'th sub-match can no longer be considered verified */</comment>
		<if_stmt><if>if <condition>(<expr><name>nverified</name> <operator>&gt;=</operator> <name>k</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>nverified</name> <operator>=</operator> <name>k</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>endpts</name><index>[<expr><name>k</name></expr>]</index></name> <operator>!=</operator> <name>end</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* haven't reached end yet, try another iteration if allowed */</comment>
			<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;=</operator> <name>max_matches</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* must try to shorten some previous match */</comment>
				<expr_stmt><expr><name>k</name><operator>--</operator></expr>;</expr_stmt>
				<goto>goto <name>backtrack</name>;</goto>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/* reject zero-length match unless necessary to achieve min */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>endpts</name><index>[<expr><name>k</name></expr>]</index></name> <operator>==</operator> <name><name>endpts</name><index>[<expr><name>k</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator>
				<operator>(</operator><name>k</name> <operator>&gt;=</operator> <name>min_matches</name> <operator>||</operator> <name>min_matches</name> <operator>-</operator> <name>k</name> <operator>&lt;</operator> <name>end</name> <operator>-</operator> <name><name>endpts</name><index>[<expr><name>k</name></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
				<goto>goto <name>backtrack</name>;</goto></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>limit</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * We've identified a way to divide the string into k sub-matches that
		 * works so far as the child DFA can tell.  If k is an allowed number
		 * of matches, start the slow part: recurse to verify each sub-match.
		 * We always have k &lt;= max_matches, needn't check that.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&lt;</operator> <name>min_matches</name></expr>)</condition><block type="pseudo"><block_content>
			<goto>goto <name>backtrack</name>;</goto></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>MDEBUG</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%d: verifying %d..%d\n"</literal><operator>,</operator> <name><name>t</name><operator>-&gt;</operator><name>id</name></name><operator>,</operator> <name>nverified</name> <operator>+</operator> <literal type="number">1</literal><operator>,</operator> <name>k</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>nverified</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<comment type="block">/* zap any match data from a non-last iteration */</comment>
			<expr_stmt><expr><call><name>zaptreesubs</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>er</name> <operator>=</operator> <call><name>cdissect</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><name><name>endpts</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>endpts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>er</name> <operator>==</operator> <name>REG_OKAY</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>nverified</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>er</name> <operator>==</operator> <name>REG_NOMATCH</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<comment type="block">/* oops, something failed */</comment>
			<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name>endpts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>er</name></expr>;</return>
		</block_content>}</block></for>

		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <name>k</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* satisfaction */</comment>
			<expr_stmt><expr><call><name>MDEBUG</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%d successful\n"</literal><operator>,</operator> <name><name>t</name><operator>-&gt;</operator><name>id</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name>endpts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>REG_OKAY</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* i'th match failed to verify, so backtrack it */</comment>
		<expr_stmt><expr><name>k</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<label><name>backtrack</name>:</label>

		<comment type="block">/*
		 * Must consider shorter versions of the k'th sub-match.  However,
		 * we'll only ask for a zero-length match if necessary.
		 */</comment>
		<while>while <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>chr</name>		   <modifier>*</modifier></type><name>prev_end</name> <init>= <expr><name><name>endpts</name><index>[<expr><name>k</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>endpts</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&gt;</operator> <name>prev_end</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>limit</name> <operator>=</operator> <name><name>endpts</name><index>[<expr><name>k</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>limit</name> <operator>&gt;</operator> <name>prev_end</name> <operator>||</operator>
					<operator>(</operator><name>k</name> <operator>&lt;</operator> <name>min_matches</name> <operator>&amp;&amp;</operator> <name>min_matches</name> <operator>-</operator> <name>k</name> <operator>&gt;=</operator> <name>end</name> <operator>-</operator> <name>prev_end</name><operator>)</operator></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/* break out of backtrack loop, continue the outer one */</comment>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* can't shorten k'th sub-match any more, consider previous one */</comment>
			<expr_stmt><expr><name>k</name><operator>--</operator></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></while>

	<comment type="block">/* all possibilities exhausted */</comment>
	<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name>endpts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Now consider the possibility that we can match to a zero-length string
	 * by using zero repetitions.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>min</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>begin</name> <operator>==</operator> <name>end</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>MDEBUG</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%d allowing zero matches\n"</literal><operator>,</operator> <name><name>t</name><operator>-&gt;</operator><name>id</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>REG_OKAY</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>MDEBUG</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%d failed\n"</literal><operator>,</operator> <name><name>t</name><operator>-&gt;</operator><name>id</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>REG_NOMATCH</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * creviterdissect - dissect match for iteration node, shortest-first
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>						<comment type="block">/* regexec return code */</comment>
<name>creviterdissect</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vars</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>,
				<parameter><decl><type><name><name>struct</name> <name>subre</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>,
				<parameter><decl><type><name>chr</name> <modifier>*</modifier></type><name>begin</name></decl></parameter>,		<comment type="block">/* beginning of relevant substring */</comment>
				<parameter><decl><type><name>chr</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>		<comment type="block">/* end of same */</comment>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>dfa</name></name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>chr</name>		  <modifier>*</modifier><modifier>*</modifier></type><name>endpts</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>chr</name>		   <modifier>*</modifier></type><name>limit</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>min_matches</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>max_matches</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>nverified</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>k</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>er</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>left</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>t</name><operator>-&gt;</operator><name>left</name><operator>-&gt;</operator><name>cnfa</name><operator>.</operator><name>nstates</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>left</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SHORTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>begin</name> <operator>&lt;=</operator> <name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * If zero matches are allowed, and target string is empty, just declare
	 * victory.  OTOH, if target string isn't empty, zero matches can't work
	 * so we pretend the min is 1.
	 */</comment>
	<expr_stmt><expr><name>min_matches</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>min</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>min_matches</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>begin</name> <operator>==</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>REG_OKAY</name></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>min_matches</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * We need workspace to track the endpoints of each sub-match.  Normally
	 * we consider only nonzero-length sub-matches, so there can be at most
	 * end-begin of them.  However, if min is larger than that, we will also
	 * consider zero-length sub-matches in order to find enough matches.
	 *
	 * For convenience, endpts[0] contains the "begin" pointer and we store
	 * sub-match endpoints in endpts[1..max_matches].
	 */</comment>
	<expr_stmt><expr><name>max_matches</name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>begin</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>max_matches</name> <operator>&gt;</operator> <name><name>t</name><operator>-&gt;</operator><name>max</name></name> <operator>&amp;&amp;</operator> <name><name>t</name><operator>-&gt;</operator><name>max</name></name> <operator>!=</operator> <name>DUPINF</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>max_matches</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>max</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>max_matches</name> <operator>&lt;</operator> <name>min_matches</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>max_matches</name> <operator>=</operator> <name>min_matches</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>endpts</name> <operator>=</operator> <operator>(</operator><name>chr</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>MALLOC</name><argument_list>(<argument><expr><operator>(</operator><name>max_matches</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>chr</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>endpts</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>REG_ESPACE</name></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>endpts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>begin</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>getsubdfa</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>ISERR</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name>endpts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name><name>v</name><operator>-&gt;</operator><name>err</name></name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>MDEBUG</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"creviter %d\n"</literal><operator>,</operator> <name><name>t</name><operator>-&gt;</operator><name>id</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Our strategy is to first find a set of sub-match endpoints that are
	 * valid according to the child node's DFA, and then recursively dissect
	 * each sub-match to confirm validity.  If any validity check fails,
	 * backtrack that sub-match and try again.  And, when we next try for a
	 * validity check, we need not recheck any successfully verified
	 * sub-matches that we didn't move the endpoints of.  nverified remembers
	 * how many sub-matches are currently known okay.
	 */</comment>

	<comment type="block">/* initialize to consider first sub-match */</comment>
	<expr_stmt><expr><name>nverified</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>limit</name> <operator>=</operator> <name>begin</name></expr>;</expr_stmt>

	<comment type="block">/* iterate until satisfaction or failure */</comment>
	<while>while <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* disallow zero-length match unless necessary to achieve min */</comment>
		<if_stmt><if>if <condition>(<expr><name>limit</name> <operator>==</operator> <name><name>endpts</name><index>[<expr><name>k</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator>
			<name>limit</name> <operator>!=</operator> <name>end</name> <operator>&amp;&amp;</operator>
			<operator>(</operator><name>k</name> <operator>&gt;=</operator> <name>min_matches</name> <operator>||</operator> <name>min_matches</name> <operator>-</operator> <name>k</name> <operator>&lt;</operator> <name>end</name> <operator>-</operator> <name>limit</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>limit</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* if this is the last allowed sub-match, it must reach to the end */</comment>
		<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;=</operator> <name>max_matches</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>limit</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* try to find an endpoint for the k'th sub-match */</comment>
		<expr_stmt><expr><name><name>endpts</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>shortest</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>endpts</name><index>[<expr><name>k</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><name>end</name></expr></argument>,
							 <argument><expr><operator>(</operator><name>chr</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>ISERR</name><argument_list>()</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name>endpts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name><name>v</name><operator>-&gt;</operator><name>err</name></name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>endpts</name><index>[<expr><name>k</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* no match possible, so see if we can lengthen previous one */</comment>
			<expr_stmt><expr><name>k</name><operator>--</operator></expr>;</expr_stmt>
			<goto>goto <name>backtrack</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>MDEBUG</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%d: working endpoint %d: %ld\n"</literal><operator>,</operator>
				<name><name>t</name><operator>-&gt;</operator><name>id</name></name><operator>,</operator> <name>k</name><operator>,</operator> <call><name>LOFF</name><argument_list>(<argument><expr><name><name>endpts</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* k'th sub-match can no longer be considered verified */</comment>
		<if_stmt><if>if <condition>(<expr><name>nverified</name> <operator>&gt;=</operator> <name>k</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>nverified</name> <operator>=</operator> <name>k</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>endpts</name><index>[<expr><name>k</name></expr>]</index></name> <operator>!=</operator> <name>end</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* haven't reached end yet, try another iteration if allowed */</comment>
			<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;=</operator> <name>max_matches</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* must try to lengthen some previous match */</comment>
				<expr_stmt><expr><name>k</name><operator>--</operator></expr>;</expr_stmt>
				<goto>goto <name>backtrack</name>;</goto>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>limit</name> <operator>=</operator> <name><name>endpts</name><index>[<expr><name>k</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * We've identified a way to divide the string into k sub-matches that
		 * works so far as the child DFA can tell.  If k is an allowed number
		 * of matches, start the slow part: recurse to verify each sub-match.
		 * We always have k &lt;= max_matches, needn't check that.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&lt;</operator> <name>min_matches</name></expr>)</condition><block type="pseudo"><block_content>
			<goto>goto <name>backtrack</name>;</goto></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>MDEBUG</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%d: verifying %d..%d\n"</literal><operator>,</operator> <name><name>t</name><operator>-&gt;</operator><name>id</name></name><operator>,</operator> <name>nverified</name> <operator>+</operator> <literal type="number">1</literal><operator>,</operator> <name>k</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>nverified</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<comment type="block">/* zap any match data from a non-last iteration */</comment>
			<expr_stmt><expr><call><name>zaptreesubs</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>er</name> <operator>=</operator> <call><name>cdissect</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><name><name>endpts</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>endpts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>er</name> <operator>==</operator> <name>REG_OKAY</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>nverified</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>er</name> <operator>==</operator> <name>REG_NOMATCH</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<comment type="block">/* oops, something failed */</comment>
			<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name>endpts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>er</name></expr>;</return>
		</block_content>}</block></for>

		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <name>k</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* satisfaction */</comment>
			<expr_stmt><expr><call><name>MDEBUG</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%d successful\n"</literal><operator>,</operator> <name><name>t</name><operator>-&gt;</operator><name>id</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name>endpts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>REG_OKAY</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* i'th match failed to verify, so backtrack it */</comment>
		<expr_stmt><expr><name>k</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<label><name>backtrack</name>:</label>

		<comment type="block">/*
		 * Must consider longer versions of the k'th sub-match.
		 */</comment>
		<while>while <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>endpts</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&lt;</operator> <name>end</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>limit</name> <operator>=</operator> <name><name>endpts</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<comment type="block">/* break out of backtrack loop, continue the outer one */</comment>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* can't lengthen k'th sub-match any more, consider previous one */</comment>
			<expr_stmt><expr><name>k</name><operator>--</operator></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></while>

	<comment type="block">/* all possibilities exhausted */</comment>
	<expr_stmt><expr><call><name>MDEBUG</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%d failed\n"</literal><operator>,</operator> <name><name>t</name><operator>-&gt;</operator><name>id</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><name>endpts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>REG_NOMATCH</name></expr>;</return>
</block_content>}</block></function>



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rege_dfa.c"</cpp:file></cpp:include>
</unit>
