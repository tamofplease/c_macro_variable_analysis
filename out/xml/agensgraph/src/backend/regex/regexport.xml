<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/backend/regex/regexport.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * regexport.c
 *	  Functions for exporting info about a regex's NFA
 *
 * In this implementation, the NFA defines a necessary but not sufficient
 * condition for a string to match the regex: that is, there can be strings
 * that match the NFA but don't match the full regex, but not vice versa.
 * Thus, for example, it is okay for the functions below to treat lookaround
 * constraints as no-ops, since they merely constrain the string some more.
 *
 * Notice that these functions return info into caller-provided arrays
 * rather than doing their own malloc's.  This simplifies the APIs by
 * eliminating a class of error conditions, and in the case of colors
 * allows the caller to decide how big is too big to bother with.
 *
 *
 * Portions Copyright (c) 2013-2020, PostgreSQL Global Development Group
 * Portions Copyright (c) 1998, 1999 Henry Spencer
 *
 * IDENTIFICATION
 *	  src/backend/regex/regexport.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"regex/regguts.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"regex/regexport.h"</cpp:file></cpp:include>


<comment type="block">/*
 * Get total number of NFA states.
 */</comment>
<function><type><name>int</name></type>
<name>pg_reg_getnumstates</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>regex_t</name> <modifier>*</modifier></type><name>regex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>cnfa</name></name> <modifier>*</modifier></type><name>cnfa</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>regex</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>regex</name><operator>-&gt;</operator><name>re_magic</name></name> <operator>==</operator> <name>REMAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cnfa</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><operator>(</operator>struct <name>guts</name> <operator>*</operator><operator>)</operator> <name><name>regex</name><operator>-&gt;</operator><name>re_guts</name></name><operator>)</operator><operator>-&gt;</operator><name>search</name></expr>;</expr_stmt>

	<return>return <expr><name><name>cnfa</name><operator>-&gt;</operator><name>nstates</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Get initial state of NFA.
 */</comment>
<function><type><name>int</name></type>
<name>pg_reg_getinitialstate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>regex_t</name> <modifier>*</modifier></type><name>regex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>cnfa</name></name> <modifier>*</modifier></type><name>cnfa</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>regex</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>regex</name><operator>-&gt;</operator><name>re_magic</name></name> <operator>==</operator> <name>REMAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cnfa</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><operator>(</operator>struct <name>guts</name> <operator>*</operator><operator>)</operator> <name><name>regex</name><operator>-&gt;</operator><name>re_guts</name></name><operator>)</operator><operator>-&gt;</operator><name>search</name></expr>;</expr_stmt>

	<return>return <expr><name><name>cnfa</name><operator>-&gt;</operator><name>pre</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Get final state of NFA.
 */</comment>
<function><type><name>int</name></type>
<name>pg_reg_getfinalstate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>regex_t</name> <modifier>*</modifier></type><name>regex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>cnfa</name></name> <modifier>*</modifier></type><name>cnfa</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>regex</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>regex</name><operator>-&gt;</operator><name>re_magic</name></name> <operator>==</operator> <name>REMAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cnfa</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><operator>(</operator>struct <name>guts</name> <operator>*</operator><operator>)</operator> <name><name>regex</name><operator>-&gt;</operator><name>re_guts</name></name><operator>)</operator><operator>-&gt;</operator><name>search</name></expr>;</expr_stmt>

	<return>return <expr><name><name>cnfa</name><operator>-&gt;</operator><name>post</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * pg_reg_getnumoutarcs() and pg_reg_getoutarcs() mask the existence of LACON
 * arcs from the caller, treating any LACON as being automatically satisfied.
 * Since the output representation does not support arcs that consume no
 * character when traversed, we have to recursively traverse LACON arcs here,
 * and report whatever normal arcs are reachable by traversing LACON arcs.
 * Note that this wouldn't work if it were possible to reach the final state
 * via LACON traversal, but the regex library never builds NFAs that have
 * LACON arcs leading directly to the final state.  (This is because the
 * regex executor is designed to consume one character beyond the nominal
 * match end --- possibly an EOS indicator --- so there is always a set of
 * ordinary arcs leading to the final state.)
 *
 * traverse_lacons is a recursive subroutine used by both exported functions
 * to count and then emit the reachable regular arcs.  *arcs_count is
 * incremented by the number of reachable arcs, and as many as will fit in
 * arcs_len (possibly 0) are emitted into arcs[].
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>traverse_lacons</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cnfa</name></name> <modifier>*</modifier></type><name>cnfa</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>st</name></decl></parameter>,
				<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>arcs_count</name></decl></parameter>,
				<parameter><decl><type><name>regex_arc_t</name> <modifier>*</modifier></type><name>arcs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>arcs_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>carc</name></name> <modifier>*</modifier></type><name>ca</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Since this function recurses, it could theoretically be driven to stack
	 * overflow.  In practice, this is mostly useful to backstop against a
	 * failure of the regex compiler to remove a loop of LACON arcs.
	 */</comment>
	<expr_stmt><expr><call><name>check_stack_depth</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>ca</name> <operator>=</operator> <name><name>cnfa</name><operator>-&gt;</operator><name>states</name><index>[<expr><name>st</name></expr>]</index></name></expr>;</init> <condition><expr><name><name>ca</name><operator>-&gt;</operator><name>co</name></name> <operator>!=</operator> <name>COLORLESS</name></expr>;</condition> <incr><expr><name>ca</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>ca</name><operator>-&gt;</operator><name>co</name></name> <operator>&lt;</operator> <name><name>cnfa</name><operator>-&gt;</operator><name>ncolors</name></name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Ordinary arc, so count and possibly emit it */</comment>
			<decl_stmt><decl><type><name>int</name></type>			<name>ndx</name> <init>= <expr><operator>(</operator><operator>*</operator><name>arcs_count</name><operator>)</operator><operator>++</operator></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>ndx</name> <operator>&lt;</operator> <name>arcs_len</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>arcs</name><index>[<expr><name>ndx</name></expr>]</index></name><operator>.</operator><name>co</name> <operator>=</operator> <name><name>ca</name><operator>-&gt;</operator><name>co</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>arcs</name><index>[<expr><name>ndx</name></expr>]</index></name><operator>.</operator><name>to</name> <operator>=</operator> <name><name>ca</name><operator>-&gt;</operator><name>to</name></name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/* LACON arc --- assume it's satisfied and recurse... */</comment>
			<comment type="block">/* ... but first, assert it doesn't lead directly to post state */</comment>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>ca</name><operator>-&gt;</operator><name>to</name></name> <operator>!=</operator> <name><name>cnfa</name><operator>-&gt;</operator><name>post</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>traverse_lacons</name><argument_list>(<argument><expr><name>cnfa</name></expr></argument>, <argument><expr><name><name>ca</name><operator>-&gt;</operator><name>to</name></name></expr></argument>, <argument><expr><name>arcs_count</name></expr></argument>, <argument><expr><name>arcs</name></expr></argument>, <argument><expr><name>arcs_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
 * Get number of outgoing NFA arcs of state number "st".
 */</comment>
<function><type><name>int</name></type>
<name>pg_reg_getnumoutarcs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>regex_t</name> <modifier>*</modifier></type><name>regex</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>cnfa</name></name> <modifier>*</modifier></type><name>cnfa</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>arcs_count</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>regex</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>regex</name><operator>-&gt;</operator><name>re_magic</name></name> <operator>==</operator> <name>REMAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cnfa</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><operator>(</operator>struct <name>guts</name> <operator>*</operator><operator>)</operator> <name><name>regex</name><operator>-&gt;</operator><name>re_guts</name></name><operator>)</operator><operator>-&gt;</operator><name>search</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>st</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>st</name> <operator>&gt;=</operator> <name><name>cnfa</name><operator>-&gt;</operator><name>nstates</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>arcs_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>traverse_lacons</name><argument_list>(<argument><expr><name>cnfa</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arcs_count</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>arcs_count</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Write array of outgoing NFA arcs of state number "st" into arcs[],
 * whose length arcs_len must be at least as long as indicated by
 * pg_reg_getnumoutarcs(), else not all arcs will be returned.
 */</comment>
<function><type><name>void</name></type>
<name>pg_reg_getoutarcs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>regex_t</name> <modifier>*</modifier></type><name>regex</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>st</name></decl></parameter>,
				  <parameter><decl><type><name>regex_arc_t</name> <modifier>*</modifier></type><name>arcs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>arcs_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>cnfa</name></name> <modifier>*</modifier></type><name>cnfa</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>arcs_count</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>regex</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>regex</name><operator>-&gt;</operator><name>re_magic</name></name> <operator>==</operator> <name>REMAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cnfa</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><operator>(</operator>struct <name>guts</name> <operator>*</operator><operator>)</operator> <name><name>regex</name><operator>-&gt;</operator><name>re_guts</name></name><operator>)</operator><operator>-&gt;</operator><name>search</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>st</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>st</name> <operator>&gt;=</operator> <name><name>cnfa</name><operator>-&gt;</operator><name>nstates</name></name> <operator>||</operator> <name>arcs_len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>arcs_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>traverse_lacons</name><argument_list>(<argument><expr><name>cnfa</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arcs_count</name></expr></argument>, <argument><expr><name>arcs</name></expr></argument>, <argument><expr><name>arcs_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Get total number of colors.
 */</comment>
<function><type><name>int</name></type>
<name>pg_reg_getnumcolors</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>regex_t</name> <modifier>*</modifier></type><name>regex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>colormap</name></name> <modifier>*</modifier></type><name>cm</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>regex</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>regex</name><operator>-&gt;</operator><name>re_magic</name></name> <operator>==</operator> <name>REMAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cm</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><operator>(</operator>struct <name>guts</name> <operator>*</operator><operator>)</operator> <name><name>regex</name><operator>-&gt;</operator><name>re_guts</name></name><operator>)</operator><operator>-&gt;</operator><name>cmap</name></expr>;</expr_stmt>

	<return>return <expr><name><name>cm</name><operator>-&gt;</operator><name>max</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Check if color is beginning of line/string.
 *
 * (We might at some point need to offer more refined handling of pseudocolors,
 * but this will do for now.)
 */</comment>
<function><type><name>int</name></type>
<name>pg_reg_colorisbegin</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>regex_t</name> <modifier>*</modifier></type><name>regex</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>co</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>cnfa</name></name> <modifier>*</modifier></type><name>cnfa</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>regex</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>regex</name><operator>-&gt;</operator><name>re_magic</name></name> <operator>==</operator> <name>REMAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cnfa</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><operator>(</operator>struct <name>guts</name> <operator>*</operator><operator>)</operator> <name><name>regex</name><operator>-&gt;</operator><name>re_guts</name></name><operator>)</operator><operator>-&gt;</operator><name>search</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>co</name> <operator>==</operator> <name><name>cnfa</name><operator>-&gt;</operator><name>bos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <name>co</name> <operator>==</operator> <name><name>cnfa</name><operator>-&gt;</operator><name>bos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Check if color is end of line/string.
 */</comment>
<function><type><name>int</name></type>
<name>pg_reg_colorisend</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>regex_t</name> <modifier>*</modifier></type><name>regex</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>co</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>cnfa</name></name> <modifier>*</modifier></type><name>cnfa</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>regex</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>regex</name><operator>-&gt;</operator><name>re_magic</name></name> <operator>==</operator> <name>REMAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cnfa</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><operator>(</operator>struct <name>guts</name> <operator>*</operator><operator>)</operator> <name><name>regex</name><operator>-&gt;</operator><name>re_guts</name></name><operator>)</operator><operator>-&gt;</operator><name>search</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>co</name> <operator>==</operator> <name><name>cnfa</name><operator>-&gt;</operator><name>eos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <name>co</name> <operator>==</operator> <name><name>cnfa</name><operator>-&gt;</operator><name>eos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Get number of member chrs of color number "co".
 *
 * Note: we return -1 if the color number is invalid, or if it is a special
 * color (WHITE or a pseudocolor), or if the number of members is uncertain.
 * Callers should not try to extract the members if -1 is returned.
 */</comment>
<function><type><name>int</name></type>
<name>pg_reg_getnumcharacters</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>regex_t</name> <modifier>*</modifier></type><name>regex</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>co</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>colormap</name></name> <modifier>*</modifier></type><name>cm</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>regex</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>regex</name><operator>-&gt;</operator><name>re_magic</name></name> <operator>==</operator> <name>REMAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cm</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><operator>(</operator>struct <name>guts</name> <operator>*</operator><operator>)</operator> <name><name>regex</name><operator>-&gt;</operator><name>re_guts</name></name><operator>)</operator><operator>-&gt;</operator><name>cmap</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>co</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>co</name> <operator>&gt;</operator> <name><name>cm</name><operator>-&gt;</operator><name>max</name></name></expr>)</condition><block type="pseudo"><block_content>	<comment type="block">/* we reject 0 which is WHITE */</comment>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>cm</name><operator>-&gt;</operator><name>cd</name><index>[<expr><name>co</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>PSEUDO</name></expr>)</condition><block type="pseudo"><block_content>	<comment type="block">/* also pseudocolors (BOS etc) */</comment>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * If the color appears anywhere in the high colormap, treat its number of
	 * members as uncertain.  In principle we could determine all the specific
	 * chrs corresponding to each such entry, but it would be expensive
	 * (particularly if character class tests are required) and it doesn't
	 * seem worth it.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>cm</name><operator>-&gt;</operator><name>cd</name><index>[<expr><name>co</name></expr>]</index></name><operator>.</operator><name>nuchrs</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* OK, return the known number of member chrs */</comment>
	<return>return <expr><name><name>cm</name><operator>-&gt;</operator><name>cd</name><index>[<expr><name>co</name></expr>]</index></name><operator>.</operator><name>nschrs</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Write array of member chrs of color number "co" into chars[],
 * whose length chars_len must be at least as long as indicated by
 * pg_reg_getnumcharacters(), else not all chars will be returned.
 *
 * Fetching the members of WHITE or a pseudocolor is not supported.
 *
 * Caution: this is a relatively expensive operation.
 */</comment>
<function><type><name>void</name></type>
<name>pg_reg_getcharacters</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>regex_t</name> <modifier>*</modifier></type><name>regex</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>co</name></decl></parameter>,
					 <parameter><decl><type><name>pg_wchar</name> <modifier>*</modifier></type><name>chars</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chars_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>colormap</name></name> <modifier>*</modifier></type><name>cm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>chr</name></type>			<name>c</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>regex</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>regex</name><operator>-&gt;</operator><name>re_magic</name></name> <operator>==</operator> <name>REMAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cm</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><operator>(</operator>struct <name>guts</name> <operator>*</operator><operator>)</operator> <name><name>regex</name><operator>-&gt;</operator><name>re_guts</name></name><operator>)</operator><operator>-&gt;</operator><name>cmap</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>co</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>co</name> <operator>&gt;</operator> <name><name>cm</name><operator>-&gt;</operator><name>max</name></name> <operator>||</operator> <name>chars_len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>cm</name><operator>-&gt;</operator><name>cd</name><index>[<expr><name>co</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>PSEUDO</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * We need only examine the low character map; there should not be any
	 * matching entries in the high map.
	 */</comment>
	<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <name>CHR_MIN</name></expr>;</init> <condition><expr><name>c</name> <operator>&lt;=</operator> <name>MAX_SIMPLE_CHR</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>cm</name><operator>-&gt;</operator><name>locolormap</name><index>[<expr><name>c</name> <operator>-</operator> <name>CHR_MIN</name></expr>]</index></name> <operator>==</operator> <name>co</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>chars</name><operator>++</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>--</operator><name>chars_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>
</unit>
