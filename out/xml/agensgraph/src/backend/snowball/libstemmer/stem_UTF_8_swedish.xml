<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/backend/snowball/libstemmer/stem_UTF_8_swedish.c"><comment type="block">/* This file was generated automatically by the Snowball to ISO C compiler */</comment>
<comment type="block">/* http://snowballstem.org/ */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"header.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>swedish_UTF_8_stem</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_other_suffix</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_consonant_pair</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_main_suffix</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_regions</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function_decl><type><specifier>extern</specifier> <name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>swedish_UTF_8_create_env</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>swedish_UTF_8_close_env</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_1</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'a'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'a'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_3</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'h'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'t'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'a'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_4</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'o'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'a'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_5</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'d'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_6</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'e'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_7</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'e'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_8</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'e'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_9</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'e'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_10</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="char">'e'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_11</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'t'</literal></expr>, <expr><literal type="char">'e'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_12</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'n'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_13</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'n'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_14</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'n'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_15</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'h'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'t'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'n'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_16</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="char">'n'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_17</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'r'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_18</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'r'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_19</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'h'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'t'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'r'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_20</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'o'</literal></expr>, <expr><literal type="char">'r'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_21</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_22</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_23</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_24</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_25</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'o'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_26</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_27</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_28</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_29</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_30</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_31</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'h'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'t'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_32</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_33</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'t'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_34</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'t'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_35</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'h'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'t'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_36</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'t'</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_0</name><index>[<expr><literal type="number">37</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><name>s_0_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_0_1</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  2 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_0_2</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  3 */</comment> <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><name>s_0_3</name></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  4 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_0_4</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  5 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_0_5</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  6 */</comment> <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><name>s_0_6</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  7 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_7</name></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  8 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_0_8</name></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  9 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_0_9</name></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 10 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_10</name></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 11 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_0_11</name></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 12 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_0_12</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 13 */</comment> <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><name>s_0_13</name></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 14 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_0_14</name></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 15 */</comment> <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><name>s_0_15</name></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 16 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_16</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 17 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_0_17</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 18 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_0_18</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 19 */</comment> <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><name>s_0_19</name></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 20 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_0_20</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 21 */</comment> <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><name>s_0_21</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 22 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_0_22</name></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 23 */</comment> <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><name>s_0_23</name></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 24 */</comment> <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><name>s_0_24</name></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 25 */</comment> <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><name>s_0_25</name></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 26 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_0_26</name></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 27 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_0_27</name></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 28 */</comment> <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><name>s_0_28</name></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 29 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_29</name></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 30 */</comment> <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><name>s_0_30</name></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 31 */</comment> <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><name>s_0_31</name></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 32 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_0_32</name></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 33 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_0_33</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 34 */</comment> <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><name>s_0_34</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 35 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_35</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 36 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_36</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_1_0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'d'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_1_1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'g'</literal></expr>, <expr><literal type="char">'d'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_1_2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'n'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_1_3</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'t'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_1_4</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'g'</literal></expr>, <expr><literal type="char">'t'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_1_5</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'t'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_1_6</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'t'</literal></expr>, <expr><literal type="char">'t'</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_1</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_1_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_1_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  2 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_1_2</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  3 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_1_3</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  4 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_1_4</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  5 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_1_5</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  6 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_1_6</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_2_0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'g'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_2_1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'l'</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'g'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_2_2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'l'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_2_3</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'f'</literal></expr>, <expr><literal type="char">'u'</literal></expr>, <expr><literal type="char">'l'</literal></expr>, <expr><literal type="char">'l'</literal></expr>, <expr><literal type="char">'t'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_2_4</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'l'</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xB6</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'t'</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_2</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_2_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_2_1</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  2 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_2_2</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  3 */</comment> <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><name>s_2_3</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  4 */</comment> <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><name>s_2_4</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>g_v</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">17</literal></expr>, <expr><literal type="number">65</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">32</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>g_s_ending</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">119</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">149</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'l'</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xB6</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_1</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'f'</literal></expr>, <expr><literal type="char">'u'</literal></expr>, <expr><literal type="char">'l'</literal></expr>, <expr><literal type="char">'l'</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_regions</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content> <comment type="block">/* forwardmode */</comment>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>I</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name></expr>;</expr_stmt> <comment type="block">/* $p1 = &lt;integer expression&gt;, line 28 */</comment>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>c_test1</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* test, line 29 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>skip_utf8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name></expr></argument>, <argument><expr><operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* hop, line 29 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>I</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* setmark x, line 29 */</comment>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c_test1</name></expr>;</expr_stmt>
    </block_content>}</block>
    <if_stmt><if>if <condition>(<expr><call><name>out_grouping_U</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>g_v</name></expr></argument>, <argument><expr><literal type="number">97</literal></expr></argument>, <argument><expr><literal type="number">246</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* goto */</comment> <comment type="block">/* grouping v, line 30 */</comment>
    <block>{<block_content>    <comment type="block">/* gopast */</comment> <comment type="block">/* non v, line 30 */</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>in_grouping_U</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>g_v</name></expr></argument>, <argument><expr><literal type="number">97</literal></expr></argument>, <argument><expr><literal type="number">246</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>I</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* setmark p1, line 30 */</comment>
    <comment type="block">/* try, line 31 */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>z</name><operator>-&gt;</operator><name>I</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>z</name><operator>-&gt;</operator><name>I</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab0</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* $(&lt;integer expression&gt; &lt; &lt;integer expression&gt;), line 31 */</comment>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>I</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>I</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <comment type="block">/* $p1 = &lt;integer expression&gt;, line 31 */</comment>
<label><name>lab0</name>:</label>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_main_suffix</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content> <comment type="block">/* backwardmode */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>among_var</name></decl>;</decl_stmt>

    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>mlimit1</name></decl>;</decl_stmt> <comment type="block">/* setlimit, line 37 */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>&lt;</operator> <name><name>z</name><operator>-&gt;</operator><name>I</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>mlimit1</name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>I</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 37 */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>&lt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>||</operator> <name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">5</literal> <operator>!=</operator> <literal type="number">3</literal> <operator>||</operator> <operator>!</operator><operator>(</operator><operator>(</operator><literal type="number">1851442</literal> <operator>&gt;&gt;</operator> <operator>(</operator><name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>=</operator> <name>mlimit1</name></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></if></if_stmt> <comment type="block">/* substring, line 37 */</comment>
        <expr_stmt><expr><name>among_var</name> <operator>=</operator> <call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_0</name></expr></argument>, <argument><expr><literal type="number">37</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>among_var</name><operator>)</operator></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>=</operator> <name>mlimit1</name></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 37 */</comment>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>=</operator> <name>mlimit1</name></expr>;</expr_stmt>
    </block_content>}</block>
    <switch>switch <condition>(<expr><name>among_var</name></expr>)</condition> <block>{<block_content> <comment type="block">/* among, line 38 */</comment>
        <case>case <expr><literal type="number">1</literal></expr>:</case>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 44 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <break>break;</break>
        <case>case <expr><literal type="number">2</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name>in_grouping_b_U</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>g_s_ending</name></expr></argument>, <argument><expr><literal type="number">98</literal></expr></argument>, <argument><expr><literal type="number">121</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* grouping s_ending, line 46 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 46 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <break>break;</break>
    </block_content>}</block></switch>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_consonant_pair</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content> <comment type="block">/* backwardmode */</comment>

    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>mlimit1</name></decl>;</decl_stmt> <comment type="block">/* setlimit, line 50 */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>&lt;</operator> <name><name>z</name><operator>-&gt;</operator><name>I</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>mlimit1</name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>I</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m2</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m2</name></expr>;</expr_stmt> <comment type="block">/* and, line 52 */</comment>
            <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>||</operator> <name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">5</literal> <operator>!=</operator> <literal type="number">3</literal> <operator>||</operator> <operator>!</operator><operator>(</operator><operator>(</operator><literal type="number">1064976</literal> <operator>&gt;&gt;</operator> <operator>(</operator><name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>=</operator> <name>mlimit1</name></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></if></if_stmt> <comment type="block">/* among, line 51 */</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_1</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>=</operator> <name>mlimit1</name></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m2</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 52 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>skip_utf8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>lb</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>=</operator> <name>mlimit1</name></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt> <comment type="block">/* next, line 52 */</comment>
            </block_content>}</block>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 52 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 52 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
        </block_content>}</block>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>=</operator> <name>mlimit1</name></expr>;</expr_stmt>
    </block_content>}</block>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_other_suffix</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content> <comment type="block">/* backwardmode */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>among_var</name></decl>;</decl_stmt>

    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>mlimit1</name></decl>;</decl_stmt> <comment type="block">/* setlimit, line 55 */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>&lt;</operator> <name><name>z</name><operator>-&gt;</operator><name>I</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>mlimit1</name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>I</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 56 */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>||</operator> <name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">5</literal> <operator>!=</operator> <literal type="number">3</literal> <operator>||</operator> <operator>!</operator><operator>(</operator><operator>(</operator><literal type="number">1572992</literal> <operator>&gt;&gt;</operator> <operator>(</operator><name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>=</operator> <name>mlimit1</name></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></if></if_stmt> <comment type="block">/* substring, line 56 */</comment>
        <expr_stmt><expr><name>among_var</name> <operator>=</operator> <call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_2</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>among_var</name><operator>)</operator></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>=</operator> <name>mlimit1</name></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 56 */</comment>
        <switch>switch <condition>(<expr><name>among_var</name></expr>)</condition> <block>{<block_content> <comment type="block">/* among, line 56 */</comment>
            <case>case <expr><literal type="number">1</literal></expr>:</case>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 57 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
                <break>break;</break>
            <case>case <expr><literal type="number">2</literal></expr>:</case>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>s_0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 58 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
                <break>break;</break>
            <case>case <expr><literal type="number">3</literal></expr>:</case>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>s_1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 59 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
                <break>break;</break>
        </block_content>}</block></switch>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>=</operator> <name>mlimit1</name></expr>;</expr_stmt>
    </block_content>}</block>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>int</name></type> <name>swedish_UTF_8_stem</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content> <comment type="block">/* forwardmode */</comment>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>c1</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* do, line 66 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_regions</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* call mark_regions, line 66 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab0</name>;</goto></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
    <label><name>lab0</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name></expr>;</expr_stmt> <comment type="block">/* backwards, line 67 */</comment>

    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m2</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m2</name></expr>;</expr_stmt> <comment type="block">/* do, line 68 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_main_suffix</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* call main_suffix, line 68 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab1</name>;</goto></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
    <label><name>lab1</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m2</name></expr>;</expr_stmt>
    </block_content>}</block>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m3</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m3</name></expr>;</expr_stmt> <comment type="block">/* do, line 69 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_consonant_pair</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* call consonant_pair, line 69 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab2</name>;</goto></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
    <label><name>lab2</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m3</name></expr>;</expr_stmt>
    </block_content>}</block>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m4</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m4</name></expr>;</expr_stmt> <comment type="block">/* do, line 70 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_other_suffix</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* call other_suffix, line 70 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab3</name>;</goto></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
    <label><name>lab3</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m4</name></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>swedish_UTF_8_create_env</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>SN_create_env</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>void</name></type> <name>swedish_UTF_8_close_env</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>SN_close_env</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

</unit>
