<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/backend/snowball/libstemmer/stem_UTF_8_tamil.c"><comment type="block">/* This file was generated automatically by the Snowball to ISO C compiler */</comment>
<comment type="block">/* http://snowballstem.org/ */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"header.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>tamil_UTF_8_stem</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_has_min_length</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_remove_common_word_endings</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_remove_tense_suffixes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_remove_tense_suffix</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_fix_endings</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_fix_ending</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_fix_va_start</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_remove_vetrumai_urupukal</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_remove_um</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_remove_command_suffixes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_remove_pronoun_prefixes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_remove_question_prefixes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_remove_question_suffixes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_remove_plural_suffix</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function_decl><type><specifier>extern</specifier> <name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>tamil_UTF_8_create_env</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>tamil_UTF_8_close_env</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x95</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x99</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x9A</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_3</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x9E</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_4</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA4</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_5</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_6</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAA</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_7</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAE</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_8</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAF</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_9</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB5</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_0</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  2 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_2</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  3 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_3</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  4 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_4</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  5 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_5</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  6 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_6</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  7 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_7</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  8 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_8</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  9 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_9</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_1_0</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA8</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA4</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_1_1</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA8</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_1_2</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA8</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA4</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">12</literal></expr>, <expr><name>s_1_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><name>s_1_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  2 */</comment> <expr><block>{ <expr><literal type="number">9</literal></expr>, <expr><name>s_1_2</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_2_0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x80</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_2_1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x88</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_2_2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBF</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_2_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_2_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  2 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_2_2</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_3_0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x95</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_3_1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x9A</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_3_2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x9F</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_3_3</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA4</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_3_4</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAA</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_3_5</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_3</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_3_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_3_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  2 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_3_2</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  3 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_3_3</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  4 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_3_4</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  5 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_3_5</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_4_0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x95</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_4_1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x9A</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_4_2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x9F</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_4_3</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA4</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_4_4</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAA</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_4_5</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_4</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_4_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_4_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  2 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_4_2</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  3 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_4_3</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  4 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_4_4</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  5 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_4_5</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_5_0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x95</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_5_1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x9A</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_5_2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x9F</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_5_3</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA4</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_5_4</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAA</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_5_5</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_5</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_5_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_5_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  2 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_5_2</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  3 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_5_3</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  4 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_5_4</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  5 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_5_5</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_6_0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAF</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_6_1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_6_2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB2</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_6_3</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB3</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_6_4</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB4</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_6_5</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB5</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_6</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_6_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_6_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  2 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_6_2</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  3 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_6_3</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  4 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_6_4</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  5 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_6_5</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_7_0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x99</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_7_1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x9E</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_7_2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA3</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_7_3</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_7_4</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA9</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_7_5</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAE</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_7</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_7_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_7_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  2 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_7_2</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  3 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_7_3</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  4 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_7_4</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  5 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_7_5</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_0</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB5</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAF</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB5</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_8</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><name>s_8_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_8_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  2 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_8_2</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_9_0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x80</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_9_1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x81</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_9_2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x82</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_9_3</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x86</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_9_4</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x87</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_9_5</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x88</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_9_6</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBE</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_9_7</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBF</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_9</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_9_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_9_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  2 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_9_2</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  3 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_9_3</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  4 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_9_4</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  5 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_9_5</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  6 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_9_6</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  7 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_9_7</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_10_0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x80</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_10_1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x81</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_10_2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x82</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_10_3</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x86</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_10_4</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x87</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_10_5</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x88</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_10_6</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBE</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_10_7</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBF</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_10</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_10_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_10_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  2 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_10_2</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  3 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_10_3</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  4 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_10_4</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  5 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_10_5</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  6 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_10_6</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  7 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_10_7</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_11_0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x85</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_11_1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x87</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_11_2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x89</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_11</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_11_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_11_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  2 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_11_2</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_12_0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x95</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_12_1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x99</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_12_2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x9A</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_12_3</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x9E</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_12_4</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA4</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_12_5</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_12_6</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAA</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_12_7</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAE</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_12_8</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAF</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_12_9</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB5</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_12</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_12_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_12_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  2 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_12_2</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  3 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_12_3</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  4 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_12_4</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  5 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_12_5</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  6 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_12_6</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  7 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_12_7</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  8 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_12_8</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  9 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_12_9</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_13_0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x95</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_13_1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x9A</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_13_2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x9F</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_13_3</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA4</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_13_4</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAA</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_13_5</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_13</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_13_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_13_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  2 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_13_2</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  3 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_13_3</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  4 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_13_4</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  5 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_13_5</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_14_0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x87</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_14_1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8B</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_14_2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBE</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_14</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_14_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_14_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  2 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_14_2</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_15_0</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBF</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_15_1</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB5</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBF</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_15</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><name>s_15_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><name>s_15_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_16_0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x80</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_16_1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x81</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_16_2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x82</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_16_3</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x86</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_16_4</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x87</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_16_5</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x88</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_16_6</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBE</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_16_7</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBF</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_16</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_16_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_16_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  2 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_16_2</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  3 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_16_3</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  4 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_16_4</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  5 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_16_5</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  6 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_16_6</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  7 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_16_7</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_17_0</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x81</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_17_1</name><index>[<expr><literal type="number">18</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB5</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x81</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_17_2</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x81</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_17_3</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB5</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x81</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_17_4</name><index>[<expr><literal type="number">18</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA4</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x81</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_17_5</name><index>[<expr><literal type="number">21</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB2</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB2</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBE</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_17_6</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x9F</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_17_7</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA3</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_17_8</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA4</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBE</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA9</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_17_9</name><index>[<expr><literal type="number">18</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA4</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBE</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA9</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_17_10</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAF</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_17_11</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBF</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_17_12</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBF</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_17</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><name>s_17_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">18</literal></expr>, <expr><name>s_17_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  2 */</comment> <expr><block>{ <expr><literal type="number">9</literal></expr>, <expr><name>s_17_2</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  3 */</comment> <expr><block>{ <expr><literal type="number">12</literal></expr>, <expr><name>s_17_3</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  4 */</comment> <expr><block>{ <expr><literal type="number">18</literal></expr>, <expr><name>s_17_4</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  5 */</comment> <expr><block>{ <expr><literal type="number">21</literal></expr>, <expr><name>s_17_5</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  6 */</comment> <expr><block>{ <expr><literal type="number">12</literal></expr>, <expr><name>s_17_6</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  7 */</comment> <expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><name>s_17_7</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  8 */</comment> <expr><block>{ <expr><literal type="number">9</literal></expr>, <expr><name>s_17_8</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  9 */</comment> <expr><block>{ <expr><literal type="number">18</literal></expr>, <expr><name>s_17_9</name></expr>, <expr><literal type="number">8</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 10 */</comment> <expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><name>s_17_10</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 11 */</comment> <expr><block>{ <expr><literal type="number">9</literal></expr>, <expr><name>s_17_11</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 12 */</comment> <expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><name>s_17_12</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_18_0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x95</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_18_1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x9A</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_18_2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x9F</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_18_3</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA4</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_18_4</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAA</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_18_5</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_18</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_18_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_18_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  2 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_18_2</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  3 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_18_3</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  4 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_18_4</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  5 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_18_5</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_19_0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x95</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_19_1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x9A</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_19_2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x9F</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_19_3</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA4</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_19_4</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAA</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_19_5</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_19</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_19_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_19_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  2 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_19_2</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  3 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_19_3</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  4 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_19_4</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  5 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_19_5</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_20_0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x80</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_20_1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x81</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_20_2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x82</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_20_3</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x86</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_20_4</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x87</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_20_5</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x88</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_20_6</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBE</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_20_7</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBF</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_20</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_20_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_20_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  2 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_20_2</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  3 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_20_3</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  4 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_20_4</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  5 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_20_5</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  6 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_20_6</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  7 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_20_7</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_21_0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x80</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_21_1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x81</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_21_2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x82</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_21_3</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x86</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_21_4</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x87</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_21_5</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x88</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_21_6</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBE</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_21_7</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBF</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_21</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_21_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_21_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  2 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_21_2</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  3 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_21_3</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  4 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_21_4</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  5 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_21_5</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  6 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_21_6</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  7 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_21_7</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_22_0</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x81</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_22_1</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8A</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA3</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_22</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">9</literal></expr>, <expr><name>s_22_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">24</literal></expr>, <expr><name>s_22_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_23_0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x85</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_23_1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x86</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_23_2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x87</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_23_3</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x88</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_23_4</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x89</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_23_5</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x8A</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_23_6</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x8E</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_23_7</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x8F</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_23_8</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x90</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_23_9</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x92</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_23_10</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x93</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_23_11</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x94</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_23</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_23_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_23_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  2 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_23_2</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  3 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_23_3</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  4 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_23_4</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  5 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_23_5</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  6 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_23_6</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  7 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_23_7</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  8 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_23_8</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  9 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_23_9</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 10 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_23_10</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 11 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_23_11</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_24_0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x80</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_24_1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x81</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_24_2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x82</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_24_3</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x86</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_24_4</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x87</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_24_5</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x88</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_24_6</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBE</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_24_7</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBF</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_24</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_24_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_24_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  2 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_24_2</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  3 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_24_3</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  4 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_24_4</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  5 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_24_5</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  6 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_24_6</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  7 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_24_7</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_25_0</name><index>[<expr><literal type="number">18</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_25_1</name><index>[<expr><literal type="number">21</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBE</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA8</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_25_2</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_25_3</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_25_4</name><index>[<expr><literal type="number">18</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBE</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA8</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_25_5</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_25</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">18</literal></expr>, <expr><name>s_25_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">21</literal></expr>, <expr><name>s_25_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  2 */</comment> <expr><block>{ <expr><literal type="number">12</literal></expr>, <expr><name>s_25_2</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  3 */</comment> <expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><name>s_25_3</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  4 */</comment> <expr><block>{ <expr><literal type="number">18</literal></expr>, <expr><name>s_25_4</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  5 */</comment> <expr><block>{ <expr><literal type="number">9</literal></expr>, <expr><name>s_25_5</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB5</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8B</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_1</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB5</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8B</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_2</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x93</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_3</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB5</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8A</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_4</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB5</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8A</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_5</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x92</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_6</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB5</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x81</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_7</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB5</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x81</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x89</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_9</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB5</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x82</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_10</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB5</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x82</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_11</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x8A</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_12</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x8E</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_13</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_14</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_15</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_16</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_17</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_18</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_19</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB2</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_20</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_21</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB2</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_22</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_23</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x81</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_24</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA4</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA4</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_25</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x88</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_26</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_27</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_28</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_29</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_30</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_31</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_32</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_33</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_34</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_35</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_36</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_37</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_38</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x81</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_39</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_40</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x88</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_41</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_42</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_43</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_44</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_45</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_46</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_47</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_48</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_49</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB2</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_50</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_51</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_52</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_53</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_54</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_55</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_56</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_57</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB2</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB2</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x88</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_58</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_59</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBF</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_60</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBE</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBF</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_61</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBE</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAF</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_62</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x81</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_63</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB3</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_64</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAF</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_65</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x88</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_66</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_67</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB2</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB2</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_68</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA9</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_69</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBE</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBF</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_70</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_71</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x88</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_72</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x88</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_73</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x88</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_74</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x88</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_75</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_76</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_77</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8A</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x81</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_78</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8B</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x81</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_79</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB2</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_80</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_81</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_82</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAE</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_83</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x81</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_84</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA8</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA4</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x81</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_85</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB5</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x9F</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_86</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_87</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBE</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB2</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_88</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x88</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_89</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBE</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB2</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_90</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB2</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_91</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_92</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_93</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA3</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_94</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_95</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB2</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_96</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_97</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB4</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_98</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_99</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA4</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x81</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_100</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x80</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_101</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBF</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_102</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_103</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_104</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBE</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_105</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_106</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_107</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBE</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_108</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBE</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_109</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBE</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_110</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB5</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_111</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_112</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB5</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_113</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_114</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB5</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_115</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA9</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_116</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAA</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_117</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x95</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_118</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA4</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_119</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAF</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_120</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_121</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_122</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_123</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA4</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x81</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_124</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x81</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_125</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_126</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_127</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA4</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_128</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_129</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_130</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_131</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x88</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_132</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB5</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x88</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_133</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBE</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_134</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x9A</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_135</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBE</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_136</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBE</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_137</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_138</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBE</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_139</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBE</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_140</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_141</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_142</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8B</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_143</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_144</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA4</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_145</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_146</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_147</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBE</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_148</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_149</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_150</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_151</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_152</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_153</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x81</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_154</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA4</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x81</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_155</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_has_min_length</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content> <comment type="block">/* forwardmode */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>len_utf8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* $(&lt;integer expression&gt; &gt; &lt;integer expression&gt;), line 100 */</comment>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_fix_va_start</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content> <comment type="block">/* forwardmode */</comment>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>c1</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* or, line 104 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>c2</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* and, line 104 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>c3</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* try, line 104 */</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>s_0</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c3</name></expr>;</expr_stmt> <goto>goto <name>lab2</name>;</goto> </block_content>}</block></if></if_stmt> <comment type="block">/* literal, line 104 */</comment>
            <label><name>lab2</name>:</label>
                <empty_stmt>;</empty_stmt>
            </block_content>}</block>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c2</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 104 */</comment>
        </block_content>}</block>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>s_1</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab1</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 104 */</comment>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 104 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>s_2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 104 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
        <goto>goto <name>lab0</name>;</goto>
    <label><name>lab1</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>c4</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* and, line 105 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>c5</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* try, line 105 */</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>s_3</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c5</name></expr>;</expr_stmt> <goto>goto <name>lab4</name>;</goto> </block_content>}</block></if></if_stmt> <comment type="block">/* literal, line 105 */</comment>
            <label><name>lab4</name>:</label>
                <empty_stmt>;</empty_stmt>
            </block_content>}</block>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c4</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 105 */</comment>
        </block_content>}</block>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>s_4</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab3</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 105 */</comment>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 105 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>s_5</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 105 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
        <goto>goto <name>lab0</name>;</goto>
    <label><name>lab3</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>c6</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* and, line 106 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>c7</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* try, line 106 */</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>s_6</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c7</name></expr>;</expr_stmt> <goto>goto <name>lab6</name>;</goto> </block_content>}</block></if></if_stmt> <comment type="block">/* literal, line 106 */</comment>
            <label><name>lab6</name>:</label>
                <empty_stmt>;</empty_stmt>
            </block_content>}</block>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c6</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 106 */</comment>
        </block_content>}</block>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>s_7</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab5</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 106 */</comment>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 106 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>s_8</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 106 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
        <goto>goto <name>lab0</name>;</goto>
    <label><name>lab5</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>c8</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* and, line 107 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>c9</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* try, line 107 */</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>s_9</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c9</name></expr>;</expr_stmt> <goto>goto <name>lab7</name>;</goto> </block_content>}</block></if></if_stmt> <comment type="block">/* literal, line 107 */</comment>
            <label><name>lab7</name>:</label>
                <empty_stmt>;</empty_stmt>
            </block_content>}</block>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c8</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 107 */</comment>
        </block_content>}</block>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>s_10</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* literal, line 107 */</comment>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 107 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>s_11</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 107 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
    </block_content>}</block>
<label><name>lab0</name>:</label>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_fix_endings</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content> <comment type="block">/* forwardmode */</comment>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>c1</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* do, line 111 */</comment>
        <while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content> <comment type="block">/* repeat, line 111 */</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>c2</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_fix_ending</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* call fix_ending, line 111 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab1</name>;</goto></block_content></block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <continue>continue;</continue>
        <label><name>lab1</name>:</label>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c2</name></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></while>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>
    </block_content>}</block>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_remove_question_prefixes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content> <comment type="block">/* forwardmode */</comment>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 115 */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>s_12</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* literal, line 115 */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>find_among</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_0</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* among, line 115 */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>s_13</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* literal, line 115 */</comment>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 115 */</comment>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 115 */</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>c1</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* do, line 116 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_fix_va_start</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* call fix_va_start, line 116 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab0</name>;</goto></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
    <label><name>lab0</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>
    </block_content>}</block>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_fix_ending</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content> <comment type="block">/* forwardmode */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>len_utf8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* $(&lt;integer expression&gt; &gt; &lt;integer expression&gt;), line 121 */</comment>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name></expr>;</expr_stmt> <comment type="block">/* backwards, line 122 */</comment>

    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m1</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m1</name></expr>;</expr_stmt> <comment type="block">/* or, line 124 */</comment>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 123 */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">5</literal> <operator>&lt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>||</operator> <operator>(</operator><name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">141</literal> <operator>&amp;&amp;</operator> <name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">164</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab1</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* among, line 123 */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab1</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 123 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 123 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
        <goto>goto <name>lab0</name>;</goto>
    <label><name>lab1</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 125 */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>s_14</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab2</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 125 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_test2</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* test, line 125 */</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_2</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab2</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* among, line 125 */</comment>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_test2</name></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 125 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 125 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
        <goto>goto <name>lab0</name>;</goto>
    <label><name>lab2</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 127 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m3</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m3</name></expr>;</expr_stmt> <comment type="block">/* or, line 127 */</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>s_15</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab5</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 127 */</comment>
            <goto>goto <name>lab4</name>;</goto>
        <label><name>lab5</name>:</label>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m3</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>s_16</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab3</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 127 */</comment>
        </block_content>}</block>
    <label><name>lab4</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 127 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>s_17</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 127 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
        <goto>goto <name>lab0</name>;</goto>
    <label><name>lab3</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 129 */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>s_18</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab6</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 129 */</comment>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 129 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>s_19</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 129 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
        <goto>goto <name>lab0</name>;</goto>
    <label><name>lab6</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 132 */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>s_20</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab7</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 132 */</comment>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 132 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>s_21</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 132 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
        <goto>goto <name>lab0</name>;</goto>
    <label><name>lab7</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 134 */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>s_22</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab8</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 134 */</comment>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 134 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>s_23</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 134 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
        <goto>goto <name>lab0</name>;</goto>
    <label><name>lab8</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m1</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>z</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab9</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* Boolean test found_vetrumai_urupu, line 136 */</comment>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 136 */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>s_24</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab9</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 136 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_test4</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* test, line 136 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m5</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m5</name></expr>;</expr_stmt> <comment type="block">/* not, line 136 */</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>s_25</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab10</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 136 */</comment>
                <goto>goto <name>lab9</name>;</goto>
            <label><name>lab10</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m5</name></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_test4</name></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 136 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>s_26</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 136 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 136 */</comment>
        <goto>goto <name>lab0</name>;</goto>
    <label><name>lab9</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 138 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m6</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m6</name></expr>;</expr_stmt> <comment type="block">/* or, line 138 */</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>s_27</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab13</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 138 */</comment>
            <goto>goto <name>lab12</name>;</goto>
        <label><name>lab13</name>:</label>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m6</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><name>s_28</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab11</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 138 */</comment>
        </block_content>}</block>
    <label><name>lab12</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 138 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>s_29</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 138 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
        <goto>goto <name>lab0</name>;</goto>
    <label><name>lab11</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 140 */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>s_30</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab14</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 140 */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_3</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab14</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* among, line 140 */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>s_31</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab14</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 140 */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_4</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab14</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* among, line 140 */</comment>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 140 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 140 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
        <goto>goto <name>lab0</name>;</goto>
    <label><name>lab14</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 142 */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>s_32</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab15</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 142 */</comment>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 142 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>s_33</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 142 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
        <goto>goto <name>lab0</name>;</goto>
    <label><name>lab15</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 144 */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>s_34</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab16</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 144 */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_5</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab16</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* among, line 144 */</comment>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 144 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 144 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
        <goto>goto <name>lab0</name>;</goto>
    <label><name>lab16</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 146 */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>s_35</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab17</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 146 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m7</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m7</name></expr>;</expr_stmt> <comment type="block">/* or, line 146 */</comment>
            <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>&lt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>||</operator> <name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">5</literal> <operator>!=</operator> <literal type="number">5</literal> <operator>||</operator> <operator>!</operator><operator>(</operator><operator>(</operator><literal type="number">4030464</literal> <operator>&gt;&gt;</operator> <operator>(</operator><name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab19</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* among, line 146 */</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_6</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab19</name>;</goto></block_content></block></if></if_stmt>
            <goto>goto <name>lab18</name>;</goto>
        <label><name>lab19</name>:</label>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m7</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_7</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab17</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* among, line 146 */</comment>
        </block_content>}</block>
    <label><name>lab18</name>:</label>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>s_36</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab17</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 146 */</comment>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 146 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>s_37</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 146 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
        <goto>goto <name>lab0</name>;</goto>
    <label><name>lab17</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 148 */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_8</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab20</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* among, line 148 */</comment>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 148 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 148 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
        <goto>goto <name>lab0</name>;</goto>
    <label><name>lab20</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 150 */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>s_38</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab21</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 150 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_test8</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* test, line 150 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m9</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m9</name></expr>;</expr_stmt> <comment type="block">/* not, line 150 */</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_9</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab22</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* among, line 150 */</comment>
                <goto>goto <name>lab21</name>;</goto>
            <label><name>lab22</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m9</name></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_test8</name></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 150 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 150 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
        <goto>goto <name>lab0</name>;</goto>
    <label><name>lab21</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 152 */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>s_39</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab23</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 152 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_test10</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* test, line 152 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m11</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m11</name></expr>;</expr_stmt> <comment type="block">/* not, line 152 */</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>s_40</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab24</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 152 */</comment>
                <goto>goto <name>lab23</name>;</goto>
            <label><name>lab24</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m11</name></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_test10</name></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 152 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>s_41</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 152 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
        <goto>goto <name>lab0</name>;</goto>
    <label><name>lab23</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 154 */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>s_42</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab25</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 154 */</comment>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 154 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 154 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
        <goto>goto <name>lab0</name>;</goto>
    <label><name>lab25</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 156 */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>s_43</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* literal, line 156 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_test12</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* test, line 156 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m13</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m13</name></expr>;</expr_stmt> <comment type="block">/* or, line 156 */</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_10</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab27</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* among, line 156 */</comment>
                <goto>goto <name>lab26</name>;</goto>
            <label><name>lab27</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m13</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>s_44</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* literal, line 156 */</comment>
            </block_content>}</block>
        <label><name>lab26</name>:</label>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_test12</name></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 156 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 156 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
    </block_content>}</block>
<label><name>lab0</name>:</label>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_remove_pronoun_prefixes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content> <comment type="block">/* forwardmode */</comment>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* unset found_a_match, line 161 */</comment>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 162 */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>+</operator> <literal type="number">2</literal> <operator>&gt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>||</operator> <name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">5</literal> <operator>!=</operator> <literal type="number">4</literal> <operator>||</operator> <operator>!</operator><operator>(</operator><operator>(</operator><literal type="number">672</literal> <operator>&gt;&gt;</operator> <operator>(</operator><name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* among, line 162 */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>find_among</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_11</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>find_among</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_12</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* among, line 162 */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>s_45</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* literal, line 162 */</comment>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 162 */</comment>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 162 */</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* set found_a_match, line 163 */</comment>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>c1</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* do, line 164 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_fix_va_start</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* call fix_va_start, line 164 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab0</name>;</goto></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
    <label><name>lab0</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>
    </block_content>}</block>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_remove_plural_suffix</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content> <comment type="block">/* forwardmode */</comment>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* unset found_a_match, line 168 */</comment>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name></expr>;</expr_stmt> <comment type="block">/* backwards, line 169 */</comment>

    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m1</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m1</name></expr>;</expr_stmt> <comment type="block">/* or, line 170 */</comment>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 170 */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>, <argument><expr><name>s_46</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab1</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 170 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_test2</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* test, line 170 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m3</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m3</name></expr>;</expr_stmt> <comment type="block">/* not, line 170 */</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_13</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab2</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* among, line 170 */</comment>
                <goto>goto <name>lab1</name>;</goto>
            <label><name>lab2</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m3</name></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_test2</name></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 170 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>s_47</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 170 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
        <goto>goto <name>lab0</name>;</goto>
    <label><name>lab1</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 171 */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><name>s_48</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab3</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 171 */</comment>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 171 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>s_49</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 171 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
        <goto>goto <name>lab0</name>;</goto>
    <label><name>lab3</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 172 */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><name>s_50</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab4</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 172 */</comment>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 172 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>s_51</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 172 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
        <goto>goto <name>lab0</name>;</goto>
    <label><name>lab4</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 173 */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>s_52</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* literal, line 173 */</comment>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 173 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 173 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
    </block_content>}</block>
<label><name>lab0</name>:</label>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* set found_a_match, line 174 */</comment>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_remove_question_suffixes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content> <comment type="block">/* forwardmode */</comment>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_has_min_length</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* call has_min_length, line 179 */</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* unset found_a_match, line 180 */</comment>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name></expr>;</expr_stmt> <comment type="block">/* backwards, line 181 */</comment>

    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m1</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m1</name></expr>;</expr_stmt> <comment type="block">/* do, line 182 */</comment>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 183 */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_14</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab0</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* among, line 183 */</comment>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 183 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>s_53</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 183 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* set found_a_match, line 184 */</comment>
    <label><name>lab0</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m1</name></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name></expr>;</expr_stmt>
    <comment type="block">/* do, line 187 */</comment>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_fix_endings</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* call fix_endings, line 187 */</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab1</name>;</goto></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
<label><name>lab1</name>:</label>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_remove_command_suffixes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content> <comment type="block">/* forwardmode */</comment>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_has_min_length</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* call has_min_length, line 191 */</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* unset found_a_match, line 192 */</comment>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name></expr>;</expr_stmt> <comment type="block">/* backwards, line 193 */</comment>

    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 194 */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">5</literal> <operator>&lt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>||</operator> <name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">191</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* among, line 194 */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_15</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 194 */</comment>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 194 */</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* set found_a_match, line 195 */</comment>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_remove_um</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content> <comment type="block">/* forwardmode */</comment>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* unset found_a_match, line 200 */</comment>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_has_min_length</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* call has_min_length, line 201 */</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name></expr>;</expr_stmt> <comment type="block">/* backwards, line 202 */</comment>

    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 202 */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>s_54</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* literal, line 202 */</comment>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 202 */</comment>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>s_55</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 202 */</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* set found_a_match, line 203 */</comment>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name></expr>;</expr_stmt>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>c1</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* do, line 205 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_fix_ending</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* call fix_ending, line 205 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab0</name>;</goto></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
    <label><name>lab0</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>
    </block_content>}</block>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_remove_common_word_endings</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content> <comment type="block">/* forwardmode */</comment>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* unset found_a_match, line 212 */</comment>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_has_min_length</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* call has_min_length, line 213 */</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name></expr>;</expr_stmt> <comment type="block">/* backwards, line 214 */</comment>

    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m1</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m1</name></expr>;</expr_stmt> <comment type="block">/* or, line 231 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_test2</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* test, line 215 */</comment>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 215 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m3</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m3</name></expr>;</expr_stmt> <comment type="block">/* or, line 215 */</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>s_56</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab3</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 215 */</comment>
                <goto>goto <name>lab2</name>;</goto>
            <label><name>lab3</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m3</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><name>s_57</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab4</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 216 */</comment>
                <goto>goto <name>lab2</name>;</goto>
            <label><name>lab4</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m3</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>s_58</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab5</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 217 */</comment>
                <goto>goto <name>lab2</name>;</goto>
            <label><name>lab5</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m3</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><name>s_59</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab6</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 218 */</comment>
                <goto>goto <name>lab2</name>;</goto>
            <label><name>lab6</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m3</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>s_60</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab7</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 219 */</comment>
                <goto>goto <name>lab2</name>;</goto>
            <label><name>lab7</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m3</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>s_61</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab8</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 220 */</comment>
                <goto>goto <name>lab2</name>;</goto>
            <label><name>lab8</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m3</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><name>s_62</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab9</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 221 */</comment>
                <goto>goto <name>lab2</name>;</goto>
            <label><name>lab9</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m3</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>s_63</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab10</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 222 */</comment>
                <goto>goto <name>lab2</name>;</goto>
            <label><name>lab10</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m3</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>s_64</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab11</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 223 */</comment>
                <goto>goto <name>lab2</name>;</goto>
            <label><name>lab11</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m3</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>s_65</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab12</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 224 */</comment>
                <goto>goto <name>lab2</name>;</goto>
            <label><name>lab12</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m3</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><name>s_66</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab13</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 225 */</comment>
                <goto>goto <name>lab2</name>;</goto>
            <label><name>lab13</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m3</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>s_67</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab14</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 226 */</comment>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_test4</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* test, line 226 */</comment>
                    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m5</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m5</name></expr>;</expr_stmt> <comment type="block">/* not, line 226 */</comment>
                        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_16</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab15</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* among, line 226 */</comment>
                        <goto>goto <name>lab14</name>;</goto>
                    <label><name>lab15</name>:</label>
                        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m5</name></expr>;</expr_stmt>
                    </block_content>}</block>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_test4</name></expr>;</expr_stmt>
                </block_content>}</block>
                <goto>goto <name>lab2</name>;</goto>
            <label><name>lab14</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m3</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>s_68</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab16</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 227 */</comment>
                <goto>goto <name>lab2</name>;</goto>
            <label><name>lab16</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m3</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>s_69</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab1</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 228 */</comment>
            </block_content>}</block>
        <label><name>lab2</name>:</label>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 228 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>s_70</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 228 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* set found_a_match, line 229 */</comment>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_test2</name></expr>;</expr_stmt>
        </block_content>}</block>
        <goto>goto <name>lab0</name>;</goto>
    <label><name>lab1</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m1</name></expr>;</expr_stmt>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_test6</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* test, line 232 */</comment>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 232 */</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_17</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* among, line 232 */</comment>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 245 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 245 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* set found_a_match, line 246 */</comment>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_test6</name></expr>;</expr_stmt>
        </block_content>}</block>
    </block_content>}</block>
<label><name>lab0</name>:</label>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name></expr>;</expr_stmt>
    <comment type="block">/* do, line 249 */</comment>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_fix_endings</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* call fix_endings, line 249 */</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab17</name>;</goto></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
<label><name>lab17</name>:</label>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_remove_vetrumai_urupukal</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content> <comment type="block">/* forwardmode */</comment>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* unset found_a_match, line 253 */</comment>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* unset found_vetrumai_urupu, line 254 */</comment>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_has_min_length</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* call has_min_length, line 255 */</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name></expr>;</expr_stmt> <comment type="block">/* backwards, line 256 */</comment>

    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m1</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m1</name></expr>;</expr_stmt> <comment type="block">/* or, line 259 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_test2</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* test, line 258 */</comment>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 258 */</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>s_71</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab1</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 258 */</comment>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 258 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 258 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_test2</name></expr>;</expr_stmt>
        </block_content>}</block>
        <goto>goto <name>lab0</name>;</goto>
    <label><name>lab1</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m1</name></expr>;</expr_stmt>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_test3</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* test, line 260 */</comment>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 260 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m4</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m4</name></expr>;</expr_stmt> <comment type="block">/* or, line 261 */</comment>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m5</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m5</name></expr>;</expr_stmt> <comment type="block">/* or, line 260 */</comment>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>s_72</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab6</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 260 */</comment>
                    <goto>goto <name>lab5</name>;</goto>
                <label><name>lab6</name>:</label>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m5</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>s_73</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab4</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 261 */</comment>
                </block_content>}</block>
            <label><name>lab5</name>:</label>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_test6</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* test, line 261 */</comment>
                    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m7</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m7</name></expr>;</expr_stmt> <comment type="block">/* not, line 261 */</comment>
                        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_18</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab7</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* among, line 261 */</comment>
                        <goto>goto <name>lab4</name>;</goto>
                    <label><name>lab7</name>:</label>
                        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m7</name></expr>;</expr_stmt>
                    </block_content>}</block>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_test6</name></expr>;</expr_stmt>
                </block_content>}</block>
                <goto>goto <name>lab3</name>;</goto>
            <label><name>lab4</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m4</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>s_74</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab2</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 262 */</comment>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_test8</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* test, line 262 */</comment>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_19</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab2</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* among, line 262 */</comment>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>s_75</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab2</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 262 */</comment>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_test8</name></expr>;</expr_stmt>
                </block_content>}</block>
            </block_content>}</block>
        <label><name>lab3</name>:</label>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 263 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>s_76</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 263 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_test3</name></expr>;</expr_stmt>
        </block_content>}</block>
        <goto>goto <name>lab0</name>;</goto>
    <label><name>lab2</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m1</name></expr>;</expr_stmt>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_test9</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* test, line 266 */</comment>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 266 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m10</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m10</name></expr>;</expr_stmt> <comment type="block">/* or, line 267 */</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>s_77</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab10</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 267 */</comment>
                <goto>goto <name>lab9</name>;</goto>
            <label><name>lab10</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m10</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>s_78</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab11</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 268 */</comment>
                <goto>goto <name>lab9</name>;</goto>
            <label><name>lab11</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m10</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>s_79</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab12</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 269 */</comment>
                <goto>goto <name>lab9</name>;</goto>
            <label><name>lab12</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m10</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>s_80</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab13</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 270 */</comment>
                <goto>goto <name>lab9</name>;</goto>
            <label><name>lab13</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m10</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>s_81</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab14</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 271 */</comment>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_test11</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* test, line 271 */</comment>
                    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m12</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m12</name></expr>;</expr_stmt> <comment type="block">/* not, line 271 */</comment>
                        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>s_82</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab15</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 271 */</comment>
                        <goto>goto <name>lab14</name>;</goto>
                    <label><name>lab15</name>:</label>
                        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m12</name></expr>;</expr_stmt>
                    </block_content>}</block>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_test11</name></expr>;</expr_stmt>
                </block_content>}</block>
                <goto>goto <name>lab9</name>;</goto>
            <label><name>lab14</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m10</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><name>s_83</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab16</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 272 */</comment>
                <goto>goto <name>lab9</name>;</goto>
            <label><name>lab16</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m10</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>, <argument><expr><name>s_84</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab17</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 273 */</comment>
                <goto>goto <name>lab9</name>;</goto>
            <label><name>lab17</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m10</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>s_85</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab18</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 274 */</comment>
                <goto>goto <name>lab9</name>;</goto>
            <label><name>lab18</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m10</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>len_utf8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">7</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab19</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* $(&lt;integer expression&gt; &gt;= &lt;integer expression&gt;), line 275 */</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>s_86</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab19</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 275 */</comment>
                <goto>goto <name>lab9</name>;</goto>
            <label><name>lab19</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m10</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>s_87</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab20</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 276 */</comment>
                <goto>goto <name>lab9</name>;</goto>
            <label><name>lab20</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m10</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>s_88</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab21</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 277 */</comment>
                <goto>goto <name>lab9</name>;</goto>
            <label><name>lab21</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m10</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>s_89</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab22</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 278 */</comment>
                <goto>goto <name>lab9</name>;</goto>
            <label><name>lab22</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m10</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>s_90</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab23</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 279 */</comment>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_test13</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* test, line 279 */</comment>
                    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m14</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m14</name></expr>;</expr_stmt> <comment type="block">/* not, line 279 */</comment>
                        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_20</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab24</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* among, line 279 */</comment>
                        <goto>goto <name>lab23</name>;</goto>
                    <label><name>lab24</name>:</label>
                        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m14</name></expr>;</expr_stmt>
                    </block_content>}</block>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_test13</name></expr>;</expr_stmt>
                </block_content>}</block>
                <goto>goto <name>lab9</name>;</goto>
            <label><name>lab23</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m10</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>s_91</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab8</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 280 */</comment>
            </block_content>}</block>
        <label><name>lab9</name>:</label>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 281 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>s_92</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 281 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_test9</name></expr>;</expr_stmt>
        </block_content>}</block>
        <goto>goto <name>lab0</name>;</goto>
    <label><name>lab8</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m1</name></expr>;</expr_stmt>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_test15</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* test, line 284 */</comment>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 284 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m16</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m16</name></expr>;</expr_stmt> <comment type="block">/* or, line 285 */</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>s_93</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab27</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 285 */</comment>
                <goto>goto <name>lab26</name>;</goto>
            <label><name>lab27</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m16</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>s_94</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab28</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 286 */</comment>
                <goto>goto <name>lab26</name>;</goto>
            <label><name>lab28</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m16</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>s_95</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab29</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 287 */</comment>
                <goto>goto <name>lab26</name>;</goto>
            <label><name>lab29</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m16</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>s_96</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab30</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 288 */</comment>
                <goto>goto <name>lab26</name>;</goto>
            <label><name>lab30</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m16</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>s_97</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab31</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 289 */</comment>
                <goto>goto <name>lab26</name>;</goto>
            <label><name>lab31</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m16</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>s_98</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab32</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 290 */</comment>
                <goto>goto <name>lab26</name>;</goto>
            <label><name>lab32</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m16</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>s_99</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab25</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 291 */</comment>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_test17</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* test, line 291 */</comment>
                    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m18</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m18</name></expr>;</expr_stmt> <comment type="block">/* not, line 291 */</comment>
                        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_21</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab33</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* among, line 291 */</comment>
                        <goto>goto <name>lab25</name>;</goto>
                    <label><name>lab33</name>:</label>
                        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m18</name></expr>;</expr_stmt>
                    </block_content>}</block>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_test17</name></expr>;</expr_stmt>
                </block_content>}</block>
            </block_content>}</block>
        <label><name>lab26</name>:</label>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 292 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 292 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_test15</name></expr>;</expr_stmt>
        </block_content>}</block>
        <goto>goto <name>lab0</name>;</goto>
    <label><name>lab25</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m1</name></expr>;</expr_stmt>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_test19</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* test, line 295 */</comment>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 295 */</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>s_100</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* literal, line 295 */</comment>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 295 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>s_101</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 295 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_test19</name></expr>;</expr_stmt>
        </block_content>}</block>
    </block_content>}</block>
<label><name>lab0</name>:</label>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* set found_a_match, line 297 */</comment>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* set found_vetrumai_urupu, line 298 */</comment>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m20</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m20</name></expr>;</expr_stmt> <comment type="block">/* do, line 299 */</comment>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 299 */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>s_102</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab34</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 299 */</comment>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 299 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>s_103</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 299 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
    <label><name>lab34</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m20</name></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name></expr>;</expr_stmt>
    <comment type="block">/* do, line 301 */</comment>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_fix_endings</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* call fix_endings, line 301 */</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab35</name>;</goto></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
<label><name>lab35</name>:</label>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_remove_tense_suffixes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content> <comment type="block">/* forwardmode */</comment>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* set found_a_match, line 305 */</comment>
    <while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content> <comment type="block">/* repeat, line 306 */</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>c1</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>z</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab0</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* Boolean test found_a_match, line 306 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>c2</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* do, line 306 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_remove_tense_suffix</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* call remove_tense_suffix, line 306 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab1</name>;</goto></block_content></block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
        <label><name>lab1</name>:</label>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c2</name></expr>;</expr_stmt>
        </block_content>}</block>
        <continue>continue;</continue>
    <label><name>lab0</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></while>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_remove_tense_suffix</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content> <comment type="block">/* forwardmode */</comment>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* unset found_a_match, line 310 */</comment>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_has_min_length</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* call has_min_length, line 311 */</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name></expr>;</expr_stmt> <comment type="block">/* backwards, line 312 */</comment>

    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m1</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m1</name></expr>;</expr_stmt> <comment type="block">/* do, line 313 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m2</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m2</name></expr>;</expr_stmt> <comment type="block">/* or, line 320 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_test3</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* test, line 314 */</comment>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 314 */</comment>
                <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">8</literal> <operator>&lt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>||</operator> <operator>(</operator><name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">129</literal> <operator>&amp;&amp;</operator> <name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">141</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab2</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* among, line 314 */</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_22</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab2</name>;</goto></block_content></block></if></if_stmt>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 317 */</comment>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 317 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* set found_a_match, line 318 */</comment>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_test3</name></expr>;</expr_stmt>
            </block_content>}</block>
            <goto>goto <name>lab1</name>;</goto>
        <label><name>lab2</name>:</label>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m2</name></expr>;</expr_stmt>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_test4</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* test, line 321 */</comment>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 321 */</comment>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m5</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m5</name></expr>;</expr_stmt> <comment type="block">/* or, line 322 */</comment>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>s_104</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab5</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 322 */</comment>
                    <goto>goto <name>lab4</name>;</goto>
                <label><name>lab5</name>:</label>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m5</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>s_105</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab6</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 323 */</comment>
                    <goto>goto <name>lab4</name>;</goto>
                <label><name>lab6</name>:</label>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m5</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>s_106</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab7</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 324 */</comment>
                    <goto>goto <name>lab4</name>;</goto>
                <label><name>lab7</name>:</label>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m5</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>s_107</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab8</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 325 */</comment>
                    <goto>goto <name>lab4</name>;</goto>
                <label><name>lab8</name>:</label>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m5</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>s_108</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab9</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 326 */</comment>
                    <goto>goto <name>lab4</name>;</goto>
                <label><name>lab9</name>:</label>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m5</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>s_109</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab10</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 327 */</comment>
                    <goto>goto <name>lab4</name>;</goto>
                <label><name>lab10</name>:</label>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m5</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>s_110</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab11</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 328 */</comment>
                    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_test6</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* test, line 328 */</comment>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m7</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m7</name></expr>;</expr_stmt> <comment type="block">/* not, line 328 */</comment>
                            <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>&lt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>||</operator> <name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">5</literal> <operator>!=</operator> <literal type="number">4</literal> <operator>||</operator> <operator>!</operator><operator>(</operator><operator>(</operator><literal type="number">1951712</literal> <operator>&gt;&gt;</operator> <operator>(</operator><name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab12</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* among, line 328 */</comment>
                            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_23</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab12</name>;</goto></block_content></block></if></if_stmt>
                            <goto>goto <name>lab11</name>;</goto>
                        <label><name>lab12</name>:</label>
                            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m7</name></expr>;</expr_stmt>
                        </block_content>}</block>
                        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_test6</name></expr>;</expr_stmt>
                    </block_content>}</block>
                    <goto>goto <name>lab4</name>;</goto>
                <label><name>lab11</name>:</label>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m5</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>s_111</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab13</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 329 */</comment>
                    <goto>goto <name>lab4</name>;</goto>
                <label><name>lab13</name>:</label>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m5</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>s_112</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab14</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 330 */</comment>
                    <goto>goto <name>lab4</name>;</goto>
                <label><name>lab14</name>:</label>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m5</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>s_113</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab15</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 331 */</comment>
                    <goto>goto <name>lab4</name>;</goto>
                <label><name>lab15</name>:</label>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m5</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>s_114</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab16</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 332 */</comment>
                    <goto>goto <name>lab4</name>;</goto>
                <label><name>lab16</name>:</label>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m5</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>s_115</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab17</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 333 */</comment>
                    <goto>goto <name>lab4</name>;</goto>
                <label><name>lab17</name>:</label>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m5</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>s_116</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab18</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 333 */</comment>
                    <goto>goto <name>lab4</name>;</goto>
                <label><name>lab18</name>:</label>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m5</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>s_117</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab19</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 333 */</comment>
                    <goto>goto <name>lab4</name>;</goto>
                <label><name>lab19</name>:</label>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m5</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>s_118</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab20</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 333 */</comment>
                    <goto>goto <name>lab4</name>;</goto>
                <label><name>lab20</name>:</label>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m5</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>s_119</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab21</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 333 */</comment>
                    <goto>goto <name>lab4</name>;</goto>
                <label><name>lab21</name>:</label>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m5</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>s_120</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab22</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 334 */</comment>
                    <goto>goto <name>lab4</name>;</goto>
                <label><name>lab22</name>:</label>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m5</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>s_121</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab23</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 335 */</comment>
                    <goto>goto <name>lab4</name>;</goto>
                <label><name>lab23</name>:</label>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m5</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>s_122</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab24</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 336 */</comment>
                    <goto>goto <name>lab4</name>;</goto>
                <label><name>lab24</name>:</label>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m5</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>s_123</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab25</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 337 */</comment>
                    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_test8</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* test, line 337 */</comment>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m9</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m9</name></expr>;</expr_stmt> <comment type="block">/* not, line 337 */</comment>
                            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_24</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab26</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* among, line 337 */</comment>
                            <goto>goto <name>lab25</name>;</goto>
                        <label><name>lab26</name>:</label>
                            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m9</name></expr>;</expr_stmt>
                        </block_content>}</block>
                        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_test8</name></expr>;</expr_stmt>
                    </block_content>}</block>
                    <goto>goto <name>lab4</name>;</goto>
                <label><name>lab25</name>:</label>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m5</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><name>s_124</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab27</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 338 */</comment>
                    <goto>goto <name>lab4</name>;</goto>
                <label><name>lab27</name>:</label>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m5</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>s_125</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab28</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 339 */</comment>
                    <goto>goto <name>lab4</name>;</goto>
                <label><name>lab28</name>:</label>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m5</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>s_126</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab29</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 340 */</comment>
                    <goto>goto <name>lab4</name>;</goto>
                <label><name>lab29</name>:</label>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m5</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>s_127</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab30</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 341 */</comment>
                    <goto>goto <name>lab4</name>;</goto>
                <label><name>lab30</name>:</label>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m5</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>s_128</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab31</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 342 */</comment>
                    <goto>goto <name>lab4</name>;</goto>
                <label><name>lab31</name>:</label>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m5</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>s_129</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab32</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 343 */</comment>
                    <goto>goto <name>lab4</name>;</goto>
                <label><name>lab32</name>:</label>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m5</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>s_130</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab33</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 344 */</comment>
                    <goto>goto <name>lab4</name>;</goto>
                <label><name>lab33</name>:</label>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m5</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>s_131</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab34</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 345 */</comment>
                    <goto>goto <name>lab4</name>;</goto>
                <label><name>lab34</name>:</label>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m5</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>s_132</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab3</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 346 */</comment>
                </block_content>}</block>
            <label><name>lab4</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 347 */</comment>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 347 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* set found_a_match, line 348 */</comment>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_test4</name></expr>;</expr_stmt>
            </block_content>}</block>
            <goto>goto <name>lab1</name>;</goto>
        <label><name>lab3</name>:</label>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m2</name></expr>;</expr_stmt>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_test10</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* test, line 351 */</comment>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 351 */</comment>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m11</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m11</name></expr>;</expr_stmt> <comment type="block">/* or, line 352 */</comment>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>s_133</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab37</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 352 */</comment>
                    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_test12</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* test, line 352 */</comment>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m13</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m13</name></expr>;</expr_stmt> <comment type="block">/* not, line 352 */</comment>
                            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>s_134</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab38</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 352 */</comment>
                            <goto>goto <name>lab37</name>;</goto>
                        <label><name>lab38</name>:</label>
                            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m13</name></expr>;</expr_stmt>
                        </block_content>}</block>
                        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_test12</name></expr>;</expr_stmt>
                    </block_content>}</block>
                    <goto>goto <name>lab36</name>;</goto>
                <label><name>lab37</name>:</label>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m11</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>s_135</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab39</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 353 */</comment>
                    <goto>goto <name>lab36</name>;</goto>
                <label><name>lab39</name>:</label>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m11</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>s_136</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab40</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 354 */</comment>
                    <goto>goto <name>lab36</name>;</goto>
                <label><name>lab40</name>:</label>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m11</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>s_137</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab41</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 355 */</comment>
                    <goto>goto <name>lab36</name>;</goto>
                <label><name>lab41</name>:</label>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m11</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>s_138</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab42</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 356 */</comment>
                    <goto>goto <name>lab36</name>;</goto>
                <label><name>lab42</name>:</label>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m11</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>s_139</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab43</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 357 */</comment>
                    <goto>goto <name>lab36</name>;</goto>
                <label><name>lab43</name>:</label>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m11</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>s_140</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab44</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 358 */</comment>
                    <goto>goto <name>lab36</name>;</goto>
                <label><name>lab44</name>:</label>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m11</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>s_141</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab45</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 359 */</comment>
                    <goto>goto <name>lab36</name>;</goto>
                <label><name>lab45</name>:</label>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m11</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>s_142</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab46</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 360 */</comment>
                    <goto>goto <name>lab36</name>;</goto>
                <label><name>lab46</name>:</label>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m11</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>s_143</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab47</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 361 */</comment>
                    <goto>goto <name>lab36</name>;</goto>
                <label><name>lab47</name>:</label>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m11</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>s_144</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab48</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 362 */</comment>
                    <goto>goto <name>lab36</name>;</goto>
                <label><name>lab48</name>:</label>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m11</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>s_145</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab49</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 363 */</comment>
                    <goto>goto <name>lab36</name>;</goto>
                <label><name>lab49</name>:</label>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m11</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>s_146</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab50</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 364 */</comment>
                    <goto>goto <name>lab36</name>;</goto>
                <label><name>lab50</name>:</label>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m11</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>s_147</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab51</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 365 */</comment>
                    <goto>goto <name>lab36</name>;</goto>
                <label><name>lab51</name>:</label>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m11</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>s_148</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab52</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 366 */</comment>
                    <goto>goto <name>lab36</name>;</goto>
                <label><name>lab52</name>:</label>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m11</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>s_149</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab53</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 367 */</comment>
                    <goto>goto <name>lab36</name>;</goto>
                <label><name>lab53</name>:</label>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m11</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>s_150</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab54</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 368 */</comment>
                    <goto>goto <name>lab36</name>;</goto>
                <label><name>lab54</name>:</label>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m11</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>s_151</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab35</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 369 */</comment>
                </block_content>}</block>
            <label><name>lab36</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 370 */</comment>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>s_152</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 370 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* set found_a_match, line 371 */</comment>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_test10</name></expr>;</expr_stmt>
            </block_content>}</block>
            <goto>goto <name>lab1</name>;</goto>
        <label><name>lab35</name>:</label>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m2</name></expr>;</expr_stmt>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_test14</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* test, line 374 */</comment>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 374 */</comment>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m15</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m15</name></expr>;</expr_stmt> <comment type="block">/* or, line 374 */</comment>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>s_153</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab56</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 374 */</comment>
                    <goto>goto <name>lab55</name>;</goto>
                <label><name>lab56</name>:</label>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m15</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>s_154</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab0</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 374 */</comment>
                </block_content>}</block>
            <label><name>lab55</name>:</label>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_test16</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* test, line 374 */</comment>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>s_155</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab0</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 374 */</comment>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_test16</name></expr>;</expr_stmt>
                </block_content>}</block>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 374 */</comment>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 374 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* set found_a_match, line 375 */</comment>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_test14</name></expr>;</expr_stmt>
            </block_content>}</block>
        </block_content>}</block>
    <label><name>lab1</name>:</label>
    <label><name>lab0</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m1</name></expr>;</expr_stmt>
    </block_content>}</block>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m17</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m17</name></expr>;</expr_stmt> <comment type="block">/* do, line 378 */</comment>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 378 */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">8</literal> <operator>&lt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>||</operator> <operator>(</operator><name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">141</literal> <operator>&amp;&amp;</operator> <name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">177</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab57</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* among, line 378 */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_25</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab57</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 385 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 385 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* set found_a_match, line 386 */</comment>
    <label><name>lab57</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m17</name></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name></expr>;</expr_stmt>
    <comment type="block">/* do, line 389 */</comment>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_fix_endings</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* call fix_endings, line 389 */</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab58</name>;</goto></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
<label><name>lab58</name>:</label>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>int</name></type> <name>tamil_UTF_8_stem</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content> <comment type="block">/* forwardmode */</comment>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* unset found_vetrumai_urupu, line 393 */</comment>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>c1</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* do, line 394 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_fix_ending</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* call fix_ending, line 394 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab0</name>;</goto></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
    <label><name>lab0</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>
    </block_content>}</block>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_has_min_length</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* call has_min_length, line 395 */</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>c2</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* do, line 396 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_remove_question_prefixes</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* call remove_question_prefixes, line 396 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab1</name>;</goto></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
    <label><name>lab1</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c2</name></expr>;</expr_stmt>
    </block_content>}</block>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>c3</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* do, line 397 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_remove_pronoun_prefixes</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* call remove_pronoun_prefixes, line 397 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab2</name>;</goto></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
    <label><name>lab2</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c3</name></expr>;</expr_stmt>
    </block_content>}</block>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>c4</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* do, line 398 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_remove_question_suffixes</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* call remove_question_suffixes, line 398 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab3</name>;</goto></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
    <label><name>lab3</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c4</name></expr>;</expr_stmt>
    </block_content>}</block>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>c5</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* do, line 399 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_remove_um</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* call remove_um, line 399 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab4</name>;</goto></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
    <label><name>lab4</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c5</name></expr>;</expr_stmt>
    </block_content>}</block>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>c6</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* do, line 400 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_remove_common_word_endings</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* call remove_common_word_endings, line 400 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab5</name>;</goto></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
    <label><name>lab5</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c6</name></expr>;</expr_stmt>
    </block_content>}</block>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>c7</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* do, line 401 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_remove_vetrumai_urupukal</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* call remove_vetrumai_urupukal, line 401 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab6</name>;</goto></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
    <label><name>lab6</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c7</name></expr>;</expr_stmt>
    </block_content>}</block>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>c8</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* do, line 402 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_remove_plural_suffix</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* call remove_plural_suffix, line 402 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab7</name>;</goto></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
    <label><name>lab7</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c8</name></expr>;</expr_stmt>
    </block_content>}</block>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>c9</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* do, line 403 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_remove_command_suffixes</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* call remove_command_suffixes, line 403 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab8</name>;</goto></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
    <label><name>lab8</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c9</name></expr>;</expr_stmt>
    </block_content>}</block>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>c10</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* do, line 404 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_remove_tense_suffixes</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* call remove_tense_suffixes, line 404 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab9</name>;</goto></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
    <label><name>lab9</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c10</name></expr>;</expr_stmt>
    </block_content>}</block>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>tamil_UTF_8_create_env</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>SN_create_env</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>void</name></type> <name>tamil_UTF_8_close_env</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>SN_close_env</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

</unit>
