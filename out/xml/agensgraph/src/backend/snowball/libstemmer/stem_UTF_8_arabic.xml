<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/backend/snowball/libstemmer/stem_UTF_8_arabic.c"><comment type="block">/* This file was generated automatically by the Snowball to ISO C compiler */</comment>
<comment type="block">/* http://snowballstem.org/ */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"header.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>arabic_UTF_8_stem</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_Checks1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_Normalize_pre</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_Normalize_post</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_Suffix_Verb_Step2c</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_Suffix_Verb_Step2b</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_Suffix_Verb_Step2a</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_Suffix_Verb_Step1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_Suffix_Noun_Step3</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_Suffix_Noun_Step2c2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_Suffix_Noun_Step2c1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_Suffix_Noun_Step2b</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_Suffix_Noun_Step2a</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_Suffix_Noun_Step1b</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_Suffix_Noun_Step1a</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_Suffix_All_alef_maqsura</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_Prefix_Step4_Verb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_Prefix_Step3_Verb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_Prefix_Step3b_Noun</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_Prefix_Step3a_Noun</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_Prefix_Step2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_Prefix_Step1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function_decl><type><specifier>extern</specifier> <name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>arabic_UTF_8_create_env</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>arabic_UTF_8_close_env</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x80</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x8B</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x8C</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_3</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_4</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x8E</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_5</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x8F</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_6</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x90</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_7</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x91</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_8</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x92</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_9</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0xA0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_10</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0xA1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_11</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0xA2</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_12</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0xA3</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_13</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0xA4</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_14</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0xA5</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_15</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0xA6</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_16</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0xA7</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_17</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0xA8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_18</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0xA9</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_19</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0x80</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_20</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0x81</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_21</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0x82</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_22</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0x83</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_23</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0x84</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_24</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0x85</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_25</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0x86</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_26</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0x87</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_27</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0x88</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_28</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0x89</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_29</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0x8A</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_30</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0x8B</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_31</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0x8C</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_33</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0x8E</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_34</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0x8F</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_35</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0x90</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_36</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0x91</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_37</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0x92</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_38</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0x93</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_39</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0x94</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_40</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0x95</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_41</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0x96</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_42</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0x97</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_43</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0x98</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_44</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0x99</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_45</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0x9A</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_46</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0x9B</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_47</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0x9C</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_48</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0x9D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_49</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0x9E</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_50</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0x9F</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_51</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0xA0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_52</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0xA1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_53</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0xA2</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_54</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0xA3</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_55</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0xA4</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_56</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0xA5</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_57</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0xA6</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_58</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0xA7</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_59</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0xA8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_60</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0xA9</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_61</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0xAA</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_62</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0xAB</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_63</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0xAC</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_64</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0xAD</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_65</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0xAE</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_66</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0xAF</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_67</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0xB0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_68</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0xB1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_69</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0xB2</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_70</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0xB3</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_71</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0xB4</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_72</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0xB5</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_73</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0xB6</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_74</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0xB7</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_75</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0xB8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_76</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0xB9</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_77</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0xBA</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_78</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0xBB</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_79</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0xBC</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_80</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0xBD</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_81</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0xBE</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_82</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0xBF</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_83</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0x80</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_84</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0x81</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_85</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0x82</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_86</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0x83</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_87</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0x84</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_88</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0x85</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_89</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0x86</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_90</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0x87</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_91</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0x88</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_92</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0x89</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_93</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0x8A</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_94</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0x8B</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_95</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0x8C</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_96</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_97</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0x8E</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_98</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0x8F</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_99</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0x90</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_100</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0x91</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_101</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0x92</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_102</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0x93</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_103</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0x94</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_104</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0x95</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_105</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0x96</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_106</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0x97</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_107</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0x98</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_108</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0x99</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_109</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0x9A</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_110</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0x9B</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_111</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0x9C</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_112</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0x9D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_113</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0x9E</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_114</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0x9F</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_115</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0xA0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_116</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0xA1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_117</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0xA2</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_118</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0xA3</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_119</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0xA4</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_120</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0xA5</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_121</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0xA6</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_122</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0xA7</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_123</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0xA8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_124</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0xA9</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_125</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0xAA</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_126</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0xAB</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_127</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0xAC</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_128</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0xAD</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_129</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0xAE</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_130</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0xAF</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_131</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0xB0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_132</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0xB1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_133</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0xB2</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_134</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0xB3</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_135</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0xB4</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_136</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0xB5</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_137</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0xB6</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_138</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0xB7</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_139</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0xB8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_140</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0xB9</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_141</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0xBA</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_142</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0xBB</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_143</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0xBC</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_0</name><index>[<expr><literal type="number">144</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_0_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_0_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  2 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_0_2</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  3 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_0_3</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  4 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_0_4</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  5 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_0_5</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  6 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_0_6</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  7 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_0_7</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  8 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_0_8</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  9 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_0_9</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 10 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_0_10</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 11 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_0_11</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 12 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_0_12</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 13 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_0_13</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 14 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_0_14</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 15 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_0_15</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 16 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_0_16</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 17 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_0_17</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 18 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_0_18</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 19 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_19</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 20 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_20</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 21 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_21</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 22 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_22</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 23 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_23</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 24 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_24</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 25 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_25</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 26 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_26</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 27 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_27</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 28 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_28</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 29 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_29</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 30 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_30</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 31 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_31</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 32 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_32</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 33 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_33</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 34 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_34</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 35 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_35</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 36 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_36</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 37 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_37</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 38 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_38</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 39 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_39</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 40 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_40</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 41 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_41</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 42 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_42</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 43 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_43</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 44 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_44</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 45 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_45</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 46 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_46</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 47 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_47</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 48 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_48</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 49 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_49</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 50 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_50</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 51 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_51</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 52 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_52</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 53 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_53</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 54 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_54</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 55 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_55</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 56 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_56</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 57 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_57</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 58 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_58</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 59 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_59</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 60 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_60</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 61 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_61</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 62 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_62</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 63 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_63</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 64 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_64</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 65 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_65</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 66 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_66</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 67 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_67</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 68 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_68</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 69 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_69</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 70 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_70</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 71 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_71</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 72 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_72</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 73 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_73</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 74 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_74</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 75 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_75</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 76 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_76</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 77 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_77</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 78 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_78</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 79 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_79</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 80 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_80</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 81 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_81</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 82 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_82</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 83 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_83</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 84 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_84</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 85 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_85</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 86 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_86</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 87 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_87</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 88 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_88</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 89 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_89</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 90 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_90</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 91 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_91</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 92 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_92</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 93 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_93</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 94 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_94</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 95 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_95</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 96 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_96</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 97 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_97</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 98 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_98</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 99 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_99</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*100 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_100</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*101 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_101</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*102 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_102</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*103 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_103</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*104 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_104</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*105 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_105</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*106 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_106</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*107 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_107</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*108 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_108</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*109 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_109</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*110 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_110</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*111 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_111</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*112 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_112</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*113 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_113</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*114 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_114</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*115 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_115</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*116 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_116</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*117 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_117</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*118 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_118</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*119 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_119</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*120 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_120</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*121 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_121</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*122 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_122</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*123 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_123</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*124 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_124</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*125 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_125</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*126 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_126</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*127 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_127</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*128 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_128</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*129 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_129</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*130 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_130</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*131 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_131</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*132 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_132</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*133 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_133</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*134 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_134</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*135 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_135</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*136 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_136</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*137 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_137</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*138 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_138</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*139 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_139</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*140 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_140</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*141 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_141</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*142 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_142</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*143 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_143</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_1_0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA2</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_1_1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA3</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_1_2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA4</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_1_3</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA5</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_1_4</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA6</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_1</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_1_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_1_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  2 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_1_2</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  3 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_1_3</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  4 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_1_4</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_2_0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA2</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_2_1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA3</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_2_2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA4</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_2_3</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA5</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_2_4</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA6</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_2</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_2_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_2_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  2 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_2_2</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  3 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_2_3</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  4 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_2_4</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_3_0</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA7</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x84</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_3_1</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA8</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA7</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x84</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_3_2</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA7</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x84</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_3_3</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x84</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_3</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_3_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><name>s_3_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  2 */</comment> <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><name>s_3_2</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  3 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_3_3</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_4_0</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA3</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA2</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_4_1</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA3</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA3</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_4_2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA3</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA4</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_4_3</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA3</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA5</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_4_4</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA3</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA7</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_4</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_4_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_4_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  2 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_4_2</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  3 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_4_3</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  4 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_4_4</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_5_0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x81</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_5_1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x88</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_5</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_5_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_5_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_6_0</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA7</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x84</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_6_1</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA8</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA7</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x84</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_6_2</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA7</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x84</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_6_3</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x84</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_6</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_6_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><name>s_6_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  2 */</comment> <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><name>s_6_2</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  3 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_6_3</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_7_0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_7_1</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA8</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_7_2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x83</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_7</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_7_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_7_1</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  2 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_7_2</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_0</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA3</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_1</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xAA</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x86</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_3</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x8A</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_8</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_8_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_8_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  2 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_8_2</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  3 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_8_3</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_9_0</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xAA</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_9_1</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xAA</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_9_2</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x8A</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xAA</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_9</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><name>s_9_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><name>s_9_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  2 */</comment> <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><name>s_9_2</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_10_0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x83</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_10_1</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x85</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_10_2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x85</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_10_3</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x86</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_10_4</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x87</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_10_5</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x8A</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_10_6</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA7</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_10_7</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA7</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_10_8</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA7</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_10_9</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA7</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_10</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_10_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_10_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  2 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_10_2</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  3 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_10_3</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  4 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_10_4</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  5 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_10_5</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  6 */</comment> <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><name>s_10_6</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  7 */</comment> <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><name>s_10_7</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  8 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_10_8</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  9 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_10_9</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_11_0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x86</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_11</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_11_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_12_0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x88</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_12_1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x8A</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_12_2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA7</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_12</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_12_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_12_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  2 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_12_2</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_13_0</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA7</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xAA</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_13</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_13_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_14_0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xAA</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_14</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_14_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_15_0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA9</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_15</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_15_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_16_0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x8A</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_16</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_16_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_17_0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x83</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_17_1</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x85</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_17_2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x85</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_17_3</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x86</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_17_4</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x86</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_17_5</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x87</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_17_6</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x88</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_17_7</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x8A</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_17_8</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA7</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_17_9</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA7</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_17_10</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA7</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_17_11</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA7</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_17</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_17_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_17_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  2 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_17_2</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  3 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_17_3</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  4 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_17_4</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  5 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_17_5</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  6 */</comment> <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><name>s_17_6</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  7 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_17_7</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  8 */</comment> <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><name>s_17_8</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  9 */</comment> <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><name>s_17_9</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 10 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_17_10</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 11 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_17_11</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_18_0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x86</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_18_1</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x86</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_18_2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x8A</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x86</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_18_3</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA7</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x86</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_18_4</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x86</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_18_5</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x8A</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_18_6</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA7</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_18_7</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA7</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_18_8</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA7</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_18_9</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA7</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_18_10</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xAA</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_18</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_18_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_18_1</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  2 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_18_2</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  3 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_18_3</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  4 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_18_4</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  5 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_18_5</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  6 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_18_6</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  7 */</comment> <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><name>s_18_7</name></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  8 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_18_8</name></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  9 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_18_9</name></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 10 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_18_10</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_19_0</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x85</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_19_1</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA7</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_19</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_19_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_19_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_20_0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x88</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_20_1</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x88</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_20</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_20_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><name>s_20_1</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_21_0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x89</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_21</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_21_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'0'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_1</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'1'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_2</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'2'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_3</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'3'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_4</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'4'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_5</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'5'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_6</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'6'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_7</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'7'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'8'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_9</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'9'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_10</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_11</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA3</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_12</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA5</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_13</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA6</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_14</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA2</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_15</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA4</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_16</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA7</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_17</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_18</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA9</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_19</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xAA</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_20</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xAB</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_21</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xAC</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_22</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xAD</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_23</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xAE</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_24</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xAF</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_25</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xB0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_26</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xB1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_27</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xB2</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_28</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xB3</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_29</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xB4</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_30</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xB5</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_31</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xB6</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_32</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xB7</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_33</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xB8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_34</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xB9</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_35</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xBA</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_36</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x81</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_37</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x82</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_38</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x83</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_39</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x84</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_40</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x85</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_41</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x86</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_42</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x87</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_43</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x88</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_44</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x89</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_45</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x8A</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_46</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA7</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_47</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA3</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_48</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA5</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_49</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA2</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_50</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_51</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA7</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_52</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x88</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_53</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x8A</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_54</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA3</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_55</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA2</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_56</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA7</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_57</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA5</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_58</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA7</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_59</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA7</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_60</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA8</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA7</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_61</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_62</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x83</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_63</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x8A</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_64</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xAA</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_65</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x86</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_66</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA3</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_67</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xA7</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xAA</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_68</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x8A</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_Normalize_pre</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content> <comment type="block">/* forwardmode */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>among_var</name></decl>;</decl_stmt>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>c1</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* do, line 247 */</comment>
        <while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content> <comment type="block">/* repeat, line 247 */</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>c2</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>c3</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* or, line 311 */</comment>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 249 */</comment>
                <expr_stmt><expr><name>among_var</name> <operator>=</operator> <call><name>find_among</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_0</name></expr></argument>, <argument><expr><literal type="number">144</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* substring, line 249 */</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>among_var</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab3</name>;</goto></block_content></block></if></if_stmt>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 249 */</comment>
                <switch>switch <condition>(<expr><name>among_var</name></expr>)</condition> <block>{<block_content> <comment type="block">/* among, line 249 */</comment>
                    <case>case <expr><literal type="number">1</literal></expr>:</case>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 250 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <break>break;</break>
                    <case>case <expr><literal type="number">2</literal></expr>:</case>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>s_0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 254 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <break>break;</break>
                    <case>case <expr><literal type="number">3</literal></expr>:</case>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>s_1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 255 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <break>break;</break>
                    <case>case <expr><literal type="number">4</literal></expr>:</case>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>s_2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 256 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <break>break;</break>
                    <case>case <expr><literal type="number">5</literal></expr>:</case>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>s_3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 257 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <break>break;</break>
                    <case>case <expr><literal type="number">6</literal></expr>:</case>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>s_4</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 258 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <break>break;</break>
                    <case>case <expr><literal type="number">7</literal></expr>:</case>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>s_5</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 259 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <break>break;</break>
                    <case>case <expr><literal type="number">8</literal></expr>:</case>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>s_6</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 260 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <break>break;</break>
                    <case>case <expr><literal type="number">9</literal></expr>:</case>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>s_7</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 261 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <break>break;</break>
                    <case>case <expr><literal type="number">10</literal></expr>:</case>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>s_8</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 262 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <break>break;</break>
                    <case>case <expr><literal type="number">11</literal></expr>:</case>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>s_9</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 263 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <break>break;</break>
                    <case>case <expr><literal type="number">12</literal></expr>:</case>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_10</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 266 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <break>break;</break>
                    <case>case <expr><literal type="number">13</literal></expr>:</case>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_11</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 267 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <break>break;</break>
                    <case>case <expr><literal type="number">14</literal></expr>:</case>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_12</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 268 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <break>break;</break>
                    <case>case <expr><literal type="number">15</literal></expr>:</case>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_13</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 269 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <break>break;</break>
                    <case>case <expr><literal type="number">16</literal></expr>:</case>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_14</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 270 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <break>break;</break>
                    <case>case <expr><literal type="number">17</literal></expr>:</case>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_15</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 271 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <break>break;</break>
                    <case>case <expr><literal type="number">18</literal></expr>:</case>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_16</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 272 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <break>break;</break>
                    <case>case <expr><literal type="number">19</literal></expr>:</case>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_17</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 273 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <break>break;</break>
                    <case>case <expr><literal type="number">20</literal></expr>:</case>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_18</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 274 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <break>break;</break>
                    <case>case <expr><literal type="number">21</literal></expr>:</case>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_19</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 275 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <break>break;</break>
                    <case>case <expr><literal type="number">22</literal></expr>:</case>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_20</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 276 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <break>break;</break>
                    <case>case <expr><literal type="number">23</literal></expr>:</case>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_21</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 277 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <break>break;</break>
                    <case>case <expr><literal type="number">24</literal></expr>:</case>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_22</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 278 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <break>break;</break>
                    <case>case <expr><literal type="number">25</literal></expr>:</case>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_23</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 279 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <break>break;</break>
                    <case>case <expr><literal type="number">26</literal></expr>:</case>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_24</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 280 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <break>break;</break>
                    <case>case <expr><literal type="number">27</literal></expr>:</case>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_25</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 281 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <break>break;</break>
                    <case>case <expr><literal type="number">28</literal></expr>:</case>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_26</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 282 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <break>break;</break>
                    <case>case <expr><literal type="number">29</literal></expr>:</case>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_27</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 283 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <break>break;</break>
                    <case>case <expr><literal type="number">30</literal></expr>:</case>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_28</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 284 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <break>break;</break>
                    <case>case <expr><literal type="number">31</literal></expr>:</case>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_29</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 285 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <break>break;</break>
                    <case>case <expr><literal type="number">32</literal></expr>:</case>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_30</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 286 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <break>break;</break>
                    <case>case <expr><literal type="number">33</literal></expr>:</case>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_31</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 287 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <break>break;</break>
                    <case>case <expr><literal type="number">34</literal></expr>:</case>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_32</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 288 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <break>break;</break>
                    <case>case <expr><literal type="number">35</literal></expr>:</case>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_33</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 289 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <break>break;</break>
                    <case>case <expr><literal type="number">36</literal></expr>:</case>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_34</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 290 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <break>break;</break>
                    <case>case <expr><literal type="number">37</literal></expr>:</case>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_35</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 291 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <break>break;</break>
                    <case>case <expr><literal type="number">38</literal></expr>:</case>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_36</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 292 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <break>break;</break>
                    <case>case <expr><literal type="number">39</literal></expr>:</case>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_37</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 293 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <break>break;</break>
                    <case>case <expr><literal type="number">40</literal></expr>:</case>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_38</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 294 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <break>break;</break>
                    <case>case <expr><literal type="number">41</literal></expr>:</case>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_39</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 295 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <break>break;</break>
                    <case>case <expr><literal type="number">42</literal></expr>:</case>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_40</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 296 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <break>break;</break>
                    <case>case <expr><literal type="number">43</literal></expr>:</case>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_41</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 297 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <break>break;</break>
                    <case>case <expr><literal type="number">44</literal></expr>:</case>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_42</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 298 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <break>break;</break>
                    <case>case <expr><literal type="number">45</literal></expr>:</case>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_43</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 299 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <break>break;</break>
                    <case>case <expr><literal type="number">46</literal></expr>:</case>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_44</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 300 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <break>break;</break>
                    <case>case <expr><literal type="number">47</literal></expr>:</case>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_45</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 301 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <break>break;</break>
                    <case>case <expr><literal type="number">48</literal></expr>:</case>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>s_46</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 304 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <break>break;</break>
                    <case>case <expr><literal type="number">49</literal></expr>:</case>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>s_47</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 305 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <break>break;</break>
                    <case>case <expr><literal type="number">50</literal></expr>:</case>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>s_48</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 306 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <break>break;</break>
                    <case>case <expr><literal type="number">51</literal></expr>:</case>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>s_49</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 307 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <break>break;</break>
                </block_content>}</block></switch>
                <goto>goto <name>lab2</name>;</goto>
            <label><name>lab3</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c3</name></expr>;</expr_stmt>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>skip_utf8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab1</name>;</goto></block_content></block></if></if_stmt>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt> <comment type="block">/* next, line 312 */</comment>
                </block_content>}</block>
            </block_content>}</block>
        <label><name>lab2</name>:</label>
            <continue>continue;</continue>
        <label><name>lab1</name>:</label>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c2</name></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></while>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>
    </block_content>}</block>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_Normalize_post</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content> <comment type="block">/* forwardmode */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>among_var</name></decl>;</decl_stmt>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>c1</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* do, line 318 */</comment>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name></expr>;</expr_stmt> <comment type="block">/* backwards, line 320 */</comment>

        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 321 */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>||</operator> <name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">5</literal> <operator>!=</operator> <literal type="number">5</literal> <operator>||</operator> <operator>!</operator><operator>(</operator><operator>(</operator><literal type="number">124</literal> <operator>&gt;&gt;</operator> <operator>(</operator><name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab0</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* substring, line 321 */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_1</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab0</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 321 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_50</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 322 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name></expr>;</expr_stmt>
    <label><name>lab0</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>
    </block_content>}</block>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>c2</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* do, line 329 */</comment>
        <while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content> <comment type="block">/* repeat, line 329 */</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>c3</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>c4</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* or, line 338 */</comment>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 332 */</comment>
                <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>||</operator> <name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">5</literal> <operator>!=</operator> <literal type="number">5</literal> <operator>||</operator> <operator>!</operator><operator>(</operator><operator>(</operator><literal type="number">124</literal> <operator>&gt;&gt;</operator> <operator>(</operator><name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab4</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* substring, line 332 */</comment>
                <expr_stmt><expr><name>among_var</name> <operator>=</operator> <call><name>find_among</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_2</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>among_var</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab4</name>;</goto></block_content></block></if></if_stmt>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 332 */</comment>
                <switch>switch <condition>(<expr><name>among_var</name></expr>)</condition> <block>{<block_content> <comment type="block">/* among, line 332 */</comment>
                    <case>case <expr><literal type="number">1</literal></expr>:</case>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_51</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 333 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <break>break;</break>
                    <case>case <expr><literal type="number">2</literal></expr>:</case>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_52</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 334 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <break>break;</break>
                    <case>case <expr><literal type="number">3</literal></expr>:</case>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_53</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 335 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <break>break;</break>
                </block_content>}</block></switch>
                <goto>goto <name>lab3</name>;</goto>
            <label><name>lab4</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c4</name></expr>;</expr_stmt>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>skip_utf8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab2</name>;</goto></block_content></block></if></if_stmt>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt> <comment type="block">/* next, line 339 */</comment>
                </block_content>}</block>
            </block_content>}</block>
        <label><name>lab3</name>:</label>
            <continue>continue;</continue>
        <label><name>lab2</name>:</label>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c3</name></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></while>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c2</name></expr>;</expr_stmt>
    </block_content>}</block>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_Checks1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content> <comment type="block">/* forwardmode */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>among_var</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 345 */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>+</operator> <literal type="number">3</literal> <operator>&gt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>||</operator> <operator>(</operator><name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">132</literal> <operator>&amp;&amp;</operator> <name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">167</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* substring, line 345 */</comment>
    <expr_stmt><expr><name>among_var</name> <operator>=</operator> <call><name>find_among</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_3</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>among_var</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 345 */</comment>
    <switch>switch <condition>(<expr><name>among_var</name></expr>)</condition> <block>{<block_content> <comment type="block">/* among, line 345 */</comment>
        <case>case <expr><literal type="number">1</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>len_utf8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* $(&lt;integer expression&gt; &gt; &lt;integer expression&gt;), line 346 */</comment>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* set is_noun, line 346 */</comment>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* unset is_verb, line 346 */</comment>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* set is_defined, line 346 */</comment>
            <break>break;</break>
        <case>case <expr><literal type="number">2</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>len_utf8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* $(&lt;integer expression&gt; &gt; &lt;integer expression&gt;), line 347 */</comment>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* set is_noun, line 347 */</comment>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* unset is_verb, line 347 */</comment>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* set is_defined, line 347 */</comment>
            <break>break;</break>
    </block_content>}</block></switch>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_Prefix_Step1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content> <comment type="block">/* forwardmode */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>among_var</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 354 */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>+</operator> <literal type="number">3</literal> <operator>&gt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>||</operator> <name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">5</literal> <operator>!=</operator> <literal type="number">5</literal> <operator>||</operator> <operator>!</operator><operator>(</operator><operator>(</operator><literal type="number">188</literal> <operator>&gt;&gt;</operator> <operator>(</operator><name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* substring, line 354 */</comment>
    <expr_stmt><expr><name>among_var</name> <operator>=</operator> <call><name>find_among</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_4</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>among_var</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 354 */</comment>
    <switch>switch <condition>(<expr><name>among_var</name></expr>)</condition> <block>{<block_content> <comment type="block">/* among, line 354 */</comment>
        <case>case <expr><literal type="number">1</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>len_utf8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* $(&lt;integer expression&gt; &gt; &lt;integer expression&gt;), line 355 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_54</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 355 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <break>break;</break>
        <case>case <expr><literal type="number">2</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>len_utf8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* $(&lt;integer expression&gt; &gt; &lt;integer expression&gt;), line 356 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_55</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 356 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <break>break;</break>
        <case>case <expr><literal type="number">3</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>len_utf8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* $(&lt;integer expression&gt; &gt; &lt;integer expression&gt;), line 358 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_56</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 358 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <break>break;</break>
        <case>case <expr><literal type="number">4</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>len_utf8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* $(&lt;integer expression&gt; &gt; &lt;integer expression&gt;), line 359 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_57</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 359 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <break>break;</break>
    </block_content>}</block></switch>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_Prefix_Step2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content> <comment type="block">/* forwardmode */</comment>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>c1</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* not, line 365 */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>s_58</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab0</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 365 */</comment>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    <label><name>lab0</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>
    </block_content>}</block>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>c2</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* not, line 366 */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>s_59</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab1</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 366 */</comment>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    <label><name>lab1</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c2</name></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 367 */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>||</operator> <operator>(</operator><name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">129</literal> <operator>&amp;&amp;</operator> <name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">136</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* substring, line 367 */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>find_among</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_5</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 367 */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>len_utf8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* $(&lt;integer expression&gt; &gt; &lt;integer expression&gt;), line 368 */</comment>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 368 */</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_Prefix_Step3a_Noun</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content> <comment type="block">/* forwardmode */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>among_var</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 374 */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>+</operator> <literal type="number">3</literal> <operator>&gt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>||</operator> <operator>(</operator><name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">132</literal> <operator>&amp;&amp;</operator> <name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">167</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* substring, line 374 */</comment>
    <expr_stmt><expr><name>among_var</name> <operator>=</operator> <call><name>find_among</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_6</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>among_var</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 374 */</comment>
    <switch>switch <condition>(<expr><name>among_var</name></expr>)</condition> <block>{<block_content> <comment type="block">/* among, line 374 */</comment>
        <case>case <expr><literal type="number">1</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>len_utf8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">5</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* $(&lt;integer expression&gt; &gt; &lt;integer expression&gt;), line 375 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 375 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <break>break;</break>
        <case>case <expr><literal type="number">2</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>len_utf8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* $(&lt;integer expression&gt; &gt; &lt;integer expression&gt;), line 376 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 376 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <break>break;</break>
    </block_content>}</block></switch>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_Prefix_Step3b_Noun</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content> <comment type="block">/* forwardmode */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>among_var</name></decl>;</decl_stmt>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>c1</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* not, line 381 */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>s_60</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab0</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* literal, line 381 */</comment>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    <label><name>lab0</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 382 */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>||</operator> <operator>(</operator><name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">168</literal> <operator>&amp;&amp;</operator> <name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">131</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* substring, line 382 */</comment>
    <expr_stmt><expr><name>among_var</name> <operator>=</operator> <call><name>find_among</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_7</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>among_var</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 382 */</comment>
    <switch>switch <condition>(<expr><name>among_var</name></expr>)</condition> <block>{<block_content> <comment type="block">/* among, line 382 */</comment>
        <case>case <expr><literal type="number">1</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>len_utf8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* $(&lt;integer expression&gt; &gt; &lt;integer expression&gt;), line 383 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 383 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <break>break;</break>
        <case>case <expr><literal type="number">2</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>len_utf8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* $(&lt;integer expression&gt; &gt; &lt;integer expression&gt;), line 385 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_61</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 385 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <break>break;</break>
        <case>case <expr><literal type="number">3</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>len_utf8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* $(&lt;integer expression&gt; &gt; &lt;integer expression&gt;), line 386 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_62</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 386 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <break>break;</break>
    </block_content>}</block></switch>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_Prefix_Step3_Verb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content> <comment type="block">/* forwardmode */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>among_var</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 392 */</comment>
    <expr_stmt><expr><name>among_var</name> <operator>=</operator> <call><name>find_among</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_8</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* substring, line 392 */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>among_var</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 392 */</comment>
    <switch>switch <condition>(<expr><name>among_var</name></expr>)</condition> <block>{<block_content> <comment type="block">/* among, line 392 */</comment>
        <case>case <expr><literal type="number">1</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>len_utf8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* $(&lt;integer expression&gt; &gt; &lt;integer expression&gt;), line 394 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_63</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 394 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <break>break;</break>
        <case>case <expr><literal type="number">2</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>len_utf8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* $(&lt;integer expression&gt; &gt; &lt;integer expression&gt;), line 395 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_64</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 395 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <break>break;</break>
        <case>case <expr><literal type="number">3</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>len_utf8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* $(&lt;integer expression&gt; &gt; &lt;integer expression&gt;), line 396 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_65</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 396 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <break>break;</break>
        <case>case <expr><literal type="number">4</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>len_utf8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* $(&lt;integer expression&gt; &gt; &lt;integer expression&gt;), line 397 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_66</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 397 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <break>break;</break>
    </block_content>}</block></switch>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_Prefix_Step4_Verb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content> <comment type="block">/* forwardmode */</comment>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 402 */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>+</operator> <literal type="number">5</literal> <operator>&gt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>||</operator> <name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">170</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* substring, line 402 */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>find_among</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_9</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 402 */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>len_utf8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* $(&lt;integer expression&gt; &gt; &lt;integer expression&gt;), line 403 */</comment>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* set is_verb, line 403 */</comment>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* unset is_noun, line 403 */</comment>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>s_67</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 403 */</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_Suffix_Noun_Step1a</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content> <comment type="block">/* backwardmode */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>among_var</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 411 */</comment>
    <expr_stmt><expr><name>among_var</name> <operator>=</operator> <call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_10</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* substring, line 411 */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>among_var</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 411 */</comment>
    <switch>switch <condition>(<expr><name>among_var</name></expr>)</condition> <block>{<block_content> <comment type="block">/* among, line 411 */</comment>
        <case>case <expr><literal type="number">1</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>len_utf8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* $(&lt;integer expression&gt; &gt;= &lt;integer expression&gt;), line 412 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 412 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <break>break;</break>
        <case>case <expr><literal type="number">2</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>len_utf8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">5</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* $(&lt;integer expression&gt; &gt;= &lt;integer expression&gt;), line 413 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 413 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <break>break;</break>
        <case>case <expr><literal type="number">3</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>len_utf8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">6</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* $(&lt;integer expression&gt; &gt;= &lt;integer expression&gt;), line 414 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 414 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <break>break;</break>
    </block_content>}</block></switch>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_Suffix_Noun_Step1b</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content> <comment type="block">/* backwardmode */</comment>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 418 */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>||</operator> <name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">134</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* substring, line 418 */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_11</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 418 */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>len_utf8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">5</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* $(&lt;integer expression&gt; &gt; &lt;integer expression&gt;), line 419 */</comment>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 419 */</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_Suffix_Noun_Step2a</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content> <comment type="block">/* backwardmode */</comment>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 424 */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_12</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* substring, line 424 */</comment>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 424 */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>len_utf8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* $(&lt;integer expression&gt; &gt; &lt;integer expression&gt;), line 425 */</comment>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 425 */</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_Suffix_Noun_Step2b</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content> <comment type="block">/* backwardmode */</comment>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 430 */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">3</literal> <operator>&lt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>||</operator> <name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">170</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* substring, line 430 */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_13</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 430 */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>len_utf8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">5</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* $(&lt;integer expression&gt; &gt;= &lt;integer expression&gt;), line 431 */</comment>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 431 */</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_Suffix_Noun_Step2c1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content> <comment type="block">/* backwardmode */</comment>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 436 */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>||</operator> <name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">170</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* substring, line 436 */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_14</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 436 */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>len_utf8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* $(&lt;integer expression&gt; &gt;= &lt;integer expression&gt;), line 437 */</comment>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 437 */</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_Suffix_Noun_Step2c2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content> <comment type="block">/* backwardmode */</comment>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 441 */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>||</operator> <name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">169</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* substring, line 441 */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_15</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 441 */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>len_utf8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* $(&lt;integer expression&gt; &gt;= &lt;integer expression&gt;), line 442 */</comment>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 442 */</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_Suffix_Noun_Step3</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content> <comment type="block">/* backwardmode */</comment>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 446 */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>||</operator> <name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">138</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* substring, line 446 */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_16</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 446 */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>len_utf8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* $(&lt;integer expression&gt; &gt;= &lt;integer expression&gt;), line 447 */</comment>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 447 */</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_Suffix_Verb_Step1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content> <comment type="block">/* backwardmode */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>among_var</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 452 */</comment>
    <expr_stmt><expr><name>among_var</name> <operator>=</operator> <call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_17</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* substring, line 452 */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>among_var</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 452 */</comment>
    <switch>switch <condition>(<expr><name>among_var</name></expr>)</condition> <block>{<block_content> <comment type="block">/* among, line 452 */</comment>
        <case>case <expr><literal type="number">1</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>len_utf8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* $(&lt;integer expression&gt; &gt;= &lt;integer expression&gt;), line 453 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 453 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <break>break;</break>
        <case>case <expr><literal type="number">2</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>len_utf8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">5</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* $(&lt;integer expression&gt; &gt;= &lt;integer expression&gt;), line 454 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 454 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <break>break;</break>
        <case>case <expr><literal type="number">3</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>len_utf8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">6</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* $(&lt;integer expression&gt; &gt;= &lt;integer expression&gt;), line 455 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 455 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <break>break;</break>
    </block_content>}</block></switch>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_Suffix_Verb_Step2a</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content> <comment type="block">/* backwardmode */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>among_var</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 459 */</comment>
    <expr_stmt><expr><name>among_var</name> <operator>=</operator> <call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_18</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* substring, line 459 */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>among_var</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 459 */</comment>
    <switch>switch <condition>(<expr><name>among_var</name></expr>)</condition> <block>{<block_content> <comment type="block">/* among, line 459 */</comment>
        <case>case <expr><literal type="number">1</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>len_utf8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* $(&lt;integer expression&gt; &gt;= &lt;integer expression&gt;), line 460 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 460 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <break>break;</break>
        <case>case <expr><literal type="number">2</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>len_utf8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">5</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* $(&lt;integer expression&gt; &gt;= &lt;integer expression&gt;), line 462 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 462 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <break>break;</break>
        <case>case <expr><literal type="number">3</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>len_utf8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">5</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* $(&lt;integer expression&gt; &gt; &lt;integer expression&gt;), line 463 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 463 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <break>break;</break>
        <case>case <expr><literal type="number">4</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>len_utf8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">6</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* $(&lt;integer expression&gt; &gt;= &lt;integer expression&gt;), line 464 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 464 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <break>break;</break>
    </block_content>}</block></switch>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_Suffix_Verb_Step2b</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content> <comment type="block">/* backwardmode */</comment>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 469 */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">3</literal> <operator>&lt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>||</operator> <operator>(</operator><name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">133</literal> <operator>&amp;&amp;</operator> <name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">167</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* substring, line 469 */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_19</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 469 */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>len_utf8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">5</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* $(&lt;integer expression&gt; &gt;= &lt;integer expression&gt;), line 470 */</comment>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 470 */</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_Suffix_Verb_Step2c</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content> <comment type="block">/* backwardmode */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>among_var</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 476 */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>||</operator> <name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">136</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* substring, line 476 */</comment>
    <expr_stmt><expr><name>among_var</name> <operator>=</operator> <call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_20</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>among_var</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 476 */</comment>
    <switch>switch <condition>(<expr><name>among_var</name></expr>)</condition> <block>{<block_content> <comment type="block">/* among, line 476 */</comment>
        <case>case <expr><literal type="number">1</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>len_utf8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* $(&lt;integer expression&gt; &gt;= &lt;integer expression&gt;), line 477 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 477 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <break>break;</break>
        <case>case <expr><literal type="number">2</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>len_utf8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">6</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* $(&lt;integer expression&gt; &gt;= &lt;integer expression&gt;), line 478 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 478 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <break>break;</break>
    </block_content>}</block></switch>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_Suffix_All_alef_maqsura</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content> <comment type="block">/* backwardmode */</comment>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 483 */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>||</operator> <name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">137</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* substring, line 483 */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_21</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 483 */</comment>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_68</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 484 */</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>int</name></type> <name>arabic_UTF_8_stem</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content> <comment type="block">/* forwardmode */</comment>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* set is_noun, line 493 */</comment>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* set is_verb, line 494 */</comment>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* unset is_defined, line 495 */</comment>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>c1</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* do, line 498 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_Checks1</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* call Checks1, line 498 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab0</name>;</goto></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
    <label><name>lab0</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>
    </block_content>}</block>
    <comment type="block">/* do, line 501 */</comment>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_Normalize_pre</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* call Normalize_pre, line 501 */</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab1</name>;</goto></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
<label><name>lab1</name>:</label>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name></expr>;</expr_stmt> <comment type="block">/* backwards, line 504 */</comment>

    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m2</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m2</name></expr>;</expr_stmt> <comment type="block">/* do, line 506 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m3</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m3</name></expr>;</expr_stmt> <comment type="block">/* or, line 520 */</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>z</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab4</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* Boolean test is_verb, line 509 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m4</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m4</name></expr>;</expr_stmt> <comment type="block">/* or, line 515 */</comment>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
                    <while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content> <comment type="block">/* atleast, line 512 */</comment>
                        <decl_stmt><decl><type><name>int</name></type> <name>m5</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m5</name></expr>;</expr_stmt>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_Suffix_Verb_Step1</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* call Suffix_Verb_Step1, line 512 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab7</name>;</goto></block_content></block></if></if_stmt>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
                        <continue>continue;</continue>
                    <label><name>lab7</name>:</label>
                        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m5</name></expr>;</expr_stmt>
                        <break>break;</break>
                    </block_content>}</block></while>
                    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab6</name>;</goto></block_content></block></if></if_stmt>
                </block_content>}</block>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m6</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m6</name></expr>;</expr_stmt> <comment type="block">/* or, line 513 */</comment>
                    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_Suffix_Verb_Step2a</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* call Suffix_Verb_Step2a, line 513 */</comment>
                        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab9</name>;</goto></block_content></block></if></if_stmt>
                        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                    </block_content>}</block>
                    <goto>goto <name>lab8</name>;</goto>
                <label><name>lab9</name>:</label>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m6</name></expr>;</expr_stmt>
                    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_Suffix_Verb_Step2c</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* call Suffix_Verb_Step2c, line 513 */</comment>
                        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab10</name>;</goto></block_content></block></if></if_stmt>
                        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                    </block_content>}</block>
                    <goto>goto <name>lab8</name>;</goto>
                <label><name>lab10</name>:</label>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m6</name></expr>;</expr_stmt>
                    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>skip_utf8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>lb</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab6</name>;</goto></block_content></block></if></if_stmt>
                        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt> <comment type="block">/* next, line 513 */</comment>
                    </block_content>}</block>
                </block_content>}</block>
            <label><name>lab8</name>:</label>
                <goto>goto <name>lab5</name>;</goto>
            <label><name>lab6</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m4</name></expr>;</expr_stmt>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_Suffix_Verb_Step2b</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* call Suffix_Verb_Step2b, line 515 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab11</name>;</goto></block_content></block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
                <goto>goto <name>lab5</name>;</goto>
            <label><name>lab11</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m4</name></expr>;</expr_stmt>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_Suffix_Verb_Step2a</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* call Suffix_Verb_Step2a, line 516 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab4</name>;</goto></block_content></block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
            </block_content>}</block>
        <label><name>lab5</name>:</label>
            <goto>goto <name>lab3</name>;</goto>
        <label><name>lab4</name>:</label>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m3</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>z</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab12</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* Boolean test is_noun, line 521 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m7</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m7</name></expr>;</expr_stmt> <comment type="block">/* try, line 524 */</comment>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m8</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m8</name></expr>;</expr_stmt> <comment type="block">/* or, line 526 */</comment>
                    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_Suffix_Noun_Step2c2</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* call Suffix_Noun_Step2c2, line 525 */</comment>
                        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab15</name>;</goto></block_content></block></if></if_stmt>
                        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                    </block_content>}</block>
                    <goto>goto <name>lab14</name>;</goto>
                <label><name>lab15</name>:</label>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m8</name></expr>;</expr_stmt>
                    <comment type="block">/* not, line 526 */</comment>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>z</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab17</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* Boolean test is_defined, line 526 */</comment>
                    <goto>goto <name>lab16</name>;</goto>
                <label><name>lab17</name>:</label>
                    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_Suffix_Noun_Step1a</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* call Suffix_Noun_Step1a, line 526 */</comment>
                        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab16</name>;</goto></block_content></block></if></if_stmt>
                        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                    </block_content>}</block>
                    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m9</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m9</name></expr>;</expr_stmt> <comment type="block">/* or, line 528 */</comment>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_Suffix_Noun_Step2a</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* call Suffix_Noun_Step2a, line 527 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab19</name>;</goto></block_content></block></if></if_stmt>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <goto>goto <name>lab18</name>;</goto>
                    <label><name>lab19</name>:</label>
                        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m9</name></expr>;</expr_stmt>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_Suffix_Noun_Step2b</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* call Suffix_Noun_Step2b, line 528 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab20</name>;</goto></block_content></block></if></if_stmt>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <goto>goto <name>lab18</name>;</goto>
                    <label><name>lab20</name>:</label>
                        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m9</name></expr>;</expr_stmt>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_Suffix_Noun_Step2c1</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* call Suffix_Noun_Step2c1, line 529 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab21</name>;</goto></block_content></block></if></if_stmt>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <goto>goto <name>lab18</name>;</goto>
                    <label><name>lab21</name>:</label>
                        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m9</name></expr>;</expr_stmt>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>skip_utf8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>lb</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab16</name>;</goto></block_content></block></if></if_stmt>
                            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt> <comment type="block">/* next, line 530 */</comment>
                        </block_content>}</block>
                    </block_content>}</block>
                <label><name>lab18</name>:</label>
                    <goto>goto <name>lab14</name>;</goto>
                <label><name>lab16</name>:</label>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m8</name></expr>;</expr_stmt>
                    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_Suffix_Noun_Step1b</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* call Suffix_Noun_Step1b, line 531 */</comment>
                        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab22</name>;</goto></block_content></block></if></if_stmt>
                        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                    </block_content>}</block>
                    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m10</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m10</name></expr>;</expr_stmt> <comment type="block">/* or, line 533 */</comment>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_Suffix_Noun_Step2a</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* call Suffix_Noun_Step2a, line 532 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab24</name>;</goto></block_content></block></if></if_stmt>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <goto>goto <name>lab23</name>;</goto>
                    <label><name>lab24</name>:</label>
                        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m10</name></expr>;</expr_stmt>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_Suffix_Noun_Step2b</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* call Suffix_Noun_Step2b, line 533 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab25</name>;</goto></block_content></block></if></if_stmt>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <goto>goto <name>lab23</name>;</goto>
                    <label><name>lab25</name>:</label>
                        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m10</name></expr>;</expr_stmt>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_Suffix_Noun_Step2c1</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* call Suffix_Noun_Step2c1, line 534 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab22</name>;</goto></block_content></block></if></if_stmt>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                    </block_content>}</block>
                <label><name>lab23</name>:</label>
                    <goto>goto <name>lab14</name>;</goto>
                <label><name>lab22</name>:</label>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m8</name></expr>;</expr_stmt>
                    <comment type="block">/* not, line 535 */</comment>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>z</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab27</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* Boolean test is_defined, line 535 */</comment>
                    <goto>goto <name>lab26</name>;</goto>
                <label><name>lab27</name>:</label>
                    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_Suffix_Noun_Step2a</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* call Suffix_Noun_Step2a, line 535 */</comment>
                        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab26</name>;</goto></block_content></block></if></if_stmt>
                        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                    </block_content>}</block>
                    <goto>goto <name>lab14</name>;</goto>
                <label><name>lab26</name>:</label>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m8</name></expr>;</expr_stmt>
                    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_Suffix_Noun_Step2b</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* call Suffix_Noun_Step2b, line 536 */</comment>
                        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m7</name></expr>;</expr_stmt> <goto>goto <name>lab13</name>;</goto> </block_content>}</block></if></if_stmt>
                        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                    </block_content>}</block>
                </block_content>}</block>
            <label><name>lab14</name>:</label>
            <label><name>lab13</name>:</label>
                <empty_stmt>;</empty_stmt>
            </block_content>}</block>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_Suffix_Noun_Step3</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* call Suffix_Noun_Step3, line 538 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab12</name>;</goto></block_content></block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <goto>goto <name>lab3</name>;</goto>
        <label><name>lab12</name>:</label>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m3</name></expr>;</expr_stmt>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_Suffix_All_alef_maqsura</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* call Suffix_All_alef_maqsura, line 544 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab2</name>;</goto></block_content></block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
        </block_content>}</block>
    <label><name>lab3</name>:</label>
    <label><name>lab2</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m2</name></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name></expr>;</expr_stmt>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>c11</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* do, line 549 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>c12</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* try, line 550 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_Prefix_Step1</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* call Prefix_Step1, line 550 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c12</name></expr>;</expr_stmt> <goto>goto <name>lab29</name>;</goto> </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
        <label><name>lab29</name>:</label>
            <empty_stmt>;</empty_stmt>
        </block_content>}</block>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>c13</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* try, line 551 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_Prefix_Step2</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* call Prefix_Step2, line 551 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c13</name></expr>;</expr_stmt> <goto>goto <name>lab30</name>;</goto> </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
        <label><name>lab30</name>:</label>
            <empty_stmt>;</empty_stmt>
        </block_content>}</block>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>c14</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* or, line 553 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_Prefix_Step3a_Noun</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* call Prefix_Step3a_Noun, line 552 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab32</name>;</goto></block_content></block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <goto>goto <name>lab31</name>;</goto>
        <label><name>lab32</name>:</label>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c14</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>z</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab33</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* Boolean test is_noun, line 553 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_Prefix_Step3b_Noun</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* call Prefix_Step3b_Noun, line 553 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab33</name>;</goto></block_content></block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <goto>goto <name>lab31</name>;</goto>
        <label><name>lab33</name>:</label>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c14</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>z</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab28</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* Boolean test is_verb, line 554 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>c15</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* try, line 554 */</comment>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_Prefix_Step3_Verb</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* call Prefix_Step3_Verb, line 554 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c15</name></expr>;</expr_stmt> <goto>goto <name>lab34</name>;</goto> </block_content>}</block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
            <label><name>lab34</name>:</label>
                <empty_stmt>;</empty_stmt>
            </block_content>}</block>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_Prefix_Step4_Verb</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* call Prefix_Step4_Verb, line 554 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab28</name>;</goto></block_content></block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
        </block_content>}</block>
    <label><name>lab31</name>:</label>
    <label><name>lab28</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c11</name></expr>;</expr_stmt>
    </block_content>}</block>
    <comment type="block">/* do, line 559 */</comment>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_Normalize_post</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* call Normalize_post, line 559 */</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab35</name>;</goto></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
<label><name>lab35</name>:</label>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>arabic_UTF_8_create_env</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>SN_create_env</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>void</name></type> <name>arabic_UTF_8_close_env</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>SN_close_env</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

</unit>
