<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/backend/parser/parse_cypher_utils.c"><comment type="block">/*
 * parse_cypher_utils.c
 *
 * Copyright (c) 2022 by Bitnine Global, Inc.
 *
 * IDENTIFICATION
 *	  src/include/parser/parse_cypher_utils.c
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/relscan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/ag_label.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/makefuncs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/parse_cypher_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/parse_relation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/syscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/parsetree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/heap.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>GetSubLevelsUpByNSItem</name><parameter_list>(<parameter><decl><type><name>ParseState</name> <modifier>*</modifier></type><name>pstate</name></decl></parameter>,
								  <parameter><decl><type><name>ParseNamespaceItem</name> <modifier>*</modifier></type><name>nsitem</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>Node</name> <modifier>*</modifier></type><name>makeJsonbFuncAccessor</name><parameter_list>(<parameter><decl><type><name>ParseState</name> <modifier>*</modifier></type><name>pstate</name></decl></parameter>, <parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CypherAccessExpr</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>CypherAccessExpr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator> <name>expr</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <name>path</name></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>a</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>IsJsonbAccessor</name><parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>expr</name></expr></argument>, <argument><expr><name>CypherAccessExpr</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>getAccessorArguments</name><parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>Node</name> <modifier>*</modifier><modifier>*</modifier></type><name>expr</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier><modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>CypherAccessExpr</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>CypherAccessExpr</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator><name>CypherAccessExpr</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><operator>*</operator><name>expr</name> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>a</name><operator>-&gt;</operator><name>arg</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>path</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>path</name></name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cannot extract elements from node"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * When use PROPERTY INDEX, there is no way to specify original column
 * reference, so make vertex_id, edge_start, and edge_end in the form of
 * reserved words to create a way to specify B.
 */</comment>
<function><type><name>bool</name></type> <name>ConvertReservedColumnRefForIndex</name><parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>relid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Form_ag_label</name></type> <name>labtup</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>laboid</name> <init>= <expr><call><name>get_relid_laboid</name><argument_list>(<argument><expr><name>relid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type> <name>tuple</name> <init>= <expr><call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>LABELOID</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>laboid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>isVertex</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for label (OID=%u)"</literal></expr></argument>, <argument><expr><name>laboid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>labtup</name> <operator>=</operator> <operator>(</operator><name>Form_ag_label</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>isVertex</name> <operator>=</operator> <operator>(</operator><name><name>labtup</name><operator>-&gt;</operator><name>labkind</name></name> <operator>==</operator> <name>LABEL_KIND_VERTEX</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>ColumnRef</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>ColumnRef</name> <modifier>*</modifier></type><name>columnRef</name> <init>= <expr><operator>(</operator><name>ColumnRef</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>columnRef</name><operator>-&gt;</operator><name>fields</name><operator>-&gt;</operator><name>length</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>field_name</name> <init>= <expr><call><name>linitial</name><argument_list>(<argument><expr><name><name>columnRef</name><operator>-&gt;</operator><name>fields</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>field_name</name></expr></argument>, <argument><expr><name>String</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fieldStr</name> <init>= <expr><call><name>strVal</name><argument_list>(<argument><expr><name>field_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if_stmt><if>if <condition>(<expr><name>isVertex</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>fieldStr</name></expr></argument>, <argument><expr><literal type="string">"vertex_id"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name><name>columnRef</name><operator>-&gt;</operator><name>fields</name></name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><call><name>makeString</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return <expr><name>true</name></expr>;</return>
				</block_content>}</block></if>
				<if type="elseif">else if <condition>(<expr><operator>!</operator><name>isVertex</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>fieldStr</name></expr></argument>, <argument><expr><literal type="string">"edge_start"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name><name>columnRef</name><operator>-&gt;</operator><name>fields</name></name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><call><name>makeString</name><argument_list>(<argument><expr><literal type="string">"start"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return <expr><name>true</name></expr>;</return>
				</block_content>}</block></if>
				<if type="elseif">else if <condition>(<expr><operator>!</operator><name>isVertex</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>fieldStr</name></expr></argument>, <argument><expr><literal type="string">"edge_end"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name><name>columnRef</name><operator>-&gt;</operator><name>fields</name></name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><call><name>makeString</name><argument_list>(<argument><expr><literal type="string">"end"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return <expr><name>true</name></expr>;</return>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>Alias</name> <modifier>*</modifier></type>
<name>makeAliasOptUnique</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>aliasname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>aliasname</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>aliasname</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><call><name>genUniqueName</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name>pstrdup</name><argument_list>(<argument><expr><name>aliasname</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
	<return>return <expr><call><name>makeAliasNoDup</name><argument_list>(<argument><expr><name>aliasname</name></expr></argument>, <argument><expr><name>NIL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>Alias</name> <modifier>*</modifier></type>
<name>makeAliasNoDup</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>aliasname</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>colnames</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Alias</name> <modifier>*</modifier></type><name>alias</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>alias</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>Alias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>alias</name><operator>-&gt;</operator><name>aliasname</name></name> <operator>=</operator> <name>aliasname</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>alias</name><operator>-&gt;</operator><name>colnames</name></name> <operator>=</operator> <name>colnames</name></expr>;</expr_stmt>

	<return>return <expr><name>alias</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* generate unique name */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>genUniqueName</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* NOTE: safe unless there are more than 2^32 anonymous names at once */</comment>
	<decl_stmt><decl><type><specifier>static</specifier> <name>uint32</name></type> <name>seq</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>char</name></type> <name><name>data</name><index>[<expr><name>NAMEDATALEN</name></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"&lt;%010u&gt;"</literal></expr></argument>, <argument><expr><name>seq</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>pstrdup</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>makeExtraFromNSItem</name><parameter_list>(<parameter><decl><type><name>ParseNamespaceItem</name> <modifier>*</modifier></type><name>nsitem</name></decl></parameter>, <parameter><decl><type><name>RangeTblRef</name> <modifier>*</modifier><modifier>*</modifier></type><name>rtr</name></decl></parameter>,
					<parameter><decl><type><name>bool</name></type> <name>visible</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>rtr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>RangeTblRef</name> <modifier>*</modifier></type><name>_rtr</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>_rtr</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>RangeTblRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>_rtr</name><operator>-&gt;</operator><name>rtindex</name></name> <operator>=</operator> <name><name>nsitem</name><operator>-&gt;</operator><name>p_rtindex</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><operator>*</operator><name>rtr</name> <operator>=</operator> <name>_rtr</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>nsitem</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>nsitem</name><operator>-&gt;</operator><name>p_rel_visible</name></name> <operator>=</operator> <name>visible</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>nsitem</name><operator>-&gt;</operator><name>p_cols_visible</name></name> <operator>=</operator> <name>visible</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>nsitem</name><operator>-&gt;</operator><name>p_lateral_only</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>nsitem</name><operator>-&gt;</operator><name>p_lateral_ok</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>addNSItemToJoinlist</name><parameter_list>(<parameter><decl><type><name>ParseState</name> <modifier>*</modifier></type><name>pstate</name></decl></parameter>, <parameter><decl><type><name>ParseNamespaceItem</name> <modifier>*</modifier></type><name>nsitem</name></decl></parameter>,
					<parameter><decl><type><name>bool</name></type> <name>visible</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ParseNamespaceItem</name> <modifier>*</modifier></type><name>conflict_nsitem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RangeTblRef</name> <modifier>*</modifier></type><name>rtr</name></decl>;</decl_stmt>
	<comment type="block">/*
	 * There should be no namespace conflicts because we check a variable
	 * (which becomes an alias) is duplicated. This check remains to prevent
	 * future programming error.
	 */</comment>
	<expr_stmt><expr><name>conflict_nsitem</name> <operator>=</operator> <call><name>scanNameSpaceForRefname</name><argument_list>(<argument><expr><name>pstate</name></expr></argument>,
											  <argument><expr><name><name>nsitem</name><operator>-&gt;</operator><name>p_rte</name><operator>-&gt;</operator><name>eref</name><operator>-&gt;</operator><name>aliasname</name></name></expr></argument>,
											  <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>conflict_nsitem</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>RangeTblEntry</name> <modifier>*</modifier></type><name>rte</name> <init>= <expr><name><name>nsitem</name><operator>-&gt;</operator><name>p_rte</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>RangeTblEntry</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name><name>conflict_nsitem</name><operator>-&gt;</operator><name>p_rte</name></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>rte</name><operator>-&gt;</operator><name>rtekind</name></name> <operator>==</operator> <name>RTE_RELATION</name> <operator>&amp;&amp;</operator> <name><name>rte</name><operator>-&gt;</operator><name>alias</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
			  <name><name>tmp</name><operator>-&gt;</operator><name>rtekind</name></name> <operator>==</operator> <name>RTE_RELATION</name> <operator>&amp;&amp;</operator> <name><name>tmp</name><operator>-&gt;</operator><name>alias</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
			  <name><name>rte</name><operator>-&gt;</operator><name>relid</name></name> <operator>!=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>relid</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DUPLICATE_ALIAS</name></expr></argument>)</argument_list></call><operator>,</operator>
							<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"variable \"%s\" specified more than once"</literal></expr></argument>,
								   <argument><expr><name><name>rte</name><operator>-&gt;</operator><name>eref</name><operator>-&gt;</operator><name>aliasname</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>makeExtraFromNSItem</name><argument_list>(<argument><expr><name>nsitem</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rtr</name></expr></argument>, <argument><expr><name>visible</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pstate</name><operator>-&gt;</operator><name>p_joinlist</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>pstate</name><operator>-&gt;</operator><name>p_joinlist</name></name></expr></argument>, <argument><expr><name>rtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pstate</name><operator>-&gt;</operator><name>p_namespace</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>pstate</name><operator>-&gt;</operator><name>p_namespace</name></name></expr></argument>, <argument><expr><name>nsitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * make_var - Copy from a previous version of PG. 
 *		Build a Var node for an attribute identified by RTE and attrno
 */</comment>
<function><type><name>Var</name> <modifier>*</modifier></type>
<name>make_var</name><parameter_list>(<parameter><decl><type><name>ParseState</name> <modifier>*</modifier></type><name>pstate</name></decl></parameter>, <parameter><decl><type><name>ParseNamespaceItem</name> <modifier>*</modifier></type><name>nsitem</name></decl></parameter>, <parameter><decl><type><name>AttrNumber</name></type> <name>attnum</name></decl></parameter>,
		 <parameter><decl><type><name>int</name></type> <name>location</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Var</name>		   <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>sublevels_up</name> <init>= <expr><call><name>GetSubLevelsUpByNSItem</name><argument_list>(<argument><expr><name>pstate</name></expr></argument>, <argument><expr><name>nsitem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>attnum</name> <operator>&gt;</operator> <name>InvalidAttrNumber</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Get attribute data from the ParseNamespaceColumn array */</comment>
		<decl_stmt><decl><type><name>ParseNamespaceColumn</name> <modifier>*</modifier></type><name>nscol</name> <init>= <expr><operator>&amp;</operator><name><name>nsitem</name><operator>-&gt;</operator><name>p_nscolumns</name><index>[<expr><name>attnum</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<comment type="block">/* Complain if dropped column.  See notes in scanRTEForColumn. */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>nscol</name><operator>-&gt;</operator><name>p_varno</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_COLUMN</name></expr></argument>)</argument_list></call><operator>,</operator>
							<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"column of relation \"%s\" does not exist"</literal></expr></argument>,
								   <argument><expr><name><name>nsitem</name><operator>-&gt;</operator><name>p_rte</name><operator>-&gt;</operator><name>eref</name><operator>-&gt;</operator><name>aliasname</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>makeVar</name><argument_list>(<argument><expr><name><name>nsitem</name><operator>-&gt;</operator><name>p_rtindex</name></name></expr></argument>,
						 <argument><expr><name>attnum</name></expr></argument>,
						 <argument><expr><name><name>nscol</name><operator>-&gt;</operator><name>p_vartype</name></name></expr></argument>,
						 <argument><expr><name><name>nscol</name><operator>-&gt;</operator><name>p_vartypmod</name></name></expr></argument>,
						 <argument><expr><name><name>nscol</name><operator>-&gt;</operator><name>p_varcollid</name></name></expr></argument>,
						 <argument><expr><name>sublevels_up</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* System column, so use predetermined type data */</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>FormData_pg_attribute</name> <modifier>*</modifier></type><name>sysatt</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>sysatt</name> <operator>=</operator> <call><name>SystemAttributeDefinition</name><argument_list>(<argument><expr><name>attnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>makeVar</name><argument_list>(<argument><expr><name><name>nsitem</name><operator>-&gt;</operator><name>p_rtindex</name></name></expr></argument>,
						 <argument><expr><name>attnum</name></expr></argument>,
						 <argument><expr><name><name>sysatt</name><operator>-&gt;</operator><name>atttypid</name></name></expr></argument>,
						 <argument><expr><name><name>sysatt</name><operator>-&gt;</operator><name>atttypmod</name></name></expr></argument>,
						 <argument><expr><name><name>sysatt</name><operator>-&gt;</operator><name>attcollation</name></name></expr></argument>,
						 <argument><expr><name>sublevels_up</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <name>location</name></expr>;</expr_stmt>
	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>GetSubLevelsUpByNSItem</name><parameter_list>(<parameter><decl><type><name>ParseState</name> <modifier>*</modifier></type><name>pstate</name></decl></parameter>, <parameter><decl><type><name>ParseNamespaceItem</name> <modifier>*</modifier></type><name>nsitem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>sublevels_up</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>pstate</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>rtable_length</name> <init>= <expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>pstate</name><operator>-&gt;</operator><name>p_rtable</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>rtable_length</name> <operator>&gt;=</operator> <name><name>nsitem</name><operator>-&gt;</operator><name>p_rtindex</name></name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>nsitem</name><operator>-&gt;</operator><name>p_rte</name></name> <operator>==</operator> <call><name>rt_fetch</name><argument_list>(<argument><expr><name><name>nsitem</name><operator>-&gt;</operator><name>p_rtindex</name></name></expr></argument>, <argument><expr><name><name>pstate</name><operator>-&gt;</operator><name>p_rtable</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>sublevels_up</name></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>pstate</name> <operator>=</operator> <name><name>pstate</name><operator>-&gt;</operator><name>parentParseState</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>sublevels_up</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"RTE not found (internal error)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>					<comment type="block">/* keep compiler quiet */</comment>
</block_content>}</block></function></unit>
