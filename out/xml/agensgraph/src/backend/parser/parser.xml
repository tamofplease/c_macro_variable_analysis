<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/backend/parser/parser.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * parser.c
 *		Main entry point/driver for PostgreSQL grammar
 *
 * Note that the grammar is not allowed to perform any table access
 * (since we need to be able to do basic parsing even while inside an
 * aborted transaction).  Therefore, the data structures returned by
 * the grammar are "raw" parsetrees that still need to be analyzed by
 * analyze.c and related files.
 *
 *
 * Portions Copyright (c) 1996-2020, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * IDENTIFICATION
 *	  src/backend/parser/parser.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mb/pg_wchar.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/gramparse.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/parser.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/scansup.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>check_uescapechar</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>escape</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>str_udeescape</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>escape</name></decl></parameter>,
						   <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>core_yyscan_t</name></type> <name>yyscanner</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/*
 * raw_parser
 *		Given a query in string form, do lexical and grammatical analysis.
 *
 * Returns a list of raw (un-analyzed) parse trees.  The immediate elements
 * of the list are always RawStmt nodes.
 */</comment>
<function><type><name>List</name> <modifier>*</modifier></type>
<name>raw_parser</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>core_yyscan_t</name></type> <name>yyscanner</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>base_yy_extra_type</name></type> <name>yyextra</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>yyresult</name></decl>;</decl_stmt>

	<comment type="block">/* initialize the flex scanner */</comment>
	<expr_stmt><expr><name>yyscanner</name> <operator>=</operator> <call><name>scanner_init</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>yyextra</name><operator>.</operator><name>core_yy_extra</name></name></expr></argument>,
							 <argument><expr><operator>&amp;</operator><name>ScanKeywords</name></expr></argument>, <argument><expr><name>ScanKeywordTokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* base_yylex() only needs this much initialization */</comment>
	<expr_stmt><expr><name><name>yyextra</name><operator>.</operator><name>have_lookahead</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<comment type="block">/* initialize the bison parser */</comment>
	<expr_stmt><expr><call><name>parser_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>yyextra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Parse! */</comment>
	<expr_stmt><expr><name>yyresult</name> <operator>=</operator> <call><name>base_yyparse</name><argument_list>(<argument><expr><name>yyscanner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Clean up (release memory) */</comment>
	<expr_stmt><expr><call><name>scanner_finish</name><argument_list>(<argument><expr><name>yyscanner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>yyresult</name></expr>)</condition><block type="pseudo"><block_content>				<comment type="block">/* error */</comment>
		<return>return <expr><name>NIL</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name><name>yyextra</name><operator>.</operator><name>parsetree</name></name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Intermediate filter between parser and core lexer (core_yylex in scan.l).
 *
 * This filter is needed because in some cases the standard SQL grammar
 * requires more than one token lookahead.  We reduce these cases to one-token
 * lookahead by replacing tokens here, in order to keep the grammar LALR(1).
 *
 * Using a filter is simpler than trying to recognize multiword tokens
 * directly in scan.l, because we'd have to allow for comments between the
 * words.  Furthermore it's not clear how to do that without re-introducing
 * scanner backtrack, which would cost more performance than this filter
 * layer does.
 *
 * We also use this filter to convert UIDENT and USCONST sequences into
 * plain IDENT and SCONST tokens.  While that could be handled by additional
 * productions in the main grammar, it's more efficient to do it like this.
 *
 * The filter also provides a convenient place to translate between
 * the core_YYSTYPE and YYSTYPE representations (which are really the
 * same thing anyway, but notationally they're different).
 */</comment>
<function><type><name>int</name></type>
<name>base_yylex</name><parameter_list>(<parameter><decl><type><name>YYSTYPE</name> <modifier>*</modifier></type><name>lvalp</name></decl></parameter>, <parameter><decl><type><name>YYLTYPE</name> <modifier>*</modifier></type><name>llocp</name></decl></parameter>, <parameter><decl><type><name>core_yyscan_t</name></type> <name>yyscanner</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>base_yy_extra_type</name> <modifier>*</modifier></type><name>yyextra</name> <init>= <expr><call><name>pg_yyget_extra</name><argument_list>(<argument><expr><name>yyscanner</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>cur_token</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>next_token</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>cur_token_length</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>YYLTYPE</name></type>		<name>cur_yylloc</name></decl>;</decl_stmt>

	<comment type="block">/* Get next token --- we might already have it */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>yyextra</name><operator>-&gt;</operator><name>have_lookahead</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>cur_token</name> <operator>=</operator> <name><name>yyextra</name><operator>-&gt;</operator><name>lookahead_token</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>lvalp</name><operator>-&gt;</operator><name>core_yystype</name></name> <operator>=</operator> <name><name>yyextra</name><operator>-&gt;</operator><name>lookahead_yylval</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>llocp</name> <operator>=</operator> <name><name>yyextra</name><operator>-&gt;</operator><name>lookahead_yylloc</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>yyextra</name><operator>-&gt;</operator><name>lookahead_end</name></name><operator>)</operator> <operator>=</operator> <name><name>yyextra</name><operator>-&gt;</operator><name>lookahead_hold_char</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>yyextra</name><operator>-&gt;</operator><name>have_lookahead</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>cur_token</name> <operator>=</operator> <call><name>core_yylex</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>lvalp</name><operator>-&gt;</operator><name>core_yystype</name></name><operator>)</operator></expr></argument>, <argument><expr><name>llocp</name></expr></argument>, <argument><expr><name>yyscanner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="block">/*
	 * If this token isn't one that requires lookahead, just return it.  If it
	 * does, determine the token length.  (We could get that via strlen(), but
	 * since we have such a small set of possibilities, hardwiring seems
	 * feasible and more efficient --- at least for the fixed-length cases.)
	 */</comment>
	<switch>switch <condition>(<expr><name>cur_token</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>NOT</name></expr>:</case>
			<expr_stmt><expr><name>cur_token_length</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>NULLS_P</name></expr>:</case>
			<expr_stmt><expr><name>cur_token_length</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>WITH</name></expr>:</case>
			<expr_stmt><expr><name>cur_token_length</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>UIDENT</name></expr>:</case>
		<case>case <expr><name>USCONST</name></expr>:</case>
			<expr_stmt><expr><name>cur_token_length</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>yyextra</name><operator>-&gt;</operator><name>core_yy_extra</name><operator>.</operator><name>scanbuf</name></name> <operator>+</operator> <operator>*</operator><name>llocp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<return>return <expr><name>cur_token</name></expr>;</return>
	</block_content>}</block></switch>

	<comment type="block">/*
	 * Identify end+1 of current token.  core_yylex() has temporarily stored a
	 * '\0' here, and will undo that when we call it again.  We need to redo
	 * it to fully revert the lookahead call for error reporting purposes.
	 */</comment>
	<expr_stmt><expr><name><name>yyextra</name><operator>-&gt;</operator><name>lookahead_end</name></name> <operator>=</operator> <name><name>yyextra</name><operator>-&gt;</operator><name>core_yy_extra</name><operator>.</operator><name>scanbuf</name></name> <operator>+</operator>
		<operator>*</operator><name>llocp</name> <operator>+</operator> <name>cur_token_length</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name><name>yyextra</name><operator>-&gt;</operator><name>lookahead_end</name></name><operator>)</operator> <operator>==</operator> <literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Save and restore *llocp around the call.  It might look like we could
	 * avoid this by just passing &amp;lookahead_yylloc to core_yylex(), but that
	 * does not work because flex actually holds onto the last-passed pointer
	 * internally, and will use that for error reporting.  We need any error
	 * reports to point to the current token, not the next one.
	 */</comment>
	<expr_stmt><expr><name>cur_yylloc</name> <operator>=</operator> <operator>*</operator><name>llocp</name></expr>;</expr_stmt>

	<comment type="block">/* Get next token, saving outputs into lookahead variables */</comment>
	<expr_stmt><expr><name>next_token</name> <operator>=</operator> <call><name>core_yylex</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>yyextra</name><operator>-&gt;</operator><name>lookahead_yylval</name></name><operator>)</operator></expr></argument>, <argument><expr><name>llocp</name></expr></argument>, <argument><expr><name>yyscanner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>yyextra</name><operator>-&gt;</operator><name>lookahead_token</name></name> <operator>=</operator> <name>next_token</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>yyextra</name><operator>-&gt;</operator><name>lookahead_yylloc</name></name> <operator>=</operator> <operator>*</operator><name>llocp</name></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>llocp</name> <operator>=</operator> <name>cur_yylloc</name></expr>;</expr_stmt>

	<comment type="block">/* Now revert the un-truncation of the current token */</comment>
	<expr_stmt><expr><name><name>yyextra</name><operator>-&gt;</operator><name>lookahead_hold_char</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name><name>yyextra</name><operator>-&gt;</operator><name>lookahead_end</name></name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>yyextra</name><operator>-&gt;</operator><name>lookahead_end</name></name><operator>)</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>yyextra</name><operator>-&gt;</operator><name>have_lookahead</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<comment type="block">/* Replace cur_token if needed, based on lookahead */</comment>
	<switch>switch <condition>(<expr><name>cur_token</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>NOT</name></expr>:</case>
			<comment type="block">/* Replace NOT by NOT_LA if it's followed by BETWEEN, IN, etc */</comment>
			<switch>switch <condition>(<expr><name>next_token</name></expr>)</condition>
			<block>{<block_content>
				<case>case <expr><name>BETWEEN</name></expr>:</case>
				<case>case <expr><name>IN_P</name></expr>:</case>
				<case>case <expr><name>LIKE</name></expr>:</case>
				<case>case <expr><name>ILIKE</name></expr>:</case>
				<case>case <expr><name>SIMILAR</name></expr>:</case>
					<expr_stmt><expr><name>cur_token</name> <operator>=</operator> <name>NOT_LA</name></expr>;</expr_stmt>
					<break>break;</break>
			</block_content>}</block></switch>
			<break>break;</break>

		<case>case <expr><name>NULLS_P</name></expr>:</case>
			<comment type="block">/* Replace NULLS_P by NULLS_LA if it's followed by FIRST or LAST */</comment>
			<switch>switch <condition>(<expr><name>next_token</name></expr>)</condition>
			<block>{<block_content>
				<case>case <expr><name>FIRST_P</name></expr>:</case>
				<case>case <expr><name>LAST_P</name></expr>:</case>
					<expr_stmt><expr><name>cur_token</name> <operator>=</operator> <name>NULLS_LA</name></expr>;</expr_stmt>
					<break>break;</break>
			</block_content>}</block></switch>
			<break>break;</break>

		<case>case <expr><name>WITH</name></expr>:</case>
			<comment type="block">/* Replace WITH by WITH_LA if it's followed by TIME or ORDINALITY */</comment>
			<switch>switch <condition>(<expr><name>next_token</name></expr>)</condition>
			<block>{<block_content>
				<case>case <expr><name>TIME</name></expr>:</case>
				<case>case <expr><name>ORDINALITY</name></expr>:</case>
					<expr_stmt><expr><name>cur_token</name> <operator>=</operator> <name>WITH_LA</name></expr>;</expr_stmt>
					<break>break;</break>
			</block_content>}</block></switch>
			<break>break;</break>

		<case>case <expr><name>UIDENT</name></expr>:</case>
		<case>case <expr><name>USCONST</name></expr>:</case>
			<comment type="block">/* Look ahead for UESCAPE */</comment>
			<if_stmt><if>if <condition>(<expr><name>next_token</name> <operator>==</operator> <name>UESCAPE</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* Yup, so get third token, which had better be SCONST */</comment>
				<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>escstr</name></decl>;</decl_stmt>

				<comment type="block">/* Again save and restore *llocp */</comment>
				<expr_stmt><expr><name>cur_yylloc</name> <operator>=</operator> <operator>*</operator><name>llocp</name></expr>;</expr_stmt>

				<comment type="block">/* Un-truncate current token so errors point to third token */</comment>
				<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>yyextra</name><operator>-&gt;</operator><name>lookahead_end</name></name><operator>)</operator> <operator>=</operator> <name><name>yyextra</name><operator>-&gt;</operator><name>lookahead_hold_char</name></name></expr>;</expr_stmt>

				<comment type="block">/* Get third token */</comment>
				<expr_stmt><expr><name>next_token</name> <operator>=</operator> <call><name>core_yylex</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>yyextra</name><operator>-&gt;</operator><name>lookahead_yylval</name></name><operator>)</operator></expr></argument>,
										<argument><expr><name>llocp</name></expr></argument>, <argument><expr><name>yyscanner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/* If we throw error here, it will point to third token */</comment>
				<if_stmt><if>if <condition>(<expr><name>next_token</name> <operator>!=</operator> <name>SCONST</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>scanner_yyerror</name><argument_list>(<argument><expr><literal type="string">"UESCAPE must be followed by a simple string literal"</literal></expr></argument>,
									<argument><expr><name>yyscanner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<expr_stmt><expr><name>escstr</name> <operator>=</operator> <name><name>yyextra</name><operator>-&gt;</operator><name>lookahead_yylval</name><operator>.</operator><name>str</name></name></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>escstr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>check_uescapechar</name><argument_list>(<argument><expr><name><name>escstr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>scanner_yyerror</name><argument_list>(<argument><expr><literal type="string">"invalid Unicode escape character"</literal></expr></argument>,
									<argument><expr><name>yyscanner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<comment type="block">/* Now restore *llocp; errors will point to first token */</comment>
				<expr_stmt><expr><operator>*</operator><name>llocp</name> <operator>=</operator> <name>cur_yylloc</name></expr>;</expr_stmt>

				<comment type="block">/* Apply Unicode conversion */</comment>
				<expr_stmt><expr><name><name>lvalp</name><operator>-&gt;</operator><name>core_yystype</name><operator>.</operator><name>str</name></name> <operator>=</operator>
					<call><name>str_udeescape</name><argument_list>(<argument><expr><name><name>lvalp</name><operator>-&gt;</operator><name>core_yystype</name><operator>.</operator><name>str</name></name></expr></argument>,
								  <argument><expr><name><name>escstr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
								  <argument><expr><operator>*</operator><name>llocp</name></expr></argument>,
								  <argument><expr><name>yyscanner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/*
				 * We don't need to revert the un-truncation of UESCAPE.  What
				 * we do want to do is clear have_lookahead, thereby consuming
				 * all three tokens.
				 */</comment>
				<expr_stmt><expr><name><name>yyextra</name><operator>-&gt;</operator><name>have_lookahead</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<comment type="block">/* No UESCAPE, so convert using default escape character */</comment>
				<expr_stmt><expr><name><name>lvalp</name><operator>-&gt;</operator><name>core_yystype</name><operator>.</operator><name>str</name></name> <operator>=</operator>
					<call><name>str_udeescape</name><argument_list>(<argument><expr><name><name>lvalp</name><operator>-&gt;</operator><name>core_yystype</name><operator>.</operator><name>str</name></name></expr></argument>,
								  <argument><expr><literal type="char">'\\'</literal></expr></argument>,
								  <argument><expr><operator>*</operator><name>llocp</name></expr></argument>,
								  <argument><expr><name>yyscanner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>cur_token</name> <operator>==</operator> <name>UIDENT</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* It's an identifier, so truncate as appropriate */</comment>
				<expr_stmt><expr><call><name>truncate_identifier</name><argument_list>(<argument><expr><name><name>lvalp</name><operator>-&gt;</operator><name>core_yystype</name><operator>.</operator><name>str</name></name></expr></argument>,
									<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>lvalp</name><operator>-&gt;</operator><name>core_yystype</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call></expr></argument>,
									<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>cur_token</name> <operator>=</operator> <name>IDENT</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>cur_token</name> <operator>==</operator> <name>USCONST</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>cur_token</name> <operator>=</operator> <name>SCONST</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<return>return <expr><name>cur_token</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* convert hex digit (caller should have verified that) to value */</comment>
<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type>
<name>hexval</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'f'</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>c</name> <operator>-</operator> <literal type="char">'a'</literal> <operator>+</operator> <literal type="number">0xA</literal></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'F'</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>c</name> <operator>-</operator> <literal type="char">'A'</literal> <operator>+</operator> <literal type="number">0xA</literal></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid hexadecimal digit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>					<comment type="block">/* not reached */</comment>
</block_content>}</block></function>

<comment type="block">/* is Unicode code point acceptable? */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>check_unicode_value</name><parameter_list>(<parameter><decl><type><name>pg_wchar</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_valid_unicode_codepoint</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid Unicode escape value"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* is 'escape' acceptable as Unicode escape character (UESCAPE syntax) ? */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>check_uescapechar</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>escape</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>isxdigit</name><argument_list>(<argument><expr><name>escape</name></expr></argument>)</argument_list></call>
		<operator>||</operator> <name>escape</name> <operator>==</operator> <literal type="char">'+'</literal>
		<operator>||</operator> <name>escape</name> <operator>==</operator> <literal type="char">'\''</literal>
		<operator>||</operator> <name>escape</name> <operator>==</operator> <literal type="char">'"'</literal>
		<operator>||</operator> <call><name>scanner_isspace</name><argument_list>(<argument><expr><name>escape</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Process Unicode escapes in "str", producing a palloc'd plain string
 *
 * escape: the escape character to use
 * position: start position of U&amp;'' or U&amp;"" string token
 * yyscanner: context information needed for error reports
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>str_udeescape</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>escape</name></decl></parameter>,
			  <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>core_yyscan_t</name></type> <name>yyscanner</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>in</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>new</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>new_len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pg_wchar</name></type>	<name>pair_first</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ScannerCallbackState</name></type> <name>scbstate</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Guesstimate that result will be no longer than input, but allow enough
	 * padding for Unicode conversion.
	 */</comment>
	<expr_stmt><expr><name>new_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>MAX_UNICODE_EQUIVALENT_STRING</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>new</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>new_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>in</name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>out</name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>*</operator><name>in</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Enlarge string if needed */</comment>
		<decl_stmt><decl><type><name>size_t</name></type>		<name>out_dist</name> <init>= <expr><name>out</name> <operator>-</operator> <name>new</name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>out_dist</name> <operator>&gt;</operator> <name>new_len</name> <operator>-</operator> <operator>(</operator><name>MAX_UNICODE_EQUIVALENT_STRING</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>new_len</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>new</name> <operator>=</operator> <call><name>repalloc</name><argument_list>(<argument><expr><name>new</name></expr></argument>, <argument><expr><name>new_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>out</name> <operator>=</operator> <name>new</name> <operator>+</operator> <name>out_dist</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>escape</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * Any errors reported while processing this escape sequence will
			 * have an error cursor pointing at the escape.
			 */</comment>
			<expr_stmt><expr><call><name>setup_scanner_errposition_callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scbstate</name></expr></argument>, <argument><expr><name>yyscanner</name></expr></argument>,
											   <argument><expr><name>in</name> <operator>-</operator> <name>str</name> <operator>+</operator> <name>position</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* 3 for U&amp;" */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>escape</name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>pair_first</name></expr>)</condition><block type="pseudo"><block_content>
					<goto>goto <name>invalid_pair</name>;</goto></block_content></block></if></if_stmt>
				<expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <name>escape</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>in</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><call><name>isxdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
					 <call><name>isxdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
					 <call><name>isxdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>in</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
					 <call><name>isxdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>in</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>pg_wchar</name></type>	<name>unicode</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>unicode</name> <operator>=</operator> <operator>(</operator><call><name>hexval</name><argument_list>(<argument><expr><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>+</operator>
					<operator>(</operator><call><name>hexval</name><argument_list>(<argument><expr><name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator>
					<operator>(</operator><call><name>hexval</name><argument_list>(<argument><expr><name><name>in</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator>
					<call><name>hexval</name><argument_list>(<argument><expr><name><name>in</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>check_unicode_value</name><argument_list>(<argument><expr><name>unicode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>pair_first</name></expr>)</condition>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><call><name>is_utf16_surrogate_second</name><argument_list>(<argument><expr><name>unicode</name></expr></argument>)</argument_list></call></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><name>unicode</name> <operator>=</operator> <call><name>surrogate_pair_to_codepoint</name><argument_list>(<argument><expr><name>pair_first</name></expr></argument>, <argument><expr><name>unicode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>pair_first</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
					</block_content>}</block></if>
					<else>else<block type="pseudo"><block_content>
						<goto>goto <name>invalid_pair</name>;</goto></block_content></block></else></if_stmt>
				</block_content>}</block></if>
				<if type="elseif">else if <condition>(<expr><call><name>is_utf16_surrogate_second</name><argument_list>(<argument><expr><name>unicode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<goto>goto <name>invalid_pair</name>;</goto></block_content></block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><call><name>is_utf16_surrogate_first</name><argument_list>(<argument><expr><name>unicode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>pair_first</name> <operator>=</operator> <name>unicode</name></expr>;</expr_stmt></block_content></block></if>
				<else>else
				<block>{<block_content>
					<expr_stmt><expr><call><name>pg_unicode_to_server</name><argument_list>(<argument><expr><name>unicode</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>out</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
				<expr_stmt><expr><name>in</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal> <operator>&amp;&amp;</operator>
					 <call><name>isxdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
					 <call><name>isxdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>in</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
					 <call><name>isxdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>in</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
					 <call><name>isxdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>in</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
					 <call><name>isxdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>in</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
					 <call><name>isxdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>in</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>pg_wchar</name></type>	<name>unicode</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>unicode</name> <operator>=</operator> <operator>(</operator><call><name>hexval</name><argument_list>(<argument><expr><name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>+</operator>
					<operator>(</operator><call><name>hexval</name><argument_list>(<argument><expr><name><name>in</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator>
					<operator>(</operator><call><name>hexval</name><argument_list>(<argument><expr><name><name>in</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>+</operator>
					<operator>(</operator><call><name>hexval</name><argument_list>(<argument><expr><name><name>in</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator>
					<operator>(</operator><call><name>hexval</name><argument_list>(<argument><expr><name><name>in</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator>
					<call><name>hexval</name><argument_list>(<argument><expr><name><name>in</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>check_unicode_value</name><argument_list>(<argument><expr><name>unicode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>pair_first</name></expr>)</condition>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><call><name>is_utf16_surrogate_second</name><argument_list>(<argument><expr><name>unicode</name></expr></argument>)</argument_list></call></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><name>unicode</name> <operator>=</operator> <call><name>surrogate_pair_to_codepoint</name><argument_list>(<argument><expr><name>pair_first</name></expr></argument>, <argument><expr><name>unicode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>pair_first</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
					</block_content>}</block></if>
					<else>else<block type="pseudo"><block_content>
						<goto>goto <name>invalid_pair</name>;</goto></block_content></block></else></if_stmt>
				</block_content>}</block></if>
				<if type="elseif">else if <condition>(<expr><call><name>is_utf16_surrogate_second</name><argument_list>(<argument><expr><name>unicode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<goto>goto <name>invalid_pair</name>;</goto></block_content></block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><call><name>is_utf16_surrogate_first</name><argument_list>(<argument><expr><name>unicode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>pair_first</name> <operator>=</operator> <name>unicode</name></expr>;</expr_stmt></block_content></block></if>
				<else>else
				<block>{<block_content>
					<expr_stmt><expr><call><name>pg_unicode_to_server</name><argument_list>(<argument><expr><name>unicode</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>out</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
				<expr_stmt><expr><name>in</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid Unicode escape"</literal></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"Unicode escapes must be \\XXXX or \\+XXXXXX."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

			<expr_stmt><expr><call><name>cancel_scanner_errposition_callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scbstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>pair_first</name></expr>)</condition><block type="pseudo"><block_content>
				<goto>goto <name>invalid_pair</name>;</goto></block_content></block></if></if_stmt>

			<expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>in</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></while>

	<comment type="block">/* unfinished surrogate pair? */</comment>
	<if_stmt><if>if <condition>(<expr><name>pair_first</name></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>invalid_pair</name>;</goto></block_content></block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	<return>return <expr><name>new</name></expr>;</return>

	<comment type="block">/*
	 * We might get here with the error callback active, or not.  Call
	 * scanner_errposition to make sure an error cursor appears; if the
	 * callback is active, this is duplicative but harmless.
	 */</comment>
<label><name>invalid_pair</name>:</label>
	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
			 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid Unicode surrogate pair"</literal></expr></argument>)</argument_list></call><operator>,</operator>
			 <call><name>scanner_errposition</name><argument_list>(<argument><expr><name>in</name> <operator>-</operator> <name>str</name> <operator>+</operator> <name>position</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>,	<comment type="block">/* 3 for U&amp;" */</comment>
								 <argument><expr><name>yyscanner</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>				<comment type="block">/* keep compiler quiet */</comment>
</block_content>}</block></function>
</unit>
