<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/backend/jit/llvm/llvmjit_types.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * llvmjit_types.c
 *	  List of types needed by JIT emitting code.
 *
 * JIT emitting code often needs to access struct elements, create functions
 * with the correct signature etc. To allow synchronizing these types with a
 * low chance of definitions getting out of sync, this file lists types and
 * functions that directly need to be accessed from LLVM.
 *
 * When LLVM is first used in a backend, a bitcode version of this file will
 * be loaded. The needed types and signatures will be stored into Struct*,
 * Type*, Func* variables.
 *
 * NB: This file will not be linked into the server, it's just converted to
 * bitcode.
 *
 *
 * Copyright (c) 2016-2020, PostgreSQL Global Development Group
 *
 * IDENTIFICATION
 *	  src/backend/jit/llvm/llvmjit_types.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup_details.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/tupdesc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_attribute.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/execExpr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/nodeAgg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/tuptable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/execnodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/memnodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/expandeddatum.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/palloc.h"</cpp:file></cpp:include>


<comment type="block">/*
 * List of types needed for JITing. These have to be non-static, otherwise
 * clang/LLVM will omit them.  As this file will never be linked into
 * anything, that's harmless.
 */</comment>
<decl_stmt><decl><type><name>PGFunction</name></type>	<name>TypePGFunction</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type>		<name>TypeSizeT</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>TypeStorageBool</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NullableDatum</name></type> <name>StructNullableDatum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AggState</name></type>	<name>StructAggState</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AggStatePerGroupData</name></type> <name>StructAggStatePerGroupData</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AggStatePerTransData</name></type> <name>StructAggStatePerTransData</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ExprContext</name></type> <name>StructExprContext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ExprEvalStep</name></type> <name>StructExprEvalStep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ExprState</name></type>	<name>StructExprState</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FunctionCallInfoBaseData</name></type> <name>StructFunctionCallInfoData</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HeapTupleData</name></type> <name>StructHeapTupleData</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MemoryContextData</name></type> <name>StructMemoryContextData</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TupleTableSlot</name></type> <name>StructTupleTableSlot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HeapTupleTableSlot</name></type> <name>StructHeapTupleTableSlot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MinimalTupleTableSlot</name></type> <name>StructMinimalTupleTableSlot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TupleDescData</name></type> <name>StructTupleDescData</name></decl>;</decl_stmt>


<comment type="block">/*
 * To determine which attributes functions need to have (depends e.g. on
 * compiler version and settings) to be compatible for inlining, we simply
 * copy the attributes of this function.
 */</comment>
<function_decl><type><specifier>extern</specifier> <name>Datum</name></type> <name>AttributeTemplate</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function><type><name>Datum</name></type>
<name>AttributeTemplate</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Clang represents stdbool.h style booleans that are returned by functions
 * differently (as i1) than stored ones (as i8). Therefore we do not just need
 * TypeBool (above), but also a way to determine the width of a returned
 * integer. This allows us to keep compatible with non-stdbool using
 * architectures.
 */</comment>
<function_decl><type><specifier>extern</specifier> <name>bool</name></type> <name>FunctionReturningBool</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function><type><name>bool</name></type>
<name>FunctionReturningBool</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * To force signatures of functions used during JITing to be present,
 * reference the functions required. This again has to be non-static, to avoid
 * being removed as unnecessary.
 */</comment>
<decl_stmt><decl><type><name>void</name>	   <modifier>*</modifier></type><name><name>referenced_functions</name><index>[]</index></name> <init>=
<expr><block>{
	<expr><name>ExecAggInitGroup</name></expr>,
	<expr><name>ExecAggTransReparent</name></expr>,
	<expr><name>ExecEvalAggOrderedTransDatum</name></expr>,
	<expr><name>ExecEvalAggOrderedTransTuple</name></expr>,
	<expr><name>ExecEvalAlternativeSubPlan</name></expr>,
	<expr><name>ExecEvalArrayCoerce</name></expr>,
	<expr><name>ExecEvalArrayExpr</name></expr>,
	<expr><name>ExecEvalConstraintCheck</name></expr>,
	<expr><name>ExecEvalConstraintNotNull</name></expr>,
	<expr><name>ExecEvalConvertRowtype</name></expr>,
	<expr><name>ExecEvalCurrentOfExpr</name></expr>,
	<expr><name>ExecEvalFieldSelect</name></expr>,
	<expr><name>ExecEvalFieldStoreDeForm</name></expr>,
	<expr><name>ExecEvalFieldStoreForm</name></expr>,
	<expr><name>ExecEvalFuncExprFusage</name></expr>,
	<expr><name>ExecEvalFuncExprStrictFusage</name></expr>,
	<expr><name>ExecEvalGroupingFunc</name></expr>,
	<expr><name>ExecEvalMinMax</name></expr>,
	<expr><name>ExecEvalNextValueExpr</name></expr>,
	<expr><name>ExecEvalParamExec</name></expr>,
	<expr><name>ExecEvalParamExtern</name></expr>,
	<expr><name>ExecEvalRow</name></expr>,
	<expr><name>ExecEvalRowNotNull</name></expr>,
	<expr><name>ExecEvalRowNull</name></expr>,
	<expr><name>ExecEvalSQLValueFunction</name></expr>,
	<expr><name>ExecEvalScalarArrayOp</name></expr>,
	<expr><name>ExecEvalSubPlan</name></expr>,
	<expr><name>ExecEvalSubscriptingRef</name></expr>,
	<expr><name>ExecEvalSubscriptingRefAssign</name></expr>,
	<expr><name>ExecEvalSubscriptingRefFetch</name></expr>,
	<expr><name>ExecEvalSubscriptingRefOld</name></expr>,
	<expr><name>ExecEvalSysVar</name></expr>,
	<expr><name>ExecEvalWholeRowVar</name></expr>,
	<expr><name>ExecEvalXmlExpr</name></expr>,
	<expr><name>MakeExpandedObjectReadOnlyInternal</name></expr>,
	<expr><name>slot_getmissingattrs</name></expr>,
	<expr><name>slot_getsomeattrs_int</name></expr>,
	<expr><name>strlen</name></expr>,
	<expr><name>varsize_any</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
