<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/backend/libpq/pqmq.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * pqmq.c
 *	  Use the frontend/backend protocol for communication over a shm_mq
 *
 * Portions Copyright (c) 1996-2020, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *	src/backend/libpq/pqmq.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq/libpq.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq/pqformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq/pqmq.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgstat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcop/tcopprot.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>shm_mq_handle</name> <modifier>*</modifier></type><name>pq_mq_handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>pq_mq_busy</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>pid_t</name></type> <name>pq_mq_parallel_master_pid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>pid_t</name></type> <name>pq_mq_parallel_master_backend_id</name> <init>= <expr><name>InvalidBackendId</name></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>pq_cleanup_redirect_to_shm_mq</name><parameter_list>(<parameter><decl><type><name>dsm_segment</name> <modifier>*</modifier></type><name>seg</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>mq_comm_reset</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>mq_flush</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>mq_flush_if_writable</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>mq_is_send_pending</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>mq_putmessage</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>msgtype</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>mq_putmessage_noblock</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>msgtype</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>mq_startcopyout</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>mq_endcopyout</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>errorAbort</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PQcommMethods</name></type> <name>PqCommMqMethods</name> <init>= <expr><block>{
	<expr><name>mq_comm_reset</name></expr>,
	<expr><name>mq_flush</name></expr>,
	<expr><name>mq_flush_if_writable</name></expr>,
	<expr><name>mq_is_send_pending</name></expr>,
	<expr><name>mq_putmessage</name></expr>,
	<expr><name>mq_putmessage_noblock</name></expr>,
	<expr><name>mq_startcopyout</name></expr>,
	<expr><name>mq_endcopyout</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Arrange to redirect frontend/backend protocol messages to a shared-memory
 * message queue.
 */</comment>
<function><type><name>void</name></type>
<name>pq_redirect_to_shm_mq</name><parameter_list>(<parameter><decl><type><name>dsm_segment</name> <modifier>*</modifier></type><name>seg</name></decl></parameter>, <parameter><decl><type><name>shm_mq_handle</name> <modifier>*</modifier></type><name>mqh</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>PqCommMethods</name> <operator>=</operator> <operator>&amp;</operator><name>PqCommMqMethods</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>pq_mq_handle</name> <operator>=</operator> <name>mqh</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>whereToSendOutput</name> <operator>=</operator> <name>DestRemote</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>FrontendProtocol</name> <operator>=</operator> <name>PG_PROTOCOL_LATEST</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>on_dsm_detach</name><argument_list>(<argument><expr><name>seg</name></expr></argument>, <argument><expr><name>pq_cleanup_redirect_to_shm_mq</name></expr></argument>, <argument><expr><operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * When the DSM that contains our shm_mq goes away, we need to stop sending
 * messages to it.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>pq_cleanup_redirect_to_shm_mq</name><parameter_list>(<parameter><decl><type><name>dsm_segment</name> <modifier>*</modifier></type><name>seg</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>pq_mq_handle</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>whereToSendOutput</name> <operator>=</operator> <name>DestNone</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Arrange to SendProcSignal() to the parallel master each time we transmit
 * message data via the shm_mq.
 */</comment>
<function><type><name>void</name></type>
<name>pq_set_parallel_master</name><parameter_list>(<parameter><decl><type><name>pid_t</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>BackendId</name></type> <name>backend_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>PqCommMethods</name> <operator>==</operator> <operator>&amp;</operator><name>PqCommMqMethods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pq_mq_parallel_master_pid</name> <operator>=</operator> <name>pid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>pq_mq_parallel_master_backend_id</name> <operator>=</operator> <name>backend_id</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>mq_comm_reset</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Nothing to do. */</comment>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>mq_flush</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Nothing to do. */</comment>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>mq_flush_if_writable</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Nothing to do. */</comment>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>mq_is_send_pending</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* There's never anything pending. */</comment>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Transmit a libpq protocol message to the shared memory message queue
 * selected via pq_mq_handle.  We don't include a length word, because the
 * receiver will know the length of the message from shm_mq_receive().
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>mq_putmessage</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>msgtype</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>shm_mq_iovec</name></type> <name><name>iov</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>shm_mq_result</name></type> <name>result</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * If we're sending a message, and we have to wait because the queue is
	 * full, and then we get interrupted, and that interrupt results in trying
	 * to send another message, we respond by detaching the queue.  There's no
	 * way to return to the original context, but even if there were, just
	 * queueing the message would amount to indefinitely postponing the
	 * response to the interrupt.  So we do this instead.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>pq_mq_busy</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>pq_mq_handle</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>shm_mq_detach</name><argument_list>(<argument><expr><name>pq_mq_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>pq_mq_handle</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<return>return <expr><name>EOF</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * If the message queue is already gone, just ignore the message. This
	 * doesn't necessarily indicate a problem; for example, DEBUG messages can
	 * be generated late in the shutdown sequence, after all DSMs have already
	 * been detached.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>pq_mq_handle</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>pq_mq_busy</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>iov</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <operator>&amp;</operator><name>msgtype</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iov</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iov</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iov</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>pq_mq_handle</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>shm_mq_sendv</name><argument_list>(<argument><expr><name>pq_mq_handle</name></expr></argument>, <argument><expr><name>iov</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>pq_mq_parallel_master_pid</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>SendProcSignal</name><argument_list>(<argument><expr><name>pq_mq_parallel_master_pid</name></expr></argument>,
						   <argument><expr><name>PROCSIG_PARALLEL_MESSAGE</name></expr></argument>,
						   <argument><expr><name>pq_mq_parallel_master_backend_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>SHM_MQ_WOULD_BLOCK</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>WaitLatch</name><argument_list>(<argument><expr><name>MyLatch</name></expr></argument>, <argument><expr><name>WL_LATCH_SET</name> <operator>|</operator> <name>WL_EXIT_ON_PM_DEATH</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
						 <argument><expr><name>WAIT_EVENT_MQ_PUT_MESSAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ResetLatch</name><argument_list>(<argument><expr><name>MyLatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>CHECK_FOR_INTERRUPTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>pq_mq_busy</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>result</name> <operator>==</operator> <name>SHM_MQ_SUCCESS</name> <operator>||</operator> <name>result</name> <operator>==</operator> <name>SHM_MQ_DETACHED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>SHM_MQ_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>EOF</name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>mq_putmessage_noblock</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>msgtype</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * While the shm_mq machinery does support sending a message in
	 * non-blocking mode, there's currently no way to try sending beginning to
	 * send the message that doesn't also commit us to completing the
	 * transmission.  This could be improved in the future, but for now we
	 * don't need it.
	 */</comment>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"not currently supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>mq_startcopyout</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Nothing to do. */</comment>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>mq_endcopyout</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>errorAbort</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Nothing to do. */</comment>
</block_content>}</block></function>

<comment type="block">/*
 * Parse an ErrorResponse or NoticeResponse payload and populate an ErrorData
 * structure with the results.
 */</comment>
<function><type><name>void</name></type>
<name>pq_parse_errornotice</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>ErrorData</name> <modifier>*</modifier></type><name>edata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Initialize edata with reasonable defaults. */</comment>
	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>edata</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ErrorData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>edata</name><operator>-&gt;</operator><name>elevel</name></name> <operator>=</operator> <name>ERROR</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>edata</name><operator>-&gt;</operator><name>assoc_context</name></name> <operator>=</operator> <name>CurrentMemoryContext</name></expr>;</expr_stmt>

	<comment type="block">/* Loop over fields and extract each one. */</comment>
	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type>		<name>code</name> <init>= <expr><call><name>pq_getmsgbyte</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>pq_getmsgend</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>pq_getmsgrawstring</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<switch>switch <condition>(<expr><name>code</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>PG_DIAG_SEVERITY</name></expr>:</case>
				<comment type="block">/* ignore, trusting we'll get a nonlocalized version */</comment>
				<break>break;</break>
			<case>case <expr><name>PG_DIAG_SEVERITY_NONLOCALIZED</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"DEBUG"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/*
					 * We can't reconstruct the exact DEBUG level, but
					 * presumably it was &gt;= client_min_messages, so select
					 * DEBUG1 to ensure we'll pass it on to the client.
					 */</comment>
					<expr_stmt><expr><name><name>edata</name><operator>-&gt;</operator><name>elevel</name></name> <operator>=</operator> <name>DEBUG1</name></expr>;</expr_stmt>
				</block_content>}</block></if>
				<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"LOG"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/*
					 * It can't be LOG_SERVER_ONLY, or the worker wouldn't
					 * have sent it to us; so LOG is the correct value.
					 */</comment>
					<expr_stmt><expr><name><name>edata</name><operator>-&gt;</operator><name>elevel</name></name> <operator>=</operator> <name>LOG</name></expr>;</expr_stmt>
				</block_content>}</block></if>
				<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"INFO"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>edata</name><operator>-&gt;</operator><name>elevel</name></name> <operator>=</operator> <name>INFO</name></expr>;</expr_stmt></block_content></block></if>
				<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"NOTICE"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>edata</name><operator>-&gt;</operator><name>elevel</name></name> <operator>=</operator> <name>NOTICE</name></expr>;</expr_stmt></block_content></block></if>
				<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"WARNING"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>edata</name><operator>-&gt;</operator><name>elevel</name></name> <operator>=</operator> <name>WARNING</name></expr>;</expr_stmt></block_content></block></if>
				<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"ERROR"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>edata</name><operator>-&gt;</operator><name>elevel</name></name> <operator>=</operator> <name>ERROR</name></expr>;</expr_stmt></block_content></block></if>
				<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"FATAL"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>edata</name><operator>-&gt;</operator><name>elevel</name></name> <operator>=</operator> <name>FATAL</name></expr>;</expr_stmt></block_content></block></if>
				<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"PANIC"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>edata</name><operator>-&gt;</operator><name>elevel</name></name> <operator>=</operator> <name>PANIC</name></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized error severity: \"%s\""</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
				<break>break;</break>
			<case>case <expr><name>PG_DIAG_SQLSTATE</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid SQLSTATE: \"%s\""</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><name><name>edata</name><operator>-&gt;</operator><name>sqlerrcode</name></name> <operator>=</operator> <call><name>MAKE_SQLSTATE</name><argument_list>(<argument><expr><name><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>value</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>value</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
												  <argument><expr><name><name>value</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>value</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>PG_DIAG_MESSAGE_PRIMARY</name></expr>:</case>
				<expr_stmt><expr><name><name>edata</name><operator>-&gt;</operator><name>message</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>PG_DIAG_MESSAGE_DETAIL</name></expr>:</case>
				<expr_stmt><expr><name><name>edata</name><operator>-&gt;</operator><name>detail</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>PG_DIAG_MESSAGE_HINT</name></expr>:</case>
				<expr_stmt><expr><name><name>edata</name><operator>-&gt;</operator><name>hint</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>PG_DIAG_STATEMENT_POSITION</name></expr>:</case>
				<expr_stmt><expr><name><name>edata</name><operator>-&gt;</operator><name>cursorpos</name></name> <operator>=</operator> <call><name>pg_strtoint32</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>PG_DIAG_INTERNAL_POSITION</name></expr>:</case>
				<expr_stmt><expr><name><name>edata</name><operator>-&gt;</operator><name>internalpos</name></name> <operator>=</operator> <call><name>pg_strtoint32</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>PG_DIAG_INTERNAL_QUERY</name></expr>:</case>
				<expr_stmt><expr><name><name>edata</name><operator>-&gt;</operator><name>internalquery</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>PG_DIAG_CONTEXT</name></expr>:</case>
				<expr_stmt><expr><name><name>edata</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>PG_DIAG_SCHEMA_NAME</name></expr>:</case>
				<expr_stmt><expr><name><name>edata</name><operator>-&gt;</operator><name>schema_name</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>PG_DIAG_TABLE_NAME</name></expr>:</case>
				<expr_stmt><expr><name><name>edata</name><operator>-&gt;</operator><name>table_name</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>PG_DIAG_COLUMN_NAME</name></expr>:</case>
				<expr_stmt><expr><name><name>edata</name><operator>-&gt;</operator><name>column_name</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>PG_DIAG_DATATYPE_NAME</name></expr>:</case>
				<expr_stmt><expr><name><name>edata</name><operator>-&gt;</operator><name>datatype_name</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>PG_DIAG_CONSTRAINT_NAME</name></expr>:</case>
				<expr_stmt><expr><name><name>edata</name><operator>-&gt;</operator><name>constraint_name</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>PG_DIAG_SOURCE_FILE</name></expr>:</case>
				<expr_stmt><expr><name><name>edata</name><operator>-&gt;</operator><name>filename</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>PG_DIAG_SOURCE_LINE</name></expr>:</case>
				<expr_stmt><expr><name><name>edata</name><operator>-&gt;</operator><name>lineno</name></name> <operator>=</operator> <call><name>pg_strtoint32</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>PG_DIAG_SOURCE_FUNCTION</name></expr>:</case>
				<expr_stmt><expr><name><name>edata</name><operator>-&gt;</operator><name>funcname</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized error field code: %d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block></for>
</block_content>}</block></function>
</unit>
