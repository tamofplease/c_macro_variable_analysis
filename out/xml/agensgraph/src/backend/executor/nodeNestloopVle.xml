<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/backend/executor/nodeNestloopVle.c"><comment type="block">/*
 * nodeNestloopVle.c
 *	  routines to support nest-loop joins for VLE
 *
 * Portions Copyright (c) 2017, Bitnine Inc.
 * Portions Copyright (c) 1996-2016, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * IDENTIFICATION
 *	  src/backend/executor/nodeNestloopVle.c
 */</comment>

<comment type="block">/*
 *	 INTERFACE ROUTINES
 *		ExecNestLoopVLE	 	- process a nestloop join of two plans
 *		ExecInitNestLoopVLE - initialize the join
 *		ExecEndNestLoopVLE 	- shut down the join
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/execdebug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/nodeNestloopVle.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/pg_list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/array.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/graph.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OUTER_CURR_VID_VARNO</name></cpp:macro>	<cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OUTER_EIDS_VARNO</name></cpp:macro>		<cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OUTER_EDGES_VARNO</name></cpp:macro>		<cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OUTER_VERTICES_VARNO</name></cpp:macro>	<cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INNER_NEXT_VID_VARNO</name></cpp:macro>	<cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INNER_EID_VARNO</name></cpp:macro>			<cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INNER_EDGE_VARNO</name></cpp:macro>		<cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INNER_VERTEX_VARNO</name></cpp:macro>		<cpp:value>3</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>NestLoopVLEContext</name>
<block>{
	<decl_stmt><decl><type><name>dlist_node</name></type>	<name>list</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>outer_var_datum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>outer_var_isnull</name></decl>;</decl_stmt>
}</block></struct></type> <name>NestLoopVLEContext</name>;</typedef>


<comment type="block">/* hops */</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>getInitialCurhops</name><parameter_list>(<parameter><decl><type><name>NestLoopVLE</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>canFollowEdge</name><parameter_list>(<parameter><decl><type><name>NestLoopVLEState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>needResult</name><parameter_list>(<parameter><decl><type><name>NestLoopVLEState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="block">/* result values */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>pushPathElementOuter</name><parameter_list>(<parameter><decl><type><name>NestLoopVLEState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>pushPathElementInner</name><parameter_list>(<parameter><decl><type><name>NestLoopVLEState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>popPathElement</name><parameter_list>(<parameter><decl><type><name>NestLoopVLEState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="block">/* additional ArrayBuildState operations */</comment>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>arrayResultHas</name><parameter_list>(<parameter><decl><type><name>ArrayBuildState</name> <modifier>*</modifier></type><name>astate</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>elem</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>arrayResultPop</name><parameter_list>(<parameter><decl><type><name>ArrayBuildState</name> <modifier>*</modifier></type><name>astate</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>arrayResultClear</name><parameter_list>(<parameter><decl><type><name>ArrayBuildState</name> <modifier>*</modifier></type><name>astate</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="block">/* context */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>storeOuterVar</name><parameter_list>(<parameter><decl><type><name>NestLoopVLEState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>restoreOuterVar</name><parameter_list>(<parameter><decl><type><name>NestLoopVLEState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>setNextOuterVar</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>outer_slot</name></decl></parameter>,
							<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>inner_slot</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>fetchOuterVars</name><parameter_list>(<parameter><decl><type><name>NestLoopVLE</name> <modifier>*</modifier></type><name>nlv</name></decl></parameter>, <parameter><decl><type><name>ExprContext</name> <modifier>*</modifier></type><name>econtext</name></decl></parameter>,
						  <parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>outerTupleSlot</name></decl></parameter>, <parameter><decl><type><name>PlanState</name> <modifier>*</modifier></type><name>innerPlan</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="block">/* result slot */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>adjustResult</name><parameter_list>(<parameter><decl><type><name>NestLoopVLEState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="block">/* cleanup */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>freePlanStateChgParam</name><parameter_list>(<parameter><decl><type><name>PlanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><specifier>static</specifier> <name>TupleTableSlot</name> <modifier>*</modifier></type>
<name>ExecNestLoopVLE</name><parameter_list>(<parameter><decl><type><name>PlanState</name> <modifier>*</modifier></type><name>pstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>NestLoopVLEState</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>castNode</name><argument_list>(<argument><expr><name>NestLoopVLEState</name></expr></argument>, <argument><expr><name>pstate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>NestLoopVLE</name> <modifier>*</modifier></type><name>nlv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PlanState</name>  <modifier>*</modifier></type><name>innerPlan</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PlanState</name>  <modifier>*</modifier></type><name>outerPlan</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>outerTupleSlot</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>innerTupleSlot</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ExprState</name>  <modifier>*</modifier></type><name>otherqual</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ExprContext</name> <modifier>*</modifier></type><name>econtext</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_FOR_INTERRUPTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * get information from the node
	 */</comment>
	<expr_stmt><expr><call><name>ENLV1_printf</name><argument_list>(<argument><expr><literal type="string">"getting info from node"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>nlv</name> <operator>=</operator> <operator>(</operator><name>NestLoopVLE</name> <operator>*</operator><operator>)</operator> <name><name>node</name><operator>-&gt;</operator><name>nls</name><operator>.</operator><name>js</name><operator>.</operator><name>ps</name><operator>.</operator><name>plan</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>otherqual</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>nls</name><operator>.</operator><name>js</name><operator>.</operator><name>ps</name><operator>.</operator><name>qual</name></name></expr>;</expr_stmt>

	<comment type="block">/*
	 * outerPlan is only for;
	 * 1) the first edge in the path if node-&gt;curhops == 1
	 * 2) the first vertex in the path if node-&gt;curhops == 0
	 */</comment>
	<expr_stmt><expr><name>outerPlan</name> <operator>=</operator> <call><name>outerPlanState</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* innerPlan is for the rest of &lt;vertex, edge&gt; pairs in the path. */</comment>
	<expr_stmt><expr><name>innerPlan</name> <operator>=</operator> <call><name>innerPlanState</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>econtext</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>nls</name><operator>.</operator><name>js</name><operator>.</operator><name>ps</name><operator>.</operator><name>ps_ExprContext</name></name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Reset per-tuple memory context to free any expression evaluation
	 * storage allocated in the previous tuple cycle.
	 */</comment>
	<expr_stmt><expr><call><name>ResetExprContext</name><argument_list>(<argument><expr><name>econtext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Ok, everything is setup for the join so now loop until we return a
	 * qualifying join tuple.
	 */</comment>
	<expr_stmt><expr><call><name>ENLV1_printf</name><argument_list>(<argument><expr><literal type="string">"entering main loop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 *      outer              inner               inner         ...
	 *
	 * prev  ids  curr |          id  next |          id  next |
	 *   -----------   |   () ----------   |   () ----------   | ...
	 *      edges      | vertex  edge      | vertex  edge      |
	 */</comment>
	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
	<block>{<block_content>
		<comment type="block">/*
		 * If we don't have an outer tuple, get the next one and reset the
		 * inner scan.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>nls</name><operator>.</operator><name>nl_NeedNewOuter</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ENL1_printf</name><argument_list>(<argument><expr><literal type="string">"getting new outer tuple"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>outerTupleSlot</name> <operator>=</operator> <call><name>ExecProcNode</name><argument_list>(<argument><expr><name>outerPlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/*
			 * if there are no more outer tuples, then the join is complete..
			 */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>TupIsNull</name><argument_list>(<argument><expr><name>outerTupleSlot</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ENLV1_printf</name><argument_list>(<argument><expr><literal type="string">"no outer tuple, ending join"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>NULL</name></expr>;</return>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>canFollowEdge</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ENLV1_printf</name><argument_list>(<argument><expr><literal type="string">"saving new outer tuple information"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>econtext</name><operator>-&gt;</operator><name>ecxt_outertuple</name></name> <operator>=</operator> <name>outerTupleSlot</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>nls</name><operator>.</operator><name>nl_NeedNewOuter</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

				<comment type="block">/*
				 * Store eid to guarantee edge-uniqueness, and edge to generate
				 * edge array for each result.
				 */</comment>
				<expr_stmt><expr><call><name>pushPathElementOuter</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>outerTupleSlot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>fetchOuterVars</name><argument_list>(<argument><expr><name>nlv</name></expr></argument>, <argument><expr><name>econtext</name></expr></argument>, <argument><expr><name>outerTupleSlot</name></expr></argument>, <argument><expr><name>innerPlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/*
				 * now rescan the inner plan
				 */</comment>
				<expr_stmt><expr><call><name>ENLV1_printf</name><argument_list>(<argument><expr><literal type="string">"rescanning inner plan"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>ExecReScan</name><argument_list>(<argument><expr><name>innerPlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/*
				 * in the case that &lt;curhops, minHops&gt; is either &lt;0, 0&gt; or
				 * &lt;1, 1&gt; (which is the starting point)
				 */</comment>
				<if_stmt><if>if <condition>(<expr><call><name>needResult</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>curhops</name></name><operator>++</operator></expr>;</expr_stmt>

					<comment type="block">/*
					 * It is safe to return outerTupleSlot instead of
					 * ps_ResultTupleSlot because the upper plan will only
					 * access the first 3~5 columns of ps_ResultTupleSlot
					 * which is the same with those of outerTupleSlot.
					 */</comment>
					<return>return <expr><name>outerTupleSlot</name></expr>;</return>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>curhops</name></name><operator>++</operator></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<comment type="block">/*
				 * Here is only for the case that &lt;curhops, minHops, maxHops&gt;
				 * is either &lt;0, 0, 0&gt; or &lt;1, 1, 1&gt;. innerPlan will never be
				 * executed. (node-&gt;nls.nl_NeedNewOuter == true)
				 */</comment>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>curhops</name></name> <operator>==</operator> <name><name>nlv</name><operator>-&gt;</operator><name>minHops</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>curhops</name></name> <operator>==</operator> <name><name>nlv</name><operator>-&gt;</operator><name>maxHops</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/* It is safe to return outerTupleSlot here too. */</comment>
				<return>return <expr><name>outerTupleSlot</name></expr>;</return>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/*
			 * Inner loop will use this outer tuple to access the outer
			 * variable and make a result.
			 */</comment>
			<expr_stmt><expr><name>outerTupleSlot</name> <operator>=</operator> <name><name>econtext</name><operator>-&gt;</operator><name>ecxt_outertuple</name></name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<comment type="block">/*
		 * we have an outerTuple, try to get the next inner tuple.
		 */</comment>
		<expr_stmt><expr><call><name>ENLV1_printf</name><argument_list>(<argument><expr><literal type="string">"getting new inner tuple"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>innerTupleSlot</name> <operator>=</operator> <call><name>ExecProcNode</name><argument_list>(<argument><expr><name>innerPlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>econtext</name><operator>-&gt;</operator><name>ecxt_innertuple</name></name> <operator>=</operator> <name>innerTupleSlot</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>TupIsNull</name><argument_list>(<argument><expr><name>innerTupleSlot</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>curhops</name></name> <operator>==</operator> <call><name>getInitialCurhops</name><argument_list>(<argument><expr><name>nlv</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ENLV1_printf</name><argument_list>(<argument><expr><literal type="string">"no inner tuple, need new outer tuple"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>nls</name><operator>.</operator><name>nl_NeedNewOuter</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><call><name>ENLV1_printf</name><argument_list>(<argument><expr><literal type="string">"no inner tuple, go to previous inner plan"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>ExecPrevContext</name><argument_list>(<argument><expr><name>innerPlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>restoreOuterVar</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>outerTupleSlot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/*
				 * We do this at here so that the remaning scans for the
				 * previous edge can use the right outer variable. We don't
				 * pass innerPlan because chgParam's are properly managed by
				 * ExecProcNode() and ExecNextContext()/ExecPrevContext().
				 * The remaning scans will see chgParam's for them and be able
				 * to determine whether they have to re-scan or not.
				 */</comment>
				<expr_stmt><expr><call><name>fetchOuterVars</name><argument_list>(<argument><expr><name>nlv</name></expr></argument>, <argument><expr><name>econtext</name></expr></argument>, <argument><expr><name>outerTupleSlot</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>

			<expr_stmt><expr><call><name>popPathElement</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>curhops</name></name><operator>--</operator></expr>;</expr_stmt>

			<comment type="block">/*
			 * return to top of loop for a new outer tuple or inner tuple of
			 * the previous edge.
			 */</comment>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * at this point we have a new pair of inner and outer tuples so we
		 * test the inner and outer tuples to see if they satisfy the node's
		 * qualification.
		 *
		 * Only the joinquals determine MatchedOuter status, but all quals
		 * must pass to actually return the tuple.
		 */</comment>
		<expr_stmt><expr><call><name>ENLV1_printf</name><argument_list>(<argument><expr><literal type="string">"testing qualification"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>arrayResultHas</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>eids</name></name></expr></argument>,
							<argument><expr><name><name>innerTupleSlot</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name>INNER_EID_VARNO</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>ExecQual</name><argument_list>(<argument><expr><name>otherqual</name></expr></argument>, <argument><expr><name>econtext</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

				<comment type="block">/*
				 * qualification was satisfied so we project and return the
				 * slot containing the result tuple using ExecProject().
				 */</comment>
				<expr_stmt><expr><call><name>ENLV1_printf</name><argument_list>(<argument><expr><literal type="string">"qualification succeeded, projecting tuple"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><call><name>canFollowEdge</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/*
					 * Store eid to guarantee edge-uniqueness, and edge/vertex
					 * to generate edge/vertex array for each result.
					 */</comment>
					<expr_stmt><expr><call><name>pushPathElementInner</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>innerTupleSlot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/*
					 * Store the current outer variable so that the remaining
					 * scans for the current edge can use it later.
					 * SeqScan uses it for each tuple. Index(Only)Scan uses it
					 * when runtime keys are evaluated while re-scanning.
					 *
					 * See fetchOuterVars() and ExecIndexEvalRuntimeKeys().
					 */</comment>
					<expr_stmt><expr><call><name>storeOuterVar</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>outerTupleSlot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/*
					 * Set the outer variable to the next vid so that;
					 * 1) ExecProject() can use the value of
					 *    INNER_NEXT_VID_VARNO for OUTER_CURR_VID_VARNO.
					 * 2) innerScan for the next edge can use it.
					 */</comment>
					<expr_stmt><expr><call><name>setNextOuterVar</name><argument_list>(<argument><expr><name>outerTupleSlot</name></expr></argument>, <argument><expr><name>innerTupleSlot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/*
					 * The result will have outerTupleSlot + innerTupleSlot.
					 *
					 * If innerScan is re-scanned for the next edge,
					 * ecxt_per_tuple_memory in Index(Only)Scan is reset.
					 * This means that the values in the slot from the
					 * innerPlan will be no longer valid after the reset.
					 * So, we should project the result at here.
					 */</comment>
					<if_stmt><if>if <condition>(<expr><call><name>needResult</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ExecProject</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>nls</name><operator>.</operator><name>js</name><operator>.</operator><name>ps</name><operator>.</operator><name>ps_ProjInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
					<else>else<block type="pseudo"><block_content>
						<expr_stmt><expr><name>result</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

					<expr_stmt><expr><call><name>ExecNextContext</name><argument_list>(<argument><expr><name>innerPlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>fetchOuterVars</name><argument_list>(<argument><expr><name>nlv</name></expr></argument>, <argument><expr><name>econtext</name></expr></argument>, <argument><expr><name>outerTupleSlot</name></expr></argument>, <argument><expr><name>innerPlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/*
					 * now rescan the inner plan
					 *
					 * For now, there are three kinds of innerPlan.
					 *
					 * 1. scan0 (SeqScan|IndexScan|IndexOnlyScan)
					 *
					 * ExecReScan(innerPlan) re-scans scan0 immediately if a
					 * scan descriptor for it already exists. If not, the first
					 * ExecProcNode(innerPlan) will re-scan it.
					 *
					 * 2. Result (may not exist depending on queries)
					 *      Append (label hierarchy)
					 *        scan0
					 *        scan1 *
					 *        scan2
					 *
					 * ExecReScan(innerPlan) does not re-scan scan0~2 because
					 * re-scaning Result/Append does not re-scan their subplans
					 * immediately. Instead, the first ExecProcNode() over
					 * scan0~2 will re-scan them if their chgParam is set.
					 * (Although ExecReScan() over them is called by calling
					 * ExecProcNode(), it considers the condition described at
					 * 1 above.)
					 *
					 * Let's assume that we need to get the next edge of the
					 * current edge while scanning scan1.
					 * a. ExecNextContext(innerPlan) stores the scan context of
					 *    the current edge which is now previous edge.
					 * b. fetchOuterVars() fetchs outer variables and then sets
					 *    chgParam for Result/Append.
					 * c. ExecReScan(innerPlan) and future
					 *    ExecProcNode(innerPlan) calls eventually unset all
					 *    the chgParam's.
					 * d. ExecPrevContext(innerPlan) restores the scan context
					 *    of the previous edge.
					 * If we don't care about chgParam's, the first
					 * ExecProcNode(scan2) will not be re-scanned because its
					 * chgParam is unset.
					 * This is why storing/restoring chgParam's is important.
					 *
					 * 3. NestLoop (if vertices have to be returned)
					 *      &lt;the same with 1 or 2 above, for vertices&gt;
					 *      &lt;the same with 1 or 2 above, for edges&gt;
					 */</comment>
					<expr_stmt><expr><call><name>ENLV1_printf</name><argument_list>(<argument><expr><literal type="string">"rescanning inner plan"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>ExecReScan</name><argument_list>(<argument><expr><name>innerPlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>curhops</name></name><operator>++</operator></expr>;</expr_stmt>

					<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><call><name>adjustResult</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<return>return <expr><name>result</name></expr>;</return>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<comment type="block">/* NOTE: Can we eliminate edge/vertex copy here? */</comment>
					<expr_stmt><expr><call><name>pushPathElementInner</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>innerTupleSlot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/*
					 * It is okay not to store the current outer variable
					 * because it is already fetched.
					 */</comment>
					<expr_stmt><expr><call><name>setNextOuterVar</name><argument_list>(<argument><expr><name>outerTupleSlot</name></expr></argument>, <argument><expr><name>innerTupleSlot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ExecProject</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>nls</name><operator>.</operator><name>js</name><operator>.</operator><name>ps</name><operator>.</operator><name>ps_ProjInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>adjustResult</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>popPathElement</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<return>return <expr><name>result</name></expr>;</return>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><call><name>InstrCountFiltered2</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>InstrCountFiltered1</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<comment type="block">/*
		 * Tuple fails qual, so free per-tuple memory and try again.
		 */</comment>
		<expr_stmt><expr><call><name>ResetExprContext</name><argument_list>(<argument><expr><name>econtext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>ENLV1_printf</name><argument_list>(<argument><expr><literal type="string">"qualification failed, looping"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/* ----------------------------------------------------------------
 *		ExecInitNestLoopVLE
 * ----------------------------------------------------------------
 */</comment>
<function><type><name>NestLoopVLEState</name> <modifier>*</modifier></type>
<name>ExecInitNestLoopVLE</name><parameter_list>(<parameter><decl><type><name>NestLoopVLE</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>EState</name> <modifier>*</modifier></type><name>estate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>NestLoopVLEState</name> <modifier>*</modifier></type><name>nlvstate</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>innerTupleDesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>element_type</name></decl>;</decl_stmt>

	<comment type="block">/* check for unsupported flags */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>eflags</name> <operator>&amp;</operator> <operator>(</operator><name>EXEC_FLAG_BACKWARD</name> <operator>|</operator> <name>EXEC_FLAG_MARK</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>NLV1_printf</name><argument_list>(<argument><expr><literal type="string">"ExecInitNestLoopVLE: %s\n"</literal></expr></argument>, <argument><expr><literal type="string">"initializing node"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * create state structure
	 */</comment>
	<expr_stmt><expr><name>nlvstate</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>NestLoopVLEState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>nlvstate</name><operator>-&gt;</operator><name>nls</name><operator>.</operator><name>js</name><operator>.</operator><name>ps</name><operator>.</operator><name>plan</name></name> <operator>=</operator> <operator>(</operator><name>Plan</name> <operator>*</operator><operator>)</operator> <name>node</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>nlvstate</name><operator>-&gt;</operator><name>nls</name><operator>.</operator><name>js</name><operator>.</operator><name>ps</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>estate</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>nlvstate</name><operator>-&gt;</operator><name>nls</name><operator>.</operator><name>js</name><operator>.</operator><name>ps</name><operator>.</operator><name>ExecProcNode</name></name> <operator>=</operator> <name>ExecNestLoopVLE</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Miscellaneous initialization
	 *
	 * create expression context for node
	 */</comment>
	<expr_stmt><expr><call><name>ExecAssignExprContext</name><argument_list>(<argument><expr><name>estate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>nlvstate</name><operator>-&gt;</operator><name>nls</name><operator>.</operator><name>js</name><operator>.</operator><name>ps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * initialize child expressions
	 */</comment>
	<expr_stmt><expr><name><name>nlvstate</name><operator>-&gt;</operator><name>nls</name><operator>.</operator><name>js</name><operator>.</operator><name>ps</name><operator>.</operator><name>qual</name></name> <operator>=</operator>
		<call><name>ExecInitQual</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>nl</name><operator>.</operator><name>join</name><operator>.</operator><name>plan</name><operator>.</operator><name>qual</name></name></expr></argument>, <argument><expr><operator>(</operator><name>PlanState</name> <operator>*</operator><operator>)</operator> <name>nlvstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>nlvstate</name><operator>-&gt;</operator><name>nls</name><operator>.</operator><name>js</name><operator>.</operator><name>jointype</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>nl</name><operator>.</operator><name>join</name><operator>.</operator><name>jointype</name></name></expr>;</expr_stmt>

	<comment type="block">/*
	 * initialize child nodes
	 *
	 * If we have no parameters to pass into the inner rel from the outer,
	 * tell the inner child that cheap rescans would be good.  If we do have
	 * such parameters, then there is no point in REWIND support at all in the
	 * inner child, because it will always be rescanned with fresh parameter
	 * values.
	 */</comment>
	<expr_stmt><expr><call><name>outerPlanState</name><argument_list>(<argument><expr><name>nlvstate</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>ExecInitNode</name><argument_list>(<argument><expr><call><name>outerPlan</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>estate</name></expr></argument>, <argument><expr><name>eflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>nl</name><operator>.</operator><name>nestParams</name></name> <operator>==</operator> <name>NIL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>eflags</name> <operator>|=</operator> <name>EXEC_FLAG_REWIND</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>eflags</name> <operator>&amp;=</operator> <operator>~</operator><name>EXEC_FLAG_REWIND</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<expr_stmt><expr><call><name>innerPlanState</name><argument_list>(<argument><expr><name>nlvstate</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>ExecInitNode</name><argument_list>(<argument><expr><call><name>innerPlan</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>estate</name></expr></argument>, <argument><expr><name>eflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


	<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>nl</name><operator>.</operator><name>join</name><operator>.</operator><name>jointype</name></name> <operator>!=</operator> <name>JOIN_VLE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized join type: %d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>node</name><operator>-&gt;</operator><name>nl</name><operator>.</operator><name>join</name><operator>.</operator><name>jointype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * tuple table initialization / initialize tuple type and projection info
	 */</comment>
	<expr_stmt><expr><call><name>ExecInitResultTupleSlotTL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>nlvstate</name><operator>-&gt;</operator><name>nls</name><operator>.</operator><name>js</name><operator>.</operator><name>ps</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>TTSOpsVirtual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ExecAssignProjectionInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>nlvstate</name><operator>-&gt;</operator><name>nls</name><operator>.</operator><name>js</name><operator>.</operator><name>ps</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>nlvstate</name><operator>-&gt;</operator><name>curhops</name></name> <operator>=</operator> <call><name>getInitialCurhops</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>innerTupleDesc</name> <operator>=</operator>
			<call><name>innerPlanState</name><argument_list>(<argument><expr><name>nlvstate</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>ps_ResultTupleSlot</name><operator>-&gt;</operator><name>tts_tupleDescriptor</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>element_type</name> <operator>=</operator> <call><name>TupleDescAttr</name><argument_list>(<argument><expr><name>innerTupleDesc</name></expr></argument>, <argument><expr><name>INNER_EID_VARNO</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>atttypid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>nlvstate</name><operator>-&gt;</operator><name>eids</name></name> <operator>=</operator> <call><name>initArrayResult</name><argument_list>(<argument><expr><name>element_type</name></expr></argument>, <argument><expr><name>CurrentMemoryContext</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*
	 * {prev, curr, ids | next, id} + {edges | edge}
	 * See genVLESubselect().
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>nlvstate</name><operator>-&gt;</operator><name>nls</name><operator>.</operator><name>js</name><operator>.</operator><name>ps</name><operator>.</operator><name>plan</name><operator>-&gt;</operator><name>targetlist</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">7</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>element_type</name> <operator>=</operator> <call><name>TupleDescAttr</name><argument_list>(<argument><expr><name>innerTupleDesc</name></expr></argument>, <argument><expr><name>INNER_EDGE_VARNO</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>atttypid</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>nlvstate</name><operator>-&gt;</operator><name>edges</name></name> <operator>=</operator> <call><name>initArrayResult</name><argument_list>(<argument><expr><name>element_type</name></expr></argument>, <argument><expr><name>CurrentMemoryContext</name></expr></argument>,
										  <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/*
	 * {prev, curr, ids, edges | next, id, edge} + {vertices | vertex}
	 * See genVLESubselect().
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>nlvstate</name><operator>-&gt;</operator><name>nls</name><operator>.</operator><name>js</name><operator>.</operator><name>ps</name><operator>.</operator><name>plan</name><operator>-&gt;</operator><name>targetlist</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">9</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>element_type</name> <operator>=</operator> <call><name>TupleDescAttr</name><argument_list>(<argument><expr><name>innerTupleDesc</name></expr></argument>, <argument><expr><name>INNER_VERTEX_VARNO</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>atttypid</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>nlvstate</name><operator>-&gt;</operator><name>vertices</name></name> <operator>=</operator> <call><name>initArrayResult</name><argument_list>(<argument><expr><name>element_type</name></expr></argument>, <argument><expr><name>CurrentMemoryContext</name></expr></argument>,
											 <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>dlist_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>nlvstate</name><operator>-&gt;</operator><name>ctxs_head</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>nlvstate</name><operator>-&gt;</operator><name>prev_ctx_node</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>nlvstate</name><operator>-&gt;</operator><name>ctxs_head</name><operator>.</operator><name>head</name></name></expr>;</expr_stmt>

	<comment type="block">/*
	 * finally, wipe the current outer tuple clean.
	 */</comment>
	<expr_stmt><expr><name><name>nlvstate</name><operator>-&gt;</operator><name>nls</name><operator>.</operator><name>nl_NeedNewOuter</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>NLV1_printf</name><argument_list>(<argument><expr><literal type="string">"ExecInitNestLoopVLE: %s\n"</literal></expr></argument>, <argument><expr><literal type="string">"node initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>nlvstate</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ----------------------------------------------------------------
 *		ExecEndNestLoopVLE
 *
 *		closes down scans and frees allocated storage
 * ----------------------------------------------------------------
 */</comment>
<function><type><name>void</name></type>
<name>ExecEndNestLoopVLE</name><parameter_list>(<parameter><decl><type><name>NestLoopVLEState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>dlist_mutable_iter</name></type> <name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>ctx_depth</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>NestLoopVLE</name> <modifier>*</modifier></type><name>nlv</name> <init>= <expr><operator>(</operator><name>NestLoopVLE</name> <operator>*</operator><operator>)</operator> <name><name>node</name><operator>-&gt;</operator><name>nls</name><operator>.</operator><name>js</name><operator>.</operator><name>ps</name><operator>.</operator><name>plan</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>NLV1_printf</name><argument_list>(<argument><expr><literal type="string">"ExecEndNestLoopVLE: %s\n"</literal></expr></argument>, <argument><expr><literal type="string">"ending node processing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Free the exprcontext
	 */</comment>
	<expr_stmt><expr><call><name>ExecFreeExprContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>nls</name><operator>.</operator><name>js</name><operator>.</operator><name>ps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * clean out the tuple table
	 */</comment>
	<expr_stmt><expr><call><name>ExecClearTuple</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>nls</name><operator>.</operator><name>js</name><operator>.</operator><name>ps</name><operator>.</operator><name>ps_ResultTupleSlot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>arrayResultClear</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>eids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>edges</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>arrayResultClear</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>edges</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>vertices</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>arrayResultClear</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>vertices</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<macro><name>dlist_foreach_modify</name><argument_list>(<argument>iter</argument>, <argument>&amp;node-&gt;ctxs_head</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>NestLoopVLEContext</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>dlist_delete</name><argument_list>(<argument><expr><name><name>iter</name><operator>.</operator><name>cur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>dlist_container</name><argument_list>(<argument><expr><name>NestLoopVLEContext</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name><name>iter</name><operator>.</operator><name>cur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>prev_ctx_node</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>ctxs_head</name><operator>.</operator><name>head</name></name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Back out our context stack, if necessary. It is important to note that
	 * the context depth is calculated ONLY to make it easier to follow. It is
	 * built from the fact that curhops can start from 0 or 1 and that for
	 * the first two increments, it does NOT push a context on the stack.
	 * Note that negative values for depth equate to a depth of zero.
	 *
	 * Additionally, we need to free any chgParam BMSets that might have
	 * been pending in the PlanState nodes.
	 *
	 * We do all of this because the LIMIT clause interrupts processing,
	 * leaving the VLE contexts in incomplete states. This causes memory
	 * issues that can crash the session.
	 */</comment>

	<expr_stmt><expr><name>ctx_depth</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>curhops</name></name> <operator>-</operator> <operator>(</operator><call><name>getInitialCurhops</name><argument_list>(<argument><expr><name>nlv</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>ctx_depth</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>freePlanStateChgParam</name><argument_list>(<argument><expr><call><name>innerPlanState</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ExecPrevContext</name><argument_list>(<argument><expr><call><name>innerPlanState</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ctx_depth</name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="block">/*
	 * close down subplans
	 */</comment>
	<expr_stmt><expr><call><name>ExecEndNode</name><argument_list>(<argument><expr><call><name>outerPlanState</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ExecEndNode</name><argument_list>(<argument><expr><call><name>innerPlanState</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>NLV1_printf</name><argument_list>(<argument><expr><literal type="string">"ExecEndNestLoopVLE: %s\n"</literal></expr></argument>, <argument><expr><literal type="string">"node processing ended"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Recursive function to decend a tree of PlanState nodes and free up
 * their chgParam Bitmapsets.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>freePlanStateChgParam</name><parameter_list>(<parameter><decl><type><name>PlanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PlanState</name> <modifier>*</modifier></type><name>ps</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* base case, NULL leaf, nothing to do */</comment>
	<if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="block">/* error out if the stack gets too deep */</comment>
	<expr_stmt><expr><call><name>check_stack_depth</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* we need to deal with each case differently */</comment>
	<switch>switch <condition>(<expr><call><name>nodeTag</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>T_SeqScanState</name></expr>:</case>
			<expr_stmt><expr><name>ps</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><operator>(</operator><name>SeqScanState</name> <operator>*</operator><operator>)</operator> <name>node</name><operator>)</operator><operator>-&gt;</operator><name><name>ss</name><operator>.</operator><name>ps</name></name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_IndexScanState</name></expr>:</case>
			<expr_stmt><expr><name>ps</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><operator>(</operator><name>IndexScanState</name> <operator>*</operator><operator>)</operator> <name>node</name><operator>)</operator><operator>-&gt;</operator><name><name>ss</name><operator>.</operator><name>ps</name></name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_IndexOnlyScanState</name></expr>:</case>
			<expr_stmt><expr><name>ps</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><operator>(</operator><name>IndexOnlyScanState</name> <operator>*</operator><operator>)</operator> <name>node</name><operator>)</operator><operator>-&gt;</operator><name><name>ss</name><operator>.</operator><name>ps</name></name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_ResultState</name></expr>:</case>
			<expr_stmt><expr><name>ps</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><operator>(</operator><name>ResultState</name> <operator>*</operator><operator>)</operator> <name>node</name><operator>)</operator><operator>-&gt;</operator><name>ps</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_NestLoopState</name></expr>:</case>
			<expr_stmt><expr><name>ps</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><operator>(</operator><name>NestLoopState</name> <operator>*</operator><operator>)</operator> <name>node</name><operator>)</operator><operator>-&gt;</operator><name><name>js</name><operator>.</operator><name>ps</name></name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_AppendState</name></expr>:</case>
			<expr_stmt><expr><name>ps</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><operator>(</operator><name>AppendState</name> <operator>*</operator><operator>)</operator> <name>node</name><operator>)</operator><operator>-&gt;</operator><name>ps</name></expr>;</expr_stmt>
			<block>{<block_content>
				<decl_stmt><decl><type><name>AppendState</name> <modifier>*</modifier></type><name>as</name> <init>= <expr><operator>(</operator><name>AppendState</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

				<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>as</name><operator>-&gt;</operator><name>as_nplans</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>freePlanStateChgParam</name><argument_list>(<argument><expr><name><name>as</name><operator>-&gt;</operator><name>appendplans</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
			</block_content>}</block>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized node type: %d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>nodeTag</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<comment type="block">/* recurse on the PlanState's children */</comment>
	<expr_stmt><expr><call><name>freePlanStateChgParam</name><argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>lefttree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>freePlanStateChgParam</name><argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>righttree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* if chgParam is not NULL, free it now */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>chgParam</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>bms_free</name><argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>chgParam</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>chgParam</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* ----------------------------------------------------------------
 *		ExecReScanNestLoopVLE
 * ----------------------------------------------------------------
 */</comment>
<function><type><name>void</name></type>
<name>ExecReScanNestLoopVLE</name><parameter_list>(<parameter><decl><type><name>NestLoopVLEState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PlanState</name>  <modifier>*</modifier></type><name>outerPlan</name> <init>= <expr><call><name>outerPlanState</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * If outerPlan-&gt;chgParam is not null then plan will be automatically
	 * re-scanned by first ExecProcNode.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>outerPlan</name><operator>-&gt;</operator><name>chgParam</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ExecReScan</name><argument_list>(<argument><expr><name>outerPlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * innerPlan is re-scanned for each new outer tuple and MUST NOT be
	 * re-scanned from here or you'll get troubles from inner index scans when
	 * outer Vars are used as run-time keys...
	 */</comment>

	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>nls</name><operator>.</operator><name>nl_NeedNewOuter</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>curhops</name></name> <operator>=</operator> <call><name>getInitialCurhops</name><argument_list>(<argument><expr><operator>(</operator><name>NestLoopVLE</name> <operator>*</operator><operator>)</operator> <name><name>node</name><operator>-&gt;</operator><name>nls</name><operator>.</operator><name>js</name><operator>.</operator><name>ps</name><operator>.</operator><name>plan</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>arrayResultClear</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>eids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>edges</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>arrayResultClear</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>edges</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>vertices</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>arrayResultClear</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>vertices</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>prev_ctx_node</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>ctxs_head</name><operator>.</operator><name>head</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>getInitialCurhops</name><parameter_list>(<parameter><decl><type><name>NestLoopVLE</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><ternary><condition><expr><name><name>node</name><operator>-&gt;</operator><name>minHops</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>canFollowEdge</name><parameter_list>(<parameter><decl><type><name>NestLoopVLEState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>NestLoopVLE</name> <modifier>*</modifier></type><name>nlv</name> <init>= <expr><operator>(</operator><name>NestLoopVLE</name> <operator>*</operator><operator>)</operator> <name><name>node</name><operator>-&gt;</operator><name>nls</name><operator>.</operator><name>js</name><operator>.</operator><name>ps</name><operator>.</operator><name>plan</name></name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* infinite (-1) */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>nlv</name><operator>-&gt;</operator><name>maxHops</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>curhops</name></name> <operator>&lt;</operator> <name><name>nlv</name><operator>-&gt;</operator><name>maxHops</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>needResult</name><parameter_list>(<parameter><decl><type><name>NestLoopVLEState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>NestLoopVLE</name> <modifier>*</modifier></type><name>nlv</name> <init>= <expr><operator>(</operator><name>NestLoopVLE</name> <operator>*</operator><operator>)</operator> <name><name>node</name><operator>-&gt;</operator><name>nls</name><operator>.</operator><name>js</name><operator>.</operator><name>ps</name><operator>.</operator><name>plan</name></name></expr></init></decl>;</decl_stmt>

	<return>return <expr><name><name>node</name><operator>-&gt;</operator><name>curhops</name></name> <operator>&gt;=</operator> <name><name>nlv</name><operator>-&gt;</operator><name>minHops</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>pushPathElementOuter</name><parameter_list>(<parameter><decl><type><name>NestLoopVLEState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FormData_pg_attribute</name> <modifier>*</modifier></type><name>attrs</name> <init>= <expr><name><name>slot</name><operator>-&gt;</operator><name>tts_tupleDescriptor</name><operator>-&gt;</operator><name>attrs</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IntArray</name></type>	<name>upper</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>value</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>isnull</name></decl>;</decl_stmt>
	<comment type="block">/* zero-length VLE does not have the first edge and its ID in outerPlan */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>curhops</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>upper</name><operator>.</operator><name>indx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>array_get_element</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name>OUTER_EIDS_VARNO</name></expr>]</index></name></expr></argument>,
							  <argument><expr><literal type="number">1</literal></expr></argument>,
							  <argument><expr><name><name>upper</name><operator>.</operator><name>indx</name></name></expr></argument>,
							  <argument><expr><name><name>attrs</name><index>[<expr><name>OUTER_EIDS_VARNO</name></expr>]</index></name><operator>.</operator><name>attlen</name></expr></argument>,
							  <argument><expr><name><name>node</name><operator>-&gt;</operator><name>eids</name><operator>-&gt;</operator><name>typlen</name></name></expr></argument>,
							  <argument><expr><name><name>node</name><operator>-&gt;</operator><name>eids</name><operator>-&gt;</operator><name>typbyval</name></name></expr></argument>,
							  <argument><expr><name><name>node</name><operator>-&gt;</operator><name>eids</name><operator>-&gt;</operator><name>typalign</name></name></expr></argument>,
							  <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>accumArrayResult</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>eids</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>isnull</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>eids</name><operator>-&gt;</operator><name>element_type</name></name></expr></argument>,
					 <argument><expr><name>CurrentMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>edges</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>array_get_element</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name>OUTER_EDGES_VARNO</name></expr>]</index></name></expr></argument>,
								  <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>upper</name><operator>.</operator><name>indx</name></name></expr></argument>,
								  <argument><expr><name><name>attrs</name><index>[<expr><name>OUTER_EDGES_VARNO</name></expr>]</index></name><operator>.</operator><name>attlen</name></expr></argument>,
								  <argument><expr><name><name>node</name><operator>-&gt;</operator><name>edges</name><operator>-&gt;</operator><name>typlen</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>edges</name><operator>-&gt;</operator><name>typbyval</name></name></expr></argument>,
								  <argument><expr><name><name>node</name><operator>-&gt;</operator><name>edges</name><operator>-&gt;</operator><name>typalign</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>accumArrayResult</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>edges</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>isnull</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>edges</name><operator>-&gt;</operator><name>element_type</name></name></expr></argument>,
						 <argument><expr><name>CurrentMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>pushPathElementInner</name><parameter_list>(<parameter><decl><type><name>NestLoopVLEState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FormData_pg_attribute</name> <modifier>*</modifier></type><name>attrs</name> <init>= <expr><name><name>slot</name><operator>-&gt;</operator><name>tts_tupleDescriptor</name><operator>-&gt;</operator><name>attrs</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>accumArrayResult</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>eids</name></name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name>INNER_EID_VARNO</name></expr>]</index></name></expr></argument>,
					 <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_isnull</name><index>[<expr><name>INNER_EID_VARNO</name></expr>]</index></name></expr></argument>,
					 <argument><expr><name><name>attrs</name><index>[<expr><name>INNER_EID_VARNO</name></expr>]</index></name><operator>.</operator><name>atttypid</name></expr></argument>,
					 <argument><expr><name>CurrentMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>edges</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>accumArrayResult</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>edges</name></name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name>INNER_EDGE_VARNO</name></expr>]</index></name></expr></argument>,
						 <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_isnull</name><index>[<expr><name>INNER_EDGE_VARNO</name></expr>]</index></name></expr></argument>,
						 <argument><expr><name><name>attrs</name><index>[<expr><name>INNER_EDGE_VARNO</name></expr>]</index></name><operator>.</operator><name>atttypid</name></expr></argument>,
						 <argument><expr><name>CurrentMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>vertices</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>accumArrayResult</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>vertices</name></name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name>INNER_VERTEX_VARNO</name></expr>]</index></name></expr></argument>,
						 <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_isnull</name><index>[<expr><name>INNER_VERTEX_VARNO</name></expr>]</index></name></expr></argument>,
						 <argument><expr><name><name>attrs</name><index>[<expr><name>INNER_VERTEX_VARNO</name></expr>]</index></name><operator>.</operator><name>atttypid</name></expr></argument>,
						 <argument><expr><name>CurrentMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>popPathElement</name><parameter_list>(<parameter><decl><type><name>NestLoopVLEState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>arrayResultPop</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>eids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>edges</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>arrayResultPop</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>edges</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>vertices</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>arrayResultPop</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>vertices</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>arrayResultHas</name><parameter_list>(<parameter><decl><type><name>ArrayBuildState</name> <modifier>*</modifier></type><name>astate</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>elem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>astate</name><operator>-&gt;</operator><name>nelems</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Graphid</name></type>		<name>cur_array_gid</name> <init>= <expr><call><name>DatumGetGraphid</name><argument_list>(<argument><expr><name><name>astate</name><operator>-&gt;</operator><name>dvalues</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Graphid</name></type>		<name>elem_gid</name> <init>= <expr><call><name>DatumGetGraphid</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>cur_array_gid</name> <operator>==</operator> <name>elem_gid</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>arrayResultPop</name><parameter_list>(<parameter><decl><type><name>ArrayBuildState</name> <modifier>*</modifier></type><name>astate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>astate</name><operator>-&gt;</operator><name>nelems</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>astate</name><operator>-&gt;</operator><name>nelems</name></name><operator>--</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>astate</name><operator>-&gt;</operator><name>typbyval</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name><name>astate</name><operator>-&gt;</operator><name>dvalues</name><index>[<expr><name><name>astate</name><operator>-&gt;</operator><name>nelems</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>arrayResultClear</name><parameter_list>(<parameter><decl><type><name>ArrayBuildState</name> <modifier>*</modifier></type><name>astate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>astate</name><operator>-&gt;</operator><name>typbyval</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>astate</name><operator>-&gt;</operator><name>nelems</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name><name>astate</name><operator>-&gt;</operator><name>dvalues</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>astate</name><operator>-&gt;</operator><name>nelems</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>storeOuterVar</name><parameter_list>(<parameter><decl><type><name>NestLoopVLEState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>dlist_node</name> <modifier>*</modifier></type><name>ctx_node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>NestLoopVLEContext</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>dlist_has_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>ctxs_head</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>prev_ctx_node</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>ctx_node</name> <operator>=</operator> <call><name>dlist_next_node</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>ctxs_head</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>prev_ctx_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>dlist_container</name><argument_list>(<argument><expr><name>NestLoopVLEContext</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name>ctx_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ctx_node</name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>list</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>dlist_push_tail</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>ctxs_head</name></name></expr></argument>, <argument><expr><name>ctx_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* here, we assume that the outer variable is graphid which is typbyval */</comment>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>outer_var_datum</name></name> <operator>=</operator> <name><name>slot</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name>OUTER_CURR_VID_VARNO</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>outer_var_isnull</name></name> <operator>=</operator> <name><name>slot</name><operator>-&gt;</operator><name>tts_isnull</name><index>[<expr><name>OUTER_CURR_VID_VARNO</name></expr>]</index></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>prev_ctx_node</name></name> <operator>=</operator> <name>ctx_node</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>restoreOuterVar</name><parameter_list>(<parameter><decl><type><name>NestLoopVLEState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>dlist_node</name> <modifier>*</modifier></type><name>ctx_node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>NestLoopVLEContext</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ctx_node</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>prev_ctx_node</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>ctx_node</name> <operator>!=</operator> <operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>ctxs_head</name><operator>.</operator><name>head</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>dlist_has_prev</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>ctxs_head</name></name></expr></argument>, <argument><expr><name>ctx_node</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>prev_ctx_node</name></name> <operator>=</operator> <call><name>dlist_prev_node</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>ctxs_head</name></name></expr></argument>, <argument><expr><name>ctx_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>prev_ctx_node</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>ctxs_head</name><operator>.</operator><name>head</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>dlist_container</name><argument_list>(<argument><expr><name>NestLoopVLEContext</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name>ctx_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* here, we assume that the outer variable is graphid which is typbyval */</comment>
	<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name>OUTER_CURR_VID_VARNO</name></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>outer_var_datum</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_isnull</name><index>[<expr><name>OUTER_CURR_VID_VARNO</name></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>outer_var_isnull</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>setNextOuterVar</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>outer_slot</name></decl></parameter>, <parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>inner_slot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* here, we assume that the outer variable is graphid which is typbyval */</comment>
	<expr_stmt><expr><name><name>outer_slot</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name>OUTER_CURR_VID_VARNO</name></expr>]</index></name>
			<operator>=</operator> <name><name>inner_slot</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name>INNER_NEXT_VID_VARNO</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>outer_slot</name><operator>-&gt;</operator><name>tts_isnull</name><index>[<expr><name>OUTER_CURR_VID_VARNO</name></expr>]</index></name>
			<operator>=</operator> <name><name>inner_slot</name><operator>-&gt;</operator><name>tts_isnull</name><index>[<expr><name>INNER_NEXT_VID_VARNO</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * fetch the values of any outer Vars that must be passed to the inner scan,
 * and store them in the appropriate PARAM_EXEC slots.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>fetchOuterVars</name><parameter_list>(<parameter><decl><type><name>NestLoopVLE</name> <modifier>*</modifier></type><name>nlv</name></decl></parameter>, <parameter><decl><type><name>ExprContext</name> <modifier>*</modifier></type><name>econtext</name></decl></parameter>,
			   <parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>outerTupleSlot</name></decl></parameter>, <parameter><decl><type><name>PlanState</name> <modifier>*</modifier></type><name>innerPlan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

	<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>nlv-&gt;nl.nestParams</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>NestLoopParam</name> <modifier>*</modifier></type><name>nlp</name> <init>= <expr><operator>(</operator><name>NestLoopParam</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>paramno</name> <init>= <expr><name><name>nlp</name><operator>-&gt;</operator><name>paramno</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ParamExecData</name> <modifier>*</modifier></type><name>prm</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>prm</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>econtext</name><operator>-&gt;</operator><name>ecxt_param_exec_vals</name><index>[<expr><name>paramno</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
		<comment type="block">/* Param value should be an OUTER_VAR var */</comment>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>IsA</name><argument_list>(<argument><expr><name><name>nlp</name><operator>-&gt;</operator><name>paramval</name></name></expr></argument>, <argument><expr><name>Var</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>nlp</name><operator>-&gt;</operator><name>paramval</name><operator>-&gt;</operator><name>varno</name></name> <operator>==</operator> <name>OUTER_VAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>nlp</name><operator>-&gt;</operator><name>paramval</name><operator>-&gt;</operator><name>varattno</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>prm</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>slot_getattr</name><argument_list>(<argument><expr><name>outerTupleSlot</name></expr></argument>,
								  <argument><expr><name><name>nlp</name><operator>-&gt;</operator><name>paramval</name><operator>-&gt;</operator><name>varattno</name></name></expr></argument>,
								  <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>prm</name><operator>-&gt;</operator><name>isnull</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Flag parameter value as changed */</comment>
		<if_stmt><if>if <condition>(<expr><name>innerPlan</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>innerPlan</name><operator>-&gt;</operator><name>chgParam</name></name> <operator>=</operator> <call><name>bms_add_member</name><argument_list>(<argument><expr><name><name>innerPlan</name><operator>-&gt;</operator><name>chgParam</name></name></expr></argument>, <argument><expr><name>paramno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block>
</block_content>}</block></function>

<comment type="block">/*
 * The following attributes from outerTupleSlot are invalid when it is created.
 *
 * OUTER_EIDS_VARNO
 * OUTER_EDGES_VARNO
 * OUTER_VERTICES_VARNO
 *
 * This function replaces the values with proper values of the current hop.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>adjustResult</name><parameter_list>(<parameter><decl><type><name>NestLoopVLEState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ExprContext</name> <modifier>*</modifier></type><name>econtext</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>nls</name><operator>.</operator><name>js</name><operator>.</operator><name>ps</name><operator>.</operator><name>ps_ExprContext</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>tupmctx</name> <init>= <expr><name><name>econtext</name><operator>-&gt;</operator><name>ecxt_per_tuple_memory</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name>OUTER_EIDS_VARNO</name></expr>]</index></name> <operator>=</operator> <call><name>makeArrayResult</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>eids</name></name></expr></argument>, <argument><expr><name>tupmctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_isnull</name><index>[<expr><name>OUTER_EIDS_VARNO</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>edges</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name>OUTER_EDGES_VARNO</name></expr>]</index></name> <operator>=</operator> <call><name>makeArrayResult</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>edges</name></name></expr></argument>,
															  <argument><expr><name>tupmctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_isnull</name><index>[<expr><name>OUTER_EDGES_VARNO</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>vertices</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name>OUTER_VERTICES_VARNO</name></expr>]</index></name> <operator>=</operator> <call><name>makeArrayResult</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>vertices</name></name></expr></argument>,
																 <argument><expr><name>tupmctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_isnull</name><index>[<expr><name>OUTER_VERTICES_VARNO</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
