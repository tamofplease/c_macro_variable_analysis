<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/test/modules/dummy_index_am/dummy_index_am.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * dummy_index_am.c
 *		Index AM template main file.
 *
 * Portions Copyright (c) 1996-2020, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * IDENTIFICATION
 *	  src/test/modules/dummy_index_am/dummy_index_am.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/amapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/reloptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/index.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/vacuum.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/pathnodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/rel.h"</cpp:file></cpp:include>

<expr_stmt><expr><name>PG_MODULE_MAGIC</name></expr>;</expr_stmt>

<function_decl><type><name>void</name></type>		<name>_PG_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* parse table for fillRelOptions */</comment>
<decl_stmt><decl><type><name>relopt_parse_elt</name></type> <name><name>di_relopt_tab</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<comment type="block">/* Kind of relation options for dummy index */</comment>
<decl_stmt><decl><type><name>relopt_kind</name></type> <name>di_relopt_kind</name></decl>;</decl_stmt>

<typedef>typedef <type><enum>enum <name>DummyAmEnum</name>
<block>{
	<decl><name>DUMMY_AM_ENUM_ONE</name></decl>,
	<decl><name>DUMMY_AM_ENUM_TWO</name></decl>
}</block></enum></type>			<name>DummyAmEnum</name>;</typedef>

<comment type="block">/* Dummy index options */</comment>
<typedef>typedef <type><struct>struct <name>DummyIndexOptions</name>
<block>{
	<decl_stmt><decl><type><name>int32</name></type>		<name>vl_len_</name></decl>;</decl_stmt>		<comment type="block">/* varlena header (do not touch directly!) */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>option_int</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type>		<name>option_real</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>option_bool</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DummyAmEnum</name></type> <name>option_enum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>option_string_val_offset</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>option_string_null_offset</name></decl>;</decl_stmt>
}</block></struct></type>			<name>DummyIndexOptions</name>;</typedef>

<decl_stmt><decl><type><name>relopt_enum_elt_def</name></type> <name><name>dummyAmEnumValues</name><index>[]</index></name> <init>=
<expr><block>{
	<expr><block>{<expr><literal type="string">"one"</literal></expr>, <expr><name>DUMMY_AM_ENUM_ONE</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"two"</literal></expr>, <expr><name>DUMMY_AM_ENUM_TWO</name></expr>}</block></expr>,
	<expr><block>{<expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr>}</block></expr>		<comment type="block">/* list terminator */</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Handler for index AM */</comment>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>dihandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/*
 * Validation function for string relation options.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>validate_string_option</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"new option value for string parameter %s"</literal></expr></argument>,
					<argument><expr><ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><name>value</name></expr> </then><else>: <expr><literal type="string">"NULL"</literal></expr></else></ternary></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * This function creates a full set of relation option types,
 * with various patterns.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>create_reloptions_table</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>di_relopt_kind</name> <operator>=</operator> <call><name>add_reloption_kind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>add_int_reloption</name><argument_list>(<argument><expr><name>di_relopt_kind</name></expr></argument>, <argument><expr><literal type="string">"option_int"</literal></expr></argument>,
					  <argument><expr><literal type="string">"Integer option for dummy_index_am"</literal></expr></argument>,
					  <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><name>AccessExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>di_relopt_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>optname</name> <operator>=</operator> <literal type="string">"option_int"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>di_relopt_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>opttype</name> <operator>=</operator> <name>RELOPT_TYPE_INT</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>di_relopt_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>offset</name> <operator>=</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>DummyIndexOptions</name></expr></argument>, <argument><expr><name>option_int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>add_real_reloption</name><argument_list>(<argument><expr><name>di_relopt_kind</name></expr></argument>, <argument><expr><literal type="string">"option_real"</literal></expr></argument>,
					   <argument><expr><literal type="string">"Real option for dummy_index_am"</literal></expr></argument>,
					   <argument><expr><literal type="number">3.1415</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><name>AccessExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>di_relopt_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>optname</name> <operator>=</operator> <literal type="string">"option_real"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>di_relopt_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>opttype</name> <operator>=</operator> <name>RELOPT_TYPE_REAL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>di_relopt_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>offset</name> <operator>=</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>DummyIndexOptions</name></expr></argument>, <argument><expr><name>option_real</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>add_bool_reloption</name><argument_list>(<argument><expr><name>di_relopt_kind</name></expr></argument>, <argument><expr><literal type="string">"option_bool"</literal></expr></argument>,
					   <argument><expr><literal type="string">"Boolean option for dummy_index_am"</literal></expr></argument>,
					   <argument><expr><name>true</name></expr></argument>, <argument><expr><name>AccessExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>di_relopt_tab</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>optname</name> <operator>=</operator> <literal type="string">"option_bool"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>di_relopt_tab</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>opttype</name> <operator>=</operator> <name>RELOPT_TYPE_BOOL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>di_relopt_tab</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>offset</name> <operator>=</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>DummyIndexOptions</name></expr></argument>, <argument><expr><name>option_bool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>add_enum_reloption</name><argument_list>(<argument><expr><name>di_relopt_kind</name></expr></argument>, <argument><expr><literal type="string">"option_enum"</literal></expr></argument>,
					   <argument><expr><literal type="string">"Enum option for dummy_index_am"</literal></expr></argument>,
					   <argument><expr><name>dummyAmEnumValues</name></expr></argument>,
					   <argument><expr><name>DUMMY_AM_ENUM_ONE</name></expr></argument>,
					   <argument><expr><literal type="string">"Valid values are \"one\" and \"two\"."</literal></expr></argument>,
					   <argument><expr><name>AccessExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>di_relopt_tab</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>optname</name> <operator>=</operator> <literal type="string">"option_enum"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>di_relopt_tab</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>opttype</name> <operator>=</operator> <name>RELOPT_TYPE_ENUM</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>di_relopt_tab</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>offset</name> <operator>=</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>DummyIndexOptions</name></expr></argument>, <argument><expr><name>option_enum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>add_string_reloption</name><argument_list>(<argument><expr><name>di_relopt_kind</name></expr></argument>, <argument><expr><literal type="string">"option_string_val"</literal></expr></argument>,
						 <argument><expr><literal type="string">"String option for dummy_index_am with non-NULL default"</literal></expr></argument>,
						 <argument><expr><literal type="string">"DefaultValue"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>validate_string_option</name></expr></argument>,
						 <argument><expr><name>AccessExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>di_relopt_tab</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>optname</name> <operator>=</operator> <literal type="string">"option_string_val"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>di_relopt_tab</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>opttype</name> <operator>=</operator> <name>RELOPT_TYPE_STRING</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>di_relopt_tab</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>offset</name> <operator>=</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>DummyIndexOptions</name></expr></argument>,
									   <argument><expr><name>option_string_val_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * String option for dummy_index_am with NULL default, and without
	 * description.
	 */</comment>
	<expr_stmt><expr><call><name>add_string_reloption</name><argument_list>(<argument><expr><name>di_relopt_kind</name></expr></argument>, <argument><expr><literal type="string">"option_string_null"</literal></expr></argument>,
						 <argument><expr><name>NULL</name></expr></argument>,	<comment type="block">/* description */</comment>
						 <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>validate_string_option</name></expr></argument>,
						 <argument><expr><name>AccessExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>di_relopt_tab</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>optname</name> <operator>=</operator> <literal type="string">"option_string_null"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>di_relopt_tab</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>opttype</name> <operator>=</operator> <name>RELOPT_TYPE_STRING</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>di_relopt_tab</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>offset</name> <operator>=</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>DummyIndexOptions</name></expr></argument>,
									   <argument><expr><name>option_string_null_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Build a new index.
 */</comment>
<function><type><specifier>static</specifier> <name>IndexBuildResult</name> <modifier>*</modifier></type>
<name>dibuild</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>heap</name></decl></parameter>, <parameter><decl><type><name>Relation</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>IndexInfo</name> <modifier>*</modifier></type><name>indexInfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>IndexBuildResult</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>IndexBuildResult</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>IndexBuildResult</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* let's pretend that no tuples were scanned */</comment>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>heap_tuples</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<comment type="block">/* and no index tuples were created (that is true) */</comment>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>index_tuples</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Build an empty index for the initialiation fork.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dibuildempty</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* No need to build an init fork for a dummy index */</comment>
</block_content>}</block></function>

<comment type="block">/*
 * Insert new tuple to index AM.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>diinsert</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>Datum</name> <modifier>*</modifier></type><name>values</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>isnull</name></decl></parameter>,
		 <parameter><decl><type><name>ItemPointer</name></type> <name>ht_ctid</name></decl></parameter>, <parameter><decl><type><name>Relation</name></type> <name>heapRel</name></decl></parameter>,
		 <parameter><decl><type><name>IndexUniqueCheck</name></type> <name>checkUnique</name></decl></parameter>,
		 <parameter><decl><type><name>IndexInfo</name> <modifier>*</modifier></type><name>indexInfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* nothing to do */</comment>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Bulk deletion of all index entries pointing to a set of table tuples.
 */</comment>
<function><type><specifier>static</specifier> <name>IndexBulkDeleteResult</name> <modifier>*</modifier></type>
<name>dibulkdelete</name><parameter_list>(<parameter><decl><type><name>IndexVacuumInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>IndexBulkDeleteResult</name> <modifier>*</modifier></type><name>stats</name></decl></parameter>,
			 <parameter><decl><type><name>IndexBulkDeleteCallback</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>callback_state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * There is nothing to delete.  Return NULL as there is nothing to pass to
	 * amvacuumcleanup.
	 */</comment>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Post-VACUUM cleanup for index AM.
 */</comment>
<function><type><specifier>static</specifier> <name>IndexBulkDeleteResult</name> <modifier>*</modifier></type>
<name>divacuumcleanup</name><parameter_list>(<parameter><decl><type><name>IndexVacuumInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>IndexBulkDeleteResult</name> <modifier>*</modifier></type><name>stats</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Index has not been modified, so returning NULL is fine */</comment>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Estimate cost of index AM.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dicostestimate</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>IndexPath</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>loop_count</name></decl></parameter>,
			   <parameter><decl><type><name>Cost</name> <modifier>*</modifier></type><name>indexStartupCost</name></decl></parameter>, <parameter><decl><type><name>Cost</name> <modifier>*</modifier></type><name>indexTotalCost</name></decl></parameter>,
			   <parameter><decl><type><name>Selectivity</name> <modifier>*</modifier></type><name>indexSelectivity</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>indexCorrelation</name></decl></parameter>,
			   <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>indexPages</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Tell planner to never use this index! */</comment>
	<expr_stmt><expr><operator>*</operator><name>indexStartupCost</name> <operator>=</operator> <literal type="number">1.0e10</literal></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>indexTotalCost</name> <operator>=</operator> <literal type="number">1.0e10</literal></expr>;</expr_stmt>

	<comment type="block">/* Do not care about the rest */</comment>
	<expr_stmt><expr><operator>*</operator><name>indexSelectivity</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>indexCorrelation</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>indexPages</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Parse relation options for index AM, returning a DummyIndexOptions
 * structure filled with option values.
 */</comment>
<function><type><specifier>static</specifier> <name>bytea</name> <modifier>*</modifier></type>
<name>dioptions</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>reloptions</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>validate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>bytea</name> <operator>*</operator><operator>)</operator> <call><name>build_reloptions</name><argument_list>(<argument><expr><name>reloptions</name></expr></argument>, <argument><expr><name>validate</name></expr></argument>,
									  <argument><expr><name>di_relopt_kind</name></expr></argument>,
									  <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DummyIndexOptions</name></expr></argument>)</argument_list></sizeof></expr></argument>,
									  <argument><expr><name>di_relopt_tab</name></expr></argument>, <argument><expr><call><name>lengthof</name><argument_list>(<argument><expr><name>di_relopt_tab</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Validator for index AM.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>divalidate</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>opclassoid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Index is dummy so we are happy with any opclass */</comment>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Begin scan of index AM.
 */</comment>
<function><type><specifier>static</specifier> <name>IndexScanDesc</name></type>
<name>dibeginscan</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nkeys</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>norderbys</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>IndexScanDesc</name></type> <name>scan</name></decl>;</decl_stmt>

	<comment type="block">/* Let's pretend we are doing something */</comment>
	<expr_stmt><expr><name>scan</name> <operator>=</operator> <call><name>RelationGetIndexScan</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>nkeys</name></expr></argument>, <argument><expr><name>norderbys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>scan</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Rescan of index AM.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>direscan</name><parameter_list>(<parameter><decl><type><name>IndexScanDesc</name></type> <name>scan</name></decl></parameter>, <parameter><decl><type><name>ScanKey</name></type> <name>scankey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nscankeys</name></decl></parameter>,
		 <parameter><decl><type><name>ScanKey</name></type> <name>orderbys</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>norderbys</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* nothing to do */</comment>
</block_content>}</block></function>

<comment type="block">/*
 * End scan of index AM.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>diendscan</name><parameter_list>(<parameter><decl><type><name>IndexScanDesc</name></type> <name>scan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* nothing to do */</comment>
</block_content>}</block></function>

<comment type="block">/*
 * Index AM handler function: returns IndexAmRoutine with access method
 * parameters and callbacks.
 */</comment>
<function><type><name>Datum</name></type>
<name>dihandler</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>IndexAmRoutine</name> <modifier>*</modifier></type><name>amroutine</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>IndexAmRoutine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>amstrategies</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>amsupport</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>amcanorder</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>amcanorderbyop</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>amcanbackward</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>amcanunique</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>amcanmulticol</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>amoptionalkey</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>amsearcharray</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>amsearchnulls</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>amstorage</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>amclusterable</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>ampredlocks</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>amcanparallel</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>amcaninclude</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>amusemaintenanceworkmem</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>amparallelvacuumoptions</name></name> <operator>=</operator> <name>VACUUM_OPTION_NO_PARALLEL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>amkeytype</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>ambuild</name></name> <operator>=</operator> <name>dibuild</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>ambuildempty</name></name> <operator>=</operator> <name>dibuildempty</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>aminsert</name></name> <operator>=</operator> <name>diinsert</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>ambulkdelete</name></name> <operator>=</operator> <name>dibulkdelete</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>amvacuumcleanup</name></name> <operator>=</operator> <name>divacuumcleanup</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>amcanreturn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>amcostestimate</name></name> <operator>=</operator> <name>dicostestimate</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>amoptions</name></name> <operator>=</operator> <name>dioptions</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>amproperty</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>ambuildphasename</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>amvalidate</name></name> <operator>=</operator> <name>divalidate</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>ambeginscan</name></name> <operator>=</operator> <name>dibeginscan</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>amrescan</name></name> <operator>=</operator> <name>direscan</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>amgettuple</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>amgetbitmap</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>amendscan</name></name> <operator>=</operator> <name>diendscan</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>ammarkpos</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>amrestrpos</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>amestimateparallelscan</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>aminitparallelscan</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>amroutine</name><operator>-&gt;</operator><name>amparallelrescan</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>amroutine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>_PG_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>create_reloptions_table</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
