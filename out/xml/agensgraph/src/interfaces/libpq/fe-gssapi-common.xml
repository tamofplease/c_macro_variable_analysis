<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/interfaces/libpq/fe-gssapi-common.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * fe-gssapi-common.c
 *     The front-end (client) GSSAPI common code
 *
 * Portions Copyright (c) 1996-2020, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * IDENTIFICATION
 *      src/interfaces/libpq/fe-gssapi-common.c
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fe-gssapi-common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq-int.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pqexpbuffer.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Fetch all errors of a specific type and append to "str".
 * Each error string is preceded by a space.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>pg_GSS_error_int</name><parameter_list>(<parameter><decl><type><name>PQExpBuffer</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>OM_uint32</name></type> <name>stat</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OM_uint32</name></type>	<name>lmin_s</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>gss_buffer_desc</name></type> <name>lmsg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OM_uint32</name></type>	<name>msg_ctx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<do>do
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>gss_display_status</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lmin_s</name></expr></argument>, <argument><expr><name>stat</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>GSS_C_NO_OID</name></expr></argument>,
							   <argument><expr><operator>&amp;</operator><name>msg_ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lmsg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>GSS_S_COMPLETE</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>appendPQExpBufferChar</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>appendBinaryPQExpBuffer</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>lmsg</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>lmsg</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>gss_release_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lmin_s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block> while <condition>(<expr><name>msg_ctx</name></expr>)</condition>;</do>
</block_content>}</block></function>

<comment type="block">/*
 * GSSAPI errors contain two parts; put both into conn-&gt;errorMessage.
 */</comment>
<function><type><name>void</name></type>
<name>pg_GSS_error</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mprefix</name></decl></parameter>, <parameter><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
			 <parameter><decl><type><name>OM_uint32</name></type> <name>maj_stat</name></decl></parameter>, <parameter><decl><type><name>OM_uint32</name></type> <name>min_stat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>resetPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>errorMessage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>errorMessage</name></name></expr></argument>, <argument><expr><literal type="string">"%s:"</literal></expr></argument>, <argument><expr><name>mprefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_GSS_error_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>errorMessage</name></name></expr></argument>, <argument><expr><name>maj_stat</name></expr></argument>, <argument><expr><name>GSS_C_GSS_CODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendPQExpBufferChar</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>errorMessage</name></name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_GSS_error_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>errorMessage</name></name></expr></argument>, <argument><expr><name>min_stat</name></expr></argument>, <argument><expr><name>GSS_C_MECH_CODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendPQExpBufferChar</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>errorMessage</name></name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Check if we can acquire credentials at all (and yield them if so).
 */</comment>
<function><type><name>bool</name></type>
<name>pg_GSS_have_cred_cache</name><parameter_list>(<parameter><decl><type><name>gss_cred_id_t</name> <modifier>*</modifier></type><name>cred_out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OM_uint32</name></type>	<name>major</name></decl>,
				<decl><type ref="prev"/><name>minor</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>gss_cred_id_t</name></type> <name>cred</name> <init>= <expr><name>GSS_C_NO_CREDENTIAL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>major</name> <operator>=</operator> <call><name>gss_acquire_cred</name><argument_list>(<argument><expr><operator>&amp;</operator><name>minor</name></expr></argument>, <argument><expr><name>GSS_C_NO_NAME</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>GSS_C_NO_OID_SET</name></expr></argument>,
							 <argument><expr><name>GSS_C_INITIATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cred</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>major</name> <operator>!=</operator> <name>GSS_S_COMPLETE</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>cred_out</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>cred_out</name> <operator>=</operator> <name>cred</name></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Try to load service name for a connection
 */</comment>
<function><type><name>int</name></type>
<name>pg_GSS_load_servicename</name><parameter_list>(<parameter><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OM_uint32</name></type>	<name>maj_stat</name></decl>,
				<decl><type ref="prev"/><name>min_stat</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>maxlen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>gss_buffer_desc</name></type> <name>temp_gbuf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>host</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>gtarg_nam</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/* Already taken care of - move along */</comment>
		<return>return <expr><name>STATUS_OK</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>host</name> <operator>=</operator> <call><name>PQhost</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>host</name> <operator>&amp;&amp;</operator> <name><name>host</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>printfPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>errorMessage</name></name></expr></argument>,
						  <argument><expr><call><name>libpq_gettext</name><argument_list>(<argument><expr><literal type="string">"host name must be specified\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>STATUS_ERROR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Import service principal name so the proper ticket can be acquired by
	 * the GSSAPI system.
	 */</comment>
	<expr_stmt><expr><name>maxlen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>krbsrvname</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>temp_gbuf</name><operator>.</operator><name>value</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>maxlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>temp_gbuf</name><operator>.</operator><name>value</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>printfPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>errorMessage</name></name></expr></argument>,
						  <argument><expr><call><name>libpq_gettext</name><argument_list>(<argument><expr><literal type="string">"out of memory\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>STATUS_ERROR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>temp_gbuf</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>, <argument><expr><literal type="string">"%s@%s"</literal></expr></argument>,
			 <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>krbsrvname</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>temp_gbuf</name><operator>.</operator><name>length</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>temp_gbuf</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>maj_stat</name> <operator>=</operator> <call><name>gss_import_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name>min_stat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp_gbuf</name></expr></argument>,
							   <argument><expr><name>GSS_C_NT_HOSTBASED_SERVICE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>gtarg_nam</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>temp_gbuf</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>maj_stat</name> <operator>!=</operator> <name>GSS_S_COMPLETE</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pg_GSS_error</name><argument_list>(<argument><expr><call><name>libpq_gettext</name><argument_list>(<argument><expr><literal type="string">"GSSAPI name import error"</literal></expr></argument>)</argument_list></call></expr></argument>,
					 <argument><expr><name>conn</name></expr></argument>,
					 <argument><expr><name>maj_stat</name></expr></argument>, <argument><expr><name>min_stat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>STATUS_ERROR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>STATUS_OK</name></expr>;</return>
</block_content>}</block></function>
</unit>
