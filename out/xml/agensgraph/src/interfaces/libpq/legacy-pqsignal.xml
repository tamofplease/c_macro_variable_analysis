<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/interfaces/libpq/legacy-pqsignal.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * legacy-pqsignal.c
 *	  reliable BSD-style signal(2) routine stolen from RWW who stole it
 *	  from Stevens...
 *
 * Portions Copyright (c) 1996-2020, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/interfaces/libpq/legacy-pqsignal.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>


<comment type="block">/*
 * This version of pqsignal() exists only because pre-9.3 releases
 * of libpq exported pqsignal(), and some old client programs still
 * depend on that.  (Since 9.3, clients are supposed to get it from
 * libpgport instead.)
 *
 * Because it is only intended for backwards compatibility, we freeze it
 * with the semantics it had in 9.2; in particular, this has different
 * behavior for SIGALRM than the version in src/port/pqsignal.c.
 *
 * libpq itself uses this only for SIGPIPE (and even then, only in
 * non-ENABLE_THREAD_SAFETY builds), so the incompatibility isn't
 * troublesome for internal references.
 */</comment>
<function><type><name>pqsigfunc</name></type>
<name>pqsignal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signo</name></decl></parameter>, <parameter><decl><type><name>pqsigfunc</name></type> <name>func</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
	<decl_stmt><decl><type><name><name>struct</name> <name>sigaction</name></name></type> <name>act</name></decl>,
				<decl><type ref="prev"/><name>oact</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>act</name><operator>.</operator><name>sa_handler</name></name> <operator>=</operator> <name>func</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sigemptyset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>act</name><operator>.</operator><name>sa_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>act</name><operator>.</operator><name>sa_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>signo</name> <operator>!=</operator> <name>SIGALRM</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>act</name><operator>.</operator><name>sa_flags</name></name> <operator>|=</operator> <name>SA_RESTART</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SA_NOCLDSTOP</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name>signo</name> <operator>==</operator> <name>SIGCHLD</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>act</name><operator>.</operator><name>sa_flags</name></name> <operator>|=</operator> <name>SA_NOCLDSTOP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if <condition>(<expr><call><name>sigaction</name><argument_list>(<argument><expr><name>signo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>act</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oact</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>SIG_ERR</name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name><name>oact</name><operator>.</operator><name>sa_handler</name></name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>							<comment type="block">/* WIN32 */</comment>
	<return>return <expr><call><name>signal</name><argument_list>(<argument><expr><name>signo</name></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
</unit>
