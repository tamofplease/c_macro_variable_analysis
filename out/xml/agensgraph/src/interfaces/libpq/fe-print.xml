<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/interfaces/libpq/fe-print.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * fe-print.c
 *	  functions for pretty-printing query results
 *
 * Portions Copyright (c) 1996-2020, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * These functions were formerly part of fe-exec.c, but they
 * didn't really belong there.
 *
 * IDENTIFICATION
 *	  src/interfaces/libpq/fe-print.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"win32.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_TERMIOS_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;termios.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/termios.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq-fe.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq-int.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PQmblenBounded</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>strnlen(s, PQmblen(s, e))</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>do_field</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PQprintOpt</name> <modifier>*</modifier></type><name>po</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>PGresult</name> <modifier>*</modifier></type><name>res</name></decl></parameter>,
					 <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>j</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>fs_len</name></decl></parameter>,
					 <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>fields</name></decl></parameter>,
					 <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>nFields</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>fieldNames</name></decl></parameter>,
					 <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>fieldNotNum</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>fieldMax</name></decl></parameter>,
					 <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>fieldMaxLen</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fout</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>do_header</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fout</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>PQprintOpt</name> <modifier>*</modifier></type><name>po</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>nFields</name></decl></parameter>,
					   <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>fieldMax</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>fieldNames</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>fieldNotNum</name></decl></parameter>,
					   <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>fs_len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>PGresult</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>output_row</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fout</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>PQprintOpt</name> <modifier>*</modifier></type><name>po</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>nFields</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>fields</name></decl></parameter>,
					   <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>fieldNotNum</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>fieldMax</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>border</name></decl></parameter>,
					   <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>row_index</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>fill</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>filler</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * PQprint()
 *
 * Format results of a query for printing.
 *
 * PQprintOpt is a typedef (structure) that contains
 * various flags and options. consult libpq-fe.h for
 * details
 *
 * This function should probably be removed sometime since psql
 * doesn't use it anymore. It is unclear to what extent this is used
 * by external clients, however.
 */</comment>
<function><type><name>void</name></type>
<name>PQprint</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fout</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>PGresult</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>PQprintOpt</name> <modifier>*</modifier></type><name>po</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>nFields</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>nFields</name> <operator>=</operator> <call><name>PQnfields</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>nFields</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>							<comment type="block">/* only print rows with at least 1 field.  */</comment>
		<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>,
					<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>nTups</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name>		   <modifier>*</modifier></type><name>fieldMax</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>	<comment type="block">/* in case we don't use them */</comment>
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>fieldNotNum</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>border</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	  <modifier>*</modifier><modifier>*</modifier></type><name>fields</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>fieldNames</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>fieldMaxLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>numFieldName</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>fs_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>po</name><operator>-&gt;</operator><name>fieldSep</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>total_line_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>usePipe</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>pagerenv</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_THREAD_SAFETY</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
		<decl_stmt><decl><type><name>sigset_t</name></type>	<name>osigset</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>sigpipe_masked</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>sigpipe_pending</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_THREAD_SAFETY</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
		<decl_stmt><decl><type><name>pqsigfunc</name></type>	<name>oldsigpipehandler</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TIOCGWINSZ</name></cpp:ifdef>
		<decl_stmt><decl><type><name><name>struct</name> <name>winsize</name></name></type> <name>screen_size</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<struct>struct <name>winsize</name>
		<block>{
			<decl_stmt><decl><type><name>int</name></type>			<name>ws_row</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type>			<name>ws_col</name></decl>;</decl_stmt>
		}</block>			<decl><name>screen_size</name></decl>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<expr_stmt><expr><name>nTups</name> <operator>=</operator> <call><name>PQntuples</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>fieldNames</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>nFields</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>fieldNotNum</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>nFields</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>fieldMax</name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>nFields</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fieldNames</name> <operator>||</operator> <operator>!</operator><name>fieldNotNum</name> <operator>||</operator> <operator>!</operator><name>fieldMax</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>libpq_gettext</name><argument_list>(<argument><expr><literal type="string">"out of memory\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<goto>goto <name>exit</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<for>for <control>(<init><expr><name>numFieldName</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init>
			 <condition><expr><name><name>po</name><operator>-&gt;</operator><name>fieldName</name></name> <operator>&amp;&amp;</operator> <name><name>po</name><operator>-&gt;</operator><name>fieldName</name><index>[<expr><name>numFieldName</name></expr>]</index></name></expr>;</condition>
			 <incr><expr><name>numFieldName</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<empty_stmt>;</empty_stmt></block_content></block></for>
		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>nFields</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type>			<name>len</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>j</name> <operator>&lt;</operator> <name>numFieldName</name> <operator>&amp;&amp;</operator> <name><name>po</name><operator>-&gt;</operator><name>fieldName</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then>
			<expr><name><name>po</name><operator>-&gt;</operator><name>fieldName</name><index>[<expr><name>j</name></expr>]</index></name></expr> </then><else>: <expr><call><name>PQfname</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name><name>fieldNames</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>len</name> <operator>=</operator> <ternary><condition><expr><name>s</name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fieldMax</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>fs_len</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>fieldMaxLen</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>fieldMaxLen</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>total_line_length</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
		</block_content>}</block></for>

		<expr_stmt><expr><name>total_line_length</name> <operator>+=</operator> <name>nFields</name> <operator>*</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>po</name><operator>-&gt;</operator><name>fieldSep</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>fout</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>fout</name> <operator>=</operator> <name>stdout</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>po</name><operator>-&gt;</operator><name>pager</name></name> <operator>&amp;&amp;</operator> <name>fout</name> <operator>==</operator> <name>stdout</name> <operator>&amp;&amp;</operator> <call><name>isatty</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
			<call><name>isatty</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * If we think there'll be more than one screen of output, try to
			 * pipe to the pager program.
			 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TIOCGWINSZ</name></cpp:ifdef>
			<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TIOCGWINSZ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>screen_size</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator>
				<name><name>screen_size</name><operator>.</operator><name>ws_col</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
				<name><name>screen_size</name><operator>.</operator><name>ws_row</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>screen_size</name><operator>.</operator><name>ws_row</name></name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>screen_size</name><operator>.</operator><name>ws_col</name></name> <operator>=</operator> <literal type="number">80</literal></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			<expr_stmt><expr><name><name>screen_size</name><operator>.</operator><name>ws_row</name></name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>screen_size</name><operator>.</operator><name>ws_col</name></name> <operator>=</operator> <literal type="number">80</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

			<comment type="block">/*
			 * Since this function is no longer used by psql, we don't examine
			 * PSQL_PAGER.  It's possible that the hypothetical external users
			 * of the function would like that to happen, but in the name of
			 * backwards compatibility, we'll stick to just examining PAGER.
			 */</comment>
			<expr_stmt><expr><name>pagerenv</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"PAGER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* if PAGER is unset, empty or all-white-space, don't use pager */</comment>
			<if_stmt><if>if <condition>(<expr><name>pagerenv</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
				<call><name>strspn</name><argument_list>(<argument><expr><name>pagerenv</name></expr></argument>, <argument><expr><literal type="string">" \t\r\n"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>pagerenv</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
				<operator>!</operator><name><name>po</name><operator>-&gt;</operator><name>html3</name></name> <operator>&amp;&amp;</operator>
				<operator>(</operator><operator>(</operator><name><name>po</name><operator>-&gt;</operator><name>expanded</name></name> <operator>&amp;&amp;</operator>
				  <name>nTups</name> <operator>*</operator> <operator>(</operator><name>nFields</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;=</operator> <name><name>screen_size</name><operator>.</operator><name>ws_row</name></name><operator>)</operator> <operator>||</operator>
				 <operator>(</operator><operator>!</operator><name><name>po</name><operator>-&gt;</operator><name>expanded</name></name> <operator>&amp;&amp;</operator>
				  <name>nTups</name> <operator>*</operator> <operator>(</operator><name>total_line_length</name> <operator>/</operator> <name><name>screen_size</name><operator>.</operator><name>ws_col</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator>
				  <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name><name>po</name><operator>-&gt;</operator><name>standard</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator> <operator>&gt;=</operator> <name><name>screen_size</name><operator>.</operator><name>ws_row</name></name> <operator>-</operator>
				  <operator>(</operator><name><name>po</name><operator>-&gt;</operator><name>header</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>*</operator>
				  <operator>(</operator><name>total_line_length</name> <operator>/</operator> <name><name>screen_size</name><operator>.</operator><name>ws_col</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal>
				  <operator>-</operator> <operator>(</operator><name><name>po</name><operator>-&gt;</operator><name>header</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal>	<comment type="block">/* row count and newline */</comment>
				  <operator>)</operator><operator>)</operator></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>fout</name> <operator>=</operator> <call><name>popen</name><argument_list>(<argument><expr><name>pagerenv</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>fout</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>usePipe</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_THREAD_SAFETY</name></cpp:ifdef>
					<if_stmt><if>if <condition>(<expr><call><name>pq_block_sigpipe</name><argument_list>(<argument><expr><operator>&amp;</operator><name>osigset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sigpipe_pending</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>sigpipe_masked</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
					<expr_stmt><expr><name>oldsigpipehandler</name> <operator>=</operator> <call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* ENABLE_THREAD_SAFETY */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* WIN32 */</comment>
				</block_content>}</block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>fout</name> <operator>=</operator> <name>stdout</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>po</name><operator>-&gt;</operator><name>expanded</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>po</name><operator>-&gt;</operator><name>align</name></name> <operator>||</operator> <name><name>po</name><operator>-&gt;</operator><name>html3</name></name><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>fields</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>calloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>nTups</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
									  <argument><expr><name>nFields</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fields</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>libpq_gettext</name><argument_list>(<argument><expr><literal type="string">"out of memory\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<goto>goto <name>exit</name>;</goto>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name><name>po</name><operator>-&gt;</operator><name>header</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>po</name><operator>-&gt;</operator><name>html3</name></name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>po</name><operator>-&gt;</operator><name>expanded</name></name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>po</name><operator>-&gt;</operator><name>align</name></name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fout</name></expr></argument>, <argument><expr><call><name>libpq_gettext</name><argument_list>(<argument><expr><literal type="string">"%-*s%s Value\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
							<argument><expr><name>fieldMaxLen</name> <operator>-</operator> <name>fs_len</name></expr></argument>, <argument><expr><call><name>libpq_gettext</name><argument_list>(<argument><expr><literal type="string">"Field"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>po</name><operator>-&gt;</operator><name>fieldSep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fout</name></expr></argument>, <argument><expr><call><name>libpq_gettext</name><argument_list>(<argument><expr><literal type="string">"%s%sValue\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>libpq_gettext</name><argument_list>(<argument><expr><literal type="string">"Field"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>po</name><operator>-&gt;</operator><name>fieldSep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<decl_stmt><decl><type><name>int</name></type>			<name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

				<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>nFields</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
				<block>{<block_content>
					<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>fieldNames</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

					<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>fout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>fs_len</name></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><operator>(</operator><name>j</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <name>nFields</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name><name>po</name><operator>-&gt;</operator><name>fieldSep</name></name></expr></argument>, <argument><expr><name>fout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				</block_content>}</block></for>
				<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>fout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<for>for <control>(<init><expr><name>len</name> <operator>-=</operator> <name>fs_len</name></expr>;</init> <condition><expr><name>len</name><operator>--</operator></expr>;</condition> <incr><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>, <argument><expr><name>fout</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
				<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>fout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>po</name><operator>-&gt;</operator><name>expanded</name></name> <operator>&amp;&amp;</operator> <name><name>po</name><operator>-&gt;</operator><name>html3</name></name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>po</name><operator>-&gt;</operator><name>caption</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fout</name></expr></argument>, <argument><expr><literal type="string">"&lt;center&gt;&lt;h2&gt;%s&lt;/h2&gt;&lt;/center&gt;\n"</literal></expr></argument>, <argument><expr><name><name>po</name><operator>-&gt;</operator><name>caption</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fout</name></expr></argument>,
						<argument><expr><literal type="string">"&lt;center&gt;&lt;h2&gt;"</literal>
						<literal type="string">"Query retrieved %d rows * %d fields"</literal>
						<literal type="string">"&lt;/h2&gt;&lt;/center&gt;\n"</literal></expr></argument>,
						<argument><expr><name>nTups</name></expr></argument>, <argument><expr><name>nFields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nTups</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>po</name><operator>-&gt;</operator><name>expanded</name></name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>po</name><operator>-&gt;</operator><name>html3</name></name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fout</name></expr></argument>,
							<argument><expr><literal type="string">"&lt;table %s&gt;&lt;caption align=\"top\"&gt;%d&lt;/caption&gt;\n"</literal></expr></argument>,
							<argument><expr><ternary><condition><expr><name><name>po</name><operator>-&gt;</operator><name>tableOpt</name></name></expr> ?</condition><then> <expr><name><name>po</name><operator>-&gt;</operator><name>tableOpt</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fout</name></expr></argument>, <argument><expr><call><name>libpq_gettext</name><argument_list>(<argument><expr><literal type="string">"-- RECORD %d --\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			</block_content>}</block></if></if_stmt>
			<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>nFields</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>do_field</name><argument_list>(<argument><expr><name>po</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>fs_len</name></expr></argument>, <argument><expr><name>fields</name></expr></argument>, <argument><expr><name>nFields</name></expr></argument>,
							  <argument><expr><name>fieldNames</name></expr></argument>, <argument><expr><name>fieldNotNum</name></expr></argument>,
							  <argument><expr><name>fieldMax</name></expr></argument>, <argument><expr><name>fieldMaxLen</name></expr></argument>, <argument><expr><name>fout</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<goto>goto <name>exit</name>;</goto></block_content></block></if></if_stmt>
			</block_content>}</block></for>
			<if_stmt><if>if <condition>(<expr><name><name>po</name><operator>-&gt;</operator><name>html3</name></name> <operator>&amp;&amp;</operator> <name><name>po</name><operator>-&gt;</operator><name>expanded</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"&lt;/table&gt;\n"</literal></expr></argument>, <argument><expr><name>fout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></for>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>po</name><operator>-&gt;</operator><name>expanded</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>po</name><operator>-&gt;</operator><name>align</name></name> <operator>||</operator> <name><name>po</name><operator>-&gt;</operator><name>html3</name></name><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>po</name><operator>-&gt;</operator><name>html3</name></name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>po</name><operator>-&gt;</operator><name>header</name></name></expr>)</condition>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name><name>po</name><operator>-&gt;</operator><name>caption</name></name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fout</name></expr></argument>,
								<argument><expr><literal type="string">"&lt;table %s&gt;&lt;caption align=\"top\"&gt;%s&lt;/caption&gt;\n"</literal></expr></argument>,
								<argument><expr><ternary><condition><expr><name><name>po</name><operator>-&gt;</operator><name>tableOpt</name></name></expr> ?</condition><then> <expr><name><name>po</name><operator>-&gt;</operator><name>tableOpt</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
								<argument><expr><name><name>po</name><operator>-&gt;</operator><name>caption</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
					<else>else<block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fout</name></expr></argument>,
								<argument><expr><literal type="string">"&lt;table %s&gt;&lt;caption align=\"top\"&gt;"</literal>
								<literal type="string">"Retrieved %d rows * %d fields"</literal>
								<literal type="string">"&lt;/caption&gt;\n"</literal></expr></argument>,
								<argument><expr><ternary><condition><expr><name><name>po</name><operator>-&gt;</operator><name>tableOpt</name></name></expr> ?</condition><then> <expr><name><name>po</name><operator>-&gt;</operator><name>tableOpt</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>nTups</name></expr></argument>, <argument><expr><name>nFields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
				</block_content>}</block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fout</name></expr></argument>, <argument><expr><literal type="string">"&lt;table %s&gt;"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>po</name><operator>-&gt;</operator><name>tableOpt</name></name></expr> ?</condition><then> <expr><name><name>po</name><operator>-&gt;</operator><name>tableOpt</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>po</name><operator>-&gt;</operator><name>header</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>border</name> <operator>=</operator> <call><name>do_header</name><argument_list>(<argument><expr><name>fout</name></expr></argument>, <argument><expr><name>po</name></expr></argument>, <argument><expr><name>nFields</name></expr></argument>, <argument><expr><name>fieldMax</name></expr></argument>, <argument><expr><name>fieldNames</name></expr></argument>,
								   <argument><expr><name>fieldNotNum</name></expr></argument>, <argument><expr><name>fs_len</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nTups</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>output_row</name><argument_list>(<argument><expr><name>fout</name></expr></argument>, <argument><expr><name>po</name></expr></argument>, <argument><expr><name>nFields</name></expr></argument>, <argument><expr><name>fields</name></expr></argument>,
						   <argument><expr><name>fieldNotNum</name></expr></argument>, <argument><expr><name>fieldMax</name></expr></argument>, <argument><expr><name>border</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>po</name><operator>-&gt;</operator><name>header</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>po</name><operator>-&gt;</operator><name>html3</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fout</name></expr></argument>, <argument><expr><literal type="string">"(%d row%s)\n\n"</literal></expr></argument>, <argument><expr><call><name>PQntuples</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>,
					<argument><expr><ternary><condition><expr><operator>(</operator><call><name>PQntuples</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"s"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>po</name><operator>-&gt;</operator><name>html3</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>po</name><operator>-&gt;</operator><name>expanded</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"&lt;/table&gt;\n"</literal></expr></argument>, <argument><expr><name>fout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>exit</name>:</label>
		<if_stmt><if>if <condition>(<expr><name>fieldMax</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>fieldMax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>fieldNotNum</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>fieldNotNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>border</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>border</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>fields</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* if calloc succeeded, this shouldn't overflow size_t */</comment>
			<decl_stmt><decl><type><name>size_t</name></type>		<name>numfields</name> <init>= <expr><operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator> <name>nTups</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>nFields</name></expr></init></decl>;</decl_stmt>

			<while>while <condition>(<expr><name>numfields</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>fields</name><index>[<expr><name>numfields</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>fields</name><index>[<expr><name>numfields</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></while>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>fieldNames</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>fieldNames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>usePipe</name></expr>)</condition>
		<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
			<expr_stmt><expr><call><name>_pclose</name><argument_list>(<argument><expr><name>fout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			<expr_stmt><expr><call><name>pclose</name><argument_list>(<argument><expr><name>fout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_THREAD_SAFETY</name></cpp:ifdef>
			<comment type="block">/* we can't easily verify if EPIPE occurred, so say it did */</comment>
			<if_stmt><if>if <condition>(<expr><name>sigpipe_masked</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>pq_reset_sigpipe</name><argument_list>(<argument><expr><operator>&amp;</operator><name>osigset</name></expr></argument>, <argument><expr><name>sigpipe_pending</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			<expr_stmt><expr><call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>, <argument><expr><name>oldsigpipehandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* ENABLE_THREAD_SAFETY */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* WIN32 */</comment>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type>
<name>do_field</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PQprintOpt</name> <modifier>*</modifier></type><name>po</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>PGresult</name> <modifier>*</modifier></type><name>res</name></decl></parameter>,
		 <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>j</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>fs_len</name></decl></parameter>,
		 <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>fields</name></decl></parameter>,
		 <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>nFields</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier><modifier>*</modifier></type><name>fieldNames</name></decl></parameter>,
		 <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>fieldNotNum</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>fieldMax</name></decl></parameter>,
		 <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>fieldMaxLen</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pval</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>plen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>skipit</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>plen</name> <operator>=</operator> <call><name>PQgetlength</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pval</name> <operator>=</operator> <call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>plen</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><name>pval</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>pval</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>po</name><operator>-&gt;</operator><name>align</name></name> <operator>||</operator> <name><name>po</name><operator>-&gt;</operator><name>expanded</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>skipit</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>skipit</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<goto>goto <name>efield</name>;</goto>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>skipit</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>skipit</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>po</name><operator>-&gt;</operator><name>align</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>fieldNotNum</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Detect whether field contains non-numeric data */</comment>
			<decl_stmt><decl><type><name>char</name></type>		<name>ch</name> <init>= <expr><literal type="char">'0'</literal></expr></init></decl>;</decl_stmt>

			<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>pval</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>+=</operator> <call><name>PQmblenBounded</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>client_encoding</name></name></expr></argument>)</argument_list></call></expr></incr>)</control>
			<block>{<block_content>
				<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>ch</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator> <operator>||</operator>
					  <name>ch</name> <operator>==</operator> <literal type="char">'.'</literal> <operator>||</operator>
					  <name>ch</name> <operator>==</operator> <literal type="char">'E'</literal> <operator>||</operator>
					  <name>ch</name> <operator>==</operator> <literal type="char">'e'</literal> <operator>||</operator>
					  <name>ch</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator>
					  <name>ch</name> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name><name>fieldNotNum</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>

			<comment type="block">/*
			 * Above loop will believe E in first column is numeric; also, we
			 * insist on a digit in the last column for a numeric. This test
			 * is still not bulletproof but it handles most cases.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pval</name> <operator>==</operator> <literal type="char">'E'</literal> <operator>||</operator> <operator>*</operator><name>pval</name> <operator>==</operator> <literal type="char">'e'</literal> <operator>||</operator>
				<operator>!</operator><operator>(</operator><name>ch</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>fieldNotNum</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>po</name><operator>-&gt;</operator><name>expanded</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>po</name><operator>-&gt;</operator><name>align</name></name> <operator>||</operator> <name><name>po</name><operator>-&gt;</operator><name>html3</name></name><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>plen</name> <operator>&gt;</operator> <name><name>fieldMax</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>fieldMax</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>plen</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>fields</name><index>[<expr><name>i</name> <operator>*</operator> <name>nFields</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>plen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>libpq_gettext</name><argument_list>(<argument><expr><literal type="string">"out of memory\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>false</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>fields</name><index>[<expr><name>i</name> <operator>*</operator> <name>nFields</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>pval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>po</name><operator>-&gt;</operator><name>expanded</name></name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>po</name><operator>-&gt;</operator><name>html3</name></name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fout</name></expr></argument>,
							<argument><expr><literal type="string">"&lt;tr&gt;&lt;td align=\"left\"&gt;&lt;b&gt;%s&lt;/b&gt;&lt;/td&gt;"</literal>
							<literal type="string">"&lt;td align=\"%s\"&gt;%s&lt;/td&gt;&lt;/tr&gt;\n"</literal></expr></argument>,
							<argument><expr><name><name>fieldNames</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,
							<argument><expr><ternary><condition><expr><name><name>fieldNotNum</name><index>[<expr><name>j</name></expr>]</index></name></expr> ?</condition><then> <expr><literal type="string">"left"</literal></expr> </then><else>: <expr><literal type="string">"right"</literal></expr></else></ternary></expr></argument>,
							<argument><expr><name>pval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<else>else
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name><name>po</name><operator>-&gt;</operator><name>align</name></name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fout</name></expr></argument>,
								<argument><expr><literal type="string">"%-*s%s %s\n"</literal></expr></argument>,
								<argument><expr><name>fieldMaxLen</name> <operator>-</operator> <name>fs_len</name></expr></argument>, <argument><expr><name><name>fieldNames</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,
								<argument><expr><name><name>po</name><operator>-&gt;</operator><name>fieldSep</name></name></expr></argument>,
								<argument><expr><name>pval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
					<else>else<block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fout</name></expr></argument>,
								<argument><expr><literal type="string">"%s%s%s\n"</literal></expr></argument>,
								<argument><expr><name><name>fieldNames</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>po</name><operator>-&gt;</operator><name>fieldSep</name></name></expr></argument>, <argument><expr><name>pval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>po</name><operator>-&gt;</operator><name>html3</name></name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>pval</name></expr></argument>, <argument><expr><name>fout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<label><name>efield</name>:</label>
					<if_stmt><if>if <condition>(<expr><operator>(</operator><name>j</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <name>nFields</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name><name>po</name><operator>-&gt;</operator><name>fieldSep</name></name></expr></argument>, <argument><expr><name>fout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
					<else>else<block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>fout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>do_header</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fout</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>PQprintOpt</name> <modifier>*</modifier></type><name>po</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>nFields</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>fieldMax</name></decl></parameter>,
		  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>fieldNames</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>fieldNotNum</name></decl></parameter>,
		  <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>fs_len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>PGresult</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>j</name></decl>;</decl_stmt>				<comment type="block">/* for loop index */</comment>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>border</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>po</name><operator>-&gt;</operator><name>html3</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"&lt;tr&gt;"</literal></expr></argument>, <argument><expr><name>fout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>tot</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

		<for>for <control>(<init>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>nFields</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><name>tot</name> <operator>+=</operator> <name><name>fieldMax</name><index>[<expr><name>n</name></expr>]</index></name> <operator>+</operator> <name>fs_len</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name><name>po</name><operator>-&gt;</operator><name>standard</name></name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
		<if_stmt><if>if <condition>(<expr><name><name>po</name><operator>-&gt;</operator><name>standard</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>tot</name> <operator>+=</operator> <name>fs_len</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>border</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>tot</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>border</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>libpq_gettext</name><argument_list>(<argument><expr><literal type="string">"out of memory\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>NULL</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>p</name> <operator>=</operator> <name>border</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>po</name><operator>-&gt;</operator><name>standard</name></name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>fs</name> <init>= <expr><name><name>po</name><operator>-&gt;</operator><name>fieldSep</name></name></expr></init></decl>;</decl_stmt>

			<while>while <condition>(<expr><operator>*</operator><name>fs</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'+'</literal></expr>;</expr_stmt></block_content></block></while>
		</block_content>}</block></if></if_stmt>
		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>nFields</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type>			<name>len</name></decl>;</decl_stmt>

			<for>for <control>(<init><expr><name>len</name> <operator>=</operator> <name><name>fieldMax</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name><name>po</name><operator>-&gt;</operator><name>standard</name></name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</init> <condition><expr><name>len</name><operator>--</operator></expr>;</condition> <incr><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'-'</literal></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
			<if_stmt><if>if <condition>(<expr><name><name>po</name><operator>-&gt;</operator><name>standard</name></name> <operator>||</operator> <operator>(</operator><name>j</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <name>nFields</name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>fs</name> <init>= <expr><name><name>po</name><operator>-&gt;</operator><name>fieldSep</name></name></expr></init></decl>;</decl_stmt>

				<while>while <condition>(<expr><operator>*</operator><name>fs</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'+'</literal></expr>;</expr_stmt></block_content></block></while>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>po</name><operator>-&gt;</operator><name>standard</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fout</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>border</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>po</name><operator>-&gt;</operator><name>standard</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name><name>po</name><operator>-&gt;</operator><name>fieldSep</name></name></expr></argument>, <argument><expr><name>fout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>nFields</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>PQfname</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>po</name><operator>-&gt;</operator><name>html3</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fout</name></expr></argument>, <argument><expr><literal type="string">"&lt;th align=\"%s\"&gt;%s&lt;/th&gt;"</literal></expr></argument>,
					<argument><expr><ternary><condition><expr><name><name>fieldNotNum</name><index>[<expr><name>j</name></expr>]</index></name></expr> ?</condition><then> <expr><literal type="string">"left"</literal></expr> </then><else>: <expr><literal type="string">"right"</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>fieldNames</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type>			<name>n</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name><name>fieldMax</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>fieldMax</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>po</name><operator>-&gt;</operator><name>standard</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fout</name></expr></argument>,
						<argument><expr><ternary><condition><expr><name><name>fieldNotNum</name><index>[<expr><name>j</name></expr>]</index></name></expr> ?</condition><then> <expr><literal type="string">" %-*s "</literal></expr> </then><else>: <expr><literal type="string">" %*s "</literal></expr></else></ternary></expr></argument>,
						<argument><expr><name><name>fieldMax</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fout</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>fieldNotNum</name><index>[<expr><name>j</name></expr>]</index></name></expr> ?</condition><then> <expr><literal type="string">"%-*s"</literal></expr> </then><else>: <expr><literal type="string">"%*s"</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>fieldMax</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>po</name><operator>-&gt;</operator><name>standard</name></name> <operator>||</operator> <operator>(</operator><name>j</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <name>nFields</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name><name>po</name><operator>-&gt;</operator><name>fieldSep</name></name></expr></argument>, <argument><expr><name>fout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>
	<if_stmt><if>if <condition>(<expr><name><name>po</name><operator>-&gt;</operator><name>html3</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"&lt;/tr&gt;\n"</literal></expr></argument>, <argument><expr><name>fout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fout</name></expr></argument>, <argument><expr><literal type="string">"\n%s\n"</literal></expr></argument>, <argument><expr><name>border</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<return>return <expr><name>border</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>output_row</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fout</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>PQprintOpt</name> <modifier>*</modifier></type><name>po</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>nFields</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>fields</name></decl></parameter>,
		   <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>fieldNotNum</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>fieldMax</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>border</name></decl></parameter>,
		   <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>row_index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>field_index</name></decl>;</decl_stmt>	<comment type="block">/* for loop index */</comment>

	<if_stmt><if>if <condition>(<expr><name><name>po</name><operator>-&gt;</operator><name>html3</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"&lt;tr&gt;"</literal></expr></argument>, <argument><expr><name>fout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>po</name><operator>-&gt;</operator><name>standard</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name><name>po</name><operator>-&gt;</operator><name>fieldSep</name></name></expr></argument>, <argument><expr><name>fout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<for>for <control>(<init><expr><name>field_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>field_index</name> <operator>&lt;</operator> <name>nFields</name></expr>;</condition> <incr><expr><name>field_index</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>fields</name><index>[<expr><name>row_index</name> <operator>*</operator> <name>nFields</name> <operator>+</operator> <name>field_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>po</name><operator>-&gt;</operator><name>html3</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fout</name></expr></argument>, <argument><expr><literal type="string">"&lt;td align=\"%s\"&gt;%s&lt;/td&gt;"</literal></expr></argument>,
					<argument><expr><ternary><condition><expr><name><name>fieldNotNum</name><index>[<expr><name>field_index</name></expr>]</index></name></expr> ?</condition><then> <expr><literal type="string">"left"</literal></expr> </then><else>: <expr><literal type="string">"right"</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fout</name></expr></argument>,
					<argument><expr><ternary><condition><expr><name><name>fieldNotNum</name><index>[<expr><name>field_index</name></expr>]</index></name></expr> ?</condition><then>
					<expr><operator>(</operator><ternary><condition><expr><name><name>po</name><operator>-&gt;</operator><name>standard</name></name></expr> ?</condition><then> <expr><literal type="string">" %-*s "</literal></expr> </then><else>: <expr><literal type="string">"%-*s"</literal></expr></else></ternary><operator>)</operator></expr> </then><else>:
					<expr><operator>(</operator><ternary><condition><expr><name><name>po</name><operator>-&gt;</operator><name>standard</name></name></expr> ?</condition><then> <expr><literal type="string">" %*s "</literal></expr> </then><else>: <expr><literal type="string">"%*s"</literal></expr></else></ternary><operator>)</operator></expr></else></ternary></expr></argument>,
					<argument><expr><name><name>fieldMax</name><index>[<expr><name>field_index</name></expr>]</index></name></expr></argument>,
					<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>po</name><operator>-&gt;</operator><name>standard</name></name> <operator>||</operator> <name>field_index</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>nFields</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name><name>po</name><operator>-&gt;</operator><name>fieldSep</name></name></expr></argument>, <argument><expr><name>fout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>
	<if_stmt><if>if <condition>(<expr><name><name>po</name><operator>-&gt;</operator><name>html3</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"&lt;/tr&gt;"</literal></expr></argument>, <argument><expr><name>fout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>po</name><operator>-&gt;</operator><name>standard</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fout</name></expr></argument>, <argument><expr><literal type="string">"\n%s"</literal></expr></argument>, <argument><expr><name>border</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>fout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<comment type="block">/*
 * really old printing routines
 */</comment>

<function><type><name>void</name></type>
<name>PQdisplayTuples</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PGresult</name> <modifier>*</modifier></type><name>res</name></decl></parameter>,
				<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>,		<comment type="block">/* where to send the output */</comment>
				<parameter><decl><type><name>int</name></type> <name>fillAlign</name></decl></parameter>,	<comment type="block">/* pad the fields with spaces */</comment>
				<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fieldSep</name></decl></parameter>,	<comment type="block">/* field separator */</comment>
				<parameter><decl><type><name>int</name></type> <name>printHeader</name></decl></parameter>,	<comment type="block">/* display headers? */</comment>
				<parameter><decl><type><name>int</name></type> <name>quiet</name></decl></parameter>
)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_FIELD_SEP</name></cpp:macro> <cpp:value>" "</cpp:value></cpp:define>

	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>,
				<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>nFields</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>nTuples</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name>		   <modifier>*</modifier></type><name>fLength</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fieldSep</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>fieldSep</name> <operator>=</operator> <name>DEFAULT_FIELD_SEP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Get some useful info about the results */</comment>
	<expr_stmt><expr><name>nFields</name> <operator>=</operator> <call><name>PQnfields</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>nTuples</name> <operator>=</operator> <call><name>PQntuples</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>fp</name> <operator>=</operator> <name>stdout</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Figure the field lengths to align to */</comment>
	<comment type="block">/* will be somewhat time consuming for very large results */</comment>
	<if_stmt><if>if <condition>(<expr><name>fillAlign</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>fLength</name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>nFields</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fLength</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>libpq_gettext</name><argument_list>(<argument><expr><literal type="string">"out of memory\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>

		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>nFields</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><name><name>fLength</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><call><name>PQfname</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nTuples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<decl_stmt><decl><type><name>int</name></type>			<name>flen</name> <init>= <expr><call><name>PQgetlength</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><name>flen</name> <operator>&gt;</operator> <name><name>fLength</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>fLength</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>flen</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></for>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>printHeader</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* first, print out the attribute names */</comment>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nFields</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><call><name>PQfname</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>fillAlign</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>fill</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><call><name>PQfname</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>fLength</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>fieldSep</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Underline the attribute names */</comment>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nFields</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>fillAlign</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>fill</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>fLength</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>fieldSep</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* next, print out the instances */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nTuples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>nFields</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>fillAlign</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>fill</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>fLength</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>fieldSep</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\nQuery returned %d row%s.\n"</literal></expr></argument>, <argument><expr><call><name>PQntuples</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><ternary><condition><expr><operator>(</operator><call><name>PQntuples</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"s"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>fLength</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>fLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>



<function><type><name>void</name></type>
<name>PQprintTuples</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PGresult</name> <modifier>*</modifier></type><name>res</name></decl></parameter>,
			  <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fout</name></decl></parameter>,		<comment type="block">/* output stream */</comment>
			  <parameter><decl><type><name>int</name></type> <name>PrintAttNames</name></decl></parameter>,	<comment type="block">/* print attribute names or not */</comment>
			  <parameter><decl><type><name>int</name></type> <name>TerseOutput</name></decl></parameter>,	<comment type="block">/* delimiter bars or not? */</comment>
			  <parameter><decl><type><name>int</name></type> <name>colWidth</name></decl></parameter>		<comment type="block">/* width of column, if 0, use variable width */</comment>
)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>nFields</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>nTups</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>,
				<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>formatString</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>tborder</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>nFields</name> <operator>=</operator> <call><name>PQnfields</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>nTups</name> <operator>=</operator> <call><name>PQntuples</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>colWidth</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>formatString</name></expr></argument>, <argument><expr><literal type="string">"%%s %%-%ds"</literal></expr></argument>, <argument><expr><name>colWidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>formatString</name></expr></argument>, <argument><expr><literal type="string">"%%s %%s"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>nFields</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>							<comment type="block">/* only print rows with at least 1 field.  */</comment>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>TerseOutput</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type>			<name>width</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>width</name> <operator>=</operator> <name>nFields</name> <operator>*</operator> <literal type="number">14</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>tborder</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>width</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tborder</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>libpq_gettext</name><argument_list>(<argument><expr><literal type="string">"out of memory\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return;</return>
			</block_content>}</block></if></if_stmt>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>tborder</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt></block_content></block></for>
			<expr_stmt><expr><name><name>tborder</name><index>[<expr><name>width</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fout</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>tborder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nFields</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>PrintAttNames</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fout</name></expr></argument>, <argument><expr><name>formatString</name></expr></argument>,
						<argument><expr><ternary><condition><expr><name>TerseOutput</name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"|"</literal></expr></else></ternary></expr></argument>,
						<argument><expr><call><name>PQfname</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>

		<if_stmt><if>if <condition>(<expr><name>PrintAttNames</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>TerseOutput</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fout</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fout</name></expr></argument>, <argument><expr><literal type="string">"|\n%s\n"</literal></expr></argument>, <argument><expr><name>tborder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if></if_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nTups</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>nFields</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pval</name> <init>= <expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fout</name></expr></argument>, <argument><expr><name>formatString</name></expr></argument>,
						<argument><expr><ternary><condition><expr><name>TerseOutput</name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"|"</literal></expr></else></ternary></expr></argument>,
						<argument><expr><ternary><condition><expr><name>pval</name></expr> ?</condition><then> <expr><name>pval</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
			<if_stmt><if>if <condition>(<expr><name>TerseOutput</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fout</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fout</name></expr></argument>, <argument><expr><literal type="string">"|\n%s\n"</literal></expr></argument>, <argument><expr><name>tborder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>tborder</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tborder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/* simply send out max-length number of filler characters to fp */</comment>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>fill</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>filler</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>count</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>count</name> <operator>=</operator> <name>max</name> <operator>-</operator> <name>length</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>count</name><operator>--</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><name>filler</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>
</unit>
