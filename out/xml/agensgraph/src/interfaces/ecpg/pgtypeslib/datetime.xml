<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/interfaces/ecpg/pgtypeslib/datetime.c"><comment type="block">/* src/interfaces/ecpg/pgtypeslib/datetime.c */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgtypes_date.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgtypes_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgtypeslib_extern.h"</cpp:file></cpp:include>

<function><type><name>date</name> <modifier>*</modifier></type>
<name>PGTYPESdate_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>date</name>	   <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>date</name> <operator>*</operator><operator>)</operator> <call><name>pgtypes_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* result can be NULL if we run out of memory */</comment>
	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>PGTYPESdate_free</name><parameter_list>(<parameter><decl><type><name>date</name> <modifier>*</modifier></type> <name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>date</name></type>
<name>PGTYPESdate_from_timestamp</name><parameter_list>(<parameter><decl><type><name>timestamp</name></type> <name>dt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>date</name></type>		<name>dDate</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>dDate</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>					<comment type="block">/* suppress compiler warning */</comment>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TIMESTAMP_NOT_FINITE</name><argument_list>(<argument><expr><name>dt</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Microseconds to days */</comment>
		<expr_stmt><expr><name>dDate</name> <operator>=</operator> <operator>(</operator><name>dt</name> <operator>/</operator> <name>USECS_PER_DAY</name><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>dDate</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>date</name></type>
<name>PGTYPESdate_from_asc</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>endptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>date</name></type>		<name>dDate</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>fsec_t</name></type>		<name>fsec</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type>	<name>tt</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>tm</name> <init>= <expr><operator>&amp;</operator><name>tt</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>dtype</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>nf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name><name>field</name><index>[<expr><name>MAXDATEFIELDS</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name><name>ftype</name><index>[<expr><name>MAXDATEFIELDS</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>lowstr</name><index>[<expr><name>MAXDATELEN</name> <operator>+</operator> <name>MAXDATEFIELDS</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>realptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	  <modifier>*</modifier><modifier>*</modifier></type><name>ptr</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>endptr</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>endptr</name></expr> </then><else>: <expr><operator>&amp;</operator><name>realptr</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>bool</name></type>		<name>EuroDates</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>MAXDATELEN</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>PGTYPES_DATE_BAD_DATE</name></expr>;</expr_stmt>
		<return>return <expr><name>INT_MIN</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>ParseDateTime</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>lowstr</name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><name>ftype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nf</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
		<call><name>DecodeDateTime</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>ftype</name></expr></argument>, <argument><expr><name>nf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dtype</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fsec</name></expr></argument>, <argument><expr><name>EuroDates</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>PGTYPES_DATE_BAD_DATE</name></expr>;</expr_stmt>
		<return>return <expr><name>INT_MIN</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<switch>switch <condition>(<expr><name>dtype</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>DTK_DATE</name></expr>:</case>
			<break>break;</break>

		<case>case <expr><name>DTK_EPOCH</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><call><name>GetEpochTime</name><argument_list>(<argument><expr><name>tm</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>PGTYPES_DATE_BAD_DATE</name></expr>;</expr_stmt>
				<return>return <expr><name>INT_MIN</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>

		<default>default:</default>
			<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>PGTYPES_DATE_BAD_DATE</name></expr>;</expr_stmt>
			<return>return <expr><name>INT_MIN</name></expr>;</return>
	</block_content>}</block></switch>

	<expr_stmt><expr><name>dDate</name> <operator>=</operator> <operator>(</operator><call><name>date2j</name><argument_list>(<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>date2j</name><argument_list>(<argument><expr><literal type="number">2000</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

	<return>return <expr><name>dDate</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>PGTYPESdate_to_asc</name><parameter_list>(<parameter><decl><type><name>date</name></type> <name>dDate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type>	<name>tt</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>tm</name> <init>= <expr><operator>&amp;</operator><name>tt</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>buf</name><index>[<expr><name>MAXDATELEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>DateStyle</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>EuroDates</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>j2date</name><argument_list>(<argument><expr><name>dDate</name> <operator>+</operator> <call><name>date2j</name><argument_list>(<argument><expr><literal type="number">2000</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EncodeDateOnly</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><name>DateStyle</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>EuroDates</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>pgtypes_strdup</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>PGTYPESdate_julmdy</name><parameter_list>(<parameter><decl><type><name>date</name></type> <name>jd</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>mdy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>y</name></decl>,
				<decl><type ref="prev"/><name>m</name></decl>,
				<decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>j2date</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>jd</name> <operator>+</operator> <call><name>date2j</name><argument_list>(<argument><expr><literal type="number">2000</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mdy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mdy</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mdy</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>PGTYPESdate_mdyjul</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>mdy</name></decl></parameter>, <parameter><decl><type><name>date</name> <modifier>*</modifier></type> <name>jdate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* month is mdy[0] */</comment>
	<comment type="block">/* day	 is mdy[1] */</comment>
	<comment type="block">/* year  is mdy[2] */</comment>

	<expr_stmt><expr><operator>*</operator><name>jdate</name> <operator>=</operator> <operator>(</operator><name>date</name><operator>)</operator> <operator>(</operator><call><name>date2j</name><argument_list>(<argument><expr><name><name>mdy</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>mdy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>mdy</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>date2j</name><argument_list>(<argument><expr><literal type="number">2000</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>PGTYPESdate_dayofweek</name><parameter_list>(<parameter><decl><type><name>date</name></type> <name>dDate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * Sunday:	0 Monday:	   1 Tuesday:	  2 Wednesday:	 3 Thursday: 4
	 * Friday:		5 Saturday:    6
	 */</comment>
	<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>dDate</name> <operator>+</operator> <call><name>date2j</name><argument_list>(<argument><expr><literal type="number">2000</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">7</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>PGTYPESdate_today</name><parameter_list>(<parameter><decl><type><name>date</name> <modifier>*</modifier></type> <name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type>	<name>ts</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>GetCurrentDateTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <call><name>date2j</name><argument_list>(<argument><expr><name><name>ts</name><operator>.</operator><name>tm_year</name></name></expr></argument>, <argument><expr><name><name>ts</name><operator>.</operator><name>tm_mon</name></name></expr></argument>, <argument><expr><name><name>ts</name><operator>.</operator><name>tm_mday</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>date2j</name><argument_list>(<argument><expr><literal type="number">2000</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PGTYPES_DATE_NUM_MAX_DIGITS</name></cpp:macro>		<cpp:value>20</cpp:value></cpp:define>	<comment type="block">/* should suffice for most
											 * years... */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PGTYPES_FMTDATE_DAY_DIGITS_LZ</name></cpp:macro>		<cpp:value>1</cpp:value></cpp:define>	<comment type="block">/* LZ means "leading zeroes" */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PGTYPES_FMTDATE_DOW_LITERAL_SHORT</name></cpp:macro>	<cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PGTYPES_FMTDATE_MONTH_DIGITS_LZ</name></cpp:macro>		<cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PGTYPES_FMTDATE_MONTH_LITERAL_SHORT</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PGTYPES_FMTDATE_YEAR_DIGITS_SHORT</name></cpp:macro>	<cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PGTYPES_FMTDATE_YEAR_DIGITS_LONG</name></cpp:macro>	<cpp:value>6</cpp:value></cpp:define>

<function><type><name>int</name></type>
<name>PGTYPESdate_fmt_asc</name><parameter_list>(<parameter><decl><type><name>date</name></type> <name>dDate</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmtstring</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>outbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<struct><specifier>static</specifier> struct
	<block>{
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>format</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>component</name></decl>;</decl_stmt>
	}</block>			<decl><name><name>mapping</name><index>[]</index></name> <init>=
	<expr><block>{
		<comment type="block">/*
		 * format items have to be sorted according to their length, since the
		 * first pattern that matches gets replaced by its value
		 */</comment>
		<expr><block>{
			<expr><literal type="string">"ddd"</literal></expr>, <expr><name>PGTYPES_FMTDATE_DOW_LITERAL_SHORT</name></expr>
		}</block></expr>,
		<expr><block>{
			<expr><literal type="string">"dd"</literal></expr>, <expr><name>PGTYPES_FMTDATE_DAY_DIGITS_LZ</name></expr>
		}</block></expr>,
		<expr><block>{
			<expr><literal type="string">"mmm"</literal></expr>, <expr><name>PGTYPES_FMTDATE_MONTH_LITERAL_SHORT</name></expr>
		}</block></expr>,
		<expr><block>{
			<expr><literal type="string">"mm"</literal></expr>, <expr><name>PGTYPES_FMTDATE_MONTH_DIGITS_LZ</name></expr>
		}</block></expr>,
		<expr><block>{
			<expr><literal type="string">"yyyy"</literal></expr>, <expr><name>PGTYPES_FMTDATE_YEAR_DIGITS_LONG</name></expr>
		}</block></expr>,
		<expr><block>{
			<expr><literal type="string">"yy"</literal></expr>, <expr><name>PGTYPES_FMTDATE_YEAR_DIGITS_SHORT</name></expr>
		}</block></expr>,
		<expr><block>{
			<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>
		}</block></expr>
	}</block></expr></init></decl>;</struct>

	<decl_stmt><decl><type><name><name>union</name> <name>un_fmt_comb</name></name></type> <name>replace_val</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>replace_type</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>dow</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>start_pattern</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type>	<name>tm</name></decl>;</decl_stmt>

	<comment type="block">/* copy the string over */</comment>
	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>outbuf</name></expr></argument>, <argument><expr><name>fmtstring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* get the date */</comment>
	<expr_stmt><expr><call><name>j2date</name><argument_list>(<argument><expr><name>dDate</name> <operator>+</operator> <call><name>date2j</name><argument_list>(<argument><expr><literal type="number">2000</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>tm</name><operator>.</operator><name>tm_year</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>tm</name><operator>.</operator><name>tm_mon</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>tm</name><operator>.</operator><name>tm_mday</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>dow</name> <operator>=</operator> <call><name>PGTYPESdate_dayofweek</name><argument_list>(<argument><expr><name>dDate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>mapping</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>format</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<while>while <condition>(<expr><operator>(</operator><name>start_pattern</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>outbuf</name></expr></argument>, <argument><expr><name><name>mapping</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>format</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<switch>switch <condition>(<expr><name><name>mapping</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>component</name></expr>)</condition>
			<block>{<block_content>
				<case>case <expr><name>PGTYPES_FMTDATE_DOW_LITERAL_SHORT</name></expr>:</case>
					<expr_stmt><expr><name><name>replace_val</name><operator>.</operator><name>str_val</name></name> <operator>=</operator> <name><name>pgtypes_date_weekdays_short</name><index>[<expr><name>dow</name></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name>replace_type</name> <operator>=</operator> <name>PGTYPES_TYPE_STRING_CONSTANT</name></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name>PGTYPES_FMTDATE_DAY_DIGITS_LZ</name></expr>:</case>
					<expr_stmt><expr><name><name>replace_val</name><operator>.</operator><name>uint_val</name></name> <operator>=</operator> <name><name>tm</name><operator>.</operator><name>tm_mday</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name>replace_type</name> <operator>=</operator> <name>PGTYPES_TYPE_UINT_2_LZ</name></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name>PGTYPES_FMTDATE_MONTH_LITERAL_SHORT</name></expr>:</case>
					<expr_stmt><expr><name><name>replace_val</name><operator>.</operator><name>str_val</name></name> <operator>=</operator> <name><name>months</name><index>[<expr><name><name>tm</name><operator>.</operator><name>tm_mon</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name>replace_type</name> <operator>=</operator> <name>PGTYPES_TYPE_STRING_CONSTANT</name></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name>PGTYPES_FMTDATE_MONTH_DIGITS_LZ</name></expr>:</case>
					<expr_stmt><expr><name><name>replace_val</name><operator>.</operator><name>uint_val</name></name> <operator>=</operator> <name><name>tm</name><operator>.</operator><name>tm_mon</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name>replace_type</name> <operator>=</operator> <name>PGTYPES_TYPE_UINT_2_LZ</name></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name>PGTYPES_FMTDATE_YEAR_DIGITS_LONG</name></expr>:</case>
					<expr_stmt><expr><name><name>replace_val</name><operator>.</operator><name>uint_val</name></name> <operator>=</operator> <name><name>tm</name><operator>.</operator><name>tm_year</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name>replace_type</name> <operator>=</operator> <name>PGTYPES_TYPE_UINT_4_LZ</name></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name>PGTYPES_FMTDATE_YEAR_DIGITS_SHORT</name></expr>:</case>
					<expr_stmt><expr><name><name>replace_val</name><operator>.</operator><name>uint_val</name></name> <operator>=</operator> <name><name>tm</name><operator>.</operator><name>tm_year</name></name> <operator>%</operator> <literal type="number">100</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>replace_type</name> <operator>=</operator> <name>PGTYPES_TYPE_UINT_2_LZ</name></expr>;</expr_stmt>
					<break>break;</break>
				<default>default:</default>

					<comment type="block">/*
					 * should not happen, set something anyway
					 */</comment>
					<expr_stmt><expr><name><name>replace_val</name><operator>.</operator><name>str_val</name></name> <operator>=</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>replace_type</name> <operator>=</operator> <name>PGTYPES_TYPE_STRING_CONSTANT</name></expr>;</expr_stmt>
			</block_content>}</block></switch>
			<switch>switch <condition>(<expr><name>replace_type</name></expr>)</condition>
			<block>{<block_content>
				<case>case <expr><name>PGTYPES_TYPE_STRING_MALLOCED</name></expr>:</case>
				<case>case <expr><name>PGTYPES_TYPE_STRING_CONSTANT</name></expr>:</case>
					<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>start_pattern</name></expr></argument>, <argument><expr><name><name>replace_val</name><operator>.</operator><name>str_val</name></name></expr></argument>,
						   <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>replace_val</name><operator>.</operator><name>str_val</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name>replace_type</name> <operator>==</operator> <name>PGTYPES_TYPE_STRING_MALLOCED</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>replace_val</name><operator>.</operator><name>str_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
					<break>break;</break>
				<case>case <expr><name>PGTYPES_TYPE_UINT</name></expr>:</case>
					<block>{<block_content>
						<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>t</name> <init>= <expr><call><name>pgtypes_alloc</name><argument_list>(<argument><expr><name>PGTYPES_DATE_NUM_MAX_DIGITS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

						<if_stmt><if>if <condition>(<expr><operator>!</operator><name>t</name></expr>)</condition><block type="pseudo"><block_content>
							<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
						<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>PGTYPES_DATE_NUM_MAX_DIGITS</name></expr></argument>,
								 <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><name><name>replace_val</name><operator>.</operator><name>uint_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>start_pattern</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block>
					<break>break;</break>
				<case>case <expr><name>PGTYPES_TYPE_UINT_2_LZ</name></expr>:</case>
					<block>{<block_content>
						<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>t</name> <init>= <expr><call><name>pgtypes_alloc</name><argument_list>(<argument><expr><name>PGTYPES_DATE_NUM_MAX_DIGITS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

						<if_stmt><if>if <condition>(<expr><operator>!</operator><name>t</name></expr>)</condition><block type="pseudo"><block_content>
							<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
						<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>PGTYPES_DATE_NUM_MAX_DIGITS</name></expr></argument>,
								 <argument><expr><literal type="string">"%02u"</literal></expr></argument>, <argument><expr><name><name>replace_val</name><operator>.</operator><name>uint_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>start_pattern</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block>
					<break>break;</break>
				<case>case <expr><name>PGTYPES_TYPE_UINT_4_LZ</name></expr>:</case>
					<block>{<block_content>
						<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>t</name> <init>= <expr><call><name>pgtypes_alloc</name><argument_list>(<argument><expr><name>PGTYPES_DATE_NUM_MAX_DIGITS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

						<if_stmt><if>if <condition>(<expr><operator>!</operator><name>t</name></expr>)</condition><block type="pseudo"><block_content>
							<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
						<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>PGTYPES_DATE_NUM_MAX_DIGITS</name></expr></argument>,
								 <argument><expr><literal type="string">"%04u"</literal></expr></argument>, <argument><expr><name><name>replace_val</name><operator>.</operator><name>uint_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>start_pattern</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block>
					<break>break;</break>
				<default>default:</default>

					<comment type="block">/*
					 * doesn't happen (we set replace_type to
					 * PGTYPES_TYPE_STRING_CONSTANT in case of an error above)
					 */</comment>
					<break>break;</break>
			</block_content>}</block></switch>
		</block_content>}</block></while>
	</block_content>}</block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * PGTYPESdate_defmt_asc
 *
 * function works as follows:
 *	 - first we analyze the parameters
 *	 - if this is a special case with no delimiters, add delimiters
 *	 - find the tokens. First we look for numerical values. If we have found
 *	   less than 3 tokens, we check for the months' names and thereafter for
 *	   the abbreviations of the months' names.
 *	 - then we see which parameter should be the date, the month and the
 *	   year and from these values we calculate the date
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PGTYPES_DATE_MONTH_MAXLENGTH</name></cpp:macro>		<cpp:value>20</cpp:value></cpp:define>	<comment type="block">/* probably even less  :-) */</comment>
<function><type><name>int</name></type>
<name>PGTYPESdate_defmt_asc</name><parameter_list>(<parameter><decl><type><name>date</name> <modifier>*</modifier></type> <name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * token[2] = { 4,6 } means that token 2 starts at position 4 and ends at
	 * (including) position 6
	 */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name><name>token</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name><name>token_values</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>fmt_token_order</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>fmt_ystart</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>fmt_mstart</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>fmt_dstart</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>reading_digit</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>token_count</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>str_copy</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type>	<name>tm</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_year</name></name> <operator>=</operator> <name><name>tm</name><operator>.</operator><name>tm_mon</name></name> <operator>=</operator> <name><name>tm</name><operator>.</operator><name>tm_mday</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>	<comment type="block">/* keep compiler quiet */</comment>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>d</name> <operator>||</operator> <operator>!</operator><name>str</name> <operator>||</operator> <operator>!</operator><name>fmt</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>PGTYPES_DATE_ERR_EARGS</name></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* analyze the fmt string */</comment>
	<expr_stmt><expr><name>fmt_ystart</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><literal type="string">"yy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>fmt_mstart</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><literal type="string">"mm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>fmt_dstart</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><literal type="string">"dd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmt_ystart</name> <operator>||</operator> <operator>!</operator><name>fmt_mstart</name> <operator>||</operator> <operator>!</operator><name>fmt_dstart</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>PGTYPES_DATE_ERR_EARGS</name></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>fmt_ystart</name> <operator>&lt;</operator> <name>fmt_mstart</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* y m */</comment>
		<if_stmt><if>if <condition>(<expr><name>fmt_dstart</name> <operator>&lt;</operator> <name>fmt_ystart</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* d y m */</comment>
			<expr_stmt><expr><name>fmt_token_order</name> <operator>=</operator> <literal type="string">"dym"</literal></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>fmt_dstart</name> <operator>&gt;</operator> <name>fmt_mstart</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* y m d */</comment>
			<expr_stmt><expr><name>fmt_token_order</name> <operator>=</operator> <literal type="string">"ymd"</literal></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/* y d m */</comment>
			<expr_stmt><expr><name>fmt_token_order</name> <operator>=</operator> <literal type="string">"ydm"</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* fmt_ystart &gt; fmt_mstart */</comment>
		<comment type="block">/* m y */</comment>
		<if_stmt><if>if <condition>(<expr><name>fmt_dstart</name> <operator>&lt;</operator> <name>fmt_mstart</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* d m y */</comment>
			<expr_stmt><expr><name>fmt_token_order</name> <operator>=</operator> <literal type="string">"dmy"</literal></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>fmt_dstart</name> <operator>&gt;</operator> <name>fmt_ystart</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* m y d */</comment>
			<expr_stmt><expr><name>fmt_token_order</name> <operator>=</operator> <literal type="string">"myd"</literal></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/* m d y */</comment>
			<expr_stmt><expr><name>fmt_token_order</name> <operator>=</operator> <literal type="string">"mdy"</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/*
	 * handle the special cases where there is no delimiter between the
	 * digits. If we see this:
	 *
	 * only digits, 6 or 8 bytes then it might be ddmmyy and ddmmyyyy (or
	 * similar)
	 *
	 * we reduce it to a string with delimiters and continue processing
	 */</comment>

	<comment type="block">/* check if we have only digits */</comment>
	<expr_stmt><expr><name>reading_digit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>reading_digit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<if_stmt><if>if <condition>(<expr><name>reading_digit</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name><name>frag_length</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>target_pos</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>!=</operator> <literal type="number">6</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>PGTYPES_DATE_ERR_ENOSHORTDATE</name></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* okay, this really is the special case */</comment>

		<comment type="block">/*
		 * as long as the string, one additional byte for the terminator and 2
		 * for the delimiters between the 3 fields
		 */</comment>
		<expr_stmt><expr><name>str_copy</name> <operator>=</operator> <call><name>pgtypes_alloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str_copy</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

		<comment type="block">/* determine length of the fragments */</comment>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>frag_length</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>frag_length</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>frag_length</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>fmt_token_order</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'y'</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>frag_length</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>frag_length</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>frag_length</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name><name>fmt_token_order</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'y'</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>frag_length</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>frag_length</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>frag_length</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><name><name>frag_length</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>frag_length</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>frag_length</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name>target_pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

		<comment type="block">/*
		 * XXX: Here we could calculate the positions of the tokens and save
		 * the for loop down there where we again check with isdigit() for
		 * digits.
		 */</comment>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type>			<name>start_pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>start_pos</name> <operator>+=</operator> <name><name>frag_length</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>start_pos</name> <operator>+=</operator> <name><name>frag_length</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>str_copy</name> <operator>+</operator> <name>target_pos</name></expr></argument>, <argument><expr><name>str</name> <operator>+</operator> <name>start_pos</name></expr></argument>,
					<argument><expr><name><name>frag_length</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>target_pos</name> <operator>+=</operator> <name><name>frag_length</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>str_copy</name><index>[<expr><name>target_pos</name></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>target_pos</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><name><name>str_copy</name><index>[<expr><name>target_pos</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>str_copy</name> <operator>=</operator> <call><name>pgtypes_strdup</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str_copy</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

		<comment type="block">/* convert the whole string to lower case */</comment>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>str_copy</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>str_copy</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <call><name>pg_tolower</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>str_copy</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* look for numerical tokens */</comment>
	<expr_stmt><expr><name>reading_digit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>token_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str_copy</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>str_copy</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>reading_digit</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* the token is finished */</comment>
			<expr_stmt><expr><name><name>token</name><index>[<expr><name>token_count</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>reading_digit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>token_count</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>str_copy</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>reading_digit</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* we have found a token */</comment>
			<expr_stmt><expr><name><name>token</name><index>[<expr><name>token_count</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>reading_digit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/*
	 * we're at the end of the input string, but maybe we are still reading a
	 * number...
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>reading_digit</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>token</name><index>[<expr><name>token_count</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>token_count</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>


	<if_stmt><if>if <condition>(<expr><name>token_count</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * not all tokens found, no way to find 2 missing tokens with string
		 * matches
		 */</comment>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>str_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>PGTYPES_DATE_ERR_ENOSHORTDATE</name></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>token_count</name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * not all tokens found but we may find another one with string
		 * matches by testing for the months names and months abbreviations
		 */</comment>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>month_lower_tmp</name> <init>= <expr><call><name>pgtypes_alloc</name><argument_list>(<argument><expr><name>PGTYPES_DATE_MONTH_MAXLENGTH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>start_pos</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>j</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>offset</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>found</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	  <modifier>*</modifier><modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>month_lower_tmp</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* free variables we alloc'ed before */</comment>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>str_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>list</name> <operator>=</operator> <name>pgtypes_date_months</name></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>list</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>PGTYPES_DATE_MONTH_MAXLENGTH</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<expr_stmt><expr><name><name>month_lower_tmp</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <call><name>pg_tolower</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>list</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>month_lower_tmp</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/* properly terminated */</comment>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>start_pos</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>str_copy</name></expr></argument>, <argument><expr><name>month_lower_tmp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>start_pos</name> <operator>-</operator> <name>str_copy</name></expr>;</expr_stmt>

				<comment type="block">/*
				 * sort the new token into the numeric tokens, shift them if
				 * necessary
				 */</comment>
				<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&lt;</operator> <name><name>token</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name><name>token</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>token</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>token</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>token</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>token</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>token</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>token</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>token</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name>token_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				</block_content>}</block></if>
				<if type="elseif">else if <condition>(<expr><name>offset</name> <operator>&lt;</operator> <name><name>token</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name><name>token</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>token</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>token</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>token</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name>token_count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>token_count</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
				<expr_stmt><expr><name><name>token</name><index>[<expr><name>token_count</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>token</name><index>[<expr><name>token_count</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>offset</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>month_lower_tmp</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

				<comment type="block">/*
				 * the value is the index of the month in the array of months
				 * + 1 (January is month 0)
				 */</comment>
				<expr_stmt><expr><name><name>token_values</name><index>[<expr><name>token_count</name></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/*
			 * evil[tm] hack: if we read the pgtypes_date_months and haven't
			 * found a match, reset list to point to months (abbreviations)
			 * and reset the counter variable i
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name>list</name> <operator>==</operator> <name>pgtypes_date_months</name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>list</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>list</name> <operator>=</operator> <name>months</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>month_lower_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>str_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>PGTYPES_DATE_ERR_ENOTDMY</name></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * here we found a month. token[token_count] and
		 * token_values[token_count] reflect the month's details.
		 *
		 * only the month can be specified with a literal. Here we can do a
		 * quick check if the month is at the right position according to the
		 * format string because we can check if the token that we expect to
		 * be the month is at the position of the only token that already has
		 * a value. If we wouldn't check here we could say "December 4 1990"
		 * with a fmt string of "dd mm yy" for 12 April 1990.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>fmt_token_order</name><index>[<expr><name>token_count</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'m'</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* deal with the error later on */</comment>
			<expr_stmt><expr><name><name>token_values</name><index>[<expr><name>token_count</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>month_lower_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* terminate the tokens with ASCII-0 and get their values */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><operator>(</operator><name>str_copy</name> <operator>+</operator> <name><name>token</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
		<comment type="block">/* A month already has a value set, check for token_value == -1 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>token_values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>token_values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>str_copy</name> <operator>+</operator> <name><name>token</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* strtol sets errno in case of an error */</comment>
			<if_stmt><if>if <condition>(<expr><name>errno</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>token_values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>fmt_token_order</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'d'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_mday</name></name> <operator>=</operator> <name><name>token_values</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name><name>fmt_token_order</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'m'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_mon</name></name> <operator>=</operator> <name><name>token_values</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name><name>fmt_token_order</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'y'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_year</name></name> <operator>=</operator> <name><name>token_values</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>str_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>tm</name><operator>.</operator><name>tm_mday</name></name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>tm</name><operator>.</operator><name>tm_mday</name></name> <operator>&gt;</operator> <literal type="number">31</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>PGTYPES_DATE_BAD_DAY</name></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>tm</name><operator>.</operator><name>tm_mon</name></name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>tm</name><operator>.</operator><name>tm_mon</name></name> <operator>&gt;</operator> <name>MONTHS_PER_YEAR</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>PGTYPES_DATE_BAD_MONTH</name></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>tm</name><operator>.</operator><name>tm_mday</name></name> <operator>==</operator> <literal type="number">31</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>tm</name><operator>.</operator><name>tm_mon</name></name> <operator>==</operator> <literal type="number">4</literal> <operator>||</operator> <name><name>tm</name><operator>.</operator><name>tm_mon</name></name> <operator>==</operator> <literal type="number">6</literal> <operator>||</operator> <name><name>tm</name><operator>.</operator><name>tm_mon</name></name> <operator>==</operator> <literal type="number">9</literal> <operator>||</operator> <name><name>tm</name><operator>.</operator><name>tm_mon</name></name> <operator>==</operator> <literal type="number">11</literal><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>PGTYPES_DATE_BAD_DAY</name></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>tm</name><operator>.</operator><name>tm_mon</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>tm</name><operator>.</operator><name>tm_mday</name></name> <operator>&gt;</operator> <literal type="number">29</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>PGTYPES_DATE_BAD_DAY</name></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <call><name>date2j</name><argument_list>(<argument><expr><name><name>tm</name><operator>.</operator><name>tm_year</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_mon</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_mday</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>date2j</name><argument_list>(<argument><expr><literal type="number">2000</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
