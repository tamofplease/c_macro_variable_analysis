<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/interfaces/ecpg/ecpglib/misc.c"><comment type="block">/* src/interfaces/ecpg/ecpglib/misc.c */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POSTGRES_ECPG_INTERNAL</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ecpg-pthread-win32.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ecpgerrno.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ecpglib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ecpglib_extern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ecpgtype.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pg_config_paths.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgtypes_date.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgtypes_interval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgtypes_numeric.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgtypes_timestamp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlca.h"</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LONG_LONG_MIN</name></cpp:ifndef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LLONG_MIN</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LONG_LONG_MIN</name></cpp:macro> <cpp:value>LLONG_MIN</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LONG_LONG_MIN</name></cpp:macro> <cpp:value>LONGLONG_MIN</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* LLONG_MIN */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* LONG_LONG_MIN */</comment>

<decl_stmt><decl><type><name>bool</name></type>		<name>ecpg_internal_regression_mode</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>sqlca_t</name></name></type> <name>sqlca_init</name> <init>=
<expr><block>{
	<expr><block>{
		<expr><literal type="char">'S'</literal></expr>, <expr><literal type="char">'Q'</literal></expr>, <expr><literal type="char">'L'</literal></expr>, <expr><literal type="char">'C'</literal></expr>, <expr><literal type="char">'A'</literal></expr>, <expr><literal type="char">' '</literal></expr>, <expr><literal type="char">' '</literal></expr>, <expr><literal type="char">' '</literal></expr>
	}</block></expr>,
	<expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sqlca_t</name></expr></argument>)</argument_list></sizeof></expr>,
	<expr><literal type="number">0</literal></expr>,
	<expr><block>{
		<expr><literal type="number">0</literal></expr>,
		<expr><block>{
			<expr><literal type="number">0</literal></expr>
		}</block></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="char">'N'</literal></expr>, <expr><literal type="char">'O'</literal></expr>, <expr><literal type="char">'T'</literal></expr>, <expr><literal type="char">' '</literal></expr>, <expr><literal type="char">'S'</literal></expr>, <expr><literal type="char">'E'</literal></expr>, <expr><literal type="char">'T'</literal></expr>, <expr><literal type="char">' '</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="char">'0'</literal></expr>, <expr><literal type="char">'0'</literal></expr>, <expr><literal type="char">'0'</literal></expr>, <expr><literal type="char">'0'</literal></expr>, <expr><literal type="char">'0'</literal></expr>
	}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_THREAD_SAFETY</name></cpp:ifdef>
<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_key_t</name></type> <name>sqlca_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_once_t</name></type> <name>sqlca_key_once</name> <init>= <expr><name>PTHREAD_ONCE_INIT</name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>sqlca_t</name></name></type> <name>sqlca</name> <init>=
<expr><block>{
	<expr><block>{
		<expr><literal type="char">'S'</literal></expr>, <expr><literal type="char">'Q'</literal></expr>, <expr><literal type="char">'L'</literal></expr>, <expr><literal type="char">'C'</literal></expr>, <expr><literal type="char">'A'</literal></expr>, <expr><literal type="char">' '</literal></expr>, <expr><literal type="char">' '</literal></expr>, <expr><literal type="char">' '</literal></expr>
	}</block></expr>,
	<expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sqlca_t</name></expr></argument>)</argument_list></sizeof></expr>,
	<expr><literal type="number">0</literal></expr>,
	<expr><block>{
		<expr><literal type="number">0</literal></expr>,
		<expr><block>{
			<expr><literal type="number">0</literal></expr>
		}</block></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="char">'N'</literal></expr>, <expr><literal type="char">'O'</literal></expr>, <expr><literal type="char">'T'</literal></expr>, <expr><literal type="char">' '</literal></expr>, <expr><literal type="char">'S'</literal></expr>, <expr><literal type="char">'E'</literal></expr>, <expr><literal type="char">'T'</literal></expr>, <expr><literal type="char">' '</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="char">'0'</literal></expr>, <expr><literal type="char">'0'</literal></expr>, <expr><literal type="char">'0'</literal></expr>, <expr><literal type="char">'0'</literal></expr>, <expr><literal type="char">'0'</literal></expr>
	}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_THREAD_SAFETY</name></cpp:ifdef>
<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_mutex_t</name></type> <name>debug_mutex</name> <init>= <expr><name>PTHREAD_MUTEX_INITIALIZER</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_mutex_t</name></type> <name>debug_init_mutex</name> <init>= <expr><name>PTHREAD_MUTEX_INITIALIZER</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>	<name>simple_debug</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>FILE</name> <modifier>*</modifier></type><name>debugstream</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>ecpg_init_sqlca</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sqlca_t</name></name> <modifier>*</modifier></type><name>sqlca</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>sqlca</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>sqlca_init</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sqlca_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ecpg_init</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>connection</name></name> <modifier>*</modifier></type><name>con</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>connection_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>lineno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>sqlca_t</name></name> <modifier>*</modifier></type><name>sqlca</name> <init>= <expr><call><name>ECPGget_sqlca</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>sqlca</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>ECPG_OUT_OF_MEMORY</name></expr></argument>, <argument><expr><name>ECPG_SQLSTATE_ECPG_OUT_OF_MEMORY</name></expr></argument>,
				   <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>ecpg_init_sqlca</name><argument_list>(<argument><expr><name>sqlca</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>con</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>ECPG_NO_CONN</name></expr></argument>, <argument><expr><name>ECPG_SQLSTATE_CONNECTION_DOES_NOT_EXIST</name></expr></argument>,
				   <argument><expr><ternary><condition><expr><name>connection_name</name></expr> ?</condition><then> <expr><name>connection_name</name></expr> </then><else>: <expr><call><name>ecpg_gettext</name><argument_list>(<argument><expr><literal type="string">"NULL"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_THREAD_SAFETY</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ecpg_sqlca_key_destructor</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>					<comment type="block">/* sqlca structure allocated in ECPGget_sqlca */</comment>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ecpg_sqlca_key_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>pthread_key_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sqlca_key</name></expr></argument>, <argument><expr><name>ecpg_sqlca_key_destructor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name><name>struct</name> <name>sqlca_t</name></name> <modifier>*</modifier></type>
<name>ECPGget_sqlca</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_THREAD_SAFETY</name></cpp:ifdef>
	<decl_stmt><decl><type><name><name>struct</name> <name>sqlca_t</name></name> <modifier>*</modifier></type><name>sqlca</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>pthread_once</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sqlca_key_once</name></expr></argument>, <argument><expr><name>ecpg_sqlca_key_init</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>sqlca</name> <operator>=</operator> <call><name>pthread_getspecific</name><argument_list>(<argument><expr><name>sqlca_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>sqlca</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>sqlca</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sqlca_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>sqlca</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>ecpg_init_sqlca</name><argument_list>(<argument><expr><name>sqlca</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pthread_setspecific</name><argument_list>(<argument><expr><name>sqlca_key</name></expr></argument>, <argument><expr><name>sqlca</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>sqlca</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<return>return <expr><operator>&amp;</operator><name>sqlca</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ECPGstatus</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>lineno</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>connection_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>connection</name></name> <modifier>*</modifier></type><name>con</name> <init>= <expr><call><name>ecpg_get_connection</name><argument_list>(<argument><expr><name>connection_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_init</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>connection_name</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* are we connected? */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>connection</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>ECPG_NOT_CONN</name></expr></argument>, <argument><expr><name>ECPG_SQLSTATE_ECPG_INTERNAL_ERROR</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>PGTransactionStatusType</name></type>
<name>ECPGtransactionStatus</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>connection_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>connection</name></name> <modifier>*</modifier></type><name>con</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>con</name> <operator>=</operator> <call><name>ecpg_get_connection</name><argument_list>(<argument><expr><name>connection_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>con</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* transaction status is unknown */</comment>
		<return>return <expr><name>PQTRANS_UNKNOWN</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><call><name>PQtransactionStatus</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ECPGtrans</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>lineno</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>connection_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>transaction</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PGresult</name>   <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>connection</name></name> <modifier>*</modifier></type><name>con</name> <init>= <expr><call><name>ecpg_get_connection</name><argument_list>(<argument><expr><name>connection_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_init</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>connection_name</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"ECPGtrans on line %d: action \"%s\"; connection \"%s\"\n"</literal></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>transaction</name></expr></argument>, <argument><expr><ternary><condition><expr><name>con</name></expr> ?</condition><then> <expr><name><name>con</name><operator>-&gt;</operator><name>name</name></name></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* if we have no connection we just simulate the command */</comment>
	<if_stmt><if>if <condition>(<expr><name>con</name> <operator>&amp;&amp;</operator> <name><name>con</name><operator>-&gt;</operator><name>connection</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * If we got a transaction command but have no open transaction, we
		 * have to start one, unless we are in autocommit, where the
		 * developers have to take care themselves. However, if the command is
		 * a begin statement, we just execute it once. And if the command is
		 * commit or rollback prepared, we don't execute it.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>PQtransactionStatus</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>PQTRANS_IDLE</name> <operator>&amp;&amp;</operator>
			<operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>autocommit</name></name> <operator>&amp;&amp;</operator>
			<call><name>strncmp</name><argument_list>(<argument><expr><name>transaction</name></expr></argument>, <argument><expr><literal type="string">"begin"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
			<call><name>strncmp</name><argument_list>(<argument><expr><name>transaction</name></expr></argument>, <argument><expr><literal type="string">"start"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
			<call><name>strncmp</name><argument_list>(<argument><expr><name>transaction</name></expr></argument>, <argument><expr><literal type="string">"commit prepared"</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
			<call><name>strncmp</name><argument_list>(<argument><expr><name>transaction</name></expr></argument>, <argument><expr><literal type="string">"rollback prepared"</literal></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>PQexec</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>, <argument><expr><literal type="string">"begin transaction"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_check_PQresult</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>, <argument><expr><name>ECPG_COMPAT_PGSQL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>PQexec</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>, <argument><expr><name>transaction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_check_PQresult</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>, <argument><expr><name>ECPG_COMPAT_PGSQL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>ECPGdebug</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>dbgs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_THREAD_SAFETY</name></cpp:ifdef>
	<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>debug_init_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">100</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>ecpg_internal_regression_mode</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>simple_debug</name> <operator>=</operator> <name>n</name> <operator>-</operator> <literal type="number">100</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>simple_debug</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name>debugstream</name> <operator>=</operator> <name>dbgs</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"ECPGdebug: set to %d\n"</literal></expr></argument>, <argument><expr><name>simple_debug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_THREAD_SAFETY</name></cpp:ifdef>
	<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>debug_init_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ecpg_log</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>,<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>va_list</name></type>		<name>ap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>sqlca_t</name></name> <modifier>*</modifier></type><name>sqlca</name> <init>= <expr><call><name>ECPGget_sqlca</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>intl_format</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>bufsize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>fmt</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>simple_debug</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="block">/* localize the error message string */</comment>
	<expr_stmt><expr><name>intl_format</name> <operator>=</operator> <call><name>ecpg_gettext</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Insert PID into the format, unless ecpg_internal_regression_mode is set
	 * (regression tests want unchanging output).
	 */</comment>
	<expr_stmt><expr><name>bufsize</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>intl_format</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">100</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>fmt</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>bufsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fmt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>ecpg_internal_regression_mode</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>, <argument><expr><literal type="string">"[NO_PID]: %s"</literal></expr></argument>, <argument><expr><name>intl_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>, <argument><expr><literal type="string">"[%d]: %s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>intl_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_THREAD_SAFETY</name></cpp:ifdef>
	<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>debug_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>vfprintf</name><argument_list>(<argument><expr><name>debugstream</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* dump out internal sqlca variables */</comment>
	<if_stmt><if>if <condition>(<expr><name>ecpg_internal_regression_mode</name> <operator>&amp;&amp;</operator> <name>sqlca</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>debugstream</name></expr></argument>, <argument><expr><literal type="string">"[NO_PID]: sqlca: code: %ld, state: %s\n"</literal></expr></argument>,
				<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlcode</name></name></expr></argument>, <argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlstate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>debugstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_THREAD_SAFETY</name></cpp:ifdef>
	<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>debug_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ECPGset_noind_null</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>ECPGttype</name></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>ECPGt_char</name></expr>:</case>
		<case>case <expr><name>ECPGt_unsigned_char</name></expr>:</case>
		<case>case <expr><name>ECPGt_string</name></expr>:</case>
			<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>ptr</name><operator>)</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ECPGt_short</name></expr>:</case>
		<case>case <expr><name>ECPGt_unsigned_short</name></expr>:</case>
			<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>short</name> <name>int</name> <operator>*</operator><operator>)</operator> <name>ptr</name><operator>)</operator> <operator>=</operator> <name>SHRT_MIN</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ECPGt_int</name></expr>:</case>
		<case>case <expr><name>ECPGt_unsigned_int</name></expr>:</case>
			<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <name>ptr</name><operator>)</operator> <operator>=</operator> <name>INT_MIN</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ECPGt_long</name></expr>:</case>
		<case>case <expr><name>ECPGt_unsigned_long</name></expr>:</case>
		<case>case <expr><name>ECPGt_date</name></expr>:</case>
			<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator> <name>ptr</name><operator>)</operator> <operator>=</operator> <name>LONG_MIN</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ECPGt_long_long</name></expr>:</case>
		<case>case <expr><name>ECPGt_unsigned_long_long</name></expr>:</case>
			<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>long</name> <name>long</name> <operator>*</operator><operator>)</operator> <name>ptr</name><operator>)</operator> <operator>=</operator> <name>LONG_LONG_MIN</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ECPGt_float</name></expr>:</case>
			<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>ptr</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ECPGt_double</name></expr>:</case>
			<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>ptr</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ECPGt_varchar</name></expr>:</case>
			<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><operator>(</operator>struct <name>ECPGgeneric_varchar</name> <operator>*</operator><operator>)</operator> <name>ptr</name><operator>)</operator><operator>-&gt;</operator><name>arr</name><operator>)</operator> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
			<expr_stmt><expr><operator>(</operator><operator>(</operator>struct <name>ECPGgeneric_varchar</name> <operator>*</operator><operator>)</operator> <name>ptr</name><operator>)</operator><operator>-&gt;</operator><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ECPGt_bytea</name></expr>:</case>
			<expr_stmt><expr><operator>(</operator><operator>(</operator>struct <name>ECPGgeneric_bytea</name> <operator>*</operator><operator>)</operator> <name>ptr</name><operator>)</operator><operator>-&gt;</operator><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ECPGt_decimal</name></expr>:</case>
			<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>decimal</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>(</operator><operator>(</operator><name>decimal</name> <operator>*</operator><operator>)</operator> <name>ptr</name><operator>)</operator><operator>-&gt;</operator><name>sign</name> <operator>=</operator> <name>NUMERIC_NULL</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ECPGt_numeric</name></expr>:</case>
			<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>numeric</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>(</operator><operator>(</operator><name>numeric</name> <operator>*</operator><operator>)</operator> <name>ptr</name><operator>)</operator><operator>-&gt;</operator><name>sign</name> <operator>=</operator> <name>NUMERIC_NULL</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ECPGt_interval</name></expr>:</case>
			<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>ptr</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>interval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ECPGt_timestamp</name></expr>:</case>
			<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>ptr</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>timestamp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>_check</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<for>for <control>(<init><expr><name>length</name><operator>--</operator></expr>;</init> <condition><expr><name>length</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>length</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><name><name>ptr</name><index>[<expr><name>length</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0xff</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ECPGis_noind_null</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>ECPGttype</name></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>ECPGt_char</name></expr>:</case>
		<case>case <expr><name>ECPGt_unsigned_char</name></expr>:</case>
		<case>case <expr><name>ECPGt_string</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>ptr</name><operator>)</operator> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>ECPGt_short</name></expr>:</case>
		<case>case <expr><name>ECPGt_unsigned_short</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>short</name> <name>int</name> <operator>*</operator><operator>)</operator> <name>ptr</name><operator>)</operator> <operator>==</operator> <name>SHRT_MIN</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>ECPGt_int</name></expr>:</case>
		<case>case <expr><name>ECPGt_unsigned_int</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>int</name> <operator>*</operator><operator>)</operator> <name>ptr</name><operator>)</operator> <operator>==</operator> <name>INT_MIN</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>ECPGt_long</name></expr>:</case>
		<case>case <expr><name>ECPGt_unsigned_long</name></expr>:</case>
		<case>case <expr><name>ECPGt_date</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>long</name> <operator>*</operator><operator>)</operator> <name>ptr</name><operator>)</operator> <operator>==</operator> <name>LONG_MIN</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>ECPGt_long_long</name></expr>:</case>
		<case>case <expr><name>ECPGt_unsigned_long_long</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>long</name> <name>long</name> <operator>*</operator><operator>)</operator> <name>ptr</name><operator>)</operator> <operator>==</operator> <name>LONG_LONG_MIN</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>ECPGt_float</name></expr>:</case>
			<return>return <expr><call><name>_check</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
			<break>break;</break>
		<case>case <expr><name>ECPGt_double</name></expr>:</case>
			<return>return <expr><call><name>_check</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
			<break>break;</break>
		<case>case <expr><name>ECPGt_varchar</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> struct <name>ECPGgeneric_varchar</name> <operator>*</operator><operator>)</operator> <name>ptr</name><operator>)</operator><operator>-&gt;</operator><name>arr</name><operator>)</operator> <operator>==</operator> <literal type="number">0x00</literal></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>ECPGt_bytea</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><specifier>const</specifier> struct <name>ECPGgeneric_bytea</name> <operator>*</operator><operator>)</operator> <name>ptr</name><operator>)</operator><operator>-&gt;</operator><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>ECPGt_decimal</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>decimal</name> <operator>*</operator><operator>)</operator> <name>ptr</name><operator>)</operator><operator>-&gt;</operator><name>sign</name> <operator>==</operator> <name>NUMERIC_NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>ECPGt_numeric</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>numeric</name> <operator>*</operator><operator>)</operator> <name>ptr</name><operator>)</operator><operator>-&gt;</operator><name>sign</name> <operator>==</operator> <name>NUMERIC_NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>ECPGt_interval</name></expr>:</case>
			<return>return <expr><call><name>_check</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>interval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
			<break>break;</break>
		<case>case <expr><name>ECPGt_timestamp</name></expr>:</case>
			<return>return <expr><call><name>_check</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>timestamp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
			<break>break;</break>
		<default>default:</default>
			<break>break;</break>
	</block_content>}</block></switch>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_THREAD_SAFETY</name></cpp:ifdef>

<function><type><name>void</name></type>
<name>win32_pthread_mutex</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>pthread_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>mutex</name><operator>-&gt;</operator><name>handle</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<while>while <condition>(<expr><call><name>InterlockedExchange</name><argument_list>(<argument><expr><operator>(</operator><name>LONG</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>mutex</name><operator>-&gt;</operator><name>initlock</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
		<if_stmt><if>if <condition>(<expr><name><name>mutex</name><operator>-&gt;</operator><name>handle</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>mutex</name><operator>-&gt;</operator><name>handle</name></name> <operator>=</operator> <call><name>CreateMutex</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>InterlockedExchange</name><argument_list>(<argument><expr><operator>(</operator><name>LONG</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>mutex</name><operator>-&gt;</operator><name>initlock</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_mutex_t</name></type> <name>win32_pthread_once_lock</name> <init>= <expr><name>PTHREAD_MUTEX_INITIALIZER</name></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>win32_pthread_once</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name>pthread_once_t</name> <modifier>*</modifier></type><name>once</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>fn</name>) <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>once</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>win32_pthread_once_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>once</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>fn</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>once</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>win32_pthread_once_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* ENABLE_THREAD_SAFETY */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* WIN32 */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_NLS</name></cpp:ifdef>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>ecpg_gettext</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msgid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * If multiple threads come through here at about the same time, it's okay
	 * for more than one of them to call bindtextdomain().  But it's not okay
	 * for any of them to reach dgettext() before bindtextdomain() is
	 * complete, so don't set the flag till that's done.  Use "volatile" just
	 * to be sure the compiler doesn't try to get cute.
	 */</comment>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>bool</name></type> <name>already_bound</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>already_bound</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* dgettext() preserves errno, but bindtextdomain() doesn't */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
		<decl_stmt><decl><type><name>int</name></type>			<name>save_errno</name> <init>= <expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<decl_stmt><decl><type><name>int</name></type>			<name>save_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ldir</name></decl>;</decl_stmt>

		<comment type="block">/* No relocatable lookup here because the binary could be anywhere */</comment>
		<expr_stmt><expr><name>ldir</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"PGLOCALEDIR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ldir</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>ldir</name> <operator>=</operator> <name>LOCALEDIR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>bindtextdomain</name><argument_list>(<argument><expr><call><name>PG_TEXTDOMAIN</name><argument_list>(<argument><expr><literal type="string">"ecpglib"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ldir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>already_bound</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
		<expr_stmt><expr><call><name>SetLastError</name><argument_list>(<argument><expr><name>save_errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>save_errno</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><call><name>dgettext</name><argument_list>(<argument><expr><call><name>PG_TEXTDOMAIN</name><argument_list>(<argument><expr><literal type="string">"ecpglib"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>msgid</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* ENABLE_NLS */</comment>

<decl_stmt><decl><type><name><name>struct</name> <name>var_list</name></name> <modifier>*</modifier></type><name>ivlist</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>ECPGset_var</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>number</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pointer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lineno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>var_list</name></name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name><name>struct</name> <name>sqlca_t</name></name> <modifier>*</modifier></type><name>sqlca</name> <init>= <expr><call><name>ECPGget_sqlca</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>sqlca</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>ECPG_OUT_OF_MEMORY</name></expr></argument>,
				   <argument><expr><name>ECPG_SQLSTATE_ECPG_OUT_OF_MEMORY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>ecpg_init_sqlca</name><argument_list>(<argument><expr><name>sqlca</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>ptr</name> <operator>=</operator> <name>ivlist</name></expr>;</init> <condition><expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>ptr</name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>ptr</name><operator>-&gt;</operator><name>number</name></name> <operator>==</operator> <name>number</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* already known =&gt; just change pointer value */</comment>
			<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>pointer</name></name> <operator>=</operator> <name>pointer</name></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/* a new one has to be added */</comment>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator>struct <name>var_list</name> <operator>*</operator><operator>)</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1L</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>var_list</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name><name>struct</name> <name>sqlca_t</name></name> <modifier>*</modifier></type><name>sqlca</name> <init>= <expr><call><name>ECPGget_sqlca</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>sqlca</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>ECPG_OUT_OF_MEMORY</name></expr></argument>,
					   <argument><expr><name>ECPG_SQLSTATE_ECPG_OUT_OF_MEMORY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlcode</name></name> <operator>=</operator> <name>ECPG_OUT_OF_MEMORY</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlstate</name></name></expr></argument>, <argument><expr><literal type="string">"YE001"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlstate</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"out of memory on line %d"</literal></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrml</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* free all memory we have allocated for the user */</comment>
		<expr_stmt><expr><call><name>ECPGfree_auto_mem</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>number</name></name> <operator>=</operator> <name>number</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>pointer</name></name> <operator>=</operator> <name>pointer</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>ivlist</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ivlist</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type>
<name>ECPGget_var</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>number</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>var_list</name></name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>ptr</name> <operator>=</operator> <name>ivlist</name></expr>;</init> <condition><expr><name>ptr</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>ptr</name><operator>-&gt;</operator><name>number</name></name> <operator>!=</operator> <name>number</name></expr>;</condition> <incr><expr><name>ptr</name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
	<return>return <expr><ternary><condition><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>ptr</name><operator>-&gt;</operator><name>pointer</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
</unit>
