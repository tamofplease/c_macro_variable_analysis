<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/interfaces/ecpg/preproc/descriptor.c"><comment type="block">/*
 * functions needed for descriptor handling
 *
 * src/interfaces/ecpg/preproc/descriptor.c
 *
 * since descriptor might be either a string constant or a string var
 * we need to check for a constant if we expect a constant
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"preproc_extern.h"</cpp:file></cpp:include>

<comment type="block">/*
 * assignment handling function (descriptor)
 */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>assignment</name></name> <modifier>*</modifier></type><name>assignments</name></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>push_assignment</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>ECPGdtype</name></name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>assignment</name></name> <modifier>*</modifier></type><name>new</name> <init>= <expr><operator>(</operator>struct <name>assignment</name> <operator>*</operator><operator>)</operator> <call><name>mm_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>assignment</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>assignments</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>variable</name></name> <operator>=</operator> <call><name>mm_alloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>new</name><operator>-&gt;</operator><name>variable</name></name></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>assignments</name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>drop_assignments</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<while>while <condition>(<expr><name>assignments</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name><name>struct</name> <name>assignment</name></name> <modifier>*</modifier></type><name>old_head</name> <init>= <expr><name>assignments</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>assignments</name> <operator>=</operator> <name><name>old_head</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>old_head</name><operator>-&gt;</operator><name>variable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>old_head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ECPGnumeric_lvalue</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>variable</name></name> <modifier>*</modifier></type><name>v</name> <init>= <expr><call><name>find_variable</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>ECPGt_short</name></expr>:</case>
		<case>case <expr><name>ECPGt_int</name></expr>:</case>
		<case>case <expr><name>ECPGt_long</name></expr>:</case>
		<case>case <expr><name>ECPGt_long_long</name></expr>:</case>
		<case>case <expr><name>ECPGt_unsigned_short</name></expr>:</case>
		<case>case <expr><name>ECPGt_unsigned_int</name></expr>:</case>
		<case>case <expr><name>ECPGt_unsigned_long</name></expr>:</case>
		<case>case <expr><name>ECPGt_unsigned_long_long</name></expr>:</case>
		<case>case <expr><name>ECPGt_const</name></expr>:</case>
			<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>base_yyout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>mmerror</name><argument_list>(<argument><expr><name>PARSE_ERROR</name></expr></argument>, <argument><expr><name>ET_ERROR</name></expr></argument>, <argument><expr><literal type="string">"variable \"%s\" must have a numeric type"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/*
 * descriptor name lookup
 */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>descriptor</name></name> <modifier>*</modifier></type><name>descriptors</name></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>add_descriptor</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>connection</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>descriptor</name></name> <modifier>*</modifier></type><name>new</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'"'</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>new</name> <operator>=</operator> <operator>(</operator>struct <name>descriptor</name> <operator>*</operator><operator>)</operator> <call><name>mm_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>descriptor</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>descriptors</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>mm_alloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>new</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>connection</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>connection</name></name> <operator>=</operator> <call><name>mm_alloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>connection</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>new</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>, <argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>connection</name></name> <operator>=</operator> <name>connection</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<expr_stmt><expr><name>descriptors</name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>drop_descriptor</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>connection</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>descriptor</name></name> <modifier>*</modifier></type><name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>descriptor</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>lastptr</name> <init>= <expr><operator>&amp;</operator><name>descriptors</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'"'</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>descriptors</name></expr>;</init> <condition><expr><name>i</name></expr>;</condition> <incr><expr><name>lastptr</name> <operator>=</operator> <operator>&amp;</operator><name><name>i</name><operator>-&gt;</operator><name>next</name></name></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <name><name>i</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>i</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>connection</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>i</name><operator>-&gt;</operator><name>connection</name></name><operator>)</operator>
				<operator>||</operator> <operator>(</operator><name>connection</name> <operator>&amp;&amp;</operator> <name><name>i</name><operator>-&gt;</operator><name>connection</name></name>
					<operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>connection</name></expr></argument>, <argument><expr><name><name>i</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><operator>*</operator><name>lastptr</name> <operator>=</operator> <name><name>i</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>i</name><operator>-&gt;</operator><name>connection</name></name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>mmerror</name><argument_list>(<argument><expr><name>PARSE_ERROR</name></expr></argument>, <argument><expr><name>ET_WARNING</name></expr></argument>, <argument><expr><literal type="string">"descriptor \"%s\" does not exist"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>descriptor</name></name>
		   <modifier>*</modifier></type>
<name>lookup_descriptor</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>connection</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>descriptor</name></name> <modifier>*</modifier></type><name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'"'</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>descriptors</name></expr>;</init> <condition><expr><name>i</name></expr>;</condition> <incr><expr><name>i</name> <operator>=</operator> <name><name>i</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>i</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>connection</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>i</name><operator>-&gt;</operator><name>connection</name></name><operator>)</operator>
				<operator>||</operator> <operator>(</operator><name>connection</name> <operator>&amp;&amp;</operator> <name><name>i</name><operator>-&gt;</operator><name>connection</name></name>
					<operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>connection</name></expr></argument>, <argument><expr><name><name>i</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>mmerror</name><argument_list>(<argument><expr><name>PARSE_ERROR</name></expr></argument>, <argument><expr><name>ET_WARNING</name></expr></argument>, <argument><expr><literal type="string">"descriptor \"%s\" does not exist"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>output_get_descr_header</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>desc_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>assignment</name></name> <modifier>*</modifier></type><name>results</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>base_yyout</name></expr></argument>, <argument><expr><literal type="string">"{ ECPGget_desc_header(__LINE__, %s, &amp;("</literal></expr></argument>, <argument><expr><name>desc_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>results</name> <operator>=</operator> <name>assignments</name></expr>;</init> <condition><expr><name>results</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>results</name> <operator>=</operator> <name><name>results</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>results</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <name>ECPGd_count</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ECPGnumeric_lvalue</name><argument_list>(<argument><expr><name><name>results</name><operator>-&gt;</operator><name>variable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>mmerror</name><argument_list>(<argument><expr><name>PARSE_ERROR</name></expr></argument>, <argument><expr><name>ET_WARNING</name></expr></argument>, <argument><expr><literal type="string">"descriptor header item \"%d\" does not exist"</literal></expr></argument>, <argument><expr><name><name>results</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>drop_assignments</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>base_yyout</name></expr></argument>, <argument><expr><literal type="string">"));\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>whenever_action</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>output_get_descr</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>desc_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>assignment</name></name> <modifier>*</modifier></type><name>results</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>base_yyout</name></expr></argument>, <argument><expr><literal type="string">"{ ECPGget_desc(__LINE__, %s, %s,"</literal></expr></argument>, <argument><expr><name>desc_name</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>results</name> <operator>=</operator> <name>assignments</name></expr>;</init> <condition><expr><name>results</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>results</name> <operator>=</operator> <name><name>results</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>variable</name></name> <modifier>*</modifier></type><name>v</name> <init>= <expr><call><name>find_variable</name><argument_list>(<argument><expr><name><name>results</name><operator>-&gt;</operator><name>variable</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>str_zero</name> <init>= <expr><call><name>mm_strdup</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<switch>switch <condition>(<expr><name><name>results</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>ECPGd_nullable</name></expr>:</case>
				<expr_stmt><expr><call><name>mmerror</name><argument_list>(<argument><expr><name>PARSE_ERROR</name></expr></argument>, <argument><expr><name>ET_WARNING</name></expr></argument>, <argument><expr><literal type="string">"nullable is always 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>ECPGd_key_member</name></expr>:</case>
				<expr_stmt><expr><call><name>mmerror</name><argument_list>(<argument><expr><name>PARSE_ERROR</name></expr></argument>, <argument><expr><name>ET_WARNING</name></expr></argument>, <argument><expr><literal type="string">"key_member is always 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<break>break;</break>
		</block_content>}</block></switch>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>base_yyout</name></expr></argument>, <argument><expr><literal type="string">"%s,"</literal></expr></argument>, <argument><expr><call><name>get_dtype</name><argument_list>(<argument><expr><name><name>results</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ECPGdump_a_type</name><argument_list>(<argument><expr><name>base_yyout</name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>brace_level</name></name></expr></argument>,
						<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>str_zero</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>str_zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>drop_assignments</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"ECPGd_EODT);\n"</literal></expr></argument>, <argument><expr><name>base_yyout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>whenever_action</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>|</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>output_set_descr_header</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>desc_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>assignment</name></name> <modifier>*</modifier></type><name>results</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>base_yyout</name></expr></argument>, <argument><expr><literal type="string">"{ ECPGset_desc_header(__LINE__, %s, (int)("</literal></expr></argument>, <argument><expr><name>desc_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>results</name> <operator>=</operator> <name>assignments</name></expr>;</init> <condition><expr><name>results</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>results</name> <operator>=</operator> <name><name>results</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>results</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <name>ECPGd_count</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ECPGnumeric_lvalue</name><argument_list>(<argument><expr><name><name>results</name><operator>-&gt;</operator><name>variable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>mmerror</name><argument_list>(<argument><expr><name>PARSE_ERROR</name></expr></argument>, <argument><expr><name>ET_WARNING</name></expr></argument>, <argument><expr><literal type="string">"descriptor header item \"%d\" does not exist"</literal></expr></argument>, <argument><expr><name><name>results</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>drop_assignments</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>base_yyout</name></expr></argument>, <argument><expr><literal type="string">"));\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>whenever_action</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>descriptor_item_name</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>ECPGdtype</name></name></type> <name>itemcode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>itemcode</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>ECPGd_cardinality</name></expr>:</case>
			<return>return <expr><literal type="string">"CARDINALITY"</literal></expr>;</return>
		<case>case <expr><name>ECPGd_count</name></expr>:</case>
			<return>return <expr><literal type="string">"COUNT"</literal></expr>;</return>
		<case>case <expr><name>ECPGd_data</name></expr>:</case>
			<return>return <expr><literal type="string">"DATA"</literal></expr>;</return>
		<case>case <expr><name>ECPGd_di_code</name></expr>:</case>
			<return>return <expr><literal type="string">"DATETIME_INTERVAL_CODE"</literal></expr>;</return>
		<case>case <expr><name>ECPGd_di_precision</name></expr>:</case>
			<return>return <expr><literal type="string">"DATETIME_INTERVAL_PRECISION"</literal></expr>;</return>
		<case>case <expr><name>ECPGd_indicator</name></expr>:</case>
			<return>return <expr><literal type="string">"INDICATOR"</literal></expr>;</return>
		<case>case <expr><name>ECPGd_key_member</name></expr>:</case>
			<return>return <expr><literal type="string">"KEY_MEMBER"</literal></expr>;</return>
		<case>case <expr><name>ECPGd_length</name></expr>:</case>
			<return>return <expr><literal type="string">"LENGTH"</literal></expr>;</return>
		<case>case <expr><name>ECPGd_name</name></expr>:</case>
			<return>return <expr><literal type="string">"NAME"</literal></expr>;</return>
		<case>case <expr><name>ECPGd_nullable</name></expr>:</case>
			<return>return <expr><literal type="string">"NULLABLE"</literal></expr>;</return>
		<case>case <expr><name>ECPGd_octet</name></expr>:</case>
			<return>return <expr><literal type="string">"OCTET_LENGTH"</literal></expr>;</return>
		<case>case <expr><name>ECPGd_precision</name></expr>:</case>
			<return>return <expr><literal type="string">"PRECISION"</literal></expr>;</return>
		<case>case <expr><name>ECPGd_ret_length</name></expr>:</case>
			<return>return <expr><literal type="string">"RETURNED_LENGTH"</literal></expr>;</return>
		<case>case <expr><name>ECPGd_ret_octet</name></expr>:</case>
			<return>return <expr><literal type="string">"RETURNED_OCTET_LENGTH"</literal></expr>;</return>
		<case>case <expr><name>ECPGd_scale</name></expr>:</case>
			<return>return <expr><literal type="string">"SCALE"</literal></expr>;</return>
		<case>case <expr><name>ECPGd_type</name></expr>:</case>
			<return>return <expr><literal type="string">"TYPE"</literal></expr>;</return>
		<default>default:</default>
			<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>output_set_descr</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>desc_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>assignment</name></name> <modifier>*</modifier></type><name>results</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>base_yyout</name></expr></argument>, <argument><expr><literal type="string">"{ ECPGset_desc(__LINE__, %s, %s,"</literal></expr></argument>, <argument><expr><name>desc_name</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>results</name> <operator>=</operator> <name>assignments</name></expr>;</init> <condition><expr><name>results</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>results</name> <operator>=</operator> <name><name>results</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>variable</name></name> <modifier>*</modifier></type><name>v</name> <init>= <expr><call><name>find_variable</name><argument_list>(<argument><expr><name><name>results</name><operator>-&gt;</operator><name>variable</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<switch>switch <condition>(<expr><name><name>results</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>ECPGd_cardinality</name></expr>:</case>
			<case>case <expr><name>ECPGd_di_code</name></expr>:</case>
			<case>case <expr><name>ECPGd_di_precision</name></expr>:</case>
			<case>case <expr><name>ECPGd_precision</name></expr>:</case>
			<case>case <expr><name>ECPGd_scale</name></expr>:</case>
				<expr_stmt><expr><call><name>mmfatal</name><argument_list>(<argument><expr><name>PARSE_ERROR</name></expr></argument>, <argument><expr><literal type="string">"descriptor item \"%s\" is not implemented"</literal></expr></argument>,
						<argument><expr><call><name>descriptor_item_name</name><argument_list>(<argument><expr><name><name>results</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>ECPGd_key_member</name></expr>:</case>
			<case>case <expr><name>ECPGd_name</name></expr>:</case>
			<case>case <expr><name>ECPGd_nullable</name></expr>:</case>
			<case>case <expr><name>ECPGd_octet</name></expr>:</case>
			<case>case <expr><name>ECPGd_ret_length</name></expr>:</case>
			<case>case <expr><name>ECPGd_ret_octet</name></expr>:</case>
				<expr_stmt><expr><call><name>mmfatal</name><argument_list>(<argument><expr><name>PARSE_ERROR</name></expr></argument>, <argument><expr><literal type="string">"descriptor item \"%s\" cannot be set"</literal></expr></argument>,
						<argument><expr><call><name>descriptor_item_name</name><argument_list>(<argument><expr><name><name>results</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>ECPGd_data</name></expr>:</case>
			<case>case <expr><name>ECPGd_indicator</name></expr>:</case>
			<case>case <expr><name>ECPGd_length</name></expr>:</case>
			<case>case <expr><name>ECPGd_type</name></expr>:</case>
				<block>{<block_content>
					<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>str_zero</name> <init>= <expr><call><name>mm_strdup</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

					<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>base_yyout</name></expr></argument>, <argument><expr><literal type="string">"%s,"</literal></expr></argument>, <argument><expr><call><name>get_dtype</name><argument_list>(<argument><expr><name><name>results</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>ECPGdump_a_type</name><argument_list>(<argument><expr><name>base_yyout</name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>brace_level</name></name></expr></argument>,
									<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>str_zero</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>str_zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block>
				<break>break;</break>

			<default>default:</default>
				<empty_stmt>;</empty_stmt>
		</block_content>}</block></switch>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>drop_assignments</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"ECPGd_EODT);\n"</literal></expr></argument>, <argument><expr><name>base_yyout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>whenever_action</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>|</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* I consider dynamic allocation overkill since at most two descriptor
   variables are possible per statement. (input and output descriptor)
   And descriptors are no normal variables, so they don't belong into
   the variable list.
*/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_DESCRIPTOR_NAMELEN</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>
<function><type><name><name>struct</name> <name>variable</name></name> <modifier>*</modifier></type>
<name>descriptor_variable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>descriptor_names</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>MAX_DESCRIPTOR_NAMELEN</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>ECPGtype</name></name></type> <name>descriptor_type</name> <init>= <expr><block>{<expr><name>ECPGt_descriptor</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><block>{<expr><name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>variable</name></name></type> <name><name>varspace</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{
		<expr><block>{<expr><name><name>descriptor_names</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><operator>&amp;</operator><name>descriptor_type</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
		<expr><block>{<expr><name><name>descriptor_names</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><operator>&amp;</operator><name>descriptor_type</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
	}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name><name>descriptor_names</name><index>[<expr><name>input</name></expr>]</index></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>descriptor_names</name><index>[<expr><name>input</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>&amp;</operator><name><name>varspace</name><index>[<expr><name>input</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>variable</name></name> <modifier>*</modifier></type>
<name>sqlda_variable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>variable</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator>struct <name>variable</name> <operator>*</operator><operator>)</operator> <call><name>mm_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>variable</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>mm_strdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <operator>(</operator>struct <name>ECPGtype</name> <operator>*</operator><operator>)</operator> <call><name>mm_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ECPGtype</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>ECPGt_sqlda</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>struct_sizeof</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>counter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>brace_level</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>
</unit>
