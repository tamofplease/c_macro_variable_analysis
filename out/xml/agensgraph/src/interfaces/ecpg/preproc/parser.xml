<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/interfaces/ecpg/preproc/parser.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * parser.c
 *		Main entry point/driver for PostgreSQL grammar
 *
 * This should match src/backend/parser/parser.c, except that we do not
 * need to bother with re-entrant interfaces.
 *
 * Note: ECPG doesn't report error location like the backend does.
 * This file will need work if we ever want it to.
 *
 *
 * Portions Copyright (c) 1996-2020, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * IDENTIFICATION
 *	  src/interfaces/ecpg/preproc/parser.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"preproc_extern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"preproc.h"</cpp:file></cpp:include>


<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>have_lookahead</name></decl>;</decl_stmt>		<comment type="block">/* is lookahead info valid? */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>	<name>lookahead_token</name></decl>;</decl_stmt>	<comment type="block">/* one-token lookahead */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>YYSTYPE</name></type> <name>lookahead_yylval</name></decl>;</decl_stmt>	<comment type="block">/* yylval for lookahead token */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>YYLTYPE</name></type> <name>lookahead_yylloc</name></decl>;</decl_stmt>	<comment type="block">/* yylloc for lookahead token */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>lookahead_yytext</name></decl>;</decl_stmt>	<comment type="block">/* start current token */</comment>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>check_uescapechar</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>escape</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>ecpg_isspace</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/*
 * Intermediate filter between parser and base lexer (base_yylex in scan.l).
 *
 * This filter is needed because in some cases the standard SQL grammar
 * requires more than one token lookahead.  We reduce these cases to one-token
 * lookahead by replacing tokens here, in order to keep the grammar LALR(1).
 *
 * Using a filter is simpler than trying to recognize multiword tokens
 * directly in scan.l, because we'd have to allow for comments between the
 * words.  Furthermore it's not clear how to do that without re-introducing
 * scanner backtrack, which would cost more performance than this filter
 * layer does.
 *
 * We also use this filter to convert UIDENT and USCONST sequences into
 * plain IDENT and SCONST tokens.  While that could be handled by additional
 * productions in the main grammar, it's more efficient to do it like this.
 */</comment>
<function><type><name>int</name></type>
<name>filtered_base_yylex</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>cur_token</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>next_token</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>YYSTYPE</name></type>		<name>cur_yylval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>YYLTYPE</name></type>		<name>cur_yylloc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>cur_yytext</name></decl>;</decl_stmt>

	<comment type="block">/* Get next token --- we might already have it */</comment>
	<if_stmt><if>if <condition>(<expr><name>have_lookahead</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>cur_token</name> <operator>=</operator> <name>lookahead_token</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>base_yylval</name> <operator>=</operator> <name>lookahead_yylval</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>base_yylloc</name> <operator>=</operator> <name>lookahead_yylloc</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>base_yytext</name> <operator>=</operator> <name>lookahead_yytext</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>have_lookahead</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>cur_token</name> <operator>=</operator> <call><name>base_yylex</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="block">/*
	 * If this token isn't one that requires lookahead, just return it.
	 */</comment>
	<switch>switch <condition>(<expr><name>cur_token</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>NOT</name></expr>:</case>
		<case>case <expr><name>NULLS_P</name></expr>:</case>
		<case>case <expr><name>WITH</name></expr>:</case>
		<case>case <expr><name>UIDENT</name></expr>:</case>
		<case>case <expr><name>USCONST</name></expr>:</case>
			<break>break;</break>
		<default>default:</default>
			<return>return <expr><name>cur_token</name></expr>;</return>
	</block_content>}</block></switch>

	<comment type="block">/* Save and restore lexer output variables around the call */</comment>
	<expr_stmt><expr><name>cur_yylval</name> <operator>=</operator> <name>base_yylval</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cur_yylloc</name> <operator>=</operator> <name>base_yylloc</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cur_yytext</name> <operator>=</operator> <name>base_yytext</name></expr>;</expr_stmt>

	<comment type="block">/* Get next token, saving outputs into lookahead variables */</comment>
	<expr_stmt><expr><name>next_token</name> <operator>=</operator> <call><name>base_yylex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>lookahead_token</name> <operator>=</operator> <name>next_token</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>lookahead_yylval</name> <operator>=</operator> <name>base_yylval</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>lookahead_yylloc</name> <operator>=</operator> <name>base_yylloc</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>lookahead_yytext</name> <operator>=</operator> <name>base_yytext</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>base_yylval</name> <operator>=</operator> <name>cur_yylval</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>base_yylloc</name> <operator>=</operator> <name>cur_yylloc</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>base_yytext</name> <operator>=</operator> <name>cur_yytext</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>have_lookahead</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<comment type="block">/* Replace cur_token if needed, based on lookahead */</comment>
	<switch>switch <condition>(<expr><name>cur_token</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>NOT</name></expr>:</case>
			<comment type="block">/* Replace NOT by NOT_LA if it's followed by BETWEEN, IN, etc */</comment>
			<switch>switch <condition>(<expr><name>next_token</name></expr>)</condition>
			<block>{<block_content>
				<case>case <expr><name>BETWEEN</name></expr>:</case>
				<case>case <expr><name>IN_P</name></expr>:</case>
				<case>case <expr><name>LIKE</name></expr>:</case>
				<case>case <expr><name>ILIKE</name></expr>:</case>
				<case>case <expr><name>SIMILAR</name></expr>:</case>
					<expr_stmt><expr><name>cur_token</name> <operator>=</operator> <name>NOT_LA</name></expr>;</expr_stmt>
					<break>break;</break>
			</block_content>}</block></switch>
			<break>break;</break>

		<case>case <expr><name>NULLS_P</name></expr>:</case>
			<comment type="block">/* Replace NULLS_P by NULLS_LA if it's followed by FIRST or LAST */</comment>
			<switch>switch <condition>(<expr><name>next_token</name></expr>)</condition>
			<block>{<block_content>
				<case>case <expr><name>FIRST_P</name></expr>:</case>
				<case>case <expr><name>LAST_P</name></expr>:</case>
					<expr_stmt><expr><name>cur_token</name> <operator>=</operator> <name>NULLS_LA</name></expr>;</expr_stmt>
					<break>break;</break>
			</block_content>}</block></switch>
			<break>break;</break>

		<case>case <expr><name>WITH</name></expr>:</case>
			<comment type="block">/* Replace WITH by WITH_LA if it's followed by TIME or ORDINALITY */</comment>
			<switch>switch <condition>(<expr><name>next_token</name></expr>)</condition>
			<block>{<block_content>
				<case>case <expr><name>TIME</name></expr>:</case>
				<case>case <expr><name>ORDINALITY</name></expr>:</case>
					<expr_stmt><expr><name>cur_token</name> <operator>=</operator> <name>WITH_LA</name></expr>;</expr_stmt>
					<break>break;</break>
			</block_content>}</block></switch>
			<break>break;</break>
		<case>case <expr><name>UIDENT</name></expr>:</case>
		<case>case <expr><name>USCONST</name></expr>:</case>
			<comment type="block">/* Look ahead for UESCAPE */</comment>
			<if_stmt><if>if <condition>(<expr><name>next_token</name> <operator>==</operator> <name>UESCAPE</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* Yup, so get third token, which had better be SCONST */</comment>
				<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>escstr</name></decl>;</decl_stmt>

				<comment type="block">/*
				 * Again save and restore lexer output variables around the
				 * call
				 */</comment>
				<expr_stmt><expr><name>cur_yylval</name> <operator>=</operator> <name>base_yylval</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>cur_yylloc</name> <operator>=</operator> <name>base_yylloc</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>cur_yytext</name> <operator>=</operator> <name>base_yytext</name></expr>;</expr_stmt>

				<comment type="block">/* Get third token */</comment>
				<expr_stmt><expr><name>next_token</name> <operator>=</operator> <call><name>base_yylex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><name>next_token</name> <operator>!=</operator> <name>SCONST</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>mmerror</name><argument_list>(<argument><expr><name>PARSE_ERROR</name></expr></argument>, <argument><expr><name>ET_ERROR</name></expr></argument>, <argument><expr><literal type="string">"UESCAPE must be followed by a simple string literal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<comment type="block">/*
				 * Save and check escape string, which the scanner returns
				 * with quotes
				 */</comment>
				<expr_stmt><expr><name>escstr</name> <operator>=</operator> <name><name>base_yylval</name><operator>.</operator><name>str</name></name></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>escstr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">3</literal> <operator>||</operator> <operator>!</operator><call><name>check_uescapechar</name><argument_list>(<argument><expr><name><name>escstr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>mmerror</name><argument_list>(<argument><expr><name>PARSE_ERROR</name></expr></argument>, <argument><expr><name>ET_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid Unicode escape character"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<expr_stmt><expr><name>base_yylval</name> <operator>=</operator> <name>cur_yylval</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>base_yylloc</name> <operator>=</operator> <name>cur_yylloc</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>base_yytext</name> <operator>=</operator> <name>cur_yytext</name></expr>;</expr_stmt>

				<comment type="block">/* Combine 3 tokens into 1 */</comment>
				<expr_stmt><expr><name><name>base_yylval</name><operator>.</operator><name>str</name></name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"%s UESCAPE %s"</literal></expr></argument>, <argument><expr><name><name>base_yylval</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><name>escstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/* Clear have_lookahead, thereby consuming all three tokens */</comment>
				<expr_stmt><expr><name>have_lookahead</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>cur_token</name> <operator>==</operator> <name>UIDENT</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>cur_token</name> <operator>=</operator> <name>IDENT</name></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><name>cur_token</name> <operator>==</operator> <name>USCONST</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>cur_token</name> <operator>=</operator> <name>SCONST</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<return>return <expr><name>cur_token</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * check_uescapechar() and ecpg_isspace() should match their equivalents
 * in pgc.l.
 */</comment>

<comment type="block">/* is 'escape' acceptable as Unicode escape character (UESCAPE syntax) ? */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>check_uescapechar</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>escape</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>isxdigit</name><argument_list>(<argument><expr><name>escape</name></expr></argument>)</argument_list></call>
		<operator>||</operator> <name>escape</name> <operator>==</operator> <literal type="char">'+'</literal>
		<operator>||</operator> <name>escape</name> <operator>==</operator> <literal type="char">'\''</literal>
		<operator>||</operator> <name>escape</name> <operator>==</operator> <literal type="char">'"'</literal>
		<operator>||</operator> <call><name>ecpg_isspace</name><argument_list>(<argument><expr><name>escape</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * ecpg_isspace() --- return true if flex scanner considers char whitespace
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>ecpg_isspace</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator>
		<name>ch</name> <operator>==</operator> <literal type="char">'\t'</literal> <operator>||</operator>
		<name>ch</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator>
		<name>ch</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator>
		<name>ch</name> <operator>==</operator> <literal type="char">'\f'</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>
</unit>
