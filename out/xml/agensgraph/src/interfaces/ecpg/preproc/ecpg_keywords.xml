<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/interfaces/ecpg/preproc/ecpg_keywords.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * ecpg_keywords.c
 *	  lexical token lookup for reserved words in postgres embedded SQL
 *
 * IDENTIFICATION
 *	  src/interfaces/ecpg/preproc/ecpg_keywords.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<comment type="block">/* ScanKeywordList lookup data for ECPG keywords */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ecpg_kwlist_d.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"preproc_extern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"preproc.h"</cpp:file></cpp:include>

<comment type="block">/* Token codes for ECPG keywords */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PG_KEYWORD</name><parameter_list>(<parameter><type><name>kwname</name></type></parameter>, <parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>value,</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16</name></type> <name><name>ECPGScanKeywordTokens</name><index>[]</index></name> <init>= <expr><block>{
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ecpg_kwlist.h"</cpp:file></cpp:include>
}</block></expr></init></decl>;</decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PG_KEYWORD</name></cpp:undef>


<comment type="block">/*
 * ScanECPGKeywordLookup - see if a given word is a keyword
 *
 * Returns the token value of the keyword, or -1 if no match.
 *
 * Keywords are matched using the same case-folding rules as in the backend.
 */</comment>
<function><type><name>int</name></type>
<name>ScanECPGKeywordLookup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>kwnum</name></decl>;</decl_stmt>

	<comment type="block">/* First check SQL symbols defined by the backend. */</comment>
	<expr_stmt><expr><name>kwnum</name> <operator>=</operator> <call><name>ScanKeywordLookup</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ScanKeywords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>kwnum</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name><name>SQLScanKeywordTokens</name><index>[<expr><name>kwnum</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Try ECPG-specific keywords. */</comment>
	<expr_stmt><expr><name>kwnum</name> <operator>=</operator> <call><name>ScanKeywordLookup</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ScanECPGKeywords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>kwnum</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name><name>ECPGScanKeywordTokens</name><index>[<expr><name>kwnum</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
</unit>
