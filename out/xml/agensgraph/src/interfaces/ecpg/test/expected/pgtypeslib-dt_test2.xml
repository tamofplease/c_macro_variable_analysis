<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/interfaces/ecpg/test/expected/pgtypeslib-dt_test2.c"><comment type="block">/* Processed by ecpg (regression mode) */</comment>
<comment type="block">/* These include files are added by the preprocessor */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ecpglib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ecpgerrno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sqlca.h&gt;</cpp:file></cpp:include>
<comment type="block">/* End of automatic include section */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECPGdebug</name><parameter_list>(<parameter><type><name>X</name></type></parameter>,<parameter><type><name>Y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ECPGdebug((X)+100,(Y))</cpp:value></cpp:define>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1</cpp:number> <cpp:file>"dt_test2.pgc"</cpp:file></cpp:line>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pgtypes_date.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pgtypes_timestamp.h&gt;</cpp:file></cpp:include>


<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1</cpp:number> <cpp:file>"regression.h"</cpp:file></cpp:line>






<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>8</cpp:number> <cpp:file>"dt_test2.pgc"</cpp:file></cpp:line>


<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>dates</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"19990108foobar"</literal></expr>,
				  <expr><literal type="string">"19990108 foobar"</literal></expr>,
				  <expr><literal type="string">"1999-01-08 foobar"</literal></expr>,
				  <expr><literal type="string">"January 8, 1999"</literal></expr>,
				  <expr><literal type="string">"1999-01-08"</literal></expr>,
				  <expr><literal type="string">"1/8/1999"</literal></expr>,
				  <expr><literal type="string">"1/18/1999"</literal></expr>,
				  <expr><literal type="string">"01/02/03"</literal></expr>,
				  <expr><literal type="string">"1999-Jan-08"</literal></expr>,
				  <expr><literal type="string">"Jan-08-1999"</literal></expr>,
				  <expr><literal type="string">"08-Jan-1999"</literal></expr>,
				  <expr><literal type="string">"99-Jan-08"</literal></expr>,
				  <expr><literal type="string">"08-Jan-99"</literal></expr>,
				  <expr><literal type="string">"08-Jan-06"</literal></expr>,
				  <expr><literal type="string">"Jan-08-99"</literal></expr>,
				  <expr><literal type="string">"19990108"</literal></expr>,
				  <expr><literal type="string">"990108"</literal></expr>,
				  <expr><literal type="string">"1999.008"</literal></expr>,
				  <expr><literal type="string">"J2451187"</literal></expr>,
				  <expr><literal type="string">"January 8, 99 BC"</literal></expr>,
				  <comment type="block">/*
				   * Maximize space usage in ParseDateTime() with 25
				   * (MAXDATEFIELDS) fields and 128 (MAXDATELEN) total length.
				   */</comment>
				  <expr><literal type="string">"........................Xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"</literal>
				  <literal type="string">"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"</literal></expr>,
				  <comment type="block">/* 26 fields */</comment>
				  <expr><literal type="string">".........................aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"</literal>
				  <literal type="string">"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"</literal></expr>,
				  <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* do not conflict with libc "times" symbol */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>times</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"0:04"</literal></expr>,
				  <expr><literal type="string">"1:59 PDT"</literal></expr>,
				  <expr><literal type="string">"13:24:40 -8:00"</literal></expr>,
				  <expr><literal type="string">"13:24:40.495+3"</literal></expr>,
				  <expr><literal type="string">"13:24:40.123456123+3"</literal></expr>,
				  <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>intervals</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"1 minute"</literal></expr>,
					  <expr><literal type="string">"1 12:59:10"</literal></expr>,
					  <expr><literal type="string">"2 day 12 hour 59 minute 10 second"</literal></expr>,
					  <expr><literal type="string">"1 days 12 hrs 59 mins 10 secs"</literal></expr>,
					  <expr><literal type="string">"1 days 1 hours 1 minutes 1 seconds"</literal></expr>,
					  <expr><literal type="string">"1 year 59 mins"</literal></expr>,
					  <expr><literal type="string">"1 year 59 mins foobar"</literal></expr>,
					  <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* exec sql begin declare section */</comment>
		 
		  
		 
		 
		 
	
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>62</cpp:number> <cpp:file>"dt_test2.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>date</name></type> <name>date1</name></decl> ;</decl_stmt>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>63</cpp:number> <cpp:file>"dt_test2.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>timestamp</name></type> <name>ts1</name></decl> , <decl><type ref="prev"/><name>ts2</name></decl> ;</decl_stmt>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>64</cpp:number> <cpp:file>"dt_test2.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>text</name></decl> ;</decl_stmt>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>65</cpp:number> <cpp:file>"dt_test2.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>interval</name> <modifier>*</modifier></type> <name>i1</name></decl> ;</decl_stmt>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>66</cpp:number> <cpp:file>"dt_test2.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>date</name> <modifier>*</modifier></type> <name>dc</name></decl> ;</decl_stmt>
<comment type="block">/* exec sql end declare section */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>67</cpp:number> <cpp:file>"dt_test2.pgc"</cpp:file></cpp:line>


	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>endptr</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ECPGdebug</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ts1</name> <operator>=</operator> <call><name>PGTYPEStimestamp_from_asc</name><argument_list>(<argument><expr><literal type="string">"2003-12-04 17:34:29"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>PGTYPEStimestamp_to_asc</name><argument_list>(<argument><expr><name>ts1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"timestamp: %s\n"</literal></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PGTYPESchar_free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>date1</name> <operator>=</operator> <call><name>PGTYPESdate_from_timestamp</name><argument_list>(<argument><expr><name>ts1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>dc</name> <operator>=</operator> <call><name>PGTYPESdate_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>dc</name> <operator>=</operator> <name>date1</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>PGTYPESdate_to_asc</name><argument_list>(<argument><expr><operator>*</operator><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Date of timestamp: %s\n"</literal></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PGTYPESchar_free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PGTYPESdate_free</name><argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>dates</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>bool</name></type> <name>err</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>date1</name> <operator>=</operator> <call><name>PGTYPESdate_from_asc</name><argument_list>(<argument><expr><name><name>dates</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>date1</name> <operator>==</operator> <name>INT_MIN</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>err</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>PGTYPESdate_to_asc</name><argument_list>(<argument><expr><name>date1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Date[%d]: %s (%c - %c)\n"</literal></expr></argument>,
					<argument><expr><name>i</name></expr></argument>, <argument><expr><ternary><condition><expr><name>err</name></expr> ?</condition><then> <expr><literal type="string">"-"</literal></expr> </then><else>: <expr><name>text</name></expr></else></ternary></expr></argument>,
					<argument><expr><ternary><condition><expr><name>endptr</name></expr> ?</condition><then> <expr><literal type="char">'N'</literal></expr> </then><else>: <expr><literal type="char">'Y'</literal></expr></else></ternary></expr></argument>,
					<argument><expr><ternary><condition><expr><name>err</name></expr> ?</condition><then> <expr><literal type="char">'T'</literal></expr> </then><else>: <expr><literal type="char">'F'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PGTYPESchar_free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>err</name></expr>)</condition>
		<block>{<block_content>
			<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>times</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>dates</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call>
						<operator>+</operator> <literal type="number">1</literal>
						<operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>times</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call>
						<operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>t</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="string">"%s %s"</literal></expr></argument>, <argument><expr><name><name>dates</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>times</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>ts1</name> <operator>=</operator> <call><name>PGTYPEStimestamp_from_asc</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>PGTYPEStimestamp_to_asc</name><argument_list>(<argument><expr><name>ts1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"TS[%d,%d]: %s\n"</literal></expr></argument>,
				       <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><ternary><condition><expr><name>errno</name></expr> ?</condition><then> <expr><literal type="string">"-"</literal></expr> </then><else>: <expr><name>text</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>PGTYPESchar_free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>ts1</name> <operator>=</operator> <call><name>PGTYPEStimestamp_from_asc</name><argument_list>(<argument><expr><literal type="string">"2004-04-04 23:23:23"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>intervals</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>interval</name> <modifier>*</modifier></type><name>ic</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>i1</name> <operator>=</operator> <call><name>PGTYPESinterval_from_asc</name><argument_list>(<argument><expr><name><name>intervals</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>endptr</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"endptr set to %s\n"</literal></expr></argument>, <argument><expr><name>endptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>i1</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Error parsing interval %d\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>j</name> <operator>=</operator> <call><name>PGTYPEStimestamp_add_interval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ts1</name></expr></argument>, <argument><expr><name>i1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>PGTYPESinterval_to_asc</name><argument_list>(<argument><expr><name>i1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"interval[%d]: %s\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><ternary><condition><expr><name>text</name></expr> ?</condition><then> <expr><name>text</name></expr> </then><else>: <expr><literal type="string">"-"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PGTYPESchar_free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>ic</name> <operator>=</operator> <call><name>PGTYPESinterval_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PGTYPESinterval_copy</name><argument_list>(<argument><expr><name>i1</name></expr></argument>, <argument><expr><name>ic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>PGTYPESinterval_to_asc</name><argument_list>(<argument><expr><name>i1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"interval_copy[%d]: %s\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><ternary><condition><expr><name>text</name></expr> ?</condition><then> <expr><name>text</name></expr> </then><else>: <expr><literal type="string">"-"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PGTYPESchar_free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PGTYPESinterval_free</name><argument_list>(<argument><expr><name>ic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PGTYPESinterval_free</name><argument_list>(<argument><expr><name>i1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
