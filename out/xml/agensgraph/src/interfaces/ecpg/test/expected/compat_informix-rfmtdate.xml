<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/interfaces/ecpg/test/expected/compat_informix-rfmtdate.c"><comment type="block">/* Processed by ecpg (regression mode) */</comment>
<comment type="block">/* These include files are added by the preprocessor */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ecpglib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ecpgerrno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sqlca.h&gt;</cpp:file></cpp:include>
<comment type="block">/* Needed for informix compatibility */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ecpg_informix.h&gt;</cpp:file></cpp:include>
<comment type="block">/* End of automatic include section */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECPGdebug</name><parameter_list>(<parameter><type><name>X</name></type></parameter>,<parameter><type><name>Y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ECPGdebug((X)+100,(Y))</cpp:value></cpp:define>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1</cpp:number> <cpp:file>"rfmtdate.pgc"</cpp:file></cpp:line>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pgtypes_error.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sqltypes.h&gt;</cpp:file></cpp:include>

<comment type="block">/*
 * This file tests various forms of date-input/output by means of
 * rfmtdate / rdefmtdate / rstrdate
 */</comment>


<function_decl><type><specifier>static</specifier> <name>void</name></type>
<name>check_return</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ret</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>date_test_strdate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>date</name></type> <name>d</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>dbuf</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>rstrdate</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"r: %d "</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>rdatestr</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>dbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"q: %d "</literal></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>q</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"date %d: %s\n"</literal></expr></argument>, <argument><expr><name>i</name><operator>++</operator></expr></argument>, <argument><expr><name>dbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>check_return</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>date_test_defmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>dbuf</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>date</name></type> <name>d</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>q</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>rdefmtdate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"r: %d "</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>rdatestr</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>dbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"q: %d "</literal></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>q</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"date %d: %s\n"</literal></expr></argument>, <argument><expr><name>i</name><operator>++</operator></expr></argument>, <argument><expr><name>dbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>check_return</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>date_test_fmt</name><parameter_list>(<parameter><decl><type><name>date</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">200</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>rfmtdate</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"r: %d "</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>check_return</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"date: %d: %s\n"</literal></expr></argument>, <argument><expr><name>i</name><operator>++</operator></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>short</name></type> <name><name>mdy</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">11</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">1959</literal></expr> }</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>dbuf</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>date</name></type> <name>d</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ECPGdebug</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>rmdyjul</name><argument_list>(<argument><expr><name>mdy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"create: r: %d\n"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>rdatestr</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>dbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"date: %s\n"</literal></expr></argument>, <argument><expr><name>dbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* input mask is mmddyyyy */</comment>
	<expr_stmt><expr><call><name>date_test_strdate</name><argument_list>(<argument><expr><literal type="string">"12031994"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>date_test_strdate</name><argument_list>(<argument><expr><literal type="string">"9.6.1994"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>date_test_fmt</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"mmddyy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>date_test_fmt</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"ddmmyy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>date_test_fmt</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"yymmdd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>date_test_fmt</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"yy/mm/dd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>date_test_fmt</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"yy mm dd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>date_test_fmt</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"yy.mm.dd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>date_test_fmt</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">".mm.yyyy.dd."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>date_test_fmt</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"mmm. dd, yyyy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>date_test_fmt</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"mmm dd yyyy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>date_test_fmt</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"yyyy dd mm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>date_test_fmt</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"ddd, mmm. dd, yyyy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>date_test_fmt</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"(ddd) mmm. dd, yyyy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>date_test_defmt</name><argument_list>(<argument><expr><literal type="string">"ddmmyy"</literal></expr></argument>, <argument><expr><literal type="string">"21-2-54"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>date_test_defmt</name><argument_list>(<argument><expr><literal type="string">"ddmmyy"</literal></expr></argument>, <argument><expr><literal type="string">"2-12-54"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>date_test_defmt</name><argument_list>(<argument><expr><literal type="string">"ddmmyy"</literal></expr></argument>, <argument><expr><literal type="string">"20111954"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>date_test_defmt</name><argument_list>(<argument><expr><literal type="string">"ddmmyy"</literal></expr></argument>, <argument><expr><literal type="string">"130464"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>date_test_defmt</name><argument_list>(<argument><expr><literal type="string">"mmm.dd.yyyy"</literal></expr></argument>, <argument><expr><literal type="string">"MAR-12-1967"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>date_test_defmt</name><argument_list>(<argument><expr><literal type="string">"yy/mm/dd"</literal></expr></argument>, <argument><expr><literal type="string">"1954, February 3rd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>date_test_defmt</name><argument_list>(<argument><expr><literal type="string">"mmm.dd.yyyy"</literal></expr></argument>, <argument><expr><literal type="string">"041269"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>date_test_defmt</name><argument_list>(<argument><expr><literal type="string">"yy/mm/dd"</literal></expr></argument>, <argument><expr><literal type="string">"In the year 2525, in the month of July, mankind will be alive on the 28th day"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>date_test_defmt</name><argument_list>(<argument><expr><literal type="string">"dd-mm-yy"</literal></expr></argument>, <argument><expr><literal type="string">"I said on the 28th of July in the year 2525"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>date_test_defmt</name><argument_list>(<argument><expr><literal type="string">"mmm.dd.yyyy"</literal></expr></argument>, <argument><expr><literal type="string">"9/14/58"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>date_test_defmt</name><argument_list>(<argument><expr><literal type="string">"yy/mm/dd"</literal></expr></argument>, <argument><expr><literal type="string">"47/03/29"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>date_test_defmt</name><argument_list>(<argument><expr><literal type="string">"mmm.dd.yyyy"</literal></expr></argument>, <argument><expr><literal type="string">"oct 28 1975"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>date_test_defmt</name><argument_list>(<argument><expr><literal type="string">"mmddyy"</literal></expr></argument>, <argument><expr><literal type="string">"Nov 14th, 1985"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* ok: still contains dd mm yy */</comment>
	<expr_stmt><expr><call><name>date_test_defmt</name><argument_list>(<argument><expr><literal type="string">"bladdfoommbaryybong"</literal></expr></argument>, <argument><expr><literal type="string">"20/11/1954"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* 1994 is not a leap year, it accepts the date as 01-03-1994 */</comment>
	<expr_stmt><expr><call><name>date_test_defmt</name><argument_list>(<argument><expr><literal type="string">"ddmmyy"</literal></expr></argument>, <argument><expr><literal type="string">"29-02-1994"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ECPG_INFORMIX_ENOTDMY, need "dd", "mm" and "yy" */</comment>
	<expr_stmt><expr><call><name>date_test_defmt</name><argument_list>(<argument><expr><literal type="string">"dmy"</literal></expr></argument>, <argument><expr><literal type="string">"20/11/1954"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ECPG_INFORMIX_ENOSHORTDATE */</comment>
	<expr_stmt><expr><call><name>date_test_defmt</name><argument_list>(<argument><expr><literal type="string">"ddmmyy"</literal></expr></argument>, <argument><expr><literal type="string">"21254"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>date_test_defmt</name><argument_list>(<argument><expr><literal type="string">"ddmmyy"</literal></expr></argument>, <argument><expr><literal type="string">"    21254    "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ECPG_INFORMIX_BAD_DAY */</comment>
	<expr_stmt><expr><call><name>date_test_defmt</name><argument_list>(<argument><expr><literal type="string">"ddmmyy"</literal></expr></argument>, <argument><expr><literal type="string">"320494"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ECPG_INFORMIX_BAD_MONTH */</comment>
	<expr_stmt><expr><call><name>date_test_defmt</name><argument_list>(<argument><expr><literal type="string">"mm-yyyy-dd"</literal></expr></argument>, <argument><expr><literal type="string">"13-1993-21"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ECPG_INFORMIX_BAD_YEAR */</comment>
	<comment type="block">/* ??? */</comment>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>check_return</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ret</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch<condition>(<expr><name>ret</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>ECPG_INFORMIX_ENOTDMY</name></expr>:</case>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"(ECPG_INFORMIX_ENOTDMY)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ECPG_INFORMIX_ENOSHORTDATE</name></expr>:</case>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"(ECPG_INFORMIX_ENOSHORTDATE)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ECPG_INFORMIX_BAD_DAY</name></expr>:</case>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"(ECPG_INFORMIX_BAD_DAY)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ECPG_INFORMIX_BAD_MONTH</name></expr>:</case>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"(ECPG_INFORMIX_BAD_MONTH)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"(unknown ret: %d)"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
