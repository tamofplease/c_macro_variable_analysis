<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/interfaces/ecpg/test/expected/preproc-pointer_to_struct.c"><comment type="block">/* Processed by ecpg (regression mode) */</comment>
<comment type="block">/* These include files are added by the preprocessor */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ecpglib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ecpgerrno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sqlca.h&gt;</cpp:file></cpp:include>
<comment type="block">/* End of automatic include section */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECPGdebug</name><parameter_list>(<parameter><type><name>X</name></type></parameter>,<parameter><type><name>Y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ECPGdebug((X)+100,(Y))</cpp:value></cpp:define>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1</cpp:number> <cpp:file>"pointer_to_struct.pgc"</cpp:file></cpp:line>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>


<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1</cpp:number> <cpp:file>"regression.h"</cpp:file></cpp:line>






<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>4</cpp:number> <cpp:file>"pointer_to_struct.pgc"</cpp:file></cpp:line>


<comment type="block">/* exec sql whenever sqlerror  sqlprint ; */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>6</cpp:number> <cpp:file>"pointer_to_struct.pgc"</cpp:file></cpp:line>

<comment type="block">/* exec sql whenever sql_warning  sqlprint ; */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>7</cpp:number> <cpp:file>"pointer_to_struct.pgc"</cpp:file></cpp:line>

<comment type="block">/* exec sql whenever not found  sqlprint ; */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>8</cpp:number> <cpp:file>"pointer_to_struct.pgc"</cpp:file></cpp:line>


<typedef>typedef  <type><struct>struct <block>{ 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>13</cpp:number> <cpp:file>"pointer_to_struct.pgc"</cpp:file></cpp:line>
  <struct>struct <name>varchar_1</name>  <block>{ <decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>char</name></type> <name><name>arr</name><index>[ <expr><literal type="number">50</literal></expr> ]</index></name></decl>;</decl_stmt> }</block>  <decl><name>name</name></decl> ;</struct>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>14</cpp:number> <cpp:file>"pointer_to_struct.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>int</name></type> <name>phone</name></decl> ;</decl_stmt>
 }</block></struct></type> <name>customer</name> ;</typedef>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>15</cpp:number> <cpp:file>"pointer_to_struct.pgc"</cpp:file></cpp:line>


<typedef>typedef  <type><struct>struct <name>ind</name> <block>{ 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>20</cpp:number> <cpp:file>"pointer_to_struct.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>short</name></type> <name>name_ind</name></decl> ;</decl_stmt>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>21</cpp:number> <cpp:file>"pointer_to_struct.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>short</name></type> <name>phone_ind</name></decl> ;</decl_stmt>
 }</block></struct></type> <name>cust_ind</name> ;</typedef>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>22</cpp:number> <cpp:file>"pointer_to_struct.pgc"</cpp:file></cpp:line>


<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <comment type="block">/* exec sql begin declare section */</comment>
              
              
       
      
         
             
       <typedef>typedef <type><struct>struct <block>{ 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>31</cpp:number> <cpp:file>"pointer_to_struct.pgc"</cpp:file></cpp:line>
  <struct>struct <name>varchar_2</name>  <block>{ <decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>char</name></type> <name><name>arr</name><index>[ <expr><literal type="number">50</literal></expr> ]</index></name></decl>;</decl_stmt> }</block>  <decl><name>name</name></decl> ;</struct>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>32</cpp:number> <cpp:file>"pointer_to_struct.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>int</name></type> <name>phone</name></decl> ;</decl_stmt>
 }</block></struct></type>  <name>customer2</name> ;</typedef>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>33</cpp:number> <cpp:file>"pointer_to_struct.pgc"</cpp:file></cpp:line>

              

       
      
         
             
               

       
      
         
             
             

       
       
    
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>27</cpp:number> <cpp:file>"pointer_to_struct.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>customer</name> <modifier>*</modifier></type> <name>custs1</name> <init>= <expr><operator>(</operator> <name>customer</name> <operator>*</operator> <operator>)</operator> <call><name>malloc</name> <argument_list>( <argument><expr><sizeof>sizeof <argument_list>( <argument><expr><name>customer</name></expr></argument> )</argument_list></sizeof> <operator>*</operator> <literal type="number">10</literal></expr></argument> )</argument_list></call></expr></init></decl> ;</decl_stmt>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>28</cpp:number> <cpp:file>"pointer_to_struct.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>cust_ind</name> <modifier>*</modifier></type> <name>inds</name> <init>= <expr><operator>(</operator> <name>cust_ind</name> <operator>*</operator> <operator>)</operator> <call><name>malloc</name> <argument_list>( <argument><expr><sizeof>sizeof <argument_list>( <argument><expr><name>cust_ind</name></expr></argument> )</argument_list></sizeof> <operator>*</operator> <literal type="number">10</literal></expr></argument> )</argument_list></call></expr></init></decl> ;</decl_stmt>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>34</cpp:number> <cpp:file>"pointer_to_struct.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>customer2</name> <modifier>*</modifier></type> <name>custs2</name> <init>= <expr><operator>(</operator> <name>customer2</name> <operator>*</operator> <operator>)</operator> <call><name>malloc</name> <argument_list>( <argument><expr><sizeof>sizeof <argument_list>( <argument><expr><name>customer2</name></expr></argument> )</argument_list></sizeof> <operator>*</operator> <literal type="number">10</literal></expr></argument> )</argument_list></call></expr></init></decl> ;</decl_stmt>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>40</cpp:number> <cpp:file>"pointer_to_struct.pgc"</cpp:file></cpp:line>
 <struct>struct <name>customer3</name> <block>{ 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>38</cpp:number> <cpp:file>"pointer_to_struct.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>char</name></type> <name><name>name</name> <index>[ <expr><literal type="number">50</literal></expr> ]</index></name></decl> ;</decl_stmt>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>39</cpp:number> <cpp:file>"pointer_to_struct.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>int</name></type> <name>phone</name></decl> ;</decl_stmt>
 }</block> <decl><modifier>*</modifier> <name>custs3</name> <init>= <expr><operator>(</operator> struct <name>customer3</name> <operator>*</operator> <operator>)</operator> <call><name>malloc</name> <argument_list>( <argument><expr><sizeof>sizeof <argument_list>( <argument><expr>struct <name>customer3</name></expr></argument> )</argument_list></sizeof> <operator>*</operator> <literal type="number">10</literal></expr></argument> )</argument_list></call></expr></init></decl> ;</struct>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>46</cpp:number> <cpp:file>"pointer_to_struct.pgc"</cpp:file></cpp:line>
 <struct>struct <name>customer4</name> <block>{ 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>44</cpp:number> <cpp:file>"pointer_to_struct.pgc"</cpp:file></cpp:line>
  <struct>struct <name>varchar_3</name>  <block>{ <decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>char</name></type> <name><name>arr</name><index>[ <expr><literal type="number">50</literal></expr> ]</index></name></decl>;</decl_stmt> }</block>  <decl><name>name</name></decl> ;</struct>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>45</cpp:number> <cpp:file>"pointer_to_struct.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>int</name></type> <name>phone</name></decl> ;</decl_stmt>
 }</block> <decl><modifier>*</modifier> <name>custs4</name> <init>= <expr><operator>(</operator> struct <name>customer4</name> <operator>*</operator> <operator>)</operator> <call><name>malloc</name> <argument_list>( <argument><expr><sizeof>sizeof <argument_list>( <argument><expr>struct <name>customer4</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl> ;</struct>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>48</cpp:number> <cpp:file>"pointer_to_struct.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>int</name></type> <name>r</name></decl> ;</decl_stmt>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>49</cpp:number> <cpp:file>"pointer_to_struct.pgc"</cpp:file></cpp:line>
  <struct>struct <name>varchar_4</name>  <block>{ <decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>char</name></type> <name><name>arr</name><index>[ <expr><literal type="number">50</literal></expr> ]</index></name></decl>;</decl_stmt> }</block>  <decl><name><name>onlyname</name> <index>[ <expr><literal type="number">2</literal></expr> ]</index></name></decl> ;</struct>
<comment type="block">/* exec sql end declare section */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>50</cpp:number> <cpp:file>"pointer_to_struct.pgc"</cpp:file></cpp:line>


    <expr_stmt><expr><call><name>ECPGdebug</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <block>{<block_content> <expr_stmt><expr><call><name>ECPGconnect</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"ecpg1_regression"</literal></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>54</cpp:number> <cpp:file>"pointer_to_struct.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlwarn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'W'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>54</cpp:number> <cpp:file>"pointer_to_struct.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>54</cpp:number> <cpp:file>"pointer_to_struct.pgc"</cpp:file></cpp:line>


    <block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"create table customers ( c varchar ( 50 ) , p int )"</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>56</cpp:number> <cpp:file>"pointer_to_struct.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlwarn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'W'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>56</cpp:number> <cpp:file>"pointer_to_struct.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>56</cpp:number> <cpp:file>"pointer_to_struct.pgc"</cpp:file></cpp:line>

    <block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"insert into customers values ( 'John Doe' , '12345' )"</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>57</cpp:number> <cpp:file>"pointer_to_struct.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>==</operator> <name>ECPG_NOT_FOUND</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>57</cpp:number> <cpp:file>"pointer_to_struct.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlwarn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'W'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>57</cpp:number> <cpp:file>"pointer_to_struct.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>57</cpp:number> <cpp:file>"pointer_to_struct.pgc"</cpp:file></cpp:line>

    <block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"insert into customers values ( 'Jane Doe' , '67890' )"</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>58</cpp:number> <cpp:file>"pointer_to_struct.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>==</operator> <name>ECPG_NOT_FOUND</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>58</cpp:number> <cpp:file>"pointer_to_struct.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlwarn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'W'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>58</cpp:number> <cpp:file>"pointer_to_struct.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>58</cpp:number> <cpp:file>"pointer_to_struct.pgc"</cpp:file></cpp:line>


    <block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"select * from customers limit 2"</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, 
	<argument><expr><name>ECPGt_varchar</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>custs1</name><operator>-&gt;</operator><name>name</name></name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">50</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>customer</name></expr></argument> )</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_short</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>inds</name><operator>-&gt;</operator><name>name_ind</name></name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>( <argument><expr>struct <name>ind</name></expr></argument> )</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_int</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>custs1</name><operator>-&gt;</operator><name>phone</name></name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>customer</name></expr></argument> )</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_short</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>inds</name><operator>-&gt;</operator><name>phone_ind</name></name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>( <argument><expr>struct <name>ind</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>60</cpp:number> <cpp:file>"pointer_to_struct.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>==</operator> <name>ECPG_NOT_FOUND</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>60</cpp:number> <cpp:file>"pointer_to_struct.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlwarn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'W'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>60</cpp:number> <cpp:file>"pointer_to_struct.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>60</cpp:number> <cpp:file>"pointer_to_struct.pgc"</cpp:file></cpp:line>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"custs1:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>r</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>r</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
	    <expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">"name  - %s\n"</literal></expr></argument>, <argument><expr><name><name>custs1</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name><name>name</name><operator>.</operator><name>arr</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">"phone - %d\n"</literal></expr></argument>, <argument><expr><name><name>custs1</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>phone</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"select * from customers limit 2"</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, 
	<argument><expr><name>ECPGt_varchar</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>custs2</name><operator>-&gt;</operator><name>name</name></name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">50</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>customer2</name></expr></argument> )</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_short</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>inds</name><operator>-&gt;</operator><name>name_ind</name></name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>( <argument><expr>struct <name>ind</name></expr></argument> )</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_int</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>custs2</name><operator>-&gt;</operator><name>phone</name></name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>customer2</name></expr></argument> )</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_short</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>inds</name><operator>-&gt;</operator><name>phone_ind</name></name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>( <argument><expr>struct <name>ind</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>68</cpp:number> <cpp:file>"pointer_to_struct.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>==</operator> <name>ECPG_NOT_FOUND</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>68</cpp:number> <cpp:file>"pointer_to_struct.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlwarn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'W'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>68</cpp:number> <cpp:file>"pointer_to_struct.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>68</cpp:number> <cpp:file>"pointer_to_struct.pgc"</cpp:file></cpp:line>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\ncusts2:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>r</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>r</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
	    <expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">"name  - %s\n"</literal></expr></argument>, <argument><expr><name><name>custs2</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name><name>name</name><operator>.</operator><name>arr</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">"phone - %d\n"</literal></expr></argument>, <argument><expr><name><name>custs2</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>phone</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"select * from customers limit 2"</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, 
	<argument><expr><name>ECPGt_char</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>custs3</name><operator>-&gt;</operator><name>name</name></name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">50</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>( <argument><expr>struct <name>customer3</name></expr></argument> )</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_short</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>inds</name><operator>-&gt;</operator><name>name_ind</name></name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>( <argument><expr>struct <name>ind</name></expr></argument> )</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_int</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>custs3</name><operator>-&gt;</operator><name>phone</name></name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>( <argument><expr>struct <name>customer3</name></expr></argument> )</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_short</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>inds</name><operator>-&gt;</operator><name>phone_ind</name></name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>( <argument><expr>struct <name>ind</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>76</cpp:number> <cpp:file>"pointer_to_struct.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>==</operator> <name>ECPG_NOT_FOUND</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>76</cpp:number> <cpp:file>"pointer_to_struct.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlwarn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'W'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>76</cpp:number> <cpp:file>"pointer_to_struct.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>76</cpp:number> <cpp:file>"pointer_to_struct.pgc"</cpp:file></cpp:line>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\ncusts3:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>r</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>r</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
	    <expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">"name  - %s\n"</literal></expr></argument>, <argument><expr><name><name>custs3</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">"phone - %d\n"</literal></expr></argument>, <argument><expr><name><name>custs3</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>phone</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"select * from customers limit 1"</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, 
	<argument><expr><name>ECPGt_varchar</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>custs4</name><operator>-&gt;</operator><name>name</name></name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">50</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>( <argument><expr>struct <name>customer4</name></expr></argument> )</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_short</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>inds</name><operator>-&gt;</operator><name>name_ind</name></name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>( <argument><expr>struct <name>ind</name></expr></argument> )</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_int</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>custs4</name><operator>-&gt;</operator><name>phone</name></name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>( <argument><expr>struct <name>customer4</name></expr></argument> )</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_short</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>inds</name><operator>-&gt;</operator><name>phone_ind</name></name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>( <argument><expr>struct <name>ind</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>84</cpp:number> <cpp:file>"pointer_to_struct.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>==</operator> <name>ECPG_NOT_FOUND</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>84</cpp:number> <cpp:file>"pointer_to_struct.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlwarn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'W'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>84</cpp:number> <cpp:file>"pointer_to_struct.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>84</cpp:number> <cpp:file>"pointer_to_struct.pgc"</cpp:file></cpp:line>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\ncusts4:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">"name  - %s\n"</literal></expr></argument>, <argument><expr><name><name>custs4</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>arr</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">"phone - %d\n"</literal></expr></argument>, <argument><expr><name><name>custs4</name><operator>-&gt;</operator><name>phone</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"select c from customers limit 2"</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, 
	<argument><expr><name>ECPGt_varchar</name></expr></argument>,<argument><expr><operator>(</operator><name>onlyname</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">50</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">2</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>varchar_4</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>89</cpp:number> <cpp:file>"pointer_to_struct.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>==</operator> <name>ECPG_NOT_FOUND</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>89</cpp:number> <cpp:file>"pointer_to_struct.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlwarn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'W'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>89</cpp:number> <cpp:file>"pointer_to_struct.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>89</cpp:number> <cpp:file>"pointer_to_struct.pgc"</cpp:file></cpp:line>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nname:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>r</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>r</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
	    <expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">"name  - %s\n"</literal></expr></argument>, <argument><expr><name><name>onlyname</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>arr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <block>{<block_content> <expr_stmt><expr><call><name>ECPGdisconnect</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="string">"ALL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>96</cpp:number> <cpp:file>"pointer_to_struct.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlwarn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'W'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>96</cpp:number> <cpp:file>"pointer_to_struct.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>96</cpp:number> <cpp:file>"pointer_to_struct.pgc"</cpp:file></cpp:line>


	<comment type="block">/* All the memory will anyway be freed at the end */</comment>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
