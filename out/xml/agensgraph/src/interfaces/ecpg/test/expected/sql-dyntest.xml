<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/interfaces/ecpg/test/expected/sql-dyntest.c"><comment type="block">/* Processed by ecpg (regression mode) */</comment>
<comment type="block">/* These include files are added by the preprocessor */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ecpglib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ecpgerrno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sqlca.h&gt;</cpp:file></cpp:include>
<comment type="block">/* End of automatic include section */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECPGdebug</name><parameter_list>(<parameter><type><name>X</name></type></parameter>,<parameter><type><name>Y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ECPGdebug((X)+100,(Y))</cpp:value></cpp:define>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1</cpp:number> <cpp:file>"dyntest.pgc"</cpp:file></cpp:line>
<comment type="block">/* dynamic SQL test program
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>


<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1</cpp:number> <cpp:file>"sql3types.h"</cpp:file></cpp:line>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_ECPG_SQL3TYPES_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ECPG_SQL3TYPES_H</name></cpp:macro></cpp:define>

<comment type="block">/* SQL3 dynamic type codes */</comment>

<comment type="block">/* chapter 13.1 table 2: Codes used for SQL data types in Dynamic SQL */</comment>

<enum>enum
<block>{
	<decl><name>SQL3_CHARACTER</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
	<decl><name>SQL3_NUMERIC</name></decl>,
	<decl><name>SQL3_DECIMAL</name></decl>,
	<decl><name>SQL3_INTEGER</name></decl>,
	<decl><name>SQL3_SMALLINT</name></decl>,
	<decl><name>SQL3_FLOAT</name></decl>,
	<decl><name>SQL3_REAL</name></decl>,
	<decl><name>SQL3_DOUBLE_PRECISION</name></decl>,
	<decl><name>SQL3_DATE_TIME_TIMESTAMP</name></decl>,
	<decl><name>SQL3_INTERVAL</name></decl>,				<comment type="block">/* 10 */</comment>
	<decl><name>SQL3_CHARACTER_VARYING</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>,
	<decl><name>SQL3_ENUMERATED</name></decl>,
	<decl><name>SQL3_BIT</name></decl>,
	<decl><name>SQL3_BIT_VARYING</name></decl>,
	<decl><name>SQL3_BOOLEAN</name></decl>,
	<decl><name>SQL3_abstract</name></decl>
	<comment type="block">/* the rest is xLOB stuff */</comment>
}</block>;</enum>

<comment type="block">/* chapter 13.1 table 3: Codes associated with datetime data types in Dynamic SQL */</comment>

<enum>enum
<block>{
	<decl><name>SQL3_DDT_DATE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
	<decl><name>SQL3_DDT_TIME</name></decl>,
	<decl><name>SQL3_DDT_TIMESTAMP</name></decl>,
	<decl><name>SQL3_DDT_TIME_WITH_TIME_ZONE</name></decl>,
	<decl><name>SQL3_DDT_TIMESTAMP_WITH_TIME_ZONE</name></decl>,

	<decl><name>SQL3_DDT_ILLEGAL</name></decl>			<comment type="block">/* not a datetime data type (not part of
								 * standard) */</comment>
}</block>;</enum>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* !_ECPG_SQL3TYPES_H */</comment>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>7</cpp:number> <cpp:file>"dyntest.pgc"</cpp:file></cpp:line>


<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1</cpp:number> <cpp:file>"sqlca.h"</cpp:file></cpp:line>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>POSTGRES_SQLCA_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POSTGRES_SQLCA_H</name></cpp:macro></cpp:define>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PGDLLIMPORT</name></cpp:ifndef>
<cpp:if>#<cpp:directive>if</cpp:directive>  <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PGDLLIMPORT</name></cpp:macro> <cpp:value>__declspec (dllimport)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PGDLLIMPORT</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* __CYGWIN__ */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* PGDLLIMPORT */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SQLERRMC_LEN</name></cpp:macro>	<cpp:value>150</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern <literal type="string">"C"</literal>
<block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>sqlca_t</name>
<block>{
	<decl_stmt><decl><type><name>char</name></type>		<name><name>sqlcaid</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type>		<name>sqlabc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type>		<name>sqlcode</name></decl>;</decl_stmt>
	<struct>struct
	<block>{
		<decl_stmt><decl><type><name>int</name></type>			<name>sqlerrml</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name></type>		<name><name>sqlerrmc</name><index>[<expr><name>SQLERRMC_LEN</name></expr>]</index></name></decl>;</decl_stmt>
	}</block>			<decl><name>sqlerrm</name></decl>;</struct>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>sqlerrp</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type>		<name><name>sqlerrd</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
	<comment type="block">/* Element 0: empty						*/</comment>
	<comment type="block">/* 1: OID of processed tuple if applicable			*/</comment>
	<comment type="block">/* 2: number of rows processed				*/</comment>
	<comment type="block">/* after an INSERT, UPDATE or				*/</comment>
	<comment type="block">/* DELETE statement					*/</comment>
	<comment type="block">/* 3: empty						*/</comment>
	<comment type="block">/* 4: empty						*/</comment>
	<comment type="block">/* 5: empty						*/</comment>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>sqlwarn</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
	<comment type="block">/* Element 0: set to 'W' if at least one other is 'W'	*/</comment>
	<comment type="block">/* 1: if 'W' at least one character string		*/</comment>
	<comment type="block">/* value was truncated when it was			*/</comment>
	<comment type="block">/* stored into a host variable.             */</comment>

	<comment type="block">/*
	 * 2: if 'W' a (hopefully) non-fatal notice occurred
	 */</comment>	<comment type="block">/* 3: empty */</comment>
	<comment type="block">/* 4: empty						*/</comment>
	<comment type="block">/* 5: empty						*/</comment>
	<comment type="block">/* 6: empty						*/</comment>
	<comment type="block">/* 7: empty						*/</comment>

	<decl_stmt><decl><type><name>char</name></type>		<name><name>sqlstate</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><name><name>struct</name> <name>sqlca_t</name></name> <modifier>*</modifier></type><name>ECPGget_sqlca</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>POSTGRES_ECPG_INTERNAL</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sqlca</name></cpp:macro> <cpp:value>(*ECPGget_sqlca())</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>8</cpp:number> <cpp:file>"dyntest.pgc"</cpp:file></cpp:line>


<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1</cpp:number> <cpp:file>"regression.h"</cpp:file></cpp:line>






<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>9</cpp:number> <cpp:file>"dyntest.pgc"</cpp:file></cpp:line>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>error</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n#%ld:%s\n"</literal></expr></argument>, <argument><expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name></expr></argument>, <argument><expr><name><name>sqlca</name><operator>.</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name> <parameter_list>()</parameter_list>
<block>{<block_content>
  <comment type="block">/* exec sql begin declare section */</comment>
   
   
   
   
        
   
    
   
   
   
  
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>22</cpp:number> <cpp:file>"dyntest.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>int</name></type> <name>COUNT</name></decl> ;</decl_stmt>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>23</cpp:number> <cpp:file>"dyntest.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>int</name></type> <name>INTVAR</name></decl> ;</decl_stmt>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>24</cpp:number> <cpp:file>"dyntest.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>int</name></type> <name>INDEX</name></decl> ;</decl_stmt>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>25</cpp:number> <cpp:file>"dyntest.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>int</name></type> <name>INDICATOR</name></decl> ;</decl_stmt>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>26</cpp:number> <cpp:file>"dyntest.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>int</name></type> <name>TYPE</name></decl> , <decl><type ref="prev"/><name>LENGTH</name></decl> , <decl><type ref="prev"/><name>OCTET_LENGTH</name></decl> , <decl><type ref="prev"/><name>PRECISION</name></decl> , <decl><type ref="prev"/><name>SCALE</name></decl> , <decl><type ref="prev"/><name>RETURNED_OCTET_LENGTH</name></decl> ;</decl_stmt>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>27</cpp:number> <cpp:file>"dyntest.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>int</name></type> <name>DATETIME_INTERVAL_CODE</name></decl> ;</decl_stmt>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>28</cpp:number> <cpp:file>"dyntest.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>char</name></type> <name><name>NAME</name> <index>[ <expr><literal type="number">120</literal></expr> ]</index></name></decl> , <decl><type ref="prev"/><name>BOOLVAR</name></decl> ;</decl_stmt>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>29</cpp:number> <cpp:file>"dyntest.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>char</name></type> <name><name>STRINGVAR</name> <index>[ <expr><literal type="number">1024</literal></expr> ]</index></name></decl> ;</decl_stmt>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>30</cpp:number> <cpp:file>"dyntest.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>double</name></type> <name>DOUBLEVAR</name></decl> ;</decl_stmt>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>31</cpp:number> <cpp:file>"dyntest.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>QUERY</name></decl> ;</decl_stmt>
<comment type="block">/* exec sql end declare section */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>32</cpp:number> <cpp:file>"dyntest.pgc"</cpp:file></cpp:line>

  <decl_stmt><decl><type><name>int</name></type> <name>done</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* exec sql var BOOLVAR is bool */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>35</cpp:number> <cpp:file>"dyntest.pgc"</cpp:file></cpp:line>


  <expr_stmt><expr><call><name>ECPGdebug</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>QUERY</name> <operator>=</operator> <literal type="string">"select * from dyntest"</literal></expr>;</expr_stmt>

  <comment type="block">/* exec sql whenever sqlerror  do error ( ) ; */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>43</cpp:number> <cpp:file>"dyntest.pgc"</cpp:file></cpp:line>


  <expr_stmt><expr><call><name>ECPGallocate_desc</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="string">"MYDESC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>45</cpp:number> <cpp:file>"dyntest.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>error</name> <argument_list>( )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>45</cpp:number> <cpp:file>"dyntest.pgc"</cpp:file></cpp:line>


  <block>{<block_content> <expr_stmt><expr><call><name>ECPGconnect</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"ecpg1_regression"</literal></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>47</cpp:number> <cpp:file>"dyntest.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>error</name> <argument_list>( )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>47</cpp:number> <cpp:file>"dyntest.pgc"</cpp:file></cpp:line>


  <block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"set datestyle to german"</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>49</cpp:number> <cpp:file>"dyntest.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>error</name> <argument_list>( )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>49</cpp:number> <cpp:file>"dyntest.pgc"</cpp:file></cpp:line>


  <block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"create table dyntest ( name char ( 14 ) , d float8 , i int , bignumber int8 , b boolean , comment text , day date )"</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>53</cpp:number> <cpp:file>"dyntest.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>error</name> <argument_list>( )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>53</cpp:number> <cpp:file>"dyntest.pgc"</cpp:file></cpp:line>

  <block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"insert into dyntest values ( 'first entry' , 14.7 , 14 , 123045607890 , true , 'The world''s most advanced open source database.' , '1987-07-14' )"</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>54</cpp:number> <cpp:file>"dyntest.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>error</name> <argument_list>( )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>54</cpp:number> <cpp:file>"dyntest.pgc"</cpp:file></cpp:line>

  <block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"insert into dyntest values ( 'second entry' , 1407.87 , 1407 , 987065403210 , false , 'The elephant never forgets.' , '1999-11-5' )"</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>55</cpp:number> <cpp:file>"dyntest.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>error</name> <argument_list>( )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>55</cpp:number> <cpp:file>"dyntest.pgc"</cpp:file></cpp:line>


  <block>{<block_content> <expr_stmt><expr><call><name>ECPGprepare</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"myquery"</literal></expr></argument>, <argument><expr><name>QUERY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>57</cpp:number> <cpp:file>"dyntest.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>error</name> <argument_list>( )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>57</cpp:number> <cpp:file>"dyntest.pgc"</cpp:file></cpp:line>

  <comment type="block">/* declare MYCURS cursor for $1 */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>58</cpp:number> <cpp:file>"dyntest.pgc"</cpp:file></cpp:line>


  <block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"declare MYCURS cursor for $1"</literal></expr></argument>, 
	<argument><expr><name>ECPGt_char_variable</name></expr></argument>,<argument><expr><operator>(</operator><call><name>ECPGprepared_statement</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"myquery"</literal></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>60</cpp:number> <cpp:file>"dyntest.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>error</name> <argument_list>( )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>60</cpp:number> <cpp:file>"dyntest.pgc"</cpp:file></cpp:line>


  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
      <block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"fetch in MYCURS"</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, 
	<argument><expr><name>ECPGt_descriptor</name></expr></argument>, <argument><expr><literal type="string">"MYDESC"</literal></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>, 
	<argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>64</cpp:number> <cpp:file>"dyntest.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>error</name> <argument_list>( )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>64</cpp:number> <cpp:file>"dyntest.pgc"</cpp:file></cpp:line>


      <if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name></expr>)</condition><block type="pseudo"><block_content>
	<break>break;</break></block_content></block></if></if_stmt>

      <block>{<block_content> <expr_stmt><expr><call><name>ECPGget_desc_header</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="string">"MYDESC"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name>COUNT</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>69</cpp:number> <cpp:file>"dyntest.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>error</name> <argument_list>( )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>69</cpp:number> <cpp:file>"dyntest.pgc"</cpp:file></cpp:line>

      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>done</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Found %d columns\n"</literal></expr></argument>, <argument><expr><name>COUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

      <for>for <control>(<init><expr><name>INDEX</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>INDEX</name> <operator>&lt;=</operator> <name>COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>INDEX</name></expr></incr>)</control>
	<block>{<block_content>
	<block>{<block_content> <expr_stmt><expr><call><name>ECPGget_desc</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="string">"MYDESC"</literal></expr></argument>, <argument><expr><name>INDEX</name></expr></argument>,<argument><expr><name>ECPGd_indicator</name></expr></argument>,
	<argument><expr><name>ECPGt_int</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name>INDICATOR</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ECPGd_name</name></expr></argument>,
	<argument><expr><name>ECPGt_char</name></expr></argument>,<argument><expr><operator>(</operator><name>NAME</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">120</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><literal type="number">120</literal><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ECPGd_scale</name></expr></argument>,
	<argument><expr><name>ECPGt_int</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name>SCALE</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ECPGd_precision</name></expr></argument>,
	<argument><expr><name>ECPGt_int</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name>PRECISION</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ECPGd_ret_octet</name></expr></argument>,
	<argument><expr><name>ECPGt_int</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name>RETURNED_OCTET_LENGTH</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ECPGd_octet</name></expr></argument>,
	<argument><expr><name>ECPGt_int</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name>OCTET_LENGTH</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ECPGd_length</name></expr></argument>,
	<argument><expr><name>ECPGt_int</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name>LENGTH</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ECPGd_type</name></expr></argument>,
	<argument><expr><name>ECPGt_int</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name>TYPE</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ECPGd_EODT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>86</cpp:number> <cpp:file>"dyntest.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>error</name> <argument_list>( )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>86</cpp:number> <cpp:file>"dyntest.pgc"</cpp:file></cpp:line>

	  <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%2d\t%s (type: %d length: %d precision: %d scale: %d = "</literal></expr></argument> , <argument><expr><name>INDEX</name></expr></argument>, <argument><expr><name>NAME</name></expr></argument>, <argument><expr><name>TYPE</name></expr></argument>, <argument><expr><name>LENGTH</name></expr></argument>, <argument><expr><name>PRECISION</name></expr></argument>, <argument><expr><name>SCALE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <switch>switch <condition>(<expr><name>TYPE</name></expr>)</condition>
	    <block>{<block_content>
	    <case>case <expr><name>SQL3_BOOLEAN</name></expr>:</case>
	      <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"bool"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <break>break;</break>
	    <case>case <expr><name>SQL3_NUMERIC</name></expr>:</case>
	      <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"numeric(%d,%d)"</literal></expr></argument>, <argument><expr><name>PRECISION</name></expr></argument>, <argument><expr><name>SCALE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <break>break;</break>
	    <case>case <expr><name>SQL3_DECIMAL</name></expr>:</case>
	      <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"decimal(%d,%d)"</literal></expr></argument>, <argument><expr><name>PRECISION</name></expr></argument>, <argument><expr><name>SCALE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <break>break;</break>
	    <case>case <expr><name>SQL3_INTEGER</name></expr>:</case>
	      <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"integer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <break>break;</break>
	    <case>case <expr><name>SQL3_SMALLINT</name></expr>:</case>
	      <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"smallint"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <break>break;</break>
	    <case>case <expr><name>SQL3_FLOAT</name></expr>:</case>
	      <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"float(%d,%d)"</literal></expr></argument>, <argument><expr><name>PRECISION</name></expr></argument>, <argument><expr><name>SCALE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <break>break;</break>
	    <case>case <expr><name>SQL3_REAL</name></expr>:</case>
	      <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"real"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <break>break;</break>
	    <case>case <expr><name>SQL3_DOUBLE_PRECISION</name></expr>:</case>
	      <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"double precision"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <break>break;</break>
	    <case>case <expr><name>SQL3_DATE_TIME_TIMESTAMP</name></expr>:</case>
	    <block>{<block_content> <expr_stmt><expr><call><name>ECPGget_desc</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="string">"MYDESC"</literal></expr></argument>, <argument><expr><name>INDEX</name></expr></argument>,<argument><expr><name>ECPGd_di_code</name></expr></argument>,
	<argument><expr><name>ECPGt_int</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name>DATETIME_INTERVAL_CODE</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ECPGd_EODT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>116</cpp:number> <cpp:file>"dyntest.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>error</name> <argument_list>( )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>116</cpp:number> <cpp:file>"dyntest.pgc"</cpp:file></cpp:line>

	      <switch>switch <condition>(<expr><name>DATETIME_INTERVAL_CODE</name></expr>)</condition>
		<block>{<block_content>
		<case>case <expr><name>SQL3_DDT_DATE</name></expr>:</case>
		  <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"date"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <break>break;</break>
		<case>case <expr><name>SQL3_DDT_TIME</name></expr>:</case>
		  <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"time"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <break>break;</break>
		<case>case <expr><name>SQL3_DDT_TIMESTAMP</name></expr>:</case>
		  <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"timestamp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <break>break;</break>
		<case>case <expr><name>SQL3_DDT_TIME_WITH_TIME_ZONE</name></expr>:</case>
		  <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"time with time zone"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <break>break;</break>
		<case>case <expr><name>SQL3_DDT_TIMESTAMP_WITH_TIME_ZONE</name></expr>:</case>
		  <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"timestamp with time zone"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <break>break;</break>
		</block_content>}</block></switch>
	      <break>break;</break>
	    <case>case <expr><name>SQL3_INTERVAL</name></expr>:</case>
	      <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"interval"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <break>break;</break>
	    <case>case <expr><name>SQL3_CHARACTER</name></expr>:</case>
	      <if_stmt><if>if <condition>(<expr><name>LENGTH</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"char(%d)"</literal></expr></argument>, <argument><expr><name>LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	      <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"text"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	      <break>break;</break>
	    <case>case <expr><name>SQL3_CHARACTER_VARYING</name></expr>:</case>
	      <if_stmt><if>if <condition>(<expr><name>LENGTH</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"varchar(%d)"</literal></expr></argument>, <argument><expr><name>LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	      <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"varchar()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	      <break>break;</break>
	    <default>default:</default>
	      <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"&lt;SQL3 %d&gt;"</literal></expr></argument>, <argument><expr><name>TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <break>break;</break>
	    </block_content>}</block></switch>
	  <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">")\n\toctet_length: %d returned_octet_length: %d)\n\t= "</literal></expr></argument>,
		  <argument><expr><name>OCTET_LENGTH</name></expr></argument>, <argument><expr><name>RETURNED_OCTET_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><name>INDICATOR</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"NULL\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	  <else>else<block type="pseudo"><block_content>
	    <switch>switch <condition>(<expr><name>TYPE</name></expr>)</condition>
	      <block>{<block_content>
	      <case>case <expr><name>SQL3_BOOLEAN</name></expr>:</case>
	      <block>{<block_content> <expr_stmt><expr><call><name>ECPGget_desc</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="string">"MYDESC"</literal></expr></argument>, <argument><expr><name>INDEX</name></expr></argument>,<argument><expr><name>ECPGd_data</name></expr></argument>,
	<argument><expr><name>ECPGt_bool</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name>BOOLVAR</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ECPGd_EODT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>163</cpp:number> <cpp:file>"dyntest.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>error</name> <argument_list>( )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>163</cpp:number> <cpp:file>"dyntest.pgc"</cpp:file></cpp:line>

		<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>BOOLVAR</name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	      <case>case <expr><name>SQL3_INTEGER</name></expr>:</case>
	      <case>case <expr><name>SQL3_SMALLINT</name></expr>:</case>
	      <block>{<block_content> <expr_stmt><expr><call><name>ECPGget_desc</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="string">"MYDESC"</literal></expr></argument>, <argument><expr><name>INDEX</name></expr></argument>,<argument><expr><name>ECPGd_data</name></expr></argument>,
	<argument><expr><name>ECPGt_int</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name>INTVAR</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ECPGd_EODT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>168</cpp:number> <cpp:file>"dyntest.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>error</name> <argument_list>( )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>168</cpp:number> <cpp:file>"dyntest.pgc"</cpp:file></cpp:line>

		<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>INTVAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	      <case>case <expr><name>SQL3_DOUBLE_PRECISION</name></expr>:</case>
	      <block>{<block_content> <expr_stmt><expr><call><name>ECPGget_desc</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="string">"MYDESC"</literal></expr></argument>, <argument><expr><name>INDEX</name></expr></argument>,<argument><expr><name>ECPGd_data</name></expr></argument>,
	<argument><expr><name>ECPGt_double</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name>DOUBLEVAR</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ECPGd_EODT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>172</cpp:number> <cpp:file>"dyntest.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>error</name> <argument_list>( )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>172</cpp:number> <cpp:file>"dyntest.pgc"</cpp:file></cpp:line>

		<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%.*f\n"</literal></expr></argument>, <argument><expr><name>PRECISION</name></expr></argument>, <argument><expr><name>DOUBLEVAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	      <case>case <expr><name>SQL3_DATE_TIME_TIMESTAMP</name></expr>:</case>
	      <block>{<block_content> <expr_stmt><expr><call><name>ECPGget_desc</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="string">"MYDESC"</literal></expr></argument>, <argument><expr><name>INDEX</name></expr></argument>,<argument><expr><name>ECPGd_data</name></expr></argument>,
	<argument><expr><name>ECPGt_char</name></expr></argument>,<argument><expr><operator>(</operator><name>STRINGVAR</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1024</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><literal type="number">1024</literal><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ECPGd_di_code</name></expr></argument>,
	<argument><expr><name>ECPGt_int</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name>DATETIME_INTERVAL_CODE</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ECPGd_EODT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>178</cpp:number> <cpp:file>"dyntest.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>error</name> <argument_list>( )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>178</cpp:number> <cpp:file>"dyntest.pgc"</cpp:file></cpp:line>

		<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%d \"%s\"\n"</literal></expr></argument>, <argument><expr><name>DATETIME_INTERVAL_CODE</name></expr></argument>, <argument><expr><name>STRINGVAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	      <case>case <expr><name>SQL3_CHARACTER</name></expr>:</case>
	      <case>case <expr><name>SQL3_CHARACTER_VARYING</name></expr>:</case>
	      <block>{<block_content> <expr_stmt><expr><call><name>ECPGget_desc</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="string">"MYDESC"</literal></expr></argument>, <argument><expr><name>INDEX</name></expr></argument>,<argument><expr><name>ECPGd_data</name></expr></argument>,
	<argument><expr><name>ECPGt_char</name></expr></argument>,<argument><expr><operator>(</operator><name>STRINGVAR</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1024</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><literal type="number">1024</literal><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ECPGd_EODT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>183</cpp:number> <cpp:file>"dyntest.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>error</name> <argument_list>( )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>183</cpp:number> <cpp:file>"dyntest.pgc"</cpp:file></cpp:line>

		<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\"%s\"\n"</literal></expr></argument>, <argument><expr><name>STRINGVAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	      <default>default:</default>
	      <block>{<block_content> <expr_stmt><expr><call><name>ECPGget_desc</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="string">"MYDESC"</literal></expr></argument>, <argument><expr><name>INDEX</name></expr></argument>,<argument><expr><name>ECPGd_data</name></expr></argument>,
	<argument><expr><name>ECPGt_char</name></expr></argument>,<argument><expr><operator>(</operator><name>STRINGVAR</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1024</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><literal type="number">1024</literal><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ECPGd_EODT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>187</cpp:number> <cpp:file>"dyntest.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>error</name> <argument_list>( )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>187</cpp:number> <cpp:file>"dyntest.pgc"</cpp:file></cpp:line>

		<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"&lt;\"%s\"&gt;\n"</literal></expr></argument>, <argument><expr><name>STRINGVAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	      </block_content>}</block></switch></block_content></block></else></if_stmt>
	</block_content>}</block></for>
    </block_content>}</block></while>

  <block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"close MYCURS"</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>194</cpp:number> <cpp:file>"dyntest.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>error</name> <argument_list>( )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>194</cpp:number> <cpp:file>"dyntest.pgc"</cpp:file></cpp:line>


  <expr_stmt><expr><call><name>ECPGdeallocate_desc</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="string">"MYDESC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>196</cpp:number> <cpp:file>"dyntest.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>error</name> <argument_list>( )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>196</cpp:number> <cpp:file>"dyntest.pgc"</cpp:file></cpp:line>


  <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></function>
</unit>
