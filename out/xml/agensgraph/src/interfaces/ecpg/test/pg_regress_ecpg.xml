<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/interfaces/ecpg/test/pg_regress_ecpg.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * pg_regress_ecpg --- regression test driver for ecpg
 *
 * This is a C implementation of the previous shell script for running
 * the regression tests, and should be mostly compatible with it.
 * Initial author of C translation: Magnus Hagander
 *
 * This code is released under the terms of the PostgreSQL License.
 *
 * Portions Copyright (c) 1996-2020, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * src/interfaces/ecpg/test/pg_regress_ecpg.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pg_regress.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINEBUFSIZE</name></cpp:macro> <cpp:value>300</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ecpg_filter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sourcefile</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>outfile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * Create a filtered copy of sourcefile, replacing #line x
	 * "./../bla/foo.h" with #line x "foo.h"
	 */</comment>
	<decl_stmt><decl><type><name>FILE</name>	   <modifier>*</modifier></type><name>s</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>linebuf</name><index>[<expr><name>LINEBUFSIZE</name></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>sourcefile</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Could not open file %s for reading\n"</literal></expr></argument>, <argument><expr><name>sourcefile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>t</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Could not open file %s for writing\n"</literal></expr></argument>, <argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<while>while <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>linebuf</name></expr></argument>, <argument><expr><name>LINEBUFSIZE</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* check for "#line " in the beginning */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>linebuf</name></expr></argument>, <argument><expr><literal type="string">"#line "</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>linebuf</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>linebuf</name></expr></argument>, <argument><expr><literal type="char">'"'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type>			<name>plen</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

			<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>p</name> <operator>+</operator> <name>plen</name><operator>)</operator> <operator>==</operator> <literal type="char">'.'</literal> <operator>||</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>plen</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>plen</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></while>
			<comment type="block">/* plen is one more than the number of . and / characters */</comment>
			<if_stmt><if>if <condition>(<expr><name>plen</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>plen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>StrNCpy</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>replace_string</name><argument_list>(<argument><expr><name>linebuf</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>linebuf</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * start an ecpg test process for specified file (including redirection),
 * and return process ID
 */</comment>

<function><type><specifier>static</specifier> <name>PID_TYPE</name></type>
<name>ecpg_start_test</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>testname</name></decl></parameter>,
				<parameter><decl><type><name>_stringlist</name> <modifier>*</modifier><modifier>*</modifier></type><name>resultfiles</name></decl></parameter>,
				<parameter><decl><type><name>_stringlist</name> <modifier>*</modifier><modifier>*</modifier></type><name>expectfiles</name></decl></parameter>,
				<parameter><decl><type><name>_stringlist</name> <modifier>*</modifier><modifier>*</modifier></type><name>tags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PID_TYPE</name></type>	<name>pid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>inprg</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>insource</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>outfile_stdout</name></decl>,
				<decl><type ref="prev"/><name><name>expectfile_stdout</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>outfile_stderr</name></decl>,
				<decl><type ref="prev"/><name><name>expectfile_stderr</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>outfile_source</name></decl>,
				<decl><type ref="prev"/><name><name>expectfile_source</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>cmd</name><index>[<expr><name>MAXPGPATH</name> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>testname_dash</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>appnameenv</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>inprg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>inprg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>inputdir</name></expr></argument>, <argument><expr><name>testname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>testname_dash</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>testname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>replace_string</name><argument_list>(<argument><expr><name>testname_dash</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>expectfile_stdout</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>expectfile_stdout</name></expr></argument>)</argument_list></sizeof></expr></argument>,
			 <argument><expr><literal type="string">"%s/expected/%s.stdout"</literal></expr></argument>,
			 <argument><expr><name>outputdir</name></expr></argument>, <argument><expr><name>testname_dash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>expectfile_stderr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>expectfile_stderr</name></expr></argument>)</argument_list></sizeof></expr></argument>,
			 <argument><expr><literal type="string">"%s/expected/%s.stderr"</literal></expr></argument>,
			 <argument><expr><name>outputdir</name></expr></argument>, <argument><expr><name>testname_dash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>expectfile_source</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>expectfile_source</name></expr></argument>)</argument_list></sizeof></expr></argument>,
			 <argument><expr><literal type="string">"%s/expected/%s.c"</literal></expr></argument>,
			 <argument><expr><name>outputdir</name></expr></argument>, <argument><expr><name>testname_dash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * We can use replace_string() here because the replacement string does
	 * not occupy more space than the replaced one.
	 */</comment>
	<expr_stmt><expr><name>outfile_stdout</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>expectfile_stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>replace_string</name><argument_list>(<argument><expr><name>outfile_stdout</name></expr></argument>, <argument><expr><literal type="string">"/expected/"</literal></expr></argument>, <argument><expr><literal type="string">"/results/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>outfile_stderr</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>expectfile_stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>replace_string</name><argument_list>(<argument><expr><name>outfile_stderr</name></expr></argument>, <argument><expr><literal type="string">"/expected/"</literal></expr></argument>, <argument><expr><literal type="string">"/results/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>outfile_source</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>expectfile_source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>replace_string</name><argument_list>(<argument><expr><name>outfile_source</name></expr></argument>, <argument><expr><literal type="string">"/expected/"</literal></expr></argument>, <argument><expr><literal type="string">"/results/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>add_stringlist_item</name><argument_list>(<argument><expr><name>resultfiles</name></expr></argument>, <argument><expr><name>outfile_stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>add_stringlist_item</name><argument_list>(<argument><expr><name>expectfiles</name></expr></argument>, <argument><expr><name>expectfile_stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>add_stringlist_item</name><argument_list>(<argument><expr><name>tags</name></expr></argument>, <argument><expr><literal type="string">"stdout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>add_stringlist_item</name><argument_list>(<argument><expr><name>resultfiles</name></expr></argument>, <argument><expr><name>outfile_stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>add_stringlist_item</name><argument_list>(<argument><expr><name>expectfiles</name></expr></argument>, <argument><expr><name>expectfile_stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>add_stringlist_item</name><argument_list>(<argument><expr><name>tags</name></expr></argument>, <argument><expr><literal type="string">"stderr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>add_stringlist_item</name><argument_list>(<argument><expr><name>resultfiles</name></expr></argument>, <argument><expr><name>outfile_source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>add_stringlist_item</name><argument_list>(<argument><expr><name>expectfiles</name></expr></argument>, <argument><expr><name>expectfile_source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>add_stringlist_item</name><argument_list>(<argument><expr><name>tags</name></expr></argument>, <argument><expr><literal type="string">"source"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>insource</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>insource</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s.c"</literal></expr></argument>, <argument><expr><name>testname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ecpg_filter</name><argument_list>(<argument><expr><name>insource</name></expr></argument>, <argument><expr><name>outfile_source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>inprg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>inprg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>inputdir</name></expr></argument>, <argument><expr><name>testname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></sizeof></expr></argument>,
			 <argument><expr><literal type="string">"\"%s\" &gt;\"%s\" 2&gt;\"%s\""</literal></expr></argument>,
			 <argument><expr><name>inprg</name></expr></argument>,
			 <argument><expr><name>outfile_stdout</name></expr></argument>,
			 <argument><expr><name>outfile_stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>appnameenv</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"PGAPPNAME=ecpg/%s"</literal></expr></argument>, <argument><expr><name>testname_dash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>putenv</name><argument_list>(<argument><expr><name>appnameenv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>pid</name> <operator>=</operator> <call><name>spawn_process</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>==</operator> <name>INVALID_PID</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not start process for test %s\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><name>testname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>unsetenv</name><argument_list>(<argument><expr><literal type="string">"PGAPPNAME"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>appnameenv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>testname_dash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>outfile_stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>outfile_stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>outfile_source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>pid</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ecpg_init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* nothing to do here at the moment */</comment>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>regression_main</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>ecpg_init</name></expr></argument>, <argument><expr><name>ecpg_start_test</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
