<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/common/md5.c"><comment type="block">/*
 *	md5.c
 *
 *	Implements	the  MD5 Message-Digest Algorithm as specified in
 *	RFC  1321.  This  implementation  is a simple one, in that it
 *	needs  every  input  byte  to  be  buffered  before doing any
 *	calculations.  I  do  not  expect  this  file  to be used for
 *	general  purpose  MD5'ing  of large amounts of data, only for
 *	generating hashed passwords from limited input.
 *
 *	Sverre H. Huseby &lt;sverrehu@online.no&gt;
 *
 *	Portions Copyright (c) 1996-2020, PostgreSQL Global Development Group
 *	Portions Copyright (c) 1994, Regents of the University of California
 *
 * IDENTIFICATION
 *	  src/common/md5.c
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FRONTEND</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/md5.h"</cpp:file></cpp:include>


<comment type="block">/*
 *	PRIVATE FUNCTIONS
 */</comment>


<comment type="block">/*
 *	The returned array is allocated using malloc.  the caller should free it
 *	when it is no longer needed.
 */</comment>
<function><type><specifier>static</specifier> <name>uint8</name> <modifier>*</modifier></type>
<name>createPaddedCopyWithLength</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>q</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>len</name></decl>,
				<decl><type ref="prev"/><name>newLen448</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>len_high</name></decl>,
				<decl><type ref="prev"/><name>len_low</name></decl>;</decl_stmt>		<comment type="block">/* 64-bit value split into 32-bit sections */</comment>

	<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>b</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>*</operator><name>l</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>newLen448</name> <operator>=</operator> <name>len</name> <operator>+</operator> <literal type="number">64</literal> <operator>-</operator> <operator>(</operator><name>len</name> <operator>%</operator> <literal type="number">64</literal><operator>)</operator> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>newLen448</name> <operator>&lt;=</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>newLen448</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>l</name> <operator>=</operator> <name>newLen448</name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <operator>(</operator><name>uint8</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint8</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>*</operator><name>l</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>b</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint8</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* pad */</comment>
	<expr_stmt><expr><name><name>ret</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>q</name> <operator>=</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>q</name> <operator>&lt;</operator> <name>newLen448</name></expr>;</condition> <incr><expr><name>q</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>ret</name><index>[<expr><name>q</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt></block_content></block></for>

	<comment type="block">/* append length as a 64 bit bitcount */</comment>
	<expr_stmt><expr><name>len_low</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
	<comment type="block">/* split into two 32-bit values */</comment>
	<comment type="block">/* we only look at the bottom 32-bits */</comment>
	<expr_stmt><expr><name>len_high</name> <operator>=</operator> <name>len</name> <operator>&gt;&gt;</operator> <literal type="number">29</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>len_low</name> <operator>&lt;&lt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>q</name> <operator>=</operator> <name>newLen448</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ret</name><index>[<expr><name>q</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>len_low</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>len_low</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ret</name><index>[<expr><name>q</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>len_low</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>len_low</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ret</name><index>[<expr><name>q</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>len_low</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>len_low</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ret</name><index>[<expr><name>q</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>len_low</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ret</name><index>[<expr><name>q</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>len_high</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>len_high</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ret</name><index>[<expr><name>q</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>len_high</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>len_high</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ret</name><index>[<expr><name>q</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>len_high</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>len_high</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ret</name><index>[<expr><name>q</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>len_high</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; (y)) | (~(x) &amp; (z)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>G</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; (z)) | ((y) &amp; ~(z)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) ^ (y) ^ (z))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>I</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((y) ^ ((x) | ~(z)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROT_LEFT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &lt;&lt; (n)) | ((x) &gt;&gt; (32 - (n))))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>doTheRounds</name><parameter_list>(<parameter><decl><type><name>uint32</name></type> <name><name>X</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name><name>state</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>a</name></decl>,
				<decl><type ref="prev"/><name>b</name></decl>,
				<decl><type ref="prev"/><name>c</name></decl>,
				<decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

	<comment type="block">/* round 1 */</comment>
	<expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name> <operator>+</operator> <call><name>ROT_LEFT</name><argument_list>(<argument><expr><operator>(</operator><name>a</name> <operator>+</operator> <call><name>F</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>X</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0xd76aa478</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* 1 */</comment>
	<expr_stmt><expr><name>d</name> <operator>=</operator> <name>a</name> <operator>+</operator> <call><name>ROT_LEFT</name><argument_list>(<argument><expr><operator>(</operator><name>d</name> <operator>+</operator> <call><name>F</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>X</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0xe8c7b756</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* 2 */</comment>
	<expr_stmt><expr><name>c</name> <operator>=</operator> <name>d</name> <operator>+</operator> <call><name>ROT_LEFT</name><argument_list>(<argument><expr><operator>(</operator><name>c</name> <operator>+</operator> <call><name>F</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>X</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0x242070db</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* 3 */</comment>
	<expr_stmt><expr><name>b</name> <operator>=</operator> <name>c</name> <operator>+</operator> <call><name>ROT_LEFT</name><argument_list>(<argument><expr><operator>(</operator><name>b</name> <operator>+</operator> <call><name>F</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>X</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0xc1bdceee</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* 4 */</comment>
	<expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name> <operator>+</operator> <call><name>ROT_LEFT</name><argument_list>(<argument><expr><operator>(</operator><name>a</name> <operator>+</operator> <call><name>F</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>X</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0xf57c0faf</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* 5 */</comment>
	<expr_stmt><expr><name>d</name> <operator>=</operator> <name>a</name> <operator>+</operator> <call><name>ROT_LEFT</name><argument_list>(<argument><expr><operator>(</operator><name>d</name> <operator>+</operator> <call><name>F</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>X</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0x4787c62a</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* 6 */</comment>
	<expr_stmt><expr><name>c</name> <operator>=</operator> <name>d</name> <operator>+</operator> <call><name>ROT_LEFT</name><argument_list>(<argument><expr><operator>(</operator><name>c</name> <operator>+</operator> <call><name>F</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>X</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0xa8304613</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* 7 */</comment>
	<expr_stmt><expr><name>b</name> <operator>=</operator> <name>c</name> <operator>+</operator> <call><name>ROT_LEFT</name><argument_list>(<argument><expr><operator>(</operator><name>b</name> <operator>+</operator> <call><name>F</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>X</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0xfd469501</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* 8 */</comment>
	<expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name> <operator>+</operator> <call><name>ROT_LEFT</name><argument_list>(<argument><expr><operator>(</operator><name>a</name> <operator>+</operator> <call><name>F</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>X</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0x698098d8</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* 9 */</comment>
	<expr_stmt><expr><name>d</name> <operator>=</operator> <name>a</name> <operator>+</operator> <call><name>ROT_LEFT</name><argument_list>(<argument><expr><operator>(</operator><name>d</name> <operator>+</operator> <call><name>F</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>X</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0x8b44f7af</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* 10 */</comment>
	<expr_stmt><expr><name>c</name> <operator>=</operator> <name>d</name> <operator>+</operator> <call><name>ROT_LEFT</name><argument_list>(<argument><expr><operator>(</operator><name>c</name> <operator>+</operator> <call><name>F</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>X</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0xffff5bb1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* 11 */</comment>
	<expr_stmt><expr><name>b</name> <operator>=</operator> <name>c</name> <operator>+</operator> <call><name>ROT_LEFT</name><argument_list>(<argument><expr><operator>(</operator><name>b</name> <operator>+</operator> <call><name>F</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>X</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0x895cd7be</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* 12 */</comment>
	<expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name> <operator>+</operator> <call><name>ROT_LEFT</name><argument_list>(<argument><expr><operator>(</operator><name>a</name> <operator>+</operator> <call><name>F</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>X</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0x6b901122</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* 13 */</comment>
	<expr_stmt><expr><name>d</name> <operator>=</operator> <name>a</name> <operator>+</operator> <call><name>ROT_LEFT</name><argument_list>(<argument><expr><operator>(</operator><name>d</name> <operator>+</operator> <call><name>F</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>X</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0xfd987193</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* 14 */</comment>
	<expr_stmt><expr><name>c</name> <operator>=</operator> <name>d</name> <operator>+</operator> <call><name>ROT_LEFT</name><argument_list>(<argument><expr><operator>(</operator><name>c</name> <operator>+</operator> <call><name>F</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>X</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0xa679438e</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* 15 */</comment>
	<expr_stmt><expr><name>b</name> <operator>=</operator> <name>c</name> <operator>+</operator> <call><name>ROT_LEFT</name><argument_list>(<argument><expr><operator>(</operator><name>b</name> <operator>+</operator> <call><name>F</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>X</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0x49b40821</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* 16 */</comment>

	<comment type="block">/* round 2 */</comment>
	<expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name> <operator>+</operator> <call><name>ROT_LEFT</name><argument_list>(<argument><expr><operator>(</operator><name>a</name> <operator>+</operator> <call><name>G</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>X</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0xf61e2562</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* 17 */</comment>
	<expr_stmt><expr><name>d</name> <operator>=</operator> <name>a</name> <operator>+</operator> <call><name>ROT_LEFT</name><argument_list>(<argument><expr><operator>(</operator><name>d</name> <operator>+</operator> <call><name>G</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>X</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0xc040b340</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* 18 */</comment>
	<expr_stmt><expr><name>c</name> <operator>=</operator> <name>d</name> <operator>+</operator> <call><name>ROT_LEFT</name><argument_list>(<argument><expr><operator>(</operator><name>c</name> <operator>+</operator> <call><name>G</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>X</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0x265e5a51</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* 19 */</comment>
	<expr_stmt><expr><name>b</name> <operator>=</operator> <name>c</name> <operator>+</operator> <call><name>ROT_LEFT</name><argument_list>(<argument><expr><operator>(</operator><name>b</name> <operator>+</operator> <call><name>G</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>X</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0xe9b6c7aa</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* 20 */</comment>
	<expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name> <operator>+</operator> <call><name>ROT_LEFT</name><argument_list>(<argument><expr><operator>(</operator><name>a</name> <operator>+</operator> <call><name>G</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>X</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0xd62f105d</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* 21 */</comment>
	<expr_stmt><expr><name>d</name> <operator>=</operator> <name>a</name> <operator>+</operator> <call><name>ROT_LEFT</name><argument_list>(<argument><expr><operator>(</operator><name>d</name> <operator>+</operator> <call><name>G</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>X</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0x02441453</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* 22 */</comment>
	<expr_stmt><expr><name>c</name> <operator>=</operator> <name>d</name> <operator>+</operator> <call><name>ROT_LEFT</name><argument_list>(<argument><expr><operator>(</operator><name>c</name> <operator>+</operator> <call><name>G</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>X</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0xd8a1e681</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* 23 */</comment>
	<expr_stmt><expr><name>b</name> <operator>=</operator> <name>c</name> <operator>+</operator> <call><name>ROT_LEFT</name><argument_list>(<argument><expr><operator>(</operator><name>b</name> <operator>+</operator> <call><name>G</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>X</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0xe7d3fbc8</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* 24 */</comment>
	<expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name> <operator>+</operator> <call><name>ROT_LEFT</name><argument_list>(<argument><expr><operator>(</operator><name>a</name> <operator>+</operator> <call><name>G</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>X</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0x21e1cde6</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* 25 */</comment>
	<expr_stmt><expr><name>d</name> <operator>=</operator> <name>a</name> <operator>+</operator> <call><name>ROT_LEFT</name><argument_list>(<argument><expr><operator>(</operator><name>d</name> <operator>+</operator> <call><name>G</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>X</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0xc33707d6</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* 26 */</comment>
	<expr_stmt><expr><name>c</name> <operator>=</operator> <name>d</name> <operator>+</operator> <call><name>ROT_LEFT</name><argument_list>(<argument><expr><operator>(</operator><name>c</name> <operator>+</operator> <call><name>G</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>X</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0xf4d50d87</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* 27 */</comment>
	<expr_stmt><expr><name>b</name> <operator>=</operator> <name>c</name> <operator>+</operator> <call><name>ROT_LEFT</name><argument_list>(<argument><expr><operator>(</operator><name>b</name> <operator>+</operator> <call><name>G</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>X</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0x455a14ed</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* 28 */</comment>
	<expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name> <operator>+</operator> <call><name>ROT_LEFT</name><argument_list>(<argument><expr><operator>(</operator><name>a</name> <operator>+</operator> <call><name>G</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>X</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0xa9e3e905</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* 29 */</comment>
	<expr_stmt><expr><name>d</name> <operator>=</operator> <name>a</name> <operator>+</operator> <call><name>ROT_LEFT</name><argument_list>(<argument><expr><operator>(</operator><name>d</name> <operator>+</operator> <call><name>G</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>X</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0xfcefa3f8</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* 30 */</comment>
	<expr_stmt><expr><name>c</name> <operator>=</operator> <name>d</name> <operator>+</operator> <call><name>ROT_LEFT</name><argument_list>(<argument><expr><operator>(</operator><name>c</name> <operator>+</operator> <call><name>G</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>X</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0x676f02d9</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* 31 */</comment>
	<expr_stmt><expr><name>b</name> <operator>=</operator> <name>c</name> <operator>+</operator> <call><name>ROT_LEFT</name><argument_list>(<argument><expr><operator>(</operator><name>b</name> <operator>+</operator> <call><name>G</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>X</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0x8d2a4c8a</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* 32 */</comment>

	<comment type="block">/* round 3 */</comment>
	<expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name> <operator>+</operator> <call><name>ROT_LEFT</name><argument_list>(<argument><expr><operator>(</operator><name>a</name> <operator>+</operator> <call><name>H</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>X</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0xfffa3942</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* 33 */</comment>
	<expr_stmt><expr><name>d</name> <operator>=</operator> <name>a</name> <operator>+</operator> <call><name>ROT_LEFT</name><argument_list>(<argument><expr><operator>(</operator><name>d</name> <operator>+</operator> <call><name>H</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>X</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0x8771f681</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* 34 */</comment>
	<expr_stmt><expr><name>c</name> <operator>=</operator> <name>d</name> <operator>+</operator> <call><name>ROT_LEFT</name><argument_list>(<argument><expr><operator>(</operator><name>c</name> <operator>+</operator> <call><name>H</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>X</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0x6d9d6122</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* 35 */</comment>
	<expr_stmt><expr><name>b</name> <operator>=</operator> <name>c</name> <operator>+</operator> <call><name>ROT_LEFT</name><argument_list>(<argument><expr><operator>(</operator><name>b</name> <operator>+</operator> <call><name>H</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>X</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0xfde5380c</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* 36 */</comment>
	<expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name> <operator>+</operator> <call><name>ROT_LEFT</name><argument_list>(<argument><expr><operator>(</operator><name>a</name> <operator>+</operator> <call><name>H</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>X</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0xa4beea44</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* 37 */</comment>
	<expr_stmt><expr><name>d</name> <operator>=</operator> <name>a</name> <operator>+</operator> <call><name>ROT_LEFT</name><argument_list>(<argument><expr><operator>(</operator><name>d</name> <operator>+</operator> <call><name>H</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>X</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0x4bdecfa9</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* 38 */</comment>
	<expr_stmt><expr><name>c</name> <operator>=</operator> <name>d</name> <operator>+</operator> <call><name>ROT_LEFT</name><argument_list>(<argument><expr><operator>(</operator><name>c</name> <operator>+</operator> <call><name>H</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>X</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0xf6bb4b60</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* 39 */</comment>
	<expr_stmt><expr><name>b</name> <operator>=</operator> <name>c</name> <operator>+</operator> <call><name>ROT_LEFT</name><argument_list>(<argument><expr><operator>(</operator><name>b</name> <operator>+</operator> <call><name>H</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>X</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0xbebfbc70</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* 40 */</comment>
	<expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name> <operator>+</operator> <call><name>ROT_LEFT</name><argument_list>(<argument><expr><operator>(</operator><name>a</name> <operator>+</operator> <call><name>H</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>X</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0x289b7ec6</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* 41 */</comment>
	<expr_stmt><expr><name>d</name> <operator>=</operator> <name>a</name> <operator>+</operator> <call><name>ROT_LEFT</name><argument_list>(<argument><expr><operator>(</operator><name>d</name> <operator>+</operator> <call><name>H</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>X</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0xeaa127fa</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* 42 */</comment>
	<expr_stmt><expr><name>c</name> <operator>=</operator> <name>d</name> <operator>+</operator> <call><name>ROT_LEFT</name><argument_list>(<argument><expr><operator>(</operator><name>c</name> <operator>+</operator> <call><name>H</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>X</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0xd4ef3085</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* 43 */</comment>
	<expr_stmt><expr><name>b</name> <operator>=</operator> <name>c</name> <operator>+</operator> <call><name>ROT_LEFT</name><argument_list>(<argument><expr><operator>(</operator><name>b</name> <operator>+</operator> <call><name>H</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>X</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0x04881d05</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* 44 */</comment>
	<expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name> <operator>+</operator> <call><name>ROT_LEFT</name><argument_list>(<argument><expr><operator>(</operator><name>a</name> <operator>+</operator> <call><name>H</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>X</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0xd9d4d039</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* 45 */</comment>
	<expr_stmt><expr><name>d</name> <operator>=</operator> <name>a</name> <operator>+</operator> <call><name>ROT_LEFT</name><argument_list>(<argument><expr><operator>(</operator><name>d</name> <operator>+</operator> <call><name>H</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>X</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0xe6db99e5</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* 46 */</comment>
	<expr_stmt><expr><name>c</name> <operator>=</operator> <name>d</name> <operator>+</operator> <call><name>ROT_LEFT</name><argument_list>(<argument><expr><operator>(</operator><name>c</name> <operator>+</operator> <call><name>H</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>X</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0x1fa27cf8</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* 47 */</comment>
	<expr_stmt><expr><name>b</name> <operator>=</operator> <name>c</name> <operator>+</operator> <call><name>ROT_LEFT</name><argument_list>(<argument><expr><operator>(</operator><name>b</name> <operator>+</operator> <call><name>H</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>X</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0xc4ac5665</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* 48 */</comment>

	<comment type="block">/* round 4 */</comment>
	<expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name> <operator>+</operator> <call><name>ROT_LEFT</name><argument_list>(<argument><expr><operator>(</operator><name>a</name> <operator>+</operator> <call><name>I</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>X</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0xf4292244</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* 49 */</comment>
	<expr_stmt><expr><name>d</name> <operator>=</operator> <name>a</name> <operator>+</operator> <call><name>ROT_LEFT</name><argument_list>(<argument><expr><operator>(</operator><name>d</name> <operator>+</operator> <call><name>I</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>X</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0x432aff97</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* 50 */</comment>
	<expr_stmt><expr><name>c</name> <operator>=</operator> <name>d</name> <operator>+</operator> <call><name>ROT_LEFT</name><argument_list>(<argument><expr><operator>(</operator><name>c</name> <operator>+</operator> <call><name>I</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>X</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0xab9423a7</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* 51 */</comment>
	<expr_stmt><expr><name>b</name> <operator>=</operator> <name>c</name> <operator>+</operator> <call><name>ROT_LEFT</name><argument_list>(<argument><expr><operator>(</operator><name>b</name> <operator>+</operator> <call><name>I</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>X</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0xfc93a039</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* 52 */</comment>
	<expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name> <operator>+</operator> <call><name>ROT_LEFT</name><argument_list>(<argument><expr><operator>(</operator><name>a</name> <operator>+</operator> <call><name>I</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>X</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0x655b59c3</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* 53 */</comment>
	<expr_stmt><expr><name>d</name> <operator>=</operator> <name>a</name> <operator>+</operator> <call><name>ROT_LEFT</name><argument_list>(<argument><expr><operator>(</operator><name>d</name> <operator>+</operator> <call><name>I</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>X</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0x8f0ccc92</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* 54 */</comment>
	<expr_stmt><expr><name>c</name> <operator>=</operator> <name>d</name> <operator>+</operator> <call><name>ROT_LEFT</name><argument_list>(<argument><expr><operator>(</operator><name>c</name> <operator>+</operator> <call><name>I</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>X</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0xffeff47d</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* 55 */</comment>
	<expr_stmt><expr><name>b</name> <operator>=</operator> <name>c</name> <operator>+</operator> <call><name>ROT_LEFT</name><argument_list>(<argument><expr><operator>(</operator><name>b</name> <operator>+</operator> <call><name>I</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>X</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0x85845dd1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* 56 */</comment>
	<expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name> <operator>+</operator> <call><name>ROT_LEFT</name><argument_list>(<argument><expr><operator>(</operator><name>a</name> <operator>+</operator> <call><name>I</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>X</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0x6fa87e4f</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* 57 */</comment>
	<expr_stmt><expr><name>d</name> <operator>=</operator> <name>a</name> <operator>+</operator> <call><name>ROT_LEFT</name><argument_list>(<argument><expr><operator>(</operator><name>d</name> <operator>+</operator> <call><name>I</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>X</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0xfe2ce6e0</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* 58 */</comment>
	<expr_stmt><expr><name>c</name> <operator>=</operator> <name>d</name> <operator>+</operator> <call><name>ROT_LEFT</name><argument_list>(<argument><expr><operator>(</operator><name>c</name> <operator>+</operator> <call><name>I</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>X</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0xa3014314</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* 59 */</comment>
	<expr_stmt><expr><name>b</name> <operator>=</operator> <name>c</name> <operator>+</operator> <call><name>ROT_LEFT</name><argument_list>(<argument><expr><operator>(</operator><name>b</name> <operator>+</operator> <call><name>I</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>X</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0x4e0811a1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* 60 */</comment>
	<expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name> <operator>+</operator> <call><name>ROT_LEFT</name><argument_list>(<argument><expr><operator>(</operator><name>a</name> <operator>+</operator> <call><name>I</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>X</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0xf7537e82</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* 61 */</comment>
	<expr_stmt><expr><name>d</name> <operator>=</operator> <name>a</name> <operator>+</operator> <call><name>ROT_LEFT</name><argument_list>(<argument><expr><operator>(</operator><name>d</name> <operator>+</operator> <call><name>I</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>X</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0xbd3af235</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* 62 */</comment>
	<expr_stmt><expr><name>c</name> <operator>=</operator> <name>d</name> <operator>+</operator> <call><name>ROT_LEFT</name><argument_list>(<argument><expr><operator>(</operator><name>c</name> <operator>+</operator> <call><name>I</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>X</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0x2ad7d2bb</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* 63 */</comment>
	<expr_stmt><expr><name>b</name> <operator>=</operator> <name>c</name> <operator>+</operator> <call><name>ROT_LEFT</name><argument_list>(<argument><expr><operator>(</operator><name>b</name> <operator>+</operator> <call><name>I</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>X</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0xeb86d391</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* 64 */</comment>

	<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name>a</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name>b</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <name>d</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>calculateDigestFromBuffer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint8</name></type> <name><name>sum</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>register</specifier> <name>uint32</name></type> <name>i</name></decl>,
				<decl><type ref="prev"/><name>j</name></decl>,
				<decl><type ref="prev"/><name>k</name></decl>,
				<decl><type ref="prev"/><name>newI</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>l</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>input</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>register</specifier> <name>uint32</name> <modifier>*</modifier></type><name>wbp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name><name>workBuff</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>,
				<decl><type ref="prev"/><name><name>state</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><name>l</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x67452301</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xEFCDAB89</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x98BADCFE</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x10325476</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>input</name> <operator>=</operator> <call><name>createPaddedCopyWithLength</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init><condition>;</condition><incr/>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>newI</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">16</literal> <operator>*</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;</operator> <name>l</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>k</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><name>wbp</name> <operator>=</operator> <operator>(</operator><name>workBuff</name> <operator>+</operator> <name>j</name><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>wbp</name> <operator>=</operator> <name><name>input</name><index>[<expr><name>k</name><operator>--</operator></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>wbp</name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>wbp</name> <operator>|=</operator> <name><name>input</name><index>[<expr><name>k</name><operator>--</operator></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>wbp</name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>wbp</name> <operator>|=</operator> <name><name>input</name><index>[<expr><name>k</name><operator>--</operator></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>wbp</name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>wbp</name> <operator>|=</operator> <name><name>input</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>k</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>doTheRounds</name><argument_list>(<argument><expr><name>workBuff</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name> <operator>=</operator> <name>newI</name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>state</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sum</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>k</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>k</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sum</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>k</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>k</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sum</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>k</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>k</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sum</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>k</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></for>
	<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>bytesToHex</name><parameter_list>(<parameter><decl><type><name>uint8</name></type> <name><name>b</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hex</name> <init>= <expr><literal type="string">"0123456789abcdef"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>q</name></decl>,
				<decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>q</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>q</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>q</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name><name>s</name><index>[<expr><name>w</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>hex</name><index>[<expr><operator>(</operator><name><name>b</name><index>[<expr><name>q</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>s</name><index>[<expr><name>w</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>hex</name><index>[<expr><name><name>b</name><index>[<expr><name>q</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name><name>s</name><index>[<expr><name>w</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 *	PUBLIC FUNCTIONS
 */</comment>

<comment type="block">/*
 *	pg_md5_hash
 *
 *	Calculates the MD5 sum of the bytes in a buffer.
 *
 *	SYNOPSIS	  #include "md5.h"
 *				  int pg_md5_hash(const void *buff, size_t len, char *hexsum)
 *
 *	INPUT		  buff	  the buffer containing the bytes that you want
 *						  the MD5 sum of.
 *				  len	  number of bytes in the buffer.
 *
 *	OUTPUT		  hexsum  the MD5 sum as a '\0'-terminated string of
 *						  hexadecimal digits.  an MD5 sum is 16 bytes long.
 *						  each byte is represented by two hexadecimal
 *						  characters.  you thus need to provide an array
 *						  of 33 characters, including the trailing '\0'.
 *
 *	RETURNS		  false on failure (out of memory for internal buffers) or
 *				  true on success.
 *
 *	STANDARDS	  MD5 is described in RFC 1321.
 *
 *	AUTHOR		  Sverre H. Huseby &lt;sverrehu@online.no&gt;
 *
 */</comment>
<function><type><name>bool</name></type>
<name>pg_md5_hash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>hexsum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint8</name></type>		<name><name>sum</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>calculateDigestFromBuffer</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>bytesToHex</name><argument_list>(<argument><expr><name>sum</name></expr></argument>, <argument><expr><name>hexsum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>pg_md5_binary</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buff</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>outbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>calculateDigestFromBuffer</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>outbuf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Computes MD5 checksum of "passwd" (a null-terminated string) followed
 * by "salt" (which need not be null-terminated).
 *
 * Output format is "md5" followed by a 32-hex-digit MD5 checksum.
 * Hence, the output buffer "buf" must be at least 36 bytes long.
 *
 * Returns true if okay, false on error (out of memory).
 */</comment>
<function><type><name>bool</name></type>
<name>pg_md5_encrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>passwd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>salt</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>salt_len</name></decl></parameter>,
			   <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>passwd_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>passwd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* +1 here is just to avoid risk of unportable malloc(0) */</comment>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>crypt_buf</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>passwd_len</name> <operator>+</operator> <name>salt_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>crypt_buf</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Place salt at the end because it may be known by users trying to crack
	 * the MD5 output.
	 */</comment>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>crypt_buf</name></expr></argument>, <argument><expr><name>passwd</name></expr></argument>, <argument><expr><name>passwd_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>crypt_buf</name> <operator>+</operator> <name>passwd_len</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><name>salt_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"md5"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pg_md5_hash</name><argument_list>(<argument><expr><name>crypt_buf</name></expr></argument>, <argument><expr><name>passwd_len</name> <operator>+</operator> <name>salt_len</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>crypt_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
</unit>
