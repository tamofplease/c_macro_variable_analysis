<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/common/f2s.c"><comment type="block">/*---------------------------------------------------------------------------
 *
 * Ryu floating-point output for single precision.
 *
 * Portions Copyright (c) 2018-2020, PostgreSQL Global Development Group
 *
 * IDENTIFICATION
 *	  src/common/f2s.c
 *
 * This is a modification of code taken from github.com/ulfjack/ryu under the
 * terms of the Boost license (not the Apache license). The original copyright
 * notice follows:
 *
 * Copyright 2018 Ulf Adams
 *
 * The contents of this file may be used under the terms of the Apache
 * License, Version 2.0.
 *
 *     (See accompanying file LICENSE-Apache or copy at
 *      http://www.apache.org/licenses/LICENSE-2.0)
 *
 * Alternatively, the contents of this file may be used under the terms of the
 * Boost Software License, Version 1.0.
 *
 *     (See accompanying file LICENSE-Boost or copy at
 *      https://www.boost.org/LICENSE_1_0.txt)
 *
 * Unless required by applicable law or agreed to in writing, this software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.
 *
 *---------------------------------------------------------------------------
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FRONTEND</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/shortest_dec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"digit_table.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ryu_common.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLOAT_MANTISSA_BITS</name></cpp:macro> <cpp:value>23</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLOAT_EXPONENT_BITS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLOAT_BIAS</name></cpp:macro> <cpp:value>127</cpp:value></cpp:define>

<comment type="block">/*
 * This table is generated (by the upstream) by PrintFloatLookupTable,
 * and modified (by us) to add UINT64CONST.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLOAT_POW5_INV_BITCOUNT</name></cpp:macro> <cpp:value>59</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint64</name></type> <name><name>FLOAT_POW5_INV_SPLIT</name><index>[<expr><literal type="number">31</literal></expr>]</index></name> <init>= <expr><block>{
	<expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">576460752303423489</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">461168601842738791</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">368934881474191033</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">295147905179352826</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">472236648286964522</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">377789318629571618</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">302231454903657294</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">483570327845851670</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">386856262276681336</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">309485009821345069</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">495176015714152110</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">396140812571321688</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">316912650057057351</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">507060240091291761</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">405648192073033409</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">324518553658426727</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">519229685853482763</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">415383748682786211</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">332306998946228969</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">531691198313966350</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">425352958651173080</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">340282366920938464</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">544451787073501542</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">435561429658801234</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">348449143727040987</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">557518629963265579</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">446014903970612463</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">356811923176489971</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">570899077082383953</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">456719261665907162</literal></expr></argument>)</argument_list></call></expr>, <macro><name>UINT64CONST</name><argument_list>(<argument><literal type="number">365375409332725730</literal></argument>)</argument_list></macro>
}</block></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLOAT_POW5_BITCOUNT</name></cpp:macro> <cpp:value>61</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint64</name></type> <name><name>FLOAT_POW5_SPLIT</name><index>[<expr><literal type="number">47</literal></expr>]</index></name> <init>= <expr><block>{
	<expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">1152921504606846976</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">1441151880758558720</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">1801439850948198400</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">2251799813685248000</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">1407374883553280000</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">1759218604441600000</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">2199023255552000000</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">1374389534720000000</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">1717986918400000000</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">2147483648000000000</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">1342177280000000000</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">1677721600000000000</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">2097152000000000000</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">1310720000000000000</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">1638400000000000000</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">2048000000000000000</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">1280000000000000000</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">1600000000000000000</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">2000000000000000000</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">1250000000000000000</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">1562500000000000000</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">1953125000000000000</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">1220703125000000000</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">1525878906250000000</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">1907348632812500000</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">1192092895507812500</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">1490116119384765625</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">1862645149230957031</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">1164153218269348144</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">1455191522836685180</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">1818989403545856475</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">2273736754432320594</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">1421085471520200371</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">1776356839400250464</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">2220446049250313080</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">1387778780781445675</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">1734723475976807094</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">2168404344971008868</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">1355252715606880542</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">1694065894508600678</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">2117582368135750847</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">1323488980084844279</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">1654361225106055349</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">2067951531382569187</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">1292469707114105741</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">1615587133892632177</literal></expr></argument>)</argument_list></call></expr>, <macro><name>UINT64CONST</name><argument_list>(<argument><literal type="number">2019483917365790221</literal></argument>)</argument_list></macro>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32</name></type>
<name>pow5Factor</name><parameter_list>(<parameter><decl><type><name>uint32</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>value</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>q</name> <init>= <expr><name>value</name> <operator>/</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>r</name> <init>= <expr><name>value</name> <operator>%</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>value</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*  Returns true if value is divisible by 5^p. */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>
<name>multipleOfPowerOf5</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>pow5Factor</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>p</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*  Returns true if value is divisible by 2^p. */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>
<name>multipleOfPowerOf2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* return __builtin_ctz(value) &gt;= p; */</comment>
	<return>return <expr><operator>(</operator><name>value</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <name>p</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * It seems to be slightly faster to avoid uint128_t here, although the
 * generated code for uint128_t looks slightly nicer.
 */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32</name></type>
<name>mulShift</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64</name></type> <name>factor</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int32</name></type> <name>shift</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * The casts here help MSVC to avoid calls to the __allmul library
	 * function.
	 */</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>factorLo</name> <init>= <expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name>factor</name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>factorHi</name> <init>= <expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name>factor</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>uint64</name></type> <name>bits0</name> <init>= <expr><operator>(</operator><name>uint64</name><operator>)</operator> <name>m</name> <operator>*</operator> <name>factorLo</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>uint64</name></type> <name>bits1</name> <init>= <expr><operator>(</operator><name>uint64</name><operator>)</operator> <name>m</name> <operator>*</operator> <name>factorHi</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>shift</name> <operator>&gt;</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>RYU_32_BIT_PLATFORM</name></cpp:ifdef>

	<comment type="block">/*
	 * On 32-bit platforms we can avoid a 64-bit shift-right since we only
	 * need the upper 32 bits of the result and the shift value is &gt; 32.
	 */</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>bits0Hi</name> <init>= <expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name>bits0</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>bits1Lo</name> <init>= <expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name>bits1</name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>bits1Hi</name> <init>= <expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name>bits1</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>bits1Lo</name> <operator>+=</operator> <name>bits0Hi</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>bits1Hi</name> <operator>+=</operator> <operator>(</operator><name>bits1Lo</name> <operator>&lt;</operator> <name>bits0Hi</name><operator>)</operator></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>int32</name></type> <name>s</name> <init>= <expr><name>shift</name> <operator>-</operator> <literal type="number">32</literal></expr></init></decl>;</decl_stmt>

	<return>return <expr><operator>(</operator><name>bits1Hi</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>s</name><operator>)</operator><operator>)</operator> <operator>|</operator> <operator>(</operator><name>bits1Lo</name> <operator>&gt;&gt;</operator> <name>s</name><operator>)</operator></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>							<comment type="block">/* RYU_32_BIT_PLATFORM */</comment>

	<decl_stmt><decl><type><specifier>const</specifier> <name>uint64</name></type> <name>sum</name> <init>= <expr><operator>(</operator><name>bits0</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>+</operator> <name>bits1</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>uint64</name></type> <name>shiftedSum</name> <init>= <expr><name>sum</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>shift</name> <operator>-</operator> <literal type="number">32</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>shiftedSum</name> <operator>&lt;=</operator> <name>PG_UINT32_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>uint32</name><operator>)</operator> <name>shiftedSum</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* RYU_32_BIT_PLATFORM */</comment>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32</name></type>
<name>mulPow5InvDivPow2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>q</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int32</name></type> <name>j</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>mulShift</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name><name>FLOAT_POW5_INV_SPLIT</name><index>[<expr><name>q</name></expr>]</index></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32</name></type>
<name>mulPow5divPow2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int32</name></type> <name>j</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>mulShift</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name><name>FLOAT_POW5_SPLIT</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32</name></type>
<name>decimalLength</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Function precondition: v is not a 10-digit number. */</comment>
	<comment type="block">/* (9 digits are sufficient for round-tripping.) */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>v</name> <operator>&lt;</operator> <literal type="number">1000000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;=</operator> <literal type="number">100000000</literal></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><literal type="number">9</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;=</operator> <literal type="number">10000000</literal></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><literal type="number">8</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;=</operator> <literal type="number">1000000</literal></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><literal type="number">7</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;=</operator> <literal type="number">100000</literal></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><literal type="number">6</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;=</operator> <literal type="number">10000</literal></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><literal type="number">5</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;=</operator> <literal type="number">1000</literal></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><literal type="number">4</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;=</operator> <literal type="number">100</literal></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><literal type="number">3</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;=</operator> <literal type="number">10</literal></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><literal type="number">2</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*  A floating decimal representing m * 10^e. */</comment>
<typedef>typedef <type><struct>struct <name>floating_decimal_32</name>
<block>{
	<decl_stmt><decl><type><name>uint32</name></type>		<name>mantissa</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>exponent</name></decl>;</decl_stmt>
}</block></struct></type> <name>floating_decimal_32</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>floating_decimal_32</name></type>
<name>f2d</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>ieeeMantissa</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>ieeeExponent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int32</name></type>		<name>e2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>m2</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>ieeeExponent</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* We subtract 2 so that the bounds computation has 2 additional bits. */</comment>
		<expr_stmt><expr><name>e2</name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name>FLOAT_BIAS</name> <operator>-</operator> <name>FLOAT_MANTISSA_BITS</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>m2</name> <operator>=</operator> <name>ieeeMantissa</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>e2</name> <operator>=</operator> <name>ieeeExponent</name> <operator>-</operator> <name>FLOAT_BIAS</name> <operator>-</operator> <name>FLOAT_MANTISSA_BITS</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>m2</name> <operator>=</operator> <operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <name>FLOAT_MANTISSA_BITS</name><operator>)</operator> <operator>|</operator> <name>ieeeMantissa</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>STRICTLY_SHORTEST</name></expr></cpp:if>
	<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type>	<name>even</name> <init>= <expr><operator>(</operator><name>m2</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type>	<name>acceptBounds</name> <init>= <expr><name>even</name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type>	<name>acceptBounds</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/* Step 2: Determine the interval of legal decimal representations. */</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>mv</name> <init>= <expr><literal type="number">4</literal> <operator>*</operator> <name>m2</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>mp</name> <init>= <expr><literal type="number">4</literal> <operator>*</operator> <name>m2</name> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Implicit bool -&gt; int conversion. True is 1, false is 0. */</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>mmShift</name> <init>= <expr><name>ieeeMantissa</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>ieeeExponent</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>mm</name> <init>= <expr><literal type="number">4</literal> <operator>*</operator> <name>m2</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>mmShift</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Step 3: Convert to a decimal power base using 64-bit arithmetic. */</comment>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>vr</name></decl>,
				<decl><type ref="prev"/><name>vp</name></decl>,
				<decl><type ref="prev"/><name>vm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>e10</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>vmIsTrailingZeros</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>vrIsTrailingZeros</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name>lastRemovedDigit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>e2</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>q</name> <init>= <expr><call><name>log10Pow2</name><argument_list>(<argument><expr><name>e2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>e10</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>

		<decl_stmt><decl><type><specifier>const</specifier> <name>int32</name></type> <name>k</name> <init>= <expr><name>FLOAT_POW5_INV_BITCOUNT</name> <operator>+</operator> <call><name>pow5bits</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>int32</name></type> <name>i</name> <init>= <expr><operator>-</operator><name>e2</name> <operator>+</operator> <name>q</name> <operator>+</operator> <name>k</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>vr</name> <operator>=</operator> <call><name>mulPow5InvDivPow2</name><argument_list>(<argument><expr><name>mv</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>vp</name> <operator>=</operator> <call><name>mulPow5InvDivPow2</name><argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>vm</name> <operator>=</operator> <call><name>mulPow5InvDivPow2</name><argument_list>(<argument><expr><name>mm</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>q</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>vp</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">10</literal> <operator>&lt;=</operator> <name>vm</name> <operator>/</operator> <literal type="number">10</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * We need to know one removed digit even if we are not going to
			 * loop below. We could use q = X - 1 above, except that would
			 * require 33 bits for the result, and we've found that 32-bit
			 * arithmetic is faster even on 64-bit machines.
			 */</comment>
			<decl_stmt><decl><type><specifier>const</specifier> <name>int32</name></type> <name>l</name> <init>= <expr><name>FLOAT_POW5_INV_BITCOUNT</name> <operator>+</operator> <call><name>pow5bits</name><argument_list>(<argument><expr><name>q</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name>lastRemovedDigit</name> <operator>=</operator> <operator>(</operator><name>uint8</name><operator>)</operator> <operator>(</operator><call><name>mulPow5InvDivPow2</name><argument_list>(<argument><expr><name>mv</name></expr></argument>, <argument><expr><name>q</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><name>e2</name> <operator>+</operator> <name>q</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name>l</name></expr></argument>)</argument_list></call> <operator>%</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>q</name> <operator>&lt;=</operator> <literal type="number">9</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * The largest power of 5 that fits in 24 bits is 5^10, but q &lt;= 9
			 * seems to be safe as well.
			 *
			 * Only one of mp, mv, and mm can be a multiple of 5, if any.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name>mv</name> <operator>%</operator> <literal type="number">5</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>vrIsTrailingZeros</name> <operator>=</operator> <call><name>multipleOfPowerOf5</name><argument_list>(<argument><expr><name>mv</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>acceptBounds</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>vmIsTrailingZeros</name> <operator>=</operator> <call><name>multipleOfPowerOf5</name><argument_list>(<argument><expr><name>mm</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><name>vp</name> <operator>-=</operator> <call><name>multipleOfPowerOf5</name><argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>q</name> <init>= <expr><call><name>log10Pow5</name><argument_list>(<argument><expr><operator>-</operator><name>e2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>e10</name> <operator>=</operator> <name>q</name> <operator>+</operator> <name>e2</name></expr>;</expr_stmt>

		<decl_stmt><decl><type><specifier>const</specifier> <name>int32</name></type> <name>i</name> <init>= <expr><operator>-</operator><name>e2</name> <operator>-</operator> <name>q</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>int32</name></type> <name>k</name> <init>= <expr><call><name>pow5bits</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>FLOAT_POW5_BITCOUNT</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int32</name></type>		<name>j</name> <init>= <expr><name>q</name> <operator>-</operator> <name>k</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>vr</name> <operator>=</operator> <call><name>mulPow5divPow2</name><argument_list>(<argument><expr><name>mv</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>vp</name> <operator>=</operator> <call><name>mulPow5divPow2</name><argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>vm</name> <operator>=</operator> <call><name>mulPow5divPow2</name><argument_list>(<argument><expr><name>mm</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>q</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>vp</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">10</literal> <operator>&lt;=</operator> <name>vm</name> <operator>/</operator> <literal type="number">10</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>j</name> <operator>=</operator> <name>q</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <operator>(</operator><call><name>pow5bits</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name>FLOAT_POW5_BITCOUNT</name><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>lastRemovedDigit</name> <operator>=</operator> <operator>(</operator><name>uint8</name><operator>)</operator> <operator>(</operator><call><name>mulPow5divPow2</name><argument_list>(<argument><expr><name>mv</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call> <operator>%</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>q</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * {vr,vp,vm} is trailing zeros if {mv,mp,mm} has at least q
			 * trailing 0 bits.
			 */</comment>
			<comment type="block">/* mv = 4 * m2, so it always has at least two trailing 0 bits. */</comment>
			<expr_stmt><expr><name>vrIsTrailingZeros</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>acceptBounds</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/*
				 * mm = mv - 1 - mmShift, so it has 1 trailing 0 bit iff
				 * mmShift == 1.
				 */</comment>
				<expr_stmt><expr><name>vmIsTrailingZeros</name> <operator>=</operator> <name>mmShift</name> <operator>==</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<comment type="block">/*
				 * mp = mv + 2, so it always has at least one trailing 0 bit.
				 */</comment>
				<expr_stmt><expr><operator>--</operator><name>vp</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>q</name> <operator>&lt;</operator> <literal type="number">31</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* TODO(ulfjack):Use a tighter bound here. */</comment>
			<expr_stmt><expr><name>vrIsTrailingZeros</name> <operator>=</operator> <call><name>multipleOfPowerOf2</name><argument_list>(<argument><expr><name>mv</name></expr></argument>, <argument><expr><name>q</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/*
	 * Step 4: Find the shortest decimal representation in the interval of
	 * legal representations.
	 */</comment>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>removed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>output</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>vmIsTrailingZeros</name> <operator>||</operator> <name>vrIsTrailingZeros</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* General case, which happens rarely (~4.0%). */</comment>
		<while>while <condition>(<expr><name>vp</name> <operator>/</operator> <literal type="number">10</literal> <operator>&gt;</operator> <name>vm</name> <operator>/</operator> <literal type="number">10</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>vmIsTrailingZeros</name> <operator>&amp;=</operator> <name>vm</name> <operator>-</operator> <operator>(</operator><name>vm</name> <operator>/</operator> <literal type="number">10</literal><operator>)</operator> <operator>*</operator> <literal type="number">10</literal> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>vrIsTrailingZeros</name> <operator>&amp;=</operator> <name>lastRemovedDigit</name> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>lastRemovedDigit</name> <operator>=</operator> <operator>(</operator><name>uint8</name><operator>)</operator> <operator>(</operator><name>vr</name> <operator>%</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>vr</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>vp</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>vm</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
			<expr_stmt><expr><operator>++</operator><name>removed</name></expr>;</expr_stmt>
		</block_content>}</block></while>
		<if_stmt><if>if <condition>(<expr><name>vmIsTrailingZeros</name></expr>)</condition>
		<block>{<block_content>
			<while>while <condition>(<expr><name>vm</name> <operator>%</operator> <literal type="number">10</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>vrIsTrailingZeros</name> <operator>&amp;=</operator> <name>lastRemovedDigit</name> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>lastRemovedDigit</name> <operator>=</operator> <operator>(</operator><name>uint8</name><operator>)</operator> <operator>(</operator><name>vr</name> <operator>%</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>vr</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>vp</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>vm</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
				<expr_stmt><expr><operator>++</operator><name>removed</name></expr>;</expr_stmt>
			</block_content>}</block></while>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>vrIsTrailingZeros</name> <operator>&amp;&amp;</operator> <name>lastRemovedDigit</name> <operator>==</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator> <name>vr</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Round even if the exact number is .....50..0. */</comment>
			<expr_stmt><expr><name>lastRemovedDigit</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * We need to take vr + 1 if vr is outside bounds or we need to round
		 * up.
		 */</comment>
		<expr_stmt><expr><name>output</name> <operator>=</operator> <name>vr</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>vr</name> <operator>==</operator> <name>vm</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>acceptBounds</name> <operator>||</operator> <operator>!</operator><name>vmIsTrailingZeros</name><operator>)</operator><operator>)</operator> <operator>||</operator> <name>lastRemovedDigit</name> <operator>&gt;=</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/*
		 * Specialized for the common case (~96.0%). Percentages below are
		 * relative to this.
		 *
		 * Loop iterations below (approximately): 0: 13.6%, 1: 70.7%, 2:
		 * 14.1%, 3: 1.39%, 4: 0.14%, 5+: 0.01%
		 */</comment>
		<while>while <condition>(<expr><name>vp</name> <operator>/</operator> <literal type="number">10</literal> <operator>&gt;</operator> <name>vm</name> <operator>/</operator> <literal type="number">10</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>lastRemovedDigit</name> <operator>=</operator> <operator>(</operator><name>uint8</name><operator>)</operator> <operator>(</operator><name>vr</name> <operator>%</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>vr</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>vp</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>vm</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
			<expr_stmt><expr><operator>++</operator><name>removed</name></expr>;</expr_stmt>
		</block_content>}</block></while>

		<comment type="block">/*
		 * We need to take vr + 1 if vr is outside bounds or we need to round
		 * up.
		 */</comment>
		<expr_stmt><expr><name>output</name> <operator>=</operator> <name>vr</name> <operator>+</operator> <operator>(</operator><name>vr</name> <operator>==</operator> <name>vm</name> <operator>||</operator> <name>lastRemovedDigit</name> <operator>&gt;=</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>int32</name></type> <name>exp</name> <init>= <expr><name>e10</name> <operator>+</operator> <name>removed</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>floating_decimal_32</name></type> <name>fd</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>fd</name><operator>.</operator><name>exponent</name></name> <operator>=</operator> <name>exp</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fd</name><operator>.</operator><name>mantissa</name></name> <operator>=</operator> <name>output</name></expr>;</expr_stmt>
	<return>return <expr><name>fd</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>to_chars_f</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>floating_decimal_32</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>olength</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Step 5: Print the decimal representation. */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>uint32</name></type>		<name>output</name> <init>= <expr><name><name>v</name><operator>.</operator><name>mantissa</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>exp</name> <init>= <expr><name><name>v</name><operator>.</operator><name>exponent</name></name></expr></init></decl>;</decl_stmt>

	<comment type="block">/*----
	 * On entry, mantissa * 10^exp is the result to be output.
	 * Caller has already done the - sign if needed.
	 *
	 * We want to insert the point somewhere depending on the output length
	 * and exponent, which might mean adding zeros:
	 *
	 *            exp  | format
	 *            1+   |  ddddddddd000000
	 *            0    |  ddddddddd
	 *  -1 .. -len+1   |  dddddddd.d to d.ddddddddd
	 *  -len ...       |  0.ddddddddd to 0.000dddddd
	 */</comment>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>nexp</name> <init>= <expr><name>exp</name> <operator>+</operator> <name>olength</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>nexp</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* -nexp is number of 0s to add after '.' */</comment>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>nexp</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* 0.000ddddd */</comment>
		<expr_stmt><expr><name>index</name> <operator>=</operator> <literal type="number">2</literal> <operator>-</operator> <name>nexp</name></expr>;</expr_stmt>
		<comment type="block">/* copy 8 bytes rather than 5 to let compiler optimize */</comment>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"0.000000"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>exp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * dddd.dddd; leave space at the start and move the '.' in after
		 */</comment>
		<expr_stmt><expr><name>index</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/*
		 * We can save some code later by pre-filling with zeros. We know that
		 * there can be no more than 6 output digits in this form, otherwise
		 * we would not choose fixed-point output. memset 8 rather than 6
		 * bytes to let the compiler optimize it.
		 */</comment>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>exp</name> <operator>&lt;</operator> <literal type="number">6</literal> <operator>&amp;&amp;</operator> <name>exp</name> <operator>+</operator> <name>olength</name> <operator>&lt;=</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="char">'0'</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<while>while <condition>(<expr><name>output</name> <operator>&gt;=</operator> <literal type="number">10000</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>c</name> <init>= <expr><name>output</name> <operator>-</operator> <literal type="number">10000</literal> <operator>*</operator> <operator>(</operator><name>output</name> <operator>/</operator> <literal type="number">10000</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>c0</name> <init>= <expr><operator>(</operator><name>c</name> <operator>%</operator> <literal type="number">100</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>c1</name> <init>= <expr><operator>(</operator><name>c</name> <operator>/</operator> <literal type="number">100</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>output</name> <operator>/=</operator> <literal type="number">10000</literal></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>result</name> <operator>+</operator> <name>index</name> <operator>+</operator> <name>olength</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>DIGIT_TABLE</name> <operator>+</operator> <name>c0</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>result</name> <operator>+</operator> <name>index</name> <operator>+</operator> <name>olength</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>DIGIT_TABLE</name> <operator>+</operator> <name>c1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	</block_content>}</block></while>
	<if_stmt><if>if <condition>(<expr><name>output</name> <operator>&gt;=</operator> <literal type="number">100</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>c</name> <init>= <expr><operator>(</operator><name>output</name> <operator>%</operator> <literal type="number">100</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>output</name> <operator>/=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>result</name> <operator>+</operator> <name>index</name> <operator>+</operator> <name>olength</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>DIGIT_TABLE</name> <operator>+</operator> <name>c</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>output</name> <operator>&gt;=</operator> <literal type="number">10</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>c</name> <init>= <expr><name>output</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>result</name> <operator>+</operator> <name>index</name> <operator>+</operator> <name>olength</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>DIGIT_TABLE</name> <operator>+</operator> <name>c</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name><name>result</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><literal type="char">'0'</literal> <operator>+</operator> <name>output</name><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * nexp is 1..6 here, representing the number of digits before the
		 * point. A value of 7+ is not possible because we switch to
		 * scientific notation when the display exponent reaches 6.
		 */</comment>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>nexp</name> <operator>&lt;</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* gcc only seems to want to optimize memmove for small 2^n */</comment>
		<if_stmt><if>if <condition>(<expr><name>nexp</name> <operator>&amp;</operator> <literal type="number">4</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>result</name> <operator>+</operator> <name>index</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>result</name> <operator>+</operator> <name>index</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>index</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>nexp</name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>result</name> <operator>+</operator> <name>index</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>result</name> <operator>+</operator> <name>index</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>index</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>nexp</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>result</name><index>[<expr><name>index</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>result</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>result</name><index>[<expr><name>nexp</name></expr>]</index></name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>index</name> <operator>=</operator> <name>olength</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>exp</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* we supplied the trailing zeros earlier, now just set the length. */</comment>
		<expr_stmt><expr><name>index</name> <operator>=</operator> <name>olength</name> <operator>+</operator> <name>exp</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>index</name> <operator>=</operator> <name>olength</name> <operator>+</operator> <operator>(</operator><literal type="number">2</literal> <operator>-</operator> <name>nexp</name><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>index</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>to_chars</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>floating_decimal_32</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Step 5: Print the decimal representation. */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>uint32</name></type>		<name>output</name> <init>= <expr><name><name>v</name><operator>.</operator><name>mantissa</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>olength</name> <init>= <expr><call><name>decimalLength</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>exp</name> <init>= <expr><name><name>v</name><operator>.</operator><name>exponent</name></name> <operator>+</operator> <name>olength</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>sign</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>result</name><index>[<expr><name>index</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * The thresholds for fixed-point output are chosen to match printf
	 * defaults. Beware that both the code of to_chars_f and the value of
	 * FLOAT_SHORTEST_DECIMAL_LEN are sensitive to these thresholds.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>exp</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>exp</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>to_chars_f</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>olength</name></expr></argument>, <argument><expr><name>result</name> <operator>+</operator> <name>index</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>sign</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * If v.exponent is exactly 0, we might have reached here via the small
	 * integer fast path, in which case v.mantissa might contain trailing
	 * (decimal) zeros. For scientific notation we need to move these zeros
	 * into the exponent. (For fixed point this doesn't matter, which is why
	 * we do this here rather than above.)
	 *
	 * Since we already calculated the display exponent (exp) above based on
	 * the old decimal length, that value does not change here. Instead, we
	 * just reduce the display length for each digit removed.
	 *
	 * If we didn't get here via the fast path, the raw exponent will not
	 * usually be 0, and there will be no trailing zeros, so we pay no more
	 * than one div10/multiply extra cost. We claw back half of that by
	 * checking for divisibility by 2 before dividing by 10.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>.</operator><name>exponent</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<while>while <condition>(<expr><operator>(</operator><name>output</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>q</name> <init>= <expr><name>output</name> <operator>/</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>r</name> <init>= <expr><name>output</name> <operator>-</operator> <literal type="number">10</literal> <operator>*</operator> <name>q</name></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>output</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>--</operator><name>olength</name></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*----
	 * Print the decimal digits.
	 * The following code is equivalent to:
	 *
	 * for (uint32 i = 0; i &lt; olength - 1; ++i) {
	 *   const uint32 c = output % 10; output /= 10;
	 *   result[index + olength - i] = (char) ('0' + c);
	 * }
	 * result[index] = '0' + output % 10;
	 */</comment>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>output</name> <operator>&gt;=</operator> <literal type="number">10000</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>c</name> <init>= <expr><name>output</name> <operator>-</operator> <literal type="number">10000</literal> <operator>*</operator> <operator>(</operator><name>output</name> <operator>/</operator> <literal type="number">10000</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>c0</name> <init>= <expr><operator>(</operator><name>c</name> <operator>%</operator> <literal type="number">100</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>c1</name> <init>= <expr><operator>(</operator><name>c</name> <operator>/</operator> <literal type="number">100</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>output</name> <operator>/=</operator> <literal type="number">10000</literal></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>result</name> <operator>+</operator> <name>index</name> <operator>+</operator> <name>olength</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>DIGIT_TABLE</name> <operator>+</operator> <name>c0</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>result</name> <operator>+</operator> <name>index</name> <operator>+</operator> <name>olength</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>DIGIT_TABLE</name> <operator>+</operator> <name>c1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	</block_content>}</block></while>
	<if_stmt><if>if <condition>(<expr><name>output</name> <operator>&gt;=</operator> <literal type="number">100</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>c</name> <init>= <expr><operator>(</operator><name>output</name> <operator>%</operator> <literal type="number">100</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>output</name> <operator>/=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>result</name> <operator>+</operator> <name>index</name> <operator>+</operator> <name>olength</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>DIGIT_TABLE</name> <operator>+</operator> <name>c</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>output</name> <operator>&gt;=</operator> <literal type="number">10</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>c</name> <init>= <expr><name>output</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

		<comment type="block">/*
		 * We can't use memcpy here: the decimal dot goes between these two
		 * digits.
		 */</comment>
		<expr_stmt><expr><name><name>result</name><index>[<expr><name>index</name> <operator>+</operator> <name>olength</name> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name><name>DIGIT_TABLE</name><index>[<expr><name>c</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>result</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <name><name>DIGIT_TABLE</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name><name>result</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><literal type="char">'0'</literal> <operator>+</operator> <name>output</name><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* Print decimal point if needed. */</comment>
	<if_stmt><if>if <condition>(<expr><name>olength</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>result</name><index>[<expr><name>index</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>index</name> <operator>+=</operator> <name>olength</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><operator>++</operator><name>index</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* Print the exponent. */</comment>
	<expr_stmt><expr><name><name>result</name><index>[<expr><name>index</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'e'</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>exp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>result</name><index>[<expr><name>index</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>exp</name> <operator>=</operator> <operator>-</operator><name>exp</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>result</name><index>[<expr><name>index</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'+'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>result</name> <operator>+</operator> <name>index</name></expr></argument>, <argument><expr><name>DIGIT_TABLE</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>exp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>index</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

	<return>return <expr><name>index</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>
<name>f2d_small_int</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>ieeeMantissa</name></decl></parameter>,
			  <parameter><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>ieeeExponent</name></decl></parameter>,
			  <parameter><decl><type><name>floating_decimal_32</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int32</name></type> <name>e2</name> <init>= <expr><operator>(</operator><name>int32</name><operator>)</operator> <name>ieeeExponent</name> <operator>-</operator> <name>FLOAT_BIAS</name> <operator>-</operator> <name>FLOAT_MANTISSA_BITS</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * Avoid using multiple "return false;" here since it tends to provoke the
	 * compiler into inlining multiple copies of f2d, which is undesirable.
	 */</comment>

	<if_stmt><if>if <condition>(<expr><name>e2</name> <operator>&gt;=</operator> <operator>-</operator><name>FLOAT_MANTISSA_BITS</name> <operator>&amp;&amp;</operator> <name>e2</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*----
		 * Since 2^23 &lt;= m2 &lt; 2^24 and 0 &lt;= -e2 &lt;= 23:
		 *   1 &lt;= f = m2 / 2^-e2 &lt; 2^24.
		 *
		 * Test if the lower -e2 bits of the significand are 0, i.e. whether
		 * the fraction is 0. We can use ieeeMantissa here, since the implied
		 * 1 bit can never be tested by this; the implied 1 can only be part
		 * of a fraction if e2 &lt; -FLOAT_MANTISSA_BITS which we already
		 * checked. (e.g. 0.5 gives ieeeMantissa == 0 and e2 == -24)
		 */</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>mask</name> <init>= <expr><operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <operator>-</operator><name>e2</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>fraction</name> <init>= <expr><name>ieeeMantissa</name> <operator>&amp;</operator> <name>mask</name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>fraction</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*----
			 * f is an integer in the range [1, 2^24).
			 * Note: mantissa might contain trailing (decimal) 0's.
			 * Note: since 2^24 &lt; 10^9, there is no need to adjust
			 * decimalLength().
			 */</comment>
			<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>m2</name> <init>= <expr><operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>FLOAT_MANTISSA_BITS</name><operator>)</operator> <operator>|</operator> <name>ieeeMantissa</name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>mantissa</name></name> <operator>=</operator> <name>m2</name> <operator>&gt;&gt;</operator> <operator>-</operator><name>e2</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>exponent</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<return>return <expr><name>true</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Store the shortest decimal representation of the given float as an
 * UNTERMINATED string in the caller's supplied buffer (which must be at least
 * FLOAT_SHORTEST_DECIMAL_LEN-1 bytes long).
 *
 * Returns the number of bytes stored.
 */</comment>
<function><type><name>int</name></type>
<name>float_to_shortest_decimal_bufn</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * Step 1: Decode the floating-point number, and unify normalized and
	 * subnormal cases.
	 */</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>bits</name> <init>= <expr><call><name>float_to_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Decode bits into sign, mantissa, and exponent. */</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type>	<name>ieeeSign</name> <init>= <expr><operator>(</operator><operator>(</operator><name>bits</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>FLOAT_MANTISSA_BITS</name> <operator>+</operator> <name>FLOAT_EXPONENT_BITS</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>ieeeMantissa</name> <init>= <expr><name>bits</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <name>FLOAT_MANTISSA_BITS</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>ieeeExponent</name> <init>= <expr><operator>(</operator><name>bits</name> <operator>&gt;&gt;</operator> <name>FLOAT_MANTISSA_BITS</name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <name>FLOAT_EXPONENT_BITS</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Case distinction; exit early for the easy cases. */</comment>
	<if_stmt><if>if <condition>(<expr><name>ieeeExponent</name> <operator>==</operator> <operator>(</operator><operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <name>FLOAT_EXPONENT_BITS</name><operator>)</operator> <operator>-</operator> <literal type="number">1u</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ieeeExponent</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ieeeMantissa</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><call><name>copy_special_str</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>ieeeSign</name></expr></argument>, <argument><expr><operator>(</operator><name>ieeeExponent</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>ieeeMantissa</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>floating_decimal_32</name></type> <name>v</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type>	<name>isSmallInt</name> <init>= <expr><call><name>f2d_small_int</name><argument_list>(<argument><expr><name>ieeeMantissa</name></expr></argument>, <argument><expr><name>ieeeExponent</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isSmallInt</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>f2d</name><argument_list>(<argument><expr><name>ieeeMantissa</name></expr></argument>, <argument><expr><name>ieeeExponent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><call><name>to_chars</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>ieeeSign</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Store the shortest decimal representation of the given float as a
 * null-terminated string in the caller's supplied buffer (which must be at
 * least FLOAT_SHORTEST_DECIMAL_LEN bytes long).
 *
 * Returns the string length.
 */</comment>
<function><type><name>int</name></type>
<name>float_to_shortest_decimal_buf</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type>	<name>index</name> <init>= <expr><call><name>float_to_shortest_decimal_bufn</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Terminate the string. */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>index</name> <operator>&lt;</operator> <name>FLOAT_SHORTEST_DECIMAL_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	<return>return <expr><name>index</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Return the shortest decimal representation as a null-terminated palloc'd
 * string (outside the backend, uses malloc() instead).
 *
 * Caller is responsible for freeing the result.
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>float_to_shortest_decimal</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier><specifier>const</specifier></type> <name>result</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>FLOAT_SHORTEST_DECIMAL_LEN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>float_to_shortest_decimal_buf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
</unit>
