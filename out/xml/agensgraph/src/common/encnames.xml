<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/common/encnames.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * encnames.c
 *	  Encoding names and routines for working with them.
 *
 * Portions Copyright (c) 2001-2020, PostgreSQL Global Development Group
 *
 * IDENTIFICATION
 *	  src/common/encnames.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"c.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mb/pg_wchar.h"</cpp:file></cpp:include>


<comment type="block">/* ----------
 * All encoding names, sorted:		 *** A L P H A B E T I C ***
 *
 * All names must be without irrelevant chars, search routines use
 * isalnum() chars only. It means ISO-8859-1, iso_8859-1 and Iso8859_1
 * are always converted to 'iso88591'. All must be lower case.
 *
 * The table doesn't contain 'cs' aliases (like csISOLatin1). It's needed?
 *
 * Karel Zak, Aug 2001
 * ----------
 */</comment>
<typedef>typedef <type><struct>struct <name>pg_encname</name>
<block>{
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pg_enc</name></type>		<name>encoding</name></decl>;</decl_stmt>
}</block></struct></type> <name>pg_encname</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>pg_encname</name></type> <name><name>pg_encname_tbl</name><index>[]</index></name> <init>=
<expr><block>{
	<expr><block>{
		<expr><literal type="string">"abc"</literal></expr>, <expr><name>PG_WIN1258</name></expr>
	}</block></expr>,							<comment type="block">/* alias for WIN1258 */</comment>
	<expr><block>{
		<expr><literal type="string">"alt"</literal></expr>, <expr><name>PG_WIN866</name></expr>
	}</block></expr>,							<comment type="block">/* IBM866 */</comment>
	<expr><block>{
		<expr><literal type="string">"big5"</literal></expr>, <expr><name>PG_BIG5</name></expr>
	}</block></expr>,							<comment type="block">/* Big5; Chinese for Taiwan multibyte set */</comment>
	<expr><block>{
		<expr><literal type="string">"euccn"</literal></expr>, <expr><name>PG_EUC_CN</name></expr>
	}</block></expr>,							<comment type="block">/* EUC-CN; Extended Unix Code for simplified
								 * Chinese */</comment>
	<expr><block>{
		<expr><literal type="string">"eucjis2004"</literal></expr>, <expr><name>PG_EUC_JIS_2004</name></expr>
	}</block></expr>,							<comment type="block">/* EUC-JIS-2004; Extended UNIX Code fixed
								 * Width for Japanese, standard JIS X 0213 */</comment>
	<expr><block>{
		<expr><literal type="string">"eucjp"</literal></expr>, <expr><name>PG_EUC_JP</name></expr>
	}</block></expr>,							<comment type="block">/* EUC-JP; Extended UNIX Code fixed Width for
								 * Japanese, standard OSF */</comment>
	<expr><block>{
		<expr><literal type="string">"euckr"</literal></expr>, <expr><name>PG_EUC_KR</name></expr>
	}</block></expr>,							<comment type="block">/* EUC-KR; Extended Unix Code for Korean , KS
								 * X 1001 standard */</comment>
	<expr><block>{
		<expr><literal type="string">"euctw"</literal></expr>, <expr><name>PG_EUC_TW</name></expr>
	}</block></expr>,							<comment type="block">/* EUC-TW; Extended Unix Code for
								 *
								 * traditional Chinese */</comment>
	<expr><block>{
		<expr><literal type="string">"gb18030"</literal></expr>, <expr><name>PG_GB18030</name></expr>
	}</block></expr>,							<comment type="block">/* GB18030;GB18030 */</comment>
	<expr><block>{
		<expr><literal type="string">"gbk"</literal></expr>, <expr><name>PG_GBK</name></expr>
	}</block></expr>,							<comment type="block">/* GBK; Chinese Windows CodePage 936
								 * simplified Chinese */</comment>
	<expr><block>{
		<expr><literal type="string">"iso88591"</literal></expr>, <expr><name>PG_LATIN1</name></expr>
	}</block></expr>,							<comment type="block">/* ISO-8859-1; RFC1345,KXS2 */</comment>
	<expr><block>{
		<expr><literal type="string">"iso885910"</literal></expr>, <expr><name>PG_LATIN6</name></expr>
	}</block></expr>,							<comment type="block">/* ISO-8859-10; RFC1345,KXS2 */</comment>
	<expr><block>{
		<expr><literal type="string">"iso885913"</literal></expr>, <expr><name>PG_LATIN7</name></expr>
	}</block></expr>,							<comment type="block">/* ISO-8859-13; RFC1345,KXS2 */</comment>
	<expr><block>{
		<expr><literal type="string">"iso885914"</literal></expr>, <expr><name>PG_LATIN8</name></expr>
	}</block></expr>,							<comment type="block">/* ISO-8859-14; RFC1345,KXS2 */</comment>
	<expr><block>{
		<expr><literal type="string">"iso885915"</literal></expr>, <expr><name>PG_LATIN9</name></expr>
	}</block></expr>,							<comment type="block">/* ISO-8859-15; RFC1345,KXS2 */</comment>
	<expr><block>{
		<expr><literal type="string">"iso885916"</literal></expr>, <expr><name>PG_LATIN10</name></expr>
	}</block></expr>,							<comment type="block">/* ISO-8859-16; RFC1345,KXS2 */</comment>
	<expr><block>{
		<expr><literal type="string">"iso88592"</literal></expr>, <expr><name>PG_LATIN2</name></expr>
	}</block></expr>,							<comment type="block">/* ISO-8859-2; RFC1345,KXS2 */</comment>
	<expr><block>{
		<expr><literal type="string">"iso88593"</literal></expr>, <expr><name>PG_LATIN3</name></expr>
	}</block></expr>,							<comment type="block">/* ISO-8859-3; RFC1345,KXS2 */</comment>
	<expr><block>{
		<expr><literal type="string">"iso88594"</literal></expr>, <expr><name>PG_LATIN4</name></expr>
	}</block></expr>,							<comment type="block">/* ISO-8859-4; RFC1345,KXS2 */</comment>
	<expr><block>{
		<expr><literal type="string">"iso88595"</literal></expr>, <expr><name>PG_ISO_8859_5</name></expr>
	}</block></expr>,							<comment type="block">/* ISO-8859-5; RFC1345,KXS2 */</comment>
	<expr><block>{
		<expr><literal type="string">"iso88596"</literal></expr>, <expr><name>PG_ISO_8859_6</name></expr>
	}</block></expr>,							<comment type="block">/* ISO-8859-6; RFC1345,KXS2 */</comment>
	<expr><block>{
		<expr><literal type="string">"iso88597"</literal></expr>, <expr><name>PG_ISO_8859_7</name></expr>
	}</block></expr>,							<comment type="block">/* ISO-8859-7; RFC1345,KXS2 */</comment>
	<expr><block>{
		<expr><literal type="string">"iso88598"</literal></expr>, <expr><name>PG_ISO_8859_8</name></expr>
	}</block></expr>,							<comment type="block">/* ISO-8859-8; RFC1345,KXS2 */</comment>
	<expr><block>{
		<expr><literal type="string">"iso88599"</literal></expr>, <expr><name>PG_LATIN5</name></expr>
	}</block></expr>,							<comment type="block">/* ISO-8859-9; RFC1345,KXS2 */</comment>
	<expr><block>{
		<expr><literal type="string">"johab"</literal></expr>, <expr><name>PG_JOHAB</name></expr>
	}</block></expr>,							<comment type="block">/* JOHAB; Extended Unix Code for simplified
								 * Chinese */</comment>
	<expr><block>{
		<expr><literal type="string">"koi8"</literal></expr>, <expr><name>PG_KOI8R</name></expr>
	}</block></expr>,							<comment type="block">/* _dirty_ alias for KOI8-R (backward
								 * compatibility) */</comment>
	<expr><block>{
		<expr><literal type="string">"koi8r"</literal></expr>, <expr><name>PG_KOI8R</name></expr>
	}</block></expr>,							<comment type="block">/* KOI8-R; RFC1489 */</comment>
	<expr><block>{
		<expr><literal type="string">"koi8u"</literal></expr>, <expr><name>PG_KOI8U</name></expr>
	}</block></expr>,							<comment type="block">/* KOI8-U; RFC2319 */</comment>
	<expr><block>{
		<expr><literal type="string">"latin1"</literal></expr>, <expr><name>PG_LATIN1</name></expr>
	}</block></expr>,							<comment type="block">/* alias for ISO-8859-1 */</comment>
	<expr><block>{
		<expr><literal type="string">"latin10"</literal></expr>, <expr><name>PG_LATIN10</name></expr>
	}</block></expr>,							<comment type="block">/* alias for ISO-8859-16 */</comment>
	<expr><block>{
		<expr><literal type="string">"latin2"</literal></expr>, <expr><name>PG_LATIN2</name></expr>
	}</block></expr>,							<comment type="block">/* alias for ISO-8859-2 */</comment>
	<expr><block>{
		<expr><literal type="string">"latin3"</literal></expr>, <expr><name>PG_LATIN3</name></expr>
	}</block></expr>,							<comment type="block">/* alias for ISO-8859-3 */</comment>
	<expr><block>{
		<expr><literal type="string">"latin4"</literal></expr>, <expr><name>PG_LATIN4</name></expr>
	}</block></expr>,							<comment type="block">/* alias for ISO-8859-4 */</comment>
	<expr><block>{
		<expr><literal type="string">"latin5"</literal></expr>, <expr><name>PG_LATIN5</name></expr>
	}</block></expr>,							<comment type="block">/* alias for ISO-8859-9 */</comment>
	<expr><block>{
		<expr><literal type="string">"latin6"</literal></expr>, <expr><name>PG_LATIN6</name></expr>
	}</block></expr>,							<comment type="block">/* alias for ISO-8859-10 */</comment>
	<expr><block>{
		<expr><literal type="string">"latin7"</literal></expr>, <expr><name>PG_LATIN7</name></expr>
	}</block></expr>,							<comment type="block">/* alias for ISO-8859-13 */</comment>
	<expr><block>{
		<expr><literal type="string">"latin8"</literal></expr>, <expr><name>PG_LATIN8</name></expr>
	}</block></expr>,							<comment type="block">/* alias for ISO-8859-14 */</comment>
	<expr><block>{
		<expr><literal type="string">"latin9"</literal></expr>, <expr><name>PG_LATIN9</name></expr>
	}</block></expr>,							<comment type="block">/* alias for ISO-8859-15 */</comment>
	<expr><block>{
		<expr><literal type="string">"mskanji"</literal></expr>, <expr><name>PG_SJIS</name></expr>
	}</block></expr>,							<comment type="block">/* alias for Shift_JIS */</comment>
	<expr><block>{
		<expr><literal type="string">"muleinternal"</literal></expr>, <expr><name>PG_MULE_INTERNAL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"shiftjis"</literal></expr>, <expr><name>PG_SJIS</name></expr>
	}</block></expr>,							<comment type="block">/* Shift_JIS; JIS X 0202-1991 */</comment>

	<expr><block>{
		<expr><literal type="string">"shiftjis2004"</literal></expr>, <expr><name>PG_SHIFT_JIS_2004</name></expr>
	}</block></expr>,							<comment type="block">/* SHIFT-JIS-2004; Shift JIS for Japanese,
								 * standard JIS X 0213 */</comment>
	<expr><block>{
		<expr><literal type="string">"sjis"</literal></expr>, <expr><name>PG_SJIS</name></expr>
	}</block></expr>,							<comment type="block">/* alias for Shift_JIS */</comment>
	<expr><block>{
		<expr><literal type="string">"sqlascii"</literal></expr>, <expr><name>PG_SQL_ASCII</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"tcvn"</literal></expr>, <expr><name>PG_WIN1258</name></expr>
	}</block></expr>,							<comment type="block">/* alias for WIN1258 */</comment>
	<expr><block>{
		<expr><literal type="string">"tcvn5712"</literal></expr>, <expr><name>PG_WIN1258</name></expr>
	}</block></expr>,							<comment type="block">/* alias for WIN1258 */</comment>
	<expr><block>{
		<expr><literal type="string">"uhc"</literal></expr>, <expr><name>PG_UHC</name></expr>
	}</block></expr>,							<comment type="block">/* UHC; Korean Windows CodePage 949 */</comment>
	<expr><block>{
		<expr><literal type="string">"unicode"</literal></expr>, <expr><name>PG_UTF8</name></expr>
	}</block></expr>,							<comment type="block">/* alias for UTF8 */</comment>
	<expr><block>{
		<expr><literal type="string">"utf8"</literal></expr>, <expr><name>PG_UTF8</name></expr>
	}</block></expr>,							<comment type="block">/* alias for UTF8 */</comment>
	<expr><block>{
		<expr><literal type="string">"vscii"</literal></expr>, <expr><name>PG_WIN1258</name></expr>
	}</block></expr>,							<comment type="block">/* alias for WIN1258 */</comment>
	<expr><block>{
		<expr><literal type="string">"win"</literal></expr>, <expr><name>PG_WIN1251</name></expr>
	}</block></expr>,							<comment type="block">/* _dirty_ alias for windows-1251 (backward
								 * compatibility) */</comment>
	<expr><block>{
		<expr><literal type="string">"win1250"</literal></expr>, <expr><name>PG_WIN1250</name></expr>
	}</block></expr>,							<comment type="block">/* alias for Windows-1250 */</comment>
	<expr><block>{
		<expr><literal type="string">"win1251"</literal></expr>, <expr><name>PG_WIN1251</name></expr>
	}</block></expr>,							<comment type="block">/* alias for Windows-1251 */</comment>
	<expr><block>{
		<expr><literal type="string">"win1252"</literal></expr>, <expr><name>PG_WIN1252</name></expr>
	}</block></expr>,							<comment type="block">/* alias for Windows-1252 */</comment>
	<expr><block>{
		<expr><literal type="string">"win1253"</literal></expr>, <expr><name>PG_WIN1253</name></expr>
	}</block></expr>,							<comment type="block">/* alias for Windows-1253 */</comment>
	<expr><block>{
		<expr><literal type="string">"win1254"</literal></expr>, <expr><name>PG_WIN1254</name></expr>
	}</block></expr>,							<comment type="block">/* alias for Windows-1254 */</comment>
	<expr><block>{
		<expr><literal type="string">"win1255"</literal></expr>, <expr><name>PG_WIN1255</name></expr>
	}</block></expr>,							<comment type="block">/* alias for Windows-1255 */</comment>
	<expr><block>{
		<expr><literal type="string">"win1256"</literal></expr>, <expr><name>PG_WIN1256</name></expr>
	}</block></expr>,							<comment type="block">/* alias for Windows-1256 */</comment>
	<expr><block>{
		<expr><literal type="string">"win1257"</literal></expr>, <expr><name>PG_WIN1257</name></expr>
	}</block></expr>,							<comment type="block">/* alias for Windows-1257 */</comment>
	<expr><block>{
		<expr><literal type="string">"win1258"</literal></expr>, <expr><name>PG_WIN1258</name></expr>
	}</block></expr>,							<comment type="block">/* alias for Windows-1258 */</comment>
	<expr><block>{
		<expr><literal type="string">"win866"</literal></expr>, <expr><name>PG_WIN866</name></expr>
	}</block></expr>,							<comment type="block">/* IBM866 */</comment>
	<expr><block>{
		<expr><literal type="string">"win874"</literal></expr>, <expr><name>PG_WIN874</name></expr>
	}</block></expr>,							<comment type="block">/* alias for Windows-874 */</comment>
	<expr><block>{
		<expr><literal type="string">"win932"</literal></expr>, <expr><name>PG_SJIS</name></expr>
	}</block></expr>,							<comment type="block">/* alias for Shift_JIS */</comment>
	<expr><block>{
		<expr><literal type="string">"win936"</literal></expr>, <expr><name>PG_GBK</name></expr>
	}</block></expr>,							<comment type="block">/* alias for GBK */</comment>
	<expr><block>{
		<expr><literal type="string">"win949"</literal></expr>, <expr><name>PG_UHC</name></expr>
	}</block></expr>,							<comment type="block">/* alias for UHC */</comment>
	<expr><block>{
		<expr><literal type="string">"win950"</literal></expr>, <expr><name>PG_BIG5</name></expr>
	}</block></expr>,							<comment type="block">/* alias for BIG5 */</comment>
	<expr><block>{
		<expr><literal type="string">"windows1250"</literal></expr>, <expr><name>PG_WIN1250</name></expr>
	}</block></expr>,							<comment type="block">/* Windows-1251; Microsoft */</comment>
	<expr><block>{
		<expr><literal type="string">"windows1251"</literal></expr>, <expr><name>PG_WIN1251</name></expr>
	}</block></expr>,							<comment type="block">/* Windows-1251; Microsoft */</comment>
	<expr><block>{
		<expr><literal type="string">"windows1252"</literal></expr>, <expr><name>PG_WIN1252</name></expr>
	}</block></expr>,							<comment type="block">/* Windows-1252; Microsoft */</comment>
	<expr><block>{
		<expr><literal type="string">"windows1253"</literal></expr>, <expr><name>PG_WIN1253</name></expr>
	}</block></expr>,							<comment type="block">/* Windows-1253; Microsoft */</comment>
	<expr><block>{
		<expr><literal type="string">"windows1254"</literal></expr>, <expr><name>PG_WIN1254</name></expr>
	}</block></expr>,							<comment type="block">/* Windows-1254; Microsoft */</comment>
	<expr><block>{
		<expr><literal type="string">"windows1255"</literal></expr>, <expr><name>PG_WIN1255</name></expr>
	}</block></expr>,							<comment type="block">/* Windows-1255; Microsoft */</comment>
	<expr><block>{
		<expr><literal type="string">"windows1256"</literal></expr>, <expr><name>PG_WIN1256</name></expr>
	}</block></expr>,							<comment type="block">/* Windows-1256; Microsoft */</comment>
	<expr><block>{
		<expr><literal type="string">"windows1257"</literal></expr>, <expr><name>PG_WIN1257</name></expr>
	}</block></expr>,							<comment type="block">/* Windows-1257; Microsoft */</comment>
	<expr><block>{
		<expr><literal type="string">"windows1258"</literal></expr>, <expr><name>PG_WIN1258</name></expr>
	}</block></expr>,							<comment type="block">/* Windows-1258; Microsoft */</comment>
	<expr><block>{
		<expr><literal type="string">"windows866"</literal></expr>, <expr><name>PG_WIN866</name></expr>
	}</block></expr>,							<comment type="block">/* IBM866 */</comment>
	<expr><block>{
		<expr><literal type="string">"windows874"</literal></expr>, <expr><name>PG_WIN874</name></expr>
	}</block></expr>,							<comment type="block">/* Windows-874; Microsoft */</comment>
	<expr><block>{
		<expr><literal type="string">"windows932"</literal></expr>, <expr><name>PG_SJIS</name></expr>
	}</block></expr>,							<comment type="block">/* alias for Shift_JIS */</comment>
	<expr><block>{
		<expr><literal type="string">"windows936"</literal></expr>, <expr><name>PG_GBK</name></expr>
	}</block></expr>,							<comment type="block">/* alias for GBK */</comment>
	<expr><block>{
		<expr><literal type="string">"windows949"</literal></expr>, <expr><name>PG_UHC</name></expr>
	}</block></expr>,							<comment type="block">/* alias for UHC */</comment>
	<expr><block>{
		<expr><literal type="string">"windows950"</literal></expr>, <expr><name>PG_BIG5</name></expr>
	}</block></expr>							<comment type="block">/* alias for BIG5 */</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* ----------
 * These are "official" encoding names.
 * XXX must be sorted by the same order as enum pg_enc (in mb/pg_wchar.h)
 * ----------
 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEF_ENC2NAME</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>codepage</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ #name, PG_##name }</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEF_ENC2NAME</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>codepage</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ #name, PG_##name, codepage }</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>const</specifier> <name>pg_enc2name</name></type> <name><name>pg_enc2name_tbl</name><index>[]</index></name> <init>=
<expr><block>{
	<expr><call><name>DEF_ENC2NAME</name><argument_list>(<argument><expr><name>SQL_ASCII</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>DEF_ENC2NAME</name><argument_list>(<argument><expr><name>EUC_JP</name></expr></argument>, <argument><expr><literal type="number">20932</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>DEF_ENC2NAME</name><argument_list>(<argument><expr><name>EUC_CN</name></expr></argument>, <argument><expr><literal type="number">20936</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>DEF_ENC2NAME</name><argument_list>(<argument><expr><name>EUC_KR</name></expr></argument>, <argument><expr><literal type="number">51949</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>DEF_ENC2NAME</name><argument_list>(<argument><expr><name>EUC_TW</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>DEF_ENC2NAME</name><argument_list>(<argument><expr><name>EUC_JIS_2004</name></expr></argument>, <argument><expr><literal type="number">20932</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>DEF_ENC2NAME</name><argument_list>(<argument><expr><name>UTF8</name></expr></argument>, <argument><expr><literal type="number">65001</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>DEF_ENC2NAME</name><argument_list>(<argument><expr><name>MULE_INTERNAL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>DEF_ENC2NAME</name><argument_list>(<argument><expr><name>LATIN1</name></expr></argument>, <argument><expr><literal type="number">28591</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>DEF_ENC2NAME</name><argument_list>(<argument><expr><name>LATIN2</name></expr></argument>, <argument><expr><literal type="number">28592</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>DEF_ENC2NAME</name><argument_list>(<argument><expr><name>LATIN3</name></expr></argument>, <argument><expr><literal type="number">28593</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>DEF_ENC2NAME</name><argument_list>(<argument><expr><name>LATIN4</name></expr></argument>, <argument><expr><literal type="number">28594</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>DEF_ENC2NAME</name><argument_list>(<argument><expr><name>LATIN5</name></expr></argument>, <argument><expr><literal type="number">28599</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>DEF_ENC2NAME</name><argument_list>(<argument><expr><name>LATIN6</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>DEF_ENC2NAME</name><argument_list>(<argument><expr><name>LATIN7</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>DEF_ENC2NAME</name><argument_list>(<argument><expr><name>LATIN8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>DEF_ENC2NAME</name><argument_list>(<argument><expr><name>LATIN9</name></expr></argument>, <argument><expr><literal type="number">28605</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>DEF_ENC2NAME</name><argument_list>(<argument><expr><name>LATIN10</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>DEF_ENC2NAME</name><argument_list>(<argument><expr><name>WIN1256</name></expr></argument>, <argument><expr><literal type="number">1256</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>DEF_ENC2NAME</name><argument_list>(<argument><expr><name>WIN1258</name></expr></argument>, <argument><expr><literal type="number">1258</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>DEF_ENC2NAME</name><argument_list>(<argument><expr><name>WIN866</name></expr></argument>, <argument><expr><literal type="number">866</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>DEF_ENC2NAME</name><argument_list>(<argument><expr><name>WIN874</name></expr></argument>, <argument><expr><literal type="number">874</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>DEF_ENC2NAME</name><argument_list>(<argument><expr><name>KOI8R</name></expr></argument>, <argument><expr><literal type="number">20866</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>DEF_ENC2NAME</name><argument_list>(<argument><expr><name>WIN1251</name></expr></argument>, <argument><expr><literal type="number">1251</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>DEF_ENC2NAME</name><argument_list>(<argument><expr><name>WIN1252</name></expr></argument>, <argument><expr><literal type="number">1252</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>DEF_ENC2NAME</name><argument_list>(<argument><expr><name>ISO_8859_5</name></expr></argument>, <argument><expr><literal type="number">28595</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>DEF_ENC2NAME</name><argument_list>(<argument><expr><name>ISO_8859_6</name></expr></argument>, <argument><expr><literal type="number">28596</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>DEF_ENC2NAME</name><argument_list>(<argument><expr><name>ISO_8859_7</name></expr></argument>, <argument><expr><literal type="number">28597</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>DEF_ENC2NAME</name><argument_list>(<argument><expr><name>ISO_8859_8</name></expr></argument>, <argument><expr><literal type="number">28598</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>DEF_ENC2NAME</name><argument_list>(<argument><expr><name>WIN1250</name></expr></argument>, <argument><expr><literal type="number">1250</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>DEF_ENC2NAME</name><argument_list>(<argument><expr><name>WIN1253</name></expr></argument>, <argument><expr><literal type="number">1253</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>DEF_ENC2NAME</name><argument_list>(<argument><expr><name>WIN1254</name></expr></argument>, <argument><expr><literal type="number">1254</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>DEF_ENC2NAME</name><argument_list>(<argument><expr><name>WIN1255</name></expr></argument>, <argument><expr><literal type="number">1255</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>DEF_ENC2NAME</name><argument_list>(<argument><expr><name>WIN1257</name></expr></argument>, <argument><expr><literal type="number">1257</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>DEF_ENC2NAME</name><argument_list>(<argument><expr><name>KOI8U</name></expr></argument>, <argument><expr><literal type="number">21866</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>DEF_ENC2NAME</name><argument_list>(<argument><expr><name>SJIS</name></expr></argument>, <argument><expr><literal type="number">932</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>DEF_ENC2NAME</name><argument_list>(<argument><expr><name>BIG5</name></expr></argument>, <argument><expr><literal type="number">950</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>DEF_ENC2NAME</name><argument_list>(<argument><expr><name>GBK</name></expr></argument>, <argument><expr><literal type="number">936</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>DEF_ENC2NAME</name><argument_list>(<argument><expr><name>UHC</name></expr></argument>, <argument><expr><literal type="number">949</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>DEF_ENC2NAME</name><argument_list>(<argument><expr><name>GB18030</name></expr></argument>, <argument><expr><literal type="number">54936</literal></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>DEF_ENC2NAME</name><argument_list>(<argument><expr><name>JOHAB</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,
	<macro><name>DEF_ENC2NAME</name><argument_list>(<argument>SHIFT_JIS_2004</argument>, <argument><literal type="number">932</literal></argument>)</argument_list></macro>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* ----------
 * These are encoding names for gettext.
 *
 * This covers all encodings except MULE_INTERNAL, which is alien to gettext.
 * ----------
 */</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>pg_enc2gettext</name></type> <name><name>pg_enc2gettext_tbl</name><index>[]</index></name> <init>=
<expr><block>{
	<expr><block>{<expr><name>PG_SQL_ASCII</name></expr>, <expr><literal type="string">"US-ASCII"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_UTF8</name></expr>, <expr><literal type="string">"UTF-8"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_LATIN1</name></expr>, <expr><literal type="string">"LATIN1"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_LATIN2</name></expr>, <expr><literal type="string">"LATIN2"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_LATIN3</name></expr>, <expr><literal type="string">"LATIN3"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_LATIN4</name></expr>, <expr><literal type="string">"LATIN4"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_ISO_8859_5</name></expr>, <expr><literal type="string">"ISO-8859-5"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_ISO_8859_6</name></expr>, <expr><literal type="string">"ISO_8859-6"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_ISO_8859_7</name></expr>, <expr><literal type="string">"ISO-8859-7"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_ISO_8859_8</name></expr>, <expr><literal type="string">"ISO-8859-8"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_LATIN5</name></expr>, <expr><literal type="string">"LATIN5"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_LATIN6</name></expr>, <expr><literal type="string">"LATIN6"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_LATIN7</name></expr>, <expr><literal type="string">"LATIN7"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_LATIN8</name></expr>, <expr><literal type="string">"LATIN8"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_LATIN9</name></expr>, <expr><literal type="string">"LATIN-9"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_LATIN10</name></expr>, <expr><literal type="string">"LATIN10"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_KOI8R</name></expr>, <expr><literal type="string">"KOI8-R"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_KOI8U</name></expr>, <expr><literal type="string">"KOI8-U"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_WIN1250</name></expr>, <expr><literal type="string">"CP1250"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_WIN1251</name></expr>, <expr><literal type="string">"CP1251"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_WIN1252</name></expr>, <expr><literal type="string">"CP1252"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_WIN1253</name></expr>, <expr><literal type="string">"CP1253"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_WIN1254</name></expr>, <expr><literal type="string">"CP1254"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_WIN1255</name></expr>, <expr><literal type="string">"CP1255"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_WIN1256</name></expr>, <expr><literal type="string">"CP1256"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_WIN1257</name></expr>, <expr><literal type="string">"CP1257"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_WIN1258</name></expr>, <expr><literal type="string">"CP1258"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_WIN866</name></expr>, <expr><literal type="string">"CP866"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_WIN874</name></expr>, <expr><literal type="string">"CP874"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_EUC_CN</name></expr>, <expr><literal type="string">"EUC-CN"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_EUC_JP</name></expr>, <expr><literal type="string">"EUC-JP"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_EUC_KR</name></expr>, <expr><literal type="string">"EUC-KR"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_EUC_TW</name></expr>, <expr><literal type="string">"EUC-TW"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_EUC_JIS_2004</name></expr>, <expr><literal type="string">"EUC-JP"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_SJIS</name></expr>, <expr><literal type="string">"SHIFT-JIS"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_BIG5</name></expr>, <expr><literal type="string">"BIG5"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_GBK</name></expr>, <expr><literal type="string">"GBK"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_UHC</name></expr>, <expr><literal type="string">"UHC"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_GB18030</name></expr>, <expr><literal type="string">"GB18030"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_JOHAB</name></expr>, <expr><literal type="string">"JOHAB"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_SHIFT_JIS_2004</name></expr>, <expr><literal type="string">"SHIFT_JISX0213"</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>


<comment type="block">/*
 * Table of encoding names for ICU (currently covers backend encodings only)
 *
 * Reference: &lt;https://ssl.icu-project.org/icu-bin/convexp&gt;
 *
 * NULL entries are not supported by ICU, or their mapping is unclear.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>pg_enc2icu_tbl</name><index>[]</index></name> <init>=
<expr><block>{
	<expr><name>NULL</name></expr>,						<comment type="block">/* PG_SQL_ASCII */</comment>
	<expr><literal type="string">"EUC-JP"</literal></expr>,					<comment type="block">/* PG_EUC_JP */</comment>
	<expr><literal type="string">"EUC-CN"</literal></expr>,					<comment type="block">/* PG_EUC_CN */</comment>
	<expr><literal type="string">"EUC-KR"</literal></expr>,					<comment type="block">/* PG_EUC_KR */</comment>
	<expr><literal type="string">"EUC-TW"</literal></expr>,					<comment type="block">/* PG_EUC_TW */</comment>
	<expr><name>NULL</name></expr>,						<comment type="block">/* PG_EUC_JIS_2004 */</comment>
	<expr><literal type="string">"UTF-8"</literal></expr>,					<comment type="block">/* PG_UTF8 */</comment>
	<expr><name>NULL</name></expr>,						<comment type="block">/* PG_MULE_INTERNAL */</comment>
	<expr><literal type="string">"ISO-8859-1"</literal></expr>,				<comment type="block">/* PG_LATIN1 */</comment>
	<expr><literal type="string">"ISO-8859-2"</literal></expr>,				<comment type="block">/* PG_LATIN2 */</comment>
	<expr><literal type="string">"ISO-8859-3"</literal></expr>,				<comment type="block">/* PG_LATIN3 */</comment>
	<expr><literal type="string">"ISO-8859-4"</literal></expr>,				<comment type="block">/* PG_LATIN4 */</comment>
	<expr><literal type="string">"ISO-8859-9"</literal></expr>,				<comment type="block">/* PG_LATIN5 */</comment>
	<expr><literal type="string">"ISO-8859-10"</literal></expr>,				<comment type="block">/* PG_LATIN6 */</comment>
	<expr><literal type="string">"ISO-8859-13"</literal></expr>,				<comment type="block">/* PG_LATIN7 */</comment>
	<expr><literal type="string">"ISO-8859-14"</literal></expr>,				<comment type="block">/* PG_LATIN8 */</comment>
	<expr><literal type="string">"ISO-8859-15"</literal></expr>,				<comment type="block">/* PG_LATIN9 */</comment>
	<expr><name>NULL</name></expr>,						<comment type="block">/* PG_LATIN10 */</comment>
	<expr><literal type="string">"CP1256"</literal></expr>,					<comment type="block">/* PG_WIN1256 */</comment>
	<expr><literal type="string">"CP1258"</literal></expr>,					<comment type="block">/* PG_WIN1258 */</comment>
	<expr><literal type="string">"CP866"</literal></expr>,					<comment type="block">/* PG_WIN866 */</comment>
	<expr><name>NULL</name></expr>,						<comment type="block">/* PG_WIN874 */</comment>
	<expr><literal type="string">"KOI8-R"</literal></expr>,					<comment type="block">/* PG_KOI8R */</comment>
	<expr><literal type="string">"CP1251"</literal></expr>,					<comment type="block">/* PG_WIN1251 */</comment>
	<expr><literal type="string">"CP1252"</literal></expr>,					<comment type="block">/* PG_WIN1252 */</comment>
	<expr><literal type="string">"ISO-8859-5"</literal></expr>,				<comment type="block">/* PG_ISO_8859_5 */</comment>
	<expr><literal type="string">"ISO-8859-6"</literal></expr>,				<comment type="block">/* PG_ISO_8859_6 */</comment>
	<expr><literal type="string">"ISO-8859-7"</literal></expr>,				<comment type="block">/* PG_ISO_8859_7 */</comment>
	<expr><literal type="string">"ISO-8859-8"</literal></expr>,				<comment type="block">/* PG_ISO_8859_8 */</comment>
	<expr><literal type="string">"CP1250"</literal></expr>,					<comment type="block">/* PG_WIN1250 */</comment>
	<expr><literal type="string">"CP1253"</literal></expr>,					<comment type="block">/* PG_WIN1253 */</comment>
	<expr><literal type="string">"CP1254"</literal></expr>,					<comment type="block">/* PG_WIN1254 */</comment>
	<expr><literal type="string">"CP1255"</literal></expr>,					<comment type="block">/* PG_WIN1255 */</comment>
	<expr><literal type="string">"CP1257"</literal></expr>,					<comment type="block">/* PG_WIN1257 */</comment>
	<expr><literal type="string">"KOI8-U"</literal></expr>,					<comment type="block">/* PG_KOI8U */</comment>
}</block></expr></init></decl>;</decl_stmt>


<comment type="block">/*
 * Is this encoding supported by ICU?
 */</comment>
<function><type><name>bool</name></type>
<name>is_encoding_supported_by_icu</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>encoding</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PG_VALID_BE_ENCODING</name><argument_list>(<argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><operator>(</operator><name><name>pg_enc2icu_tbl</name><index>[<expr><name>encoding</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Returns ICU's name for encoding, or NULL if not supported
 */</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>get_encoding_name_for_icu</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>encoding</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>StaticAssertStmt</name><argument_list>(<argument><expr><call><name>lengthof</name><argument_list>(<argument><expr><name>pg_enc2icu_tbl</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>PG_ENCODING_BE_LAST</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
					 <argument><expr><literal type="string">"pg_enc2icu_tbl incomplete"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PG_VALID_BE_ENCODING</name><argument_list>(<argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name><name>pg_enc2icu_tbl</name><index>[<expr><name>encoding</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* ----------
 * Encoding checks, for error returns -1 else encoding id
 * ----------
 */</comment>
<function><type><name>int</name></type>
<name>pg_valid_client_encoding</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>enc</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>enc</name> <operator>=</operator> <call><name>pg_char_to_encoding</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PG_VALID_FE_ENCODING</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>enc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>pg_valid_server_encoding</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>enc</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>enc</name> <operator>=</operator> <call><name>pg_char_to_encoding</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PG_VALID_BE_ENCODING</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>enc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>pg_valid_server_encoding_id</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>encoding</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>PG_VALID_BE_ENCODING</name><argument_list>(<argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Remove irrelevant chars from encoding name, store at *newkey
 *
 * (Caller's responsibility to provide a large enough buffer)
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>clean_encoding_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>newkey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>np</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>key</name></expr><operator>,</operator> <expr><name>np</name> <operator>=</operator> <name>newkey</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>isalnum</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>np</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p</name> <operator>+</operator> <literal type="char">'a'</literal> <operator>-</operator> <literal type="char">'A'</literal></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>np</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><operator>*</operator><name>np</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	<return>return <expr><name>newkey</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Search encoding by encoding name
 *
 * Returns encoding ID, or -1 if not recognized
 */</comment>
<function><type><name>int</name></type>
<name>pg_char_to_encoding</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nel</name> <init>= <expr><call><name>lengthof</name><argument_list>(<argument><expr><name>pg_encname_tbl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>pg_encname</name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name>pg_encname_tbl</name></expr></init></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>last</name> <init>= <expr><name>base</name> <operator>+</operator> <name>nel</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>position</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>buff</name><index>[<expr><name>NAMEDATALEN</name></expr>]</index></name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>name</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>NAMEDATALEN</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>				<comment type="block">/* it's certainly not in the table */</comment>

	<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>clean_encoding_name</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>last</name> <operator>&gt;=</operator> <name>base</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>position</name> <operator>=</operator> <name>base</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>last</name> <operator>-</operator> <name>base</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>key</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>position</name><operator>-&gt;</operator><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>position</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name><name>position</name><operator>-&gt;</operator><name>encoding</name></name></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>last</name> <operator>=</operator> <name>position</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>base</name> <operator>=</operator> <name>position</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></while>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>pg_encoding_to_char</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>encoding</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>PG_VALID_ENCODING</name><argument_list>(<argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>pg_enc2name</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>pg_enc2name_tbl</name><index>[<expr><name>encoding</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>encoding</name> <operator>==</operator> <name><name>p</name><operator>-&gt;</operator><name>encoding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><literal type="string">""</literal></expr>;</return>
</block_content>}</block></function>
</unit>
