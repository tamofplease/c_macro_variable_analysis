<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/common/hashfn.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * hashfn.c
 *		Generic hashing functions, and hash functions for use in dynahash.c
 *		hashtables
 *
 *
 * Portions Copyright (c) 1996-2020, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/common/hashfn.c
 *
 * NOTES
 *	  It is expected that every bit of a hash function's 32-bit result is
 *	  as random as every other; failure to ensure this is likely to lead
 *	  to poor performance of hash tables.  In most cases a hash
 *	  function should use hash_bytes() or its variant hash_bytes_uint32(),
 *	  or the wrappers hash_any() and hash_uint32 defined in hashfn.h.
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/hashfn.h"</cpp:file></cpp:include>


<comment type="block">/*
 * This hash function was written by Bob Jenkins
 * (bob_jenkins@burtleburtle.net), and superficially adapted
 * for PostgreSQL by Neil Conway. For more information on this
 * hash function, see http://burtleburtle.net/bob/hash/doobs.html,
 * or Bob's article in Dr. Dobb's Journal, Sept. 1997.
 *
 * In the current code, we have adopted Bob's 2006 update of his hash
 * function to fetch the data a word at a time when it is suitably aligned.
 * This makes for a useful speedup, at the cost of having to maintain
 * four code paths (aligned vs unaligned, and little-endian vs big-endian).
 * It also uses two separate mixing functions mix() and final(), instead
 * of a slower multi-purpose function.
 */</comment>

<comment type="block">/* Get a bit mask of the bits set in non-uint32 aligned addresses */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT32_ALIGN_MASK</name></cpp:macro> <cpp:value>(sizeof(uint32) - 1)</cpp:value></cpp:define>

<comment type="block">/* Rotate a uint32 value left by k bits - note multiple evaluation! */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rot</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x)&lt;&lt;(k)) | ((x)&gt;&gt;(32-(k))))</cpp:value></cpp:define>

<comment type="block">/*----------
 * mix -- mix 3 32-bit values reversibly.
 *
 * This is reversible, so any information in (a,b,c) before mix() is
 * still in (a,b,c) after mix().
 *
 * If four pairs of (a,b,c) inputs are run through mix(), or through
 * mix() in reverse, there are at least 32 bits of the output that
 * are sometimes the same for one pair and different for another pair.
 * This was tested for:
 * * pairs that differed by one bit, by two bits, in any combination
 *	 of top bits of (a,b,c), or in any combination of bottom bits of
 *	 (a,b,c).
 * * "differ" is defined as +, -, ^, or ~^.  For + and -, I transformed
 *	 the output delta to a Gray code (a^(a&gt;&gt;1)) so a string of 1's (as
 *	 is commonly produced by subtraction) look like a single 1-bit
 *	 difference.
 * * the base values were pseudorandom, all zero but one bit set, or
 *	 all zero plus a counter that starts at zero.
 *
 * This does not achieve avalanche.  There are input bits of (a,b,c)
 * that fail to affect some output bits of (a,b,c), especially of a.  The
 * most thoroughly mixed value is c, but it doesn't really even achieve
 * avalanche in c.
 *
 * This allows some parallelism.  Read-after-writes are good at doubling
 * the number of bits affected, so the goal of mixing pulls in the opposite
 * direction from the goal of parallelism.  I did what I could.  Rotates
 * seem to cost as much as shifts on every machine I could lay my hands on,
 * and rotates are much kinder to the top and bottom bits, so I used rotates.
 *----------
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mix</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> \
<cpp:value>{ \
  a -= c;  a ^= rot(c, 4);	c += b; \
  b -= a;  b ^= rot(a, 6);	a += c; \
  c -= b;  c ^= rot(b, 8);	b += a; \
  a -= c;  a ^= rot(c,16);	c += b; \
  b -= a;  b ^= rot(a,19);	a += c; \
  c -= b;  c ^= rot(b, 4);	b += a; \
}</cpp:value></cpp:define>

<comment type="block">/*----------
 * final -- final mixing of 3 32-bit values (a,b,c) into c
 *
 * Pairs of (a,b,c) values differing in only a few bits will usually
 * produce values of c that look totally different.  This was tested for
 * * pairs that differed by one bit, by two bits, in any combination
 *	 of top bits of (a,b,c), or in any combination of bottom bits of
 *	 (a,b,c).
 * * "differ" is defined as +, -, ^, or ~^.  For + and -, I transformed
 *	 the output delta to a Gray code (a^(a&gt;&gt;1)) so a string of 1's (as
 *	 is commonly produced by subtraction) look like a single 1-bit
 *	 difference.
 * * the base values were pseudorandom, all zero but one bit set, or
 *	 all zero plus a counter that starts at zero.
 *
 * The use of separate functions for mix() and final() allow for a
 * substantial performance increase since final() does not need to
 * do well in reverse, but is does need to affect all output bits.
 * mix(), on the other hand, does not need to affect all output
 * bits (affecting 32 bits is enough).  The original hash function had
 * a single mixing operation that had to satisfy both sets of requirements
 * and was slower as a result.
 *----------
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>final</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> \
<cpp:value>{ \
  c ^= b; c -= rot(b,14); \
  a ^= c; a -= rot(c,11); \
  b ^= a; b -= rot(a,25); \
  c ^= b; c -= rot(b,16); \
  a ^= c; a -= rot(c, 4); \
  b ^= a; b -= rot(a,14); \
  c ^= b; c -= rot(b,24); \
}</cpp:value></cpp:define>

<comment type="block">/*
 * hash_bytes() -- hash a variable-length key into a 32-bit value
 *		k		: the key (the unaligned variable-length array of bytes)
 *		len		: the length of the key, counting by bytes
 *
 * Returns a uint32 value.  Every bit of the key affects every bit of
 * the return value.  Every 1-bit and 2-bit delta achieves avalanche.
 * About 6*len+35 instructions. The best hash table sizes are powers
 * of 2.  There is no need to do mod a prime (mod is sooo slow!).
 * If you need less than 32 bits, use a bitmask.
 *
 * This procedure must never throw elog(ERROR); the ResourceOwner code
 * relies on this not to fail.
 *
 * Note: we could easily change this function to return a 64-bit hash value
 * by using the final values of both b and c.  b is perhaps a little less
 * well mixed than c, however.
 */</comment>
<function><type><name>uint32</name></type>
<name>hash_bytes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>a</name></decl>,
				<decl><type ref="prev"/><name>b</name></decl>,
				<decl><type ref="prev"/><name>c</name></decl>,
				<decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

	<comment type="block">/* Set up the internal state */</comment>
	<expr_stmt><expr><name>len</name> <operator>=</operator> <name>keylen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name> <operator>=</operator> <name>c</name> <operator>=</operator> <literal type="number">0x9e3779b9</literal> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">3923095</literal></expr>;</expr_stmt>

	<comment type="block">/* If the source pointer is word-aligned, we use word-wide fetches */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator> <name>k</name> <operator>&amp;</operator> <name>UINT32_ALIGN_MASK</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Code path for aligned source data */</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name> <modifier>*</modifier></type><name>ka</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32</name> <operator>*</operator><operator>)</operator> <name>k</name></expr></init></decl>;</decl_stmt>

		<comment type="block">/* handle most of the key */</comment>
		<while>while <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">12</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>ka</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>b</name> <operator>+=</operator> <name><name>ka</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>c</name> <operator>+=</operator> <name><name>ka</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>mix</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ka</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
		</block_content>}</block></while>

		<comment type="block">/* handle the last 11 bytes */</comment>
		<expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>ka</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WORDS_BIGENDIAN</name></cpp:ifdef>
		<switch>switch <condition>(<expr><name>len</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><literal type="number">11</literal></expr>:</case>
				<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">10</literal></expr>:</case>
				<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">9</literal></expr>:</case>
				<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">8</literal></expr>:</case>
				<comment type="block">/* the lowest byte of c is reserved for the length */</comment>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <name><name>ka</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>ka</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">7</literal></expr>:</case>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">6</literal></expr>:</case>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">5</literal></expr>:</case>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">4</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>ka</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">3</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">2</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">1</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* case 0: nothing left to add */</comment>
		</block_content>}</block></switch>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>							<comment type="block">/* !WORDS_BIGENDIAN */</comment>
		<switch>switch <condition>(<expr><name>len</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><literal type="number">11</literal></expr>:</case>
				<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">10</literal></expr>:</case>
				<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">9</literal></expr>:</case>
				<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">8</literal></expr>:</case>
				<comment type="block">/* the lowest byte of c is reserved for the length */</comment>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <name><name>ka</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>ka</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">7</literal></expr>:</case>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">6</literal></expr>:</case>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">5</literal></expr>:</case>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <name><name>k</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">4</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>ka</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">3</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">2</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">1</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
				<comment type="block">/* case 0: nothing left to add */</comment>
		</block_content>}</block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* WORDS_BIGENDIAN */</comment>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* Code path for non-aligned source data */</comment>

		<comment type="block">/* handle most of the key */</comment>
		<while>while <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">12</literal></expr>)</condition>
		<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WORDS_BIGENDIAN</name></cpp:ifdef>
			<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><name><name>k</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><name><name>k</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><name><name>k</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>							<comment type="block">/* !WORDS_BIGENDIAN */</comment>
			<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><name><name>k</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><name><name>k</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* WORDS_BIGENDIAN */</comment>
			<expr_stmt><expr><call><name>mix</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>k</name> <operator>+=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
		</block_content>}</block></while>

		<comment type="block">/* handle the last 11 bytes */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WORDS_BIGENDIAN</name></cpp:ifdef>
		<switch>switch <condition>(<expr><name>len</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><literal type="number">11</literal></expr>:</case>
				<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">10</literal></expr>:</case>
				<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">9</literal></expr>:</case>
				<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">8</literal></expr>:</case>
				<comment type="block">/* the lowest byte of c is reserved for the length */</comment>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <name><name>k</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">7</literal></expr>:</case>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">6</literal></expr>:</case>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">5</literal></expr>:</case>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">4</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>k</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">3</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">2</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">1</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* case 0: nothing left to add */</comment>
		</block_content>}</block></switch>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>							<comment type="block">/* !WORDS_BIGENDIAN */</comment>
		<switch>switch <condition>(<expr><name>len</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><literal type="number">11</literal></expr>:</case>
				<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">10</literal></expr>:</case>
				<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">9</literal></expr>:</case>
				<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">8</literal></expr>:</case>
				<comment type="block">/* the lowest byte of c is reserved for the length */</comment>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">7</literal></expr>:</case>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">6</literal></expr>:</case>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">5</literal></expr>:</case>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <name><name>k</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">4</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">3</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">2</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">1</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
				<comment type="block">/* case 0: nothing left to add */</comment>
		</block_content>}</block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* WORDS_BIGENDIAN */</comment>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>final</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* report the result */</comment>
	<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * hash_bytes_extended() -- hash into a 64-bit value, using an optional seed
 *		k		: the key (the unaligned variable-length array of bytes)
 *		len		: the length of the key, counting by bytes
 *		seed	: a 64-bit seed (0 means no seed)
 *
 * Returns a uint64 value.  Otherwise similar to hash_bytes.
 */</comment>
<function><type><name>uint64</name></type>
<name>hash_bytes_extended</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>seed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>a</name></decl>,
				<decl><type ref="prev"/><name>b</name></decl>,
				<decl><type ref="prev"/><name>c</name></decl>,
				<decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

	<comment type="block">/* Set up the internal state */</comment>
	<expr_stmt><expr><name>len</name> <operator>=</operator> <name>keylen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name> <operator>=</operator> <name>c</name> <operator>=</operator> <literal type="number">0x9e3779b9</literal> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">3923095</literal></expr>;</expr_stmt>

	<comment type="block">/* If the seed is non-zero, use it to perturb the internal state. */</comment>
	<if_stmt><if>if <condition>(<expr><name>seed</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * In essence, the seed is treated as part of the data being hashed,
		 * but for simplicity, we pretend that it's padded with four bytes of
		 * zeroes so that the seed constitutes a 12-byte chunk.
		 */</comment>
		<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name>seed</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><name>uint32</name><operator>)</operator> <name>seed</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>mix</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* If the source pointer is word-aligned, we use word-wide fetches */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator> <name>k</name> <operator>&amp;</operator> <name>UINT32_ALIGN_MASK</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Code path for aligned source data */</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name> <modifier>*</modifier></type><name>ka</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint32</name> <operator>*</operator><operator>)</operator> <name>k</name></expr></init></decl>;</decl_stmt>

		<comment type="block">/* handle most of the key */</comment>
		<while>while <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">12</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>ka</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>b</name> <operator>+=</operator> <name><name>ka</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>c</name> <operator>+=</operator> <name><name>ka</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>mix</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ka</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
		</block_content>}</block></while>

		<comment type="block">/* handle the last 11 bytes */</comment>
		<expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>ka</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WORDS_BIGENDIAN</name></cpp:ifdef>
		<switch>switch <condition>(<expr><name>len</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><literal type="number">11</literal></expr>:</case>
				<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">10</literal></expr>:</case>
				<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">9</literal></expr>:</case>
				<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">8</literal></expr>:</case>
				<comment type="block">/* the lowest byte of c is reserved for the length */</comment>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <name><name>ka</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>ka</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">7</literal></expr>:</case>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">6</literal></expr>:</case>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">5</literal></expr>:</case>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">4</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>ka</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">3</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">2</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">1</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* case 0: nothing left to add */</comment>
		</block_content>}</block></switch>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>							<comment type="block">/* !WORDS_BIGENDIAN */</comment>
		<switch>switch <condition>(<expr><name>len</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><literal type="number">11</literal></expr>:</case>
				<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">10</literal></expr>:</case>
				<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">9</literal></expr>:</case>
				<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">8</literal></expr>:</case>
				<comment type="block">/* the lowest byte of c is reserved for the length */</comment>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <name><name>ka</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>ka</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">7</literal></expr>:</case>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">6</literal></expr>:</case>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">5</literal></expr>:</case>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <name><name>k</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">4</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>ka</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">3</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">2</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">1</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
				<comment type="block">/* case 0: nothing left to add */</comment>
		</block_content>}</block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* WORDS_BIGENDIAN */</comment>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* Code path for non-aligned source data */</comment>

		<comment type="block">/* handle most of the key */</comment>
		<while>while <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">12</literal></expr>)</condition>
		<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WORDS_BIGENDIAN</name></cpp:ifdef>
			<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><name><name>k</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><name><name>k</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><name><name>k</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>							<comment type="block">/* !WORDS_BIGENDIAN */</comment>
			<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><name><name>k</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><name><name>k</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* WORDS_BIGENDIAN */</comment>
			<expr_stmt><expr><call><name>mix</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>k</name> <operator>+=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
		</block_content>}</block></while>

		<comment type="block">/* handle the last 11 bytes */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WORDS_BIGENDIAN</name></cpp:ifdef>
		<switch>switch <condition>(<expr><name>len</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><literal type="number">11</literal></expr>:</case>
				<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">10</literal></expr>:</case>
				<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">9</literal></expr>:</case>
				<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">8</literal></expr>:</case>
				<comment type="block">/* the lowest byte of c is reserved for the length */</comment>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <name><name>k</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">7</literal></expr>:</case>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">6</literal></expr>:</case>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">5</literal></expr>:</case>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">4</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>k</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">3</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">2</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">1</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* case 0: nothing left to add */</comment>
		</block_content>}</block></switch>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>							<comment type="block">/* !WORDS_BIGENDIAN */</comment>
		<switch>switch <condition>(<expr><name>len</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><literal type="number">11</literal></expr>:</case>
				<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">10</literal></expr>:</case>
				<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">9</literal></expr>:</case>
				<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">8</literal></expr>:</case>
				<comment type="block">/* the lowest byte of c is reserved for the length */</comment>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">7</literal></expr>:</case>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">6</literal></expr>:</case>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">5</literal></expr>:</case>
				<expr_stmt><expr><name>b</name> <operator>+=</operator> <name><name>k</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">4</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">3</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">2</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
				<comment type="block">/* fall through */</comment>
			<case>case <expr><literal type="number">1</literal></expr>:</case>
				<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
				<comment type="block">/* case 0: nothing left to add */</comment>
		</block_content>}</block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* WORDS_BIGENDIAN */</comment>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>final</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* report the result */</comment>
	<return>return <expr><operator>(</operator><operator>(</operator><name>uint64</name><operator>)</operator> <name>b</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <name>c</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * hash_bytes_uint32() -- hash a 32-bit value to a 32-bit value
 *
 * This has the same result as
 *		hash_bytes(&amp;k, sizeof(uint32))
 * but is faster and doesn't force the caller to store k into memory.
 */</comment>
<function><type><name>uint32</name></type>
<name>hash_bytes_uint32</name><parameter_list>(<parameter><decl><type><name>uint32</name></type> <name>k</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>a</name></decl>,
				<decl><type ref="prev"/><name>b</name></decl>,
				<decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name> <operator>=</operator> <name>c</name> <operator>=</operator> <literal type="number">0x9e3779b9</literal> <operator>+</operator> <operator>(</operator><name>uint32</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">3923095</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>a</name> <operator>+=</operator> <name>k</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>final</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* report the result */</comment>
	<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * hash_bytes_uint32_extended() -- hash 32-bit value to 64-bit value, with seed
 *
 * Like hash_bytes_uint32, this is a convenience function.
 */</comment>
<function><type><name>uint64</name></type>
<name>hash_bytes_uint32_extended</name><parameter_list>(<parameter><decl><type><name>uint32</name></type> <name>k</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>seed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>a</name></decl>,
				<decl><type ref="prev"/><name>b</name></decl>,
				<decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name> <operator>=</operator> <name>c</name> <operator>=</operator> <literal type="number">0x9e3779b9</literal> <operator>+</operator> <operator>(</operator><name>uint32</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">3923095</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>seed</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>a</name> <operator>+=</operator> <operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name>seed</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>(</operator><name>uint32</name><operator>)</operator> <name>seed</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>mix</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>a</name> <operator>+=</operator> <name>k</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>final</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* report the result */</comment>
	<return>return <expr><operator>(</operator><operator>(</operator><name>uint64</name><operator>)</operator> <name>b</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <name>c</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * string_hash: hash function for keys that are NUL-terminated strings.
 *
 * NOTE: this is the default hash function if none is specified.
 */</comment>
<function><type><name>uint32</name></type>
<name>string_hash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>keysize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * If the string exceeds keysize-1 bytes, we want to hash only that many,
	 * because when it is copied into the hash table it will be truncated at
	 * that length.
	 */</comment>
	<decl_stmt><decl><type><name>Size</name></type>		<name>s_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>s_len</name> <operator>=</operator> <call><name>Min</name><argument_list>(<argument><expr><name>s_len</name></expr></argument>, <argument><expr><name>keysize</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>hash_bytes</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>key</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>s_len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * tag_hash: hash function for fixed-size tag values
 */</comment>
<function><type><name>uint32</name></type>
<name>tag_hash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>keysize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>hash_bytes</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>key</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>keysize</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * uint32_hash: hash function for keys that are uint32 or int32
 *
 * (tag_hash works for this case too, but is slower)
 */</comment>
<function><type><name>uint32</name></type>
<name>uint32_hash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>keysize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>keysize</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>hash_bytes_uint32</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>uint32</name> <operator>*</operator><operator>)</operator> <name>key</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
