<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/common/checksum_helper.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * checksum_helper.c
 *	  Compute a checksum of any of various types using common routines
 *
 * Portions Copyright (c) 2016-2020, PostgreSQL Global Development Group
 *
 * IDENTIFICATION
 *		  src/common/checksum_helper.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FRONTEND</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/checksum_helper.h"</cpp:file></cpp:include>

<comment type="block">/*
 * If 'name' is a recognized checksum type, set *type to the corresponding
 * constant and return true. Otherwise, set *type to CHECKSUM_TYPE_NONE and
 * return false.
 */</comment>
<function><type><name>bool</name></type>
<name>pg_checksum_parse_type</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>pg_checksum_type</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pg_checksum_type</name></type> <name>result_type</name> <init>= <expr><name>CHECKSUM_TYPE_NONE</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>result</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>result_type</name> <operator>=</operator> <name>CHECKSUM_TYPE_NONE</name></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"crc32c"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>result_type</name> <operator>=</operator> <name>CHECKSUM_TYPE_CRC32C</name></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"sha224"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>result_type</name> <operator>=</operator> <name>CHECKSUM_TYPE_SHA224</name></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"sha256"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>result_type</name> <operator>=</operator> <name>CHECKSUM_TYPE_SHA256</name></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"sha384"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>result_type</name> <operator>=</operator> <name>CHECKSUM_TYPE_SHA384</name></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"sha512"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>result_type</name> <operator>=</operator> <name>CHECKSUM_TYPE_SHA512</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <name>result_type</name></expr>;</expr_stmt>
	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Get the canonical human-readable name corresponding to a checksum type.
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>pg_checksum_type_name</name><parameter_list>(<parameter><decl><type><name>pg_checksum_type</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>CHECKSUM_TYPE_NONE</name></expr>:</case>
			<return>return <expr><literal type="string">"NONE"</literal></expr>;</return>
		<case>case <expr><name>CHECKSUM_TYPE_CRC32C</name></expr>:</case>
			<return>return <expr><literal type="string">"CRC32C"</literal></expr>;</return>
		<case>case <expr><name>CHECKSUM_TYPE_SHA224</name></expr>:</case>
			<return>return <expr><literal type="string">"SHA224"</literal></expr>;</return>
		<case>case <expr><name>CHECKSUM_TYPE_SHA256</name></expr>:</case>
			<return>return <expr><literal type="string">"SHA256"</literal></expr>;</return>
		<case>case <expr><name>CHECKSUM_TYPE_SHA384</name></expr>:</case>
			<return>return <expr><literal type="string">"SHA384"</literal></expr>;</return>
		<case>case <expr><name>CHECKSUM_TYPE_SHA512</name></expr>:</case>
			<return>return <expr><literal type="string">"SHA512"</literal></expr>;</return>
	</block_content>}</block></switch>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="string">"???"</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Initialize a checksum context for checksums of the given type.
 */</comment>
<function><type><name>void</name></type>
<name>pg_checksum_init</name><parameter_list>(<parameter><decl><type><name>pg_checksum_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>pg_checksum_type</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>CHECKSUM_TYPE_NONE</name></expr>:</case>
			<comment type="block">/* do nothing */</comment>
			<break>break;</break>
		<case>case <expr><name>CHECKSUM_TYPE_CRC32C</name></expr>:</case>
			<expr_stmt><expr><call><name>INIT_CRC32C</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>raw_context</name><operator>.</operator><name>c_crc32c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>CHECKSUM_TYPE_SHA224</name></expr>:</case>
			<expr_stmt><expr><call><name>pg_sha224_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>raw_context</name><operator>.</operator><name>c_sha224</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>CHECKSUM_TYPE_SHA256</name></expr>:</case>
			<expr_stmt><expr><call><name>pg_sha256_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>raw_context</name><operator>.</operator><name>c_sha256</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>CHECKSUM_TYPE_SHA384</name></expr>:</case>
			<expr_stmt><expr><call><name>pg_sha384_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>raw_context</name><operator>.</operator><name>c_sha384</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>CHECKSUM_TYPE_SHA512</name></expr>:</case>
			<expr_stmt><expr><call><name>pg_sha512_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>raw_context</name><operator>.</operator><name>c_sha512</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/*
 * Update a checksum context with new data.
 */</comment>
<function><type><name>void</name></type>
<name>pg_checksum_update</name><parameter_list>(<parameter><decl><type><name>pg_checksum_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,
				   <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>CHECKSUM_TYPE_NONE</name></expr>:</case>
			<comment type="block">/* do nothing */</comment>
			<break>break;</break>
		<case>case <expr><name>CHECKSUM_TYPE_CRC32C</name></expr>:</case>
			<expr_stmt><expr><call><name>COMP_CRC32C</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>raw_context</name><operator>.</operator><name>c_crc32c</name></name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>CHECKSUM_TYPE_SHA224</name></expr>:</case>
			<expr_stmt><expr><call><name>pg_sha224_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>raw_context</name><operator>.</operator><name>c_sha224</name></name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>CHECKSUM_TYPE_SHA256</name></expr>:</case>
			<expr_stmt><expr><call><name>pg_sha256_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>raw_context</name><operator>.</operator><name>c_sha256</name></name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>CHECKSUM_TYPE_SHA384</name></expr>:</case>
			<expr_stmt><expr><call><name>pg_sha384_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>raw_context</name><operator>.</operator><name>c_sha384</name></name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>CHECKSUM_TYPE_SHA512</name></expr>:</case>
			<expr_stmt><expr><call><name>pg_sha512_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>raw_context</name><operator>.</operator><name>c_sha512</name></name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/*
 * Finalize a checksum computation and write the result to an output buffer.
 *
 * The caller must ensure that the buffer is at least PG_CHECKSUM_MAX_LENGTH
 * bytes in length. The return value is the number of bytes actually written.
 */</comment>
<function><type><name>int</name></type>
<name>pg_checksum_final</name><parameter_list>(<parameter><decl><type><name>pg_checksum_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>retval</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>StaticAssertStmt</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pg_crc32c</name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <name>PG_CHECKSUM_MAX_LENGTH</name></expr></argument>,
					 <argument><expr><literal type="string">"CRC-32C digest too big for PG_CHECKSUM_MAX_LENGTH"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>StaticAssertStmt</name><argument_list>(<argument><expr><name>PG_SHA224_DIGEST_LENGTH</name> <operator>&lt;=</operator> <name>PG_CHECKSUM_MAX_LENGTH</name></expr></argument>,
					 <argument><expr><literal type="string">"SHA224 digest too for PG_CHECKSUM_MAX_LENGTH"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>StaticAssertStmt</name><argument_list>(<argument><expr><name>PG_SHA256_DIGEST_LENGTH</name> <operator>&lt;=</operator> <name>PG_CHECKSUM_MAX_LENGTH</name></expr></argument>,
					 <argument><expr><literal type="string">"SHA256 digest too for PG_CHECKSUM_MAX_LENGTH"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>StaticAssertStmt</name><argument_list>(<argument><expr><name>PG_SHA384_DIGEST_LENGTH</name> <operator>&lt;=</operator> <name>PG_CHECKSUM_MAX_LENGTH</name></expr></argument>,
					 <argument><expr><literal type="string">"SHA384 digest too for PG_CHECKSUM_MAX_LENGTH"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>StaticAssertStmt</name><argument_list>(<argument><expr><name>PG_SHA512_DIGEST_LENGTH</name> <operator>&lt;=</operator> <name>PG_CHECKSUM_MAX_LENGTH</name></expr></argument>,
					 <argument><expr><literal type="string">"SHA512 digest too for PG_CHECKSUM_MAX_LENGTH"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>CHECKSUM_TYPE_NONE</name></expr>:</case>
			<break>break;</break>
		<case>case <expr><name>CHECKSUM_TYPE_CRC32C</name></expr>:</case>
			<expr_stmt><expr><call><name>FIN_CRC32C</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>raw_context</name><operator>.</operator><name>c_crc32c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pg_crc32c</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>raw_context</name><operator>.</operator><name>c_crc32c</name></name></expr></argument>, <argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>CHECKSUM_TYPE_SHA224</name></expr>:</case>
			<expr_stmt><expr><call><name>pg_sha224_final</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>raw_context</name><operator>.</operator><name>c_sha224</name></name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>PG_SHA224_DIGEST_LENGTH</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>CHECKSUM_TYPE_SHA256</name></expr>:</case>
			<expr_stmt><expr><call><name>pg_sha256_final</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>raw_context</name><operator>.</operator><name>c_sha256</name></name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>PG_SHA256_DIGEST_LENGTH</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>CHECKSUM_TYPE_SHA384</name></expr>:</case>
			<expr_stmt><expr><call><name>pg_sha384_final</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>raw_context</name><operator>.</operator><name>c_sha384</name></name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>PG_SHA384_DIGEST_LENGTH</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>CHECKSUM_TYPE_SHA512</name></expr>:</case>
			<expr_stmt><expr><call><name>pg_sha512_final</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>raw_context</name><operator>.</operator><name>c_sha512</name></name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>PG_SHA512_DIGEST_LENGTH</name></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>retval</name> <operator>&lt;=</operator> <name>PG_CHECKSUM_MAX_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>
</unit>
