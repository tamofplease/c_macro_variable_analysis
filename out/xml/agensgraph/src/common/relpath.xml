<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/common/relpath.c"><comment type="block">/*-------------------------------------------------------------------------
 * relpath.c
 *		Shared frontend/backend code to compute pathnames of relation files
 *
 * This module also contains some logic associated with fork names.
 *
 * Portions Copyright (c) 1996-2020, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * IDENTIFICATION
 *	  src/common/relpath.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FRONTEND</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_tablespace_d.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/relpath.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/backendid.h"</cpp:file></cpp:include>


<comment type="block">/*
 * Lookup table of fork name by fork number.
 *
 * If you add a new entry, remember to update the errhint in
 * forkname_to_number() below, and update the SGML documentation for
 * pg_relation_size().
 */</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>forkNames</name><index>[]</index></name> <init>= <expr><block>{
	<expr><literal type="string">"main"</literal></expr>,						<comment type="block">/* MAIN_FORKNUM */</comment>
	<expr><literal type="string">"fsm"</literal></expr>,						<comment type="block">/* FSM_FORKNUM */</comment>
	<expr><literal type="string">"vm"</literal></expr>,						<comment type="block">/* VISIBILITYMAP_FORKNUM */</comment>
	<expr><literal type="string">"init"</literal></expr>						<comment type="block">/* INIT_FORKNUM */</comment>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>StaticAssertDecl</name><argument_list>(<argument><expr><call><name>lengthof</name><argument_list>(<argument><expr><name>forkNames</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>(</operator><name>MAX_FORKNUM</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,
				 <argument><expr><literal type="string">"array length mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/*
 * forkname_to_number - look up fork number by name
 *
 * In backend, we throw an error for no match; in frontend, we just
 * return InvalidForkNumber.
 */</comment>
<function><type><name>ForkNumber</name></type>
<name>forkname_to_number</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>forkName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ForkNumber</name></type>	<name>forkNum</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>forkNum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>forkNum</name> <operator>&lt;=</operator> <name>MAX_FORKNUM</name></expr>;</condition> <incr><expr><name>forkNum</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>forkNames</name><index>[<expr><name>forkNum</name></expr>]</index></name></expr></argument>, <argument><expr><name>forkName</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>forkNum</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FRONTEND</name></cpp:ifndef>
	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
			 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid fork name"</literal></expr></argument>)</argument_list></call><operator>,</operator>
			 <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"Valid fork names are \"main\", \"fsm\", "</literal>
					 <literal type="string">"\"vm\", and \"init\"."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<return>return <expr><name>InvalidForkNumber</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * forkname_chars
 *		We use this to figure out whether a filename could be a relation
 *		fork (as opposed to an oddly named stray file that somehow ended
 *		up in the database directory).  If the passed string begins with
 *		a fork name (other than the main fork name), we return its length,
 *		and set *fork (if not NULL) to the fork number.  If not, we return 0.
 *
 * Note that the present coding assumes that there are no fork names which
 * are prefixes of other fork names.
 */</comment>
<function><type><name>int</name></type>
<name>forkname_chars</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>ForkNumber</name> <modifier>*</modifier></type><name>fork</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ForkNumber</name></type>	<name>forkNum</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>forkNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>forkNum</name> <operator>&lt;=</operator> <name>MAX_FORKNUM</name></expr>;</condition> <incr><expr><name>forkNum</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>forkNames</name><index>[<expr><name>forkNum</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>forkNames</name><index>[<expr><name>forkNum</name></expr>]</index></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>fork</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>fork</name> <operator>=</operator> <name>forkNum</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<return>return <expr><name>len</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<if_stmt><if>if <condition>(<expr><name>fork</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>fork</name> <operator>=</operator> <name>InvalidForkNumber</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * GetDatabasePath - construct path to a database directory
 *
 * Result is a palloc'd string.
 *
 * XXX this must agree with GetRelationPath()!
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>GetDatabasePath</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>dbNode</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>spcNode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>spcNode</name> <operator>==</operator> <name>GLOBALTABLESPACE_OID</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Shared system relations live in {datadir}/global */</comment>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>dbNode</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>pstrdup</name><argument_list>(<argument><expr><literal type="string">"global"</literal></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>spcNode</name> <operator>==</operator> <name>DEFAULTTABLESPACE_OID</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* The default tablespace is {datadir}/base */</comment>
		<return>return <expr><call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"base/%u"</literal></expr></argument>, <argument><expr><name>dbNode</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* All other tablespaces are accessed via symlinks */</comment>
		<return>return <expr><call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"pg_tblspc/%u/%s/%u"</literal></expr></argument>,
						<argument><expr><name>spcNode</name></expr></argument>, <argument><expr><name>TABLESPACE_VERSION_DIRECTORY</name></expr></argument>, <argument><expr><name>dbNode</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * GetRelationPath - construct path to a relation's file
 *
 * Result is a palloc'd string.
 *
 * Note: ideally, backendId would be declared as type BackendId, but relpath.h
 * would have to include a backend-only header to do that; doesn't seem worth
 * the trouble considering BackendId is just int anyway.
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>GetRelationPath</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>dbNode</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>spcNode</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>relNode</name></decl></parameter>,
				<parameter><decl><type><name>int</name></type> <name>backendId</name></decl></parameter>, <parameter><decl><type><name>ForkNumber</name></type> <name>forkNumber</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>spcNode</name> <operator>==</operator> <name>GLOBALTABLESPACE_OID</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Shared system relations live in {datadir}/global */</comment>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>dbNode</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>backendId</name> <operator>==</operator> <name>InvalidBackendId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>forkNumber</name> <operator>!=</operator> <name>MAIN_FORKNUM</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"global/%u_%s"</literal></expr></argument>,
							<argument><expr><name>relNode</name></expr></argument>, <argument><expr><name><name>forkNames</name><index>[<expr><name>forkNumber</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"global/%u"</literal></expr></argument>, <argument><expr><name>relNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>spcNode</name> <operator>==</operator> <name>DEFAULTTABLESPACE_OID</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* The default tablespace is {datadir}/base */</comment>
		<if_stmt><if>if <condition>(<expr><name>backendId</name> <operator>==</operator> <name>InvalidBackendId</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>forkNumber</name> <operator>!=</operator> <name>MAIN_FORKNUM</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"base/%u/%u_%s"</literal></expr></argument>,
								<argument><expr><name>dbNode</name></expr></argument>, <argument><expr><name>relNode</name></expr></argument>,
								<argument><expr><name><name>forkNames</name><index>[<expr><name>forkNumber</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"base/%u/%u"</literal></expr></argument>,
								<argument><expr><name>dbNode</name></expr></argument>, <argument><expr><name>relNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>forkNumber</name> <operator>!=</operator> <name>MAIN_FORKNUM</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"base/%u/t%d_%u_%s"</literal></expr></argument>,
								<argument><expr><name>dbNode</name></expr></argument>, <argument><expr><name>backendId</name></expr></argument>, <argument><expr><name>relNode</name></expr></argument>,
								<argument><expr><name><name>forkNames</name><index>[<expr><name>forkNumber</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"base/%u/t%d_%u"</literal></expr></argument>,
								<argument><expr><name>dbNode</name></expr></argument>, <argument><expr><name>backendId</name></expr></argument>, <argument><expr><name>relNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* All other tablespaces are accessed via symlinks */</comment>
		<if_stmt><if>if <condition>(<expr><name>backendId</name> <operator>==</operator> <name>InvalidBackendId</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>forkNumber</name> <operator>!=</operator> <name>MAIN_FORKNUM</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"pg_tblspc/%u/%s/%u/%u_%s"</literal></expr></argument>,
								<argument><expr><name>spcNode</name></expr></argument>, <argument><expr><name>TABLESPACE_VERSION_DIRECTORY</name></expr></argument>,
								<argument><expr><name>dbNode</name></expr></argument>, <argument><expr><name>relNode</name></expr></argument>,
								<argument><expr><name><name>forkNames</name><index>[<expr><name>forkNumber</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"pg_tblspc/%u/%s/%u/%u"</literal></expr></argument>,
								<argument><expr><name>spcNode</name></expr></argument>, <argument><expr><name>TABLESPACE_VERSION_DIRECTORY</name></expr></argument>,
								<argument><expr><name>dbNode</name></expr></argument>, <argument><expr><name>relNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>forkNumber</name> <operator>!=</operator> <name>MAIN_FORKNUM</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"pg_tblspc/%u/%s/%u/t%d_%u_%s"</literal></expr></argument>,
								<argument><expr><name>spcNode</name></expr></argument>, <argument><expr><name>TABLESPACE_VERSION_DIRECTORY</name></expr></argument>,
								<argument><expr><name>dbNode</name></expr></argument>, <argument><expr><name>backendId</name></expr></argument>, <argument><expr><name>relNode</name></expr></argument>,
								<argument><expr><name><name>forkNames</name><index>[<expr><name>forkNumber</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"pg_tblspc/%u/%s/%u/t%d_%u"</literal></expr></argument>,
								<argument><expr><name>spcNode</name></expr></argument>, <argument><expr><name>TABLESPACE_VERSION_DIRECTORY</name></expr></argument>,
								<argument><expr><name>dbNode</name></expr></argument>, <argument><expr><name>backendId</name></expr></argument>, <argument><expr><name>relNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>path</name></expr>;</return>
</block_content>}</block></function>
</unit>
