<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/common/protocol_openssl.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * protocol_openssl.c
 *	  OpenSSL functionality shared between frontend and backend
 *
 * This should only be used if code is compiled with OpenSSL support.
 *
 * Portions Copyright (c) 1996-2020, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * IDENTIFICATION
 *		  src/common/protocol_openssl.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FRONTEND</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/openssl.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Replacements for APIs introduced in OpenSSL 1.1.0.
 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SSL_CTX_set_min_proto_version</name></cpp:ifndef>

<comment type="block">/*
 * OpenSSL versions that support TLS 1.3 shouldn't get here because they
 * already have these functions.  So we don't have to keep updating the below
 * code for every new TLS version, and eventually it can go away.  But let's
 * just check this to make sure ...
 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TLS1_3_VERSION</name></cpp:ifdef>
<cpp:error>#<cpp:directive>error</cpp:directive> OpenSSL version mismatch</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>
<name>SSL_CTX_set_min_proto_version</name><parameter_list>(<parameter><decl><type><name>SSL_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>ssl_options</name> <init>= <expr><name>SSL_OP_NO_SSLv2</name> <operator>|</operator> <name>SSL_OP_NO_SSLv3</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>version</name> <operator>&gt;</operator> <name>TLS1_VERSION</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>ssl_options</name> <operator>|=</operator> <name>SSL_OP_NO_TLSv1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Some OpenSSL versions define TLS*_VERSION macros but not the
	 * corresponding SSL_OP_NO_* macro, so in those cases we have to return
	 * unsuccessfully here.
	 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TLS1_1_VERSION</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name>version</name> <operator>&gt;</operator> <name>TLS1_1_VERSION</name></expr>)</condition>
	<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SSL_OP_NO_TLSv1_1</name></cpp:ifdef>
		<expr_stmt><expr><name>ssl_options</name> <operator>|=</operator> <name>SSL_OP_NO_TLSv1_1</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TLS1_2_VERSION</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name>version</name> <operator>&gt;</operator> <name>TLS1_2_VERSION</name></expr>)</condition>
	<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SSL_OP_NO_TLSv1_2</name></cpp:ifdef>
		<expr_stmt><expr><name>ssl_options</name> <operator>|=</operator> <name>SSL_OP_NO_TLSv1_2</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>SSL_CTX_set_options</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ssl_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">1</literal></expr>;</return>					<comment type="block">/* success */</comment>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>SSL_CTX_set_max_proto_version</name><parameter_list>(<parameter><decl><type><name>SSL_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>ssl_options</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>AssertArg</name><argument_list>(<argument><expr><name>version</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Some OpenSSL versions define TLS*_VERSION macros but not the
	 * corresponding SSL_OP_NO_* macro, so in those cases we have to return
	 * unsuccessfully here.
	 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TLS1_1_VERSION</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name>version</name> <operator>&lt;</operator> <name>TLS1_1_VERSION</name></expr>)</condition>
	<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SSL_OP_NO_TLSv1_1</name></cpp:ifdef>
		<expr_stmt><expr><name>ssl_options</name> <operator>|=</operator> <name>SSL_OP_NO_TLSv1_1</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TLS1_2_VERSION</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name>version</name> <operator>&lt;</operator> <name>TLS1_2_VERSION</name></expr>)</condition>
	<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SSL_OP_NO_TLSv1_2</name></cpp:ifdef>
		<expr_stmt><expr><name>ssl_options</name> <operator>|=</operator> <name>SSL_OP_NO_TLSv1_2</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>SSL_CTX_set_options</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ssl_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">1</literal></expr>;</return>					<comment type="block">/* success */</comment>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* !SSL_CTX_set_min_proto_version */</comment>
</unit>
