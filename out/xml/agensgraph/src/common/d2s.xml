<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/common/d2s.c"><comment type="block">/*---------------------------------------------------------------------------
 *
 * Ryu floating-point output for double precision.
 *
 * Portions Copyright (c) 2018-2020, PostgreSQL Global Development Group
 *
 * IDENTIFICATION
 *	  src/common/d2s.c
 *
 * This is a modification of code taken from github.com/ulfjack/ryu under the
 * terms of the Boost license (not the Apache license). The original copyright
 * notice follows:
 *
 * Copyright 2018 Ulf Adams
 *
 * The contents of this file may be used under the terms of the Apache
 * License, Version 2.0.
 *
 *     (See accompanying file LICENSE-Apache or copy at
 *      http://www.apache.org/licenses/LICENSE-2.0)
 *
 * Alternatively, the contents of this file may be used under the terms of the
 * Boost Software License, Version 1.0.
 *
 *     (See accompanying file LICENSE-Boost or copy at
 *      https://www.boost.org/LICENSE_1_0.txt)
 *
 * Unless required by applicable law or agreed to in writing, this software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.
 *
 *---------------------------------------------------------------------------
 */</comment>

<comment type="block">/*
 *  Runtime compiler options:
 *
 *  -DRYU_ONLY_64_BIT_OPS Avoid using uint128 or 64-bit intrinsics. Slower,
 *      depending on your compiler.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FRONTEND</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/shortest_dec.h"</cpp:file></cpp:include>

<comment type="block">/*
 * For consistency, we use 128-bit types if and only if the rest of PG also
 * does, even though we could use them here without worrying about the
 * alignment concerns that apply elsewhere.
 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_INT128</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> \
	<operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RYU_ONLY_64_BIT_OPS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_M_X64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_64_BIT_INTRINSICS</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ryu_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"digit_table.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"d2s_full_table.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"d2s_intrinsics.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOUBLE_MANTISSA_BITS</name></cpp:macro> <cpp:value>52</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOUBLE_EXPONENT_BITS</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOUBLE_BIAS</name></cpp:macro> <cpp:value>1023</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOUBLE_POW5_INV_BITCOUNT</name></cpp:macro> <cpp:value>122</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOUBLE_POW5_BITCOUNT</name></cpp:macro> <cpp:value>121</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32</name></type>
<name>pow5Factor</name><parameter_list>(<parameter><decl><type><name>uint64</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>value</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint64</name></type> <name>q</name> <init>= <expr><call><name>div5</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>r</name> <init>= <expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name>value</name> <operator>-</operator> <literal type="number">5</literal> <operator>*</operator> <name>q</name><operator>)</operator></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>value</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*  Returns true if value is divisible by 5^p. */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>
<name>multipleOfPowerOf5</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint64</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * I tried a case distinction on p, but there was no performance
	 * difference.
	 */</comment>
	<return>return <expr><call><name>pow5Factor</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>p</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*  Returns true if value is divisible by 2^p. */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>
<name>multipleOfPowerOf2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint64</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* return __builtin_ctzll(value) &gt;= p; */</comment>
	<return>return <expr><operator>(</operator><name>value</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>p</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * We need a 64x128-bit multiplication and a subsequent 128-bit shift.
 *
 * Multiplication:
 *
 *    The 64-bit factor is variable and passed in, the 128-bit factor comes
 *    from a lookup table. We know that the 64-bit factor only has 55
 *    significant bits (i.e., the 9 topmost bits are zeros). The 128-bit
 *    factor only has 124 significant bits (i.e., the 4 topmost bits are
 *    zeros).
 *
 * Shift:
 *
 *    In principle, the multiplication result requires 55 + 124 = 179 bits to
 *    represent. However, we then shift this value to the right by j, which is
 *    at least j &gt;= 115, so the result is guaranteed to fit into 179 - 115 =
 *    64 bits. This means that we only need the topmost 64 significant bits of
 *    the 64x128-bit multiplication.
 *
 * There are several ways to do this:
 *
 *  1. Best case: the compiler exposes a 128-bit type.
 *     We perform two 64x64-bit multiplications, add the higher 64 bits of the
 *     lower result to the higher result, and shift by j - 64 bits.
 *
 *     We explicitly cast from 64-bit to 128-bit, so the compiler can tell
 *     that these are only 64-bit inputs, and can map these to the best
 *     possible sequence of assembly instructions. x86-64 machines happen to
 *     have matching assembly instructions for 64x64-bit multiplications and
 *     128-bit shifts.
 *
 *  2. Second best case: the compiler exposes intrinsics for the x86-64
 *     assembly instructions mentioned in 1.
 *
 *  3. We only have 64x64 bit instructions that return the lower 64 bits of
 *     the result, i.e., we have to use plain C.
 *
 *     Our inputs are less than the full width, so we have three options:
 *     a. Ignore this fact and just implement the intrinsics manually.
 *     b. Split both into 31-bit pieces, which guarantees no internal
 *        overflow, but requires extra work upfront (unless we change the
 *        lookup table).
 *     c. Split only the first factor into 31-bit pieces, which also
 *        guarantees no internal overflow, but requires extra work since the
 *        intermediate results are not perfectly aligned.
 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_INT128</name></expr></argument>)</argument_list></call></expr></cpp:if>

<comment type="block">/*  Best case: use 128-bit type. */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64</name></type>
<name>mulShift</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint64</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64</name> <modifier>*</modifier><specifier>const</specifier></type> <name>mul</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int32</name></type> <name>j</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>uint128</name></type> <name>b0</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uint128</name><operator>)</operator> <name>m</name><operator>)</operator> <operator>*</operator> <name><name>mul</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>uint128</name></type> <name>b2</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uint128</name><operator>)</operator> <name>m</name><operator>)</operator> <operator>*</operator> <name><name>mul</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<return>return <expr><operator>(</operator><name>uint64</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>b0</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator> <operator>+</operator> <name>b2</name><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>j</name> <operator>-</operator> <literal type="number">64</literal><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64</name></type>
<name>mulShiftAll</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint64</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64</name> <modifier>*</modifier><specifier>const</specifier></type> <name>mul</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int32</name></type> <name>j</name></decl></parameter>,
			<parameter><decl><type><name>uint64</name> <modifier>*</modifier><specifier>const</specifier></type> <name>vp</name></decl></parameter>, <parameter><decl><type><name>uint64</name> <modifier>*</modifier><specifier>const</specifier></type> <name>vm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>mmShift</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><operator>*</operator><name>vp</name> <operator>=</operator> <call><name>mulShift</name><argument_list>(<argument><expr><literal type="number">4</literal> <operator>*</operator> <name>m</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>mul</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>vm</name> <operator>=</operator> <call><name>mulShift</name><argument_list>(<argument><expr><literal type="number">4</literal> <operator>*</operator> <name>m</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>mmShift</name></expr></argument>, <argument><expr><name>mul</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>mulShift</name><argument_list>(<argument><expr><literal type="number">4</literal> <operator>*</operator> <name>m</name></expr></argument>, <argument><expr><name>mul</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAS_64_BIT_INTRINSICS</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64</name></type>
<name>mulShift</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint64</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64</name> <modifier>*</modifier><specifier>const</specifier></type> <name>mul</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int32</name></type> <name>j</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* m is maximum 55 bits */</comment>
	<decl_stmt><decl><type><name>uint64</name></type>		<name>high1</name></decl>;</decl_stmt>

	<comment type="block">/* 128 */</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>uint64</name></type> <name>low1</name> <init>= <expr><call><name>umul128</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name><name>mul</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>high1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* 64 */</comment>
	<decl_stmt><decl><type><name>uint64</name></type>		<name>high0</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type>		<name>sum</name></decl>;</decl_stmt>

	<comment type="block">/* 64 */</comment>
	<expr_stmt><expr><call><name>umul128</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name><name>mul</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>high0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* 0 */</comment>
	<expr_stmt><expr><name>sum</name> <operator>=</operator> <name>high0</name> <operator>+</operator> <name>low1</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>sum</name> <operator>&lt;</operator> <name>high0</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>++</operator><name>high1</name></expr>;</expr_stmt>
		<comment type="block">/* overflow into high1 */</comment>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><call><name>shiftright128</name><argument_list>(<argument><expr><name>sum</name></expr></argument>, <argument><expr><name>high1</name></expr></argument>, <argument><expr><name>j</name> <operator>-</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64</name></type>
<name>mulShiftAll</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint64</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64</name> <modifier>*</modifier><specifier>const</specifier></type> <name>mul</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int32</name></type> <name>j</name></decl></parameter>,
			<parameter><decl><type><name>uint64</name> <modifier>*</modifier><specifier>const</specifier></type> <name>vp</name></decl></parameter>, <parameter><decl><type><name>uint64</name> <modifier>*</modifier><specifier>const</specifier></type> <name>vm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>mmShift</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><operator>*</operator><name>vp</name> <operator>=</operator> <call><name>mulShift</name><argument_list>(<argument><expr><literal type="number">4</literal> <operator>*</operator> <name>m</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>mul</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>vm</name> <operator>=</operator> <call><name>mulShift</name><argument_list>(<argument><expr><literal type="number">4</literal> <operator>*</operator> <name>m</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>mmShift</name></expr></argument>, <argument><expr><name>mul</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>mulShift</name><argument_list>(<argument><expr><literal type="number">4</literal> <operator>*</operator> <name>m</name></expr></argument>, <argument><expr><name>mul</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>							<comment type="block">/* // !defined(HAVE_INT128) &amp;&amp;
								 * !defined(HAS_64_BIT_INTRINSICS) */</comment>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64</name></type>
<name>mulShiftAll</name><parameter_list>(<parameter><decl><type><name>uint64</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64</name> <modifier>*</modifier><specifier>const</specifier></type> <name>mul</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int32</name></type> <name>j</name></decl></parameter>,
			<parameter><decl><type><name>uint64</name> <modifier>*</modifier><specifier>const</specifier></type> <name>vp</name></decl></parameter>, <parameter><decl><type><name>uint64</name> <modifier>*</modifier><specifier>const</specifier></type> <name>vm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>mmShift</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>m</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>					<comment type="block">/* m is maximum 55 bits */</comment>

	<decl_stmt><decl><type><name>uint64</name></type>		<name>tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>uint64</name></type> <name>lo</name> <init>= <expr><call><name>umul128</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name><name>mul</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type>		<name>hi</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>uint64</name></type> <name>mid</name> <init>= <expr><name>tmp</name> <operator>+</operator> <call><name>umul128</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name><name>mul</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>hi</name> <operator>+=</operator> <name>mid</name> <operator>&lt;</operator> <name>tmp</name></expr>;</expr_stmt>			<comment type="block">/* overflow into hi */</comment>

	<decl_stmt><decl><type><specifier>const</specifier> <name>uint64</name></type> <name>lo2</name> <init>= <expr><name>lo</name> <operator>+</operator> <name><name>mul</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>uint64</name></type> <name>mid2</name> <init>= <expr><name>mid</name> <operator>+</operator> <name><name>mul</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>lo2</name> <operator>&lt;</operator> <name>lo</name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>uint64</name></type> <name>hi2</name> <init>= <expr><name>hi</name> <operator>+</operator> <operator>(</operator><name>mid2</name> <operator>&lt;</operator> <name>mid</name><operator>)</operator></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>vp</name> <operator>=</operator> <call><name>shiftright128</name><argument_list>(<argument><expr><name>mid2</name></expr></argument>, <argument><expr><name>hi2</name></expr></argument>, <argument><expr><name>j</name> <operator>-</operator> <literal type="number">64</literal> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>mmShift</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint64</name></type> <name>lo3</name> <init>= <expr><name>lo</name> <operator>-</operator> <name><name>mul</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint64</name></type> <name>mid3</name> <init>= <expr><name>mid</name> <operator>-</operator> <name><name>mul</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>lo3</name> <operator>&gt;</operator> <name>lo</name><operator>)</operator></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint64</name></type> <name>hi3</name> <init>= <expr><name>hi</name> <operator>-</operator> <operator>(</operator><name>mid3</name> <operator>&gt;</operator> <name>mid</name><operator>)</operator></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><operator>*</operator><name>vm</name> <operator>=</operator> <call><name>shiftright128</name><argument_list>(<argument><expr><name>mid3</name></expr></argument>, <argument><expr><name>hi3</name></expr></argument>, <argument><expr><name>j</name> <operator>-</operator> <literal type="number">64</literal> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint64</name></type> <name>lo3</name> <init>= <expr><name>lo</name> <operator>+</operator> <name>lo</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint64</name></type> <name>mid3</name> <init>= <expr><name>mid</name> <operator>+</operator> <name>mid</name> <operator>+</operator> <operator>(</operator><name>lo3</name> <operator>&lt;</operator> <name>lo</name><operator>)</operator></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint64</name></type> <name>hi3</name> <init>= <expr><name>hi</name> <operator>+</operator> <name>hi</name> <operator>+</operator> <operator>(</operator><name>mid3</name> <operator>&lt;</operator> <name>mid</name><operator>)</operator></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint64</name></type> <name>lo4</name> <init>= <expr><name>lo3</name> <operator>-</operator> <name><name>mul</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint64</name></type> <name>mid4</name> <init>= <expr><name>mid3</name> <operator>-</operator> <name><name>mul</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>lo4</name> <operator>&gt;</operator> <name>lo3</name><operator>)</operator></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint64</name></type> <name>hi4</name> <init>= <expr><name>hi3</name> <operator>-</operator> <operator>(</operator><name>mid4</name> <operator>&gt;</operator> <name>mid3</name><operator>)</operator></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><operator>*</operator><name>vm</name> <operator>=</operator> <call><name>shiftright128</name><argument_list>(<argument><expr><name>mid4</name></expr></argument>, <argument><expr><name>hi4</name></expr></argument>, <argument><expr><name>j</name> <operator>-</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><call><name>shiftright128</name><argument_list>(<argument><expr><name>mid</name></expr></argument>, <argument><expr><name>hi</name></expr></argument>, <argument><expr><name>j</name> <operator>-</operator> <literal type="number">64</literal> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* // HAS_64_BIT_INTRINSICS */</comment>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32</name></type>
<name>decimalLength</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint64</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* This is slightly faster than a loop. */</comment>
	<comment type="block">/* The average output length is 16.38 digits, so we check high-to-low. */</comment>
	<comment type="block">/* Function precondition: v is not an 18, 19, or 20-digit number. */</comment>
	<comment type="block">/* (17 digits are sufficient for round-tripping.) */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>v</name> <operator>&lt;</operator> <literal type="number">100000000000000000L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;=</operator> <literal type="number">10000000000000000L</literal></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><literal type="number">17</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;=</operator> <literal type="number">1000000000000000L</literal></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><literal type="number">16</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;=</operator> <literal type="number">100000000000000L</literal></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><literal type="number">15</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;=</operator> <literal type="number">10000000000000L</literal></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><literal type="number">14</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;=</operator> <literal type="number">1000000000000L</literal></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><literal type="number">13</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;=</operator> <literal type="number">100000000000L</literal></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><literal type="number">12</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;=</operator> <literal type="number">10000000000L</literal></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><literal type="number">11</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;=</operator> <literal type="number">1000000000L</literal></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><literal type="number">10</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;=</operator> <literal type="number">100000000L</literal></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><literal type="number">9</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;=</operator> <literal type="number">10000000L</literal></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><literal type="number">8</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;=</operator> <literal type="number">1000000L</literal></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><literal type="number">7</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;=</operator> <literal type="number">100000L</literal></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><literal type="number">6</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;=</operator> <literal type="number">10000L</literal></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><literal type="number">5</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;=</operator> <literal type="number">1000L</literal></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><literal type="number">4</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;=</operator> <literal type="number">100L</literal></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><literal type="number">3</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;=</operator> <literal type="number">10L</literal></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><literal type="number">2</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*  A floating decimal representing m * 10^e. */</comment>
<typedef>typedef <type><struct>struct <name>floating_decimal_64</name>
<block>{
	<decl_stmt><decl><type><name>uint64</name></type>		<name>mantissa</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>exponent</name></decl>;</decl_stmt>
}</block></struct></type> <name>floating_decimal_64</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>floating_decimal_64</name></type>
<name>d2d</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint64</name></type> <name>ieeeMantissa</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>ieeeExponent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int32</name></type>		<name>e2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type>		<name>m2</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>ieeeExponent</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* We subtract 2 so that the bounds computation has 2 additional bits. */</comment>
		<expr_stmt><expr><name>e2</name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name>DOUBLE_BIAS</name> <operator>-</operator> <name>DOUBLE_MANTISSA_BITS</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>m2</name> <operator>=</operator> <name>ieeeMantissa</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>e2</name> <operator>=</operator> <name>ieeeExponent</name> <operator>-</operator> <name>DOUBLE_BIAS</name> <operator>-</operator> <name>DOUBLE_MANTISSA_BITS</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>m2</name> <operator>=</operator> <operator>(</operator><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>DOUBLE_MANTISSA_BITS</name><operator>)</operator> <operator>|</operator> <name>ieeeMantissa</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>STRICTLY_SHORTEST</name></expr></cpp:if>
	<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type>	<name>even</name> <init>= <expr><operator>(</operator><name>m2</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type>	<name>acceptBounds</name> <init>= <expr><name>even</name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type>	<name>acceptBounds</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/* Step 2: Determine the interval of legal decimal representations. */</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>uint64</name></type> <name>mv</name> <init>= <expr><literal type="number">4</literal> <operator>*</operator> <name>m2</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Implicit bool -&gt; int conversion. True is 1, false is 0. */</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>mmShift</name> <init>= <expr><name>ieeeMantissa</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>ieeeExponent</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/* We would compute mp and mm like this: */</comment>
	<comment type="block">/* uint64 mp = 4 * m2 + 2; */</comment>
	<comment type="block">/* uint64 mm = mv - 1 - mmShift; */</comment>

	<comment type="block">/* Step 3: Convert to a decimal power base using 128-bit arithmetic. */</comment>
	<decl_stmt><decl><type><name>uint64</name></type>		<name>vr</name></decl>,
				<decl><type ref="prev"/><name>vp</name></decl>,
				<decl><type ref="prev"/><name>vm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>e10</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>vmIsTrailingZeros</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>vrIsTrailingZeros</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>e2</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * I tried special-casing q == 0, but there was no effect on
		 * performance.
		 *
		 * This expr is slightly faster than max(0, log10Pow2(e2) - 1).
		 */</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>q</name> <init>= <expr><call><name>log10Pow2</name><argument_list>(<argument><expr><name>e2</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><name>e2</name> <operator>&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>int32</name></type> <name>k</name> <init>= <expr><name>DOUBLE_POW5_INV_BITCOUNT</name> <operator>+</operator> <call><name>pow5bits</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>int32</name></type> <name>i</name> <init>= <expr><operator>-</operator><name>e2</name> <operator>+</operator> <name>q</name> <operator>+</operator> <name>k</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>e10</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>vr</name> <operator>=</operator> <call><name>mulShiftAll</name><argument_list>(<argument><expr><name>m2</name></expr></argument>, <argument><expr><name><name>DOUBLE_POW5_INV_SPLIT</name><index>[<expr><name>q</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vm</name></expr></argument>, <argument><expr><name>mmShift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>q</name> <operator>&lt;=</operator> <literal type="number">21</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * This should use q &lt;= 22, but I think 21 is also safe. Smaller
			 * values may still be safe, but it's more difficult to reason
			 * about them.
			 *
			 * Only one of mp, mv, and mm can be a multiple of 5, if any.
			 */</comment>
			<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>mvMod5</name> <init>= <expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name>mv</name> <operator>-</operator> <literal type="number">5</literal> <operator>*</operator> <call><name>div5</name><argument_list>(<argument><expr><name>mv</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>mvMod5</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>vrIsTrailingZeros</name> <operator>=</operator> <call><name>multipleOfPowerOf5</name><argument_list>(<argument><expr><name>mv</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>acceptBounds</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/*----
				 * Same as min(e2 + (~mm &amp; 1), pow5Factor(mm)) &gt;= q
				 * &lt;=&gt; e2 + (~mm &amp; 1) &gt;= q &amp;&amp; pow5Factor(mm) &gt;= q
				 * &lt;=&gt; true &amp;&amp; pow5Factor(mm) &gt;= q, since e2 &gt;= q.
				 *----
				 */</comment>
				<expr_stmt><expr><name>vmIsTrailingZeros</name> <operator>=</operator> <call><name>multipleOfPowerOf5</name><argument_list>(<argument><expr><name>mv</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>mmShift</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<comment type="block">/* Same as min(e2 + 1, pow5Factor(mp)) &gt;= q. */</comment>
				<expr_stmt><expr><name>vp</name> <operator>-=</operator> <call><name>multipleOfPowerOf5</name><argument_list>(<argument><expr><name>mv</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/*
		 * This expression is slightly faster than max(0, log10Pow5(-e2) - 1).
		 */</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>q</name> <init>= <expr><call><name>log10Pow5</name><argument_list>(<argument><expr><operator>-</operator><name>e2</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><operator>-</operator><name>e2</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>int32</name></type> <name>i</name> <init>= <expr><operator>-</operator><name>e2</name> <operator>-</operator> <name>q</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>int32</name></type> <name>k</name> <init>= <expr><call><name>pow5bits</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>DOUBLE_POW5_BITCOUNT</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>int32</name></type> <name>j</name> <init>= <expr><name>q</name> <operator>-</operator> <name>k</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>e10</name> <operator>=</operator> <name>q</name> <operator>+</operator> <name>e2</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>vr</name> <operator>=</operator> <call><name>mulShiftAll</name><argument_list>(<argument><expr><name>m2</name></expr></argument>, <argument><expr><name><name>DOUBLE_POW5_SPLIT</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vm</name></expr></argument>, <argument><expr><name>mmShift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>q</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * {vr,vp,vm} is trailing zeros if {mv,mp,mm} has at least q
			 * trailing 0 bits.
			 */</comment>
			<comment type="block">/* mv = 4 * m2, so it always has at least two trailing 0 bits. */</comment>
			<expr_stmt><expr><name>vrIsTrailingZeros</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>acceptBounds</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/*
				 * mm = mv - 1 - mmShift, so it has 1 trailing 0 bit iff
				 * mmShift == 1.
				 */</comment>
				<expr_stmt><expr><name>vmIsTrailingZeros</name> <operator>=</operator> <name>mmShift</name> <operator>==</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<comment type="block">/*
				 * mp = mv + 2, so it always has at least one trailing 0 bit.
				 */</comment>
				<expr_stmt><expr><operator>--</operator><name>vp</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>q</name> <operator>&lt;</operator> <literal type="number">63</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* TODO(ulfjack):Use a tighter bound here. */</comment>
			<comment type="block">/*
			 * We need to compute min(ntz(mv), pow5Factor(mv) - e2) &gt;= q - 1
			 */</comment>
			<comment type="block">/* &lt;=&gt; ntz(mv) &gt;= q - 1 &amp;&amp; pow5Factor(mv) - e2 &gt;= q - 1 */</comment>
			<comment type="block">/* &lt;=&gt; ntz(mv) &gt;= q - 1 (e2 is negative and -e2 &gt;= q) */</comment>
			<comment type="block">/* &lt;=&gt; (mv &amp; ((1 &lt;&lt; (q - 1)) - 1)) == 0 */</comment>

			<comment type="block">/*
			 * We also need to make sure that the left shift does not
			 * overflow.
			 */</comment>
			<expr_stmt><expr><name>vrIsTrailingZeros</name> <operator>=</operator> <call><name>multipleOfPowerOf2</name><argument_list>(<argument><expr><name>mv</name></expr></argument>, <argument><expr><name>q</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/*
	 * Step 4: Find the shortest decimal representation in the interval of
	 * legal representations.
	 */</comment>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>removed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name>lastRemovedDigit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type>		<name>output</name></decl>;</decl_stmt>

	<comment type="block">/* On average, we remove ~2 digits. */</comment>
	<if_stmt><if>if <condition>(<expr><name>vmIsTrailingZeros</name> <operator>||</operator> <name>vrIsTrailingZeros</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* General case, which happens rarely (~0.7%). */</comment>
		<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><specifier>const</specifier> <name>uint64</name></type> <name>vpDiv10</name> <init>= <expr><call><name>div10</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier>const</specifier> <name>uint64</name></type> <name>vmDiv10</name> <init>= <expr><call><name>div10</name><argument_list>(<argument><expr><name>vm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>vpDiv10</name> <operator>&lt;=</operator> <name>vmDiv10</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>

			<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>vmMod10</name> <init>= <expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name>vm</name> <operator>-</operator> <literal type="number">10</literal> <operator>*</operator> <name>vmDiv10</name><operator>)</operator></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier>const</specifier> <name>uint64</name></type> <name>vrDiv10</name> <init>= <expr><call><name>div10</name><argument_list>(<argument><expr><name>vr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>vrMod10</name> <init>= <expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name>vr</name> <operator>-</operator> <literal type="number">10</literal> <operator>*</operator> <name>vrDiv10</name><operator>)</operator></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name>vmIsTrailingZeros</name> <operator>&amp;=</operator> <name>vmMod10</name> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>vrIsTrailingZeros</name> <operator>&amp;=</operator> <name>lastRemovedDigit</name> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>lastRemovedDigit</name> <operator>=</operator> <operator>(</operator><name>uint8</name><operator>)</operator> <name>vrMod10</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>vr</name> <operator>=</operator> <name>vrDiv10</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>vp</name> <operator>=</operator> <name>vpDiv10</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>vm</name> <operator>=</operator> <name>vmDiv10</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>++</operator><name>removed</name></expr>;</expr_stmt>
		</block_content>}</block></for>

		<if_stmt><if>if <condition>(<expr><name>vmIsTrailingZeros</name></expr>)</condition>
		<block>{<block_content>
			<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
			<block>{<block_content>
				<decl_stmt><decl><type><specifier>const</specifier> <name>uint64</name></type> <name>vmDiv10</name> <init>= <expr><call><name>div10</name><argument_list>(<argument><expr><name>vm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>vmMod10</name> <init>= <expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name>vm</name> <operator>-</operator> <literal type="number">10</literal> <operator>*</operator> <name>vmDiv10</name><operator>)</operator></expr></init></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><name>vmMod10</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<break>break;</break></block_content></block></if></if_stmt>

				<decl_stmt><decl><type><specifier>const</specifier> <name>uint64</name></type> <name>vpDiv10</name> <init>= <expr><call><name>div10</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><specifier>const</specifier> <name>uint64</name></type> <name>vrDiv10</name> <init>= <expr><call><name>div10</name><argument_list>(<argument><expr><name>vr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>vrMod10</name> <init>= <expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name>vr</name> <operator>-</operator> <literal type="number">10</literal> <operator>*</operator> <name>vrDiv10</name><operator>)</operator></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><name>vrIsTrailingZeros</name> <operator>&amp;=</operator> <name>lastRemovedDigit</name> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>lastRemovedDigit</name> <operator>=</operator> <operator>(</operator><name>uint8</name><operator>)</operator> <name>vrMod10</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>vr</name> <operator>=</operator> <name>vrDiv10</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>vp</name> <operator>=</operator> <name>vpDiv10</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>vm</name> <operator>=</operator> <name>vmDiv10</name></expr>;</expr_stmt>
				<expr_stmt><expr><operator>++</operator><name>removed</name></expr>;</expr_stmt>
			</block_content>}</block></for>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>vrIsTrailingZeros</name> <operator>&amp;&amp;</operator> <name>lastRemovedDigit</name> <operator>==</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator> <name>vr</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Round even if the exact number is .....50..0. */</comment>
			<expr_stmt><expr><name>lastRemovedDigit</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * We need to take vr + 1 if vr is outside bounds or we need to round
		 * up.
		 */</comment>
		<expr_stmt><expr><name>output</name> <operator>=</operator> <name>vr</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>vr</name> <operator>==</operator> <name>vm</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>acceptBounds</name> <operator>||</operator> <operator>!</operator><name>vmIsTrailingZeros</name><operator>)</operator><operator>)</operator> <operator>||</operator> <name>lastRemovedDigit</name> <operator>&gt;=</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/*
		 * Specialized for the common case (~99.3%). Percentages below are
		 * relative to this.
		 */</comment>
		<decl_stmt><decl><type><name>bool</name></type>		<name>roundUp</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint64</name></type> <name>vpDiv100</name> <init>= <expr><call><name>div100</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint64</name></type> <name>vmDiv100</name> <init>= <expr><call><name>div100</name><argument_list>(<argument><expr><name>vm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>vpDiv100</name> <operator>&gt;</operator> <name>vmDiv100</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Optimization:remove two digits at a time(~86.2 %). */</comment>
			<decl_stmt><decl><type><specifier>const</specifier> <name>uint64</name></type> <name>vrDiv100</name> <init>= <expr><call><name>div100</name><argument_list>(<argument><expr><name>vr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>vrMod100</name> <init>= <expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name>vr</name> <operator>-</operator> <literal type="number">100</literal> <operator>*</operator> <name>vrDiv100</name><operator>)</operator></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name>roundUp</name> <operator>=</operator> <name>vrMod100</name> <operator>&gt;=</operator> <literal type="number">50</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>vr</name> <operator>=</operator> <name>vrDiv100</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>vp</name> <operator>=</operator> <name>vpDiv100</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>vm</name> <operator>=</operator> <name>vmDiv100</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>removed</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*----
		 * Loop iterations below (approximately), without optimization
		 * above:
		 *
		 * 0: 0.03%, 1: 13.8%, 2: 70.6%, 3: 14.0%, 4: 1.40%, 5: 0.14%,
		 * 6+: 0.02%
		 *
		 * Loop iterations below (approximately), with optimization
		 * above:
		 *
		 * 0: 70.6%, 1: 27.8%, 2: 1.40%, 3: 0.14%, 4+: 0.02%
		 *----
		 */</comment>
		<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><specifier>const</specifier> <name>uint64</name></type> <name>vpDiv10</name> <init>= <expr><call><name>div10</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier>const</specifier> <name>uint64</name></type> <name>vmDiv10</name> <init>= <expr><call><name>div10</name><argument_list>(<argument><expr><name>vm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>vpDiv10</name> <operator>&lt;=</operator> <name>vmDiv10</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>

			<decl_stmt><decl><type><specifier>const</specifier> <name>uint64</name></type> <name>vrDiv10</name> <init>= <expr><call><name>div10</name><argument_list>(<argument><expr><name>vr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>vrMod10</name> <init>= <expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name>vr</name> <operator>-</operator> <literal type="number">10</literal> <operator>*</operator> <name>vrDiv10</name><operator>)</operator></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name>roundUp</name> <operator>=</operator> <name>vrMod10</name> <operator>&gt;=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>vr</name> <operator>=</operator> <name>vrDiv10</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>vp</name> <operator>=</operator> <name>vpDiv10</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>vm</name> <operator>=</operator> <name>vmDiv10</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>++</operator><name>removed</name></expr>;</expr_stmt>
		</block_content>}</block></for>

		<comment type="block">/*
		 * We need to take vr + 1 if vr is outside bounds or we need to round
		 * up.
		 */</comment>
		<expr_stmt><expr><name>output</name> <operator>=</operator> <name>vr</name> <operator>+</operator> <operator>(</operator><name>vr</name> <operator>==</operator> <name>vm</name> <operator>||</operator> <name>roundUp</name><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>int32</name></type> <name>exp</name> <init>= <expr><name>e10</name> <operator>+</operator> <name>removed</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>floating_decimal_64</name></type> <name>fd</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>fd</name><operator>.</operator><name>exponent</name></name> <operator>=</operator> <name>exp</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fd</name><operator>.</operator><name>mantissa</name></name> <operator>=</operator> <name>output</name></expr>;</expr_stmt>
	<return>return <expr><name>fd</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>to_chars_df</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>floating_decimal_64</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>olength</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Step 5: Print the decimal representation. */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>uint64</name></type>		<name>output</name> <init>= <expr><name><name>v</name><operator>.</operator><name>mantissa</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>exp</name> <init>= <expr><name><name>v</name><operator>.</operator><name>exponent</name></name></expr></init></decl>;</decl_stmt>

	<comment type="block">/*----
	 * On entry, mantissa * 10^exp is the result to be output.
	 * Caller has already done the - sign if needed.
	 *
	 * We want to insert the point somewhere depending on the output length
	 * and exponent, which might mean adding zeros:
	 *
	 *            exp  | format
	 *            1+   |  ddddddddd000000
	 *            0    |  ddddddddd
	 *  -1 .. -len+1   |  dddddddd.d to d.ddddddddd
	 *  -len ...       |  0.ddddddddd to 0.000dddddd
	 */</comment>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>nexp</name> <init>= <expr><name>exp</name> <operator>+</operator> <name>olength</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>nexp</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* -nexp is number of 0s to add after '.' */</comment>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>nexp</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* 0.000ddddd */</comment>
		<expr_stmt><expr><name>index</name> <operator>=</operator> <literal type="number">2</literal> <operator>-</operator> <name>nexp</name></expr>;</expr_stmt>
		<comment type="block">/* won't need more than this many 0s */</comment>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"0.000000"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>exp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * dddd.dddd; leave space at the start and move the '.' in after
		 */</comment>
		<expr_stmt><expr><name>index</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/*
		 * We can save some code later by pre-filling with zeros. We know that
		 * there can be no more than 16 output digits in this form, otherwise
		 * we would not choose fixed-point output.
		 */</comment>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>exp</name> <operator>&lt;</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <name>exp</name> <operator>+</operator> <name>olength</name> <operator>&lt;=</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="char">'0'</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/*
	 * We prefer 32-bit operations, even on 64-bit platforms. We have at most
	 * 17 digits, and uint32 can store 9 digits. If output doesn't fit into
	 * uint32, we cut off 8 digits, so the rest will fit into uint32.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>output</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Expensive 64-bit division. */</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint64</name></type> <name>q</name> <init>= <expr><call><name>div1e8</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint32</name></type>		<name>output2</name> <init>= <expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name>output</name> <operator>-</operator> <literal type="number">100000000</literal> <operator>*</operator> <name>q</name><operator>)</operator></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>c</name> <init>= <expr><name>output2</name> <operator>%</operator> <literal type="number">10000</literal></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>output</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>output2</name> <operator>/=</operator> <literal type="number">10000</literal></expr>;</expr_stmt>

		<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>d</name> <init>= <expr><name>output2</name> <operator>%</operator> <literal type="number">10000</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>c0</name> <init>= <expr><operator>(</operator><name>c</name> <operator>%</operator> <literal type="number">100</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>c1</name> <init>= <expr><operator>(</operator><name>c</name> <operator>/</operator> <literal type="number">100</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>d0</name> <init>= <expr><operator>(</operator><name>d</name> <operator>%</operator> <literal type="number">100</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>d1</name> <init>= <expr><operator>(</operator><name>d</name> <operator>/</operator> <literal type="number">100</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>result</name> <operator>+</operator> <name>index</name> <operator>+</operator> <name>olength</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>DIGIT_TABLE</name> <operator>+</operator> <name>c0</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>result</name> <operator>+</operator> <name>index</name> <operator>+</operator> <name>olength</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>DIGIT_TABLE</name> <operator>+</operator> <name>c1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>result</name> <operator>+</operator> <name>index</name> <operator>+</operator> <name>olength</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><name>DIGIT_TABLE</name> <operator>+</operator> <name>d0</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>result</name> <operator>+</operator> <name>index</name> <operator>+</operator> <name>olength</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>DIGIT_TABLE</name> <operator>+</operator> <name>d1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>uint32</name></type>		<name>output2</name> <init>= <expr><operator>(</operator><name>uint32</name><operator>)</operator> <name>output</name></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>output2</name> <operator>&gt;=</operator> <literal type="number">10000</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>c</name> <init>= <expr><name>output2</name> <operator>-</operator> <literal type="number">10000</literal> <operator>*</operator> <operator>(</operator><name>output2</name> <operator>/</operator> <literal type="number">10000</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>c0</name> <init>= <expr><operator>(</operator><name>c</name> <operator>%</operator> <literal type="number">100</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>c1</name> <init>= <expr><operator>(</operator><name>c</name> <operator>/</operator> <literal type="number">100</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>output2</name> <operator>/=</operator> <literal type="number">10000</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>result</name> <operator>+</operator> <name>index</name> <operator>+</operator> <name>olength</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>DIGIT_TABLE</name> <operator>+</operator> <name>c0</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>result</name> <operator>+</operator> <name>index</name> <operator>+</operator> <name>olength</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>DIGIT_TABLE</name> <operator>+</operator> <name>c1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	</block_content>}</block></while>
	<if_stmt><if>if <condition>(<expr><name>output2</name> <operator>&gt;=</operator> <literal type="number">100</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>c</name> <init>= <expr><operator>(</operator><name>output2</name> <operator>%</operator> <literal type="number">100</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>output2</name> <operator>/=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>result</name> <operator>+</operator> <name>index</name> <operator>+</operator> <name>olength</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>DIGIT_TABLE</name> <operator>+</operator> <name>c</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>output2</name> <operator>&gt;=</operator> <literal type="number">10</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>c</name> <init>= <expr><name>output2</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>result</name> <operator>+</operator> <name>index</name> <operator>+</operator> <name>olength</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>DIGIT_TABLE</name> <operator>+</operator> <name>c</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name><name>result</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><literal type="char">'0'</literal> <operator>+</operator> <name>output2</name><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * nexp is 1..15 here, representing the number of digits before the
		 * point. A value of 16 is not possible because we switch to
		 * scientific notation when the display exponent reaches 15.
		 */</comment>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>nexp</name> <operator>&lt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* gcc only seems to want to optimize memmove for small 2^n */</comment>
		<if_stmt><if>if <condition>(<expr><name>nexp</name> <operator>&amp;</operator> <literal type="number">8</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>result</name> <operator>+</operator> <name>index</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>result</name> <operator>+</operator> <name>index</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>index</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>nexp</name> <operator>&amp;</operator> <literal type="number">4</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>result</name> <operator>+</operator> <name>index</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>result</name> <operator>+</operator> <name>index</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>index</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>nexp</name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>result</name> <operator>+</operator> <name>index</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>result</name> <operator>+</operator> <name>index</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>index</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>nexp</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>result</name><index>[<expr><name>index</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>result</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>result</name><index>[<expr><name>nexp</name></expr>]</index></name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>index</name> <operator>=</operator> <name>olength</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>exp</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* we supplied the trailing zeros earlier, now just set the length. */</comment>
		<expr_stmt><expr><name>index</name> <operator>=</operator> <name>olength</name> <operator>+</operator> <name>exp</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>index</name> <operator>=</operator> <name>olength</name> <operator>+</operator> <operator>(</operator><literal type="number">2</literal> <operator>-</operator> <name>nexp</name><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>index</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>to_chars</name><parameter_list>(<parameter><decl><type><name>floating_decimal_64</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Step 5: Print the decimal representation. */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>uint64</name></type>		<name>output</name> <init>= <expr><name><name>v</name><operator>.</operator><name>mantissa</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>olength</name> <init>= <expr><call><name>decimalLength</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>exp</name> <init>= <expr><name><name>v</name><operator>.</operator><name>exponent</name></name> <operator>+</operator> <name>olength</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>sign</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>result</name><index>[<expr><name>index</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * The thresholds for fixed-point output are chosen to match printf
	 * defaults. Beware that both the code of to_chars_df and the value of
	 * DOUBLE_SHORTEST_DECIMAL_LEN are sensitive to these thresholds.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>exp</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>exp</name> <operator>&lt;</operator> <literal type="number">15</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>to_chars_df</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>olength</name></expr></argument>, <argument><expr><name>result</name> <operator>+</operator> <name>index</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>sign</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * If v.exponent is exactly 0, we might have reached here via the small
	 * integer fast path, in which case v.mantissa might contain trailing
	 * (decimal) zeros. For scientific notation we need to move these zeros
	 * into the exponent. (For fixed point this doesn't matter, which is why
	 * we do this here rather than above.)
	 *
	 * Since we already calculated the display exponent (exp) above based on
	 * the old decimal length, that value does not change here. Instead, we
	 * just reduce the display length for each digit removed.
	 *
	 * If we didn't get here via the fast path, the raw exponent will not
	 * usually be 0, and there will be no trailing zeros, so we pay no more
	 * than one div10/multiply extra cost. We claw back half of that by
	 * checking for divisibility by 2 before dividing by 10.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>.</operator><name>exponent</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<while>while <condition>(<expr><operator>(</operator><name>output</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><specifier>const</specifier> <name>uint64</name></type> <name>q</name> <init>= <expr><call><name>div10</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>r</name> <init>= <expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name>output</name> <operator>-</operator> <literal type="number">10</literal> <operator>*</operator> <name>q</name><operator>)</operator></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>output</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>--</operator><name>olength</name></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*----
	 * Print the decimal digits.
	 *
	 * The following code is equivalent to:
	 *
	 * for (uint32 i = 0; i &lt; olength - 1; ++i) {
	 *   const uint32 c = output % 10; output /= 10;
	 *   result[index + olength - i] = (char) ('0' + c);
	 * }
	 * result[index] = '0' + output % 10;
	 *----
	 */</comment>

	<decl_stmt><decl><type><name>uint32</name></type>		<name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * We prefer 32-bit operations, even on 64-bit platforms. We have at most
	 * 17 digits, and uint32 can store 9 digits. If output doesn't fit into
	 * uint32, we cut off 8 digits, so the rest will fit into uint32.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>output</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Expensive 64-bit division. */</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint64</name></type> <name>q</name> <init>= <expr><call><name>div1e8</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint32</name></type>		<name>output2</name> <init>= <expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name>output</name> <operator>-</operator> <literal type="number">100000000</literal> <operator>*</operator> <name>q</name><operator>)</operator></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>output</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>

		<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>c</name> <init>= <expr><name>output2</name> <operator>%</operator> <literal type="number">10000</literal></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>output2</name> <operator>/=</operator> <literal type="number">10000</literal></expr>;</expr_stmt>

		<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>d</name> <init>= <expr><name>output2</name> <operator>%</operator> <literal type="number">10000</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>c0</name> <init>= <expr><operator>(</operator><name>c</name> <operator>%</operator> <literal type="number">100</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>c1</name> <init>= <expr><operator>(</operator><name>c</name> <operator>/</operator> <literal type="number">100</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>d0</name> <init>= <expr><operator>(</operator><name>d</name> <operator>%</operator> <literal type="number">100</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>d1</name> <init>= <expr><operator>(</operator><name>d</name> <operator>/</operator> <literal type="number">100</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>result</name> <operator>+</operator> <name>index</name> <operator>+</operator> <name>olength</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>DIGIT_TABLE</name> <operator>+</operator> <name>c0</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>result</name> <operator>+</operator> <name>index</name> <operator>+</operator> <name>olength</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>DIGIT_TABLE</name> <operator>+</operator> <name>c1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>result</name> <operator>+</operator> <name>index</name> <operator>+</operator> <name>olength</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name>DIGIT_TABLE</name> <operator>+</operator> <name>d0</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>result</name> <operator>+</operator> <name>index</name> <operator>+</operator> <name>olength</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><name>DIGIT_TABLE</name> <operator>+</operator> <name>d1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>uint32</name></type>		<name>output2</name> <init>= <expr><operator>(</operator><name>uint32</name><operator>)</operator> <name>output</name></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>output2</name> <operator>&gt;=</operator> <literal type="number">10000</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>c</name> <init>= <expr><name>output2</name> <operator>-</operator> <literal type="number">10000</literal> <operator>*</operator> <operator>(</operator><name>output2</name> <operator>/</operator> <literal type="number">10000</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>output2</name> <operator>/=</operator> <literal type="number">10000</literal></expr>;</expr_stmt>

		<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>c0</name> <init>= <expr><operator>(</operator><name>c</name> <operator>%</operator> <literal type="number">100</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>c1</name> <init>= <expr><operator>(</operator><name>c</name> <operator>/</operator> <literal type="number">100</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>result</name> <operator>+</operator> <name>index</name> <operator>+</operator> <name>olength</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>DIGIT_TABLE</name> <operator>+</operator> <name>c0</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>result</name> <operator>+</operator> <name>index</name> <operator>+</operator> <name>olength</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>DIGIT_TABLE</name> <operator>+</operator> <name>c1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	</block_content>}</block></while>
	<if_stmt><if>if <condition>(<expr><name>output2</name> <operator>&gt;=</operator> <literal type="number">100</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>c</name> <init>= <expr><operator>(</operator><name>output2</name> <operator>%</operator> <literal type="number">100</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>output2</name> <operator>/=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>result</name> <operator>+</operator> <name>index</name> <operator>+</operator> <name>olength</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>DIGIT_TABLE</name> <operator>+</operator> <name>c</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>output2</name> <operator>&gt;=</operator> <literal type="number">10</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>c</name> <init>= <expr><name>output2</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

		<comment type="block">/*
		 * We can't use memcpy here: the decimal dot goes between these two
		 * digits.
		 */</comment>
		<expr_stmt><expr><name><name>result</name><index>[<expr><name>index</name> <operator>+</operator> <name>olength</name> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name><name>DIGIT_TABLE</name><index>[<expr><name>c</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>result</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <name><name>DIGIT_TABLE</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name><name>result</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><literal type="char">'0'</literal> <operator>+</operator> <name>output2</name><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* Print decimal point if needed. */</comment>
	<if_stmt><if>if <condition>(<expr><name>olength</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>result</name><index>[<expr><name>index</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>index</name> <operator>+=</operator> <name>olength</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><operator>++</operator><name>index</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* Print the exponent. */</comment>
	<expr_stmt><expr><name><name>result</name><index>[<expr><name>index</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'e'</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>exp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>result</name><index>[<expr><name>index</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>exp</name> <operator>=</operator> <operator>-</operator><name>exp</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>result</name><index>[<expr><name>index</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'+'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>exp</name> <operator>&gt;=</operator> <literal type="number">100</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>int32</name></type> <name>c</name> <init>= <expr><name>exp</name> <operator>%</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>result</name> <operator>+</operator> <name>index</name></expr></argument>, <argument><expr><name>DIGIT_TABLE</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>exp</name> <operator>/</operator> <literal type="number">10</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>result</name><index>[<expr><name>index</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><literal type="char">'0'</literal> <operator>+</operator> <name>c</name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>index</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>result</name> <operator>+</operator> <name>index</name></expr></argument>, <argument><expr><name>DIGIT_TABLE</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>exp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>index</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>index</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>
<name>d2d_small_int</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint64</name></type> <name>ieeeMantissa</name></decl></parameter>,
			  <parameter><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>ieeeExponent</name></decl></parameter>,
			  <parameter><decl><type><name>floating_decimal_64</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int32</name></type> <name>e2</name> <init>= <expr><operator>(</operator><name>int32</name><operator>)</operator> <name>ieeeExponent</name> <operator>-</operator> <name>DOUBLE_BIAS</name> <operator>-</operator> <name>DOUBLE_MANTISSA_BITS</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * Avoid using multiple "return false;" here since it tends to provoke the
	 * compiler into inlining multiple copies of d2d, which is undesirable.
	 */</comment>

	<if_stmt><if>if <condition>(<expr><name>e2</name> <operator>&gt;=</operator> <operator>-</operator><name>DOUBLE_MANTISSA_BITS</name> <operator>&amp;&amp;</operator> <name>e2</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*----
		 * Since 2^52 &lt;= m2 &lt; 2^53 and 0 &lt;= -e2 &lt;= 52:
		 *   1 &lt;= f = m2 / 2^-e2 &lt; 2^53.
		 *
		 * Test if the lower -e2 bits of the significand are 0, i.e. whether
		 * the fraction is 0. We can use ieeeMantissa here, since the implied
		 * 1 bit can never be tested by this; the implied 1 can only be part
		 * of a fraction if e2 &lt; -DOUBLE_MANTISSA_BITS which we already
		 * checked. (e.g. 0.5 gives ieeeMantissa == 0 and e2 == -53)
		 */</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint64</name></type> <name>mask</name> <init>= <expr><operator>(</operator><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>-</operator><name>e2</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint64</name></type> <name>fraction</name> <init>= <expr><name>ieeeMantissa</name> <operator>&amp;</operator> <name>mask</name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>fraction</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*----
			 * f is an integer in the range [1, 2^53).
			 * Note: mantissa might contain trailing (decimal) 0's.
			 * Note: since 2^53 &lt; 10^16, there is no need to adjust
			 * decimalLength().
			 */</comment>
			<decl_stmt><decl><type><specifier>const</specifier> <name>uint64</name></type> <name>m2</name> <init>= <expr><operator>(</operator><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>DOUBLE_MANTISSA_BITS</name><operator>)</operator> <operator>|</operator> <name>ieeeMantissa</name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>mantissa</name></name> <operator>=</operator> <name>m2</name> <operator>&gt;&gt;</operator> <operator>-</operator><name>e2</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>exponent</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<return>return <expr><name>true</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Store the shortest decimal representation of the given double as an
 * UNTERMINATED string in the caller's supplied buffer (which must be at least
 * DOUBLE_SHORTEST_DECIMAL_LEN-1 bytes long).
 *
 * Returns the number of bytes stored.
 */</comment>
<function><type><name>int</name></type>
<name>double_to_shortest_decimal_bufn</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * Step 1: Decode the floating-point number, and unify normalized and
	 * subnormal cases.
	 */</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>uint64</name></type> <name>bits</name> <init>= <expr><call><name>double_to_bits</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Decode bits into sign, mantissa, and exponent. */</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type>	<name>ieeeSign</name> <init>= <expr><operator>(</operator><operator>(</operator><name>bits</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>DOUBLE_MANTISSA_BITS</name> <operator>+</operator> <name>DOUBLE_EXPONENT_BITS</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>uint64</name></type> <name>ieeeMantissa</name> <init>= <expr><name>bits</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>DOUBLE_MANTISSA_BITS</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name></type> <name>ieeeExponent</name> <init>= <expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>bits</name> <operator>&gt;&gt;</operator> <name>DOUBLE_MANTISSA_BITS</name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <name>DOUBLE_EXPONENT_BITS</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Case distinction; exit early for the easy cases. */</comment>
	<if_stmt><if>if <condition>(<expr><name>ieeeExponent</name> <operator>==</operator> <operator>(</operator><operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <name>DOUBLE_EXPONENT_BITS</name><operator>)</operator> <operator>-</operator> <literal type="number">1u</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ieeeExponent</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ieeeMantissa</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><call><name>copy_special_str</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>ieeeSign</name></expr></argument>, <argument><expr><operator>(</operator><name>ieeeExponent</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>ieeeMantissa</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>floating_decimal_64</name></type> <name>v</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type>	<name>isSmallInt</name> <init>= <expr><call><name>d2d_small_int</name><argument_list>(<argument><expr><name>ieeeMantissa</name></expr></argument>, <argument><expr><name>ieeeExponent</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isSmallInt</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>d2d</name><argument_list>(<argument><expr><name>ieeeMantissa</name></expr></argument>, <argument><expr><name>ieeeExponent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><call><name>to_chars</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>ieeeSign</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Store the shortest decimal representation of the given double as a
 * null-terminated string in the caller's supplied buffer (which must be at
 * least DOUBLE_SHORTEST_DECIMAL_LEN bytes long).
 *
 * Returns the string length.
 */</comment>
<function><type><name>int</name></type>
<name>double_to_shortest_decimal_buf</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type>	<name>index</name> <init>= <expr><call><name>double_to_shortest_decimal_bufn</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Terminate the string. */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>index</name> <operator>&lt;</operator> <name>DOUBLE_SHORTEST_DECIMAL_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	<return>return <expr><name>index</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Return the shortest decimal representation as a null-terminated palloc'd
 * string (outside the backend, uses malloc() instead).
 *
 * Caller is responsible for freeing the result.
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>double_to_shortest_decimal</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier><specifier>const</specifier></type> <name>result</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>DOUBLE_SHORTEST_DECIMAL_LEN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>double_to_shortest_decimal_buf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
</unit>
