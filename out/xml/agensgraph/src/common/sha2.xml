<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/src/common/sha2.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * sha2.c
 *	  Set of SHA functions for SHA-224, SHA-256, SHA-384 and SHA-512.
 *
 * This is the set of in-core functions used when there are no other
 * alternative options like OpenSSL.
 *
 * Portions Copyright (c) 2016-2020, PostgreSQL Global Development Group
 *
 * IDENTIFICATION
 *	  src/common/sha2.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<comment type="block">/*	$OpenBSD: sha2.c,v 1.6 2004/05/03 02:57:36 millert Exp $	*/</comment>
<comment type="block">/*
 * FILE:	sha2.c
 * AUTHOR:	Aaron D. Gifford &lt;me@aarongifford.com&gt;
 *
 * Copyright (c) 2000-2001, Aaron D. Gifford
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *	  notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *	  notice, this list of conditions and the following disclaimer in the
 *	  documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of contributors
 *	  may be used to endorse or promote products derived from this software
 *	  without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTOR(S) ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTOR(S) BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * $From: sha2.c,v 1.1 2001/11/08 00:01:51 adg Exp adg $
 */</comment>


<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FRONTEND</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/sha2.h"</cpp:file></cpp:include>

<comment type="block">/*
 * UNROLLED TRANSFORM LOOP NOTE:
 * You can define SHA2_UNROLL_TRANSFORM to use the unrolled transform
 * loop version for the hash transform rounds (defined using macros
 * later in this file).  Either define on the command line, for example:
 *
 *	 cc -DSHA2_UNROLL_TRANSFORM -o sha2 sha2.c sha2prog.c
 *
 * or define below:
 *
 *	 #define SHA2_UNROLL_TRANSFORM
 *
 */</comment>

<comment type="block" format="doxygen">/*** SHA-256/384/512 Various Length Definitions ***********************/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PG_SHA256_SHORT_BLOCK_LENGTH</name></cpp:macro>	<cpp:value>(PG_SHA256_BLOCK_LENGTH - 8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PG_SHA384_SHORT_BLOCK_LENGTH</name></cpp:macro>	<cpp:value>(PG_SHA384_BLOCK_LENGTH - 16)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PG_SHA512_SHORT_BLOCK_LENGTH</name></cpp:macro>	<cpp:value>(PG_SHA512_BLOCK_LENGTH - 16)</cpp:value></cpp:define>

<comment type="block" format="doxygen">/*** ENDIAN REVERSAL MACROS *******************************************/</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WORDS_BIGENDIAN</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REVERSE32</name><parameter_list>(<parameter><type><name>w</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>{ \
	uint32 tmp = (w); \
	tmp = (tmp &gt;&gt; 16) | (tmp &lt;&lt; 16); \
	(x) = ((tmp &amp; 0xff00ff00UL) &gt;&gt; 8) | ((tmp &amp; 0x00ff00ffUL) &lt;&lt; 8); \
}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REVERSE64</name><parameter_list>(<parameter><type><name>w</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>{ \
	uint64 tmp = (w); \
	tmp = (tmp &gt;&gt; 32) | (tmp &lt;&lt; 32); \
	tmp = ((tmp &amp; 0xff00ff00ff00ff00ULL) &gt;&gt; 8) | \
		  ((tmp &amp; 0x00ff00ff00ff00ffULL) &lt;&lt; 8); \
	(x) = ((tmp &amp; 0xffff0000ffff0000ULL) &gt;&gt; 16) | \
		  ((tmp &amp; 0x0000ffff0000ffffULL) &lt;&lt; 16); \
}</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* not bigendian */</comment>

<comment type="block">/*
 * Macro for incrementally adding the unsigned 64-bit integer n to the
 * unsigned 128-bit integer (represented using a two-element array of
 * 64-bit words):
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDINC128</name><parameter_list>(<parameter><type><name>w</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>{ \
	(w)[0] += (uint64)(n); \
	if ((w)[0] &lt; (n)) { \
		(w)[1]++; \
	} \
}</cpp:value></cpp:define>

<comment type="block" format="doxygen">/*** THE SIX LOGICAL FUNCTIONS ****************************************/</comment>
<comment type="block">/*
 * Bit shifting and rotation (used by the six SHA-XYZ logical functions:
 *
 *	 NOTE:	The naming of R and S appears backwards here (R is a SHIFT and
 *	 S is a ROTATION) because the SHA-256/384/512 description document
 *	 (see http://www.iwar.org.uk/comsec/resources/cipher/sha256-384-512.pdf)
 *	 uses this same "backwards" definition.
 */</comment>
<comment type="block">/* Shift-right (used in SHA-256, SHA-384, and SHA-512): */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R</name><parameter_list>(<parameter><type><name>b</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>((x) &gt;&gt; (b))</cpp:value></cpp:define>
<comment type="block">/* 32-bit Rotate-right (used in SHA-256): */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S32</name><parameter_list>(<parameter><type><name>b</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>(((x) &gt;&gt; (b)) | ((x) &lt;&lt; (32 - (b))))</cpp:value></cpp:define>
<comment type="block">/* 64-bit Rotate-right (used in SHA-384 and SHA-512): */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S64</name><parameter_list>(<parameter><type><name>b</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>(((x) &gt;&gt; (b)) | ((x) &lt;&lt; (64 - (b))))</cpp:value></cpp:define>

<comment type="block">/* Two of six logical functions used in SHA-256, SHA-384, and SHA-512: */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ch</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>(((x) &amp; (y)) ^ ((~(x)) &amp; (z)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Maj</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>(((x) &amp; (y)) ^ ((x) &amp; (z)) ^ ((y) &amp; (z)))</cpp:value></cpp:define>

<comment type="block">/* Four of six logical functions used in SHA-256: */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Sigma0_256</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>(S32(2,  (x)) ^ S32(13, (x)) ^ S32(22, (x)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Sigma1_256</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>(S32(6,  (x)) ^ S32(11, (x)) ^ S32(25, (x)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sigma0_256</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>(S32(7,  (x)) ^ S32(18, (x)) ^ R(3 ,   (x)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sigma1_256</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>(S32(17, (x)) ^ S32(19, (x)) ^ R(10,   (x)))</cpp:value></cpp:define>

<comment type="block">/* Four of six logical functions used in SHA-384 and SHA-512: */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Sigma0_512</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>(S64(28, (x)) ^ S64(34, (x)) ^ S64(39, (x)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Sigma1_512</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>(S64(14, (x)) ^ S64(18, (x)) ^ S64(41, (x)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sigma0_512</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>(S64( 1, (x)) ^ S64( 8, (x)) ^ R( 7,   (x)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sigma1_512</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>(S64(19, (x)) ^ S64(61, (x)) ^ R( 6,   (x)))</cpp:value></cpp:define>

<comment type="block" format="doxygen">/*** INTERNAL FUNCTION PROTOTYPES *************************************/</comment>
<comment type="block">/* NOTE: These should not be accessed directly from outside this
 * library -- they are intended for private internal visibility/use
 * only.
 */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SHA512_Last</name><parameter_list>(<parameter><decl><type><name>pg_sha512_ctx</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SHA256_Transform</name><parameter_list>(<parameter><decl><type><name>pg_sha256_ctx</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SHA512_Transform</name><parameter_list>(<parameter><decl><type><name>pg_sha512_ctx</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/*** SHA-XYZ INITIAL HASH VALUES AND CONSTANTS ************************/</comment>
<comment type="block">/* Hash constant words K for SHA-256: */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32</name></type> <name><name>K256</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{
	<expr><literal type="number">0x428a2f98UL</literal></expr>, <expr><literal type="number">0x71374491UL</literal></expr>, <expr><literal type="number">0xb5c0fbcfUL</literal></expr>, <expr><literal type="number">0xe9b5dba5UL</literal></expr>,
	<expr><literal type="number">0x3956c25bUL</literal></expr>, <expr><literal type="number">0x59f111f1UL</literal></expr>, <expr><literal type="number">0x923f82a4UL</literal></expr>, <expr><literal type="number">0xab1c5ed5UL</literal></expr>,
	<expr><literal type="number">0xd807aa98UL</literal></expr>, <expr><literal type="number">0x12835b01UL</literal></expr>, <expr><literal type="number">0x243185beUL</literal></expr>, <expr><literal type="number">0x550c7dc3UL</literal></expr>,
	<expr><literal type="number">0x72be5d74UL</literal></expr>, <expr><literal type="number">0x80deb1feUL</literal></expr>, <expr><literal type="number">0x9bdc06a7UL</literal></expr>, <expr><literal type="number">0xc19bf174UL</literal></expr>,
	<expr><literal type="number">0xe49b69c1UL</literal></expr>, <expr><literal type="number">0xefbe4786UL</literal></expr>, <expr><literal type="number">0x0fc19dc6UL</literal></expr>, <expr><literal type="number">0x240ca1ccUL</literal></expr>,
	<expr><literal type="number">0x2de92c6fUL</literal></expr>, <expr><literal type="number">0x4a7484aaUL</literal></expr>, <expr><literal type="number">0x5cb0a9dcUL</literal></expr>, <expr><literal type="number">0x76f988daUL</literal></expr>,
	<expr><literal type="number">0x983e5152UL</literal></expr>, <expr><literal type="number">0xa831c66dUL</literal></expr>, <expr><literal type="number">0xb00327c8UL</literal></expr>, <expr><literal type="number">0xbf597fc7UL</literal></expr>,
	<expr><literal type="number">0xc6e00bf3UL</literal></expr>, <expr><literal type="number">0xd5a79147UL</literal></expr>, <expr><literal type="number">0x06ca6351UL</literal></expr>, <expr><literal type="number">0x14292967UL</literal></expr>,
	<expr><literal type="number">0x27b70a85UL</literal></expr>, <expr><literal type="number">0x2e1b2138UL</literal></expr>, <expr><literal type="number">0x4d2c6dfcUL</literal></expr>, <expr><literal type="number">0x53380d13UL</literal></expr>,
	<expr><literal type="number">0x650a7354UL</literal></expr>, <expr><literal type="number">0x766a0abbUL</literal></expr>, <expr><literal type="number">0x81c2c92eUL</literal></expr>, <expr><literal type="number">0x92722c85UL</literal></expr>,
	<expr><literal type="number">0xa2bfe8a1UL</literal></expr>, <expr><literal type="number">0xa81a664bUL</literal></expr>, <expr><literal type="number">0xc24b8b70UL</literal></expr>, <expr><literal type="number">0xc76c51a3UL</literal></expr>,
	<expr><literal type="number">0xd192e819UL</literal></expr>, <expr><literal type="number">0xd6990624UL</literal></expr>, <expr><literal type="number">0xf40e3585UL</literal></expr>, <expr><literal type="number">0x106aa070UL</literal></expr>,
	<expr><literal type="number">0x19a4c116UL</literal></expr>, <expr><literal type="number">0x1e376c08UL</literal></expr>, <expr><literal type="number">0x2748774cUL</literal></expr>, <expr><literal type="number">0x34b0bcb5UL</literal></expr>,
	<expr><literal type="number">0x391c0cb3UL</literal></expr>, <expr><literal type="number">0x4ed8aa4aUL</literal></expr>, <expr><literal type="number">0x5b9cca4fUL</literal></expr>, <expr><literal type="number">0x682e6ff3UL</literal></expr>,
	<expr><literal type="number">0x748f82eeUL</literal></expr>, <expr><literal type="number">0x78a5636fUL</literal></expr>, <expr><literal type="number">0x84c87814UL</literal></expr>, <expr><literal type="number">0x8cc70208UL</literal></expr>,
	<expr><literal type="number">0x90befffaUL</literal></expr>, <expr><literal type="number">0xa4506cebUL</literal></expr>, <expr><literal type="number">0xbef9a3f7UL</literal></expr>, <expr><literal type="number">0xc67178f2UL</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Initial hash value H for SHA-224: */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32</name></type> <name><name>sha224_initial_hash_value</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{
	<expr><literal type="number">0xc1059ed8UL</literal></expr>,
	<expr><literal type="number">0x367cd507UL</literal></expr>,
	<expr><literal type="number">0x3070dd17UL</literal></expr>,
	<expr><literal type="number">0xf70e5939UL</literal></expr>,
	<expr><literal type="number">0xffc00b31UL</literal></expr>,
	<expr><literal type="number">0x68581511UL</literal></expr>,
	<expr><literal type="number">0x64f98fa7UL</literal></expr>,
	<expr><literal type="number">0xbefa4fa4UL</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Initial hash value H for SHA-256: */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32</name></type> <name><name>sha256_initial_hash_value</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{
	<expr><literal type="number">0x6a09e667UL</literal></expr>,
	<expr><literal type="number">0xbb67ae85UL</literal></expr>,
	<expr><literal type="number">0x3c6ef372UL</literal></expr>,
	<expr><literal type="number">0xa54ff53aUL</literal></expr>,
	<expr><literal type="number">0x510e527fUL</literal></expr>,
	<expr><literal type="number">0x9b05688cUL</literal></expr>,
	<expr><literal type="number">0x1f83d9abUL</literal></expr>,
	<expr><literal type="number">0x5be0cd19UL</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Hash constant words K for SHA-384 and SHA-512: */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint64</name></type> <name><name>K512</name><index>[<expr><literal type="number">80</literal></expr>]</index></name> <init>= <expr><block>{
	<expr><literal type="number">0x428a2f98d728ae22ULL</literal></expr>, <expr><literal type="number">0x7137449123ef65cdULL</literal></expr>,
	<expr><literal type="number">0xb5c0fbcfec4d3b2fULL</literal></expr>, <expr><literal type="number">0xe9b5dba58189dbbcULL</literal></expr>,
	<expr><literal type="number">0x3956c25bf348b538ULL</literal></expr>, <expr><literal type="number">0x59f111f1b605d019ULL</literal></expr>,
	<expr><literal type="number">0x923f82a4af194f9bULL</literal></expr>, <expr><literal type="number">0xab1c5ed5da6d8118ULL</literal></expr>,
	<expr><literal type="number">0xd807aa98a3030242ULL</literal></expr>, <expr><literal type="number">0x12835b0145706fbeULL</literal></expr>,
	<expr><literal type="number">0x243185be4ee4b28cULL</literal></expr>, <expr><literal type="number">0x550c7dc3d5ffb4e2ULL</literal></expr>,
	<expr><literal type="number">0x72be5d74f27b896fULL</literal></expr>, <expr><literal type="number">0x80deb1fe3b1696b1ULL</literal></expr>,
	<expr><literal type="number">0x9bdc06a725c71235ULL</literal></expr>, <expr><literal type="number">0xc19bf174cf692694ULL</literal></expr>,
	<expr><literal type="number">0xe49b69c19ef14ad2ULL</literal></expr>, <expr><literal type="number">0xefbe4786384f25e3ULL</literal></expr>,
	<expr><literal type="number">0x0fc19dc68b8cd5b5ULL</literal></expr>, <expr><literal type="number">0x240ca1cc77ac9c65ULL</literal></expr>,
	<expr><literal type="number">0x2de92c6f592b0275ULL</literal></expr>, <expr><literal type="number">0x4a7484aa6ea6e483ULL</literal></expr>,
	<expr><literal type="number">0x5cb0a9dcbd41fbd4ULL</literal></expr>, <expr><literal type="number">0x76f988da831153b5ULL</literal></expr>,
	<expr><literal type="number">0x983e5152ee66dfabULL</literal></expr>, <expr><literal type="number">0xa831c66d2db43210ULL</literal></expr>,
	<expr><literal type="number">0xb00327c898fb213fULL</literal></expr>, <expr><literal type="number">0xbf597fc7beef0ee4ULL</literal></expr>,
	<expr><literal type="number">0xc6e00bf33da88fc2ULL</literal></expr>, <expr><literal type="number">0xd5a79147930aa725ULL</literal></expr>,
	<expr><literal type="number">0x06ca6351e003826fULL</literal></expr>, <expr><literal type="number">0x142929670a0e6e70ULL</literal></expr>,
	<expr><literal type="number">0x27b70a8546d22ffcULL</literal></expr>, <expr><literal type="number">0x2e1b21385c26c926ULL</literal></expr>,
	<expr><literal type="number">0x4d2c6dfc5ac42aedULL</literal></expr>, <expr><literal type="number">0x53380d139d95b3dfULL</literal></expr>,
	<expr><literal type="number">0x650a73548baf63deULL</literal></expr>, <expr><literal type="number">0x766a0abb3c77b2a8ULL</literal></expr>,
	<expr><literal type="number">0x81c2c92e47edaee6ULL</literal></expr>, <expr><literal type="number">0x92722c851482353bULL</literal></expr>,
	<expr><literal type="number">0xa2bfe8a14cf10364ULL</literal></expr>, <expr><literal type="number">0xa81a664bbc423001ULL</literal></expr>,
	<expr><literal type="number">0xc24b8b70d0f89791ULL</literal></expr>, <expr><literal type="number">0xc76c51a30654be30ULL</literal></expr>,
	<expr><literal type="number">0xd192e819d6ef5218ULL</literal></expr>, <expr><literal type="number">0xd69906245565a910ULL</literal></expr>,
	<expr><literal type="number">0xf40e35855771202aULL</literal></expr>, <expr><literal type="number">0x106aa07032bbd1b8ULL</literal></expr>,
	<expr><literal type="number">0x19a4c116b8d2d0c8ULL</literal></expr>, <expr><literal type="number">0x1e376c085141ab53ULL</literal></expr>,
	<expr><literal type="number">0x2748774cdf8eeb99ULL</literal></expr>, <expr><literal type="number">0x34b0bcb5e19b48a8ULL</literal></expr>,
	<expr><literal type="number">0x391c0cb3c5c95a63ULL</literal></expr>, <expr><literal type="number">0x4ed8aa4ae3418acbULL</literal></expr>,
	<expr><literal type="number">0x5b9cca4f7763e373ULL</literal></expr>, <expr><literal type="number">0x682e6ff3d6b2b8a3ULL</literal></expr>,
	<expr><literal type="number">0x748f82ee5defb2fcULL</literal></expr>, <expr><literal type="number">0x78a5636f43172f60ULL</literal></expr>,
	<expr><literal type="number">0x84c87814a1f0ab72ULL</literal></expr>, <expr><literal type="number">0x8cc702081a6439ecULL</literal></expr>,
	<expr><literal type="number">0x90befffa23631e28ULL</literal></expr>, <expr><literal type="number">0xa4506cebde82bde9ULL</literal></expr>,
	<expr><literal type="number">0xbef9a3f7b2c67915ULL</literal></expr>, <expr><literal type="number">0xc67178f2e372532bULL</literal></expr>,
	<expr><literal type="number">0xca273eceea26619cULL</literal></expr>, <expr><literal type="number">0xd186b8c721c0c207ULL</literal></expr>,
	<expr><literal type="number">0xeada7dd6cde0eb1eULL</literal></expr>, <expr><literal type="number">0xf57d4f7fee6ed178ULL</literal></expr>,
	<expr><literal type="number">0x06f067aa72176fbaULL</literal></expr>, <expr><literal type="number">0x0a637dc5a2c898a6ULL</literal></expr>,
	<expr><literal type="number">0x113f9804bef90daeULL</literal></expr>, <expr><literal type="number">0x1b710b35131c471bULL</literal></expr>,
	<expr><literal type="number">0x28db77f523047d84ULL</literal></expr>, <expr><literal type="number">0x32caab7b40c72493ULL</literal></expr>,
	<expr><literal type="number">0x3c9ebe0a15c9bebcULL</literal></expr>, <expr><literal type="number">0x431d67c49c100d4cULL</literal></expr>,
	<expr><literal type="number">0x4cc5d4becb3e42b6ULL</literal></expr>, <expr><literal type="number">0x597f299cfc657e2aULL</literal></expr>,
	<expr><literal type="number">0x5fcb6fab3ad6faecULL</literal></expr>, <expr><literal type="number">0x6c44198c4a475817ULL</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Initial hash value H for SHA-384 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint64</name></type> <name><name>sha384_initial_hash_value</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{
	<expr><literal type="number">0xcbbb9d5dc1059ed8ULL</literal></expr>,
	<expr><literal type="number">0x629a292a367cd507ULL</literal></expr>,
	<expr><literal type="number">0x9159015a3070dd17ULL</literal></expr>,
	<expr><literal type="number">0x152fecd8f70e5939ULL</literal></expr>,
	<expr><literal type="number">0x67332667ffc00b31ULL</literal></expr>,
	<expr><literal type="number">0x8eb44a8768581511ULL</literal></expr>,
	<expr><literal type="number">0xdb0c2e0d64f98fa7ULL</literal></expr>,
	<expr><literal type="number">0x47b5481dbefa4fa4ULL</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Initial hash value H for SHA-512 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint64</name></type> <name><name>sha512_initial_hash_value</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{
	<expr><literal type="number">0x6a09e667f3bcc908ULL</literal></expr>,
	<expr><literal type="number">0xbb67ae8584caa73bULL</literal></expr>,
	<expr><literal type="number">0x3c6ef372fe94f82bULL</literal></expr>,
	<expr><literal type="number">0xa54ff53a5f1d36f1ULL</literal></expr>,
	<expr><literal type="number">0x510e527fade682d1ULL</literal></expr>,
	<expr><literal type="number">0x9b05688c2b3e6c1fULL</literal></expr>,
	<expr><literal type="number">0x1f83d9abfb41bd6bULL</literal></expr>,
	<expr><literal type="number">0x5be0cd19137e2179ULL</literal></expr>
}</block></expr></init></decl>;</decl_stmt>


<comment type="block" format="doxygen">/*** SHA-256: *********************************************************/</comment>
<function><type><name>void</name></type>
<name>pg_sha256_init</name><parameter_list>(<parameter><decl><type><name>pg_sha256_ctx</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>context</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>sha256_initial_hash_value</name></expr></argument>, <argument><expr><name>PG_SHA256_DIGEST_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PG_SHA256_BLOCK_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>bitcount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SHA2_UNROLL_TRANSFORM</name></cpp:ifdef>

<comment type="block">/* Unrolled SHA-256 round macros: */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROUND256_0_TO_15</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>f</name></type></parameter>,<parameter><type><name>g</name></type></parameter>,<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {					\
	W256[j] = (uint32)data[3] | ((uint32)data[2] &lt;&lt; 8) |		\
		((uint32)data[1] &lt;&lt; 16) | ((uint32)data[0] &lt;&lt; 24);		\
	data += 4;								\
	T1 = (h) + Sigma1_256((e)) + Ch((e), (f), (g)) + K256[j] + W256[j]; \
	(d) += T1;								\
	(h) = T1 + Sigma0_256((a)) + Maj((a), (b), (c));			\
	j++;									\
} while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROUND256</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>f</name></type></parameter>,<parameter><type><name>g</name></type></parameter>,<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {						\
	s0 = W256[(j+1)&amp;0x0f];							\
	s0 = sigma0_256(s0);							\
	s1 = W256[(j+14)&amp;0x0f];							\
	s1 = sigma1_256(s1);							\
	T1 = (h) + Sigma1_256((e)) + Ch((e), (f), (g)) + K256[j] +		\
		 (W256[j&amp;0x0f] += s1 + W256[(j+9)&amp;0x0f] + s0);			\
	(d) += T1;								\
	(h) = T1 + Sigma0_256((a)) + Maj((a), (b), (c));			\
	j++;									\
} while(0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>SHA256_Transform</name><parameter_list>(<parameter><decl><type><name>pg_sha256_ctx</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>a</name></decl>,
				<decl><type ref="prev"/><name>b</name></decl>,
				<decl><type ref="prev"/><name>c</name></decl>,
				<decl><type ref="prev"/><name>d</name></decl>,
				<decl><type ref="prev"/><name>e</name></decl>,
				<decl><type ref="prev"/><name>f</name></decl>,
				<decl><type ref="prev"/><name>g</name></decl>,
				<decl><type ref="prev"/><name>h</name></decl>,
				<decl><type ref="prev"/><name>s0</name></decl>,
				<decl><type ref="prev"/><name>s1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>T1</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>W256</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>j</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>W256</name> <operator>=</operator> <operator>(</operator><name>uint32</name> <operator>*</operator><operator>)</operator> <name><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>

	<comment type="block">/* Initialize registers with the prev. intermediate value */</comment>
	<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>f</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<do>do
	<block>{<block_content>
		<comment type="block">/* Rounds 0 to 15 (unrolled): */</comment>
		<expr_stmt><expr><call><name>ROUND256_0_TO_15</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ROUND256_0_TO_15</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ROUND256_0_TO_15</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ROUND256_0_TO_15</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ROUND256_0_TO_15</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ROUND256_0_TO_15</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ROUND256_0_TO_15</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ROUND256_0_TO_15</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block> while <condition>(<expr><name>j</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition>;</do>

	<comment type="block">/* Now for the remaining rounds to 64: */</comment>
	<do>do
	<block>{<block_content>
		<expr_stmt><expr><call><name>ROUND256</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ROUND256</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ROUND256</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ROUND256</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ROUND256</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ROUND256</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ROUND256</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ROUND256</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block> while <condition>(<expr><name>j</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>)</condition>;</do>

	<comment type="block">/* Compute the current intermediate hash value */</comment>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name>a</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name>b</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <name>d</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+=</operator> <name>e</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+=</operator> <name>f</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+=</operator> <name>g</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+=</operator> <name>h</name></expr>;</expr_stmt>

	<comment type="block">/* Clean up */</comment>
	<expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name> <operator>=</operator> <name>c</name> <operator>=</operator> <name>d</name> <operator>=</operator> <name>e</name> <operator>=</operator> <name>f</name> <operator>=</operator> <name>g</name> <operator>=</operator> <name>h</name> <operator>=</operator> <name>T1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>							<comment type="block">/* SHA2_UNROLL_TRANSFORM */</comment>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>SHA256_Transform</name><parameter_list>(<parameter><decl><type><name>pg_sha256_ctx</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>a</name></decl>,
				<decl><type ref="prev"/><name>b</name></decl>,
				<decl><type ref="prev"/><name>c</name></decl>,
				<decl><type ref="prev"/><name>d</name></decl>,
				<decl><type ref="prev"/><name>e</name></decl>,
				<decl><type ref="prev"/><name>f</name></decl>,
				<decl><type ref="prev"/><name>g</name></decl>,
				<decl><type ref="prev"/><name>h</name></decl>,
				<decl><type ref="prev"/><name>s0</name></decl>,
				<decl><type ref="prev"/><name>s1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>T1</name></decl>,
				<decl><type ref="prev"/><name>T2</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>W256</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>j</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>W256</name> <operator>=</operator> <operator>(</operator><name>uint32</name> <operator>*</operator><operator>)</operator> <name><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>

	<comment type="block">/* Initialize registers with the prev. intermediate value */</comment>
	<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>f</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<do>do
	<block>{<block_content>
		<expr_stmt><expr><name><name>W256</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32</name><operator>)</operator> <name><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator>
			<operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>data</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
		<comment type="block">/* Apply the SHA-256 compression function to update a..h */</comment>
		<expr_stmt><expr><name>T1</name> <operator>=</operator> <name>h</name> <operator>+</operator> <call><name>Sigma1_256</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>Ch</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>K256</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name><name>W256</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>T2</name> <operator>=</operator> <call><name>Sigma0_256</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>Maj</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>h</name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>g</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>f</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>e</name> <operator>=</operator> <name>d</name> <operator>+</operator> <name>T1</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>d</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>c</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>b</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>a</name> <operator>=</operator> <name>T1</name> <operator>+</operator> <name>T2</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block> while <condition>(<expr><name>j</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition>;</do>

	<do>do
	<block>{<block_content>
		<comment type="block">/* Part of the message block expansion: */</comment>
		<expr_stmt><expr><name>s0</name> <operator>=</operator> <name><name>W256</name><index>[<expr><operator>(</operator><name>j</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>s0</name> <operator>=</operator> <call><name>sigma0_256</name><argument_list>(<argument><expr><name>s0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>s1</name> <operator>=</operator> <name><name>W256</name><index>[<expr><operator>(</operator><name>j</name> <operator>+</operator> <literal type="number">14</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>s1</name> <operator>=</operator> <call><name>sigma1_256</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Apply the SHA-256 compression function to update a..h */</comment>
		<expr_stmt><expr><name>T1</name> <operator>=</operator> <name>h</name> <operator>+</operator> <call><name>Sigma1_256</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>Ch</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>K256</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator>
			<operator>(</operator><name><name>W256</name><index>[<expr><name>j</name> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr>]</index></name> <operator>+=</operator> <name>s1</name> <operator>+</operator> <name><name>W256</name><index>[<expr><operator>(</operator><name>j</name> <operator>+</operator> <literal type="number">9</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr>]</index></name> <operator>+</operator> <name>s0</name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>T2</name> <operator>=</operator> <call><name>Sigma0_256</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>Maj</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>h</name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>g</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>f</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>e</name> <operator>=</operator> <name>d</name> <operator>+</operator> <name>T1</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>d</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>c</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>b</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>a</name> <operator>=</operator> <name>T1</name> <operator>+</operator> <name>T2</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block> while <condition>(<expr><name>j</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>)</condition>;</do>

	<comment type="block">/* Compute the current intermediate hash value */</comment>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name>a</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name>b</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <name>d</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+=</operator> <name>e</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+=</operator> <name>f</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+=</operator> <name>g</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+=</operator> <name>h</name></expr>;</expr_stmt>

	<comment type="block">/* Clean up */</comment>
	<expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name> <operator>=</operator> <name>c</name> <operator>=</operator> <name>d</name> <operator>=</operator> <name>e</name> <operator>=</operator> <name>f</name> <operator>=</operator> <name>g</name> <operator>=</operator> <name>h</name> <operator>=</operator> <name>T1</name> <operator>=</operator> <name>T2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* SHA2_UNROLL_TRANSFORM */</comment>

<function><type><name>void</name></type>
<name>pg_sha256_update</name><parameter_list>(<parameter><decl><type><name>pg_sha256_ctx</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>freespace</name></decl>,
				<decl><type ref="prev"/><name>usedspace</name></decl>;</decl_stmt>

	<comment type="block">/* Calling with no data is valid (we do nothing) */</comment>
	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>usedspace</name> <operator>=</operator> <operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>bitcount</name></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>%</operator> <name>PG_SHA256_BLOCK_LENGTH</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>usedspace</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Calculate how much free space is available in the buffer */</comment>
		<expr_stmt><expr><name>freespace</name> <operator>=</operator> <name>PG_SHA256_BLOCK_LENGTH</name> <operator>-</operator> <name>usedspace</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>freespace</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Fill the buffer completely and process it */</comment>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>usedspace</name></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>freespace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>bitcount</name></name> <operator>+=</operator> <name>freespace</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>freespace</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>freespace</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>SHA256_Transform</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/* The buffer is not yet full */</comment>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>usedspace</name></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>bitcount</name></name> <operator>+=</operator> <name>len</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
			<comment type="block">/* Clean up: */</comment>
			<expr_stmt><expr><name>usedspace</name> <operator>=</operator> <name>freespace</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
	<while>while <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>PG_SHA256_BLOCK_LENGTH</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Process as many complete blocks as we can */</comment>
		<expr_stmt><expr><call><name>SHA256_Transform</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>bitcount</name></name> <operator>+=</operator> <name>PG_SHA256_BLOCK_LENGTH</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>PG_SHA256_BLOCK_LENGTH</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>PG_SHA256_BLOCK_LENGTH</name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* There's left-overs, so save 'em */</comment>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>bitcount</name></name> <operator>+=</operator> <name>len</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Clean up: */</comment>
	<expr_stmt><expr><name>usedspace</name> <operator>=</operator> <name>freespace</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>SHA256_Last</name><parameter_list>(<parameter><decl><type><name>pg_sha256_ctx</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>usedspace</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>usedspace</name> <operator>=</operator> <operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>bitcount</name></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>%</operator> <name>PG_SHA256_BLOCK_LENGTH</name></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WORDS_BIGENDIAN</name></cpp:ifndef>
	<comment type="block">/* Convert FROM host byte order */</comment>
	<expr_stmt><expr><call><name>REVERSE64</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>bitcount</name></name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>bitcount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if <condition>(<expr><name>usedspace</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Begin padding with a 1 bit: */</comment>
		<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>usedspace</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>usedspace</name> <operator>&lt;=</operator> <name>PG_SHA256_SHORT_BLOCK_LENGTH</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Set-up for the last transform: */</comment>
			<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>usedspace</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PG_SHA256_SHORT_BLOCK_LENGTH</name> <operator>-</operator> <name>usedspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>usedspace</name> <operator>&lt;</operator> <name>PG_SHA256_BLOCK_LENGTH</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>usedspace</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PG_SHA256_BLOCK_LENGTH</name> <operator>-</operator> <name>usedspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* Do second-to-last transform: */</comment>
			<expr_stmt><expr><call><name>SHA256_Transform</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* And set-up for the last transform: */</comment>
			<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PG_SHA256_SHORT_BLOCK_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* Set-up for the last transform: */</comment>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PG_SHA256_SHORT_BLOCK_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Begin padding with a 1 bit: */</comment>
		<expr_stmt><expr><operator>*</operator><name><name>context</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<comment type="block">/* Set the bit count: */</comment>
	<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint64</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>PG_SHA256_SHORT_BLOCK_LENGTH</name></expr>]</index></name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>bitcount</name></name></expr>;</expr_stmt>

	<comment type="block">/* Final transform: */</comment>
	<expr_stmt><expr><call><name>SHA256_Transform</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>pg_sha256_final</name><parameter_list>(<parameter><decl><type><name>pg_sha256_ctx</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>digest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* If no digest buffer is passed, we don't bother doing this: */</comment>
	<if_stmt><if>if <condition>(<expr><name>digest</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>SHA256_Last</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WORDS_BIGENDIAN</name></cpp:ifndef>
		<block>{<block_content>
			<comment type="block">/* Convert TO host byte order */</comment>
			<decl_stmt><decl><type><name>int</name></type>			<name>j</name></decl>;</decl_stmt>

			<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<expr_stmt><expr><call><name>REVERSE32</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
		</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>PG_SHA256_DIGEST_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Clean up state data: */</comment>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pg_sha256_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block" format="doxygen">/*** SHA-512: *********************************************************/</comment>
<function><type><name>void</name></type>
<name>pg_sha512_init</name><parameter_list>(<parameter><decl><type><name>pg_sha512_ctx</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>context</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>sha512_initial_hash_value</name></expr></argument>, <argument><expr><name>PG_SHA512_DIGEST_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PG_SHA512_BLOCK_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>bitcount</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>bitcount</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SHA2_UNROLL_TRANSFORM</name></cpp:ifdef>

<comment type="block">/* Unrolled SHA-512 round macros: */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROUND512_0_TO_15</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>f</name></type></parameter>,<parameter><type><name>g</name></type></parameter>,<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {					\
	W512[j] = (uint64)data[7] | ((uint64)data[6] &lt;&lt; 8) |		\
		((uint64)data[5] &lt;&lt; 16) | ((uint64)data[4] &lt;&lt; 24) |		\
		((uint64)data[3] &lt;&lt; 32) | ((uint64)data[2] &lt;&lt; 40) |		\
		((uint64)data[1] &lt;&lt; 48) | ((uint64)data[0] &lt;&lt; 56);		\
	data += 8;								\
	T1 = (h) + Sigma1_512((e)) + Ch((e), (f), (g)) + K512[j] + W512[j]; \
	(d) += T1;								\
	(h) = T1 + Sigma0_512((a)) + Maj((a), (b), (c));			\
	j++;									\
} while(0)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROUND512</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>f</name></type></parameter>,<parameter><type><name>g</name></type></parameter>,<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {						\
	s0 = W512[(j+1)&amp;0x0f];							\
	s0 = sigma0_512(s0);							\
	s1 = W512[(j+14)&amp;0x0f];							\
	s1 = sigma1_512(s1);							\
	T1 = (h) + Sigma1_512((e)) + Ch((e), (f), (g)) + K512[j] +		\
			 (W512[j&amp;0x0f] += s1 + W512[(j+9)&amp;0x0f] + s0);			\
	(d) += T1;								\
	(h) = T1 + Sigma0_512((a)) + Maj((a), (b), (c));			\
	j++;									\
} while(0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>SHA512_Transform</name><parameter_list>(<parameter><decl><type><name>pg_sha512_ctx</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint64</name></type>		<name>a</name></decl>,
				<decl><type ref="prev"/><name>b</name></decl>,
				<decl><type ref="prev"/><name>c</name></decl>,
				<decl><type ref="prev"/><name>d</name></decl>,
				<decl><type ref="prev"/><name>e</name></decl>,
				<decl><type ref="prev"/><name>f</name></decl>,
				<decl><type ref="prev"/><name>g</name></decl>,
				<decl><type ref="prev"/><name>h</name></decl>,
				<decl><type ref="prev"/><name>s0</name></decl>,
				<decl><type ref="prev"/><name>s1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type>		<name>T1</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>W512</name> <init>= <expr><operator>(</operator><name>uint64</name> <operator>*</operator><operator>)</operator> <name><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>j</name></decl>;</decl_stmt>

	<comment type="block">/* Initialize registers with the prev. intermediate value */</comment>
	<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>f</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<do>do
	<block>{<block_content>
		<expr_stmt><expr><call><name>ROUND512_0_TO_15</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ROUND512_0_TO_15</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ROUND512_0_TO_15</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ROUND512_0_TO_15</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ROUND512_0_TO_15</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ROUND512_0_TO_15</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ROUND512_0_TO_15</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ROUND512_0_TO_15</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block> while <condition>(<expr><name>j</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition>;</do>

	<comment type="block">/* Now for the remaining rounds up to 79: */</comment>
	<do>do
	<block>{<block_content>
		<expr_stmt><expr><call><name>ROUND512</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ROUND512</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ROUND512</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ROUND512</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ROUND512</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ROUND512</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ROUND512</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ROUND512</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block> while <condition>(<expr><name>j</name> <operator>&lt;</operator> <literal type="number">80</literal></expr>)</condition>;</do>

	<comment type="block">/* Compute the current intermediate hash value */</comment>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name>a</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name>b</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <name>d</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+=</operator> <name>e</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+=</operator> <name>f</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+=</operator> <name>g</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+=</operator> <name>h</name></expr>;</expr_stmt>

	<comment type="block">/* Clean up */</comment>
	<expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name> <operator>=</operator> <name>c</name> <operator>=</operator> <name>d</name> <operator>=</operator> <name>e</name> <operator>=</operator> <name>f</name> <operator>=</operator> <name>g</name> <operator>=</operator> <name>h</name> <operator>=</operator> <name>T1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>							<comment type="block">/* SHA2_UNROLL_TRANSFORM */</comment>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>SHA512_Transform</name><parameter_list>(<parameter><decl><type><name>pg_sha512_ctx</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint64</name></type>		<name>a</name></decl>,
				<decl><type ref="prev"/><name>b</name></decl>,
				<decl><type ref="prev"/><name>c</name></decl>,
				<decl><type ref="prev"/><name>d</name></decl>,
				<decl><type ref="prev"/><name>e</name></decl>,
				<decl><type ref="prev"/><name>f</name></decl>,
				<decl><type ref="prev"/><name>g</name></decl>,
				<decl><type ref="prev"/><name>h</name></decl>,
				<decl><type ref="prev"/><name>s0</name></decl>,
				<decl><type ref="prev"/><name>s1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type>		<name>T1</name></decl>,
				<decl><type ref="prev"/><name>T2</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>W512</name> <init>= <expr><operator>(</operator><name>uint64</name> <operator>*</operator><operator>)</operator> <name><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>j</name></decl>;</decl_stmt>

	<comment type="block">/* Initialize registers with the prev. intermediate value */</comment>
	<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>f</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<do>do
	<block>{<block_content>
		<expr_stmt><expr><name><name>W512</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint64</name><operator>)</operator> <name><name>data</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint64</name><operator>)</operator> <name><name>data</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator>
			<operator>(</operator><operator>(</operator><name>uint64</name><operator>)</operator> <name><name>data</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint64</name><operator>)</operator> <name><name>data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator>
			<operator>(</operator><operator>(</operator><name>uint64</name><operator>)</operator> <name><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint64</name><operator>)</operator> <name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">40</literal><operator>)</operator> <operator>|</operator>
			<operator>(</operator><operator>(</operator><name>uint64</name><operator>)</operator> <name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">48</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint64</name><operator>)</operator> <name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">56</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>data</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
		<comment type="block">/* Apply the SHA-512 compression function to update a..h */</comment>
		<expr_stmt><expr><name>T1</name> <operator>=</operator> <name>h</name> <operator>+</operator> <call><name>Sigma1_512</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>Ch</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>K512</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name><name>W512</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>T2</name> <operator>=</operator> <call><name>Sigma0_512</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>Maj</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>h</name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>g</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>f</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>e</name> <operator>=</operator> <name>d</name> <operator>+</operator> <name>T1</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>d</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>c</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>b</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>a</name> <operator>=</operator> <name>T1</name> <operator>+</operator> <name>T2</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block> while <condition>(<expr><name>j</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition>;</do>

	<do>do
	<block>{<block_content>
		<comment type="block">/* Part of the message block expansion: */</comment>
		<expr_stmt><expr><name>s0</name> <operator>=</operator> <name><name>W512</name><index>[<expr><operator>(</operator><name>j</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>s0</name> <operator>=</operator> <call><name>sigma0_512</name><argument_list>(<argument><expr><name>s0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>s1</name> <operator>=</operator> <name><name>W512</name><index>[<expr><operator>(</operator><name>j</name> <operator>+</operator> <literal type="number">14</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>s1</name> <operator>=</operator> <call><name>sigma1_512</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Apply the SHA-512 compression function to update a..h */</comment>
		<expr_stmt><expr><name>T1</name> <operator>=</operator> <name>h</name> <operator>+</operator> <call><name>Sigma1_512</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>Ch</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>K512</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator>
			<operator>(</operator><name><name>W512</name><index>[<expr><name>j</name> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr>]</index></name> <operator>+=</operator> <name>s1</name> <operator>+</operator> <name><name>W512</name><index>[<expr><operator>(</operator><name>j</name> <operator>+</operator> <literal type="number">9</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr>]</index></name> <operator>+</operator> <name>s0</name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>T2</name> <operator>=</operator> <call><name>Sigma0_512</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>Maj</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>h</name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>g</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>f</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>e</name> <operator>=</operator> <name>d</name> <operator>+</operator> <name>T1</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>d</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>c</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>b</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>a</name> <operator>=</operator> <name>T1</name> <operator>+</operator> <name>T2</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block> while <condition>(<expr><name>j</name> <operator>&lt;</operator> <literal type="number">80</literal></expr>)</condition>;</do>

	<comment type="block">/* Compute the current intermediate hash value */</comment>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name>a</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name>b</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <name>d</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+=</operator> <name>e</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+=</operator> <name>f</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+=</operator> <name>g</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+=</operator> <name>h</name></expr>;</expr_stmt>

	<comment type="block">/* Clean up */</comment>
	<expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name> <operator>=</operator> <name>c</name> <operator>=</operator> <name>d</name> <operator>=</operator> <name>e</name> <operator>=</operator> <name>f</name> <operator>=</operator> <name>g</name> <operator>=</operator> <name>h</name> <operator>=</operator> <name>T1</name> <operator>=</operator> <name>T2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* SHA2_UNROLL_TRANSFORM */</comment>

<function><type><name>void</name></type>
<name>pg_sha512_update</name><parameter_list>(<parameter><decl><type><name>pg_sha512_ctx</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>freespace</name></decl>,
				<decl><type ref="prev"/><name>usedspace</name></decl>;</decl_stmt>

	<comment type="block">/* Calling with no data is valid (we do nothing) */</comment>
	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>usedspace</name> <operator>=</operator> <operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>bitcount</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>%</operator> <name>PG_SHA512_BLOCK_LENGTH</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>usedspace</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Calculate how much free space is available in the buffer */</comment>
		<expr_stmt><expr><name>freespace</name> <operator>=</operator> <name>PG_SHA512_BLOCK_LENGTH</name> <operator>-</operator> <name>usedspace</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>freespace</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Fill the buffer completely and process it */</comment>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>usedspace</name></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>freespace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ADDINC128</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>bitcount</name></name></expr></argument>, <argument><expr><name>freespace</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>freespace</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>freespace</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>SHA512_Transform</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/* The buffer is not yet full */</comment>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>usedspace</name></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ADDINC128</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>bitcount</name></name></expr></argument>, <argument><expr><name>len</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* Clean up: */</comment>
			<expr_stmt><expr><name>usedspace</name> <operator>=</operator> <name>freespace</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
	<while>while <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>PG_SHA512_BLOCK_LENGTH</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Process as many complete blocks as we can */</comment>
		<expr_stmt><expr><call><name>SHA512_Transform</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ADDINC128</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>bitcount</name></name></expr></argument>, <argument><expr><name>PG_SHA512_BLOCK_LENGTH</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>PG_SHA512_BLOCK_LENGTH</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>PG_SHA512_BLOCK_LENGTH</name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* There's left-overs, so save 'em */</comment>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ADDINC128</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>bitcount</name></name></expr></argument>, <argument><expr><name>len</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Clean up: */</comment>
	<expr_stmt><expr><name>usedspace</name> <operator>=</operator> <name>freespace</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>SHA512_Last</name><parameter_list>(<parameter><decl><type><name>pg_sha512_ctx</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>usedspace</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>usedspace</name> <operator>=</operator> <operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>bitcount</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>%</operator> <name>PG_SHA512_BLOCK_LENGTH</name></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WORDS_BIGENDIAN</name></cpp:ifndef>
	<comment type="block">/* Convert FROM host byte order */</comment>
	<expr_stmt><expr><call><name>REVERSE64</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>bitcount</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>bitcount</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>REVERSE64</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>bitcount</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>bitcount</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if <condition>(<expr><name>usedspace</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Begin padding with a 1 bit: */</comment>
		<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>usedspace</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>usedspace</name> <operator>&lt;=</operator> <name>PG_SHA512_SHORT_BLOCK_LENGTH</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Set-up for the last transform: */</comment>
			<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>usedspace</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PG_SHA512_SHORT_BLOCK_LENGTH</name> <operator>-</operator> <name>usedspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>usedspace</name> <operator>&lt;</operator> <name>PG_SHA512_BLOCK_LENGTH</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>usedspace</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PG_SHA512_BLOCK_LENGTH</name> <operator>-</operator> <name>usedspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* Do second-to-last transform: */</comment>
			<expr_stmt><expr><call><name>SHA512_Transform</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* And set-up for the last transform: */</comment>
			<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PG_SHA512_BLOCK_LENGTH</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* Prepare for final transform: */</comment>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PG_SHA512_SHORT_BLOCK_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Begin padding with a 1 bit: */</comment>
		<expr_stmt><expr><operator>*</operator><name><name>context</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<comment type="block">/* Store the length of input data (in bits): */</comment>
	<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint64</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>PG_SHA512_SHORT_BLOCK_LENGTH</name></expr>]</index></name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>bitcount</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint64</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>PG_SHA512_SHORT_BLOCK_LENGTH</name> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>bitcount</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

	<comment type="block">/* Final transform: */</comment>
	<expr_stmt><expr><call><name>SHA512_Transform</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>pg_sha512_final</name><parameter_list>(<parameter><decl><type><name>pg_sha512_ctx</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>digest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* If no digest buffer is passed, we don't bother doing this: */</comment>
	<if_stmt><if>if <condition>(<expr><name>digest</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>SHA512_Last</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Save the hash data for output: */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WORDS_BIGENDIAN</name></cpp:ifndef>
		<block>{<block_content>
			<comment type="block">/* Convert TO host byte order */</comment>
			<decl_stmt><decl><type><name>int</name></type>			<name>j</name></decl>;</decl_stmt>

			<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<expr_stmt><expr><call><name>REVERSE64</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
		</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>PG_SHA512_DIGEST_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Zero out state data */</comment>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pg_sha512_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block" format="doxygen">/*** SHA-384: *********************************************************/</comment>
<function><type><name>void</name></type>
<name>pg_sha384_init</name><parameter_list>(<parameter><decl><type><name>pg_sha384_ctx</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>context</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>sha384_initial_hash_value</name></expr></argument>, <argument><expr><name>PG_SHA512_DIGEST_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PG_SHA384_BLOCK_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>bitcount</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>bitcount</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>pg_sha384_update</name><parameter_list>(<parameter><decl><type><name>pg_sha384_ctx</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>pg_sha512_update</name><argument_list>(<argument><expr><operator>(</operator><name>pg_sha512_ctx</name> <operator>*</operator><operator>)</operator> <name>context</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>pg_sha384_final</name><parameter_list>(<parameter><decl><type><name>pg_sha384_ctx</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>digest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* If no digest buffer is passed, we don't bother doing this: */</comment>
	<if_stmt><if>if <condition>(<expr><name>digest</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>SHA512_Last</name><argument_list>(<argument><expr><operator>(</operator><name>pg_sha512_ctx</name> <operator>*</operator><operator>)</operator> <name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Save the hash data for output: */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WORDS_BIGENDIAN</name></cpp:ifndef>
		<block>{<block_content>
			<comment type="block">/* Convert TO host byte order */</comment>
			<decl_stmt><decl><type><name>int</name></type>			<name>j</name></decl>;</decl_stmt>

			<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<expr_stmt><expr><call><name>REVERSE64</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
		</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>PG_SHA384_DIGEST_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Zero out state data */</comment>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pg_sha384_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/*** SHA-224: *********************************************************/</comment>
<function><type><name>void</name></type>
<name>pg_sha224_init</name><parameter_list>(<parameter><decl><type><name>pg_sha224_ctx</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>context</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>sha224_initial_hash_value</name></expr></argument>, <argument><expr><name>PG_SHA256_DIGEST_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PG_SHA256_BLOCK_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>bitcount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>pg_sha224_update</name><parameter_list>(<parameter><decl><type><name>pg_sha224_ctx</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>pg_sha256_update</name><argument_list>(<argument><expr><operator>(</operator><name>pg_sha256_ctx</name> <operator>*</operator><operator>)</operator> <name>context</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>pg_sha224_final</name><parameter_list>(<parameter><decl><type><name>pg_sha224_ctx</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>digest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* If no digest buffer is passed, we don't bother doing this: */</comment>
	<if_stmt><if>if <condition>(<expr><name>digest</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>SHA256_Last</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WORDS_BIGENDIAN</name></cpp:ifndef>
		<block>{<block_content>
			<comment type="block">/* Convert TO host byte order */</comment>
			<decl_stmt><decl><type><name>int</name></type>			<name>j</name></decl>;</decl_stmt>

			<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<expr_stmt><expr><call><name>REVERSE32</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
		</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>PG_SHA224_DIGEST_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Clean up state data: */</comment>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pg_sha224_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
