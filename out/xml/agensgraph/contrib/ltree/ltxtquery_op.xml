<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/contrib/ltree/ltxtquery_op.c"><comment type="block">/*
 * txtquery operations with ltree
 * Teodor Sigaev &lt;teodor@stack.net&gt;
 * contrib/ltree/ltxtquery_op.c
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ltree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ltxtq_exec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ltxtq_rexec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/*
 * check for boolean condition
 */</comment>
<function><type><name>bool</name></type>
<name>ltree_execute</name><parameter_list>(<parameter><decl><type><name>ITEM</name> <modifier>*</modifier></type><name>curitem</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>checkval</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>calcnot</name></decl></parameter>, <parameter><function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>chkcond</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>checkval</name></decl></parameter>, <parameter><decl><type><name>ITEM</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* since this function recurses, it could be driven to stack overflow */</comment>
	<expr_stmt><expr><call><name>check_stack_depth</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>curitem</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>VAL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call>(<modifier>*</modifier><name>chkcond</name>) <argument_list>(<argument><expr><name>checkval</name></expr></argument>, <argument><expr><name>curitem</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>curitem</name><operator>-&gt;</operator><name>val</name></name> <operator>==</operator> <operator>(</operator><name>int32</name><operator>)</operator> <literal type="char">'!'</literal></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><ternary><condition><expr><name>calcnot</name></expr> ?</condition><then>
			<expr><operator>(</operator><ternary><condition><expr><operator>(</operator><call><name>ltree_execute</name><argument_list>(<argument><expr><name>curitem</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>checkval</name></expr></argument>, <argument><expr><name>calcnot</name></expr></argument>, <argument><expr><name>chkcond</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><name>true</name></expr></else></ternary><operator>)</operator></expr>
			</then><else>: <expr><name>true</name></expr></else></ternary></expr>;</return>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>curitem</name><operator>-&gt;</operator><name>val</name></name> <operator>==</operator> <operator>(</operator><name>int32</name><operator>)</operator> <literal type="char">'&amp;'</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>ltree_execute</name><argument_list>(<argument><expr><name>curitem</name> <operator>+</operator> <name><name>curitem</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><name>checkval</name></expr></argument>, <argument><expr><name>calcnot</name></expr></argument>, <argument><expr><name>chkcond</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>ltree_execute</name><argument_list>(<argument><expr><name>curitem</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>checkval</name></expr></argument>, <argument><expr><name>calcnot</name></expr></argument>, <argument><expr><name>chkcond</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>							<comment type="block">/* |-operator */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>ltree_execute</name><argument_list>(<argument><expr><name>curitem</name> <operator>+</operator> <name><name>curitem</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><name>checkval</name></expr></argument>, <argument><expr><name>calcnot</name></expr></argument>, <argument><expr><name>chkcond</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>true</name></expr>;</return></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<return>return <expr><call><name>ltree_execute</name><argument_list>(<argument><expr><name>curitem</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>checkval</name></expr></argument>, <argument><expr><name>calcnot</name></expr></argument>, <argument><expr><name>chkcond</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>ltree</name>	   <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>operand</name></decl>;</decl_stmt>
}</block></struct></type> <name>CHKVAL</name>;</typedef>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>checkcondition_str</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>checkval</name></decl></parameter>, <parameter><decl><type><name>ITEM</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ltree_level</name> <modifier>*</modifier></type><name>level</name> <init>= <expr><call><name>LTREE_FIRST</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>CHKVAL</name> <operator>*</operator><operator>)</operator> <name>checkval</name><operator>)</operator><operator>-&gt;</operator><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>tlen</name> <init>= <expr><operator>(</operator><operator>(</operator><name>CHKVAL</name> <operator>*</operator><operator>)</operator> <name>checkval</name><operator>)</operator><operator>-&gt;</operator><name><name>node</name><operator>-&gt;</operator><name>numlevel</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>op</name> <init>= <expr><operator>(</operator><operator>(</operator><name>CHKVAL</name> <operator>*</operator><operator>)</operator> <name>checkval</name><operator>)</operator><operator>-&gt;</operator><name>operand</name> <operator>+</operator> <name><name>val</name><operator>-&gt;</operator><name>distance</name></name></expr></init></decl>;</decl_stmt>
	<function_decl><type><name>int</name></type>			(<modifier>*</modifier><name>cmpptr</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

	<expr_stmt><expr><name>cmpptr</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>val</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>LVAR_INCASE</name><operator>)</operator></expr> ?</condition><then> <expr><name>ltree_strncasecmp</name></expr> </then><else>: <expr><name>strncmp</name></expr></else></ternary></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>tlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>LVAR_SUBLEXEME</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>compare_subnode</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>length</name></name></expr></argument>, <argument><expr><name>cmpptr</name></expr></argument>, <argument><expr><operator>(</operator><name><name>val</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>LVAR_ANYEND</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>val</name><operator>-&gt;</operator><name>length</name></name> <operator>==</operator> <name><name>level</name><operator>-&gt;</operator><name>len</name></name> <operator>||</operator>
				  <operator>(</operator><name><name>level</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <name><name>val</name><operator>-&gt;</operator><name>length</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>val</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>LVAR_ANYEND</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
				 <call>(<modifier>*</modifier><name>cmpptr</name>) <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>level</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>val</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>tlen</name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>level</name> <operator>=</operator> <call><name>LEVEL_NEXT</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>ltxtq_exec</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ltree</name>	   <modifier>*</modifier></type><name>val</name> <init>= <expr><call><name>PG_GETARG_LTREE_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ltxtquery</name>  <modifier>*</modifier></type><name>query</name> <init>= <expr><call><name>PG_GETARG_LTXTQUERY_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CHKVAL</name></type>		<name>chkval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>chkval</name><operator>.</operator><name>node</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>chkval</name><operator>.</operator><name>operand</name></name> <operator>=</operator> <call><name>GETOPERAND</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ltree_execute</name><argument_list>(<argument><expr><call><name>GETQUERY</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></argument>,
						   <argument><expr><operator>&amp;</operator><name>chkval</name></expr></argument>,
						   <argument><expr><name>true</name></expr></argument>,
						   <argument><expr><name>checkcondition_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>ltxtq_rexec</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>PG_RETURN_DATUM</name><argument_list>(<argument><expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>ltxtq_exec</name></expr></argument>,
										<argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
										<argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>
										)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
