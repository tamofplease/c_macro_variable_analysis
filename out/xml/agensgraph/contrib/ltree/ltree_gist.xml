<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/contrib/ltree/ltree_gist.c"><comment type="block">/*
 * GiST support for ltree
 * Teodor Sigaev &lt;teodor@stack.net&gt;
 * contrib/ltree/ltree_gist.c
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/gist.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/reloptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/stratnum.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"crc32.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ltree.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEXTVAL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( (lquery*)( (char*)(x) + INTALIGN( VARSIZE(x) ) ) )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISEQ</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>( (a)-&gt;numlevel == (b)-&gt;numlevel &amp;&amp; ltree_compare(a,b)==0 )</cpp:value></cpp:define>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ltree_gist_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ltree_gist_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>Datum</name></type>
<name>ltree_gist_in</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
			 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"ltree_gist_in() not implemented"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>ltree_gist_out</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
			 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"ltree_gist_out() not implemented"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ltree_gist</name> <modifier>*</modifier></type>
<name>ltree_gist_alloc</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>isalltrue</name></decl></parameter>, <parameter><decl><type><name>BITVECP</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>siglen</name></decl></parameter>,
				 <parameter><decl><type><name>ltree</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><name>ltree</name> <modifier>*</modifier></type><name>right</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int32</name></type>		<name>size</name> <init>= <expr><name>LTG_HDRSIZE</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>isalltrue</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>siglen</name></expr></else></ternary><operator>)</operator> <operator>+</operator>
	<operator>(</operator><ternary><condition><expr><name>left</name></expr> ?</condition><then> <expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>right</name></expr> ?</condition><then> <expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ltree_gist</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SET_VARSIZE</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>siglen</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>isalltrue</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>LTG_ALLTRUE</name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>sign</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>LTG_SIGN</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name>siglen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><call><name>LTG_SIGN</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>siglen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>left</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>LTG_LNODE</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>siglen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>right</name> <operator>||</operator> <name>left</name> <operator>==</operator> <name>right</name> <operator>||</operator> <call><name>ISEQ</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>LTG_NORIGHT</name></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>LTG_RNODE</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>siglen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <name>LTG_ONENODE</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>LTG_NODE</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ltree_compress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ltree_decompress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ltree_same</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ltree_union</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ltree_penalty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ltree_picksplit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ltree_consistent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ltree_gist_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETENTRY</name><parameter_list>(<parameter><type><name>vec</name></type></parameter>,<parameter><type><name>pos</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ltree_gist *) DatumGetPointer((vec)-&gt;vector[(pos)].key))</cpp:value></cpp:define>

<function><type><name>Datum</name></type>
<name>ltree_compress</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GISTENTRY</name>  <modifier>*</modifier></type><name>entry</name> <init>= <expr><operator>(</operator><name>GISTENTRY</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GISTENTRY</name>  <modifier>*</modifier></type><name>retval</name> <init>= <expr><name>entry</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>leafkey</name></name></expr>)</condition>
	<block>{<block_content>							<comment type="block">/* ltree */</comment>
		<decl_stmt><decl><type><name>ltree</name>	   <modifier>*</modifier></type><name>val</name> <init>= <expr><call><name>DatumGetLtreeP</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ltree_gist</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>ltree_gist_alloc</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>retval</name> <operator>=</operator> <operator>(</operator><name>GISTENTRY</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GISTENTRY</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>gistentryinit</name><argument_list>(<argument><expr><operator>*</operator><name>retval</name></expr></argument>, <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>,
					  <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>rel</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>page</name></name></expr></argument>,
					  <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>ltree_decompress</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GISTENTRY</name>  <modifier>*</modifier></type><name>entry</name> <init>= <expr><operator>(</operator><name>GISTENTRY</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ltree_gist</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><operator>(</operator><name>ltree_gist</name> <operator>*</operator><operator>)</operator> <call><name>PG_DETOAST_DATUM</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>GISTENTRY</name>  <modifier>*</modifier></type><name>retval</name> <init>= <expr><operator>(</operator><name>GISTENTRY</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GISTENTRY</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>gistentryinit</name><argument_list>(<argument><expr><operator>*</operator><name>retval</name></expr></argument>, <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>,
					  <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>rel</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>page</name></name></expr></argument>,
					  <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>ltree_same</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ltree_gist</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator><name>ltree_gist</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ltree_gist</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><operator>(</operator><name>ltree_gist</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name>	   <modifier>*</modifier></type><name>result</name> <init>= <expr><operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>siglen</name> <init>= <expr><call><name>LTREE_GET_SIGLEN</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>LTG_ISONENODE</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>LTG_ISONENODE</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>LTG_ISONENODE</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><call><name>ISEQ</name><argument_list>(<argument><expr><call><name>LTG_NODE</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>LTG_NODE</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>int32</name></type>		<name>i</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>BITVECP</name></type>		<name>sa</name> <init>= <expr><call><name>LTG_SIGN</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>,
					<decl><type ref="prev"/><name>sb</name> <init>= <expr><call><name>LTG_SIGN</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>LTG_ISALLTRUE</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>LTG_ISALLTRUE</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ISEQ</name><argument_list>(<argument><expr><call><name>LTG_LNODE</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>siglen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>LTG_LNODE</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>siglen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ISEQ</name><argument_list>(<argument><expr><call><name>LTG_RNODE</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>siglen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>LTG_RNODE</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>siglen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>LTG_ISALLTRUE</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<macro><name>LOOPBYTE</name><argument_list>(<argument>siglen</argument>)</argument_list></macro>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>sa</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>sb</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>hashing</name><parameter_list>(<parameter><decl><type><name>BITVECP</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>ltree</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>siglen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>tlen</name> <init>= <expr><name><name>t</name><operator>-&gt;</operator><name>numlevel</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ltree_level</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><call><name>LTREE_FIRST</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>hash</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>tlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>ltree_crc32_sz</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>HASH</name><argument_list>(<argument><expr><name>sign</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>siglen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>cur</name> <operator>=</operator> <call><name>LEVEL_NEXT</name><argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>tlen</name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>ltree_union</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GistEntryVector</name> <modifier>*</modifier></type><name>entryvec</name> <init>= <expr><operator>(</operator><name>GistEntryVector</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name>		   <modifier>*</modifier></type><name>size</name> <init>= <expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>siglen</name> <init>= <expr><call><name>LTREE_GET_SIGLEN</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BITVECP</name></type>		<name>base</name> <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><name>siglen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>i</name></decl>,
				<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ltree_gist</name> <modifier>*</modifier></type><name>result</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ltree</name>	   <modifier>*</modifier></type><name>left</name> <init>= <expr><name>NULL</name></expr></init></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>right</name> <init>= <expr><name>NULL</name></expr></init></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>curtree</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>isalltrue</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>entryvec</name><operator>-&gt;</operator><name>n</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>cur</name> <operator>=</operator> <call><name>GETENTRY</name><argument_list>(<argument><expr><name>entryvec</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>LTG_ISONENODE</name><argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>curtree</name> <operator>=</operator> <call><name>LTG_NODE</name><argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>hashing</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>curtree</name></expr></argument>, <argument><expr><name>siglen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>left</name> <operator>||</operator> <call><name>ltree_compare</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>curtree</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>left</name> <operator>=</operator> <name>curtree</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>right</name> <operator>||</operator> <call><name>ltree_compare</name><argument_list>(<argument><expr><name>right</name></expr></argument>, <argument><expr><name>curtree</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>right</name> <operator>=</operator> <name>curtree</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>isalltrue</name> <operator>||</operator> <call><name>LTG_ISALLTRUE</name><argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>isalltrue</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
			<else>else
			<block>{<block_content>
				<decl_stmt><decl><type><name>BITVECP</name></type>		<name>sc</name> <init>= <expr><call><name>LTG_SIGN</name><argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><call><name>LOOPBYTE</name><argument_list>(<argument><expr><name>siglen</name></expr></argument>)</argument_list></call>
					<argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>base</name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index> <operator>|=</operator> <name><name>sc</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>

			<expr_stmt><expr><name>curtree</name> <operator>=</operator> <call><name>LTG_LNODE</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>siglen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>left</name> <operator>||</operator> <call><name>ltree_compare</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>curtree</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>left</name> <operator>=</operator> <name>curtree</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>curtree</name> <operator>=</operator> <call><name>LTG_RNODE</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>siglen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>right</name> <operator>||</operator> <call><name>ltree_compare</name><argument_list>(<argument><expr><name>right</name></expr></argument>, <argument><expr><name>curtree</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>right</name> <operator>=</operator> <name>curtree</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>isalltrue</name> <operator>==</operator> <name>false</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>isalltrue</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<macro><name>LOOPBYTE</name><argument_list>(<argument>siglen</argument>)</argument_list></macro>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>base</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>!=</operator> <literal type="number">0xff</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>isalltrue</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ltree_gist_alloc</name><argument_list>(<argument><expr><name>isalltrue</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>siglen</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <call><name>VARSIZE</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>ltree_penalty</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ltree_gist</name> <modifier>*</modifier></type><name>origval</name> <init>= <expr><operator>(</operator><name>ltree_gist</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>GISTENTRY</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ltree_gist</name> <modifier>*</modifier></type><name>newval</name> <init>= <expr><operator>(</operator><name>ltree_gist</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>GISTENTRY</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float</name>	   <modifier>*</modifier></type><name>penalty</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>siglen</name> <init>= <expr><call><name>LTREE_GET_SIGLEN</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>cmpr</name></decl>,
				<decl><type ref="prev"/><name>cmpl</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>cmpl</name> <operator>=</operator> <call><name>ltree_compare</name><argument_list>(<argument><expr><call><name>LTG_GETLNODE</name><argument_list>(<argument><expr><name>origval</name></expr></argument>, <argument><expr><name>siglen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>LTG_GETLNODE</name><argument_list>(<argument><expr><name>newval</name></expr></argument>, <argument><expr><name>siglen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cmpr</name> <operator>=</operator> <call><name>ltree_compare</name><argument_list>(<argument><expr><call><name>LTG_GETRNODE</name><argument_list>(<argument><expr><name>newval</name></expr></argument>, <argument><expr><name>siglen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>LTG_GETRNODE</name><argument_list>(<argument><expr><name>origval</name></expr></argument>, <argument><expr><name>siglen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>penalty</name> <operator>=</operator> <call><name>Max</name><argument_list>(<argument><expr><name>cmpl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>Max</name><argument_list>(<argument><expr><name>cmpr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>penalty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* used for sorting */</comment>
<typedef>typedef <type><struct>struct <name>rix</name>
<block>{
	<decl_stmt><decl><type><name>int</name></type>			<name>index</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ltree</name>	   <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>
}</block></struct></type> <name>RIX</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>treekey_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>ltree_compare</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>RIX</name> <operator>*</operator><operator>)</operator> <name>a</name><operator>)</operator><operator>-&gt;</operator><name>r</name></expr></argument>,
						 <argument><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>RIX</name> <operator>*</operator><operator>)</operator> <name>b</name><operator>)</operator><operator>-&gt;</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>Datum</name></type>
<name>ltree_picksplit</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GistEntryVector</name> <modifier>*</modifier></type><name>entryvec</name> <init>= <expr><operator>(</operator><name>GistEntryVector</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GIST_SPLITVEC</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><operator>(</operator><name>GIST_SPLITVEC</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>siglen</name> <init>= <expr><call><name>LTREE_GET_SIGLEN</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OffsetNumber</name></type> <name>j</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RIX</name>		   <modifier>*</modifier></type><name>array</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OffsetNumber</name></type> <name>maxoff</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>nbytes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ltree</name>	   <modifier>*</modifier></type><name>lu_l</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>lu_r</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>ru_l</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>ru_r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ltree_gist</name> <modifier>*</modifier></type><name>lu</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>ru</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BITVECP</name></type>		<name>ls</name> <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><name>siglen</name></expr></argument>)</argument_list></call></expr></init></decl>,
				<decl><type ref="prev"/><name>rs</name> <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><name>siglen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>lisat</name> <init>= <expr><name>false</name></expr></init></decl>,
				<decl><type ref="prev"/><name>risat</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>maxoff</name> <operator>=</operator> <name><name>entryvec</name><operator>-&gt;</operator><name>n</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>nbytes</name> <operator>=</operator> <operator>(</operator><name>maxoff</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OffsetNumber</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>spl_left</name></name> <operator>=</operator> <operator>(</operator><name>OffsetNumber</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>spl_right</name></name> <operator>=</operator> <operator>(</operator><name>OffsetNumber</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>spl_nleft</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>spl_nright</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>array</name> <operator>=</operator> <operator>(</operator><name>RIX</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RIX</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>maxoff</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* copy the data into RIXes, and sort the RIXes */</comment>
	<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>FirstOffsetNumber</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>maxoff</name></expr>;</condition> <incr><expr><name>j</name> <operator>=</operator> <call><name>OffsetNumberNext</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name><name>array</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>index</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>lu</name> <operator>=</operator> <call><name>GETENTRY</name><argument_list>(<argument><expr><name>entryvec</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* use as tmp val */</comment>
		<expr_stmt><expr><name><name>array</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>r</name> <operator>=</operator> <call><name>LTG_GETLNODE</name><argument_list>(<argument><expr><name>lu</name></expr></argument>, <argument><expr><name>siglen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>array</name><index>[<expr><name>FirstOffsetNumber</name></expr>]</index></name></expr></argument>, <argument><expr><name>maxoff</name> <operator>-</operator> <name>FirstOffsetNumber</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
		  <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RIX</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>treekey_cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>lu_l</name> <operator>=</operator> <name>lu_r</name> <operator>=</operator> <name>ru_l</name> <operator>=</operator> <name>ru_r</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>FirstOffsetNumber</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>maxoff</name></expr>;</condition> <incr><expr><name>j</name> <operator>=</operator> <call><name>OffsetNumberNext</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>lu</name> <operator>=</operator> <call><name>GETENTRY</name><argument_list>(<argument><expr><name>entryvec</name></expr></argument>, <argument><expr><name><name>array</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* use as tmp val */</comment>
		<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;=</operator> <operator>(</operator><name>maxoff</name> <operator>-</operator> <name>FirstOffsetNumber</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>spl_left</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>spl_nleft</name></name></expr>]</index></name> <operator>=</operator> <name><name>array</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>index</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>spl_nleft</name></name><operator>++</operator></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>lu_r</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>ltree_compare</name><argument_list>(<argument><expr><call><name>LTG_GETRNODE</name><argument_list>(<argument><expr><name>lu</name></expr></argument>, <argument><expr><name>siglen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>lu_r</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>lu_r</name> <operator>=</operator> <call><name>LTG_GETRNODE</name><argument_list>(<argument><expr><name>lu</name></expr></argument>, <argument><expr><name>siglen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>LTG_ISONENODE</name><argument_list>(<argument><expr><name>lu</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>hashing</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><call><name>LTG_NODE</name><argument_list>(<argument><expr><name>lu</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>siglen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>lisat</name> <operator>||</operator> <call><name>LTG_ISALLTRUE</name><argument_list>(<argument><expr><name>lu</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>lisat</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
				<else>else
				<block>{<block_content>
					<decl_stmt><decl><type><name>BITVECP</name></type>		<name>sc</name> <init>= <expr><call><name>LTG_SIGN</name><argument_list>(<argument><expr><name>lu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

					<expr_stmt><expr><call><call><name>LOOPBYTE</name><argument_list>(<argument><expr><name>siglen</name></expr></argument>)</argument_list></call>
						<argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>ls</name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index> <operator>|=</operator> <name><name>sc</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>spl_right</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>spl_nright</name></name></expr>]</index></name> <operator>=</operator> <name><name>array</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>index</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>spl_nright</name></name><operator>++</operator></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>ru_r</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>ltree_compare</name><argument_list>(<argument><expr><call><name>LTG_GETRNODE</name><argument_list>(<argument><expr><name>lu</name></expr></argument>, <argument><expr><name>siglen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ru_r</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>ru_r</name> <operator>=</operator> <call><name>LTG_GETRNODE</name><argument_list>(<argument><expr><name>lu</name></expr></argument>, <argument><expr><name>siglen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>LTG_ISONENODE</name><argument_list>(<argument><expr><name>lu</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>hashing</name><argument_list>(<argument><expr><name>rs</name></expr></argument>, <argument><expr><call><name>LTG_NODE</name><argument_list>(<argument><expr><name>lu</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>siglen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>risat</name> <operator>||</operator> <call><name>LTG_ISALLTRUE</name><argument_list>(<argument><expr><name>lu</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>risat</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
				<else>else
				<block>{<block_content>
					<decl_stmt><decl><type><name>BITVECP</name></type>		<name>sc</name> <init>= <expr><call><name>LTG_SIGN</name><argument_list>(<argument><expr><name>lu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

					<expr_stmt><expr><call><call><name>LOOPBYTE</name><argument_list>(<argument><expr><name>siglen</name></expr></argument>)</argument_list></call>
						<argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>rs</name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index> <operator>|=</operator> <name><name>sc</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>lisat</name> <operator>==</operator> <name>false</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>lisat</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<macro><name>LOOPBYTE</name><argument_list>(<argument>siglen</argument>)</argument_list></macro>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>ls</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>!=</operator> <literal type="number">0xff</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>lisat</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>risat</name> <operator>==</operator> <name>false</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>risat</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<macro><name>LOOPBYTE</name><argument_list>(<argument>siglen</argument>)</argument_list></macro>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>rs</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>!=</operator> <literal type="number">0xff</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>risat</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>lu_l</name> <operator>=</operator> <call><name>LTG_GETLNODE</name><argument_list>(<argument><expr><call><name>GETENTRY</name><argument_list>(<argument><expr><name>entryvec</name></expr></argument>, <argument><expr><name><name>array</name><index>[<expr><name>FirstOffsetNumber</name></expr>]</index></name><operator>.</operator><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>siglen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>lu</name> <operator>=</operator> <call><name>ltree_gist_alloc</name><argument_list>(<argument><expr><name>lisat</name></expr></argument>, <argument><expr><name>ls</name></expr></argument>, <argument><expr><name>siglen</name></expr></argument>, <argument><expr><name>lu_l</name></expr></argument>, <argument><expr><name>lu_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ru_l</name> <operator>=</operator> <call><name>LTG_GETLNODE</name><argument_list>(<argument><expr><call><name>GETENTRY</name><argument_list>(<argument><expr><name>entryvec</name></expr></argument>, <argument><expr><name><name>array</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>maxoff</name> <operator>-</operator> <name>FirstOffsetNumber</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>]</index></name><operator>.</operator><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>siglen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ru</name> <operator>=</operator> <call><name>ltree_gist_alloc</name><argument_list>(<argument><expr><name>risat</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>, <argument><expr><name>siglen</name></expr></argument>, <argument><expr><name>ru_l</name></expr></argument>, <argument><expr><name>ru_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>spl_ldatum</name></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>lu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>spl_rdatum</name></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>ru</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>gist_isparent</name><parameter_list>(<parameter><decl><type><name>ltree_gist</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>ltree</name> <modifier>*</modifier></type><name>query</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>siglen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int32</name></type>		<name>numlevel</name> <init>= <expr><name><name>query</name><operator>-&gt;</operator><name>numlevel</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>query</name><operator>-&gt;</operator><name>numlevel</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>numlevel</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>ltree_compare</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><call><name>LTG_GETLNODE</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>siglen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
			<call><name>ltree_compare</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><call><name>LTG_GETRNODE</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>siglen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>numlevel</name></name> <operator>=</operator> <name>numlevel</name></expr>;</expr_stmt>
			<return>return <expr><name>true</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>numlevel</name></name> <operator>=</operator> <name>numlevel</name></expr>;</expr_stmt>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ltree</name> <modifier>*</modifier></type>
<name>copy_ltree</name><parameter_list>(<parameter><decl><type><name>ltree</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ltree</name>	   <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>ltree</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>dst</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>gist_ischild</name><parameter_list>(<parameter><decl><type><name>ltree_gist</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>ltree</name> <modifier>*</modifier></type><name>query</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>siglen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ltree</name>	   <modifier>*</modifier></type><name>left</name> <init>= <expr><call><name>copy_ltree</name><argument_list>(<argument><expr><call><name>LTG_GETLNODE</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>siglen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ltree</name>	   <modifier>*</modifier></type><name>right</name> <init>= <expr><call><name>copy_ltree</name><argument_list>(<argument><expr><call><name>LTG_GETRNODE</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>siglen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>res</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>left</name><operator>-&gt;</operator><name>numlevel</name></name> <operator>&gt;</operator> <name><name>query</name><operator>-&gt;</operator><name>numlevel</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>left</name><operator>-&gt;</operator><name>numlevel</name></name> <operator>=</operator> <name><name>query</name><operator>-&gt;</operator><name>numlevel</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>ltree_compare</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>right</name><operator>-&gt;</operator><name>numlevel</name></name> <operator>&gt;</operator> <name><name>query</name><operator>-&gt;</operator><name>numlevel</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>right</name><operator>-&gt;</operator><name>numlevel</name></name> <operator>=</operator> <name><name>query</name><operator>-&gt;</operator><name>numlevel</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&amp;&amp;</operator> <call><name>ltree_compare</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>gist_qe</name><parameter_list>(<parameter><decl><type><name>ltree_gist</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>lquery</name> <modifier>*</modifier></type><name>query</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>siglen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>lquery_level</name> <modifier>*</modifier></type><name>curq</name> <init>= <expr><call><name>LQUERY_FIRST</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BITVECP</name></type>		<name>sign</name> <init>= <expr><call><name>LTG_SIGN</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>qlen</name> <init>= <expr><name><name>query</name><operator>-&gt;</operator><name>numlevel</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>LTG_ISALLTRUE</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><name>qlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>curq</name><operator>-&gt;</operator><name>numvar</name></name> <operator>&amp;&amp;</operator> <call><name>LQL_CANLOOKSIGN</name><argument_list>(<argument><expr><name>curq</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>bool</name></type>		<name>isexist</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type>			<name>vlen</name> <init>= <expr><name><name>curq</name><operator>-&gt;</operator><name>numvar</name></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>lquery_variant</name> <modifier>*</modifier></type><name>curv</name> <init>= <expr><call><name>LQL_FIRST</name><argument_list>(<argument><expr><name>curq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<while>while <condition>(<expr><name>vlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><call><name>GETBIT</name><argument_list>(<argument><expr><name>sign</name></expr></argument>, <argument><expr><call><name>HASHVAL</name><argument_list>(<argument><expr><name><name>curv</name><operator>-&gt;</operator><name>val</name></name></expr></argument>, <argument><expr><name>siglen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>isexist</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>curv</name> <operator>=</operator> <call><name>LVAR_NEXT</name><argument_list>(<argument><expr><name>curv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>vlen</name><operator>--</operator></expr>;</expr_stmt>
			</block_content>}</block></while>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isexist</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>curq</name> <operator>=</operator> <call><name>LQL_NEXT</name><argument_list>(<argument><expr><name>curq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>qlen</name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>gist_tqcmp</name><parameter_list>(<parameter><decl><type><name>ltree</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>lquery</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ltree_level</name> <modifier>*</modifier></type><name>al</name> <init>= <expr><call><name>LTREE_FIRST</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>lquery_level</name> <modifier>*</modifier></type><name>ql</name> <init>= <expr><call><name>LQUERY_FIRST</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>lquery_variant</name> <modifier>*</modifier></type><name>bl</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>an</name> <init>= <expr><name><name>t</name><operator>-&gt;</operator><name>numlevel</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>bn</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>firstgood</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>an</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>bn</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>bl</name> <operator>=</operator> <call><name>LQL_FIRST</name><argument_list>(<argument><expr><name>ql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name><name>al</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>bl</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>Min</name><argument_list>(<argument><expr><name><name>al</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>bl</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>al</name><operator>-&gt;</operator><name>len</name></name> <operator>!=</operator> <name><name>bl</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name><name>al</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name><name>bl</name><operator>-&gt;</operator><name>len</name></name></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<return>return <expr><name>res</name></expr>;</return></block_content></block></else></if_stmt>
		<expr_stmt><expr><name>an</name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>bn</name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>al</name> <operator>=</operator> <call><name>LEVEL_NEXT</name><argument_list>(<argument><expr><name>al</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ql</name> <operator>=</operator> <call><name>LQL_NEXT</name><argument_list>(<argument><expr><name>ql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><call><name>Min</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>numlevel</name></name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>firstgood</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>q</name><operator>-&gt;</operator><name>firstgood</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>gist_between</name><parameter_list>(<parameter><decl><type><name>ltree_gist</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>lquery</name> <modifier>*</modifier></type><name>query</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>siglen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>query</name><operator>-&gt;</operator><name>firstgood</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>gist_tqcmp</name><argument_list>(<argument><expr><call><name>LTG_GETLNODE</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>siglen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>gist_tqcmp</name><argument_list>(<argument><expr><call><name>LTG_GETRNODE</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>siglen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>LtreeSignature</name>
<block>{
	<decl_stmt><decl><type><name>BITVECP</name></type>		<name>sign</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>siglen</name></decl>;</decl_stmt>
}</block></struct></type> <name>LtreeSignature</name>;</typedef>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>checkcondition_bit</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cxt</name></decl></parameter>, <parameter><decl><type><name>ITEM</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>LtreeSignature</name> <modifier>*</modifier></type><name>sig</name> <init>= <expr><name>cxt</name></expr></init></decl>;</decl_stmt>

	<return>return <expr><ternary><condition><expr><operator>(</operator><call><name>FLG_CANLOOKSIGN</name><argument_list>(<argument><expr><name><name>val</name><operator>-&gt;</operator><name>flag</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><call><name>GETBIT</name><argument_list>(<argument><expr><name><name>sig</name><operator>-&gt;</operator><name>sign</name></name></expr></argument>, <argument><expr><call><name>HASHVAL</name><argument_list>(<argument><expr><name><name>val</name><operator>-&gt;</operator><name>val</name></name></expr></argument>, <argument><expr><name><name>sig</name><operator>-&gt;</operator><name>siglen</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>true</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>gist_qtxt</name><parameter_list>(<parameter><decl><type><name>ltree_gist</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>ltxtquery</name> <modifier>*</modifier></type><name>query</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>siglen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>LtreeSignature</name></type> <name>sig</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>LTG_ISALLTRUE</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>sig</name><operator>.</operator><name>sign</name></name> <operator>=</operator> <call><name>LTG_SIGN</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sig</name><operator>.</operator><name>siglen</name></name> <operator>=</operator> <name>siglen</name></expr>;</expr_stmt>

	<return>return <expr><call><name>ltree_execute</name><argument_list>(<argument><expr><call><name>GETQUERY</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></argument>,
						 <argument><expr><operator>&amp;</operator><name>sig</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
						 <argument><expr><name>checkcondition_bit</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>arrq_cons</name><parameter_list>(<parameter><decl><type><name>ltree_gist</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>_query</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>siglen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>lquery</name>	   <modifier>*</modifier></type><name>query</name> <init>= <expr><operator>(</operator><name>lquery</name> <operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>_query</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>num</name> <init>= <expr><call><name>ArrayGetNItems</name><argument_list>(<argument><expr><call><name>ARR_NDIM</name><argument_list>(<argument><expr><name>_query</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARR_DIMS</name><argument_list>(<argument><expr><name>_query</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>ARR_NDIM</name><argument_list>(<argument><expr><name>_query</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_ARRAY_SUBSCRIPT_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"array must be one-dimensional"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>array_contains_nulls</name><argument_list>(<argument><expr><name>_query</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_NULL_VALUE_NOT_ALLOWED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"array must not contain nulls"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><name>num</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>gist_qe</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>siglen</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>gist_between</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>siglen</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>num</name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>query</name> <operator>=</operator> <call><name>NEXTVAL</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>ltree_consistent</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GISTENTRY</name>  <modifier>*</modifier></type><name>entry</name> <init>= <expr><operator>(</operator><name>GISTENTRY</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>StrategyNumber</name></type> <name>strategy</name> <init>= <expr><operator>(</operator><name>StrategyNumber</name><operator>)</operator> <call><name>PG_GETARG_UINT16</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Oid		subtype = PG_GETARG_OID(3); */</comment>
	<decl_stmt><decl><type><name>bool</name>	   <modifier>*</modifier></type><name>recheck</name> <init>= <expr><operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>siglen</name> <init>= <expr><call><name>LTREE_GET_SIGLEN</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ltree_gist</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><operator>(</operator><name>ltree_gist</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name>	   <modifier>*</modifier></type><name>query</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>res</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* All cases served by this function are exact */</comment>
	<expr_stmt><expr><operator>*</operator><name>recheck</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name>strategy</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>BTLessStrategyNumber</name></expr>:</case>
			<expr_stmt><expr><name>query</name> <operator>=</operator> <call><name>PG_GETARG_LTREE_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><call><name>GIST_LEAF</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then>
				<expr><operator>(</operator><call><name>ltree_compare</name><argument_list>(<argument><expr><operator>(</operator><name>ltree</name> <operator>*</operator><operator>)</operator> <name>query</name></expr></argument>, <argument><expr><call><name>LTG_NODE</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>
				</then><else>:
				<expr><operator>(</operator><call><name>ltree_compare</name><argument_list>(<argument><expr><operator>(</operator><name>ltree</name> <operator>*</operator><operator>)</operator> <name>query</name></expr></argument>, <argument><expr><call><name>LTG_GETLNODE</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>siglen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>BTLessEqualStrategyNumber</name></expr>:</case>
			<expr_stmt><expr><name>query</name> <operator>=</operator> <call><name>PG_GETARG_LTREE_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><call><name>ltree_compare</name><argument_list>(<argument><expr><operator>(</operator><name>ltree</name> <operator>*</operator><operator>)</operator> <name>query</name></expr></argument>, <argument><expr><call><name>LTG_GETLNODE</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>siglen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>BTEqualStrategyNumber</name></expr>:</case>
			<expr_stmt><expr><name>query</name> <operator>=</operator> <call><name>PG_GETARG_LTREE_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>GIST_LEAF</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><call><name>ltree_compare</name><argument_list>(<argument><expr><operator>(</operator><name>ltree</name> <operator>*</operator><operator>)</operator> <name>query</name></expr></argument>, <argument><expr><call><name>LTG_NODE</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><call><name>ltree_compare</name><argument_list>(<argument><expr><operator>(</operator><name>ltree</name> <operator>*</operator><operator>)</operator> <name>query</name></expr></argument>, <argument><expr><call><name>LTG_GETLNODE</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>siglen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal>
					   <operator>&amp;&amp;</operator>
					   <call><name>ltree_compare</name><argument_list>(<argument><expr><operator>(</operator><name>ltree</name> <operator>*</operator><operator>)</operator> <name>query</name></expr></argument>, <argument><expr><call><name>LTG_GETRNODE</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>siglen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<break>break;</break>
		<case>case <expr><name>BTGreaterEqualStrategyNumber</name></expr>:</case>
			<expr_stmt><expr><name>query</name> <operator>=</operator> <call><name>PG_GETARG_LTREE_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><call><name>ltree_compare</name><argument_list>(<argument><expr><operator>(</operator><name>ltree</name> <operator>*</operator><operator>)</operator> <name>query</name></expr></argument>, <argument><expr><call><name>LTG_GETRNODE</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>siglen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>BTGreaterStrategyNumber</name></expr>:</case>
			<expr_stmt><expr><name>query</name> <operator>=</operator> <call><name>PG_GETARG_LTREE_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><call><name>GIST_LEAF</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then>
				<expr><operator>(</operator><call><name>ltree_compare</name><argument_list>(<argument><expr><operator>(</operator><name>ltree</name> <operator>*</operator><operator>)</operator> <name>query</name></expr></argument>, <argument><expr><call><name>LTG_GETRNODE</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>siglen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>
				</then><else>:
				<expr><operator>(</operator><call><name>ltree_compare</name><argument_list>(<argument><expr><operator>(</operator><name>ltree</name> <operator>*</operator><operator>)</operator> <name>query</name></expr></argument>, <argument><expr><call><name>LTG_GETRNODE</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>siglen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">10</literal></expr>:</case>
			<expr_stmt><expr><name>query</name> <operator>=</operator> <call><name>PG_GETARG_LTREE_P_COPY</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><call><name>GIST_LEAF</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then>
				<expr><call><name>inner_isparent</name><argument_list>(<argument><expr><operator>(</operator><name>ltree</name> <operator>*</operator><operator>)</operator> <name>query</name></expr></argument>, <argument><expr><call><name>LTG_NODE</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>
				</then><else>:
				<expr><call><name>gist_isparent</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>(</operator><name>ltree</name> <operator>*</operator><operator>)</operator> <name>query</name></expr></argument>, <argument><expr><name>siglen</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">11</literal></expr>:</case>
			<expr_stmt><expr><name>query</name> <operator>=</operator> <call><name>PG_GETARG_LTREE_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><call><name>GIST_LEAF</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then>
				<expr><call><name>inner_isparent</name><argument_list>(<argument><expr><call><name>LTG_NODE</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>ltree</name> <operator>*</operator><operator>)</operator> <name>query</name></expr></argument>)</argument_list></call></expr>
				</then><else>:
				<expr><call><name>gist_ischild</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>(</operator><name>ltree</name> <operator>*</operator><operator>)</operator> <name>query</name></expr></argument>, <argument><expr><name>siglen</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">12</literal></expr>:</case>
		<case>case <expr><literal type="number">13</literal></expr>:</case>
			<expr_stmt><expr><name>query</name> <operator>=</operator> <call><name>PG_GETARG_LQUERY_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>GIST_LEAF</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>DatumGetBool</name><argument_list>(<argument><expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>ltq_regex</name></expr></argument>,
													   <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><call><name>LTG_NODE</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
													   <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><operator>(</operator><name>lquery</name> <operator>*</operator><operator>)</operator> <name>query</name></expr></argument>)</argument_list></call></expr></argument>
													   )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><call><name>gist_qe</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>(</operator><name>lquery</name> <operator>*</operator><operator>)</operator> <name>query</name></expr></argument>, <argument><expr><name>siglen</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
					   <call><name>gist_between</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>(</operator><name>lquery</name> <operator>*</operator><operator>)</operator> <name>query</name></expr></argument>, <argument><expr><name>siglen</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">14</literal></expr>:</case>
		<case>case <expr><literal type="number">15</literal></expr>:</case>
			<expr_stmt><expr><name>query</name> <operator>=</operator> <call><name>PG_GETARG_LTXTQUERY_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>GIST_LEAF</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>DatumGetBool</name><argument_list>(<argument><expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>ltxtq_exec</name></expr></argument>,
													   <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><call><name>LTG_NODE</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
													   <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><operator>(</operator><name>ltxtquery</name> <operator>*</operator><operator>)</operator> <name>query</name></expr></argument>)</argument_list></call></expr></argument>
													   )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>gist_qtxt</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>(</operator><name>ltxtquery</name> <operator>*</operator><operator>)</operator> <name>query</name></expr></argument>, <argument><expr><name>siglen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">16</literal></expr>:</case>
		<case>case <expr><literal type="number">17</literal></expr>:</case>
			<expr_stmt><expr><name>query</name> <operator>=</operator> <call><name>PG_GETARG_ARRAYTYPE_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>GIST_LEAF</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>DatumGetBool</name><argument_list>(<argument><expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>lt_q_regex</name></expr></argument>,
													   <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><call><name>LTG_NODE</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
													   <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><operator>(</operator><name>ArrayType</name> <operator>*</operator><operator>)</operator> <name>query</name></expr></argument>)</argument_list></call></expr></argument>
													   )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>arrq_cons</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>(</operator><name>ArrayType</name> <operator>*</operator><operator>)</operator> <name>query</name></expr></argument>, <argument><expr><name>siglen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<break>break;</break>
		<default>default:</default>
			<comment type="block">/* internal error */</comment>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized StrategyNumber: %d"</literal></expr></argument>, <argument><expr><name>strategy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>ltree_gist_options</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>local_relopts</name> <modifier>*</modifier></type><name>relopts</name> <init>= <expr><operator>(</operator><name>local_relopts</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>init_local_reloptions</name><argument_list>(<argument><expr><name>relopts</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>LtreeGistOptions</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>add_local_int_reloption</name><argument_list>(<argument><expr><name>relopts</name></expr></argument>, <argument><expr><literal type="string">"siglen"</literal></expr></argument>,
							<argument><expr><literal type="string">"signature length in bytes"</literal></expr></argument>,
							<argument><expr><name>LTREE_SIGLEN_DEFAULT</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>LTREE_SIGLEN_MAX</name></expr></argument>,
							<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>LtreeGistOptions</name></expr></argument>, <argument><expr><name>siglen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
