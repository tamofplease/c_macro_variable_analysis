<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/contrib/ltree/lquery_op.c"><comment type="block">/*
 * op function for ltree and lquery
 * Teodor Sigaev &lt;teodor@stack.net&gt;
 * contrib/ltree/lquery_op.c
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_collation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ltree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/formatting.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ltq_regex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ltq_rregex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>lt_q_regex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>lt_q_rregex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEXTVAL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( (lquery*)( (char*)(x) + INTALIGN( VARSIZE(x) ) ) )</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>getlexeme</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>charlen</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>start</name> <operator>&lt;</operator> <name>end</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>charlen</name> <operator>=</operator> <call><name>pg_mblen</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>t_iseq</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><literal type="char">'_'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>start</name> <operator>+=</operator> <name>charlen</name></expr>;</expr_stmt></block_content></block></while>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>&gt;=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><name>ptr</name> <operator>&lt;</operator> <name>end</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><operator>(</operator><name>charlen</name> <operator>=</operator> <call><name>pg_mblen</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>t_iseq</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="char">'_'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>charlen</name></expr>;</expr_stmt></block_content></block></while>

	<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name>ptr</name> <operator>-</operator> <name>start</name></expr>;</expr_stmt>
	<return>return <expr><name>start</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>compare_subnode</name><parameter_list>(<parameter><decl><type><name>ltree_level</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>qn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>cmpptr</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>anyend</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>endt</name> <init>= <expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name> <operator>+</operator> <name><name>t</name><operator>-&gt;</operator><name>len</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>endq</name> <init>= <expr><name>qn</name> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>tn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>lent</name></decl>,
				<decl><type ref="prev"/><name>lenq</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>isok</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>qn</name> <operator>=</operator> <call><name>getlexeme</name><argument_list>(<argument><expr><name>qn</name></expr></argument>, <argument><expr><name>endq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lenq</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>tn</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>isok</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<while>while <condition>(<expr><operator>(</operator><name>tn</name> <operator>=</operator> <call><name>getlexeme</name><argument_list>(<argument><expr><name>tn</name></expr></argument>, <argument><expr><name>endt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lent</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>lent</name> <operator>==</operator> <name>lenq</name> <operator>||</operator> <operator>(</operator><name>lent</name> <operator>&gt;</operator> <name>lenq</name> <operator>&amp;&amp;</operator> <name>anyend</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
				<call>(<modifier>*</modifier><name>cmpptr</name>) <argument_list>(<argument><expr><name>qn</name></expr></argument>, <argument><expr><name>tn</name></expr></argument>, <argument><expr><name>lenq</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>

				<expr_stmt><expr><name>isok</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>tn</name> <operator>+=</operator> <name>lent</name></expr>;</expr_stmt>
		</block_content>}</block></while>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isok</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>qn</name> <operator>+=</operator> <name>lenq</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>ltree_strncasecmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>al</name> <init>= <expr><call><name>str_tolower</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>DEFAULT_COLLATION_OID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>bl</name> <init>= <expr><call><name>str_tolower</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>DEFAULT_COLLATION_OID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>al</name></expr></argument>, <argument><expr><name>bl</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>al</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>bl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * See if an lquery_level matches an ltree_level
 *
 * This accounts for all flags including LQL_NOT, but does not
 * consider repetition counts.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>checkLevel</name><parameter_list>(<parameter><decl><type><name>lquery_level</name> <modifier>*</modifier></type><name>curq</name></decl></parameter>, <parameter><decl><type><name>ltree_level</name> <modifier>*</modifier></type><name>curt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>lquery_variant</name> <modifier>*</modifier></type><name>curvar</name> <init>= <expr><call><name>LQL_FIRST</name><argument_list>(<argument><expr><name>curq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>success</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>success</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>curq</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>LQL_NOT</name><operator>)</operator></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><name>true</name></expr></else></ternary></expr>;</expr_stmt>

	<comment type="block">/* numvar == 0 means '*' which matches anything */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>curq</name><operator>-&gt;</operator><name>numvar</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>success</name></expr>;</return></block_content></block></if></if_stmt>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>curq</name><operator>-&gt;</operator><name>numvar</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<function_decl><type><name>int</name></type>			(<modifier>*</modifier><name>cmpptr</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

		<expr_stmt><expr><name>cmpptr</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>curvar</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>LVAR_INCASE</name><operator>)</operator></expr> ?</condition><then> <expr><name>ltree_strncasecmp</name></expr> </then><else>: <expr><name>strncmp</name></expr></else></ternary></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>curvar</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>LVAR_SUBLEXEME</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>compare_subnode</name><argument_list>(<argument><expr><name>curt</name></expr></argument>, <argument><expr><name><name>curvar</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>curvar</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>cmpptr</name></expr></argument>,
								<argument><expr><operator>(</operator><name><name>curvar</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>LVAR_ANYEND</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>success</name></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>curvar</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <name><name>curt</name><operator>-&gt;</operator><name>len</name></name> <operator>||</operator>
				  <operator>(</operator><name><name>curt</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <name><name>curvar</name><operator>-&gt;</operator><name>len</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>curvar</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>LVAR_ANYEND</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
				 <call>(<modifier>*</modifier><name>cmpptr</name>) <argument_list>(<argument><expr><name><name>curvar</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>curt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>curvar</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>success</name></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>curvar</name> <operator>=</operator> <call><name>LVAR_NEXT</name><argument_list>(<argument><expr><name>curvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<return>return <expr><operator>!</operator><name>success</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Try to match an lquery (of qlen items) to an ltree (of tlen items)
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>checkCond</name><parameter_list>(<parameter><decl><type><name>lquery_level</name> <modifier>*</modifier></type><name>curq</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qlen</name></decl></parameter>,
		  <parameter><decl><type><name>ltree_level</name> <modifier>*</modifier></type><name>curt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Since this function recurses, it could be driven to stack overflow */</comment>
	<expr_stmt><expr><call><name>check_stack_depth</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Pathological patterns could take awhile, too */</comment>
	<expr_stmt><expr><call><name>CHECK_FOR_INTERRUPTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Loop while we have query items to consider */</comment>
	<while>while <condition>(<expr><name>qlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>low</name></decl>,
					<decl><type ref="prev"/><name>high</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>lquery_level</name> <modifier>*</modifier></type><name>nextq</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * Get min and max repetition counts for this query item, dealing with
		 * the backwards-compatibility hack that the low/high fields aren't
		 * meaningful for non-'*' items unless LQL_COUNT is set.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>curq</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>LQL_COUNT</name><operator>)</operator> <operator>||</operator> <name><name>curq</name><operator>-&gt;</operator><name>numvar</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>low</name> <operator>=</operator> <name><name>curq</name><operator>-&gt;</operator><name>low</name></name></expr><operator>,</operator> <expr><name>high</name> <operator>=</operator> <name><name>curq</name><operator>-&gt;</operator><name>high</name></name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>low</name> <operator>=</operator> <name>high</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<comment type="block">/*
		 * We may limit "high" to the remaining text length; this avoids
		 * separate tests below.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>high</name> <operator>&gt;</operator> <name>tlen</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>high</name> <operator>=</operator> <name>tlen</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* Fail if a match of required number of items is impossible */</comment>
		<if_stmt><if>if <condition>(<expr><name>high</name> <operator>&lt;</operator> <name>low</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

		<comment type="block">/*
		 * Recursively check the rest of the pattern against each possible
		 * start point following some of this item's match(es).
		 */</comment>
		<expr_stmt><expr><name>nextq</name> <operator>=</operator> <call><name>LQL_NEXT</name><argument_list>(<argument><expr><name>curq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>qlen</name><operator>--</operator></expr>;</expr_stmt>

		<for>for <control>(<init><decl><type><name>int</name></type> <name>matchcnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>matchcnt</name> <operator>&lt;</operator> <name>high</name></expr>;</condition> <incr><expr><name>matchcnt</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<comment type="block">/*
			 * If we've consumed an acceptable number of matches of this item,
			 * and the rest of the pattern matches beginning here, we're good.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name>matchcnt</name> <operator>&gt;=</operator> <name>low</name> <operator>&amp;&amp;</operator> <call><name>checkCond</name><argument_list>(<argument><expr><name>nextq</name></expr></argument>, <argument><expr><name>qlen</name></expr></argument>, <argument><expr><name>curt</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

			<comment type="block">/*
			 * Otherwise, try to match one more text item to this query item.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>checkLevel</name><argument_list>(<argument><expr><name>curq</name></expr></argument>, <argument><expr><name>curt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>curt</name> <operator>=</operator> <call><name>LEVEL_NEXT</name><argument_list>(<argument><expr><name>curt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>tlen</name><operator>--</operator></expr>;</expr_stmt>
		</block_content>}</block></for>

		<comment type="block">/*
		 * Once we've consumed "high" matches, we can succeed only if the rest
		 * of the pattern matches beginning here.  Loop around (if you prefer,
		 * think of this as tail recursion).
		 */</comment>
		<expr_stmt><expr><name>curq</name> <operator>=</operator> <name>nextq</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="block">/*
	 * Once we're out of query items, we match only if there's no remaining
	 * text either.
	 */</comment>
	<return>return <expr><operator>(</operator><name>tlen</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>ltq_regex</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ltree</name>	   <modifier>*</modifier></type><name>tree</name> <init>= <expr><call><name>PG_GETARG_LTREE_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>lquery</name>	   <modifier>*</modifier></type><name>query</name> <init>= <expr><call><name>PG_GETARG_LQUERY_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>res</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>checkCond</name><argument_list>(<argument><expr><call><name>LQUERY_FIRST</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>query</name><operator>-&gt;</operator><name>numlevel</name></name></expr></argument>,
					<argument><expr><call><name>LTREE_FIRST</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>tree</name><operator>-&gt;</operator><name>numlevel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>ltq_rregex</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>PG_RETURN_DATUM</name><argument_list>(<argument><expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>ltq_regex</name></expr></argument>,
										<argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
										<argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>
										)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>lt_q_regex</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ltree</name>	   <modifier>*</modifier></type><name>tree</name> <init>= <expr><call><name>PG_GETARG_LTREE_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ArrayType</name>  <modifier>*</modifier></type><name>_query</name> <init>= <expr><call><name>PG_GETARG_ARRAYTYPE_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>lquery</name>	   <modifier>*</modifier></type><name>query</name> <init>= <expr><operator>(</operator><name>lquery</name> <operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>_query</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>res</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>num</name> <init>= <expr><call><name>ArrayGetNItems</name><argument_list>(<argument><expr><call><name>ARR_NDIM</name><argument_list>(<argument><expr><name>_query</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARR_DIMS</name><argument_list>(<argument><expr><name>_query</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>ARR_NDIM</name><argument_list>(<argument><expr><name>_query</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_ARRAY_SUBSCRIPT_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"array must be one-dimensional"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>array_contains_nulls</name><argument_list>(<argument><expr><name>_query</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_NULL_VALUE_NOT_ALLOWED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"array must not contain nulls"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><name>num</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>DatumGetBool</name><argument_list>(<argument><expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>ltq_regex</name></expr></argument>,
											 <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>

			<expr_stmt><expr><name>res</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>num</name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>query</name> <operator>=</operator> <call><name>NEXTVAL</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>_query</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>lt_q_rregex</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>PG_RETURN_DATUM</name><argument_list>(<argument><expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>lt_q_regex</name></expr></argument>,
										<argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
										<argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>
										)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
