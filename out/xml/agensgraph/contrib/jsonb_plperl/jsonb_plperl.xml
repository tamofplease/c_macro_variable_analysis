<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/contrib/jsonb_plperl/jsonb_plperl.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"plperl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"plperl_helpers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/fmgrprotos.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/jsonb.h"</cpp:file></cpp:include>

<expr_stmt><expr><name>PG_MODULE_MAGIC</name></expr>;</expr_stmt>

<function_decl><type><specifier>static</specifier> <name>SV</name>  <modifier>*</modifier></type><name>Jsonb_to_SV</name><parameter_list>(<parameter><decl><type><name>JsonbContainer</name> <modifier>*</modifier></type><name>jsonb</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>JsonbValue</name> <modifier>*</modifier></type><name>SV_to_JsonbValue</name><parameter_list>(<parameter><decl><type><name>SV</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>JsonbParseState</name> <modifier>*</modifier><modifier>*</modifier></type><name>ps</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_elem</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><specifier>static</specifier> <name>SV</name>  <modifier>*</modifier></type>
<name>JsonbValue_to_SV</name><parameter_list>(<parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>jbv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>dTHX</name></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name><name>jbv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>jbvBinary</name></expr>:</case>
			<return>return <expr><call><name>Jsonb_to_SV</name><argument_list>(<argument><expr><name><name>jbv</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>binary</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</return>

		<case>case <expr><name>jbvNumeric</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>DatumGetCString</name><argument_list>(<argument><expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>numeric_out</name></expr></argument>,
																	  <argument><expr><call><name>NumericGetDatum</name><argument_list>(<argument><expr><name><name>jbv</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>numeric</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>SV</name>		   <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>newSVnv</name><argument_list>(<argument><expr><call><name>SvNV</name><argument_list>(<argument><expr><call><name>cstr2sv</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>result</name></expr>;</return>
			</block_content>}</block>

		<case>case <expr><name>jbvString</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>pnstrdup</name><argument_list>(<argument><expr><name><name>jbv</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>val</name></name></expr></argument>,
										   <argument><expr><name><name>jbv</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>SV</name>		   <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>cstr2sv</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>result</name></expr>;</return>
			</block_content>}</block>

		<case>case <expr><name>jbvBool</name></expr>:</case>
			<return>return <expr><call><name>newSVnv</name><argument_list>(<argument><expr><call><name>SvNV</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>jbv</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>boolean</name></name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>PL_sv_yes</name></expr> </then><else>: <expr><operator>&amp;</operator><name>PL_sv_no</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

		<case>case <expr><name>jbvNull</name></expr>:</case>
			<return>return <expr><call><name>newSV</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unexpected jsonb value type: %d"</literal></expr></argument>, <argument><expr><name><name>jbv</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SV</name>  <modifier>*</modifier></type>
<name>Jsonb_to_SV</name><parameter_list>(<parameter><decl><type><name>JsonbContainer</name> <modifier>*</modifier></type><name>jsonb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>dTHX</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>JsonbValue</name></type>	<name>v</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonbIterator</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonbIteratorToken</name></type> <name>r</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>it</name> <operator>=</operator> <call><name>JsonbIteratorInit</name><argument_list>(<argument><expr><name>jsonb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>JsonbIteratorNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name>r</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>WJB_BEGIN_ARRAY</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>.</operator><name>val</name><operator>.</operator><name>array</name><operator>.</operator><name>rawScalar</name></name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>JsonbValue</name></type>	<name>tmp</name></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>JsonbIteratorNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>WJB_ELEM</name> <operator>||</operator>
					<operator>(</operator><name>r</name> <operator>=</operator> <call><name>JsonbIteratorNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>WJB_END_ARRAY</name> <operator>||</operator>
					<operator>(</operator><name>r</name> <operator>=</operator> <call><name>JsonbIteratorNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>WJB_DONE</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unexpected jsonb token: %d"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<return>return <expr><call><name>JsonbValue_to_SV</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<decl_stmt><decl><type><name>AV</name>		   <modifier>*</modifier></type><name>av</name> <init>= <expr><call><name>newAV</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

				<while>while <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>JsonbIteratorNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>WJB_DONE</name></expr>)</condition>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>WJB_ELEM</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>av_push</name><argument_list>(<argument><expr><name>av</name></expr></argument>, <argument><expr><call><name>JsonbValue_to_SV</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				</block_content>}</block></while>

				<return>return <expr><call><name>newRV</name><argument_list>(<argument><expr><operator>(</operator><name>SV</name> <operator>*</operator><operator>)</operator> <name>av</name></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></else></if_stmt>

		<case>case <expr><name>WJB_BEGIN_OBJECT</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>HV</name>		   <modifier>*</modifier></type><name>hv</name> <init>= <expr><call><name>newHV</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

				<while>while <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>JsonbIteratorNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>WJB_DONE</name></expr>)</condition>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>WJB_KEY</name></expr>)</condition>
					<block>{<block_content>
						<comment type="block">/* json key in v, json value in val */</comment>
						<decl_stmt><decl><type><name>JsonbValue</name></type>	<name>val</name></decl>;</decl_stmt>

						<if_stmt><if>if <condition>(<expr><call><name>JsonbIteratorNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>WJB_VALUE</name></expr>)</condition>
						<block>{<block_content>
							<decl_stmt><decl><type><name>SV</name>		   <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>JsonbValue_to_SV</name><argument_list>(<argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

							<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>hv_store</name><argument_list>(<argument><expr><name>hv</name></expr></argument>,
											<argument><expr><name><name>v</name><operator>.</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>val</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>len</name></name></expr></argument>,
											<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						</block_content>}</block></if></if_stmt>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></while>

				<return>return <expr><call><name>newRV</name><argument_list>(<argument><expr><operator>(</operator><name>SV</name> <operator>*</operator><operator>)</operator> <name>hv</name></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block>

		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unexpected jsonb token: %d"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>JsonbValue</name> <modifier>*</modifier></type>
<name>AV_to_JsonbValue</name><parameter_list>(<parameter><decl><type><name>AV</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>JsonbParseState</name> <modifier>*</modifier><modifier>*</modifier></type><name>jsonb_state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>dTHX</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>SSize_t</name></type>		<name>pcount</name> <init>= <expr><call><name>av_len</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SSize_t</name></type>		<name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><name>jsonb_state</name></expr></argument>, <argument><expr><name>WJB_BEGIN_ARRAY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pcount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>SV</name>		  <modifier>*</modifier><modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>av_fetch</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>SV_to_JsonbValue</name><argument_list>(<argument><expr><operator>*</operator><name>value</name></expr></argument>, <argument><expr><name>jsonb_state</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><name>jsonb_state</name></expr></argument>, <argument><expr><name>WJB_END_ARRAY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>JsonbValue</name> <modifier>*</modifier></type>
<name>HV_to_JsonbValue</name><parameter_list>(<parameter><decl><type><name>HV</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>JsonbParseState</name> <modifier>*</modifier><modifier>*</modifier></type><name>jsonb_state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>dTHX</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>JsonbValue</name></type>	<name>key</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SV</name>		   <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>kstr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>I32</name></type>			<name>klen</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>jbvString</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><name>jsonb_state</name></expr></argument>, <argument><expr><name>WJB_BEGIN_OBJECT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>hv_iterinit</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>val</name> <operator>=</operator> <call><name>hv_iternextsv</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kstr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>klen</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>key</name><operator>.</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>val</name></name> <operator>=</operator> <call><name>pnstrdup</name><argument_list>(<argument><expr><name>kstr</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>key</name><operator>.</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>klen</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><name>jsonb_state</name></expr></argument>, <argument><expr><name>WJB_KEY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>SV_to_JsonbValue</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>jsonb_state</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><name>jsonb_state</name></expr></argument>, <argument><expr><name>WJB_END_OBJECT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>JsonbValue</name> <modifier>*</modifier></type>
<name>SV_to_JsonbValue</name><parameter_list>(<parameter><decl><type><name>SV</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>JsonbParseState</name> <modifier>*</modifier><modifier>*</modifier></type><name>jsonb_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_elem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>dTHX</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>JsonbValue</name></type>	<name>out</name></decl>;</decl_stmt>			<comment type="block">/* result */</comment>

	<comment type="block">/* Dereference references recursively. */</comment>
	<while>while <condition>(<expr><call><name>SvROK</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>in</name> <operator>=</operator> <call><name>SvRV</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

	<switch>switch <condition>(<expr><call><name>SvTYPE</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>SVt_PVAV</name></expr>:</case>
			<return>return <expr><call><name>AV_to_JsonbValue</name><argument_list>(<argument><expr><operator>(</operator><name>AV</name> <operator>*</operator><operator>)</operator> <name>in</name></expr></argument>, <argument><expr><name>jsonb_state</name></expr></argument>)</argument_list></call></expr>;</return>

		<case>case <expr><name>SVt_PVHV</name></expr>:</case>
			<return>return <expr><call><name>HV_to_JsonbValue</name><argument_list>(<argument><expr><operator>(</operator><name>HV</name> <operator>*</operator><operator>)</operator> <name>in</name></expr></argument>, <argument><expr><name>jsonb_state</name></expr></argument>)</argument_list></call></expr>;</return>

		<default>default:</default>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SvOK</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>out</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>jbvNull</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><call><name>SvUOK</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/*
				 * If UV is &gt;=64 bits, we have no better way to make this
				 * happen than converting to text and back.  Given the low
				 * usage of UV in Perl code, it's not clear it's worth working
				 * hard to provide alternate code paths.
				 */</comment>
				<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>strval</name> <init>= <expr><call><name>SvPV_nolen</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><name><name>out</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>jbvNumeric</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>out</name><operator>.</operator><name>val</name><operator>.</operator><name>numeric</name></name> <operator>=</operator>
					<call><name>DatumGetNumeric</name><argument_list>(<argument><expr><call><name>DirectFunctionCall3</name><argument_list>(<argument><expr><name>numeric_in</name></expr></argument>,
														<argument><expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><name>strval</name></expr></argument>)</argument_list></call></expr></argument>,
														<argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>InvalidOid</name></expr></argument>)</argument_list></call></expr></argument>,
														<argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><call><name>SvIOK</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>IV</name></type>			<name>ival</name> <init>= <expr><call><name>SvIV</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><name><name>out</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>jbvNumeric</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>out</name><operator>.</operator><name>val</name><operator>.</operator><name>numeric</name></name> <operator>=</operator>
					<call><name>DatumGetNumeric</name><argument_list>(<argument><expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>int8_numeric</name></expr></argument>,
														<argument><expr><call><name>Int64GetDatum</name><argument_list>(<argument><expr><operator>(</operator><name>int64</name><operator>)</operator> <name>ival</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><call><name>SvNOK</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>double</name></type>		<name>nval</name> <init>= <expr><call><name>SvNV</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<comment type="block">/*
				 * jsonb doesn't allow infinity or NaN (per JSON
				 * specification), but the numeric type that is used for the
				 * storage accepts NaN, so we have to prevent it here
				 * explicitly.  We don't really have to check for isinf()
				 * here, as numeric doesn't allow it and it would be caught
				 * later, but it makes for a nicer error message.
				 */</comment>
				<if_stmt><if>if <condition>(<expr><call><name>isinf</name><argument_list>(<argument><expr><name>nval</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
							<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_NUMERIC_VALUE_OUT_OF_RANGE</name></expr></argument>)</argument_list></call><operator>,</operator>
							 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cannot convert infinity to jsonb"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><call><name>isnan</name><argument_list>(<argument><expr><name>nval</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
							<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_NUMERIC_VALUE_OUT_OF_RANGE</name></expr></argument>)</argument_list></call><operator>,</operator>
							 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cannot convert NaN to jsonb"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<expr_stmt><expr><name><name>out</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>jbvNumeric</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>out</name><operator>.</operator><name>val</name><operator>.</operator><name>numeric</name></name> <operator>=</operator>
					<call><name>DatumGetNumeric</name><argument_list>(<argument><expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>float8_numeric</name></expr></argument>,
														<argument><expr><call><name>Float8GetDatum</name><argument_list>(<argument><expr><name>nval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><call><name>SvPOK</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>out</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>jbvString</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>out</name><operator>.</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>val</name></name> <operator>=</operator> <call><name>sv2cstr</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>out</name><operator>.</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>len</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>out</name><operator>.</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<comment type="block">/*
				 * XXX It might be nice if we could include the Perl type in
				 * the error message.
				 */</comment>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cannot transform this Perl type to jsonb"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>NULL</name></expr>;</return>
			</block_content>}</block></else></if_stmt>
	</block_content>}</block></switch>

	<comment type="block">/* Push result into 'jsonb_state' unless it is a raw scalar. */</comment>
	<return>return <expr><ternary><condition><expr><operator>*</operator><name>jsonb_state</name></expr>
		?</condition><then> <expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><name>jsonb_state</name></expr></argument>, <argument><expr><ternary><condition><expr><name>is_elem</name></expr> ?</condition><then> <expr><name>WJB_ELEM</name></expr> </then><else>: <expr><name>WJB_VALUE</name></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>
		</then><else>: <expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>JsonbValue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>JsonbValue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>jsonb_to_plperl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>Datum</name></type>
<name>jsonb_to_plperl</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>dTHX</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>Jsonb</name>	   <modifier>*</modifier></type><name>in</name> <init>= <expr><call><name>PG_GETARG_JSONB_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SV</name>		   <modifier>*</modifier></type><name>sv</name> <init>= <expr><call><name>Jsonb_to_SV</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>in</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>sv</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>plperl_to_jsonb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>Datum</name></type>
<name>plperl_to_jsonb</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>dTHX</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>JsonbParseState</name> <modifier>*</modifier></type><name>jsonb_state</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SV</name>		   <modifier>*</modifier></type><name>in</name> <init>= <expr><operator>(</operator><name>SV</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>SV_to_JsonbValue</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jsonb_state</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Jsonb</name>	   <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>JsonbValueToJsonb</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_JSONB_P</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
