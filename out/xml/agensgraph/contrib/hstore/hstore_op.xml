<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/contrib/hstore/hstore_op.c"><comment type="block">/*
 * contrib/hstore/hstore_op.c
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup_details.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/hashfn.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"funcapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hstore.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>

<comment type="block">/* old names for C functions */</comment>
<expr_stmt><expr><call><name>HSTORE_POLLUTE</name><argument_list>(<argument><expr><name>hstore_fetchval</name></expr></argument>, <argument><expr><name>fetchval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HSTORE_POLLUTE</name><argument_list>(<argument><expr><name>hstore_exists</name></expr></argument>, <argument><expr><name>exists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HSTORE_POLLUTE</name><argument_list>(<argument><expr><name>hstore_defined</name></expr></argument>, <argument><expr><name>defined</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HSTORE_POLLUTE</name><argument_list>(<argument><expr><name>hstore_delete</name></expr></argument>, <argument><expr><name>delete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HSTORE_POLLUTE</name><argument_list>(<argument><expr><name>hstore_concat</name></expr></argument>, <argument><expr><name>hs_concat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HSTORE_POLLUTE</name><argument_list>(<argument><expr><name>hstore_contains</name></expr></argument>, <argument><expr><name>hs_contains</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HSTORE_POLLUTE</name><argument_list>(<argument><expr><name>hstore_contained</name></expr></argument>, <argument><expr><name>hs_contained</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HSTORE_POLLUTE</name><argument_list>(<argument><expr><name>hstore_akeys</name></expr></argument>, <argument><expr><name>akeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HSTORE_POLLUTE</name><argument_list>(<argument><expr><name>hstore_avals</name></expr></argument>, <argument><expr><name>avals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HSTORE_POLLUTE</name><argument_list>(<argument><expr><name>hstore_skeys</name></expr></argument>, <argument><expr><name>skeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HSTORE_POLLUTE</name><argument_list>(<argument><expr><name>hstore_svals</name></expr></argument>, <argument><expr><name>svals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>HSTORE_POLLUTE</name><argument_list>(<argument><expr><name>hstore_each</name></expr></argument>, <argument><expr><name>each</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<comment type="block">/*
 * We're often finding a sequence of keys in ascending order. The
 * "lowbound" parameter is used to cache lower bounds of searches
 * between calls, based on this assumption. Pass NULL for it for
 * one-off or unordered searches.
 */</comment>
<function><type><name>int</name></type>
<name>hstoreFindKey</name><parameter_list>(<parameter><decl><type><name>HStore</name> <modifier>*</modifier></type><name>hs</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>lowbound</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HEntry</name>	   <modifier>*</modifier></type><name>entries</name> <init>= <expr><call><name>ARRPTR</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>stopLow</name> <init>= <expr><ternary><condition><expr><name>lowbound</name></expr> ?</condition><then> <expr><operator>*</operator><name>lowbound</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>stopHigh</name> <init>= <expr><call><name>HS_COUNT</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>stopMiddle</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>base</name> <init>= <expr><call><name>STRPTR</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>stopLow</name> <operator>&lt;</operator> <name>stopHigh</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>difference</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>stopMiddle</name> <operator>=</operator> <name>stopLow</name> <operator>+</operator> <operator>(</operator><name>stopHigh</name> <operator>-</operator> <name>stopLow</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>HSTORE_KEYLEN</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>stopMiddle</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>keylen</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>difference</name> <operator>=</operator> <call><name>memcmp</name><argument_list>(<argument><expr><call><name>HSTORE_KEY</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>stopMiddle</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>difference</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><call><name>HSTORE_KEYLEN</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>stopMiddle</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>keylen</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>difference</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>lowbound</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>lowbound</name> <operator>=</operator> <name>stopMiddle</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<return>return <expr><name>stopMiddle</name></expr>;</return>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>difference</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>stopLow</name> <operator>=</operator> <name>stopMiddle</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>stopHigh</name> <operator>=</operator> <name>stopMiddle</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>lowbound</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>lowbound</name> <operator>=</operator> <name>stopLow</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>Pairs</name> <modifier>*</modifier></type>
<name>hstoreArrayToPairs</name><parameter_list>(<parameter><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>npairs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Datum</name>	   <modifier>*</modifier></type><name>key_datums</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name>	   <modifier>*</modifier></type><name>key_nulls</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>key_count</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Pairs</name>	   <modifier>*</modifier></type><name>key_pairs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>bufsiz</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>,
				<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>deconstruct_array</name><argument_list>(<argument><expr><name>a</name></expr></argument>,
					  <argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>TYPALIGN_INT</name></expr></argument>,
					  <argument><expr><operator>&amp;</operator><name>key_datums</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key_nulls</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>key_count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>npairs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * A text array uses at least eight bytes per element, so any overflow in
	 * "key_count * sizeof(Pairs)" is small enough for palloc() to catch.
	 * However, credible improvements to the array format could invalidate
	 * that assumption.  Therefore, use an explicit check rather than relying
	 * on palloc() to complain.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>key_count</name> <operator>&gt;</operator> <name>MaxAllocSize</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Pairs</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PROGRAM_LIMIT_EXCEEDED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"number of pairs (%d) exceeds the maximum allowed (%d)"</literal></expr></argument>,
						<argument><expr><name>key_count</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>MaxAllocSize</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Pairs</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>key_pairs</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Pairs</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>key_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>key_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>key_nulls</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>key_pairs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>key</name> <operator>=</operator> <call><name>VARDATA</name><argument_list>(<argument><expr><name><name>key_datums</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>key_pairs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>keylen</name> <operator>=</operator> <call><name>VARSIZE</name><argument_list>(<argument><expr><name><name>key_datums</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>VARHDRSZ</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>key_pairs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>key_pairs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>vallen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>key_pairs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>needfree</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>key_pairs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>isnull</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><operator>*</operator><name>npairs</name> <operator>=</operator> <call><name>hstoreUniquePairs</name><argument_list>(<argument><expr><name>key_pairs</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufsiz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>key_pairs</name></expr>;</return>
</block_content>}</block></function>


<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>hstore_fetchval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>
<name>hstore_fetchval</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HStore</name>	   <modifier>*</modifier></type><name>hs</name> <init>= <expr><call><name>PG_GETARG_HSTORE_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HEntry</name>	   <modifier>*</modifier></type><name>entries</name> <init>= <expr><call><name>ARRPTR</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>idx</name> <init>= <expr><call><name>hstoreFindKey</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
									<argument><expr><call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>HSTORE_VALISNULL</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>cstring_to_text_with_len</name><argument_list>(<argument><expr><call><name>HSTORE_VAL</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><call><name>STRPTR</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>,
								   <argument><expr><call><name>HSTORE_VALLEN</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_TEXT_P</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>hstore_exists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>
<name>hstore_exists</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HStore</name>	   <modifier>*</modifier></type><name>hs</name> <init>= <expr><call><name>PG_GETARG_HSTORE_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>idx</name> <init>= <expr><call><name>hstoreFindKey</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
									<argument><expr><call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>hstore_exists_any</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>
<name>hstore_exists_any</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HStore</name>	   <modifier>*</modifier></type><name>hs</name> <init>= <expr><call><name>PG_GETARG_HSTORE_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ArrayType</name>  <modifier>*</modifier></type><name>keys</name> <init>= <expr><call><name>PG_GETARG_ARRAYTYPE_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>nkeys</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Pairs</name>	   <modifier>*</modifier></type><name>key_pairs</name> <init>= <expr><call><name>hstoreArrayToPairs</name><argument_list>(<argument><expr><name>keys</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nkeys</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>lowbound</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>res</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * we exploit the fact that the pairs list is already sorted into strictly
	 * increasing order to narrow the hstoreFindKey search; each search can
	 * start one entry past the previous "found" entry, or at the lower bound
	 * of the last search.
	 */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nkeys</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>idx</name> <init>= <expr><call><name>hstoreFindKey</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lowbound</name></expr></argument>,
										<argument><expr><name><name>key_pairs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>, <argument><expr><name><name>key_pairs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>keylen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>hstore_exists_all</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>
<name>hstore_exists_all</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HStore</name>	   <modifier>*</modifier></type><name>hs</name> <init>= <expr><call><name>PG_GETARG_HSTORE_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ArrayType</name>  <modifier>*</modifier></type><name>keys</name> <init>= <expr><call><name>PG_GETARG_ARRAYTYPE_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>nkeys</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Pairs</name>	   <modifier>*</modifier></type><name>key_pairs</name> <init>= <expr><call><name>hstoreArrayToPairs</name><argument_list>(<argument><expr><name>keys</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nkeys</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>lowbound</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>res</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * we exploit the fact that the pairs list is already sorted into strictly
	 * increasing order to narrow the hstoreFindKey search; each search can
	 * start one entry past the previous "found" entry, or at the lower bound
	 * of the last search.
	 */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nkeys</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>idx</name> <init>= <expr><call><name>hstoreFindKey</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lowbound</name></expr></argument>,
										<argument><expr><name><name>key_pairs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>, <argument><expr><name><name>key_pairs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>keylen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>hstore_defined</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>
<name>hstore_defined</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HStore</name>	   <modifier>*</modifier></type><name>hs</name> <init>= <expr><call><name>PG_GETARG_HSTORE_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HEntry</name>	   <modifier>*</modifier></type><name>entries</name> <init>= <expr><call><name>ARRPTR</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>idx</name> <init>= <expr><call><name>hstoreFindKey</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
									<argument><expr><call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>res</name> <init>= <expr><operator>(</operator><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>HSTORE_VALISNULL</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>hstore_delete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>
<name>hstore_delete</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HStore</name>	   <modifier>*</modifier></type><name>hs</name> <init>= <expr><call><name>PG_GETARG_HSTORE_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>keyptr</name> <init>= <expr><call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>keylen</name> <init>= <expr><call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HStore</name>	   <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>bufs</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>bufd</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>ptrd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HEntry</name>	   <modifier>*</modifier></type><name>es</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>ed</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>count</name> <init>= <expr><call><name>HS_COUNT</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>outcount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SET_VARSIZE</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HS_SETCOUNT</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* temporary! */</comment>

	<expr_stmt><expr><name>bufs</name> <operator>=</operator> <call><name>STRPTR</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>es</name> <operator>=</operator> <call><name>ARRPTR</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>bufd</name> <operator>=</operator> <name>ptrd</name> <operator>=</operator> <call><name>STRPTR</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ed</name> <operator>=</operator> <call><name>ARRPTR</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>len</name> <init>= <expr><call><name>HSTORE_KEYLEN</name><argument_list>(<argument><expr><name>es</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>ptrs</name> <init>= <expr><call><name>HSTORE_KEY</name><argument_list>(<argument><expr><name>es</name></expr></argument>, <argument><expr><name>bufs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>len</name> <operator>==</operator> <name>keylen</name> <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>ptrs</name></expr></argument>, <argument><expr><name>keyptr</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type>			<name>vallen</name> <init>= <expr><call><name>HSTORE_VALLEN</name><argument_list>(<argument><expr><name>es</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>HS_COPYITEM</name><argument_list>(<argument><expr><name>ed</name></expr></argument>, <argument><expr><name>bufd</name></expr></argument>, <argument><expr><name>ptrd</name></expr></argument>, <argument><expr><name>ptrs</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>vallen</name></expr></argument>,
						<argument><expr><call><name>HSTORE_VALISNULL</name><argument_list>(<argument><expr><name>es</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>++</operator><name>outcount</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>HS_FINALIZE</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>outcount</name></expr></argument>, <argument><expr><name>bufd</name></expr></argument>, <argument><expr><name>ptrd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>hstore_delete_array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>
<name>hstore_delete_array</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HStore</name>	   <modifier>*</modifier></type><name>hs</name> <init>= <expr><call><name>PG_GETARG_HSTORE_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HStore</name>	   <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>hs_count</name> <init>= <expr><call><name>HS_COUNT</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>ps</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>bufd</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>pd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HEntry</name>	   <modifier>*</modifier></type><name>es</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>ed</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>,
				<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>outcount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ArrayType</name>  <modifier>*</modifier></type><name>key_array</name> <init>= <expr><call><name>PG_GETARG_ARRAYTYPE_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>nkeys</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Pairs</name>	   <modifier>*</modifier></type><name>key_pairs</name> <init>= <expr><call><name>hstoreArrayToPairs</name><argument_list>(<argument><expr><name>key_array</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nkeys</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SET_VARSIZE</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HS_SETCOUNT</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>hs_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* temporary! */</comment>

	<expr_stmt><expr><name>ps</name> <operator>=</operator> <call><name>STRPTR</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>es</name> <operator>=</operator> <call><name>ARRPTR</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>bufd</name> <operator>=</operator> <name>pd</name> <operator>=</operator> <call><name>STRPTR</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ed</name> <operator>=</operator> <call><name>ARRPTR</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>nkeys</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* return a copy of the input, unchanged */</comment>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>hs</name></expr></argument>, <argument><expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>HS_FIXSIZE</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>hs_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>HS_SETCOUNT</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>hs_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * this is in effect a merge between hs and key_pairs, both of which are
	 * already sorted by (keylen,key); we take keys from hs only
	 */</comment>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>hs_count</name></expr>;</condition><incr/>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>difference</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;=</operator> <name>nkeys</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>difference</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type>			<name>skeylen</name> <init>= <expr><call><name>HSTORE_KEYLEN</name><argument_list>(<argument><expr><name>es</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>skeylen</name> <operator>==</operator> <name><name>key_pairs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>keylen</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>difference</name> <operator>=</operator> <call><name>memcmp</name><argument_list>(<argument><expr><call><name>HSTORE_KEY</name><argument_list>(<argument><expr><name>es</name></expr></argument>, <argument><expr><name>ps</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>,
									<argument><expr><name><name>key_pairs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>,
									<argument><expr><name><name>key_pairs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>keylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>difference</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>skeylen</name> <operator>&gt;</operator> <name><name>key_pairs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>keylen</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>difference</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>++</operator><name>j</name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>difference</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>++</operator><name>i</name></expr><operator>,</operator> <expr><operator>++</operator><name>j</name></expr>;</expr_stmt></block_content></block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>HS_COPYITEM</name><argument_list>(<argument><expr><name>ed</name></expr></argument>, <argument><expr><name>bufd</name></expr></argument>, <argument><expr><name>pd</name></expr></argument>,
						<argument><expr><call><name>HSTORE_KEY</name><argument_list>(<argument><expr><name>es</name></expr></argument>, <argument><expr><name>ps</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HSTORE_KEYLEN</name><argument_list>(<argument><expr><name>es</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>,
						<argument><expr><call><name>HSTORE_VALLEN</name><argument_list>(<argument><expr><name>es</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HSTORE_VALISNULL</name><argument_list>(<argument><expr><name>es</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>++</operator><name>outcount</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>HS_FINALIZE</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>outcount</name></expr></argument>, <argument><expr><name>bufd</name></expr></argument>, <argument><expr><name>pd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>hstore_delete_hstore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>
<name>hstore_delete_hstore</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HStore</name>	   <modifier>*</modifier></type><name>hs</name> <init>= <expr><call><name>PG_GETARG_HSTORE_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HStore</name>	   <modifier>*</modifier></type><name>hs2</name> <init>= <expr><call><name>PG_GETARG_HSTORE_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HStore</name>	   <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>hs_count</name> <init>= <expr><call><name>HS_COUNT</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>hs2_count</name> <init>= <expr><call><name>HS_COUNT</name><argument_list>(<argument><expr><name>hs2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>ps</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>ps2</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>bufd</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>pd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HEntry</name>	   <modifier>*</modifier></type><name>es</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>es2</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>ed</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>,
				<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>outcount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SET_VARSIZE</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HS_SETCOUNT</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>hs_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* temporary! */</comment>

	<expr_stmt><expr><name>ps</name> <operator>=</operator> <call><name>STRPTR</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>es</name> <operator>=</operator> <call><name>ARRPTR</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ps2</name> <operator>=</operator> <call><name>STRPTR</name><argument_list>(<argument><expr><name>hs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>es2</name> <operator>=</operator> <call><name>ARRPTR</name><argument_list>(<argument><expr><name>hs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>bufd</name> <operator>=</operator> <name>pd</name> <operator>=</operator> <call><name>STRPTR</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ed</name> <operator>=</operator> <call><name>ARRPTR</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>hs2_count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* return a copy of the input, unchanged */</comment>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>hs</name></expr></argument>, <argument><expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>HS_FIXSIZE</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>hs_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>HS_SETCOUNT</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>hs_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * this is in effect a merge between hs and hs2, both of which are already
	 * sorted by (keylen,key); we take keys from hs only; for equal keys, we
	 * take the value from hs unless the values are equal
	 */</comment>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>hs_count</name></expr>;</condition><incr/>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>difference</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;=</operator> <name>hs2_count</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>difference</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type>			<name>skeylen</name> <init>= <expr><call><name>HSTORE_KEYLEN</name><argument_list>(<argument><expr><name>es</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type>			<name>s2keylen</name> <init>= <expr><call><name>HSTORE_KEYLEN</name><argument_list>(<argument><expr><name>es2</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>skeylen</name> <operator>==</operator> <name>s2keylen</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>difference</name> <operator>=</operator> <call><name>memcmp</name><argument_list>(<argument><expr><call><name>HSTORE_KEY</name><argument_list>(<argument><expr><name>es</name></expr></argument>, <argument><expr><name>ps</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>,
									<argument><expr><call><name>HSTORE_KEY</name><argument_list>(<argument><expr><name>es2</name></expr></argument>, <argument><expr><name>ps2</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>,
									<argument><expr><name>skeylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>difference</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>skeylen</name> <operator>&gt;</operator> <name>s2keylen</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>difference</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>++</operator><name>j</name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>difference</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type>			<name>svallen</name> <init>= <expr><call><name>HSTORE_VALLEN</name><argument_list>(<argument><expr><name>es</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type>			<name>snullval</name> <init>= <expr><call><name>HSTORE_VALISNULL</name><argument_list>(<argument><expr><name>es</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>snullval</name> <operator>!=</operator> <call><name>HSTORE_VALISNULL</name><argument_list>(<argument><expr><name>es2</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call> <operator>||</operator>
				<operator>(</operator><operator>!</operator><name>snullval</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>svallen</name> <operator>!=</operator> <call><name>HSTORE_VALLEN</name><argument_list>(<argument><expr><name>es2</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call> <operator>||</operator>
							   <call><name>memcmp</name><argument_list>(<argument><expr><call><name>HSTORE_VAL</name><argument_list>(<argument><expr><name>es</name></expr></argument>, <argument><expr><name>ps</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>,
									  <argument><expr><call><name>HSTORE_VAL</name><argument_list>(<argument><expr><name>es2</name></expr></argument>, <argument><expr><name>ps2</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>,
									  <argument><expr><name>svallen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>HS_COPYITEM</name><argument_list>(<argument><expr><name>ed</name></expr></argument>, <argument><expr><name>bufd</name></expr></argument>, <argument><expr><name>pd</name></expr></argument>,
							<argument><expr><call><name>HSTORE_KEY</name><argument_list>(<argument><expr><name>es</name></expr></argument>, <argument><expr><name>ps</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HSTORE_KEYLEN</name><argument_list>(<argument><expr><name>es</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>,
							<argument><expr><name>svallen</name></expr></argument>, <argument><expr><name>snullval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><operator>++</operator><name>outcount</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><operator>++</operator><name>i</name></expr><operator>,</operator> <expr><operator>++</operator><name>j</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>HS_COPYITEM</name><argument_list>(<argument><expr><name>ed</name></expr></argument>, <argument><expr><name>bufd</name></expr></argument>, <argument><expr><name>pd</name></expr></argument>,
						<argument><expr><call><name>HSTORE_KEY</name><argument_list>(<argument><expr><name>es</name></expr></argument>, <argument><expr><name>ps</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HSTORE_KEYLEN</name><argument_list>(<argument><expr><name>es</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>,
						<argument><expr><call><name>HSTORE_VALLEN</name><argument_list>(<argument><expr><name>es</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HSTORE_VALISNULL</name><argument_list>(<argument><expr><name>es</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>++</operator><name>outcount</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>HS_FINALIZE</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>outcount</name></expr></argument>, <argument><expr><name>bufd</name></expr></argument>, <argument><expr><name>pd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>hstore_concat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>
<name>hstore_concat</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HStore</name>	   <modifier>*</modifier></type><name>s1</name> <init>= <expr><call><name>PG_GETARG_HSTORE_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HStore</name>	   <modifier>*</modifier></type><name>s2</name> <init>= <expr><call><name>PG_GETARG_HSTORE_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HStore</name>	   <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>VARSIZE</name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>ps1</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>ps2</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>bufd</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>pd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HEntry</name>	   <modifier>*</modifier></type><name>es1</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>es2</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>ed</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>s1idx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>s2idx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>s1count</name> <init>= <expr><call><name>HS_COUNT</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>s2count</name> <init>= <expr><call><name>HS_COUNT</name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>outcount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SET_VARSIZE</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>VARSIZE</name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>HSHRDSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HS_SETCOUNT</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>s1count</name> <operator>+</operator> <name>s2count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>s1count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* return a copy of the input, unchanged */</comment>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>HS_FIXSIZE</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>s2count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>HS_SETCOUNT</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>s2count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>s2count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* return a copy of the input, unchanged */</comment>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>HS_FIXSIZE</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>s1count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>HS_SETCOUNT</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>s1count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ps1</name> <operator>=</operator> <call><name>STRPTR</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ps2</name> <operator>=</operator> <call><name>STRPTR</name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>bufd</name> <operator>=</operator> <name>pd</name> <operator>=</operator> <call><name>STRPTR</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>es1</name> <operator>=</operator> <call><name>ARRPTR</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>es2</name> <operator>=</operator> <call><name>ARRPTR</name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ed</name> <operator>=</operator> <call><name>ARRPTR</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * this is in effect a merge between s1 and s2, both of which are already
	 * sorted by (keylen,key); we take s2 for equal keys
	 */</comment>

	<for>for <control>(<init><expr><name>s1idx</name> <operator>=</operator> <name>s2idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>s1idx</name> <operator>&lt;</operator> <name>s1count</name> <operator>||</operator> <name>s2idx</name> <operator>&lt;</operator> <name>s2count</name></expr>;</condition> <incr><expr><operator>++</operator><name>outcount</name></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>difference</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>s1idx</name> <operator>&gt;=</operator> <name>s1count</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>difference</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>s2idx</name> <operator>&gt;=</operator> <name>s2count</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>difference</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type>			<name>s1keylen</name> <init>= <expr><call><name>HSTORE_KEYLEN</name><argument_list>(<argument><expr><name>es1</name></expr></argument>, <argument><expr><name>s1idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type>			<name>s2keylen</name> <init>= <expr><call><name>HSTORE_KEYLEN</name><argument_list>(<argument><expr><name>es2</name></expr></argument>, <argument><expr><name>s2idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>s1keylen</name> <operator>==</operator> <name>s2keylen</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>difference</name> <operator>=</operator> <call><name>memcmp</name><argument_list>(<argument><expr><call><name>HSTORE_KEY</name><argument_list>(<argument><expr><name>es1</name></expr></argument>, <argument><expr><name>ps1</name></expr></argument>, <argument><expr><name>s1idx</name></expr></argument>)</argument_list></call></expr></argument>,
									<argument><expr><call><name>HSTORE_KEY</name><argument_list>(<argument><expr><name>es2</name></expr></argument>, <argument><expr><name>ps2</name></expr></argument>, <argument><expr><name>s2idx</name></expr></argument>)</argument_list></call></expr></argument>,
									<argument><expr><name>s1keylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>difference</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>s1keylen</name> <operator>&gt;</operator> <name>s2keylen</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>difference</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>HS_COPYITEM</name><argument_list>(<argument><expr><name>ed</name></expr></argument>, <argument><expr><name>bufd</name></expr></argument>, <argument><expr><name>pd</name></expr></argument>,
						<argument><expr><call><name>HSTORE_KEY</name><argument_list>(<argument><expr><name>es2</name></expr></argument>, <argument><expr><name>ps2</name></expr></argument>, <argument><expr><name>s2idx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HSTORE_KEYLEN</name><argument_list>(<argument><expr><name>es2</name></expr></argument>, <argument><expr><name>s2idx</name></expr></argument>)</argument_list></call></expr></argument>,
						<argument><expr><call><name>HSTORE_VALLEN</name><argument_list>(<argument><expr><name>es2</name></expr></argument>, <argument><expr><name>s2idx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HSTORE_VALISNULL</name><argument_list>(<argument><expr><name>es2</name></expr></argument>, <argument><expr><name>s2idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>++</operator><name>s2idx</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>difference</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>++</operator><name>s1idx</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>HS_COPYITEM</name><argument_list>(<argument><expr><name>ed</name></expr></argument>, <argument><expr><name>bufd</name></expr></argument>, <argument><expr><name>pd</name></expr></argument>,
						<argument><expr><call><name>HSTORE_KEY</name><argument_list>(<argument><expr><name>es1</name></expr></argument>, <argument><expr><name>ps1</name></expr></argument>, <argument><expr><name>s1idx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HSTORE_KEYLEN</name><argument_list>(<argument><expr><name>es1</name></expr></argument>, <argument><expr><name>s1idx</name></expr></argument>)</argument_list></call></expr></argument>,
						<argument><expr><call><name>HSTORE_VALLEN</name><argument_list>(<argument><expr><name>es1</name></expr></argument>, <argument><expr><name>s1idx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HSTORE_VALISNULL</name><argument_list>(<argument><expr><name>es1</name></expr></argument>, <argument><expr><name>s1idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>++</operator><name>s1idx</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>HS_FINALIZE</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>outcount</name></expr></argument>, <argument><expr><name>bufd</name></expr></argument>, <argument><expr><name>pd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>hstore_slice_to_array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>
<name>hstore_slice_to_array</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HStore</name>	   <modifier>*</modifier></type><name>hs</name> <init>= <expr><call><name>PG_GETARG_HSTORE_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HEntry</name>	   <modifier>*</modifier></type><name>entries</name> <init>= <expr><call><name>ARRPTR</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>STRPTR</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ArrayType</name>  <modifier>*</modifier></type><name>key_array</name> <init>= <expr><call><name>PG_GETARG_ARRAYTYPE_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ArrayType</name>  <modifier>*</modifier></type><name>aout</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name>	   <modifier>*</modifier></type><name>key_datums</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name>	   <modifier>*</modifier></type><name>key_nulls</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name>	   <modifier>*</modifier></type><name>out_datums</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name>	   <modifier>*</modifier></type><name>out_nulls</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>key_count</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>deconstruct_array</name><argument_list>(<argument><expr><name>key_array</name></expr></argument>,
					  <argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>TYPALIGN_INT</name></expr></argument>,
					  <argument><expr><operator>&amp;</operator><name>key_datums</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key_nulls</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>key_count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>aout</name> <operator>=</operator> <call><name>construct_empty_array</name><argument_list>(<argument><expr><name>TEXTOID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>out_datums</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>key_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>out_nulls</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>key_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>key_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>key</name> <init>= <expr><operator>(</operator><name>text</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name><name>key_datums</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>idx</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>key_nulls</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>idx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>hstoreFindKey</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>VARDATA</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>VARHDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>HSTORE_VALISNULL</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>out_nulls</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>out_datums</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name><name>out_datums</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>
				<call><name>PointerGetDatum</name><argument_list>(<argument><expr><call><name>cstring_to_text_with_len</name><argument_list>(<argument><expr><call><name>HSTORE_VAL</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>,
														 <argument><expr><call><name>HSTORE_VALLEN</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>out_nulls</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>aout</name> <operator>=</operator> <call><name>construct_md_array</name><argument_list>(<argument><expr><name>out_datums</name></expr></argument>, <argument><expr><name>out_nulls</name></expr></argument>,
							  <argument><expr><call><name>ARR_NDIM</name><argument_list>(<argument><expr><name>key_array</name></expr></argument>)</argument_list></call></expr></argument>,
							  <argument><expr><call><name>ARR_DIMS</name><argument_list>(<argument><expr><name>key_array</name></expr></argument>)</argument_list></call></expr></argument>,
							  <argument><expr><call><name>ARR_LBOUND</name><argument_list>(<argument><expr><name>key_array</name></expr></argument>)</argument_list></call></expr></argument>,
							  <argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>TYPALIGN_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>aout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>hstore_slice_to_hstore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>
<name>hstore_slice_to_hstore</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HStore</name>	   <modifier>*</modifier></type><name>hs</name> <init>= <expr><call><name>PG_GETARG_HSTORE_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HEntry</name>	   <modifier>*</modifier></type><name>entries</name> <init>= <expr><call><name>ARRPTR</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>STRPTR</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ArrayType</name>  <modifier>*</modifier></type><name>key_array</name> <init>= <expr><call><name>PG_GETARG_ARRAYTYPE_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HStore</name>	   <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>nkeys</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Pairs</name>	   <modifier>*</modifier></type><name>key_pairs</name> <init>= <expr><call><name>hstoreArrayToPairs</name><argument_list>(<argument><expr><name>key_array</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nkeys</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Pairs</name>	   <modifier>*</modifier></type><name>out_pairs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>bufsiz</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>lastidx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>out_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>nkeys</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>hstorePairs</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* hstoreArrayToPairs() checked overflow */</comment>
	<expr_stmt><expr><name>out_pairs</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Pairs</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nkeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>bufsiz</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * we exploit the fact that the pairs list is already sorted into strictly
	 * increasing order to narrow the hstoreFindKey search; each search can
	 * start one entry past the previous "found" entry, or at the lower bound
	 * of the last search.
	 */</comment>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nkeys</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>idx</name> <init>= <expr><call><name>hstoreFindKey</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lastidx</name></expr></argument>,
										<argument><expr><name><name>key_pairs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>, <argument><expr><name><name>key_pairs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>keylen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>out_pairs</name><index>[<expr><name>out_count</name></expr>]</index></name><operator>.</operator><name>key</name> <operator>=</operator> <name><name>key_pairs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>bufsiz</name> <operator>+=</operator> <operator>(</operator><name><name>out_pairs</name><index>[<expr><name>out_count</name></expr>]</index></name><operator>.</operator><name>keylen</name> <operator>=</operator> <name><name>key_pairs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>keylen</name><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>out_pairs</name><index>[<expr><name>out_count</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>=</operator> <call><name>HSTORE_VAL</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>bufsiz</name> <operator>+=</operator> <operator>(</operator><name><name>out_pairs</name><index>[<expr><name>out_count</name></expr>]</index></name><operator>.</operator><name>vallen</name> <operator>=</operator> <call><name>HSTORE_VALLEN</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>out_pairs</name><index>[<expr><name>out_count</name></expr>]</index></name><operator>.</operator><name>isnull</name> <operator>=</operator> <call><name>HSTORE_VALISNULL</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>out_pairs</name><index>[<expr><name>out_count</name></expr>]</index></name><operator>.</operator><name>needfree</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>++</operator><name>out_count</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/*
	 * we don't use hstoreUniquePairs here because we know that the pairs list
	 * is already sorted and uniq'ed.
	 */</comment>

	<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>hstorePairs</name><argument_list>(<argument><expr><name>out_pairs</name></expr></argument>, <argument><expr><name>out_count</name></expr></argument>, <argument><expr><name>bufsiz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>hstore_akeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>
<name>hstore_akeys</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HStore</name>	   <modifier>*</modifier></type><name>hs</name> <init>= <expr><call><name>PG_GETARG_HSTORE_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name>	   <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ArrayType</name>  <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HEntry</name>	   <modifier>*</modifier></type><name>entries</name> <init>= <expr><call><name>ARRPTR</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>base</name> <init>= <expr><call><name>STRPTR</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>count</name> <init>= <expr><call><name>HS_COUNT</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>construct_empty_array</name><argument_list>(<argument><expr><name>TEXTOID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><name>Datum</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>t</name> <init>= <expr><call><name>cstring_to_text_with_len</name><argument_list>(<argument><expr><call><name>HSTORE_KEY</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>,
												 <argument><expr><call><name>HSTORE_KEYLEN</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>construct_array</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>count</name></expr></argument>,
						<argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>TYPALIGN_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>hstore_avals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>
<name>hstore_avals</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HStore</name>	   <modifier>*</modifier></type><name>hs</name> <init>= <expr><call><name>PG_GETARG_HSTORE_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name>	   <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name>	   <modifier>*</modifier></type><name>nulls</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ArrayType</name>  <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HEntry</name>	   <modifier>*</modifier></type><name>entries</name> <init>= <expr><call><name>ARRPTR</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>base</name> <init>= <expr><call><name>STRPTR</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>count</name> <init>= <expr><call><name>HS_COUNT</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>lb</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>construct_empty_array</name><argument_list>(<argument><expr><name>TEXTOID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><name>Datum</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>nulls</name> <operator>=</operator> <operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>HSTORE_VALISNULL</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>nulls</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>cstring_to_text_with_len</name><argument_list>(<argument><expr><call><name>HSTORE_VAL</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>,
														<argument><expr><call><name>HSTORE_VALLEN</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>nulls</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>construct_md_array</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lb</name></expr></argument>,
						   <argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>TYPALIGN_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>ArrayType</name> <modifier>*</modifier></type>
<name>hstore_to_array_internal</name><parameter_list>(<parameter><decl><type><name>HStore</name> <modifier>*</modifier></type><name>hs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ndims</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HEntry</name>	   <modifier>*</modifier></type><name>entries</name> <init>= <expr><call><name>ARRPTR</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>base</name> <init>= <expr><call><name>STRPTR</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>count</name> <init>= <expr><call><name>HS_COUNT</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name><name>out_size</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name><name>lb</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name>	   <modifier>*</modifier></type><name>out_datums</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name>	   <modifier>*</modifier></type><name>out_nulls</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>ndims</name> <operator>&lt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>ndims</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>construct_empty_array</name><argument_list>(<argument><expr><name>TEXTOID</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>out_size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>count</name> <operator>*</operator> <literal type="number">2</literal> <operator>/</operator> <name>ndims</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>out_datums</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>count</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>out_nulls</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>count</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>cstring_to_text_with_len</name><argument_list>(<argument><expr><call><name>HSTORE_KEY</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>,
												   <argument><expr><call><name>HSTORE_KEYLEN</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>out_datums</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>out_nulls</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>HSTORE_VALISNULL</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>out_datums</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>out_nulls</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>cstring_to_text_with_len</name><argument_list>(<argument><expr><call><name>HSTORE_VAL</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>,
														<argument><expr><call><name>HSTORE_VALLEN</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name><name>out_datums</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>out_nulls</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><call><name>construct_md_array</name><argument_list>(<argument><expr><name>out_datums</name></expr></argument>, <argument><expr><name>out_nulls</name></expr></argument>,
							  <argument><expr><name>ndims</name></expr></argument>, <argument><expr><name>out_size</name></expr></argument>, <argument><expr><name>lb</name></expr></argument>,
							  <argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>TYPALIGN_INT</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>hstore_to_array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>
<name>hstore_to_array</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HStore</name>	   <modifier>*</modifier></type><name>hs</name> <init>= <expr><call><name>PG_GETARG_HSTORE_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ArrayType</name>  <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>hstore_to_array_internal</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>hstore_to_matrix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>
<name>hstore_to_matrix</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HStore</name>	   <modifier>*</modifier></type><name>hs</name> <init>= <expr><call><name>PG_GETARG_HSTORE_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ArrayType</name>  <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>hstore_to_array_internal</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Common initialization function for the various set-returning
 * funcs. fcinfo is only passed if the function is to return a
 * composite; it will be used to look up the return tupledesc.
 * we stash a copy of the hstore in the multi-call context in
 * case it was originally toasted. (At least I assume that's why;
 * there was no explanatory comment in the original code. --AG)
 */</comment>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>setup_firstcall</name><parameter_list>(<parameter><decl><type><name>FuncCallContext</name> <modifier>*</modifier></type><name>funcctx</name></decl></parameter>, <parameter><decl><type><name>HStore</name> <modifier>*</modifier></type><name>hs</name></decl></parameter>,
				<parameter><decl><type><name>FunctionCallInfo</name></type> <name>fcinfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HStore</name>	   <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>funcctx</name><operator>-&gt;</operator><name>multi_call_memory_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>st</name> <operator>=</operator> <operator>(</operator><name>HStore</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>hs</name></expr></argument>, <argument><expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>funcctx</name><operator>-&gt;</operator><name>user_fctx</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>st</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>fcinfo</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>tupdesc</name></decl>;</decl_stmt>

		<comment type="block">/* Build a tuple descriptor for our result type */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>get_call_result_type</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tupdesc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TYPEFUNC_COMPOSITE</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"return type must be a row type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>funcctx</name><operator>-&gt;</operator><name>tuple_desc</name></name> <operator>=</operator> <call><name>BlessTupleDesc</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>hstore_skeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>
<name>hstore_skeys</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FuncCallContext</name> <modifier>*</modifier></type><name>funcctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HStore</name>	   <modifier>*</modifier></type><name>hs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>SRF_IS_FIRSTCALL</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>hs</name> <operator>=</operator> <call><name>PG_GETARG_HSTORE_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>funcctx</name> <operator>=</operator> <call><name>SRF_FIRSTCALL_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setup_firstcall</name><argument_list>(<argument><expr><name>funcctx</name></expr></argument>, <argument><expr><name>hs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>funcctx</name> <operator>=</operator> <call><name>SRF_PERCALL_SETUP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>hs</name> <operator>=</operator> <operator>(</operator><name>HStore</name> <operator>*</operator><operator>)</operator> <name><name>funcctx</name><operator>-&gt;</operator><name>user_fctx</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>funcctx</name><operator>-&gt;</operator><name>call_cntr</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <call><name>HS_COUNT</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>HEntry</name>	   <modifier>*</modifier></type><name>entries</name> <init>= <expr><call><name>ARRPTR</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>cstring_to_text_with_len</name><argument_list>(<argument><expr><call><name>HSTORE_KEY</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><call><name>STRPTR</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>,
										<argument><expr><call><name>HSTORE_KEYLEN</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>SRF_RETURN_NEXT</name><argument_list>(<argument><expr><name>funcctx</name></expr></argument>, <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>SRF_RETURN_DONE</name><argument_list>(<argument><expr><name>funcctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>hstore_svals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>
<name>hstore_svals</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FuncCallContext</name> <modifier>*</modifier></type><name>funcctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HStore</name>	   <modifier>*</modifier></type><name>hs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>SRF_IS_FIRSTCALL</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>hs</name> <operator>=</operator> <call><name>PG_GETARG_HSTORE_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>funcctx</name> <operator>=</operator> <call><name>SRF_FIRSTCALL_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setup_firstcall</name><argument_list>(<argument><expr><name>funcctx</name></expr></argument>, <argument><expr><name>hs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>funcctx</name> <operator>=</operator> <call><name>SRF_PERCALL_SETUP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>hs</name> <operator>=</operator> <operator>(</operator><name>HStore</name> <operator>*</operator><operator>)</operator> <name><name>funcctx</name><operator>-&gt;</operator><name>user_fctx</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>funcctx</name><operator>-&gt;</operator><name>call_cntr</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <call><name>HS_COUNT</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>HEntry</name>	   <modifier>*</modifier></type><name>entries</name> <init>= <expr><call><name>ARRPTR</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>HSTORE_VALISNULL</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>ReturnSetInfo</name> <modifier>*</modifier></type><name>rsi</name></decl>;</decl_stmt>

			<comment type="block">/* ugly ugly ugly. why no macro for this? */</comment>
			<expr_stmt><expr><operator>(</operator><name>funcctx</name><operator>)</operator><operator>-&gt;</operator><name>call_cntr</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>rsi</name> <operator>=</operator> <operator>(</operator><name>ReturnSetInfo</name> <operator>*</operator><operator>)</operator> <name><name>fcinfo</name><operator>-&gt;</operator><name>resultinfo</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>rsi</name><operator>-&gt;</operator><name>isDone</name></name> <operator>=</operator> <name>ExprMultipleResult</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>cstring_to_text_with_len</name><argument_list>(<argument><expr><call><name>HSTORE_VAL</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><call><name>STRPTR</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>,
											<argument><expr><call><name>HSTORE_VALLEN</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>SRF_RETURN_NEXT</name><argument_list>(<argument><expr><name>funcctx</name></expr></argument>, <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>SRF_RETURN_DONE</name><argument_list>(<argument><expr><name>funcctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>hstore_contains</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>
<name>hstore_contains</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HStore</name>	   <modifier>*</modifier></type><name>val</name> <init>= <expr><call><name>PG_GETARG_HSTORE_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HStore</name>	   <modifier>*</modifier></type><name>tmpl</name> <init>= <expr><call><name>PG_GETARG_HSTORE_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>res</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HEntry</name>	   <modifier>*</modifier></type><name>te</name> <init>= <expr><call><name>ARRPTR</name><argument_list>(<argument><expr><name>tmpl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>tstr</name> <init>= <expr><call><name>STRPTR</name><argument_list>(<argument><expr><name>tmpl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HEntry</name>	   <modifier>*</modifier></type><name>ve</name> <init>= <expr><call><name>ARRPTR</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>vstr</name> <init>= <expr><call><name>STRPTR</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>tcount</name> <init>= <expr><call><name>HS_COUNT</name><argument_list>(<argument><expr><name>tmpl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>lastidx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * we exploit the fact that keys in "tmpl" are in strictly increasing
	 * order to narrow the hstoreFindKey search; each search can start one
	 * entry past the previous "found" entry, or at the lower bound of the
	 * search
	 */</comment>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>res</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>tcount</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>idx</name> <init>= <expr><call><name>hstoreFindKey</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lastidx</name></expr></argument>,
										<argument><expr><call><name>HSTORE_KEY</name><argument_list>(<argument><expr><name>te</name></expr></argument>, <argument><expr><name>tstr</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>,
										<argument><expr><call><name>HSTORE_KEYLEN</name><argument_list>(<argument><expr><name>te</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>bool</name></type>		<name>nullval</name> <init>= <expr><call><name>HSTORE_VALISNULL</name><argument_list>(<argument><expr><name>te</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type>			<name>vallen</name> <init>= <expr><call><name>HSTORE_VALLEN</name><argument_list>(<argument><expr><name>te</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>nullval</name> <operator>!=</operator> <call><name>HSTORE_VALISNULL</name><argument_list>(<argument><expr><name>ve</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call> <operator>||</operator>
				<operator>(</operator><operator>!</operator><name>nullval</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>vallen</name> <operator>!=</operator> <call><name>HSTORE_VALLEN</name><argument_list>(<argument><expr><name>ve</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call> <operator>||</operator>
							  <call><name>memcmp</name><argument_list>(<argument><expr><call><name>HSTORE_VAL</name><argument_list>(<argument><expr><name>te</name></expr></argument>, <argument><expr><name>tstr</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>,
									 <argument><expr><call><name>HSTORE_VAL</name><argument_list>(<argument><expr><name>ve</name></expr></argument>, <argument><expr><name>vstr</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>,
									 <argument><expr><name>vallen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>res</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>hstore_contained</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>
<name>hstore_contained</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>PG_RETURN_DATUM</name><argument_list>(<argument><expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>hstore_contains</name></expr></argument>,
										<argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
										<argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>
										)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>hstore_each</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>
<name>hstore_each</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FuncCallContext</name> <modifier>*</modifier></type><name>funcctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HStore</name>	   <modifier>*</modifier></type><name>hs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>SRF_IS_FIRSTCALL</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>hs</name> <operator>=</operator> <call><name>PG_GETARG_HSTORE_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>funcctx</name> <operator>=</operator> <call><name>SRF_FIRSTCALL_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setup_firstcall</name><argument_list>(<argument><expr><name>funcctx</name></expr></argument>, <argument><expr><name>hs</name></expr></argument>, <argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>funcctx</name> <operator>=</operator> <call><name>SRF_PERCALL_SETUP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>hs</name> <operator>=</operator> <operator>(</operator><name>HStore</name> <operator>*</operator><operator>)</operator> <name><name>funcctx</name><operator>-&gt;</operator><name>user_fctx</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>funcctx</name><operator>-&gt;</operator><name>call_cntr</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <call><name>HS_COUNT</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>HEntry</name>	   <modifier>*</modifier></type><name>entries</name> <init>= <expr><call><name>ARRPTR</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>STRPTR</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Datum</name></type>		<name>res</name></decl>,
					<decl><type ref="prev"/><name><name>dvalues</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name><name>nulls</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><name>false</name></expr>, <expr><name>false</name></expr>}</block></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tuple</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>cstring_to_text_with_len</name><argument_list>(<argument><expr><call><name>HSTORE_KEY</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>,
										<argument><expr><call><name>HSTORE_KEYLEN</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>dvalues</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>HSTORE_VALISNULL</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>dvalues</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>nulls</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>cstring_to_text_with_len</name><argument_list>(<argument><expr><call><name>HSTORE_VAL</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>,
											<argument><expr><call><name>HSTORE_VALLEN</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>dvalues</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>heap_form_tuple</name><argument_list>(<argument><expr><name><name>funcctx</name><operator>-&gt;</operator><name>tuple_desc</name></name></expr></argument>, <argument><expr><name>dvalues</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>HeapTupleGetDatum</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>SRF_RETURN_NEXT</name><argument_list>(<argument><expr><name>funcctx</name></expr></argument>, <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>SRF_RETURN_DONE</name><argument_list>(<argument><expr><name>funcctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * btree sort order for hstores isn't intended to be useful; we really only
 * care about equality versus non-equality.  we compare the entire string
 * buffer first, then the entry pos array.
 */</comment>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>hstore_cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>
<name>hstore_cmp</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HStore</name>	   <modifier>*</modifier></type><name>hs1</name> <init>= <expr><call><name>PG_GETARG_HSTORE_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HStore</name>	   <modifier>*</modifier></type><name>hs2</name> <init>= <expr><call><name>PG_GETARG_HSTORE_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>hcount1</name> <init>= <expr><call><name>HS_COUNT</name><argument_list>(<argument><expr><name>hs1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>hcount2</name> <init>= <expr><call><name>HS_COUNT</name><argument_list>(<argument><expr><name>hs2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>hcount1</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>hcount2</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * if either operand is empty, and the other is nonempty, the nonempty
		 * one is larger. If both are empty they are equal.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>hcount1</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>hcount2</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* here we know both operands are nonempty */</comment>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>str1</name> <init>= <expr><call><name>STRPTR</name><argument_list>(<argument><expr><name>hs1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>str2</name> <init>= <expr><call><name>STRPTR</name><argument_list>(<argument><expr><name>hs2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>HEntry</name>	   <modifier>*</modifier></type><name>ent1</name> <init>= <expr><call><name>ARRPTR</name><argument_list>(<argument><expr><name>hs1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>HEntry</name>	   <modifier>*</modifier></type><name>ent2</name> <init>= <expr><call><name>ARRPTR</name><argument_list>(<argument><expr><name>hs2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>size_t</name></type>		<name>len1</name> <init>= <expr><call><name>HSE_ENDPOS</name><argument_list>(<argument><expr><name><name>ent1</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>hcount1</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>size_t</name></type>		<name>len2</name> <init>= <expr><call><name>HSE_ENDPOS</name><argument_list>(<argument><expr><name><name>ent2</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>hcount2</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>str1</name></expr></argument>, <argument><expr><name>str2</name></expr></argument>, <argument><expr><call><name>Min</name><argument_list>(<argument><expr><name>len1</name></expr></argument>, <argument><expr><name>len2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>len1</name> <operator>&gt;</operator> <name>len2</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><name>len1</name> <operator>&lt;</operator> <name>len2</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><name>hcount1</name> <operator>&gt;</operator> <name>hcount2</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><name>hcount2</name> <operator>&gt;</operator> <name>hcount1</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
			<else>else
			<block>{<block_content>
				<decl_stmt><decl><type><name>int</name></type>			<name>count</name> <init>= <expr><name>hcount1</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

				<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
					<if_stmt><if>if <condition>(<expr><call><name>HSE_ENDPOS</name><argument_list>(<argument><expr><name><name>ent1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>HSE_ENDPOS</name><argument_list>(<argument><expr><name><name>ent2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator>
						<call><name>HSE_ISNULL</name><argument_list>(<argument><expr><name><name>ent1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>HSE_ISNULL</name><argument_list>(<argument><expr><name><name>ent2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
						<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
				<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>)</condition>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><call><name>HSE_ENDPOS</name><argument_list>(<argument><expr><name><name>ent1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>HSE_ENDPOS</name><argument_list>(<argument><expr><name><name>ent2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
					<if type="elseif">else if <condition>(<expr><call><name>HSE_ENDPOS</name><argument_list>(<argument><expr><name><name>ent1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>HSE_ENDPOS</name><argument_list>(<argument><expr><name><name>ent2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
					<if type="elseif">else if <condition>(<expr><call><name>HSE_ISNULL</name><argument_list>(<argument><expr><name><name>ent1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
					<if type="elseif">else if <condition>(<expr><call><name>HSE_ISNULL</name><argument_list>(<argument><expr><name><name>ent2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>res</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/*
	 * this is a btree support function; this is one of the few places where
	 * memory needs to be explicitly freed.
	 */</comment>
	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>hs1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>hs2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_INT32</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>hstore_eq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>
<name>hstore_eq</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name> <init>= <expr><call><name>DatumGetInt32</name><argument_list>(<argument><expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>hstore_cmp</name></expr></argument>,
														<argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
														<argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>res</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>hstore_ne</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>
<name>hstore_ne</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name> <init>= <expr><call><name>DatumGetInt32</name><argument_list>(<argument><expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>hstore_cmp</name></expr></argument>,
														<argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
														<argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>res</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>hstore_gt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>
<name>hstore_gt</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name> <init>= <expr><call><name>DatumGetInt32</name><argument_list>(<argument><expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>hstore_cmp</name></expr></argument>,
														<argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
														<argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>res</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>hstore_ge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>
<name>hstore_ge</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name> <init>= <expr><call><name>DatumGetInt32</name><argument_list>(<argument><expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>hstore_cmp</name></expr></argument>,
														<argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
														<argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>res</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>hstore_lt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>
<name>hstore_lt</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name> <init>= <expr><call><name>DatumGetInt32</name><argument_list>(<argument><expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>hstore_cmp</name></expr></argument>,
														<argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
														<argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>hstore_le</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>
<name>hstore_le</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name> <init>= <expr><call><name>DatumGetInt32</name><argument_list>(<argument><expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>hstore_cmp</name></expr></argument>,
														<argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
														<argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>res</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>hstore_hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>
<name>hstore_hash</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HStore</name>	   <modifier>*</modifier></type><name>hs</name> <init>= <expr><call><name>PG_GETARG_HSTORE_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>hval</name> <init>= <expr><call><name>hash_any</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>VARDATA</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr></argument>,
								<argument><expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>VARHDRSZ</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * This (along with hstore_hash_extended) is the only place in the code
	 * that cares whether the overall varlena size exactly matches the true
	 * data size; this assertion should be maintained by all the other code,
	 * but we make it explicit here.
	 */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call> <operator>==</operator>
		   <operator>(</operator><ternary><condition><expr><call><name>HS_COUNT</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then>
			<expr><call><name>CALCDATASIZE</name><argument_list>(<argument><expr><call><name>HS_COUNT</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr></argument>,
						 <argument><expr><call><name>HSE_ENDPOS</name><argument_list>(<argument><expr><call><name>ARRPTR</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal> <operator>*</operator> <call><name>HS_COUNT</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>:
			<expr><name>HSHRDSIZE</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_DATUM</name><argument_list>(<argument><expr><name>hval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>hstore_hash_extended</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>
<name>hstore_hash_extended</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HStore</name>	   <modifier>*</modifier></type><name>hs</name> <init>= <expr><call><name>PG_GETARG_HSTORE_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type>		<name>seed</name> <init>= <expr><call><name>PG_GETARG_INT64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>hval</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>hval</name> <operator>=</operator> <call><name>hash_any_extended</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>VARDATA</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr></argument>,
							 <argument><expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>VARHDRSZ</name></expr></argument>,
							 <argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* See comment in hstore_hash */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call> <operator>==</operator>
		   <operator>(</operator><ternary><condition><expr><call><name>HS_COUNT</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then>
			<expr><call><name>CALCDATASIZE</name><argument_list>(<argument><expr><call><name>HS_COUNT</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr></argument>,
						 <argument><expr><call><name>HSE_ENDPOS</name><argument_list>(<argument><expr><call><name>ARRPTR</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal> <operator>*</operator> <call><name>HS_COUNT</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>:
			<expr><name>HSHRDSIZE</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_DATUM</name><argument_list>(<argument><expr><name>hval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
