<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/contrib/sepgsql/hooks.c"><comment type="block">/* -------------------------------------------------------------------------
 *
 * contrib/sepgsql/hooks.c
 *
 * Entrypoints of the hooks in PostgreSQL, and dispatches the callbacks.
 *
 * Copyright (c) 2010-2020, PostgreSQL Global Development Group
 *
 * -------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/dependency.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/objectaccess.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_class.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_database.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_namespace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_proc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/seclabel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sepgsql.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcop/utility.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/queryenvironment.h"</cpp:file></cpp:include>

<expr_stmt><expr><name>PG_MODULE_MAGIC</name></expr>;</expr_stmt>

<comment type="block">/*
 * Declarations
 */</comment>
<function_decl><type><name>void</name></type>		<name>_PG_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * Saved hook entries (if stacked)
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>object_access_hook_type</name></type> <name>next_object_access_hook</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ExecutorCheckPerms_hook_type</name></type> <name>next_exec_check_perms_hook</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ProcessUtility_hook_type</name></type> <name>next_ProcessUtility_hook</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Contextual information on DDL commands
 */</comment>
<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>NodeTag</name></type>		<name>cmdtype</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Name of the template database given by users on CREATE DATABASE
	 * command. Elsewhere (including the case of default) NULL.
	 */</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>createdb_dtemplate</name></decl>;</decl_stmt>
}</block></struct></type>			<name>sepgsql_context_info_t</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>sepgsql_context_info_t</name></type> <name>sepgsql_context_info</name></decl>;</decl_stmt>

<comment type="block">/*
 * GUC: sepgsql.permissive = (on|off)
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>sepgsql_permissive</name></decl>;</decl_stmt>

<function><type><name>bool</name></type>
<name>sepgsql_get_permissive</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>sepgsql_permissive</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * GUC: sepgsql.debug_audit = (on|off)
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>sepgsql_debug_audit</name></decl>;</decl_stmt>

<function><type><name>bool</name></type>
<name>sepgsql_get_debug_audit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>sepgsql_debug_audit</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * sepgsql_object_access
 *
 * Entrypoint of the object_access_hook. This routine performs as
 * a dispatcher of invocation based on access type and object classes.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>sepgsql_object_access</name><parameter_list>(<parameter><decl><type><name>ObjectAccessType</name></type> <name>access</name></decl></parameter>,
					  <parameter><decl><type><name>Oid</name></type> <name>classId</name></decl></parameter>,
					  <parameter><decl><type><name>Oid</name></type> <name>objectId</name></decl></parameter>,
					  <parameter><decl><type><name>int</name></type> <name>subId</name></decl></parameter>,
					  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>next_object_access_hook</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call>(<modifier>*</modifier><name>next_object_access_hook</name>) <argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><name>classId</name></expr></argument>, <argument><expr><name>objectId</name></expr></argument>, <argument><expr><name>subId</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<switch>switch <condition>(<expr><name>access</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>OAT_POST_CREATE</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>ObjectAccessPostCreate</name> <modifier>*</modifier></type><name>pc_arg</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>bool</name></type>		<name>is_internal</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>is_internal</name> <operator>=</operator> <ternary><condition><expr><name>pc_arg</name></expr> ?</condition><then> <expr><name><name>pc_arg</name><operator>-&gt;</operator><name>is_internal</name></name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</expr_stmt>

				<switch>switch <condition>(<expr><name>classId</name></expr>)</condition>
				<block>{<block_content>
					<case>case <expr><name>DatabaseRelationId</name></expr>:</case>
						<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>is_internal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>sepgsql_database_post_create</name><argument_list>(<argument><expr><name>objectId</name></expr></argument>,
													 <argument><expr><name><name>sepgsql_context_info</name><operator>.</operator><name>createdb_dtemplate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>

					<case>case <expr><name>NamespaceRelationId</name></expr>:</case>
						<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>is_internal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>sepgsql_schema_post_create</name><argument_list>(<argument><expr><name>objectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>

					<case>case <expr><name>RelationRelationId</name></expr>:</case>
						<if_stmt><if>if <condition>(<expr><name>subId</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
						<block>{<block_content>
							<comment type="block">/*
							 * The cases in which we want to apply permission
							 * checks on creation of a new relation correspond
							 * to direct user invocation.  For internal uses,
							 * that is creation of toast tables, index rebuild
							 * or ALTER TABLE commands, we need neither
							 * assignment of security labels nor permission
							 * checks.
							 */</comment>
							<if_stmt><if>if <condition>(<expr><name>is_internal</name></expr>)</condition><block type="pseudo"><block_content>
								<break>break;</break></block_content></block></if></if_stmt>

							<expr_stmt><expr><call><name>sepgsql_relation_post_create</name><argument_list>(<argument><expr><name>objectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						</block_content>}</block></if>
						<else>else<block type="pseudo"><block_content>
							<expr_stmt><expr><call><name>sepgsql_attribute_post_create</name><argument_list>(<argument><expr><name>objectId</name></expr></argument>, <argument><expr><name>subId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
						<break>break;</break>

					<case>case <expr><name>ProcedureRelationId</name></expr>:</case>
						<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>is_internal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>sepgsql_proc_post_create</name><argument_list>(<argument><expr><name>objectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>

					<default>default:</default>
						<comment type="block">/* Ignore unsupported object classes */</comment>
						<break>break;</break>
				</block_content>}</block></switch>
			</block_content>}</block>
			<break>break;</break>

		<case>case <expr><name>OAT_DROP</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>ObjectAccessDrop</name> <modifier>*</modifier></type><name>drop_arg</name> <init>= <expr><operator>(</operator><name>ObjectAccessDrop</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

				<comment type="block">/*
				 * No need to apply permission checks on object deletion due
				 * to internal cleanups; such as removal of temporary database
				 * object on session closed.
				 */</comment>
				<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>drop_arg</name><operator>-&gt;</operator><name>dropflags</name></name> <operator>&amp;</operator> <name>PERFORM_DELETION_INTERNAL</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<break>break;</break></block_content></block></if></if_stmt>

				<switch>switch <condition>(<expr><name>classId</name></expr>)</condition>
				<block>{<block_content>
					<case>case <expr><name>DatabaseRelationId</name></expr>:</case>
						<expr_stmt><expr><call><name>sepgsql_database_drop</name><argument_list>(<argument><expr><name>objectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>

					<case>case <expr><name>NamespaceRelationId</name></expr>:</case>
						<expr_stmt><expr><call><name>sepgsql_schema_drop</name><argument_list>(<argument><expr><name>objectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>

					<case>case <expr><name>RelationRelationId</name></expr>:</case>
						<if_stmt><if>if <condition>(<expr><name>subId</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><call><name>sepgsql_relation_drop</name><argument_list>(<argument><expr><name>objectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
						<else>else<block type="pseudo"><block_content>
							<expr_stmt><expr><call><name>sepgsql_attribute_drop</name><argument_list>(<argument><expr><name>objectId</name></expr></argument>, <argument><expr><name>subId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
						<break>break;</break>

					<case>case <expr><name>ProcedureRelationId</name></expr>:</case>
						<expr_stmt><expr><call><name>sepgsql_proc_drop</name><argument_list>(<argument><expr><name>objectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>

					<default>default:</default>
						<comment type="block">/* Ignore unsupported object classes */</comment>
						<break>break;</break>
				</block_content>}</block></switch>
			</block_content>}</block>
			<break>break;</break>

		<case>case <expr><name>OAT_TRUNCATE</name></expr>:</case>
			<block>{<block_content>
				<switch>switch <condition>(<expr><name>classId</name></expr>)</condition>
				<block>{<block_content>
					<case>case <expr><name>RelationRelationId</name></expr>:</case>
						<expr_stmt><expr><call><name>sepgsql_relation_truncate</name><argument_list>(<argument><expr><name>objectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					<default>default:</default>
						<comment type="block">/* Ignore unsupported object classes */</comment>
						<break>break;</break>
				</block_content>}</block></switch>
			</block_content>}</block>
			<break>break;</break>

		<case>case <expr><name>OAT_POST_ALTER</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>ObjectAccessPostAlter</name> <modifier>*</modifier></type><name>pa_arg</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>bool</name></type>		<name>is_internal</name> <init>= <expr><name><name>pa_arg</name><operator>-&gt;</operator><name>is_internal</name></name></expr></init></decl>;</decl_stmt>

				<switch>switch <condition>(<expr><name>classId</name></expr>)</condition>
				<block>{<block_content>
					<case>case <expr><name>DatabaseRelationId</name></expr>:</case>
						<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>is_internal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>sepgsql_database_setattr</name><argument_list>(<argument><expr><name>objectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>

					<case>case <expr><name>NamespaceRelationId</name></expr>:</case>
						<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>is_internal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>sepgsql_schema_setattr</name><argument_list>(<argument><expr><name>objectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>

					<case>case <expr><name>RelationRelationId</name></expr>:</case>
						<if_stmt><if>if <condition>(<expr><name>subId</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
						<block>{<block_content>
							<comment type="block">/*
							 * A case when we don't want to apply permission
							 * check is that relation is internally altered
							 * without user's intention. E.g, no need to check
							 * on toast table/index to be renamed at end of
							 * the table rewrites.
							 */</comment>
							<if_stmt><if>if <condition>(<expr><name>is_internal</name></expr>)</condition><block type="pseudo"><block_content>
								<break>break;</break></block_content></block></if></if_stmt>

							<expr_stmt><expr><call><name>sepgsql_relation_setattr</name><argument_list>(<argument><expr><name>objectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						</block_content>}</block></if>
						<else>else<block type="pseudo"><block_content>
							<expr_stmt><expr><call><name>sepgsql_attribute_setattr</name><argument_list>(<argument><expr><name>objectId</name></expr></argument>, <argument><expr><name>subId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
						<break>break;</break>

					<case>case <expr><name>ProcedureRelationId</name></expr>:</case>
						<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>is_internal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>sepgsql_proc_setattr</name><argument_list>(<argument><expr><name>objectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>

					<default>default:</default>
						<comment type="block">/* Ignore unsupported object classes */</comment>
						<break>break;</break>
				</block_content>}</block></switch>
			</block_content>}</block>
			<break>break;</break>

		<case>case <expr><name>OAT_NAMESPACE_SEARCH</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>ObjectAccessNamespaceSearch</name> <modifier>*</modifier></type><name>ns_arg</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

				<comment type="block">/*
				 * If stacked extension already decided not to allow users to
				 * search this schema, we just stick with that decision.
				 */</comment>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ns_arg</name><operator>-&gt;</operator><name>result</name></name></expr>)</condition><block type="pseudo"><block_content>
					<break>break;</break></block_content></block></if></if_stmt>

				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>classId</name> <operator>==</operator> <name>NamespaceRelationId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>ns_arg</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>ns_arg</name><operator>-&gt;</operator><name>result</name></name>
					<operator>=</operator> <call><name>sepgsql_schema_search</name><argument_list>(<argument><expr><name>objectId</name></expr></argument>,
											<argument><expr><name><name>ns_arg</name><operator>-&gt;</operator><name>ereport_on_violation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>

		<case>case <expr><name>OAT_FUNCTION_EXECUTE</name></expr>:</case>
			<block>{<block_content>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>classId</name> <operator>==</operator> <name>ProcedureRelationId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>sepgsql_proc_execute</name><argument_list>(<argument><expr><name>objectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>

		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unexpected object access type: %d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>access</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/*
 * sepgsql_exec_check_perms
 *
 * Entrypoint of DML permissions
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>sepgsql_exec_check_perms</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>rangeTabls</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>abort</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * If security provider is stacking and one of them replied 'false' at
	 * least, we don't need to check any more.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>next_exec_check_perms_hook</name> <operator>&amp;&amp;</operator>
		<operator>!</operator><call>(<modifier>*</modifier><name>next_exec_check_perms_hook</name>) <argument_list>(<argument><expr><name>rangeTabls</name></expr></argument>, <argument><expr><name>abort</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>sepgsql_dml_privileges</name><argument_list>(<argument><expr><name>rangeTabls</name></expr></argument>, <argument><expr><name>abort</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * sepgsql_utility_command
 *
 * It tries to rough-grained control on utility commands; some of them can
 * break whole of the things if nefarious user would use.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>sepgsql_utility_command</name><parameter_list>(<parameter><decl><type><name>PlannedStmt</name> <modifier>*</modifier></type><name>pstmt</name></decl></parameter>,
						<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>queryString</name></decl></parameter>,
						<parameter><decl><type><name>ProcessUtilityContext</name></type> <name>context</name></decl></parameter>,
						<parameter><decl><type><name>ParamListInfo</name></type> <name>params</name></decl></parameter>,
						<parameter><decl><type><name>QueryEnvironment</name> <modifier>*</modifier></type><name>queryEnv</name></decl></parameter>,
						<parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
						<parameter><decl><type><name>QueryCompletion</name> <modifier>*</modifier></type><name>qc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Node</name>	   <modifier>*</modifier></type><name>parsetree</name> <init>= <expr><name><name>pstmt</name><operator>-&gt;</operator><name>utilityStmt</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sepgsql_context_info_t</name></type> <name>saved_context_info</name> <init>= <expr><name>sepgsql_context_info</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>cell</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<comment type="block">/*
		 * Check command tag to avoid nefarious operations, and save the
		 * current contextual information to determine whether we should apply
		 * permission checks here, or not.
		 */</comment>
		<expr_stmt><expr><name><name>sepgsql_context_info</name><operator>.</operator><name>cmdtype</name></name> <operator>=</operator> <call><name>nodeTag</name><argument_list>(<argument><expr><name>parsetree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<switch>switch <condition>(<expr><call><name>nodeTag</name><argument_list>(<argument><expr><name>parsetree</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>T_CreatedbStmt</name></expr>:</case>

				<comment type="block">/*
				 * We hope to reference name of the source database, but it
				 * does not appear in system catalog. So, we save it here.
				 */</comment>
				<macro><name>foreach</name><argument_list>(<argument>cell</argument>, <argument>((CreatedbStmt *) parsetree)-&gt;options</argument>)</argument_list></macro>
				<block>{<block_content>
					<decl_stmt><decl><type><name>DefElem</name>    <modifier>*</modifier></type><name>defel</name> <init>= <expr><operator>(</operator><name>DefElem</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

					<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>defel</name><operator>-&gt;</operator><name>defname</name></name></expr></argument>, <argument><expr><literal type="string">"template"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><name><name>sepgsql_context_info</name><operator>.</operator><name>createdb_dtemplate</name></name>
							<operator>=</operator> <call><name>strVal</name><argument_list>(<argument><expr><name><name>defel</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block>
				<break>break;</break>

			<case>case <expr><name>T_LoadStmt</name></expr>:</case>

				<comment type="block">/*
				 * We reject LOAD command across the board on enforcing mode,
				 * because a binary module can arbitrarily override hooks.
				 */</comment>
				<if_stmt><if>if <condition>(<expr><call><name>sepgsql_getenforce</name><argument_list>()</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
							<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INSUFFICIENT_PRIVILEGE</name></expr></argument>)</argument_list></call><operator>,</operator>
							 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"SELinux: LOAD is not permitted"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<break>break;</break>
			<default>default:</default>

				<comment type="block">/*
				 * Right now we don't check any other utility commands,
				 * because it needs more detailed information to make access
				 * control decision here, but we don't want to have two parse
				 * and analyze routines individually.
				 */</comment>
				<break>break;</break>
		</block_content>}</block></switch>

		<if_stmt><if>if <condition>(<expr><name>next_ProcessUtility_hook</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call>(<modifier>*</modifier><name>next_ProcessUtility_hook</name>) <argument_list>(<argument><expr><name>pstmt</name></expr></argument>, <argument><expr><name>queryString</name></expr></argument>,
										 <argument><expr><name>context</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>queryEnv</name></expr></argument>,
										 <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>qc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>standard_ProcessUtility</name><argument_list>(<argument><expr><name>pstmt</name></expr></argument>, <argument><expr><name>queryString</name></expr></argument>,
									<argument><expr><name>context</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>queryEnv</name></expr></argument>,
									<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>qc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_FINALLY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<expr_stmt><expr><name>sepgsql_context_info</name> <operator>=</operator> <name>saved_context_info</name></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Module load/unload callback
 */</comment>
<function><type><name>void</name></type>
<name>_PG_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * We allow to load the SE-PostgreSQL module on single-user-mode or
	 * shared_preload_libraries settings only.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>IsUnderPostmaster</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OBJECT_NOT_IN_PREREQUISITE_STATE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"sepgsql must be loaded via shared_preload_libraries"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Check availability of SELinux on the platform. If disabled, we cannot
	 * activate any SE-PostgreSQL features, and we have to skip rest of
	 * initialization.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>is_selinux_enabled</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>sepgsql_set_mode</name><argument_list>(<argument><expr><name>SEPGSQL_MODE_DISABLED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * sepgsql.permissive = (on|off)
	 *
	 * This variable controls performing mode of SE-PostgreSQL on user's
	 * session.
	 */</comment>
	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(<argument><expr><literal type="string">"sepgsql.permissive"</literal></expr></argument>,
							 <argument><expr><literal type="string">"Turn on/off permissive mode in SE-PostgreSQL"</literal></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><operator>&amp;</operator><name>sepgsql_permissive</name></expr></argument>,
							 <argument><expr><name>false</name></expr></argument>,
							 <argument><expr><name>PGC_SIGHUP</name></expr></argument>,
							 <argument><expr><name>GUC_NOT_IN_SAMPLE</name></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * sepgsql.debug_audit = (on|off)
	 *
	 * This variable allows users to turn on/off audit logs on access control
	 * decisions, independent from auditallow/auditdeny setting in the
	 * security policy. We intend to use this option for debugging purpose.
	 */</comment>
	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(<argument><expr><literal type="string">"sepgsql.debug_audit"</literal></expr></argument>,
							 <argument><expr><literal type="string">"Turn on/off debug audit messages"</literal></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><operator>&amp;</operator><name>sepgsql_debug_audit</name></expr></argument>,
							 <argument><expr><name>false</name></expr></argument>,
							 <argument><expr><name>PGC_USERSET</name></expr></argument>,
							 <argument><expr><name>GUC_NOT_IN_SAMPLE</name></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Initialize userspace access vector cache */</comment>
	<expr_stmt><expr><call><name>sepgsql_avc_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Initialize security label of the client and related stuff */</comment>
	<expr_stmt><expr><call><name>sepgsql_init_client_label</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Security label provider hook */</comment>
	<expr_stmt><expr><call><name>register_label_provider</name><argument_list>(<argument><expr><name>SEPGSQL_LABEL_TAG</name></expr></argument>,
							<argument><expr><name>sepgsql_object_relabel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Object access hook */</comment>
	<expr_stmt><expr><name>next_object_access_hook</name> <operator>=</operator> <name>object_access_hook</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>object_access_hook</name> <operator>=</operator> <name>sepgsql_object_access</name></expr>;</expr_stmt>

	<comment type="block">/* DML permission check */</comment>
	<expr_stmt><expr><name>next_exec_check_perms_hook</name> <operator>=</operator> <name>ExecutorCheckPerms_hook</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ExecutorCheckPerms_hook</name> <operator>=</operator> <name>sepgsql_exec_check_perms</name></expr>;</expr_stmt>

	<comment type="block">/* ProcessUtility hook */</comment>
	<expr_stmt><expr><name>next_ProcessUtility_hook</name> <operator>=</operator> <name>ProcessUtility_hook</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ProcessUtility_hook</name> <operator>=</operator> <name>sepgsql_utility_command</name></expr>;</expr_stmt>

	<comment type="block">/* init contextual info */</comment>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sepgsql_context_info</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sepgsql_context_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
