<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/contrib/pgcrypto/internal.c"><comment type="block">/*
 * internal.c
 *		Wrapper for builtin functions
 *
 * Copyright (c) 2001 Marko Kreen
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *	  notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *	  notice, this list of conditions and the following disclaimer in the
 *	  documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * contrib/pgcrypto/internal.c
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"blf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"md5.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"px.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rijndael.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sha1.h"</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MD5_DIGEST_LENGTH</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MD5_DIGEST_LENGTH</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHA1_DIGEST_LENGTH</name></cpp:ifndef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SHA1_RESULTLEN</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHA1_DIGEST_LENGTH</name></cpp:macro> <cpp:value>SHA1_RESULTLEN</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHA1_DIGEST_LENGTH</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHA1_BLOCK_SIZE</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MD5_BLOCK_SIZE</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>init_md5</name><parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>init_sha1</name><parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type>		<name>init_sha224</name><parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type>		<name>init_sha256</name><parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type>		<name>init_sha384</name><parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type>		<name>init_sha512</name><parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>int_digest</name>
<block>{
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
	<function_decl><type><name>void</name></type>		(<modifier>*</modifier><name>init</name>) <parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>int_digest</name></name></type>
			<name><name>int_digest_list</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><literal type="string">"md5"</literal></expr>, <expr><name>init_md5</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"sha1"</literal></expr>, <expr><name>init_sha1</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"sha224"</literal></expr>, <expr><name>init_sha224</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"sha256"</literal></expr>, <expr><name>init_sha256</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"sha384"</literal></expr>, <expr><name>init_sha384</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"sha512"</literal></expr>, <expr><name>init_sha512</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* MD5 */</comment>

<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>int_md5_len</name><parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>MD5_DIGEST_LENGTH</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>int_md5_block_len</name><parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>MD5_BLOCK_SIZE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>int_md5_update</name><parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>dlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MD5_CTX</name>    <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>MD5_CTX</name> <operator>*</operator><operator>)</operator> <name><name>h</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>MD5Update</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>int_md5_reset</name><parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MD5_CTX</name>    <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>MD5_CTX</name> <operator>*</operator><operator>)</operator> <name><name>h</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>MD5Init</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>int_md5_finish</name><parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MD5_CTX</name>    <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>MD5_CTX</name> <operator>*</operator><operator>)</operator> <name><name>h</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>MD5Final</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>int_md5_free</name><parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MD5_CTX</name>    <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>MD5_CTX</name> <operator>*</operator><operator>)</operator> <name><name>h</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>px_memset</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>px_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>px_free</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* SHA1 */</comment>

<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>int_sha1_len</name><parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>SHA1_DIGEST_LENGTH</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>int_sha1_block_len</name><parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>SHA1_BLOCK_SIZE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>int_sha1_update</name><parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>dlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SHA1_CTX</name>   <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>SHA1_CTX</name> <operator>*</operator><operator>)</operator> <name><name>h</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SHA1Update</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>int_sha1_reset</name><parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SHA1_CTX</name>   <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>SHA1_CTX</name> <operator>*</operator><operator>)</operator> <name><name>h</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SHA1Init</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>int_sha1_finish</name><parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SHA1_CTX</name>   <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>SHA1_CTX</name> <operator>*</operator><operator>)</operator> <name><name>h</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SHA1Final</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>int_sha1_free</name><parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SHA1_CTX</name>   <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>SHA1_CTX</name> <operator>*</operator><operator>)</operator> <name><name>h</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>px_memset</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>px_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>px_free</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* init functions */</comment>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>init_md5</name><parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>md</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MD5_CTX</name>    <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>px_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>result_size</name></name> <operator>=</operator> <name>int_md5_len</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>block_size</name></name> <operator>=</operator> <name>int_md5_block_len</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>reset</name></name> <operator>=</operator> <name>int_md5_reset</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>update</name></name> <operator>=</operator> <name>int_md5_update</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>finish</name></name> <operator>=</operator> <name>int_md5_finish</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>int_md5_free</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name>md</name><operator>-&gt;</operator><name>reset</name></name><argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>init_sha1</name><parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>md</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SHA1_CTX</name>   <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>px_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>result_size</name></name> <operator>=</operator> <name>int_sha1_len</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>block_size</name></name> <operator>=</operator> <name>int_sha1_block_len</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>reset</name></name> <operator>=</operator> <name>int_sha1_reset</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>update</name></name> <operator>=</operator> <name>int_sha1_update</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>finish</name></name> <operator>=</operator> <name>int_sha1_finish</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>int_sha1_free</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name>md</name><operator>-&gt;</operator><name>reset</name></name><argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * ciphers generally
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_MAX_KEY</name></cpp:macro>		<cpp:value>(512/8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_MAX_IV</name></cpp:macro>		<cpp:value>(128/8)</cpp:value></cpp:define>

<struct>struct <name>int_ctx</name>
<block>{
	<decl_stmt><decl><type><name>uint8</name></type>		<name><name>keybuf</name><index>[<expr><name>INT_MAX_KEY</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name><name>iv</name><index>[<expr><name>INT_MAX_IV</name></expr>]</index></name></decl>;</decl_stmt>
	<union>union
	<block>{
		<decl_stmt><decl><type><name>BlowfishContext</name></type> <name>bf</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>rijndael_ctx</name></type> <name>rj</name></decl>;</decl_stmt>
	}</block>			<decl><name>ctx</name></decl>;</union>
	<decl_stmt><decl><type><name>unsigned</name></type>	<name>keylen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>is_init</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>mode</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>intctx_free</name><parameter_list>(<parameter><decl><type><name>PX_Cipher</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>int_ctx</name></name> <modifier>*</modifier></type><name>cx</name> <init>= <expr><operator>(</operator>struct <name>int_ctx</name> <operator>*</operator><operator>)</operator> <name><name>c</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>cx</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>px_memset</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>px_free</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>px_free</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * AES/rijndael
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODE_ECB</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODE_CBC</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>rj_block_size</name><parameter_list>(<parameter><decl><type><name>PX_Cipher</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><literal type="number">128</literal> <operator>/</operator> <literal type="number">8</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>rj_key_size</name><parameter_list>(<parameter><decl><type><name>PX_Cipher</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><literal type="number">256</literal> <operator>/</operator> <literal type="number">8</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>rj_iv_size</name><parameter_list>(<parameter><decl><type><name>PX_Cipher</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><literal type="number">128</literal> <operator>/</operator> <literal type="number">8</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>rj_init</name><parameter_list>(<parameter><decl><type><name>PX_Cipher</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>klen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>int_ctx</name></name> <modifier>*</modifier></type><name>cx</name> <init>= <expr><operator>(</operator>struct <name>int_ctx</name> <operator>*</operator><operator>)</operator> <name><name>c</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>klen</name> <operator>&lt;=</operator> <literal type="number">128</literal> <operator>/</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>cx</name><operator>-&gt;</operator><name>keylen</name></name> <operator>=</operator> <literal type="number">128</literal> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>klen</name> <operator>&lt;=</operator> <literal type="number">192</literal> <operator>/</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>cx</name><operator>-&gt;</operator><name>keylen</name></name> <operator>=</operator> <literal type="number">192</literal> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>klen</name> <operator>&lt;=</operator> <literal type="number">256</literal> <operator>/</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>cx</name><operator>-&gt;</operator><name>keylen</name></name> <operator>=</operator> <literal type="number">256</literal> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><name>PXE_KEY_TOO_BIG</name></expr>;</return></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cx</name><operator>-&gt;</operator><name>keybuf</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>iv</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>cx</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><literal type="number">128</literal> <operator>/</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>rj_real_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>int_ctx</name></name> <modifier>*</modifier></type><name>cx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>aes_set_key</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cx</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>rj</name></name></expr></argument>, <argument><expr><name><name>cx</name><operator>-&gt;</operator><name>keybuf</name></name></expr></argument>, <argument><expr><name><name>cx</name><operator>-&gt;</operator><name>keylen</name></name> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>rj_encrypt</name><parameter_list>(<parameter><decl><type><name>PX_Cipher</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>dlen</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>int_ctx</name></name> <modifier>*</modifier></type><name>cx</name> <init>= <expr><operator>(</operator>struct <name>int_ctx</name> <operator>*</operator><operator>)</operator> <name><name>c</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cx</name><operator>-&gt;</operator><name>is_init</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>rj_real_init</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>PXE_CIPHER_INIT</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>dlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>dlen</name> <operator>&amp;</operator> <literal type="number">15</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>PXE_NOTBLOCKSIZE</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>cx</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_CBC</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>aes_cbc_encrypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cx</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>rj</name></name></expr></argument>, <argument><expr><name><name>cx</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>cx</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>, <argument><expr><name>res</name> <operator>+</operator> <name>dlen</name> <operator>-</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>aes_ecb_encrypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cx</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>rj</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>rj_decrypt</name><parameter_list>(<parameter><decl><type><name>PX_Cipher</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>dlen</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>int_ctx</name></name> <modifier>*</modifier></type><name>cx</name> <init>= <expr><operator>(</operator>struct <name>int_ctx</name> <operator>*</operator><operator>)</operator> <name><name>c</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cx</name><operator>-&gt;</operator><name>is_init</name></name></expr>)</condition><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><call><name>rj_real_init</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>PXE_CIPHER_INIT</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>dlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>dlen</name> <operator>&amp;</operator> <literal type="number">15</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>PXE_NOTBLOCKSIZE</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>cx</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MODE_CBC</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>aes_cbc_decrypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cx</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>rj</name></name></expr></argument>, <argument><expr><name><name>cx</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>cx</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>, <argument><expr><name>data</name> <operator>+</operator> <name>dlen</name> <operator>-</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>aes_ecb_decrypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cx</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>rj</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * initializers
 */</comment>

<function><type><specifier>static</specifier> <name>PX_Cipher</name> <modifier>*</modifier></type>
<name>rj_load</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PX_Cipher</name>  <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>int_ctx</name></name> <modifier>*</modifier></type><name>cx</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>px_alloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>block_size</name></name> <operator>=</operator> <name>rj_block_size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>key_size</name></name> <operator>=</operator> <name>rj_key_size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>iv_size</name></name> <operator>=</operator> <name>rj_iv_size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>init</name></name> <operator>=</operator> <name>rj_init</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>encrypt</name></name> <operator>=</operator> <name>rj_encrypt</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>decrypt</name></name> <operator>=</operator> <name>rj_decrypt</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>intctx_free</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>cx</name> <operator>=</operator> <call><name>px_alloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cx</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>cx</name></expr>;</expr_stmt>
	<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * blowfish
 */</comment>

<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>bf_block_size</name><parameter_list>(<parameter><decl><type><name>PX_Cipher</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><literal type="number">8</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>bf_key_size</name><parameter_list>(<parameter><decl><type><name>PX_Cipher</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><literal type="number">448</literal> <operator>/</operator> <literal type="number">8</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>bf_iv_size</name><parameter_list>(<parameter><decl><type><name>PX_Cipher</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><literal type="number">8</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>bf_init</name><parameter_list>(<parameter><decl><type><name>PX_Cipher</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>klen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>int_ctx</name></name> <modifier>*</modifier></type><name>cx</name> <init>= <expr><operator>(</operator>struct <name>int_ctx</name> <operator>*</operator><operator>)</operator> <name><name>c</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>blowfish_setkey</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cx</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>bf</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>iv</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>blowfish_setiv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cx</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>bf</name></name></expr></argument>, <argument><expr><name>iv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>bf_encrypt</name><parameter_list>(<parameter><decl><type><name>PX_Cipher</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>dlen</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>int_ctx</name></name> <modifier>*</modifier></type><name>cx</name> <init>= <expr><operator>(</operator>struct <name>int_ctx</name> <operator>*</operator><operator>)</operator> <name><name>c</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BlowfishContext</name> <modifier>*</modifier></type><name>bfctx</name> <init>= <expr><operator>&amp;</operator><name><name>cx</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>bf</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>dlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>dlen</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>PXE_NOTBLOCKSIZE</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<switch>switch <condition>(<expr><name><name>cx</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>MODE_ECB</name></expr>:</case>
			<expr_stmt><expr><call><name>blowfish_encrypt_ecb</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>, <argument><expr><name>bfctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>MODE_CBC</name></expr>:</case>
			<expr_stmt><expr><call><name>blowfish_encrypt_cbc</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>, <argument><expr><name>bfctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>bf_decrypt</name><parameter_list>(<parameter><decl><type><name>PX_Cipher</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>dlen</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>int_ctx</name></name> <modifier>*</modifier></type><name>cx</name> <init>= <expr><operator>(</operator>struct <name>int_ctx</name> <operator>*</operator><operator>)</operator> <name><name>c</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BlowfishContext</name> <modifier>*</modifier></type><name>bfctx</name> <init>= <expr><operator>&amp;</operator><name><name>cx</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>bf</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>dlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>dlen</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>PXE_NOTBLOCKSIZE</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<switch>switch <condition>(<expr><name><name>cx</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>MODE_ECB</name></expr>:</case>
			<expr_stmt><expr><call><name>blowfish_decrypt_ecb</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>, <argument><expr><name>bfctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>MODE_CBC</name></expr>:</case>
			<expr_stmt><expr><call><name>blowfish_decrypt_cbc</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>, <argument><expr><name>bfctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PX_Cipher</name> <modifier>*</modifier></type>
<name>bf_load</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PX_Cipher</name>  <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>int_ctx</name></name> <modifier>*</modifier></type><name>cx</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>px_alloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>block_size</name></name> <operator>=</operator> <name>bf_block_size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>key_size</name></name> <operator>=</operator> <name>bf_key_size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>iv_size</name></name> <operator>=</operator> <name>bf_iv_size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>init</name></name> <operator>=</operator> <name>bf_init</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>encrypt</name></name> <operator>=</operator> <name>bf_encrypt</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>decrypt</name></name> <operator>=</operator> <name>bf_decrypt</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>intctx_free</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>cx</name> <operator>=</operator> <call><name>px_alloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cx</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>cx</name></expr>;</expr_stmt>
	<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ciphers */</comment>

<function><type><specifier>static</specifier> <name>PX_Cipher</name> <modifier>*</modifier></type>
<name>rj_128_ecb</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>rj_load</name><argument_list>(<argument><expr><name>MODE_ECB</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PX_Cipher</name> <modifier>*</modifier></type>
<name>rj_128_cbc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>rj_load</name><argument_list>(<argument><expr><name>MODE_CBC</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PX_Cipher</name> <modifier>*</modifier></type>
<name>bf_ecb_load</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>bf_load</name><argument_list>(<argument><expr><name>MODE_ECB</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PX_Cipher</name> <modifier>*</modifier></type>
<name>bf_cbc_load</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>bf_load</name><argument_list>(<argument><expr><name>MODE_CBC</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>int_cipher</name>
<block>{
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
	<function_decl><type><name>PX_Cipher</name>  <modifier>*</modifier></type>(<modifier>*</modifier><name>load</name>) <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>int_cipher</name></name></type>
			<name><name>int_ciphers</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><literal type="string">"bf-cbc"</literal></expr>, <expr><name>bf_cbc_load</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"bf-ecb"</literal></expr>, <expr><name>bf_ecb_load</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"aes-128-cbc"</literal></expr>, <expr><name>rj_128_cbc</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"aes-128-ecb"</literal></expr>, <expr><name>rj_128_ecb</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PX_Alias</name></type> <name><name>int_aliases</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><literal type="string">"bf"</literal></expr>, <expr><literal type="string">"bf-cbc"</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"blowfish"</literal></expr>, <expr><literal type="string">"bf-cbc"</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"aes"</literal></expr>, <expr><literal type="string">"aes-128-cbc"</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"aes-ecb"</literal></expr>, <expr><literal type="string">"aes-128-ecb"</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"aes-cbc"</literal></expr>, <expr><literal type="string">"aes-128-cbc"</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"aes-128"</literal></expr>, <expr><literal type="string">"aes-128-cbc"</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"rijndael"</literal></expr>, <expr><literal type="string">"aes-128-cbc"</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"rijndael-128"</literal></expr>, <expr><literal type="string">"aes-128-cbc"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* PUBLIC FUNCTIONS */</comment>

<function><type><name>int</name></type>
<name>px_find_digest</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>PX_MD</name> <modifier>*</modifier><modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>int_digest</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PX_MD</name>	   <modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>int_digest_list</name></expr>;</init> <condition><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>px_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>h</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>init</name></name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt></block_content></block></for>
	<return>return <expr><name>PXE_NO_HASH</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>px_find_cipher</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>PX_Cipher</name> <modifier>*</modifier><modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PX_Cipher</name>  <modifier>*</modifier></type><name>c</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>px_resolve_alias</name><argument_list>(<argument><expr><name>int_aliases</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>int_ciphers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>int_ciphers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>int_ciphers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>load</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt></block_content></block></for>

	<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>PXE_NO_CIPHER</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
