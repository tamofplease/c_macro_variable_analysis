<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/contrib/pgcrypto/pgp-compress.c"><comment type="block">/*
 * pgp-compress.c
 *	  ZIP and ZLIB compression via zlib.
 *
 * Copyright (c) 2005 Marko Kreen
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *	  notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *	  notice, this list of conditions and the following disclaimer in the
 *	  documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * contrib/pgcrypto/pgp-compress.c
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"px.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Compressed pkt writer
 */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBZ</name></cpp:ifdef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zlib.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZIP_OUT_BUF</name></cpp:macro> <cpp:value>8192</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZIP_IN_BLOCK</name></cpp:macro> <cpp:value>8192</cpp:value></cpp:define>

<struct>struct <name>ZipStat</name>
<block>{
	<decl_stmt><decl><type><name>uint8</name></type>		<name>type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>buf_len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>hdr_done</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>z_stream</name></type>	<name>stream</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name><name>buf</name><index>[<expr><name>ZIP_OUT_BUF</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>z_alloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>n_items</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>item_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>px_alloc</name><argument_list>(<argument><expr><name>n_items</name> <operator>*</operator> <name>item_len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>z_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>px_free</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>compress_init</name><parameter_list>(<parameter><decl><type><name>PushFilter</name> <modifier>*</modifier></type><name>next</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>init_arg</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>priv_p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>ZipStat</name></name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGP_Context</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>init_arg</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name>type</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>compress_algo</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>PGP_COMPR_ZLIB</name> <operator>&amp;&amp;</operator> <name>type</name> <operator>!=</operator> <name>PGP_COMPR_ZIP</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>PXE_PGP_UNSUPPORTED_COMPR</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * init
	 */</comment>
	<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>px_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>st</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>st</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>buf_len</name></name> <operator>=</operator> <name>ZIP_OUT_BUF</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>zalloc</name></name> <operator>=</operator> <name>z_alloc</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>zfree</name></name> <operator>=</operator> <name>z_free</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>PGP_COMPR_ZIP</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>deflateInit2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>compress_level</name></name></expr></argument>,
						   <argument><expr><name>Z_DEFLATED</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>Z_DEFAULT_STRATEGY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>deflateInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>compress_level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>Z_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>px_free</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>PXE_PGP_COMPRESSION_ERROR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>priv_p</name> <operator>=</operator> <name>st</name></expr>;</expr_stmt>

	<return>return <expr><name>ZIP_IN_BLOCK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* writes compressed data packet */</comment>

<comment type="block">/* can handle zero-len incoming data, but shouldn't */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>compress_process</name><parameter_list>(<parameter><decl><type><name>PushFilter</name> <modifier>*</modifier></type><name>next</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>,
				<decl><type ref="prev"/><name>n_out</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>ZipStat</name></name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * process data
	 */</comment>
	<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>next_in</name></name> <operator>=</operator> <call><name>unconstify</name><argument_list>(<argument><expr><name>uint8</name> <operator>*</operator></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_in</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_in</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>next_out</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>buf_len</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>deflate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>Z_NO_FLUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>Z_OK</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>PXE_PGP_COMPRESSION_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>n_out</name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>buf_len</name></name> <operator>-</operator> <name><name>st</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_out</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>n_out</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pushf_write</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>n_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>compress_flush</name><parameter_list>(<parameter><decl><type><name>PushFilter</name> <modifier>*</modifier></type><name>next</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>,
				<decl><type ref="prev"/><name>zres</name></decl>,
				<decl><type ref="prev"/><name>n_out</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>ZipStat</name></name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>next_in</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_in</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>next_out</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>buf_len</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>zres</name> <operator>=</operator> <call><name>deflate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>Z_FINISH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>zres</name> <operator>!=</operator> <name>Z_STREAM_END</name> <operator>&amp;&amp;</operator> <name>zres</name> <operator>!=</operator> <name>Z_OK</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>PXE_PGP_COMPRESSION_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>n_out</name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>buf_len</name></name> <operator>-</operator> <name><name>st</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_out</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>n_out</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pushf_write</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>n_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>zres</name> <operator>==</operator> <name>Z_STREAM_END</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>compress_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>ZipStat</name></name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>deflateEnd</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>px_memset</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>st</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>px_free</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PushFilterOps</name></type>
			<name>compress_filter</name> <init>= <expr><block>{
	<expr><name>compress_init</name></expr>, <expr><name>compress_process</name></expr>, <expr><name>compress_flush</name></expr>, <expr><name>compress_free</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type>
<name>pgp_compress_filter</name><parameter_list>(<parameter><decl><type><name>PushFilter</name> <modifier>*</modifier><modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>PGP_Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>PushFilter</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>pushf_create</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>compress_filter</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Decompress
 */</comment>
<struct>struct <name>DecomprData</name>
<block>{
	<decl_stmt><decl><type><name>int</name></type>			<name>buf_len</name></decl>;</decl_stmt>		<comment type="block">/* = ZIP_OUT_BUF */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>buf_data</name></decl>;</decl_stmt>		<comment type="block">/* available data */</comment>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>pos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>z_stream</name></type>	<name>stream</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>eof</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name><name>buf</name><index>[<expr><name>ZIP_OUT_BUF</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>decompress_init</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>priv_p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>PullFilter</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PGP_Context</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>DecomprData</name></name> <modifier>*</modifier></type><name>dec</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>compress_algo</name></name> <operator>!=</operator> <name>PGP_COMPR_ZLIB</name>
		<operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>compress_algo</name></name> <operator>!=</operator> <name>PGP_COMPR_ZIP</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>PXE_PGP_UNSUPPORTED_COMPR</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>dec</name> <operator>=</operator> <call><name>px_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>dec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>dec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>buf_len</name></name> <operator>=</operator> <name>ZIP_OUT_BUF</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>priv_p</name> <operator>=</operator> <name>dec</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>zalloc</name></name> <operator>=</operator> <name>z_alloc</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>zfree</name></name> <operator>=</operator> <name>z_free</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>compress_algo</name></name> <operator>==</operator> <name>PGP_COMPR_ZIP</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>inflateInit2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dec</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>inflateInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dec</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>Z_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>px_free</name><argument_list>(<argument><expr><name>dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>px_debug</name><argument_list>(<argument><expr><literal type="string">"decompress_init: inflateInit error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>PXE_PGP_COMPRESSION_ERROR</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>decompress_read</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name>PullFilter</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,
				<parameter><decl><type><name>uint8</name> <modifier>*</modifier><modifier>*</modifier></type><name>data_p</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>flush</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>DecomprData</name></name> <modifier>*</modifier></type><name>dec</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>

<label><name>restart</name>:</label>
	<if_stmt><if>if <condition>(<expr><name><name>dec</name><operator>-&gt;</operator><name>buf_data</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name><name>dec</name><operator>-&gt;</operator><name>buf_data</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>buf_data</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><operator>*</operator><name>data_p</name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>buf_data</name></name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
		<return>return <expr><name>len</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>dec</name><operator>-&gt;</operator><name>eof</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>dec</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_in</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pullf_read</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">8192</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>next_in</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_in</name></name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>next_out</name></name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>buf_len</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Z_SYNC_FLUSH is tell zlib to output as much as possible. It should do
	 * it anyway (Z_NO_FLUSH), but seems to reserve the right not to.  So lets
	 * follow the API.
	 */</comment>
	<expr_stmt><expr><name>flush</name> <operator>=</operator> <ternary><condition><expr><name><name>dec</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_in</name></name></expr> ?</condition><then> <expr><name>Z_SYNC_FLUSH</name></expr> </then><else>: <expr><name>Z_FINISH</name></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>inflate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dec</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>flush</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>Z_OK</name> <operator>&amp;&amp;</operator> <name>res</name> <operator>!=</operator> <name>Z_STREAM_END</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>px_debug</name><argument_list>(<argument><expr><literal type="string">"decompress_read: inflate error: %d"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>PXE_PGP_CORRUPT_DATA</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>buf_data</name></name> <operator>=</operator> <name><name>dec</name><operator>-&gt;</operator><name>buf_len</name></name> <operator>-</operator> <name><name>dec</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_out</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>Z_STREAM_END</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * A stream must be terminated by a normal packet.  If the last stream
		 * packet in the source stream is a full packet, a normal empty packet
		 * must follow.  Since the underlying packet reader doesn't know that
		 * the compressed stream has been ended, we need to to consume the
		 * terminating packet here.  This read does not harm even if the
		 * stream has already ended.
		 */</comment>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pullf_read</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>res</name></expr>;</return></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>res</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>px_debug</name><argument_list>(<argument><expr><literal type="string">"decompress_read: extra bytes after end of stream"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>PXE_PGP_CORRUPT_DATA</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>dec</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<goto>goto <name>restart</name>;</goto>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>decompress_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>DecomprData</name></name> <modifier>*</modifier></type><name>dec</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>inflateEnd</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dec</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>px_memset</name><argument_list>(<argument><expr><name>dec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>dec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>px_free</name><argument_list>(<argument><expr><name>dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PullFilterOps</name></type>
			<name>decompress_filter</name> <init>= <expr><block>{
	<expr><name>decompress_init</name></expr>, <expr><name>decompress_read</name></expr>, <expr><name>decompress_free</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type>
<name>pgp_decompress_filter</name><parameter_list>(<parameter><decl><type><name>PullFilter</name> <modifier>*</modifier><modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>PGP_Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>PullFilter</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>pullf_create</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>decompress_filter</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>							<comment type="block">/* !HAVE_LIBZ */</comment>

<function><type><name>int</name></type>
<name>pgp_compress_filter</name><parameter_list>(<parameter><decl><type><name>PushFilter</name> <modifier>*</modifier><modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>PGP_Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>PushFilter</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>PXE_PGP_UNSUPPORTED_COMPR</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>pgp_decompress_filter</name><parameter_list>(<parameter><decl><type><name>PullFilter</name> <modifier>*</modifier><modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>PGP_Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>PullFilter</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>PXE_PGP_UNSUPPORTED_COMPR</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
