<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/contrib/pgcrypto/px-crypt.c"><comment type="block">/*
 * px-crypt.c
 *		Wrapper for various crypt algorithms.
 *
 * Copyright (c) 2001 Marko Kreen
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *	  notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *	  notice, this list of conditions and the following disclaimer in the
 *	  documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * contrib/pgcrypto/px-crypt.c
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"px-crypt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"px.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>run_crypt_des</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psw</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>salt</name></decl></parameter>,
			  <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>px_crypt_des</name><argument_list>(<argument><expr><name>psw</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>run_crypt_md5</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psw</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>salt</name></decl></parameter>,
			  <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>px_crypt_md5</name><argument_list>(<argument><expr><name>psw</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>run_crypt_bf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psw</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>salt</name></decl></parameter>,
			 <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>_crypt_blowfish_rn</name><argument_list>(<argument><expr><name>psw</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<struct>struct <name>px_crypt_algo</name>
<block>{
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type>	<name>id_len</name></decl>;</decl_stmt>
	<function_decl><type><name>char</name>	   <modifier>*</modifier></type>(<modifier>*</modifier><name>crypt</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psw</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>salt</name></decl></parameter>,
						  <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>px_crypt_algo</name></name></type>
			<name><name>px_crypt_list</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><literal type="string">"$2a$"</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>run_crypt_bf</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"$2x$"</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>run_crypt_bf</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"$2$"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,			<comment type="block">/* N/A */</comment>
	<expr><block>{<expr><literal type="string">"$1$"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>run_crypt_md5</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"_"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>run_crypt_des</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>run_crypt_des</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>px_crypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psw</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>salt</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>px_crypt_algo</name></name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <name>px_crypt_list</name></expr>;</init> <condition><expr><name><name>c</name><operator>-&gt;</operator><name>id</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>id_len</name></name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>salt</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>id_len</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>crypt</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><call><name><name>c</name><operator>-&gt;</operator><name>crypt</name></name><argument_list>(<argument><expr><name>psw</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * salt generators
 */</comment>

<struct>struct <name>generator</name>
<block>{
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
	<function_decl><type><name>char</name>	   <modifier>*</modifier></type>(<modifier>*</modifier><name>gen</name>) <parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>,
						<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_size</name></decl></parameter>)</parameter_list>;</function_decl>
	<decl_stmt><decl><type><name>int</name></type>			<name>input_len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>def_rounds</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>min_rounds</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>max_rounds</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>generator</name></name></type> <name><name>gen_list</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><literal type="string">"des"</literal></expr>, <expr><name>_crypt_gensalt_traditional_rn</name></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"md5"</literal></expr>, <expr><name>_crypt_gensalt_md5_rn</name></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"xdes"</literal></expr>, <expr><name>_crypt_gensalt_extended_rn</name></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>PX_XDES_ROUNDS</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0xFFFFFF</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"bf"</literal></expr>, <expr><name>_crypt_gensalt_blowfish_rn</name></expr>, <expr><literal type="number">16</literal></expr>, <expr><name>PX_BF_ROUNDS</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">31</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type>
<name>px_gen_salt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>salt_type</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rounds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>generator</name></name> <modifier>*</modifier></type><name>g</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>rbuf</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <name>gen_list</name></expr>;</init> <condition><expr><name><name>g</name><operator>-&gt;</operator><name>name</name></name></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>salt_type</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

	<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>PXE_UNKNOWN_SALT_ALGO</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>def_rounds</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>rounds</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>rounds</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>def_rounds</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>rounds</name> <argument_list type="generic">&lt; <argument><expr><name><name>g</name><operator>-&gt;</operator><name>min_rounds</name></name> <operator>||</operator> <name>rounds</name></expr></argument> &gt;</argument_list></name> <name><name>g</name><operator>-&gt;</operator><name>max_rounds</name></name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>PXE_BAD_SALT_ROUNDS</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pg_strong_random</name><argument_list>(<argument><expr><name>rbuf</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>input_len</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>PXE_NO_RANDOM</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name><name>g</name><operator>-&gt;</operator><name>gen</name></name><argument_list>(<argument><expr><name>rounds</name></expr></argument>, <argument><expr><name>rbuf</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>input_len</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>PX_MAX_SALT_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>px_memset</name><argument_list>(<argument><expr><name>rbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>PXE_BAD_SALT_ROUNDS</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
