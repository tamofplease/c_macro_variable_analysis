<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/contrib/pgcrypto/pgp-mpi-openssl.c"><comment type="block">/*
 * pgp-mpi-openssl.c
 *	  OpenPGP MPI functions using OpenSSL BIGNUM code.
 *
 * Copyright (c) 2005 Marko Kreen
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *	  notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *	  notice, this list of conditions and the following disclaimer in the
 *	  documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * contrib/pgcrypto/pgp-mpi-openssl.c
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/bn.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"px.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>BIGNUM</name> <modifier>*</modifier></type>
<name>mpi_to_bn</name><parameter_list>(<parameter><decl><type><name>PGP_MPI</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BIGNUM</name>	   <modifier>*</modifier></type><name>bn</name> <init>= <expr><call><name>BN_bin2bn</name><argument_list>(<argument><expr><name><name>n</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bn</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>BN_num_bits</name><argument_list>(<argument><expr><name>bn</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>n</name><operator>-&gt;</operator><name>bits</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>px_debug</name><argument_list>(<argument><expr><literal type="string">"mpi_to_bn: bignum conversion failed: mpi=%d, bn=%d"</literal></expr></argument>,
				 <argument><expr><name><name>n</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>, <argument><expr><call><name>BN_num_bits</name><argument_list>(<argument><expr><name>bn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>BN_clear_free</name><argument_list>(<argument><expr><name>bn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>bn</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PGP_MPI</name> <modifier>*</modifier></type>
<name>bn_to_mpi</name><parameter_list>(<parameter><decl><type><name>BIGNUM</name> <modifier>*</modifier></type><name>bn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGP_MPI</name>    <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pgp_mpi_alloc</name><argument_list>(<argument><expr><call><name>BN_num_bits</name><argument_list>(<argument><expr><name>bn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>BN_num_bytes</name><argument_list>(<argument><expr><name>bn</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>n</name><operator>-&gt;</operator><name>bytes</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>px_debug</name><argument_list>(<argument><expr><literal type="string">"bn_to_mpi: bignum conversion failed: bn=%d, mpi=%d"</literal></expr></argument>,
				 <argument><expr><call><name>BN_num_bytes</name><argument_list>(<argument><expr><name>bn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pgp_mpi_free</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>BN_bn2bin</name><argument_list>(<argument><expr><name>bn</name></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Decide the number of bits in the random component k
 *
 * It should be in the same range as p for signing (which
 * is deprecated), but can be much smaller for encrypting.
 *
 * Until I research it further, I just mimic gpg behaviour.
 * It has a special mapping table, for values &lt;= 5120,
 * above that it uses 'arbitrary high number'.  Following
 * algorithm hovers 10-70 bits above gpg values.  And for
 * larger p, it uses gpg's algorithm.
 *
 * The point is - if k gets large, encryption will be
 * really slow.  It does not matter for decryption.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>decide_k_bits</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>p_bits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>p_bits</name> <operator>&lt;=</operator> <literal type="number">5120</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>p_bits</name> <operator>/</operator> <literal type="number">10</literal> <operator>+</operator> <literal type="number">160</literal></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>p_bits</name> <operator>/</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">200</literal><operator>)</operator> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">2</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>pgp_elgamal_encrypt</name><parameter_list>(<parameter><decl><type><name>PGP_PubKey</name> <modifier>*</modifier></type><name>pk</name></decl></parameter>, <parameter><decl><type><name>PGP_MPI</name> <modifier>*</modifier></type><name>_m</name></decl></parameter>,
					<parameter><decl><type><name>PGP_MPI</name> <modifier>*</modifier><modifier>*</modifier></type><name>c1_p</name></decl></parameter>, <parameter><decl><type><name>PGP_MPI</name> <modifier>*</modifier><modifier>*</modifier></type><name>c2_p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name> <init>= <expr><name>PXE_PGP_MATH_FAILED</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>k_bits</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BIGNUM</name>	   <modifier>*</modifier></type><name>m</name> <init>= <expr><call><name>mpi_to_bn</name><argument_list>(<argument><expr><name>_m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BIGNUM</name>	   <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>mpi_to_bn</name><argument_list>(<argument><expr><name><name>pk</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>elg</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BIGNUM</name>	   <modifier>*</modifier></type><name>g</name> <init>= <expr><call><name>mpi_to_bn</name><argument_list>(<argument><expr><name><name>pk</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>elg</name><operator>.</operator><name>g</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BIGNUM</name>	   <modifier>*</modifier></type><name>y</name> <init>= <expr><call><name>mpi_to_bn</name><argument_list>(<argument><expr><name><name>pk</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>elg</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BIGNUM</name>	   <modifier>*</modifier></type><name>k</name> <init>= <expr><call><name>BN_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BIGNUM</name>	   <modifier>*</modifier></type><name>yk</name> <init>= <expr><call><name>BN_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BIGNUM</name>	   <modifier>*</modifier></type><name>c1</name> <init>= <expr><call><name>BN_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BIGNUM</name>	   <modifier>*</modifier></type><name>c2</name> <init>= <expr><call><name>BN_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BN_CTX</name>	   <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>BN_CTX_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>m</name> <operator>||</operator> <operator>!</operator><name>p</name> <operator>||</operator> <operator>!</operator><name>g</name> <operator>||</operator> <operator>!</operator><name>y</name> <operator>||</operator> <operator>!</operator><name>k</name> <operator>||</operator> <operator>!</operator><name>yk</name> <operator>||</operator> <operator>!</operator><name>c1</name> <operator>||</operator> <operator>!</operator><name>c2</name> <operator>||</operator> <operator>!</operator><name>tmp</name></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * generate k
	 */</comment>
	<expr_stmt><expr><name>k_bits</name> <operator>=</operator> <call><name>decide_k_bits</name><argument_list>(<argument><expr><call><name>BN_num_bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>BN_rand</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>k_bits</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * c1 = g^k c2 = m * y^k
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>BN_mod_exp</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>BN_mod_exp</name><argument_list>(<argument><expr><name>yk</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>BN_mod_mul</name><argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>yk</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

	<comment type="block">/* result */</comment>
	<expr_stmt><expr><operator>*</operator><name>c1_p</name> <operator>=</operator> <call><name>bn_to_mpi</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>c2_p</name> <operator>=</operator> <call><name>bn_to_mpi</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>c1_p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>c2_p</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<label><name>err</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>tmp</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>BN_CTX_free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>c2</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>BN_clear_free</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>c1</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>BN_clear_free</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>yk</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>BN_clear_free</name><argument_list>(<argument><expr><name>yk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>k</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>BN_clear_free</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>y</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>BN_clear_free</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>g</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>BN_clear_free</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>BN_clear_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>m</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>BN_clear_free</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>pgp_elgamal_decrypt</name><parameter_list>(<parameter><decl><type><name>PGP_PubKey</name> <modifier>*</modifier></type><name>pk</name></decl></parameter>, <parameter><decl><type><name>PGP_MPI</name> <modifier>*</modifier></type><name>_c1</name></decl></parameter>, <parameter><decl><type><name>PGP_MPI</name> <modifier>*</modifier></type><name>_c2</name></decl></parameter>,
					<parameter><decl><type><name>PGP_MPI</name> <modifier>*</modifier><modifier>*</modifier></type><name>msg_p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name> <init>= <expr><name>PXE_PGP_MATH_FAILED</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BIGNUM</name>	   <modifier>*</modifier></type><name>c1</name> <init>= <expr><call><name>mpi_to_bn</name><argument_list>(<argument><expr><name>_c1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BIGNUM</name>	   <modifier>*</modifier></type><name>c2</name> <init>= <expr><call><name>mpi_to_bn</name><argument_list>(<argument><expr><name>_c2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BIGNUM</name>	   <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>mpi_to_bn</name><argument_list>(<argument><expr><name><name>pk</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>elg</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BIGNUM</name>	   <modifier>*</modifier></type><name>x</name> <init>= <expr><call><name>mpi_to_bn</name><argument_list>(<argument><expr><name><name>pk</name><operator>-&gt;</operator><name>sec</name><operator>.</operator><name>elg</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BIGNUM</name>	   <modifier>*</modifier></type><name>c1x</name> <init>= <expr><call><name>BN_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BIGNUM</name>	   <modifier>*</modifier></type><name>div</name> <init>= <expr><call><name>BN_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BIGNUM</name>	   <modifier>*</modifier></type><name>m</name> <init>= <expr><call><name>BN_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BN_CTX</name>	   <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>BN_CTX_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c1</name> <operator>||</operator> <operator>!</operator><name>c2</name> <operator>||</operator> <operator>!</operator><name>p</name> <operator>||</operator> <operator>!</operator><name>x</name> <operator>||</operator> <operator>!</operator><name>c1x</name> <operator>||</operator> <operator>!</operator><name>div</name> <operator>||</operator> <operator>!</operator><name>m</name> <operator>||</operator> <operator>!</operator><name>tmp</name></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * m = c2 / (c1^x)
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>BN_mod_exp</name><argument_list>(<argument><expr><name>c1x</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>BN_mod_inverse</name><argument_list>(<argument><expr><name>div</name></expr></argument>, <argument><expr><name>c1x</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>BN_mod_mul</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>, <argument><expr><name>div</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

	<comment type="block">/* result */</comment>
	<expr_stmt><expr><operator>*</operator><name>msg_p</name> <operator>=</operator> <call><name>bn_to_mpi</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>msg_p</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<label><name>err</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>tmp</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>BN_CTX_free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>m</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>BN_clear_free</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>div</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>BN_clear_free</name><argument_list>(<argument><expr><name>div</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>c1x</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>BN_clear_free</name><argument_list>(<argument><expr><name>c1x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>x</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>BN_clear_free</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>BN_clear_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>c2</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>BN_clear_free</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>c1</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>BN_clear_free</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>pgp_rsa_encrypt</name><parameter_list>(<parameter><decl><type><name>PGP_PubKey</name> <modifier>*</modifier></type><name>pk</name></decl></parameter>, <parameter><decl><type><name>PGP_MPI</name> <modifier>*</modifier></type><name>_m</name></decl></parameter>, <parameter><decl><type><name>PGP_MPI</name> <modifier>*</modifier><modifier>*</modifier></type><name>c_p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name> <init>= <expr><name>PXE_PGP_MATH_FAILED</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BIGNUM</name>	   <modifier>*</modifier></type><name>m</name> <init>= <expr><call><name>mpi_to_bn</name><argument_list>(<argument><expr><name>_m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BIGNUM</name>	   <modifier>*</modifier></type><name>e</name> <init>= <expr><call><name>mpi_to_bn</name><argument_list>(<argument><expr><name><name>pk</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>rsa</name><operator>.</operator><name>e</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BIGNUM</name>	   <modifier>*</modifier></type><name>n</name> <init>= <expr><call><name>mpi_to_bn</name><argument_list>(<argument><expr><name><name>pk</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>rsa</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BIGNUM</name>	   <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>BN_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BN_CTX</name>	   <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>BN_CTX_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>m</name> <operator>||</operator> <operator>!</operator><name>e</name> <operator>||</operator> <operator>!</operator><name>n</name> <operator>||</operator> <operator>!</operator><name>c</name> <operator>||</operator> <operator>!</operator><name>tmp</name></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * c = m ^ e
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>BN_mod_exp</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>c_p</name> <operator>=</operator> <call><name>bn_to_mpi</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>c_p</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<label><name>err</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>tmp</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>BN_CTX_free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>c</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>BN_clear_free</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>n</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>BN_clear_free</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>e</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>BN_clear_free</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>m</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>BN_clear_free</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>pgp_rsa_decrypt</name><parameter_list>(<parameter><decl><type><name>PGP_PubKey</name> <modifier>*</modifier></type><name>pk</name></decl></parameter>, <parameter><decl><type><name>PGP_MPI</name> <modifier>*</modifier></type><name>_c</name></decl></parameter>, <parameter><decl><type><name>PGP_MPI</name> <modifier>*</modifier><modifier>*</modifier></type><name>m_p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name> <init>= <expr><name>PXE_PGP_MATH_FAILED</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BIGNUM</name>	   <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>mpi_to_bn</name><argument_list>(<argument><expr><name>_c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BIGNUM</name>	   <modifier>*</modifier></type><name>d</name> <init>= <expr><call><name>mpi_to_bn</name><argument_list>(<argument><expr><name><name>pk</name><operator>-&gt;</operator><name>sec</name><operator>.</operator><name>rsa</name><operator>.</operator><name>d</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BIGNUM</name>	   <modifier>*</modifier></type><name>n</name> <init>= <expr><call><name>mpi_to_bn</name><argument_list>(<argument><expr><name><name>pk</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>rsa</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BIGNUM</name>	   <modifier>*</modifier></type><name>m</name> <init>= <expr><call><name>BN_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BN_CTX</name>	   <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>BN_CTX_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>m</name> <operator>||</operator> <operator>!</operator><name>d</name> <operator>||</operator> <operator>!</operator><name>n</name> <operator>||</operator> <operator>!</operator><name>c</name> <operator>||</operator> <operator>!</operator><name>tmp</name></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * m = c ^ d
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>BN_mod_exp</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>m_p</name> <operator>=</operator> <call><name>bn_to_mpi</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>m_p</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<label><name>err</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>tmp</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>BN_CTX_free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>m</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>BN_clear_free</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>n</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>BN_clear_free</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>d</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>BN_clear_free</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>c</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>BN_clear_free</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>
</unit>
