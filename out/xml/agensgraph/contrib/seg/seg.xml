<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/agensgraph/contrib/seg/seg.c"><comment type="block">/*
 * contrib/seg/seg.c
 *
 ******************************************************************************
  This file contains routines that can be bound to a Postgres backend and
  called by the backend in the process of processing queries.  The calling
  format for these routines is dictated by Postgres architecture.
******************************************************************************/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/gist.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/stratnum.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmgr.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"segdata.h"</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DatumGetSegP</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((SEG *) DatumGetPointer(X))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PG_GETARG_SEG_P</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>DatumGetSegP(PG_GETARG_DATUM(n))</cpp:value></cpp:define>


<comment type="block">/*
#define GIST_DEBUG
#define GIST_QUERY_DEBUG
*/</comment>

<expr_stmt><expr><name>PG_MODULE_MAGIC</name></expr>;</expr_stmt>

<comment type="block">/*
 * Auxiliary data structure for picksplit method.
 */</comment>
<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>float</name></type>		<name>center</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OffsetNumber</name></type> <name>index</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SEG</name>		   <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
}</block></struct></type> <name>gseg_picksplit_item</name>;</typedef>

<comment type="block">/*
** Input/Output routines
*/</comment>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>seg_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>seg_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>seg_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>seg_lower</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>seg_upper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>seg_center</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/*
** GiST support methods
*/</comment>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>gseg_consistent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>gseg_compress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>gseg_decompress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>gseg_picksplit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>gseg_penalty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>gseg_union</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>gseg_same</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><specifier>static</specifier> <name>Datum</name></type> <name>gseg_leaf_consistent</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>StrategyNumber</name></type> <name>strategy</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Datum</name></type> <name>gseg_internal_consistent</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>StrategyNumber</name></type> <name>strategy</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Datum</name></type> <name>gseg_binary_union</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>r1</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>r2</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>sizep</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/*
** R-tree support functions
*/</comment>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>seg_same</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>seg_contains</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>seg_contained</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>seg_overlap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>seg_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>seg_over_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>seg_right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>seg_over_right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>seg_union</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>seg_inter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>rt_seg_size</name><parameter_list>(<parameter><decl><type><name>SEG</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
** Various operators
*/</comment>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>seg_cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>seg_lt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>seg_le</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>seg_gt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>seg_ge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>seg_different</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/*
** Auxiliary functions
*/</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>restore</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block" format="doxygen">/*****************************************************************************
 * Input/Output functions
 *****************************************************************************/</comment>

<function><type><name>Datum</name></type>
<name>seg_in</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>PG_GETARG_CSTRING</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SEG</name>		   <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SEG</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>seg_scanner_init</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>seg_yyparse</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>seg_yyerror</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"bogus input"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>seg_scanner_finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>seg_out</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SEG</name>		   <modifier>*</modifier></type><name>seg</name> <init>= <expr><call><name>PG_GETARG_SEG_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>p</name> <operator>=</operator> <name>result</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>seg</name><operator>-&gt;</operator><name>l_ext</name></name> <operator>==</operator> <literal type="char">'&gt;'</literal> <operator>||</operator> <name><name>seg</name><operator>-&gt;</operator><name>l_ext</name></name> <operator>==</operator> <literal type="char">'&lt;'</literal> <operator>||</operator> <name><name>seg</name><operator>-&gt;</operator><name>l_ext</name></name> <operator>==</operator> <literal type="char">'~'</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><name><name>seg</name><operator>-&gt;</operator><name>l_ext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>seg</name><operator>-&gt;</operator><name>lower</name></name> <operator>==</operator> <name><name>seg</name><operator>-&gt;</operator><name>upper</name></name> <operator>&amp;&amp;</operator> <name><name>seg</name><operator>-&gt;</operator><name>l_ext</name></name> <operator>==</operator> <name><name>seg</name><operator>-&gt;</operator><name>u_ext</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * indicates that this interval was built by seg_in off a single point
		 */</comment>
		<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>restore</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>seg</name><operator>-&gt;</operator><name>lower</name></name></expr></argument>, <argument><expr><name><name>seg</name><operator>-&gt;</operator><name>l_sigd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>seg</name><operator>-&gt;</operator><name>l_ext</name></name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* print the lower boundary if exists */</comment>
			<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>restore</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>seg</name><operator>-&gt;</operator><name>lower</name></name></expr></argument>, <argument><expr><name><name>seg</name><operator>-&gt;</operator><name>l_sigd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">".."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>seg</name><operator>-&gt;</operator><name>u_ext</name></name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* print the upper boundary if exists */</comment>
			<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>seg</name><operator>-&gt;</operator><name>u_ext</name></name> <operator>==</operator> <literal type="char">'&gt;'</literal> <operator>||</operator> <name><name>seg</name><operator>-&gt;</operator><name>u_ext</name></name> <operator>==</operator> <literal type="char">'&lt;'</literal> <operator>||</operator> <name><name>seg</name><operator>-&gt;</operator><name>l_ext</name></name> <operator>==</operator> <literal type="char">'~'</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><name><name>seg</name><operator>-&gt;</operator><name>u_ext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>restore</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>seg</name><operator>-&gt;</operator><name>upper</name></name></expr></argument>, <argument><expr><name><name>seg</name><operator>-&gt;</operator><name>u_sigd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_CSTRING</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>seg_center</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SEG</name>		   <modifier>*</modifier></type><name>seg</name> <init>= <expr><call><name>PG_GETARG_SEG_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_FLOAT4</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator> <name><name>seg</name><operator>-&gt;</operator><name>lower</name></name> <operator>+</operator> <operator>(</operator><name>float</name><operator>)</operator> <name><name>seg</name><operator>-&gt;</operator><name>upper</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>seg_lower</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SEG</name>		   <modifier>*</modifier></type><name>seg</name> <init>= <expr><call><name>PG_GETARG_SEG_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_FLOAT4</name><argument_list>(<argument><expr><name><name>seg</name><operator>-&gt;</operator><name>lower</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>seg_upper</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SEG</name>		   <modifier>*</modifier></type><name>seg</name> <init>= <expr><call><name>PG_GETARG_SEG_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_FLOAT4</name><argument_list>(<argument><expr><name><name>seg</name><operator>-&gt;</operator><name>upper</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block" format="doxygen">/*****************************************************************************
 *						   GiST functions
 *****************************************************************************/</comment>

<comment type="block">/*
** The GiST Consistent method for segments
** Should return false if for all data items x below entry,
** the predicate x op query == false, where op is the oper
** corresponding to strategy in the pg_amop table.
*/</comment>
<function><type><name>Datum</name></type>
<name>gseg_consistent</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GISTENTRY</name>  <modifier>*</modifier></type><name>entry</name> <init>= <expr><operator>(</operator><name>GISTENTRY</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>query</name> <init>= <expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>StrategyNumber</name></type> <name>strategy</name> <init>= <expr><operator>(</operator><name>StrategyNumber</name><operator>)</operator> <call><name>PG_GETARG_UINT16</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Oid		subtype = PG_GETARG_OID(3); */</comment>
	<decl_stmt><decl><type><name>bool</name>	   <modifier>*</modifier></type><name>recheck</name> <init>= <expr><operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* All cases served by this function are exact */</comment>
	<expr_stmt><expr><operator>*</operator><name>recheck</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * if entry is not leaf, use gseg_internal_consistent, else use
	 * gseg_leaf_consistent
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>GIST_LEAF</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>gseg_leaf_consistent</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>strategy</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><call><name>gseg_internal_consistent</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>strategy</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** The GiST Union method for segments
** returns the minimal bounding seg that encloses all the entries in entryvec
*/</comment>
<function><type><name>Datum</name></type>
<name>gseg_union</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GistEntryVector</name> <modifier>*</modifier></type><name>entryvec</name> <init>= <expr><operator>(</operator><name>GistEntryVector</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name>		   <modifier>*</modifier></type><name>sizep</name> <init>= <expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>numranges</name></decl>,
				<decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>out</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>tmp</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GIST_DEBUG</name></cpp:ifdef>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"union\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>numranges</name> <operator>=</operator> <name><name>entryvec</name><operator>-&gt;</operator><name>n</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>entryvec</name><operator>-&gt;</operator><name>vector</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>key</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>sizep</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SEG</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numranges</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>gseg_binary_union</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>entryvec</name><operator>-&gt;</operator><name>vector</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>, <argument><expr><name>sizep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>PG_RETURN_DATUM</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** GiST Compress and Decompress methods for segments
** do not do anything.
*/</comment>
<function><type><name>Datum</name></type>
<name>gseg_compress</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>gseg_decompress</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** The GiST Penalty method for segments
** As in the R-tree paper, we use change in area as our penalty metric
*/</comment>
<function><type><name>Datum</name></type>
<name>gseg_penalty</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GISTENTRY</name>  <modifier>*</modifier></type><name>origentry</name> <init>= <expr><operator>(</operator><name>GISTENTRY</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GISTENTRY</name>  <modifier>*</modifier></type><name>newentry</name> <init>= <expr><operator>(</operator><name>GISTENTRY</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float</name>	   <modifier>*</modifier></type><name>result</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SEG</name>		   <modifier>*</modifier></type><name>ud</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float</name></type>		<name>tmp1</name></decl>,
				<decl><type ref="prev"/><name>tmp2</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ud</name> <operator>=</operator> <call><name>DatumGetSegP</name><argument_list>(<argument><expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>seg_union</name></expr></argument>,
										  <argument><expr><name><name>origentry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>,
										  <argument><expr><name><name>newentry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rt_seg_size</name><argument_list>(<argument><expr><name>ud</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rt_seg_size</name><argument_list>(<argument><expr><call><name>DatumGetSegP</name><argument_list>(<argument><expr><name><name>origentry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>tmp1</name> <operator>-</operator> <name>tmp2</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GIST_DEBUG</name></cpp:ifdef>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"penalty\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\t%g\n"</literal></expr></argument>, <argument><expr><operator>*</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Compare function for gseg_picksplit_item: sort by center.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>gseg_picksplit_item_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>gseg_picksplit_item</name> <modifier>*</modifier></type><name>i1</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>gseg_picksplit_item</name> <operator>*</operator><operator>)</operator> <name>a</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>gseg_picksplit_item</name> <modifier>*</modifier></type><name>i2</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>gseg_picksplit_item</name> <operator>*</operator><operator>)</operator> <name>b</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>i1</name><operator>-&gt;</operator><name>center</name></name> <operator>&lt;</operator> <name><name>i2</name><operator>-&gt;</operator><name>center</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>i1</name><operator>-&gt;</operator><name>center</name></name> <operator>==</operator> <name><name>i2</name><operator>-&gt;</operator><name>center</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * The GiST PickSplit method for segments
 *
 * We used to use Guttman's split algorithm here, but since the data is 1-D
 * it's easier and more robust to just sort the segments by center-point and
 * split at the middle.
 */</comment>
<function><type><name>Datum</name></type>
<name>gseg_picksplit</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GistEntryVector</name> <modifier>*</modifier></type><name>entryvec</name> <init>= <expr><operator>(</operator><name>GistEntryVector</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GIST_SPLITVEC</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><operator>(</operator><name>GIST_SPLITVEC</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SEG</name>		   <modifier>*</modifier></type><name>seg</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>seg_l</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>seg_r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>gseg_picksplit_item</name> <modifier>*</modifier></type><name>sort_items</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OffsetNumber</name> <modifier>*</modifier></type><name>left</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>right</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OffsetNumber</name></type> <name>maxoff</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OffsetNumber</name></type> <name>firstright</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GIST_DEBUG</name></cpp:ifdef>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"picksplit\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/* Valid items in entryvec-&gt;vector[] are indexed 1..maxoff */</comment>
	<expr_stmt><expr><name>maxoff</name> <operator>=</operator> <name><name>entryvec</name><operator>-&gt;</operator><name>n</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * Prepare the auxiliary array and sort it.
	 */</comment>
	<expr_stmt><expr><name>sort_items</name> <operator>=</operator> <operator>(</operator><name>gseg_picksplit_item</name> <operator>*</operator><operator>)</operator>
		<call><name>palloc</name><argument_list>(<argument><expr><name>maxoff</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>gseg_picksplit_item</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>maxoff</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>seg</name> <operator>=</operator> <call><name>DatumGetSegP</name><argument_list>(<argument><expr><name><name>entryvec</name><operator>-&gt;</operator><name>vector</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* center calculation is done this way to avoid possible overflow */</comment>
		<expr_stmt><expr><name><name>sort_items</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>center</name> <operator>=</operator> <name><name>seg</name><operator>-&gt;</operator><name>lower</name></name> <operator>*</operator> <literal type="number">0.5f</literal> <operator>+</operator> <name><name>seg</name><operator>-&gt;</operator><name>upper</name></name> <operator>*</operator> <literal type="number">0.5f</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sort_items</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>index</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sort_items</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <name>seg</name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>sort_items</name></expr></argument>, <argument><expr><name>maxoff</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>gseg_picksplit_item</name></expr></argument>)</argument_list></sizeof></expr></argument>,
		  <argument><expr><name>gseg_picksplit_item_cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* sort items below "firstright" will go into the left side */</comment>
	<expr_stmt><expr><name>firstright</name> <operator>=</operator> <name>maxoff</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>spl_left</name></name> <operator>=</operator> <operator>(</operator><name>OffsetNumber</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>maxoff</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OffsetNumber</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>spl_right</name></name> <operator>=</operator> <operator>(</operator><name>OffsetNumber</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>maxoff</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OffsetNumber</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>left</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>spl_left</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>spl_nleft</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>right</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>spl_right</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>spl_nright</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * Emit segments to the left output page, and compute its bounding box.
	 */</comment>
	<expr_stmt><expr><name>seg_l</name> <operator>=</operator> <operator>(</operator><name>SEG</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SEG</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>seg_l</name></expr></argument>, <argument><expr><name><name>sort_items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SEG</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>left</name><operator>++</operator> <operator>=</operator> <name><name>sort_items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>index</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>spl_nleft</name></name><operator>++</operator></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>firstright</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Datum</name></type>		<name>sortitem</name> <init>= <expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name><name>sort_items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>seg_l</name> <operator>=</operator> <call><name>DatumGetSegP</name><argument_list>(<argument><expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>seg_union</name></expr></argument>,
												 <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>seg_l</name></expr></argument>)</argument_list></call></expr></argument>,
												 <argument><expr><name>sortitem</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>left</name><operator>++</operator> <operator>=</operator> <name><name>sort_items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>index</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>spl_nleft</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/*
	 * Likewise for the right page.
	 */</comment>
	<expr_stmt><expr><name>seg_r</name> <operator>=</operator> <operator>(</operator><name>SEG</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SEG</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>seg_r</name></expr></argument>, <argument><expr><name><name>sort_items</name><index>[<expr><name>firstright</name></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SEG</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>right</name><operator>++</operator> <operator>=</operator> <name><name>sort_items</name><index>[<expr><name>firstright</name></expr>]</index></name><operator>.</operator><name>index</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>spl_nright</name></name><operator>++</operator></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>firstright</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>maxoff</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Datum</name></type>		<name>sortitem</name> <init>= <expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name><name>sort_items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>seg_r</name> <operator>=</operator> <call><name>DatumGetSegP</name><argument_list>(<argument><expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>seg_union</name></expr></argument>,
												 <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>seg_r</name></expr></argument>)</argument_list></call></expr></argument>,
												 <argument><expr><name>sortitem</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>right</name><operator>++</operator> <operator>=</operator> <name><name>sort_items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>index</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>spl_nright</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>spl_ldatum</name></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>seg_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>spl_rdatum</name></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>seg_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Equality methods
*/</comment>
<function><type><name>Datum</name></type>
<name>gseg_same</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name>	   <modifier>*</modifier></type><name>result</name> <init>= <expr><operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>seg_same</name></expr></argument>, <argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GIST_DEBUG</name></cpp:ifdef>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"same: %s\n"</literal></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><operator>*</operator><name>result</name></expr> ?</condition><then> <expr><literal type="string">"TRUE"</literal></expr> </then><else>: <expr><literal type="string">"FALSE"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** SUPPORT ROUTINES
*/</comment>
<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>gseg_leaf_consistent</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>StrategyNumber</name></type> <name>strategy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>retval</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GIST_QUERY_DEBUG</name></cpp:ifdef>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"leaf_consistent, %d\n"</literal></expr></argument>, <argument><expr><name>strategy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<switch>switch <condition>(<expr><name>strategy</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>RTLeftStrategyNumber</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>seg_left</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>RTOverLeftStrategyNumber</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>seg_over_left</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>RTOverlapStrategyNumber</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>seg_overlap</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>RTOverRightStrategyNumber</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>seg_over_right</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>RTRightStrategyNumber</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>seg_right</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>RTSameStrategyNumber</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>seg_same</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>RTContainsStrategyNumber</name></expr>:</case>
		<case>case <expr><name>RTOldContainsStrategyNumber</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>seg_contains</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>RTContainedByStrategyNumber</name></expr>:</case>
		<case>case <expr><name>RTOldContainedByStrategyNumber</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>seg_contained</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<expr_stmt><expr><call><name>PG_RETURN_DATUM</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>gseg_internal_consistent</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>StrategyNumber</name></type> <name>strategy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>retval</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GIST_QUERY_DEBUG</name></cpp:ifdef>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"internal_consistent, %d\n"</literal></expr></argument>, <argument><expr><name>strategy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<switch>switch <condition>(<expr><name>strategy</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>RTLeftStrategyNumber</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator>
				<operator>!</operator><call><name>DatumGetBool</name><argument_list>(<argument><expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>seg_over_right</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>RTOverLeftStrategyNumber</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator>
				<operator>!</operator><call><name>DatumGetBool</name><argument_list>(<argument><expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>seg_right</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>RTOverlapStrategyNumber</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator>
				<call><name>DatumGetBool</name><argument_list>(<argument><expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>seg_overlap</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>RTOverRightStrategyNumber</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator>
				<operator>!</operator><call><name>DatumGetBool</name><argument_list>(<argument><expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>seg_left</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>RTRightStrategyNumber</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator>
				<operator>!</operator><call><name>DatumGetBool</name><argument_list>(<argument><expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>seg_over_left</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>RTSameStrategyNumber</name></expr>:</case>
		<case>case <expr><name>RTContainsStrategyNumber</name></expr>:</case>
		<case>case <expr><name>RTOldContainsStrategyNumber</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator>
				<call><name>DatumGetBool</name><argument_list>(<argument><expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>seg_contains</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>RTContainedByStrategyNumber</name></expr>:</case>
		<case>case <expr><name>RTOldContainedByStrategyNumber</name></expr>:</case>
			<expr_stmt><expr><name>retval</name> <operator>=</operator>
				<call><name>DatumGetBool</name><argument_list>(<argument><expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>seg_overlap</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>gseg_binary_union</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>r1</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>r2</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>sizep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>retval</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>seg_union</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>sizep</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SEG</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>Datum</name></type>
<name>seg_contains</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SEG</name>		   <modifier>*</modifier></type><name>a</name> <init>= <expr><call><name>PG_GETARG_SEG_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SEG</name>		   <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>PG_GETARG_SEG_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>lower</name></name> <operator>&lt;=</operator> <name><name>b</name><operator>-&gt;</operator><name>lower</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>upper</name></name> <operator>&gt;=</operator> <name><name>b</name><operator>-&gt;</operator><name>upper</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>seg_contained</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>a</name> <init>= <expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>b</name> <init>= <expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_DATUM</name><argument_list>(<argument><expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>seg_contains</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/*****************************************************************************
 * Operator class for R-tree indexing
 *****************************************************************************/</comment>

<function><type><name>Datum</name></type>
<name>seg_same</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>cmp</name> <init>= <expr><call><name>DatumGetInt32</name><argument_list>(<argument><expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>seg_cmp</name></expr></argument>,
														<argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
														<argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>cmp</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*	seg_overlap -- does a overlap b?
 */</comment>
<function><type><name>Datum</name></type>
<name>seg_overlap</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SEG</name>		   <modifier>*</modifier></type><name>a</name> <init>= <expr><call><name>PG_GETARG_SEG_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SEG</name>		   <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>PG_GETARG_SEG_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>upper</name></name> <operator>&gt;=</operator> <name><name>b</name><operator>-&gt;</operator><name>upper</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>lower</name></name> <operator>&lt;=</operator> <name><name>b</name><operator>-&gt;</operator><name>upper</name></name><operator>)</operator><operator>)</operator> <operator>||</operator>
				   <operator>(</operator><operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>upper</name></name> <operator>&gt;=</operator> <name><name>a</name><operator>-&gt;</operator><name>upper</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>lower</name></name> <operator>&lt;=</operator> <name><name>a</name><operator>-&gt;</operator><name>upper</name></name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*	seg_over_left -- is the right edge of (a) located at or left of the right edge of (b)?
 */</comment>
<function><type><name>Datum</name></type>
<name>seg_over_left</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SEG</name>		   <modifier>*</modifier></type><name>a</name> <init>= <expr><call><name>PG_GETARG_SEG_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SEG</name>		   <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>PG_GETARG_SEG_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>upper</name></name> <operator>&lt;=</operator> <name><name>b</name><operator>-&gt;</operator><name>upper</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*	seg_left -- is (a) entirely on the left of (b)?
 */</comment>
<function><type><name>Datum</name></type>
<name>seg_left</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SEG</name>		   <modifier>*</modifier></type><name>a</name> <init>= <expr><call><name>PG_GETARG_SEG_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SEG</name>		   <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>PG_GETARG_SEG_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>upper</name></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>lower</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*	seg_right -- is (a) entirely on the right of (b)?
 */</comment>
<function><type><name>Datum</name></type>
<name>seg_right</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SEG</name>		   <modifier>*</modifier></type><name>a</name> <init>= <expr><call><name>PG_GETARG_SEG_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SEG</name>		   <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>PG_GETARG_SEG_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>lower</name></name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>upper</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*	seg_over_right -- is the left edge of (a) located at or right of the left edge of (b)?
 */</comment>
<function><type><name>Datum</name></type>
<name>seg_over_right</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SEG</name>		   <modifier>*</modifier></type><name>a</name> <init>= <expr><call><name>PG_GETARG_SEG_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SEG</name>		   <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>PG_GETARG_SEG_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>lower</name></name> <operator>&gt;=</operator> <name><name>b</name><operator>-&gt;</operator><name>lower</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>seg_union</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SEG</name>		   <modifier>*</modifier></type><name>a</name> <init>= <expr><call><name>PG_GETARG_SEG_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SEG</name>		   <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>PG_GETARG_SEG_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SEG</name>		   <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>SEG</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>n</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* take max of upper endpoints */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>upper</name></name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>upper</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>upper</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>upper</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>u_sigd</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>u_sigd</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>u_ext</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>u_ext</name></name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>upper</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>upper</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>u_sigd</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>u_sigd</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>u_ext</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>u_ext</name></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* take min of lower endpoints */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>lower</name></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>lower</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>lower</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>lower</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>l_sigd</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>l_sigd</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>l_ext</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>l_ext</name></name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>lower</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>lower</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>l_sigd</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>l_sigd</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>l_ext</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>l_ext</name></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>seg_inter</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SEG</name>		   <modifier>*</modifier></type><name>a</name> <init>= <expr><call><name>PG_GETARG_SEG_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SEG</name>		   <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>PG_GETARG_SEG_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SEG</name>		   <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>SEG</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>n</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* take min of upper endpoints */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>upper</name></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>upper</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>upper</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>upper</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>u_sigd</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>u_sigd</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>u_ext</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>u_ext</name></name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>upper</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>upper</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>u_sigd</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>u_sigd</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>u_ext</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>u_ext</name></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* take max of lower endpoints */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>lower</name></name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>lower</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>lower</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>lower</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>l_sigd</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>l_sigd</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>l_ext</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>l_ext</name></name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>lower</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>lower</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>l_sigd</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>l_sigd</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>l_ext</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>l_ext</name></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>rt_seg_size</name><parameter_list>(<parameter><decl><type><name>SEG</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <operator>(</operator><name>SEG</name> <operator>*</operator><operator>)</operator> <name>NULL</name> <operator>||</operator> <name><name>a</name><operator>-&gt;</operator><name>upper</name></name> <operator>&lt;=</operator> <name><name>a</name><operator>-&gt;</operator><name>lower</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <call><name>Abs</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>upper</name></name> <operator>-</operator> <name><name>a</name><operator>-&gt;</operator><name>lower</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>seg_size</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SEG</name>		   <modifier>*</modifier></type><name>seg</name> <init>= <expr><call><name>PG_GETARG_SEG_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_FLOAT4</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator> <call><name>Abs</name><argument_list>(<argument><expr><name><name>seg</name><operator>-&gt;</operator><name>upper</name></name> <operator>-</operator> <name><name>seg</name><operator>-&gt;</operator><name>lower</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block" format="doxygen">/*****************************************************************************
 *				   Miscellaneous operators
 *****************************************************************************/</comment>
<function><type><name>Datum</name></type>
<name>seg_cmp</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SEG</name>		   <modifier>*</modifier></type><name>a</name> <init>= <expr><call><name>PG_GETARG_SEG_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SEG</name>		   <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>PG_GETARG_SEG_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * First compare on lower boundary position
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>lower</name></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>lower</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_INT32</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>lower</name></name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>lower</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_INT32</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * a-&gt;lower == b-&gt;lower, so consider type of boundary.
	 *
	 * A '-' lower bound is &lt; any other kind (this could only be relevant if
	 * -HUGE_VAL is used as a regular data value). A '&lt;' lower bound is &lt; any
	 * other kind except '-'. A '&gt;' lower bound is &gt; any other kind.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>l_ext</name></name> <operator>!=</operator> <name><name>b</name><operator>-&gt;</operator><name>l_ext</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>l_ext</name></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PG_RETURN_INT32</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>l_ext</name></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PG_RETURN_INT32</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>l_ext</name></name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PG_RETURN_INT32</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>l_ext</name></name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PG_RETURN_INT32</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>l_ext</name></name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PG_RETURN_INT32</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>l_ext</name></name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PG_RETURN_INT32</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * For other boundary types, consider # of significant digits first.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>l_sigd</name></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>l_sigd</name></name></expr>)</condition><block type="pseudo"><block_content>	<comment type="block">/* (a) is blurred and is likely to include (b) */</comment>
		<expr_stmt><expr><call><name>PG_RETURN_INT32</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>l_sigd</name></name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>l_sigd</name></name></expr>)</condition><block type="pseudo"><block_content>	<comment type="block">/* (a) is less blurred and is likely to be
								 * included in (b) */</comment>
		<expr_stmt><expr><call><name>PG_RETURN_INT32</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * For same # of digits, an approximate boundary is more blurred than
	 * exact.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>l_ext</name></name> <operator>!=</operator> <name><name>b</name><operator>-&gt;</operator><name>l_ext</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>l_ext</name></name> <operator>==</operator> <literal type="char">'~'</literal></expr>)</condition><block type="pseudo"><block_content>	<comment type="block">/* (a) is approximate, while (b) is exact */</comment>
			<expr_stmt><expr><call><name>PG_RETURN_INT32</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>l_ext</name></name> <operator>==</operator> <literal type="char">'~'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PG_RETURN_INT32</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<comment type="block">/* can't get here unless data is corrupt */</comment>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"bogus lower boundary types %d %d"</literal></expr></argument>,
			 <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>a</name><operator>-&gt;</operator><name>l_ext</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>b</name><operator>-&gt;</operator><name>l_ext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* at this point, the lower boundaries are identical */</comment>

	<comment type="block">/*
	 * First compare on upper boundary position
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>upper</name></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>upper</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_INT32</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>upper</name></name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>upper</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_INT32</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * a-&gt;upper == b-&gt;upper, so consider type of boundary.
	 *
	 * A '-' upper bound is &gt; any other kind (this could only be relevant if
	 * HUGE_VAL is used as a regular data value). A '&lt;' upper bound is &lt; any
	 * other kind. A '&gt;' upper bound is &gt; any other kind except '-'.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>u_ext</name></name> <operator>!=</operator> <name><name>b</name><operator>-&gt;</operator><name>u_ext</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>u_ext</name></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PG_RETURN_INT32</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>u_ext</name></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PG_RETURN_INT32</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>u_ext</name></name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PG_RETURN_INT32</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>u_ext</name></name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PG_RETURN_INT32</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>u_ext</name></name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PG_RETURN_INT32</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>u_ext</name></name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PG_RETURN_INT32</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * For other boundary types, consider # of significant digits first. Note
	 * result here is converse of the lower-boundary case.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>u_sigd</name></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>u_sigd</name></name></expr>)</condition><block type="pseudo"><block_content>	<comment type="block">/* (a) is blurred and is likely to include (b) */</comment>
		<expr_stmt><expr><call><name>PG_RETURN_INT32</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>u_sigd</name></name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>u_sigd</name></name></expr>)</condition><block type="pseudo"><block_content>	<comment type="block">/* (a) is less blurred and is likely to be
								 * included in (b) */</comment>
		<expr_stmt><expr><call><name>PG_RETURN_INT32</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * For same # of digits, an approximate boundary is more blurred than
	 * exact.  Again, result is converse of lower-boundary case.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>u_ext</name></name> <operator>!=</operator> <name><name>b</name><operator>-&gt;</operator><name>u_ext</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>u_ext</name></name> <operator>==</operator> <literal type="char">'~'</literal></expr>)</condition><block type="pseudo"><block_content>	<comment type="block">/* (a) is approximate, while (b) is exact */</comment>
			<expr_stmt><expr><call><name>PG_RETURN_INT32</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>u_ext</name></name> <operator>==</operator> <literal type="char">'~'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PG_RETURN_INT32</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<comment type="block">/* can't get here unless data is corrupt */</comment>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"bogus upper boundary types %d %d"</literal></expr></argument>,
			 <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>a</name><operator>-&gt;</operator><name>u_ext</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>b</name><operator>-&gt;</operator><name>u_ext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_INT32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>seg_lt</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>cmp</name> <init>= <expr><call><name>DatumGetInt32</name><argument_list>(<argument><expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>seg_cmp</name></expr></argument>,
														<argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
														<argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>cmp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>seg_le</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>cmp</name> <init>= <expr><call><name>DatumGetInt32</name><argument_list>(<argument><expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>seg_cmp</name></expr></argument>,
														<argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
														<argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>cmp</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>seg_gt</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>cmp</name> <init>= <expr><call><name>DatumGetInt32</name><argument_list>(<argument><expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>seg_cmp</name></expr></argument>,
														<argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
														<argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>cmp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>seg_ge</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>cmp</name> <init>= <expr><call><name>DatumGetInt32</name><argument_list>(<argument><expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>seg_cmp</name></expr></argument>,
														<argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
														<argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>cmp</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>Datum</name></type>
<name>seg_different</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>cmp</name> <init>= <expr><call><name>DatumGetInt32</name><argument_list>(<argument><expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>seg_cmp</name></expr></argument>,
														<argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
														<argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>cmp</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<comment type="block" format="doxygen">/*****************************************************************************
 *				   Auxiliary functions
 *****************************************************************************/</comment>

<comment type="block">/*
 * The purpose of this routine is to print the given floating point
 * value with exactly n significant digits.  Its behaviour
 * is similar to %.ng except it prints 8.00 where %.ng would
 * print 8.  Returns the length of the string written at "result".
 *
 * Caller must provide a sufficiently large result buffer; 16 bytes
 * should be enough for all known float implementations.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>restore</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>buf</name><index>[<expr><literal type="number">25</literal></expr>]</index></name> <init>= <expr><block>{
		<expr><literal type="char">'0'</literal></expr>, <expr><literal type="char">'0'</literal></expr>, <expr><literal type="char">'0'</literal></expr>, <expr><literal type="char">'0'</literal></expr>, <expr><literal type="char">'0'</literal></expr>,
		<expr><literal type="char">'0'</literal></expr>, <expr><literal type="char">'0'</literal></expr>, <expr><literal type="char">'0'</literal></expr>, <expr><literal type="char">'0'</literal></expr>, <expr><literal type="char">'0'</literal></expr>,
		<expr><literal type="char">'0'</literal></expr>, <expr><literal type="char">'0'</literal></expr>, <expr><literal type="char">'0'</literal></expr>, <expr><literal type="char">'0'</literal></expr>, <expr><literal type="char">'0'</literal></expr>,
		<expr><literal type="char">'0'</literal></expr>, <expr><literal type="char">'0'</literal></expr>, <expr><literal type="char">'0'</literal></expr>, <expr><literal type="char">'0'</literal></expr>, <expr><literal type="char">'0'</literal></expr>,
		<expr><literal type="char">'0'</literal></expr>, <expr><literal type="char">'0'</literal></expr>, <expr><literal type="char">'0'</literal></expr>, <expr><literal type="char">'0'</literal></expr>, <expr><literal type="char">'\0'</literal></expr>
	}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>exp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>,
				<decl><type ref="prev"/><name>dp</name></decl>,
				<decl><type ref="prev"/><name>sign</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Put a cap on the number of significant digits to avoid garbage in the
	 * output and ensure we don't overrun the result buffer.
	 */</comment>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>Min</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>FLT_DIG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* remember the sign */</comment>
	<expr_stmt><expr><name>sign</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

	<comment type="block">/* print, in %e style to start with */</comment>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"%.*e"</literal></expr></argument>, <argument><expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* find the exponent */</comment>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="char">'e'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* punt if we have 'inf' or similar */</comment>
	<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>strlen</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>exp</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>exp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* just truncate off the 'e+00' */</comment>
		<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>Abs</name><argument_list>(<argument><expr><name>exp</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">4</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * remove the decimal point from the mantissa and write the digits
			 * to the buf array
			 */</comment>
			<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>result</name> <operator>+</operator> <name>sign</name></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">10</literal></expr><operator>,</operator> <expr><name>dp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'e'</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>dp</name> <operator>=</operator> <name>i</name><operator>--</operator></expr>;</expr_stmt>	<comment type="block">/* skip the decimal point */</comment>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>
			<if_stmt><if>if <condition>(<expr><name>dp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>dp</name> <operator>=</operator> <name>i</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>		<comment type="block">/* no decimal point was found in the above
								 * for() loop */</comment>

			<if_stmt><if>if <condition>(<expr><name>exp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>dp</name> <operator>-</operator> <literal type="number">10</literal> <operator>+</operator> <name>exp</name> <operator>&gt;=</operator> <name>n</name></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/*
					 * the decimal point is behind the last significant digit;
					 * the digits in between must be converted to the exponent
					 * and the decimal point placed after the first digit
					 */</comment>
					<expr_stmt><expr><name>exp</name> <operator>=</operator> <name>dp</name> <operator>-</operator> <literal type="number">10</literal> <operator>+</operator> <name>exp</name> <operator>-</operator> <name>n</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">10</literal> <operator>+</operator> <name>n</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

					<comment type="block">/* insert the decimal point */</comment>
					<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><name>dp</name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt>
						<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">23</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <name>dp</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
							<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
						<expr_stmt><expr><name><name>buf</name><index>[<expr><name>dp</name></expr>]</index></name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>

					<comment type="block">/*
					 * adjust the exponent by the number of digits after the
					 * decimal point
					 */</comment>
					<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><literal type="number">11</literal> <operator>+</operator> <name>n</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"e%d"</literal></expr></argument>, <argument><expr><name>exp</name> <operator>+</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
					<else>else<block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"e%d"</literal></expr></argument>, <argument><expr><name>exp</name> <operator>+</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

					<if_stmt><if>if <condition>(<expr><name>sign</name></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if>
					<else>else<block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>				<comment type="block">/* insert the decimal point */</comment>
					<expr_stmt><expr><name>dp</name> <operator>+=</operator> <name>exp</name></expr>;</expr_stmt>
					<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">23</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <name>dp</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
						<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
					<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">11</literal> <operator>+</operator> <name>n</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>buf</name><index>[<expr><name>dp</name></expr>]</index></name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name>sign</name></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if>
					<else>else<block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>					<comment type="block">/* exp &lt;= 0 */</comment>
				<expr_stmt><expr><name>dp</name> <operator>+=</operator> <name>exp</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">10</literal> <operator>+</operator> <name>n</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>buf</name><index>[<expr><name>dp</name></expr>]</index></name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>sign</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name><name>buf</name><index>[<expr><name>dp</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><name>dp</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><name>dp</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* do nothing for Abs(exp) &gt; 4; %e must be OK */</comment>
		<comment type="block">/* just get rid of zeroes after [eE]- and +zeroes after [Ee]. */</comment>

		<comment type="block">/* ... this is not done yet. */</comment>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><call><name>strlen</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** Miscellany
*/</comment>

<comment type="block">/* find out the number of significant digits in a string representing
 * a floating point number
 */</comment>
<function><type><name>int</name></type>
<name>significant_digits</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>s</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>n</name></decl>,
				<decl><type ref="prev"/><name>c</name></decl>,
				<decl><type ref="prev"/><name>zeroes</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>zeroes</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<comment type="block">/* skip leading zeroes and sign */</comment>
	<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</init> <condition><expr><operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'0'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'+'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>++</operator><name>p</name><operator>)</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>

	<comment type="block">/* skip decimal point and following zeroes */</comment>
	<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</init> <condition><expr><operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'0'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'.'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>++</operator><name>p</name><operator>)</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>zeroes</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/* count significant digits (n) */</comment>
	<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name></expr><operator>,</operator> <expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>++</operator><name>p</name><operator>)</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'.'</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>n</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>zeroes</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>
</unit>
