<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/common/src/ttszip.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ttszip.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"taoserror.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcompression.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>getDataStartOffset</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>TSBufUpdateGroupInfo</name><parameter_list>(<parameter><decl><type><name>STSBuf</name><modifier>*</modifier></type> <name>pTSBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>STSGroupBlockInfo</name><modifier>*</modifier></type> <name>pBlockInfo</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>STSBuf</name><modifier>*</modifier></type> <name>allocResForTSBuf</name><parameter_list>(<parameter><decl><type><name>STSBuf</name><modifier>*</modifier></type> <name>pTSBuf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>STSBufUpdateHeader</name><parameter_list>(<parameter><decl><type><name>STSBuf</name><modifier>*</modifier></type> <name>pTSBuf</name></decl></parameter>, <parameter><decl><type><name>STSBufFileHeader</name><modifier>*</modifier></type> <name>pHeader</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/**
 * todo error handling
 * support auto closeable tmp file
 * @param path
 * @return
 */</comment>
<function><type><name>STSBuf</name><modifier>*</modifier></type> <name>tsBufCreate</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>autoDelete</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>order</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>osTempSpaceAvailable</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_NO_DISKSPACE</name></expr>;</expr_stmt>
    <comment type="line">// tscError("tmp file created failed since %s", terrstr());</comment>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STSBuf</name><modifier>*</modifier></type> <name>pTSBuf</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STSBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTSBuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>autoDelete</name></name> <operator>=</operator> <name>autoDelete</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosGetTmpfilePath</name><argument_list>(<argument><expr><name>tsTempDir</name></expr></argument>, <argument><expr><literal type="string">"join"</literal></expr></argument>, <argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// pTSBuf-&gt;pFile = fopen(pTSBuf-&gt;path, "wb+");</comment>
  <expr_stmt><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>pFile</name></name> <operator>=</operator> <call><name>taosOpenFile</name><argument_list>(<argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>TD_FILE_CREATE</name> <operator>|</operator> <name>TD_FILE_WRITE</name> <operator>|</operator> <name>TD_FILE_READ</name> <operator>|</operator> <name>TD_FILE_TRUNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>pFile</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>autoDelete</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>taosRemoveFile</name><argument_list>(<argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>allocResForTSBuf</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// update the header info</comment>
  <decl_stmt><decl><type><name>STSBufFileHeader</name></type> <name>header</name> <init>= <expr><block>{<expr><operator>.</operator><name>magic</name> <operator>=</operator> <name>TS_COMP_FILE_MAGIC</name></expr>, <expr><operator>.</operator><name>numOfGroup</name> <operator>=</operator> <name><name>pTSBuf</name><operator>-&gt;</operator><name>numOfGroups</name></name></expr>, <expr><operator>.</operator><name>tsOrder</name> <operator>=</operator> <name>TSDB_ORDER_ASC</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>STSBufUpdateHeader</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tsBufResetPos</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>order</name></name> <operator>=</operator> <name>TSDB_ORDER_ASC</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>tsOrder</name></name> <operator>=</operator> <name>order</name></expr>;</expr_stmt>

  <return>return <expr><name>pTSBuf</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>STSBuf</name><modifier>*</modifier></type> <name>tsBufCreateFromFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>autoDelete</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STSBuf</name><modifier>*</modifier></type> <name>pTSBuf</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STSBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTSBuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>autoDelete</name></name> <operator>=</operator> <name>autoDelete</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// pTSBuf-&gt;pFile = fopen(pTSBuf-&gt;path, "rb+");</comment>
  <expr_stmt><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>pFile</name></name> <operator>=</operator> <call><name>taosOpenFile</name><argument_list>(<argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>TD_FILE_WRITE</name> <operator>|</operator> <name>TD_FILE_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>pFile</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>allocResForTSBuf</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// validate the file magic number</comment>
  <decl_stmt><decl><type><name>STSBufFileHeader</name></type> <name>header</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>ret</name> <init>= <expr><call><name>taosLSeekFile</name><argument_list>(<argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>sz</name> <init>= <expr><call><name>taosReadFile</name><argument_list>(<argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STSBufFileHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// invalid file</comment>
  <if_stmt><if>if <condition>(<expr><name><name>header</name><operator>.</operator><name>magic</name></name> <operator>!=</operator> <name>TS_COMP_FILE_MAGIC</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsBufDestroy</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>header</name><operator>.</operator><name>numOfGroup</name></name> <operator>&gt;</operator> <name><name>pTSBuf</name><operator>-&gt;</operator><name>numOfAlloc</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>numOfAlloc</name></name> <operator>=</operator> <name><name>header</name><operator>.</operator><name>numOfGroup</name></name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>STSGroupBlockInfoEx</name><modifier>*</modifier></type> <name>tmp</name> <init>= <expr><call><name>taosMemoryRealloc</name><argument_list>(<argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STSGroupBlockInfoEx</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>pTSBuf</name><operator>-&gt;</operator><name>numOfAlloc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tsBufDestroy</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>numOfGroups</name></name> <operator>=</operator> <name><name>header</name><operator>.</operator><name>numOfGroup</name></name></expr>;</expr_stmt>

  <comment type="line">// check the ts order</comment>
  <expr_stmt><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>tsOrder</name></name> <operator>=</operator> <name><name>header</name><operator>.</operator><name>tsOrder</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>tsOrder</name></name> <operator>!=</operator> <name>TSDB_ORDER_ASC</name> <operator>&amp;&amp;</operator> <name><name>pTSBuf</name><operator>-&gt;</operator><name>tsOrder</name></name> <operator>!=</operator> <name>TSDB_ORDER_DESC</name></expr>)</condition> <block>{<block_content>
    <comment type="line">//    tscError("invalid order info in buf:%d", pTSBuf-&gt;tsOrder);</comment>
    <expr_stmt><expr><call><name>tsBufDestroy</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>infoSize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>STSGroupBlockInfo</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>pTSBuf</name><operator>-&gt;</operator><name>numOfGroups</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>STSGroupBlockInfo</name><modifier>*</modifier></type> <name>buf</name> <init>= <expr><operator>(</operator><name>STSGroupBlockInfo</name><operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>infoSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsBufDestroy</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// int64_t pos = ftell(pTSBuf-&gt;pFile); //pos not used</comment>
  <expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>taosReadFile</name><argument_list>(<argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>infoSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// the length value for each vnode is not kept in file, so does not set the length value</comment>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pTSBuf</name><operator>-&gt;</operator><name>numOfGroups</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STSGroupBlockInfoEx</name><modifier>*</modifier></type> <name>pBlockList</name> <init>= <expr><operator>&amp;</operator><name><name>pTSBuf</name><operator>-&gt;</operator><name>pData</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBlockList</name><operator>-&gt;</operator><name>info</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STSGroupBlockInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>taosLSeekFile</name><argument_list>(<argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>file_size</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taosFStatFile</name><argument_list>(<argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsBufDestroy</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>fileSize</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>file_size</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tsBufResetPos</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// ascending by default</comment>
  <expr_stmt><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>order</name></name> <operator>=</operator> <name>TSDB_ORDER_ASC</name></expr>;</expr_stmt>

  <comment type="line">//  tscDebug("create tsBuf from file:%s, fd:%d, size:%d, numOfGroups:%d, autoDelete:%d", pTSBuf-&gt;path,</comment>
  <comment type="line">//  fileno(pTSBuf-&gt;pFile),</comment>
  <comment type="line">//           pTSBuf-&gt;fileSize, pTSBuf-&gt;numOfGroups, pTSBuf-&gt;autoDelete);</comment>

  <return>return <expr><name>pTSBuf</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>tsBufDestroy</name><parameter_list>(<parameter><decl><type><name>STSBuf</name><modifier>*</modifier></type> <name>pTSBuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pTSBuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>assistBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>tsData</name><operator>.</operator><name>rawBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>block</name><operator>.</operator><name>payload</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pTSBuf</name><operator>-&gt;</operator><name>remainOpen</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTSBuf</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>autoDelete</name></name></expr>)</condition> <block>{<block_content>
    <comment type="line">//    ("tsBuf %p destroyed, delete tmp file:%s", pTSBuf, pTSBuf-&gt;path);</comment>
    <if_stmt><if>if <condition>(<expr><call><name>taosRemoveFile</name><argument_list>(<argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// tscError("tsBuf %p destroyed, failed to remove tmp file:%s", pTSBuf, pTSBuf-&gt;path);</comment>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="line">//    tscDebug("tsBuf %p destroyed, tmp file:%s, remains", pTSBuf, pTSBuf-&gt;path);</comment>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>taosVariantDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTSBuf</name><operator>-&gt;</operator><name>block</name><operator>.</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>STSGroupBlockInfoEx</name><modifier>*</modifier></type> <name>tsBufGetLastGroupInfo</name><parameter_list>(<parameter><decl><type><name>STSBuf</name><modifier>*</modifier></type> <name>pTSBuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>last</name> <init>= <expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>numOfGroups</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>last</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>&amp;</operator><name><name>pTSBuf</name><operator>-&gt;</operator><name>pData</name><index>[<expr><name>last</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>STSGroupBlockInfoEx</name><modifier>*</modifier></type> <name>addOneGroupInfo</name><parameter_list>(<parameter><decl><type><name>STSBuf</name><modifier>*</modifier></type> <name>pTSBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>numOfAlloc</name></name> <operator>&lt;=</operator> <name><name>pTSBuf</name><operator>-&gt;</operator><name>numOfGroups</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>newSize</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>pTSBuf</name><operator>-&gt;</operator><name>numOfAlloc</name></name> <operator>*</operator> <literal type="number">1.5</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>newSize</name> <operator>&gt;</operator> <name><name>pTSBuf</name><operator>-&gt;</operator><name>numOfAlloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>STSGroupBlockInfoEx</name><modifier>*</modifier></type> <name>tmp</name> <init>=
        <expr><operator>(</operator><name>STSGroupBlockInfoEx</name><operator>*</operator><operator>)</operator><call><name>taosMemoryRealloc</name><argument_list>(<argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STSGroupBlockInfoEx</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>newSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>numOfAlloc</name></name> <operator>=</operator> <name>newSize</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTSBuf</name><operator>-&gt;</operator><name>pData</name><index>[<expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>numOfGroups</name></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STSGroupBlockInfoEx</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>newSize</name> <operator>-</operator> <name><name>pTSBuf</name><operator>-&gt;</operator><name>numOfGroups</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>numOfGroups</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>STSGroupBlockInfoEx</name><modifier>*</modifier></type> <name>pPrevBlockInfoEx</name> <init>= <expr><call><name>tsBufGetLastGroupInfo</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// update prev vnode length info in file</comment>
    <expr_stmt><expr><call><name>TSBufUpdateGroupInfo</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>, <argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>numOfGroups</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pPrevBlockInfoEx</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// set initial value for vnode block</comment>
  <decl_stmt><decl><type><name>STSGroupBlockInfo</name><modifier>*</modifier></type> <name>pBlockInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pTSBuf</name><operator>-&gt;</operator><name>pData</name><index>[<expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>numOfGroups</name></name></expr>]</index></name><operator>.</operator><name>info</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name><name>pTSBuf</name><operator>-&gt;</operator><name>fileSize</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>offset</name></name> <operator>&gt;=</operator> <call><name>getDataStartOffset</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// update vnode info in file</comment>
  <expr_stmt><expr><call><name>TSBufUpdateGroupInfo</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>, <argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>numOfGroups</name></name></expr></argument>, <argument><expr><name>pBlockInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// add one vnode info</comment>
  <expr_stmt><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>numOfGroups</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <comment type="line">// update the header info</comment>
  <decl_stmt><decl><type><name>STSBufFileHeader</name></type> <name>header</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>magic</name> <operator>=</operator> <name>TS_COMP_FILE_MAGIC</name></expr>, <expr><operator>.</operator><name>numOfGroup</name> <operator>=</operator> <name><name>pTSBuf</name><operator>-&gt;</operator><name>numOfGroups</name></name></expr>, <expr><operator>.</operator><name>tsOrder</name> <operator>=</operator> <name><name>pTSBuf</name><operator>-&gt;</operator><name>tsOrder</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>STSBufUpdateHeader</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>tsBufGetLastGroupInfo</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>shrinkBuffer</name><parameter_list>(<parameter><decl><type><name>STSList</name><modifier>*</modifier></type> <name>ptsData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// shrink tmp buffer size if it consumes too many memory compared to the pre-defined size</comment>
  <if_stmt><if>if <condition>(<expr><name><name>ptsData</name><operator>-&gt;</operator><name>allocSize</name></name> <operator>&gt;=</operator> <name><name>ptsData</name><operator>-&gt;</operator><name>threshold</name></name> <operator>*</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>rawBuf</name> <init>= <expr><call><name>taosMemoryRealloc</name><argument_list>(<argument><expr><name><name>ptsData</name><operator>-&gt;</operator><name>rawBuf</name></name></expr></argument>, <argument><expr><name>MEM_BUF_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>rawBuf</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>ptsData</name><operator>-&gt;</operator><name>rawBuf</name></name> <operator>=</operator> <name>rawBuf</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>ptsData</name><operator>-&gt;</operator><name>allocSize</name></name> <operator>=</operator> <name>MEM_BUF_SIZE</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getTagAreaLength</name><parameter_list>(<parameter><decl><type><name>SVariant</name><modifier>*</modifier></type> <name>pa</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>t</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pa</name><operator>-&gt;</operator><name>nLen</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>pa</name><operator>-&gt;</operator><name>nType</name></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pa</name><operator>-&gt;</operator><name>nType</name></name> <operator>!=</operator> <name>TSDB_DATA_TYPE_NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>t</name> <operator>+=</operator> <name><name>pa</name><operator>-&gt;</operator><name>nLen</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>t</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>writeDataToDisk</name><parameter_list>(<parameter><decl><type><name>STSBuf</name><modifier>*</modifier></type> <name>pTSBuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>tsData</name><operator>.</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STSBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><operator>&amp;</operator><name><name>pTSBuf</name><operator>-&gt;</operator><name>block</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STSList</name><modifier>*</modifier></type>  <name>pTsData</name> <init>= <expr><operator>&amp;</operator><name><name>pTSBuf</name><operator>-&gt;</operator><name>tsData</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>numOfElem</name></name> <operator>=</operator> <name><name>pTsData</name><operator>-&gt;</operator><name>len</name></name> <operator>/</operator> <name>TSDB_KEYSIZE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>compLen</name></name> <operator>=</operator> <call><name>tsCompressTimestamp</name><argument_list>(<argument><expr><name><name>pTsData</name><operator>-&gt;</operator><name>rawBuf</name></name></expr></argument>, <argument><expr><name><name>pTsData</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>pTsData</name><operator>-&gt;</operator><name>len</name></name> <operator>/</operator> <name>TSDB_KEYSIZE</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>payload</name></name></expr></argument>,
                                        <argument><expr><name><name>pTsData</name><operator>-&gt;</operator><name>allocSize</name></name></expr></argument>, <argument><expr><name>TWO_STAGE_COMP</name></expr></argument>, <argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>assistBuf</name></name></expr></argument>, <argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>bufSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>r</name> <init>= <expr><call><name>taosLSeekFile</name><argument_list>(<argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>fileSize</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/*
   * format for output data:
   * 1. tags, number of ts, size after compressed, payload, size after compressed
   * 2. tags, number of ts, size after compressed, payload, size after compressed
   *
   * both side has the compressed length is used to support load data forwards/backwords.
   */</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>metaLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>metaLen</name> <operator>+=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosWriteFile</name><argument_list>(<argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBlock</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>nType</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>nType</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>trueLen</name> <init>= <expr><name><name>pBlock</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>nLen</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pBlock</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>nType</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_BINARY</name> <operator>||</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>nType</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_NCHAR</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>metaLen</name> <operator>+=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosWriteFile</name><argument_list>(<argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBlock</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>nLen</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>nLen</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>metaLen</name> <operator>+=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosWriteFile</name><argument_list>(<argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>pz</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>pBlock</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>nLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pBlock</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>nType</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_FLOAT</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>metaLen</name> <operator>+=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosWriteFile</name><argument_list>(<argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBlock</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>nLen</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>nLen</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>tfloat</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name><name>pBlock</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>d</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>metaLen</name> <operator>+=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosWriteFile</name><argument_list>(<argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tfloat</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>pBlock</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>nLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pBlock</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>nType</name></name> <operator>!=</operator> <name>TSDB_DATA_TYPE_NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>metaLen</name> <operator>+=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosWriteFile</name><argument_list>(<argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBlock</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>nLen</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>nLen</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>metaLen</name> <operator>+=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosWriteFile</name><argument_list>(<argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBlock</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>i</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>pBlock</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>nLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>trueLen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>metaLen</name> <operator>+=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosWriteFile</name><argument_list>(<argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trueLen</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>nLen</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>taosWriteFile</name><argument_list>(<argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBlock</name><operator>-&gt;</operator><name>numOfElem</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>numOfElem</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosWriteFile</name><argument_list>(<argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBlock</name><operator>-&gt;</operator><name>compLen</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>compLen</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosWriteFile</name><argument_list>(<argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>payload</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>pBlock</name><operator>-&gt;</operator><name>compLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosWriteFile</name><argument_list>(<argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBlock</name><operator>-&gt;</operator><name>compLen</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>compLen</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>metaLen</name> <operator>+=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosWriteFile</name><argument_list>(<argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trueLen</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>nLen</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>metaLen</name> <operator>==</operator> <call><name>getTagAreaLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBlock</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>blockSize</name> <init>= <expr><name>metaLen</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>numOfElem</name></name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>compLen</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>compLen</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>fileSize</name></name> <operator>+=</operator> <name>blockSize</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>tsData</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>STSGroupBlockInfoEx</name><modifier>*</modifier></type> <name>pGroupBlockInfoEx</name> <init>= <expr><call><name>tsBufGetLastGroupInfo</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pGroupBlockInfoEx</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>compLen</name></name> <operator>+=</operator> <name>blockSize</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pGroupBlockInfoEx</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>numOfBlocks</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>shrinkBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTSBuf</name><operator>-&gt;</operator><name>tsData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>expandBuffer</name><parameter_list>(<parameter><decl><type><name>STSList</name><modifier>*</modifier></type> <name>ptsData</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>inputSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>ptsData</name><operator>-&gt;</operator><name>allocSize</name></name> <operator>-</operator> <name><name>ptsData</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;</operator> <name>inputSize</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>newSize</name> <init>= <expr><name>inputSize</name> <operator>+</operator> <name><name>ptsData</name><operator>-&gt;</operator><name>len</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>tmp</name> <init>= <expr><call><name>taosMemoryRealloc</name><argument_list>(<argument><expr><name><name>ptsData</name><operator>-&gt;</operator><name>rawBuf</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>newSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// todo</comment>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>ptsData</name><operator>-&gt;</operator><name>rawBuf</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ptsData</name><operator>-&gt;</operator><name>allocSize</name></name> <operator>=</operator> <name>newSize</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>STSBlock</name><modifier>*</modifier></type> <name>readDataFromDisk</name><parameter_list>(<parameter><decl><type><name>STSBuf</name><modifier>*</modifier></type> <name>pTSBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>order</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>decomp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STSBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><operator>&amp;</operator><name><name>pTSBuf</name><operator>-&gt;</operator><name>block</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// clear the memory buffer</comment>
  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>compLen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>padding</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>numOfElem</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>offset</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>order</name> <operator>==</operator> <name>TSDB_ORDER_DESC</name></expr>)</condition> <block>{<block_content>
    <comment type="block">/*
     * set the right position for the reversed traverse, the reversed traverse is started from
     * the end of each comp data block
     */</comment>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>prev</name> <init>= <expr><operator>-</operator><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>padding</name></name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>nLen</name></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>taosLSeekFile</name><argument_list>(<argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><name>prev</name></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type>  <name>sz</name> <init>= <expr><call><name>taosReadFile</name><argument_list>(<argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBlock</name><operator>-&gt;</operator><name>padding</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>padding</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>taosReadFile</name><argument_list>(<argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBlock</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>nLen</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>nLen</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>compLen</name></name> <operator>=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>padding</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>compLen</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>compLen</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>numOfElem</name></name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <call><name>getTagAreaLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBlock</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>taosLSeekFile</name><argument_list>(<argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><operator>-</operator><name>offset</name></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>taosReadFile</name><argument_list>(<argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBlock</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>nType</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>nType</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>taosReadFile</name><argument_list>(<argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBlock</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>nLen</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>nLen</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// NOTE: mix types tags are not supported</comment>
  <decl_stmt><decl><type><name>size_t</name></type> <name>sz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pBlock</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>nType</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_BINARY</name> <operator>||</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>nType</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_NCHAR</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>tp</name> <init>= <expr><call><name>taosMemoryRealloc</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>pz</name></name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>nLen</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>tp</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>nLen</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>pz</name></name> <operator>=</operator> <name>tp</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>taosReadFile</name><argument_list>(<argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>pz</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>pBlock</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>nLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pBlock</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>nType</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_FLOAT</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>float</name></type> <name>tfloat</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>taosReadFile</name><argument_list>(<argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tfloat</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>pBlock</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>nLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>d</name></name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>tfloat</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pBlock</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>nType</name></name> <operator>!=</operator> <name>TSDB_DATA_TYPE_NULL</name></expr>)</condition> <block>{<block_content>  <comment type="line">// TODO check the return value</comment>
    <expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>taosReadFile</name><argument_list>(<argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBlock</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>i</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>pBlock</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>nLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>taosReadFile</name><argument_list>(<argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBlock</name><operator>-&gt;</operator><name>numOfElem</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>numOfElem</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>taosReadFile</name><argument_list>(<argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBlock</name><operator>-&gt;</operator><name>compLen</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>compLen</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>taosReadFile</name><argument_list>(<argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>payload</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>pBlock</name><operator>-&gt;</operator><name>compLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>decomp</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>tsData</name><operator>.</operator><name>len</name></name> <operator>=</operator>
        <call><name>tsDecompressTimestamp</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>payload</name></name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>compLen</name></name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>numOfElem</name></name></expr></argument>, <argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>tsData</name><operator>.</operator><name>rawBuf</name></name></expr></argument>,
                              <argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>tsData</name><operator>.</operator><name>allocSize</name></name></expr></argument>, <argument><expr><name>TWO_STAGE_COMP</name></expr></argument>, <argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>assistBuf</name></name></expr></argument>, <argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>bufSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// read the comp length at the length of comp block</comment>
  <expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>taosReadFile</name><argument_list>(<argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBlock</name><operator>-&gt;</operator><name>padding</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>padding</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>padding</name></name> <operator>==</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>compLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>taosReadFile</name><argument_list>(<argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>nLen</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pBlock</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>nType</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>n</name> <operator>==</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>nLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// for backwards traverse, set the start position at the end of previous block</comment>
  <if_stmt><if>if <condition>(<expr><name>order</name> <operator>==</operator> <name>TSDB_ORDER_DESC</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>r</name> <init>= <expr><call><name>taosLSeekFile</name><argument_list>(<argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><operator>-</operator><name>offset</name></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>pBlock</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// set the order of ts buffer if the ts order has not been set yet</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>setCheckTSOrder</name><parameter_list>(<parameter><decl><type><name>STSBuf</name><modifier>*</modifier></type> <name>pTSBuf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pData</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STSList</name><modifier>*</modifier></type> <name>ptsData</name> <init>= <expr><operator>&amp;</operator><name><name>pTSBuf</name><operator>-&gt;</operator><name>tsData</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>tsOrder</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>ptsData</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>TSKEY</name></type> <name>lastKey</name> <init>= <expr><operator>*</operator><operator>(</operator><name>TSKEY</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>ptsData</name><operator>-&gt;</operator><name>rawBuf</name></name> <operator>+</operator> <name><name>ptsData</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name>TSDB_KEYSIZE</name><operator>)</operator></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name>lastKey</name> <operator>&gt;</operator> <operator>*</operator><operator>(</operator><name>TSKEY</name><operator>*</operator><operator>)</operator><name>pData</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>tsOrder</name></name> <operator>=</operator> <name>TSDB_ORDER_DESC</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>tsOrder</name></name> <operator>=</operator> <name>TSDB_ORDER_ASC</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>TSDB_KEYSIZE</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// no data in current vnode, more than one ts is added, check the orders</comment>
      <decl_stmt><decl><type><name>TSKEY</name></type> <name>k1</name> <init>= <expr><operator>*</operator><operator>(</operator><name>TSKEY</name><operator>*</operator><operator>)</operator><operator>(</operator><name>pData</name><operator>)</operator></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>TSKEY</name></type> <name>k2</name> <init>= <expr><operator>*</operator><operator>(</operator><name>TSKEY</name><operator>*</operator><operator>)</operator><operator>(</operator><name>pData</name> <operator>+</operator> <name>TSDB_KEYSIZE</name><operator>)</operator></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name>k1</name> <operator>&lt;</operator> <name>k2</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>tsOrder</name></name> <operator>=</operator> <name>TSDB_ORDER_ASC</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>k1</name> <operator>&gt;</operator> <name>k2</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>tsOrder</name></name> <operator>=</operator> <name>TSDB_ORDER_DESC</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="line">// todo handle error</comment>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="line">// todo the timestamp order is set, check the asc/desc order of appended data</comment>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tsBufAppend</name><parameter_list>(<parameter><decl><type><name>STSBuf</name><modifier>*</modifier></type> <name>pTSBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>SVariant</name><modifier>*</modifier></type> <name>tag</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pData</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STSGroupBlockInfoEx</name><modifier>*</modifier></type> <name>pBlockInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STSList</name><modifier>*</modifier></type>             <name>ptsData</name> <init>= <expr><operator>&amp;</operator><name><name>pTSBuf</name><operator>-&gt;</operator><name>tsData</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>numOfGroups</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>tsBufGetLastGroupInfo</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>info</name><operator>.</operator><name>id</name></name> <operator>!=</operator> <name>id</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>writeDataToDisk</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>shrinkBuffer</name><argument_list>(<argument><expr><name>ptsData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pBlockInfo</name> <operator>=</operator> <call><name>addOneGroupInfo</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>pBlockInfo</name> <operator>=</operator> <call><name>tsBufGetLastGroupInfo</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name></name> <operator>==</operator> <name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>taosVariantCompare</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTSBuf</name><operator>-&gt;</operator><name>block</name><operator>.</operator><name>tag</name></name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>ptsData</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">// new arrived data with different tags value, save current value into disk first</comment>
    <expr_stmt><expr><call><name>writeDataToDisk</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>expandBuffer</name><argument_list>(<argument><expr><name>ptsData</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>taosVariantAssign</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTSBuf</name><operator>-&gt;</operator><name>block</name><operator>.</operator><name>tag</name></name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ptsData</name><operator>-&gt;</operator><name>rawBuf</name></name> <operator>+</operator> <name><name>ptsData</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// todo check return value</comment>
  <expr_stmt><expr><call><name>setCheckTSOrder</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>ptsData</name><operator>-&gt;</operator><name>len</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>len</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>numOfTotal</name></name> <operator>+=</operator> <name>len</name> <operator>/</operator> <name>TSDB_KEYSIZE</name></expr>;</expr_stmt>

  <comment type="line">// the size of raw data exceeds the size of the default prepared buffer, so</comment>
  <comment type="line">// during getBufBlock, the output buffer needs to be large enough.</comment>
  <if_stmt><if>if <condition>(<expr><name><name>ptsData</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;=</operator> <name><name>ptsData</name><operator>-&gt;</operator><name>threshold</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>writeDataToDisk</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>shrinkBuffer</name><argument_list>(<argument><expr><name>ptsData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tsBufResetPos</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tsBufFlush</name><parameter_list>(<parameter><decl><type><name>STSBuf</name><modifier>*</modifier></type> <name>pTSBuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>tsData</name><operator>.</operator><name>len</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>writeDataToDisk</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>shrinkBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTSBuf</name><operator>-&gt;</operator><name>tsData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>STSGroupBlockInfoEx</name><modifier>*</modifier></type> <name>pBlockInfoEx</name> <init>= <expr><call><name>tsBufGetLastGroupInfo</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// update prev vnode length info in file</comment>
  <expr_stmt><expr><call><name>TSBufUpdateGroupInfo</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>, <argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>numOfGroups</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBlockInfoEx</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// save the ts order into header</comment>
  <decl_stmt><decl><type><name>STSBufFileHeader</name></type> <name>header</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>magic</name> <operator>=</operator> <name>TS_COMP_FILE_MAGIC</name></expr>, <expr><operator>.</operator><name>numOfGroup</name> <operator>=</operator> <name><name>pTSBuf</name><operator>-&gt;</operator><name>numOfGroups</name></name></expr>, <expr><operator>.</operator><name>tsOrder</name> <operator>=</operator> <name><name>pTSBuf</name><operator>-&gt;</operator><name>tsOrder</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>STSBufUpdateHeader</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsBufFindGroupById</name><parameter_list>(<parameter><decl><type><name>STSGroupBlockInfoEx</name><modifier>*</modifier></type> <name>pGroupInfoEx</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfGroups</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfGroups</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pGroupInfoEx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>info</name><operator>.</operator><name>id</name></name> <operator>==</operator> <name>id</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>j</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// todo opt performance by cache blocks info</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsBufFindBlock</name><parameter_list>(<parameter><decl><type><name>STSBuf</name><modifier>*</modifier></type> <name>pTSBuf</name></decl></parameter>, <parameter><decl><type><name>STSGroupBlockInfo</name><modifier>*</modifier></type> <name>pBlockInfo</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>blockIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>taosLSeekFile</name><argument_list>(<argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// sequentially read the compressed data blocks, start from the beginning of the comp data block of this vnode</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>    <name>decomp</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><operator>(</operator><name>i</name><operator>++</operator><operator>)</operator> <operator>&lt;=</operator> <name>blockIndex</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>readDataFromDisk</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>, <argument><expr><name>TSDB_ORDER_ASC</name></expr></argument>, <argument><expr><name>decomp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <comment type="line">// set the file position to be the end of previous comp block</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>order</name></name> <operator>==</operator> <name>TSDB_ORDER_DESC</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>STSBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><operator>&amp;</operator><name><name>pTSBuf</name><operator>-&gt;</operator><name>block</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>   <name>compBlockSize</name> <init>=
        <expr><name><name>pBlock</name><operator>-&gt;</operator><name>compLen</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>compLen</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>numOfElem</name></name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <call><name>getTagAreaLength</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBlock</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>taosLSeekFile</name><argument_list>(<argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><operator>-</operator><name>compBlockSize</name></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>UNUSED</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsBufFindBlockByTag</name><parameter_list>(<parameter><decl><type><name>STSBuf</name><modifier>*</modifier></type> <name>pTSBuf</name></decl></parameter>, <parameter><decl><type><name>STSGroupBlockInfo</name><modifier>*</modifier></type> <name>pBlockInfo</name></decl></parameter>, <parameter><decl><type><name>SVariant</name><modifier>*</modifier></type> <name>tag</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type> <name>decomp</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>order</name></name> <operator>==</operator> <name>TSDB_ORDER_ASC</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>pBlockInfo</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// reversed traverse starts from the end of block</comment>
    <expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>pBlockInfo</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name><name>pBlockInfo</name><operator>-&gt;</operator><name>compLen</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosLSeekFile</name><argument_list>(<argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>offset</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pBlockInfo</name><operator>-&gt;</operator><name>numOfBlocks</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>readDataFromDisk</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>, <argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>order</name></name></expr></argument>, <argument><expr><name>decomp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>taosVariantCompare</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTSBuf</name><operator>-&gt;</operator><name>block</name><operator>.</operator><name>tag</name></name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>pTSBuf</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>order</name></name> <operator>==</operator> <name>TSDB_ORDER_ASC</name><operator>)</operator></expr> ?</condition><then> <expr><name>i</name></expr> </then><else>: <expr><operator>(</operator><name><name>pBlockInfo</name><operator>-&gt;</operator><name>numOfBlocks</name></name> <operator>-</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></else></ternary></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tsBufGetBlock</name><parameter_list>(<parameter><decl><type><name>STSBuf</name><modifier>*</modifier></type> <name>pTSBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>groupIndex</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>blockIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STSGroupBlockInfo</name><modifier>*</modifier></type> <name>pBlockInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pTSBuf</name><operator>-&gt;</operator><name>pData</name><index>[<expr><name>groupIndex</name></expr>]</index></name><operator>.</operator><name>info</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>numOfBlocks</name></name> <operator>&lt;=</operator> <name>blockIndex</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STSCursor</name><modifier>*</modifier></type> <name>pCur</name> <init>= <expr><operator>&amp;</operator><name><name>pTSBuf</name><operator>-&gt;</operator><name>cur</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pCur</name><operator>-&gt;</operator><name>vgroupIndex</name></name> <operator>==</operator> <name>groupIndex</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>pCur</name><operator>-&gt;</operator><name>blockIndex</name></name> <operator>&lt;=</operator> <name>blockIndex</name> <operator>&amp;&amp;</operator> <name><name>pCur</name><operator>-&gt;</operator><name>order</name></name> <operator>==</operator> <name>TSDB_ORDER_ASC</name><operator>)</operator> <operator>||</operator>
                                          <operator>(</operator><name><name>pCur</name><operator>-&gt;</operator><name>blockIndex</name></name> <operator>&gt;=</operator> <name>blockIndex</name> <operator>&amp;&amp;</operator> <name><name>pCur</name><operator>-&gt;</operator><name>order</name></name> <operator>==</operator> <name>TSDB_ORDER_DESC</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>    <name>decomp</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>step</name> <init>= <expr><call><name>abs</name><argument_list>(<argument><expr><name>blockIndex</name> <operator>-</operator> <name><name>pCur</name><operator>-&gt;</operator><name>blockIndex</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><operator>(</operator><operator>++</operator><name>i</name><operator>)</operator> <operator>&lt;=</operator> <name>step</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>readDataFromDisk</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>, <argument><expr><name><name>pCur</name><operator>-&gt;</operator><name>order</name></name></expr></argument>, <argument><expr><name>decomp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <return>return;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>tsBufFindBlock</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>, <argument><expr><name>pBlockInfo</name></expr></argument>, <argument><expr><name>blockIndex</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>STSBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><operator>&amp;</operator><name><name>pTSBuf</name><operator>-&gt;</operator><name>block</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>s</name> <init>= <expr><name><name>pBlock</name><operator>-&gt;</operator><name>numOfElem</name></name> <operator>*</operator> <name>TSDB_KEYSIZE</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/*
   * In order to accommodate all the qualified data, the actual buffer size for one block with identical tags value
   * may exceed the maximum allowed size during *tsBufAppend* function by invoking expandBuffer function
   */</comment>
  <if_stmt><if>if <condition>(<expr><name>s</name> <operator>&gt;</operator> <name><name>pTSBuf</name><operator>-&gt;</operator><name>tsData</name><operator>.</operator><name>allocSize</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>expandBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTSBuf</name><operator>-&gt;</operator><name>tsData</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>tsData</name><operator>.</operator><name>len</name></name> <operator>=</operator>
      <call><name>tsDecompressTimestamp</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>payload</name></name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>compLen</name></name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>numOfElem</name></name></expr></argument>, <argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>tsData</name><operator>.</operator><name>rawBuf</name></name></expr></argument>,
                            <argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>tsData</name><operator>.</operator><name>allocSize</name></name></expr></argument>, <argument><expr><name>TWO_STAGE_COMP</name></expr></argument>, <argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>assistBuf</name></name></expr></argument>, <argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>bufSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name><name>pTSBuf</name><operator>-&gt;</operator><name>tsData</name><operator>.</operator><name>len</name></name> <operator>/</operator> <name>TSDB_KEYSIZE</name> <operator>==</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>numOfElem</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pTSBuf</name><operator>-&gt;</operator><name>tsData</name><operator>.</operator><name>allocSize</name></name> <operator>&gt;=</operator> <name><name>pTSBuf</name><operator>-&gt;</operator><name>tsData</name><operator>.</operator><name>len</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pCur</name><operator>-&gt;</operator><name>vgroupIndex</name></name> <operator>=</operator> <name>groupIndex</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCur</name><operator>-&gt;</operator><name>blockIndex</name></name> <operator>=</operator> <name>blockIndex</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pCur</name><operator>-&gt;</operator><name>tsIndex</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>pCur</name><operator>-&gt;</operator><name>order</name></name> <operator>==</operator> <name>TSDB_ORDER_ASC</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>pBlock</name><operator>-&gt;</operator><name>numOfElem</name></name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>doUpdateGroupInfo</name><parameter_list>(<parameter><decl><type><name>STSBuf</name><modifier>*</modifier></type> <name>pTSBuf</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>STSGroupBlockInfo</name><modifier>*</modifier></type> <name>pVInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>offset</name> <operator>&gt;=</operator> <call><name>getDataStartOffset</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosLSeekFile</name><argument_list>(<argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>offset</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosWriteFile</name><argument_list>(<argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><name>pVInfo</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STSGroupBlockInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>STSGroupBlockInfo</name><modifier>*</modifier></type> <name>tsBufGetGroupBlockInfo</name><parameter_list>(<parameter><decl><type><name>STSBuf</name><modifier>*</modifier></type> <name>pTSBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><call><name>tsBufFindGroupById</name><argument_list>(<argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>numOfGroups</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><operator>&amp;</operator><name><name>pTSBuf</name><operator>-&gt;</operator><name>pData</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>info</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>STSBufUpdateHeader</name><parameter_list>(<parameter><decl><type><name>STSBuf</name><modifier>*</modifier></type> <name>pTSBuf</name></decl></parameter>, <parameter><decl><type><name>STSBufFileHeader</name><modifier>*</modifier></type> <name>pHeader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pTSBuf</name><operator>-&gt;</operator><name>pFile</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <name>pHeader</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pHeader</name><operator>-&gt;</operator><name>numOfGroup</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pHeader</name><operator>-&gt;</operator><name>magic</name></name> <operator>!=</operator> <name>TS_COMP_FILE_MAGIC</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pHeader</name><operator>-&gt;</operator><name>tsOrder</name></name> <operator>==</operator> <name>TSDB_ORDER_ASC</name> <operator>||</operator> <name><name>pHeader</name><operator>-&gt;</operator><name>tsOrder</name></name> <operator>==</operator> <name>TSDB_ORDER_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>r</name> <init>= <expr><call><name>taosLSeekFile</name><argument_list>(<argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">//    qError("fseek failed, errno:%d", errno);</comment>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>ws</name> <init>= <expr><call><name>taosWriteFile</name><argument_list>(<argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><name>pHeader</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STSBufFileHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ws</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">//    qError("ts update header fwrite failed, size:%d, expected size:%d", (int32_t)ws,</comment>
    <comment type="line">//    (int32_t)sizeof(STSBufFileHeader));</comment>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>tsBufNextPos</name><parameter_list>(<parameter><decl><type><name>STSBuf</name><modifier>*</modifier></type> <name>pTSBuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pTSBuf</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pTSBuf</name><operator>-&gt;</operator><name>numOfGroups</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STSCursor</name><modifier>*</modifier></type> <name>pCur</name> <init>= <expr><operator>&amp;</operator><name><name>pTSBuf</name><operator>-&gt;</operator><name>cur</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// get the first/last position according to traverse order</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pCur</name><operator>-&gt;</operator><name>vgroupIndex</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pCur</name><operator>-&gt;</operator><name>order</name></name> <operator>==</operator> <name>TSDB_ORDER_ASC</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tsBufGetBlock</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>block</name><operator>.</operator><name>numOfElem</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>  <comment type="line">// the whole list is empty, return</comment>
        <expr_stmt><expr><call><name>tsBufResetPos</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>false</name></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><name>true</name></expr>;</return>
      </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// get the last timestamp record in the last block of the last vnode</comment>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>numOfGroups</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>int32_t</name></type> <name>groupIndex</name> <init>= <expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>numOfGroups</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>pCur</name><operator>-&gt;</operator><name>vgroupIndex</name></name> <operator>=</operator> <name>groupIndex</name></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>int32_t</name></type>            <name>id</name> <init>= <expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>pData</name><index>[<expr><name><name>pCur</name><operator>-&gt;</operator><name>vgroupIndex</name></name></expr>]</index></name><operator>.</operator><name><name>info</name><operator>.</operator><name>id</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>STSGroupBlockInfo</name><modifier>*</modifier></type> <name>pBlockInfo</name> <init>= <expr><call><name>tsBufGetGroupBlockInfo</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type>            <name>blockIndex</name> <init>= <expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>numOfBlocks</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>tsBufGetBlock</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>, <argument><expr><name>groupIndex</name></expr></argument>, <argument><expr><name>blockIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>pCur</name><operator>-&gt;</operator><name>tsIndex</name></name> <operator>=</operator> <name><name>pTSBuf</name><operator>-&gt;</operator><name>block</name><operator>.</operator><name>numOfElem</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>block</name><operator>.</operator><name>numOfElem</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tsBufResetPos</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>false</name></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><name>true</name></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>step</name> <init>= <expr><ternary><condition><expr><name><name>pCur</name><operator>-&gt;</operator><name>order</name></name> <operator>==</operator> <name>TSDB_ORDER_ASC</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>tsData</name><operator>.</operator><name>len</name></name> <operator>==</operator> <name><name>pTSBuf</name><operator>-&gt;</operator><name>block</name><operator>.</operator><name>numOfElem</name></name> <operator>*</operator> <name>TSDB_KEYSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pCur</name><operator>-&gt;</operator><name>order</name></name> <operator>==</operator> <name>TSDB_ORDER_ASC</name> <operator>&amp;&amp;</operator> <name><name>pCur</name><operator>-&gt;</operator><name>tsIndex</name></name> <operator>&gt;=</operator> <name><name>pTSBuf</name><operator>-&gt;</operator><name>block</name><operator>.</operator><name>numOfElem</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator>
        <operator>(</operator><name><name>pCur</name><operator>-&gt;</operator><name>order</name></name> <operator>==</operator> <name>TSDB_ORDER_DESC</name> <operator>&amp;&amp;</operator> <name><name>pCur</name><operator>-&gt;</operator><name>tsIndex</name></name> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>id</name> <init>= <expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>pData</name><index>[<expr><name><name>pCur</name><operator>-&gt;</operator><name>vgroupIndex</name></name></expr>]</index></name><operator>.</operator><name><name>info</name><operator>.</operator><name>id</name></name></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>STSGroupBlockInfo</name><modifier>*</modifier></type> <name>pBlockInfo</name> <init>= <expr><call><name>tsBufGetGroupBlockInfo</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>pBlockInfo</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name><name>pCur</name><operator>-&gt;</operator><name>blockIndex</name></name> <operator>&gt;=</operator> <name><name>pBlockInfo</name><operator>-&gt;</operator><name>numOfBlocks</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>pCur</name><operator>-&gt;</operator><name>order</name></name> <operator>==</operator> <name>TSDB_ORDER_ASC</name><operator>)</operator> <operator>||</operator>
          <operator>(</operator><name><name>pCur</name><operator>-&gt;</operator><name>blockIndex</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pCur</name><operator>-&gt;</operator><name>order</name></name> <operator>==</operator> <name>TSDB_ORDER_DESC</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pCur</name><operator>-&gt;</operator><name>vgroupIndex</name></name> <operator>&gt;=</operator> <name><name>pTSBuf</name><operator>-&gt;</operator><name>numOfGroups</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>pCur</name><operator>-&gt;</operator><name>order</name></name> <operator>==</operator> <name>TSDB_ORDER_ASC</name><operator>)</operator> <operator>||</operator>
            <operator>(</operator><name><name>pCur</name><operator>-&gt;</operator><name>vgroupIndex</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pCur</name><operator>-&gt;</operator><name>order</name></name> <operator>==</operator> <name>TSDB_ORDER_DESC</name><operator>)</operator></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>pCur</name><operator>-&gt;</operator><name>vgroupIndex</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
          <return>return <expr><name>false</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>pBlockInfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>false</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>int32_t</name></type> <name>blockIndex</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>pCur</name><operator>-&gt;</operator><name>order</name></name> <operator>==</operator> <name>TSDB_ORDER_ASC</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><name><name>pBlockInfo</name><operator>-&gt;</operator><name>numOfBlocks</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>tsBufGetBlock</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>, <argument><expr><name><name>pCur</name><operator>-&gt;</operator><name>vgroupIndex</name></name> <operator>+</operator> <name>step</name></expr></argument>, <argument><expr><name>blockIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>

      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>tsBufGetBlock</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>, <argument><expr><name><name>pCur</name><operator>-&gt;</operator><name>vgroupIndex</name></name></expr></argument>, <argument><expr><name><name>pCur</name><operator>-&gt;</operator><name>blockIndex</name></name> <operator>+</operator> <name>step</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pCur</name><operator>-&gt;</operator><name>tsIndex</name></name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>

  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tsBufResetPos</name><parameter_list>(<parameter><decl><type><name>STSBuf</name><modifier>*</modifier></type> <name>pTSBuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pTSBuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <operator>(</operator><name>STSCursor</name><operator>)</operator><block>{<expr><operator>.</operator><name>tsIndex</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>.</operator><name>blockIndex</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>.</operator><name>vgroupIndex</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>.</operator><name>order</name> <operator>=</operator> <name><name>pTSBuf</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>order</name></name></expr>}</block></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>STSElem</name></type> <name>tsBufGetElem</name><parameter_list>(<parameter><decl><type><name>STSBuf</name><modifier>*</modifier></type> <name>pTSBuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STSElem</name></type> <name>elem1</name> <init>= <expr><block>{<expr><operator>.</operator><name>id</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTSBuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>elem1</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STSCursor</name><modifier>*</modifier></type> <name>pCur</name> <init>= <expr><operator>&amp;</operator><name><name>pTSBuf</name><operator>-&gt;</operator><name>cur</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pCur</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pCur</name><operator>-&gt;</operator><name>vgroupIndex</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>elem1</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STSBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><operator>&amp;</operator><name><name>pTSBuf</name><operator>-&gt;</operator><name>block</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>elem1</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name><name>pTSBuf</name><operator>-&gt;</operator><name>pData</name><index>[<expr><name><name>pCur</name><operator>-&gt;</operator><name>vgroupIndex</name></name></expr>]</index></name><operator>.</operator><name><name>info</name><operator>.</operator><name>id</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>elem1</name><operator>.</operator><name>ts</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>TSKEY</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pTSBuf</name><operator>-&gt;</operator><name>tsData</name><operator>.</operator><name>rawBuf</name></name> <operator>+</operator> <name><name>pCur</name><operator>-&gt;</operator><name>tsIndex</name></name> <operator>*</operator> <name>TSDB_KEYSIZE</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>elem1</name><operator>.</operator><name>tag</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pBlock</name><operator>-&gt;</operator><name>tag</name></name></expr>;</expr_stmt>

  <return>return <expr><name>elem1</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * current only support ts comp data from two vnode merge
 * @param pDestBuf
 * @param pSrcBuf
 * @param id
 * @return
 */</comment>
<function><type><name>int32_t</name></type> <name>tsBufMerge</name><parameter_list>(<parameter><decl><type><name>STSBuf</name><modifier>*</modifier></type> <name>pDestBuf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>STSBuf</name><modifier>*</modifier></type> <name>pSrcBuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pDestBuf</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pSrcBuf</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pSrcBuf</name><operator>-&gt;</operator><name>numOfGroups</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pDestBuf</name><operator>-&gt;</operator><name>numOfGroups</name></name> <operator>+</operator> <name><name>pSrcBuf</name><operator>-&gt;</operator><name>numOfGroups</name></name> <operator>&gt;</operator> <name>TS_COMP_FILE_GROUP_MAX</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// src can only have one vnode index</comment>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pSrcBuf</name><operator>-&gt;</operator><name>numOfGroups</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// there are data in buffer, flush to disk first</comment>
  <expr_stmt><expr><call><name>tsBufFlush</name><argument_list>(<argument><expr><name>pDestBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// compared with the last vnode id</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>id</name> <init>= <expr><call><name>tsBufGetLastGroupInfo</name><argument_list>(<argument><expr><operator>(</operator><name>STSBuf</name><operator>*</operator><operator>)</operator><name>pSrcBuf</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>info</name><operator>.</operator><name>id</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>id</name> <operator>!=</operator> <call><name>tsBufGetLastGroupInfo</name><argument_list>(<argument><expr><name>pDestBuf</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>info</name><operator>.</operator><name>id</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>oldSize</name> <init>= <expr><name><name>pDestBuf</name><operator>-&gt;</operator><name>numOfGroups</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>newSize</name> <init>= <expr><name>oldSize</name> <operator>+</operator> <name><name>pSrcBuf</name><operator>-&gt;</operator><name>numOfGroups</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pDestBuf</name><operator>-&gt;</operator><name>numOfAlloc</name></name> <operator>&lt;</operator> <name>newSize</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pDestBuf</name><operator>-&gt;</operator><name>numOfAlloc</name></name> <operator>=</operator> <name>newSize</name></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>STSGroupBlockInfoEx</name><modifier>*</modifier></type> <name>tmp</name> <init>= <expr><call><name>taosMemoryRealloc</name><argument_list>(<argument><expr><name><name>pDestBuf</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STSGroupBlockInfoEx</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>newSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name><name>pDestBuf</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// directly copy the vnode index information</comment>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDestBuf</name><operator>-&gt;</operator><name>pData</name><index>[<expr><name>oldSize</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pSrcBuf</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>pSrcBuf</name><operator>-&gt;</operator><name>numOfGroups</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>STSGroupBlockInfoEx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// set the new offset value</comment>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pSrcBuf</name><operator>-&gt;</operator><name>numOfGroups</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>STSGroupBlockInfoEx</name><modifier>*</modifier></type> <name>pBlockInfoEx</name> <init>= <expr><operator>&amp;</operator><name><name>pDestBuf</name><operator>-&gt;</operator><name>pData</name><index>[<expr><name>i</name> <operator>+</operator> <name>oldSize</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>pBlockInfoEx</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <operator>(</operator><name><name>pSrcBuf</name><operator>-&gt;</operator><name>pData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>info</name><operator>.</operator><name>offset</name></name> <operator>-</operator> <call><name>getDataStartOffset</name><argument_list>()</argument_list></call><operator>)</operator> <operator>+</operator> <name><name>pDestBuf</name><operator>-&gt;</operator><name>fileSize</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pBlockInfoEx</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name><name>pDestBuf</name><operator>-&gt;</operator><name>numOfGroups</name></name> <operator>=</operator> <name>newSize</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>STSGroupBlockInfoEx</name><modifier>*</modifier></type> <name>pBlockInfoEx</name> <init>= <expr><call><name>tsBufGetLastGroupInfo</name><argument_list>(<argument><expr><name>pDestBuf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>pBlockInfoEx</name><operator>-&gt;</operator><name>len</name></name> <operator>+=</operator> <name><name>pSrcBuf</name><operator>-&gt;</operator><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>len</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pBlockInfoEx</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>numOfBlocks</name></name> <operator>+=</operator> <name><name>pSrcBuf</name><operator>-&gt;</operator><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>info</name><operator>.</operator><name>numOfBlocks</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pBlockInfoEx</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>compLen</name></name> <operator>+=</operator> <name><name>pSrcBuf</name><operator>-&gt;</operator><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>info</name><operator>.</operator><name>compLen</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pBlockInfoEx</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>r</name> <init>= <expr><call><name>taosLSeekFile</name><argument_list>(<argument><expr><name><name>pDestBuf</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>offset</name> <init>= <expr><call><name>getDataStartOffset</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>pSrcBuf</name><operator>-&gt;</operator><name>fileSize</name></name> <operator>-</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><name>offset</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>written</name> <init>= <expr><call><name>taosFSendFile</name><argument_list>(<argument><expr><name><name>pDestBuf</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><name><name>pSrcBuf</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>written</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>written</name> <operator>!=</operator> <name>size</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pDestBuf</name><operator>-&gt;</operator><name>numOfTotal</name></name> <operator>+=</operator> <name><name>pSrcBuf</name><operator>-&gt;</operator><name>numOfTotal</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>oldSize</name> <init>= <expr><name><name>pDestBuf</name><operator>-&gt;</operator><name>fileSize</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// file meta data may be cached, close and reopen the file for accurate file size.</comment>
  <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDestBuf</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// pDestBuf-&gt;pFile = fopen(pDestBuf-&gt;path, "rb+");</comment>
  <expr_stmt><expr><name><name>pDestBuf</name><operator>-&gt;</operator><name>pFile</name></name> <operator>=</operator> <call><name>taosOpenFile</name><argument_list>(<argument><expr><name><name>pDestBuf</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>TD_FILE_WRITE</name> <operator>|</operator> <name>TD_FILE_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pDestBuf</name><operator>-&gt;</operator><name>pFile</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>file_size</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taosFStatFile</name><argument_list>(<argument><expr><name><name>pDestBuf</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pDestBuf</name><operator>-&gt;</operator><name>fileSize</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>file_size</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pDestBuf</name><operator>-&gt;</operator><name>fileSize</name></name> <operator>==</operator> <name>oldSize</name> <operator>+</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>STSBuf</name><modifier>*</modifier></type> <name>tsBufCreateFromCompBlocks</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pData</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfBlocks</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>order</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STSBuf</name><modifier>*</modifier></type> <name>pTSBuf</name> <init>= <expr><call><name>tsBufCreate</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>order</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>STSGroupBlockInfo</name><modifier>*</modifier></type> <name>pBlockInfo</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><call><name>addOneGroupInfo</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>info</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>numOfBlocks</name></name> <operator>=</operator> <name>numOfBlocks</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>compLen</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <call><name>getDataStartOffset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>

  <comment type="line">// update prev vnode length info in file</comment>
  <expr_stmt><expr><call><name>TSBufUpdateGroupInfo</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>, <argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>numOfGroups</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>pBlockInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>taosLSeekFile</name><argument_list>(<argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">//    qError("fseek failed, errno:%d", errno);</comment>
    <expr_stmt><expr><call><name>tsBufDestroy</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>sz</name> <init>= <expr><call><name>taosWriteFile</name><argument_list>(<argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>pData</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>sz</name> <operator>!=</operator> <name>len</name></expr>)</condition> <block>{<block_content>
    <comment type="line">//    qError("ts data fwrite failed, write size:%d, expected size:%d", (int32_t)sz, len);</comment>
    <expr_stmt><expr><call><name>tsBufDestroy</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>fileSize</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>tsOrder</name></name> <operator>=</operator> <name>order</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>order</name> <operator>==</operator> <name>TSDB_ORDER_ASC</name> <operator>||</operator> <name>order</name> <operator>==</operator> <name>TSDB_ORDER_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>STSBufFileHeader</name></type> <name>header</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>magic</name> <operator>=</operator> <name>TS_COMP_FILE_MAGIC</name></expr>, <expr><operator>.</operator><name>numOfGroup</name> <operator>=</operator> <name><name>pTSBuf</name><operator>-&gt;</operator><name>numOfGroups</name></name></expr>, <expr><operator>.</operator><name>tsOrder</name> <operator>=</operator> <name><name>pTSBuf</name><operator>-&gt;</operator><name>tsOrder</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>STSBufUpdateHeader</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsBufDestroy</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// TODO taosFsync??</comment>
  <comment type="line">//  if (taosFsync(fileno(pTSBuf-&gt;pFile)) == -1) {</comment>
  <comment type="line" format="doxygen">////    qError("fsync failed, errno:%d", errno);</comment>
  <comment type="line">//    tsBufDestroy(pTSBuf);</comment>
  <comment type="line">//    return NULL;</comment>
  <comment type="line">//  }</comment>

  <return>return <expr><name>pTSBuf</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>STSElem</name></type> <name>tsBufGetElemStartPos</name><parameter_list>(<parameter><decl><type><name>STSBuf</name><modifier>*</modifier></type> <name>pTSBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>SVariant</name><modifier>*</modifier></type> <name>tag</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STSElem</name></type> <name>elem</name> <init>= <expr><block>{<expr><operator>.</operator><name>id</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>pTSBuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>elem</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><call><name>tsBufFindGroupById</name><argument_list>(<argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>numOfGroups</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>elem</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// for debug purpose</comment>
  <comment type="line">//  tsBufDisplay(pTSBuf);</comment>

  <decl_stmt><decl><type><name>STSCursor</name><modifier>*</modifier></type>         <name>pCur</name> <init>= <expr><operator>&amp;</operator><name><name>pTSBuf</name><operator>-&gt;</operator><name>cur</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STSGroupBlockInfo</name><modifier>*</modifier></type> <name>pBlockInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pTSBuf</name><operator>-&gt;</operator><name>pData</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>info</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>blockIndex</name> <init>= <expr><call><name>tsBufFindBlockByTag</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>, <argument><expr><name>pBlockInfo</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>blockIndex</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>elem</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pCur</name><operator>-&gt;</operator><name>vgroupIndex</name></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCur</name><operator>-&gt;</operator><name>blockIndex</name></name> <operator>=</operator> <name>blockIndex</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tsBufGetBlock</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>blockIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>tsBufGetElem</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>STSCursor</name></type> <name>tsBufGetCursor</name><parameter_list>(<parameter><decl><type><name>STSBuf</name><modifier>*</modifier></type> <name>pTSBuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STSCursor</name></type> <name>c</name> <init>= <expr><block>{<expr><operator>.</operator><name>vgroupIndex</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTSBuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>c</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>cur</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tsBufSetCursor</name><parameter_list>(<parameter><decl><type><name>STSBuf</name><modifier>*</modifier></type> <name>pTSBuf</name></decl></parameter>, <parameter><decl><type><name>STSCursor</name><modifier>*</modifier></type> <name>pCur</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pTSBuf</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pCur</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">//  assert(pCur-&gt;vgroupIndex != -1 &amp;&amp; pCur-&gt;tsIndex &gt;= 0 &amp;&amp; pCur-&gt;blockIndex &gt;= 0);</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pCur</name><operator>-&gt;</operator><name>vgroupIndex</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsBufGetBlock</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>, <argument><expr><name><name>pCur</name><operator>-&gt;</operator><name>vgroupIndex</name></name></expr></argument>, <argument><expr><name><name>pCur</name><operator>-&gt;</operator><name>blockIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>cur</name></name> <operator>=</operator> <operator>*</operator><name>pCur</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tsBufSetTraverseOrder</name><parameter_list>(<parameter><decl><type><name>STSBuf</name><modifier>*</modifier></type> <name>pTSBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>order</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pTSBuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>order</name></name> <operator>=</operator> <name>order</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>STSBuf</name><modifier>*</modifier></type> <name>tsBufClone</name><parameter_list>(<parameter><decl><type><name>STSBuf</name><modifier>*</modifier></type> <name>pTSBuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pTSBuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tsBufFlush</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>tsBufCreateFromFile</name><argument_list>(<argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tsBufDisplay</name><parameter_list>(<parameter><decl><type><name>STSBuf</name><modifier>*</modifier></type> <name>pTSBuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-------start of ts comp file-------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"number of vnode:%d\n"</literal></expr></argument>, <argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>numOfGroups</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>old</name> <init>= <expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>order</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>order</name></name> <operator>=</operator> <name>TSDB_ORDER_ASC</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tsBufResetPos</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <while>while <condition>(<expr><call><name>tsBufNextPos</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>STSElem</name></type> <name>elem</name> <init>= <expr><call><name>tsBufGetElem</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>elem</name><operator>.</operator><name>tag</name><operator>-&gt;</operator><name>nType</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_BIGINT</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d-%"</literal> <name>PRId64</name> <literal type="string">"-%"</literal> <name>PRId64</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>elem</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>elem</name><operator>.</operator><name>tag</name><operator>-&gt;</operator><name>i</name></name></expr></argument>, <argument><expr><name><name>elem</name><operator>.</operator><name>ts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>cur</name><operator>.</operator><name>order</name></name> <operator>=</operator> <name>old</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-------end of ts comp file-------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getDataStartOffset</name><parameter_list>()</parameter_list> <block>{<block_content>
  <return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>STSBufFileHeader</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>TS_COMP_FILE_GROUP_MAX</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>STSGroupBlockInfo</name></expr></argument>)</argument_list></sizeof></expr>;</return>
</block_content>}</block></function>

<comment type="line">// update prev vnode length info in file</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>TSBufUpdateGroupInfo</name><parameter_list>(<parameter><decl><type><name>STSBuf</name><modifier>*</modifier></type> <name>pTSBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>STSGroupBlockInfo</name><modifier>*</modifier></type> <name>pBlockInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>offset</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>STSBufFileHeader</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>index</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>STSGroupBlockInfo</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>doUpdateGroupInfo</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>pBlockInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>STSBuf</name><modifier>*</modifier></type> <name>allocResForTSBuf</name><parameter_list>(<parameter><decl><type><name>STSBuf</name><modifier>*</modifier></type> <name>pTSBuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>INITIAL_GROUPINFO_SIZE</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>numOfAlloc</name></name> <operator>=</operator> <name>INITIAL_GROUPINFO_SIZE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>numOfAlloc</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STSGroupBlockInfoEx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>pData</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsBufDestroy</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>tsData</name><operator>.</operator><name>rawBuf</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>MEM_BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>tsData</name><operator>.</operator><name>rawBuf</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsBufDestroy</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>bufSize</name></name> <operator>=</operator> <name>MEM_BUF_SIZE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>tsData</name><operator>.</operator><name>threshold</name></name> <operator>=</operator> <name>MEM_BUF_SIZE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>tsData</name><operator>.</operator><name>allocSize</name></name> <operator>=</operator> <name>MEM_BUF_SIZE</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>assistBuf</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>MEM_BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>assistBuf</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsBufDestroy</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>block</name><operator>.</operator><name>payload</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>MEM_BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>block</name><operator>.</operator><name>payload</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsBufDestroy</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>fileSize</name></name> <operator>+=</operator> <call><name>getDataStartOffset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pTSBuf</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsBufGetNumOfGroup</name><parameter_list>(<parameter><decl><type><name>STSBuf</name><modifier>*</modifier></type> <name>pTSBuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pTSBuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>numOfGroups</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tsBufGetGroupIdList</name><parameter_list>(<parameter><decl><type><name>STSBuf</name><modifier>*</modifier></type> <name>pTSBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><call><name>tsBufGetNumOfGroup</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>num</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>id</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>(</operator><operator>*</operator><name>id</name><operator>)</operator> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><call><name>tsBufGetNumOfGroup</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>)</argument_list></call> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>id</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <name><name>pTSBuf</name><operator>-&gt;</operator><name>pData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>info</name><operator>.</operator><name>id</name></name></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>dumpFileBlockByGroupId</name><parameter_list>(<parameter><decl><type><name>STSBuf</name><modifier>*</modifier></type> <name>pTSBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>groupIndex</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>numOfBlocks</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>groupIndex</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>groupIndex</name> <operator>&lt;</operator> <name><name>pTSBuf</name><operator>-&gt;</operator><name>numOfGroups</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>STSGroupBlockInfo</name><modifier>*</modifier></type> <name>pBlockInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pTSBuf</name><operator>-&gt;</operator><name>pData</name><index>[<expr><name>groupIndex</name></expr>]</index></name><operator>.</operator><name>info</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>numOfBlocks</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosLSeekFile</name><argument_list>(<argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><call><name>taosGetErrorFile</name><argument_list>(<argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">//    qError("%p: fseek failed: %s", pSql, tstrerror(code));</comment>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>s</name> <init>= <expr><call><name>taosReadFile</name><argument_list>(<argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>compLen</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name><name>pBlockInfo</name><operator>-&gt;</operator><name>compLen</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><call><name>taosGetErrorFile</name><argument_list>(<argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">//    tscError("%p: fread didn't return expected data: %s", pSql, tstrerror(code));</comment>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name><name>pBlockInfo</name><operator>-&gt;</operator><name>compLen</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>numOfBlocks</name> <operator>=</operator> <name><name>pBlockInfo</name><operator>-&gt;</operator><name>numOfBlocks</name></name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>STSElem</name></type> <name>tsBufFindElemStartPosByTag</name><parameter_list>(<parameter><decl><type><name>STSBuf</name><modifier>*</modifier></type> <name>pTSBuf</name></decl></parameter>, <parameter><decl><type><name>SVariant</name><modifier>*</modifier></type> <name>pTag</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STSElem</name></type> <name>el</name> <init>= <expr><block>{<expr><operator>.</operator><name>id</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pTSBuf</name><operator>-&gt;</operator><name>numOfGroups</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>el</name> <operator>=</operator> <call><name>tsBufGetElemStartPos</name><argument_list>(<argument><expr><name>pTSBuf</name></expr></argument>, <argument><expr><name><name>pTSBuf</name><operator>-&gt;</operator><name>pData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>info</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>pTag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>el</name><operator>.</operator><name>id</name></name> <operator>==</operator> <name><name>pTSBuf</name><operator>-&gt;</operator><name>pData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>info</name><operator>.</operator><name>id</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>el</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>el</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>tsBufIsValidElem</name><parameter_list>(<parameter><decl><type><name>STSElem</name><modifier>*</modifier></type> <name>pElem</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>pElem</name><operator>-&gt;</operator><name>id</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</return> </block_content>}</block></function>
</unit>
