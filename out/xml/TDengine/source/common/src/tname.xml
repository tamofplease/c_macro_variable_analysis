<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/common/src/tname.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tname.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcommon.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tstrbuild.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VALID_NAME_TYPE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) == TSDB_DB_NAME_T || (x) == TSDB_TABLE_NAME_T)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
int64_t taosGetIntervalStartTimestamp(int64_t startTime, int64_t slidingTime, int64_t intervalTime, char timeUnit, int16_t precision) {
  if (slidingTime == 0) {
    return startTime;
  }
  int64_t start = startTime;
  if (timeUnit == 'n' || timeUnit == 'y') {
    start /= 1000;
    if (precision == TSDB_TIME_PRECISION_MICRO) {
      start /= 1000;
    }
    struct tm tm;
    time_t t = (time_t)start;
    taosLocalTime(&amp;t, &amp;tm);
    tm.tm_sec = 0;
    tm.tm_min = 0;
    tm.tm_hour = 0;
    tm.tm_mday = 1;

    if (timeUnit == 'y') {
      tm.tm_mon = 0;
      tm.tm_year = (int)(tm.tm_year / slidingTime * slidingTime);
    } else {
      int mon = tm.tm_year * 12 + tm.tm_mon;
      mon = (int)(mon / slidingTime * slidingTime);
      tm.tm_year = mon / 12;
      tm.tm_mon = mon % 12;
    }

    start = mktime(&amp;tm) * 1000L;
    if (precision == TSDB_TIME_PRECISION_MICRO) {
      start *= 1000L;
    }
  } else {
    int64_t delta = startTime - intervalTime;
    int32_t factor = delta &gt; 0? 1:-1;

    start = (delta / slidingTime + factor) * slidingTime;

    if (timeUnit == 'd' || timeUnit == 'w') {
      <comment type="block">/*
      * here we revised the start time of day according to the local time zone,
      * but in case of DST, the start time of one day need to be dynamically decided.
      */</comment>
      <comment type="line">// todo refactor to extract function that is available for Linux/Windows/Mac platform</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WINDOWS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1900</literal></expr></cpp:if>
      <comment type="line">// see https://docs.microsoft.com/en-us/cpp/c-runtime-library/daylight-dstbias-timezone-and-tzname?view=vs-2019</comment>
      int64_t timezone = _timezone;
      int32_t daylight = _daylight;
      char**  tzname = _tzname;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

      int64_t t = (precision == TSDB_TIME_PRECISION_MILLI) ? MILLISECOND_PER_SECOND : MILLISECOND_PER_SECOND * 1000L;
      start += timezone * t;
    }

    int64_t end = start + intervalTime - 1;
    if (end &lt; startTime) {
      start += slidingTime;
    }
  }

  return start;
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>SName</name><modifier>*</modifier></type> <name>toName</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>acctId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pDbName</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pTableName</name></decl></parameter>, <parameter><decl><type><name>SName</name><modifier>*</modifier></type> <name>pName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pName</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TSDB_TABLE_NAME_T</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pName</name><operator>-&gt;</operator><name>acctId</name></name> <operator>=</operator> <name>acctId</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pName</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TSDB_DB_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>pName</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>, <argument><expr><name>pDbName</name></expr></argument>, <argument><expr><name>TSDB_DB_NAME_LEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pName</name><operator>-&gt;</operator><name>tname</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TSDB_TABLE_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>pName</name><operator>-&gt;</operator><name>tname</name></name></expr></argument>, <argument><expr><name>pTableName</name></expr></argument>, <argument><expr><name>TSDB_TABLE_NAME_LEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pName</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tNameExtractFullName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SName</name><modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>name</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>dst</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// invalid full name format, abort</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>tNameIsValid</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>snprintf</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>TSDB_DB_FNAME_LEN</name></expr></argument>, <argument><expr><literal type="string">"%d.%s"</literal></expr></argument>, <argument><expr><name><name>name</name><operator>-&gt;</operator><name>acctId</name></name></expr></argument>, <argument><expr><name><name>name</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>tnameLen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>name</name><operator>-&gt;</operator><name>tname</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tnameLen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <comment type="block">/*assert(name-&gt;type == TSDB_TABLE_NAME_T);*/</comment>
    <expr_stmt><expr><name><name>dst</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name><name>TS_PATH_DELIMITER</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>name</name><operator>-&gt;</operator><name>tname</name></name></expr></argument>, <argument><expr><name>tnameLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dst</name><index>[<expr><name>len</name> <operator>+</operator> <name>tnameLen</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tNameLen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SName</name><modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name></type>    <name><name>tmp</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>sprintf</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>name</name><operator>-&gt;</operator><name>acctId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len1</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>name</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len2</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>name</name><operator>-&gt;</operator><name>tname</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>name</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DB_NAME_T</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>len2</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>len</name> <operator>+</operator> <name>len1</name> <operator>+</operator> <name>TSDB_NAME_DELIMITER_LEN</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>len2</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>len</name> <operator>+</operator> <name>len1</name> <operator>+</operator> <name>len2</name> <operator>+</operator> <name>TSDB_NAME_DELIMITER_LEN</name> <operator>*</operator> <literal type="number">2</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>tNameIsValid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SName</name><modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VALID_NAME_TYPE</name><argument_list>(<argument><expr><name><name>name</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>name</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DB_NAME_T</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>name</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>name</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>name</name><operator>-&gt;</operator><name>tname</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>SName</name><modifier>*</modifier></type> <name>tNameDup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SName</name><modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SName</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SName</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SName</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tNameGetDbName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SName</name><modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>name</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>dst</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>name</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>, <argument><expr><call><name>tListLen</name><argument_list>(<argument><expr><name><name>name</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>tNameGetDbNameP</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SName</name><modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>&amp;</operator><name><name>name</name><operator>-&gt;</operator><name>dbname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tNameGetFullDbName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SName</name><modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>name</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>dst</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>TSDB_DB_FNAME_LEN</name></expr></argument>, <argument><expr><literal type="string">"%d.%s"</literal></expr></argument>, <argument><expr><name><name>name</name><operator>-&gt;</operator><name>acctId</name></name></expr></argument>, <argument><expr><name><name>name</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>tNameIsEmpty</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SName</name><modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>name</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>name</name><operator>-&gt;</operator><name>acctId</name></name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>tNameGetTableName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SName</name><modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>name</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>name</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_TABLE_NAME_T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>&amp;</operator><name><name>name</name><operator>-&gt;</operator><name>tname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tNameAssign</name><parameter_list>(<parameter><decl><type><name>SName</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SName</name><modifier>*</modifier></type> <name>src</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SName</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tNameSetDbName</name><parameter_list>(<parameter><decl><type><name>SName</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>acct</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>dbName</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nameLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dst</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>dbName</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>nameLen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// too long account id or too long db name</comment>
  <if_stmt><if>if <condition>(<expr><name>nameLen</name> <operator>&gt;=</operator> <call><name>tListLen</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DB_NAME_T</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>acctId</name></name> <operator>=</operator> <name>acct</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>, <argument><expr><name>dbName</name></expr></argument>, <argument><expr><name>nameLen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tNameAddTbName</name><parameter_list>(<parameter><decl><type><name>SName</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>tbName</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nameLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dst</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>tbName</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>nameLen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// too long account id or too long db name</comment>
  <if_stmt><if>if <condition>(<expr><name>nameLen</name> <operator>&gt;=</operator> <call><name>tListLen</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>tname</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name>nameLen</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TSDB_TABLE_NAME_T</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>tname</name></name></expr></argument>, <argument><expr><name>tbName</name></expr></argument>, <argument><expr><name>nameLen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tNameSetAcctId</name><parameter_list>(<parameter><decl><type><name>SName</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>acctId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dst</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>acctId</name></name> <operator>=</operator> <name>acctId</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>tNameDBNameEqual</name><parameter_list>(<parameter><decl><type><name>SName</name><modifier>*</modifier></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>SName</name><modifier>*</modifier></type> <name>right</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>left</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>right</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>right</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>left</name><operator>-&gt;</operator><name>acctId</name></name> <operator>!=</operator> <name><name>right</name><operator>-&gt;</operator><name>acctId</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><operator>(</operator><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>left</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>, <argument><expr><name><name>right</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>tNameTbNameEqual</name><parameter_list>(<parameter><decl><type><name>SName</name><modifier>*</modifier></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>SName</name><modifier>*</modifier></type> <name>right</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type> <name>equal</name> <init>= <expr><call><name>tNameDBNameEqual</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>equal</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>(</operator><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>left</name><operator>-&gt;</operator><name>tname</name></name></expr></argument>, <argument><expr><name><name>right</name><operator>-&gt;</operator><name>tname</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>equal</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tNameFromString</name><parameter_list>(<parameter><decl><type><name>SName</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dst</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>str</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>T_NAME_ACCT</name><operator>)</operator> <operator>==</operator> <name>T_NAME_ACCT</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>TS_PATH_DELIMITER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>acctId</name></name> <operator>=</operator> <call><name>taosStr2Int32</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>T_NAME_DB</name><operator>)</operator> <operator>==</operator> <name>T_NAME_DB</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DB_NAME_T</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>start</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><ternary><condition><expr><operator>(</operator><name>p</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>str</name></expr> </then><else>: <expr><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>TS_PATH_DELIMITER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>start</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// too long account id or too long db name</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>&gt;=</operator> <call><name>tListLen</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>(</operator><name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>dbname</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>T_NAME_TABLE</name><operator>)</operator> <operator>==</operator> <name>T_NAME_TABLE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TSDB_TABLE_NAME_T</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>start</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><ternary><condition><expr><operator>(</operator><name>p</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>str</name></expr> </then><else>: <expr><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

    <comment type="line">// too long account id or too long db name</comment>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>&gt;=</operator> <call><name>tListLen</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>tname</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>(</operator><name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>tname</name></name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>tname</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>compareKv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>p2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSmlKv</name><modifier>*</modifier></type> <name>kv1</name> <init>= <expr><operator>*</operator><operator>(</operator><name>SSmlKv</name><operator>*</operator><operator>*</operator><operator>)</operator><name>p1</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSmlKv</name><modifier>*</modifier></type> <name>kv2</name> <init>= <expr><operator>*</operator><operator>(</operator><name>SSmlKv</name><operator>*</operator><operator>*</operator><operator>)</operator><name>p2</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>kvLen1</name> <init>= <expr><name><name>kv1</name><operator>-&gt;</operator><name>keyLen</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>kvLen2</name> <init>= <expr><name><name>kv2</name><operator>-&gt;</operator><name>keyLen</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>res</name> <init>= <expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name><name>kv1</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>kv2</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><call><name>TMIN</name><argument_list>(<argument><expr><name>kvLen1</name></expr></argument>, <argument><expr><name>kvLen2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>res</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name>kvLen1</name> <operator>-</operator> <name>kvLen2</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * use stable name and tags to grearate child table name
 */</comment>
<function><type><name>void</name></type> <name>buildChildTableName</name><parameter_list>(<parameter><decl><type><name>RandTableName</name><modifier>*</modifier></type> <name>rName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStringBuilder</name></type> <name>sb</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosStringBuilderAppendStringLen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name><name>rName</name><operator>-&gt;</operator><name>stbFullName</name></name></expr></argument>, <argument><expr><name><name>rName</name><operator>-&gt;</operator><name>stbFullNameLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>(<expr><name><name>sb</name><operator>.</operator><name>buf</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>taosArraySort</name><argument_list>(<argument><expr><name><name>rName</name><operator>-&gt;</operator><name>tags</name></name></expr></argument>, <argument><expr><name>compareKv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>rName</name><operator>-&gt;</operator><name>tags</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>taosStringBuilderAppendChar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SSmlKv</name><modifier>*</modifier></type> <name>tagKv</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>rName</name><operator>-&gt;</operator><name>tags</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosStringBuilderAppendStringLen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name><name>tagKv</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>tagKv</name><operator>-&gt;</operator><name>keyLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosStringBuilderAppendChar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>tagKv</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosStringBuilderAppendStringLen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name><name>tagKv</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>tagKv</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>taosStringBuilderAppendStringLen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><operator>(</operator><name><name>tagKv</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name><name>tagKv</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
  <decl_stmt><decl><type><name>size_t</name></type>    <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>     <name>keyJoined</name> <init>= <expr><call><name>taosStringBuilderGetResult</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>T_MD5_CTX</name></type> <name>context</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tMD5Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tMD5Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>keyJoined</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tMD5Final</name><argument_list>(<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>temp</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>rName</name><operator>-&gt;</operator><name>ctbShortName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'t'</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rName</name><operator>-&gt;</operator><name>ctbShortName</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'_'</literal></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name><name>context</name><operator>.</operator><name>digest</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name><name>rName</name><operator>-&gt;</operator><name>ctbShortName</name></name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosStringBuilderDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rName</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>context</name><operator>.</operator><name>digest</name></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
