<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/common/src/trow.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"trow.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tlog.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>tdVTypeByte</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{<expr><block>{
                                       <comment type="line">// 2 bits</comment>
                                       <expr><name>TD_VTYPE_NORM_BYTE_II</name></expr>,
                                       <expr><name>TD_VTYPE_NONE_BYTE_II</name></expr>,
                                       <expr><name>TD_VTYPE_NULL_BYTE_II</name></expr>,
                                   }</block></expr>,
                                   <expr><block>{
                                       <comment type="line">// 1 bit</comment>
                                       <expr><name>TD_VTYPE_NORM_BYTE_I</name></expr>,  <comment type="line">// normal</comment>
                                       <expr><name>TD_VTYPE_NULL_BYTE_I</name></expr>,
                                       <expr><name>TD_VTYPE_NULL_BYTE_I</name></expr>,  <comment type="line">// padding</comment>
                                   }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<comment type="line">// declaration</comment>
<function_decl><type><specifier>static</specifier> <name>uint8_t</name></type> <name>tdGetBitmapByte</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>byte</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type>    <name>tdSTSRowIterGetTpVal</name><parameter_list>(<parameter><decl><type><name>STSRowIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>, <parameter><decl><type><name>col_type_t</name></type> <name>colType</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>SCellVal</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type>    <name>tdSTSRowIterGetKvVal</name><parameter_list>(<parameter><decl><type><name>STSRowIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>, <parameter><decl><type><name>col_id_t</name></type> <name>colId</name></decl></parameter>, <parameter><decl><type><name>col_id_t</name> <modifier>*</modifier></type><name>nIdx</name></decl></parameter>, <parameter><decl><type><name>SCellVal</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type>    <name>tdSTpRowGetVal</name><parameter_list>(<parameter><decl><type><name>STSRow</name> <modifier>*</modifier></type><name>pRow</name></decl></parameter>, <parameter><decl><type><name>col_id_t</name></type> <name>colId</name></decl></parameter>, <parameter><decl><type><name>col_type_t</name></type> <name>colType</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>flen</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>offset</name></decl></parameter>,
                              <parameter><decl><type><name>col_id_t</name></type> <name>colIdx</name></decl></parameter>, <parameter><decl><type><name>SCellVal</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type>    <name>tdSKvRowGetVal</name><parameter_list>(<parameter><decl><type><name>STSRow</name> <modifier>*</modifier></type><name>pRow</name></decl></parameter>, <parameter><decl><type><name>col_id_t</name></type> <name>colId</name></decl></parameter>, <parameter><decl><type><name>col_id_t</name></type> <name>colIdx</name></decl></parameter>, <parameter><decl><type><name>SCellVal</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>tdSCellValPrint</name><parameter_list>(<parameter><decl><type><name>SCellVal</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>colType</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// implementation</comment>
<function><type><name>STSRow</name> <modifier>*</modifier></type><name>tdRowDup</name><parameter_list>(<parameter><decl><type><name>STSRow</name> <modifier>*</modifier></type><name>row</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STSRow</name> <modifier>*</modifier></type><name>trow</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><call><name>TD_ROW_LEN</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>trow</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>tdRowCpy</name><argument_list>(<argument><expr><name>trow</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>trow</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tdSRowPrint</name><parameter_list>(<parameter><decl><type><name>STSRow</name> <modifier>*</modifier></type><name>row</name></decl></parameter>, <parameter><decl><type><name>STSchema</name> <modifier>*</modifier></type><name>pSchema</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STSRowIter</name></type> <name>iter</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tdSTSRowIterInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>pSchema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdSTSRowIterReset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s &gt;&gt;&gt;type:%d,sver:%d "</literal></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>TD_ROW_TYPE</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>TD_ROW_SVER</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>STColumn</name> <modifier>*</modifier></type><name>cols</name> <init>= <expr><operator>(</operator><name>STColumn</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>iter</name><operator>.</operator><name>pSchema</name><operator>-&gt;</operator><name>columns</name></name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SCellVal</name></type> <name>sVal</name> <init>= <expr><block>{<expr><operator>.</operator><name>valType</name> <operator>=</operator> <literal type="number">255</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>tdSTSRowIterNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sVal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>sVal</name><operator>.</operator><name>valType</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>sVal</name><operator>.</operator><name>valType</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>sVal</name><operator>.</operator><name>valType</name></name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tdSCellValPrint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sVal</name></expr></argument>, <argument><expr><name><name>cols</name><index>[<expr><name><name>iter</name><operator>.</operator><name>colIdx</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tdSCellValPrint</name><parameter_list>(<parameter><decl><type><name>SCellVal</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>colType</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>tdValTypeIsNull</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>valType</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"NULL "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>tdValTypeIsNone</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>valType</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"NONE "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pVal</name><operator>-&gt;</operator><name>val</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"BadVal "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <switch>switch <condition>(<expr><name>colType</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_DATA_TYPE_BOOL</name></expr>:</case>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><operator>*</operator><operator>(</operator><name>int8_t</name> <operator>*</operator><operator>)</operator><name><name>pVal</name><operator>-&gt;</operator><name>val</name></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">"false"</literal></expr> </then><else>: <expr><literal type="string">"true"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_TINYINT</name></expr>:</case>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%"</literal> <name>PRIi8</name> <literal type="string">" "</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int8_t</name> <operator>*</operator><operator>)</operator><name><name>pVal</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_SMALLINT</name></expr>:</case>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%"</literal> <name>PRIi16</name> <literal type="string">" "</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name><name>pVal</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_INT</name></expr>:</case>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%"</literal> <name>PRIi32</name> <literal type="string">" "</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><name><name>pVal</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>:</case>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%"</literal> <name>PRIi64</name> <literal type="string">" "</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name><name>pVal</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_FLOAT</name></expr>:</case>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%f "</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>pVal</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>:</case>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lf "</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name><name>pVal</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_VARCHAR</name></expr>:</case>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"VARCHAR "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>:</case>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%"</literal> <name>PRIi64</name> <literal type="string">" "</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name><name>pVal</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_NCHAR</name></expr>:</case>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"NCHAR "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_UTINYINT</name></expr>:</case>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%"</literal> <name>PRIu8</name> <literal type="string">" "</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>pVal</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_USMALLINT</name></expr>:</case>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%"</literal> <name>PRIu16</name> <literal type="string">" "</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>pVal</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_UINT</name></expr>:</case>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%"</literal> <name>PRIu32</name> <literal type="string">" "</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name><name>pVal</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_UBIGINT</name></expr>:</case>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%"</literal> <name>PRIu64</name> <literal type="string">" "</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name><name>pVal</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_JSON</name></expr>:</case>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"JSON "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_VARBINARY</name></expr>:</case>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"VARBIN "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_DECIMAL</name></expr>:</case>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"DECIMAL "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_BLOB</name></expr>:</case>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"BLOB "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_MEDIUMBLOB</name></expr>:</case>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"MedBLOB "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <comment type="line">// case TSDB_DATA_TYPE_BINARY:</comment>
    <comment type="line">//   printf("BINARY ");</comment>
    <comment type="line">//   break;</comment>
    <case>case <expr><name>TSDB_DATA_TYPE_MAX</name></expr>:</case>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"UNDEF "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"UNDEF "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>compareKvRowColId</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>col_id_t</name> <operator>*</operator><operator>)</operator><name>key1</name> <operator>&gt;</operator> <operator>(</operator><operator>(</operator><name>SKvRowIdx</name> <operator>*</operator><operator>)</operator><name>key2</name><operator>)</operator><operator>-&gt;</operator><name>colId</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><operator>(</operator><name>col_id_t</name> <operator>*</operator><operator>)</operator><name>key1</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>SKvRowIdx</name> <operator>*</operator><operator>)</operator><name>key2</name><operator>)</operator><operator>-&gt;</operator><name>colId</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>tdSKvRowGetVal</name><parameter_list>(<parameter><decl><type><name>STSRow</name> <modifier>*</modifier></type><name>pRow</name></decl></parameter>, <parameter><decl><type><name>col_id_t</name></type> <name>colId</name></decl></parameter>, <parameter><decl><type><name>col_id_t</name></type> <name>colIdx</name></decl></parameter>, <parameter><decl><type><name>SCellVal</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>colId</name> <operator>==</operator> <name>PRIMARYKEY_TIMESTAMP_COL_ID</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdRowSetVal</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>TD_VTYPE_NORM</name></expr></argument>, <argument><expr><call><name>TD_ROW_KEY_ADDR</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int16_t</name></type> <name>nCols</name> <init>= <expr><call><name>tdRowGetNCols</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>nCols</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>valType</name></name> <operator>=</operator> <name>TD_VTYPE_NONE</name></expr>;</expr_stmt>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SKvRowIdx</name> <modifier>*</modifier></type><name>pColIdx</name> <init>=
      <expr><operator>(</operator><name>SKvRowIdx</name> <operator>*</operator><operator>)</operator><call><name>taosbsearch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>colId</name></expr></argument>, <argument><expr><call><name>TD_ROW_COL_IDX</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nCols</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SKvRowIdx</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>compareKvRowColId</name></expr></argument>, <argument><expr><name>TD_EQ</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pColIdx</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>valType</name></name> <operator>=</operator> <name>TD_VTYPE_NONE</name></expr>;</expr_stmt>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pBitmap</name> <init>= <expr><call><name>tdGetBitmapAddrKv</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>, <argument><expr><call><name>tdRowGetNCols</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tdGetKvRowValOfCol</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>pRow</name></expr></argument>, <argument><expr><name>pBitmap</name></expr></argument>, <argument><expr><name><name>pColIdx</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>,
                     <argument><expr><call><name>POINTER_DISTANCE</name><argument_list>(<argument><expr><name>pColIdx</name></expr></argument>, <argument><expr><call><name>TD_ROW_COL_IDX</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SKvRowIdx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>tdSTpRowGetVal</name><parameter_list>(<parameter><decl><type><name>STSRow</name> <modifier>*</modifier></type><name>pRow</name></decl></parameter>, <parameter><decl><type><name>col_id_t</name></type> <name>colId</name></decl></parameter>, <parameter><decl><type><name>col_type_t</name></type> <name>colType</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>flen</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>col_id_t</name></type> <name>colIdx</name></decl></parameter>,
                    <parameter><decl><type><name>SCellVal</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>colId</name> <operator>==</operator> <name>PRIMARYKEY_TIMESTAMP_COL_ID</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdRowSetVal</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>TD_VTYPE_NORM</name></expr></argument>, <argument><expr><call><name>TD_ROW_KEY_ADDR</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pBitmap</name> <init>= <expr><call><name>tdGetBitmapAddrTp</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>, <argument><expr><name>flen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tdGetTpRowValOfCol</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>pRow</name></expr></argument>, <argument><expr><name>pBitmap</name></expr></argument>, <argument><expr><name>colType</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>colIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>tdSTSRowIterFetch</name><parameter_list>(<parameter><decl><type><name>STSRowIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>, <parameter><decl><type><name>col_id_t</name></type> <name>colId</name></decl></parameter>, <parameter><decl><type><name>col_type_t</name></type> <name>colType</name></decl></parameter>, <parameter><decl><type><name>SCellVal</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>colId</name> <operator>==</operator> <name>PRIMARYKEY_TIMESTAMP_COL_ID</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>pRow</name><operator>-&gt;</operator><name>ts</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>valType</name></name> <operator>=</operator> <name>TD_VTYPE_NORM</name></expr>;</expr_stmt>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>TD_IS_TP_ROW</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pRow</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>STColumn</name> <modifier>*</modifier></type><name>pCol</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>STSchema</name> <modifier>*</modifier></type><name>pSchema</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>pSchema</name></name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name><name>pIter</name><operator>-&gt;</operator><name>colIdx</name></name> <operator>&lt;</operator> <name><name>pSchema</name><operator>-&gt;</operator><name>numOfCols</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pCol</name> <operator>=</operator> <operator>&amp;</operator><name><name>pSchema</name><operator>-&gt;</operator><name>columns</name><index>[<expr><name><name>pIter</name><operator>-&gt;</operator><name>colIdx</name></name></expr>]</index></name></expr>;</expr_stmt>  <comment type="line">// 1st column of schema is primary TS key</comment>
      <if_stmt><if>if <condition>(<expr><name>colId</name> <operator>==</operator> <name><name>pCol</name><operator>-&gt;</operator><name>colId</name></name></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pCol</name><operator>-&gt;</operator><name>colId</name></name> <operator>&lt;</operator> <name>colId</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>++</operator><name><name>pIter</name><operator>-&gt;</operator><name>colIdx</name></name></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><name>false</name></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>tdSTSRowIterGetTpVal</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>, <argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>++</operator><name><name>pIter</name><operator>-&gt;</operator><name>colIdx</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>TD_IS_KV_ROW</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pRow</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>tdSTSRowIterGetKvVal</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>, <argument><expr><name>colId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>kvIdx</name></name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>valType</name></name> <operator>=</operator> <name>TD_VTYPE_NONE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>COL_REACH_END</name><argument_list>(<argument><expr><name>colId</name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>maxColId</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>tdSTSRowIterNext</name><parameter_list>(<parameter><decl><type><name>STSRowIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>, <parameter><decl><type><name>SCellVal</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pIter</name><operator>-&gt;</operator><name>colIdx</name></name> <operator>&gt;=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>pSchema</name><operator>-&gt;</operator><name>numOfCols</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STColumn</name> <modifier>*</modifier></type><name>pCol</name> <init>= <expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>pSchema</name><operator>-&gt;</operator><name>columns</name><index>[<expr><name><name>pIter</name><operator>-&gt;</operator><name>colIdx</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pCol</name><operator>-&gt;</operator><name>colId</name></name> <operator>==</operator> <name>PRIMARYKEY_TIMESTAMP_COL_ID</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>pRow</name><operator>-&gt;</operator><name>ts</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>valType</name></name> <operator>=</operator> <name>TD_VTYPE_NORM</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>++</operator><name><name>pIter</name><operator>-&gt;</operator><name>colIdx</name></name></expr>;</expr_stmt>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>TD_IS_TP_ROW</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pRow</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdSTSRowIterGetTpVal</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>, <argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>TD_IS_KV_ROW</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pRow</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdSTSRowIterGetKvVal</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>, <argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>kvIdx</name></name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><operator>++</operator><name><name>pIter</name><operator>-&gt;</operator><name>colIdx</name></name></expr>;</expr_stmt>

  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>tdSTSRowIterGetTpVal</name><parameter_list>(<parameter><decl><type><name>STSRowIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>, <parameter><decl><type><name>col_type_t</name></type> <name>colType</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>SCellVal</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STSRow</name> <modifier>*</modifier></type><name>pRow</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>pRow</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pRow</name><operator>-&gt;</operator><name>statis</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>valType</name></name> <operator>=</operator> <name>TD_VTYPE_NORM</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name>colType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>VarDataOffsetT</name> <operator>*</operator><operator>)</operator><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><call><name>TD_ROW_DATA</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><call><name>TD_ROW_DATA</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tdGetBitmapValType</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pBitmap</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>colIdx</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVal</name><operator>-&gt;</operator><name>valType</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>valType</name></name> <operator>=</operator> <name>TD_VTYPE_NONE</name></expr>;</expr_stmt>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pVal</name><operator>-&gt;</operator><name>valType</name></name> <operator>==</operator> <name>TD_VTYPE_NORM</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name>colType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>VarDataOffsetT</name> <operator>*</operator><operator>)</operator><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><call><name>TD_ROW_DATA</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><call><name>TD_ROW_DATA</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>tdSTSRowIterGetKvVal</name><parameter_list>(<parameter><decl><type><name>STSRowIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>, <parameter><decl><type><name>col_id_t</name></type> <name>colId</name></decl></parameter>, <parameter><decl><type><name>col_id_t</name> <modifier>*</modifier></type><name>nIdx</name></decl></parameter>, <parameter><decl><type><name>SCellVal</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STSRow</name>    <modifier>*</modifier></type><name>pRow</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>pRow</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SKvRowIdx</name> <modifier>*</modifier></type><name>pKvIdx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>       <name>colFound</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>col_id_t</name></type>   <name>kvNCols</name> <init>= <expr><call><name>tdRowGetNCols</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>      <modifier>*</modifier></type><name>pColIdx</name> <init>= <expr><call><name>TD_ROW_COL_IDX</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>*</operator><name>nIdx</name> <operator>&lt;</operator> <name>kvNCols</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pKvIdx</name> <operator>=</operator> <operator>(</operator><name>SKvRowIdx</name> <operator>*</operator><operator>)</operator><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>pColIdx</name></expr></argument>, <argument><expr><operator>*</operator><name>nIdx</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SKvRowIdx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pKvIdx</name><operator>-&gt;</operator><name>colId</name></name> <operator>==</operator> <name>colId</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>++</operator><operator>(</operator><operator>*</operator><name>nIdx</name><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>, <argument><expr><name><name>pKvIdx</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>colFound</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pKvIdx</name><operator>-&gt;</operator><name>colId</name></name> <operator>&gt;</operator> <name>colId</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>valType</name></name> <operator>=</operator> <name>TD_VTYPE_NONE</name></expr>;</expr_stmt>
      <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><operator>++</operator><operator>(</operator><operator>*</operator><name>nIdx</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>colFound</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>colId</name> <operator>&lt;=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>maxColId</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>valType</name></name> <operator>=</operator> <name>TD_VTYPE_NONE</name></expr>;</expr_stmt>
      <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tdGetBitmapValType</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pBitmap</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>kvIdx</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVal</name><operator>-&gt;</operator><name>valType</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>valType</name></name> <operator>=</operator> <name>TD_VTYPE_NONE</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tdSTSRowNew</name><parameter_list>(<parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pArray</name></decl></parameter>, <parameter><decl><type><name>STSchema</name> <modifier>*</modifier></type><name>pTSchema</name></decl></parameter>, <parameter><decl><type><name>STSRow</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppRow</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STColumn</name> <modifier>*</modifier></type><name>pTColumn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColVal</name>  <modifier>*</modifier></type><name>pColVal</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>nColVal</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>varDataLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>maxVarDataLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>iColVal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>     <modifier>*</modifier></type><name>varBuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>      <name>isAlloc</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>nColVal</name> <operator>&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iColumn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iColumn</name> <operator>&lt;</operator> <name><name>pTSchema</name><operator>-&gt;</operator><name>numOfCols</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>iColumn</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>pTColumn</name> <operator>=</operator> <operator>&amp;</operator><name><name>pTSchema</name><operator>-&gt;</operator><name>columns</name><index>[<expr><name>iColumn</name></expr>]</index></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>iColVal</name> <operator>&lt;</operator> <name>nColVal</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pColVal</name> <operator>=</operator> <operator>(</operator><name>SColVal</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>iColVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>pColVal</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>iColumn</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pColVal</name><operator>-&gt;</operator><name>cid</name></name> <operator>==</operator> <name><name>pTColumn</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>colId</name></name> <operator>==</operator> <name>PRIMARYKEY_TIMESTAMP_COL_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>pColVal</name> <operator>&amp;&amp;</operator> <call><name>COL_VAL_IS_VALUE</name><argument_list>(<argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>varDataLen</name> <operator>+=</operator> <operator>(</operator><name><name>pColVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>nData</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VarDataLenT</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>maxVarDataLen</name> <operator>&lt;</operator> <operator>(</operator><name><name>pColVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>nData</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VarDataLenT</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>maxVarDataLen</name> <operator>=</operator> <name><name>pColVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>nData</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VarDataLenT</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>varDataLen</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VarDataLenT</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name><name>pTColumn</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_VARCHAR</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>varDataLen</name> <operator>+=</operator> <name>CHAR_BYTES</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>maxVarDataLen</name> <operator>&lt;</operator> <name>CHAR_BYTES</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VarDataLenT</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name>maxVarDataLen</name> <operator>=</operator> <name>CHAR_BYTES</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VarDataLenT</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>varDataLen</name> <operator>+=</operator> <name>INT_BYTES</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>maxVarDataLen</name> <operator>&lt;</operator> <name>INT_BYTES</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VarDataLenT</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name>maxVarDataLen</name> <operator>=</operator> <name>INT_BYTES</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VarDataLenT</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><operator>++</operator><name>iColVal</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>ppRow</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>ppRow</name> <operator>=</operator> <operator>(</operator><name>STSRow</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(
        <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STSRow</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>pTSchema</name><operator>-&gt;</operator><name>flen</name></name> <operator>+</operator> <name>varDataLen</name> <operator>+</operator> <call><name>TD_BITMAP_BYTES</name><argument_list>(<argument><expr><name><name>pTSchema</name><operator>-&gt;</operator><name>numOfCols</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>isAlloc</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>ppRow</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>maxVarDataLen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>varBuf</name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>maxVarDataLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>varBuf</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>isAlloc</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><operator>*</operator><name>ppRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SRowBuilder</name></type> <name>rb</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tdSRowInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>, <argument><expr><name><name>pTSchema</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdSRowSetInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>, <argument><expr><name><name>pTSchema</name><operator>-&gt;</operator><name>numOfCols</name></name></expr></argument>, <argument><expr><name><name>pTSchema</name><operator>-&gt;</operator><name>numOfCols</name></name></expr></argument>, <argument><expr><name><name>pTSchema</name><operator>-&gt;</operator><name>flen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdSRowResetBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>, <argument><expr><operator>*</operator><name>ppRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>iColVal</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iColumn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iColumn</name> <operator>&lt;</operator> <name><name>pTSchema</name><operator>-&gt;</operator><name>numOfCols</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>iColumn</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>pTColumn</name> <operator>=</operator> <operator>&amp;</operator><name><name>pTSchema</name><operator>-&gt;</operator><name>columns</name><index>[<expr><name>iColumn</name></expr>]</index></name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>TDRowValT</name></type>   <name>valType</name> <init>= <expr><name>TD_VTYPE_NORM</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>iColVal</name> <operator>&lt;</operator> <name>nColVal</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pColVal</name> <operator>=</operator> <operator>(</operator><name>SColVal</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>iColVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>COL_VAL_IS_NONE</name><argument_list>(<argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>valType</name> <operator>=</operator> <name>TD_VTYPE_NONE</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>COL_VAL_IS_NULL</name><argument_list>(<argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>valType</name> <operator>=</operator> <name>TD_VTYPE_NULL</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name>varBuf</name></expr></argument>, <argument><expr><name><name>pColVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>nData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pColVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>nData</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>varBuf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pColVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pColVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>nData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>val</name> <operator>=</operator> <name>varBuf</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pColVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>val</name></name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>pColVal</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>valType</name> <operator>=</operator> <name>TD_VTYPE_NONE</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>tdAppendColValToRow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>, <argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>valType</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>iColVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><operator>++</operator><name>iColVal</name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>tdSRowEnd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>varBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>tdCompareColId</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>arg1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>arg2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>colId</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><name>arg1</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STColumn</name> <modifier>*</modifier></type><name>pCol</name> <init>= <expr><operator>(</operator><name>STColumn</name> <operator>*</operator><operator>)</operator><name>arg2</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>colId</name> <operator>&lt;</operator> <name><name>pCol</name><operator>-&gt;</operator><name>colId</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>colId</name> <operator>==</operator> <name><name>pCol</name><operator>-&gt;</operator><name>colId</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>tdSTSRowGetVal</name><parameter_list>(<parameter><decl><type><name>STSRowIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>, <parameter><decl><type><name>col_id_t</name></type> <name>colId</name></decl></parameter>, <parameter><decl><type><name>col_type_t</name></type> <name>colType</name></decl></parameter>, <parameter><decl><type><name>SCellVal</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>colId</name> <operator>==</operator> <name>PRIMARYKEY_TIMESTAMP_COL_ID</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>pRow</name><operator>-&gt;</operator><name>ts</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>valType</name></name> <operator>=</operator> <name>TD_VTYPE_NORM</name></expr>;</expr_stmt>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STSRow</name> <modifier>*</modifier></type><name>pRow</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>pRow</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int16_t</name></type> <name>colIdx</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>TD_IS_TP_ROW</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>STSchema</name> <modifier>*</modifier></type><name>pSchema</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>pSchema</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>STColumn</name> <modifier>*</modifier></type><name>pCol</name> <init>=
        <expr><operator>(</operator><name>STColumn</name> <operator>*</operator><operator>)</operator><call><name>taosbsearch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>colId</name></expr></argument>, <argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>columns</name></name></expr></argument>, <argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>numOfCols</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STColumn</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>tdCompareColId</name></expr></argument>, <argument><expr><name>TD_EQ</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pCol</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>valType</name></name> <operator>=</operator> <name>TD_VTYPE_NONE</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>COL_REACH_END</name><argument_list>(<argument><expr><name>colId</name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>maxColId</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
      <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TD_SUPPORT_BITMAP</name></cpp:ifdef>
    <expr_stmt><expr><name>colIdx</name> <operator>=</operator> <call><name>POINTER_DISTANCE</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>columns</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>STColumn</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>tdGetTpRowValOfCol</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>pRow</name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pBitmap</name></name></expr></argument>, <argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>colIdx</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>TD_IS_KV_ROW</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SKvRowIdx</name> <modifier>*</modifier></type><name>pIdx</name> <init>= <expr><operator>(</operator><name>SKvRowIdx</name> <operator>*</operator><operator>)</operator><call><name>taosbsearch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>colId</name></expr></argument>, <argument><expr><call><name>TD_ROW_COL_IDX</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tdRowGetNCols</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SKvRowIdx</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                                               <argument><expr><name>compareKvRowColId</name></expr></argument>, <argument><expr><name>TD_EQ</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TD_SUPPORT_BITMAP</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name>pIdx</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>colIdx</name> <operator>=</operator> <call><name>POINTER_DISTANCE</name><argument_list>(<argument><expr><name>pIdx</name></expr></argument>, <argument><expr><call><name>TD_ROW_COL_IDX</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SKvRowIdx</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>tdGetKvRowValOfCol</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>pRow</name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pBitmap</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>pIdx</name></expr> ?</condition><then> <expr><name><name>pIdx</name><operator>-&gt;</operator><name>offset</name></name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>, <argument><expr><name>colIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>COL_REACH_END</name><argument_list>(<argument><expr><name>colId</name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>maxColId</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>valType</name></name> <operator>=</operator> <name>TD_VTYPE_NONE</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tdGetBitmapValTypeII</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pBitmap</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>colIdx</name></decl></parameter>, <parameter><decl><type><name>TDRowValT</name> <modifier>*</modifier></type><name>pValType</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pBitmap</name> <operator>||</operator> <name>colIdx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int16_t</name></type> <name>nBytes</name> <init>= <expr><name>colIdx</name> <operator>/</operator> <name>TD_VTYPE_PARTS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int16_t</name></type> <name>nOffset</name> <init>= <expr><name>colIdx</name> <operator>&amp;</operator> <name>TD_VTYPE_OPTR</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>pDestByte</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>pBitmap</name></expr></argument>, <argument><expr><name>nBytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="line">// use literal value directly and not use formula to simplify the codes</comment>
  <switch>switch <condition>(<expr><name>nOffset</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="number">0</literal></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>pValType</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>*</operator><name>pDestByte</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xC0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="number">1</literal></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>pValType</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>*</operator><name>pDestByte</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x30</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="number">2</literal></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>pValType</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>*</operator><name>pDestByte</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0C</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="number">3</literal></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>pValType</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>pDestByte</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03</literal><operator>)</operator></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
      <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></switch>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tdGetBitmapValTypeI</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pBitmap</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>colIdx</name></decl></parameter>, <parameter><decl><type><name>TDRowValT</name> <modifier>*</modifier></type><name>pValType</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pBitmap</name> <operator>||</operator> <name>colIdx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int16_t</name></type> <name>nBytes</name> <init>= <expr><name>colIdx</name> <operator>/</operator> <name>TD_VTYPE_PARTS_I</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int16_t</name></type> <name>nOffset</name> <init>= <expr><name>colIdx</name> <operator>&amp;</operator> <name>TD_VTYPE_OPTR_I</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>pDestByte</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>pBitmap</name></expr></argument>, <argument><expr><name>nBytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="line">// use literal value directly and not use formula to simplify the codes</comment>
  <switch>switch <condition>(<expr><name>nOffset</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="number">0</literal></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>pValType</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>*</operator><name>pDestByte</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="number">1</literal></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>pValType</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>*</operator><name>pDestByte</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x40</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="number">2</literal></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>pValType</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>*</operator><name>pDestByte</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x20</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="number">3</literal></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>pValType</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>*</operator><name>pDestByte</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x10</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="number">4</literal></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>pValType</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>*</operator><name>pDestByte</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x08</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="number">5</literal></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>pValType</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>*</operator><name>pDestByte</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x04</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="number">6</literal></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>pValType</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>*</operator><name>pDestByte</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x02</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="number">7</literal></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>pValType</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>pDestByte</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
      <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></switch>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tdSetBitmapValTypeI</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pBitmap</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>colIdx</name></decl></parameter>, <parameter><decl><type><name>TDRowValT</name></type> <name>valType</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pBitmap</name> <operator>||</operator> <name>colIdx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int16_t</name></type> <name>nBytes</name> <init>= <expr><name>colIdx</name> <operator>/</operator> <name>TD_VTYPE_PARTS_I</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int16_t</name></type> <name>nOffset</name> <init>= <expr><name>colIdx</name> <operator>&amp;</operator> <name>TD_VTYPE_OPTR_I</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>pDestByte</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>pBitmap</name></expr></argument>, <argument><expr><name>nBytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="line">// use literal value directly and not use formula to simplify the codes</comment>
  <switch>switch <condition>(<expr><name>nOffset</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="number">0</literal></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>pDestByte</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>pDestByte</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7F</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>valType</name> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>
      <comment type="line">// set the value and clear other partitions for offset 0</comment>
      <comment type="line">// *pDestByte |= (valType &lt;&lt; 7);</comment>
      <break>break;</break>
    <case>case <expr><literal type="number">1</literal></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>pDestByte</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>pDestByte</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xBF</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>valType</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>
      <comment type="line">// *pDestByte |= (valType &lt;&lt; 6);</comment>
      <break>break;</break>
    <case>case <expr><literal type="number">2</literal></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>pDestByte</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>pDestByte</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xDF</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>valType</name> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>
      <comment type="line">// *pDestByte |= (valType &lt;&lt; 5);</comment>
      <break>break;</break>
    <case>case <expr><literal type="number">3</literal></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>pDestByte</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>pDestByte</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xEF</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>valType</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
      <comment type="line">// *pDestByte |= (valType &lt;&lt; 4);</comment>
      <break>break;</break>
    <case>case <expr><literal type="number">4</literal></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>pDestByte</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>pDestByte</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xF7</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>valType</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
      <comment type="line">// *pDestByte |= (valType &lt;&lt; 3);</comment>
      <break>break;</break>
    <case>case <expr><literal type="number">5</literal></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>pDestByte</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>pDestByte</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFB</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>valType</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
      <comment type="line">// *pDestByte |= (valType &lt;&lt; 2);</comment>
      <break>break;</break>
    <case>case <expr><literal type="number">6</literal></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>pDestByte</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>pDestByte</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFD</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>valType</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
      <comment type="line">// *pDestByte |= (valType &lt;&lt; 1);</comment>
      <break>break;</break>
    <case>case <expr><literal type="number">7</literal></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>pDestByte</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>pDestByte</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFE</literal><operator>)</operator> <operator>|</operator> <name>valType</name></expr>;</expr_stmt>
      <comment type="line">// *pDestByte |= (valType);</comment>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
      <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></switch>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tdGetKvRowValOfCol</name><parameter_list>(<parameter><decl><type><name>SCellVal</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>STSRow</name> <modifier>*</modifier></type><name>pRow</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pBitmap</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>colIdx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TD_SUPPORT_BITMAP</name></cpp:ifdef>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>colIdx</name> <operator>&lt;</operator> <call><name>tdRowGetNCols</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tdGetBitmapValType</name><argument_list>(<argument><expr><name>pBitmap</name></expr></argument>, <argument><expr><name>colIdx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>valType</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>valType</name></name> <operator>=</operator> <name>TD_VTYPE_NONE</name></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tdValTypeIsNorm</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>valType</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>valType</name></name> <operator>=</operator> <name>TD_VTYPE_NONE</name></expr>;</expr_stmt>
      <return>return <expr><name>terrno</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>valType</name></name> <operator>=</operator> <name>TD_VTYPE_NONE</name></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>valType</name></name> <operator>=</operator> <ternary><condition><expr><call><name>isNull</name><argument_list>(<argument><expr><name><name>output</name><operator>-&gt;</operator><name>val</name></name></expr></argument>, <argument><expr><name>colType</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>TD_VTYPE_NULL</name></expr> </then><else>: <expr><name>TD_VTYPE_NORM</name></expr></else></ternary></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tdGetTpRowValOfCol</name><parameter_list>(<parameter><decl><type><name>SCellVal</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>STSRow</name> <modifier>*</modifier></type><name>pRow</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pBitmap</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>colType</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>offset</name></decl></parameter>,
                           <parameter><decl><type><name>int16_t</name></type> <name>colIdx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pRow</name><operator>-&gt;</operator><name>statis</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>valType</name></name> <operator>=</operator> <name>TD_VTYPE_NORM</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name>colType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>VarDataOffsetT</name> <operator>*</operator><operator>)</operator><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><call><name>TD_ROW_DATA</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><call><name>TD_ROW_DATA</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tdGetBitmapValType</name><argument_list>(<argument><expr><name>pBitmap</name></expr></argument>, <argument><expr><name>colIdx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>output</name><operator>-&gt;</operator><name>valType</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>valType</name></name> <operator>=</operator> <name>TD_VTYPE_NONE</name></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>output</name><operator>-&gt;</operator><name>valType</name></name> <operator>==</operator> <name>TD_VTYPE_NORM</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name>colType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>VarDataOffsetT</name> <operator>*</operator><operator>)</operator><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><call><name>TD_ROW_DATA</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><call><name>TD_ROW_DATA</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tdAppendColValToRow</name><parameter_list>(<parameter><decl><type><name>SRowBuilder</name> <modifier>*</modifier></type><name>pBuilder</name></decl></parameter>, <parameter><decl><type><name>col_id_t</name></type> <name>colId</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>colType</name></decl></parameter>, <parameter><decl><type><name>TDRowValT</name></type> <name>valType</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>val</name></decl></parameter>,
                            <parameter><decl><type><name>bool</name></type> <name>isCopyVarData</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>col_id_t</name></type> <name>colIdx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STSRow</name> <modifier>*</modifier></type><name>pRow</name> <init>= <expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pBuf</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>val</name></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TD_SUPPORT_BITMAP</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name>valType</name> <operator>==</operator> <name>TD_VTYPE_NORM</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PTR</name></expr>;</expr_stmt>
      <return>return <expr><name>terrno</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// TS KEY is stored in STSRow.ts and not included in STSRow.data field.</comment>
  <if_stmt><if>if <condition>(<expr><name>colId</name> <operator>==</operator> <name>PRIMARYKEY_TIMESTAMP_COL_ID</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>val</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
      <return>return <expr><name>terrno</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>TD_ROW_KEY</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>*</operator><operator>(</operator><name>TSKEY</name> <operator>*</operator><operator>)</operator><name>val</name></expr>;</expr_stmt>
    <comment type="line">// The primary TS key is Norm all the time, thus its valType is not stored in bitmap.</comment>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// TODO:  We can avoid the type judegement by FP, but would prevent the inline scheme.</comment>

  <switch>switch <condition>(<expr><name>valType</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TD_VTYPE_NORM</name></expr>:</case>
      <break>break;</break>
    <case>case <expr><name>TD_VTYPE_NULL</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pBuilder</name><operator>-&gt;</operator><name>hasNull</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>hasNull</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <break>break;</break>
    <case>case <expr><name>TD_VTYPE_NONE</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pBuilder</name><operator>-&gt;</operator><name>hasNone</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>hasNone</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
    <default>default:</default>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>

  <if_stmt><if>if <condition>(<expr><call><name>TD_IS_TP_ROW</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdAppendColValToTpRow</name><argument_list>(<argument><expr><name>pBuilder</name></expr></argument>, <argument><expr><name>valType</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>isCopyVarData</name></expr></argument>, <argument><expr><name>colType</name></expr></argument>, <argument><expr><name>colIdx</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>tdAppendColValToKvRow</name><argument_list>(<argument><expr><name>pBuilder</name></expr></argument>, <argument><expr><name>valType</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>isCopyVarData</name></expr></argument>, <argument><expr><name>colType</name></expr></argument>, <argument><expr><name>colIdx</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>colId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tdAppendColValToKvRow</name><parameter_list>(<parameter><decl><type><name>SRowBuilder</name> <modifier>*</modifier></type><name>pBuilder</name></decl></parameter>, <parameter><decl><type><name>TDRowValT</name></type> <name>valType</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isCopyVarData</name></decl></parameter>,
                              <parameter><decl><type><name>int8_t</name></type> <name>colType</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>colIdx</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>col_id_t</name></type> <name>colId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>offset</name> <operator>&lt;</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>SKvRowIdx</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>||</operator> <operator>(</operator><name>colIdx</name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>offset</name> <operator>-=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SKvRowIdx</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><operator>--</operator><name>colIdx</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TD_SUPPORT_BITMAP</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><call><name>tdSetBitmapValType</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pBitmap</name></name></expr></argument>, <argument><expr><name>colIdx</name></expr></argument>, <argument><expr><name>valType</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <decl_stmt><decl><type><name>STSRow</name> <modifier>*</modifier></type><name>row</name> <init>= <expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pBuf</name></name></expr></init></decl>;</decl_stmt>
  <comment type="line">// No need to store None/Null values.</comment>
  <decl_stmt><decl><type><name>SKvRowIdx</name> <modifier>*</modifier></type><name>pColIdx</name> <init>= <expr><operator>(</operator><name>SKvRowIdx</name> <operator>*</operator><operator>)</operator><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><call><name>TD_ROW_COL_IDX</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pColIdx</name><operator>-&gt;</operator><name>colId</name></name> <operator>=</operator> <name>colId</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pColIdx</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <call><name>TD_ROW_LEN</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// the offset include the TD_ROW_HEAD_LEN</comment>
  <if_stmt><if>if <condition>(<expr><name>valType</name> <operator>==</operator> <name>TD_VTYPE_NORM</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><call><name>TD_ROW_LEN</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name>colType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>isCopyVarData</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><call><name>varDataTLen</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>TD_ROW_LEN</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call> <operator>+=</operator> <call><name>varDataTLen</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name><name>TYPE_BYTES</name><index>[<expr><name>colType</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>TD_ROW_LEN</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call> <operator>+=</operator> <name><name>TYPE_BYTES</name><index>[<expr><name>colType</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tdAppendColValToTpRow</name><parameter_list>(<parameter><decl><type><name>SRowBuilder</name> <modifier>*</modifier></type><name>pBuilder</name></decl></parameter>, <parameter><decl><type><name>TDRowValT</name></type> <name>valType</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isCopyVarData</name></decl></parameter>,
                              <parameter><decl><type><name>int8_t</name></type> <name>colType</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>colIdx</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>colIdx</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>--</operator><name>colIdx</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TD_SUPPORT_BITMAP</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><call><name>tdSetBitmapValType</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pBitmap</name></name></expr></argument>, <argument><expr><name>colIdx</name></expr></argument>, <argument><expr><name>valType</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <decl_stmt><decl><type><name>STSRow</name> <modifier>*</modifier></type><name>row</name> <init>= <expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pBuf</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// 1. No need to set flen part for Null/None, just use bitmap. When upsert for the same primary TS key, the bitmap</comment>
  <comment type="line">// should be updated simultaneously if Norm val overwrite Null/None cols.</comment>
  <comment type="line">// 2. When consume STSRow in memory by taos client/tq, the output of Null/None cols should both be Null.</comment>
  <if_stmt><if>if <condition>(<expr><name>valType</name> <operator>==</operator> <name>TD_VTYPE_NORM</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// TODO: The layout of new data types imported since 3.0 like blob/medium blob is the same with binary/nchar.</comment>
    <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name>colType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <comment type="line">// ts key stored in STSRow.ts</comment>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>VarDataOffsetT</name> <operator>*</operator><operator>)</operator><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><call><name>TD_ROW_DATA</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>TD_ROW_LEN</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>isCopyVarData</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><call><name>TD_ROW_LEN</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><call><name>varDataTLen</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>TD_ROW_LEN</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call> <operator>+=</operator> <call><name>varDataTLen</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><call><name>TD_ROW_DATA</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name><name>TYPE_BYTES</name><index>[<expr><name>colType</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tdSRowSetExtendedInfo</name><parameter_list>(<parameter><decl><type><name>SRowBuilder</name> <modifier>*</modifier></type><name>pBuilder</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>nCols</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>nBoundCols</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>flen</name></decl></parameter>,
                              <parameter><decl><type><name>int32_t</name></type> <name>allNullLen</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>boundNullLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>boundNullLen</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>allNullLen</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>nBoundCols</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>tpLen</name> <init>= <expr><name>allNullLen</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>kvLen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>col_id_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SKvRowIdx</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nBoundCols</name> <operator>+</operator> <name>boundNullLen</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>isSelectKVRow</name><argument_list>(<argument><expr><name>kvLen</name></expr></argument>, <argument><expr><name>tpLen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>rowType</name></name> <operator>=</operator> <name>TD_ROW_KV</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>rowType</name></name> <operator>=</operator> <name>TD_ROW_TP</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>rowType</name></name> <operator>=</operator> <name>TD_ROW_TP</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>flen</name></name> <operator>=</operator> <name>flen</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nCols</name></name> <operator>=</operator> <name>nCols</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nBoundCols</name></name> <operator>=</operator> <name>nBoundCols</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pBuilder</name><operator>-&gt;</operator><name>flen</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pBuilder</name><operator>-&gt;</operator><name>nCols</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TD_SUPPORT_BITMAP</name></cpp:ifdef>
  <comment type="line">// the primary TS key is stored separatedly</comment>
  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nBitmaps</name></name> <operator>=</operator> <operator>(</operator><name>col_id_t</name><operator>)</operator><call><name>TD_BITMAP_BYTES</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nCols</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>nBoundCols</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nBoundBitmaps</name></name> <operator>=</operator> <operator>(</operator><name>col_id_t</name><operator>)</operator><call><name>TD_BITMAP_BYTES</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nBoundCols</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nBoundBitmaps</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nBitmaps</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nBoundBitmaps</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tdSRowResetBuf</name><parameter_list>(<parameter><decl><type><name>SRowBuilder</name> <modifier>*</modifier></type><name>pBuilder</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pBuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pBuf</name></name> <operator>=</operator> <operator>(</operator><name>STSRow</name> <operator>*</operator><operator>)</operator><name>pBuf</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pBuilder</name><operator>-&gt;</operator><name>pBuf</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pBuilder</name><operator>-&gt;</operator><name>hasNone</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>hasNone</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pBuilder</name><operator>-&gt;</operator><name>hasNull</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>hasNull</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>TD_ROW_SET_INFO</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TD_ROW_SET_TYPE</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>rowType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nBitmaps</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pBuilder</name><operator>-&gt;</operator><name>flen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>uint32_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name><name>pBuilder</name><operator>-&gt;</operator><name>rowType</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TD_ROW_TP</name></expr>:</case>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TD_SUPPORT_BITMAP</name></cpp:ifdef>
      <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pBitmap</name></name> <operator>=</operator> <call><name>tdGetBitmapAddrTp</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>flen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pBitmap</name></name></expr></argument>, <argument><expr><name>TD_VTYPE_NONE_BYTE_II</name></expr></argument>, <argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nBitmaps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <comment type="line">// the primary TS key is stored separatedly</comment>
      <expr_stmt><expr><name>len</name> <operator>=</operator> <name>TD_ROW_HEAD_LEN</name> <operator>+</operator> <name><name>pBuilder</name><operator>-&gt;</operator><name>flen</name></name> <operator>+</operator> <name><name>pBuilder</name><operator>-&gt;</operator><name>nBitmaps</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>TD_ROW_SET_LEN</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>TD_ROW_SET_SVER</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>sver</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TD_ROW_KV</name></expr>:</case>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TD_SUPPORT_BITMAP</name></cpp:ifdef>
      <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pBitmap</name></name> <operator>=</operator> <call><name>tdGetBitmapAddrKv</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nBoundCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pBitmap</name></name></expr></argument>, <argument><expr><name>TD_VTYPE_NONE_BYTE_II</name></expr></argument>, <argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nBoundBitmaps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <expr_stmt><expr><name>len</name> <operator>=</operator> <name>TD_ROW_HEAD_LEN</name> <operator>+</operator> <name>TD_ROW_NCOLS_LEN</name> <operator>+</operator> <operator>(</operator><name><name>pBuilder</name><operator>-&gt;</operator><name>nBoundCols</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SKvRowIdx</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
            <name><name>pBuilder</name><operator>-&gt;</operator><name>nBoundBitmaps</name></name></expr>;</expr_stmt>  <comment type="line">// add</comment>
      <expr_stmt><expr><call><name>TD_ROW_SET_LEN</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>TD_ROW_SET_SVER</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>sver</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>TD_ROW_SET_NCOLS</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nBoundCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
      <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></switch>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tdSRowGetBuf</name><parameter_list>(<parameter><decl><type><name>SRowBuilder</name> <modifier>*</modifier></type><name>pBuilder</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pBuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pBuf</name></name> <operator>=</operator> <operator>(</operator><name>STSRow</name> <operator>*</operator><operator>)</operator><name>pBuf</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pBuilder</name><operator>-&gt;</operator><name>pBuf</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nBitmaps</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pBuilder</name><operator>-&gt;</operator><name>flen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>uint32_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name><name>pBuilder</name><operator>-&gt;</operator><name>rowType</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TD_ROW_TP</name></expr>:</case>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TD_SUPPORT_BITMAP</name></cpp:ifdef>
      <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pBitmap</name></name> <operator>=</operator> <call><name>tdGetBitmapAddrTp</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>flen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <break>break;</break>
    <case>case <expr><name>TD_ROW_KV</name></expr>:</case>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TD_SUPPORT_BITMAP</name></cpp:ifdef>
      <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pBitmap</name></name> <operator>=</operator> <call><name>tdGetBitmapAddrKv</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nBoundCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
      <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></switch>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tdSRowReset</name><parameter_list>(<parameter><decl><type><name>SRowBuilder</name> <modifier>*</modifier></type><name>pBuilder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>rowType</name></name> <operator>=</operator> <name>TD_ROW_TP</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pBuf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nBoundCols</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nCols</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>flen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pBitmap</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tdSRowSetTpInfo</name><parameter_list>(<parameter><decl><type><name>SRowBuilder</name> <modifier>*</modifier></type><name>pBuilder</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>nCols</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>flen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>flen</name></name> <operator>=</operator> <name>flen</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nCols</name></name> <operator>=</operator> <name>nCols</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pBuilder</name><operator>-&gt;</operator><name>flen</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pBuilder</name><operator>-&gt;</operator><name>nCols</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TD_SUPPORT_BITMAP</name></cpp:ifdef>
  <comment type="line">// the primary TS key is stored separatedly</comment>
  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nBitmaps</name></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><call><name>TD_BITMAP_BYTES</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nCols</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nBitmaps</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nBoundBitmaps</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tdSRowSetInfo</name><parameter_list>(<parameter><decl><type><name>SRowBuilder</name> <modifier>*</modifier></type><name>pBuilder</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>nCols</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>nBoundCols</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>flen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>flen</name></name> <operator>=</operator> <name>flen</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nCols</name></name> <operator>=</operator> <name>nCols</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nBoundCols</name></name> <operator>=</operator> <name>nBoundCols</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pBuilder</name><operator>-&gt;</operator><name>flen</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pBuilder</name><operator>-&gt;</operator><name>nCols</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TD_SUPPORT_BITMAP</name></cpp:ifdef>
  <comment type="line">// the primary TS key is stored separatedly</comment>
  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nBitmaps</name></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><call><name>TD_BITMAP_BYTES</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nCols</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>nBoundCols</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nBoundBitmaps</name></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><call><name>TD_BITMAP_BYTES</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nBoundCols</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nBoundBitmaps</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nBitmaps</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nBoundBitmaps</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tdGetBitmapValType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pBitmap</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>colIdx</name></decl></parameter>, <parameter><decl><type><name>TDRowValT</name> <modifier>*</modifier></type><name>pValType</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>bitmapMode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>bitmapMode</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="number">0</literal></expr>:</case>
      <expr_stmt><expr><call><name>tdGetBitmapValTypeII</name><argument_list>(<argument><expr><name>pBitmap</name></expr></argument>, <argument><expr><name>colIdx</name></expr></argument>, <argument><expr><name>pValType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>
    <case>case <expr><literal type="number">1</literal></expr>:</case>
      <expr_stmt><expr><call><name>tdGetBitmapValTypeI</name><argument_list>(<argument><expr><name>pBitmap</name></expr></argument>, <argument><expr><name>colIdx</name></expr></argument>, <argument><expr><name>pValType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></switch>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
bool tdIsBitmapValTypeNorm(const void *pBitmap, int16_t idx, int8_t bitmapMode) {
  TDRowValT valType = 0;
  tdGetBitmapValType(pBitmap, idx, &amp;valType, bitmapMode);
  if (tdValTypeIsNorm(valType)) {
    return true;
  }
  return false;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int32_t</name></type> <name>tdSetBitmapValTypeII</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pBitmap</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>colIdx</name></decl></parameter>, <parameter><decl><type><name>TDRowValT</name></type> <name>valType</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pBitmap</name> <operator>||</operator> <name>colIdx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int16_t</name></type> <name>nBytes</name> <init>= <expr><name>colIdx</name> <operator>/</operator> <name>TD_VTYPE_PARTS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int16_t</name></type> <name>nOffset</name> <init>= <expr><name>colIdx</name> <operator>&amp;</operator> <name>TD_VTYPE_OPTR</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>pDestByte</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>pBitmap</name></expr></argument>, <argument><expr><name>nBytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="line">// use literal value directly and not use formula to simplify the codes</comment>
  <switch>switch <condition>(<expr><name>nOffset</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="number">0</literal></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>pDestByte</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>pDestByte</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>valType</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>
      <comment type="line">// set the value and clear other partitions for offset 0</comment>
      <comment type="line">// *pDestByte |= (valType &lt;&lt; 6);</comment>
      <break>break;</break>
    <case>case <expr><literal type="number">1</literal></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>pDestByte</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>pDestByte</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xCF</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>valType</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
      <comment type="line">// *pDestByte |= (valType &lt;&lt; 4);</comment>
      <break>break;</break>
    <case>case <expr><literal type="number">2</literal></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>pDestByte</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>pDestByte</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xF3</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>valType</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
      <comment type="line">// *pDestByte |= (valType &lt;&lt; 2);</comment>
      <break>break;</break>
    <case>case <expr><literal type="number">3</literal></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>pDestByte</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>pDestByte</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFC</literal><operator>)</operator> <operator>|</operator> <name>valType</name></expr>;</expr_stmt>
      <comment type="line">// *pDestByte |= (valType);</comment>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
      <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></switch>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tdSetBitmapValType</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pBitmap</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>colIdx</name></decl></parameter>, <parameter><decl><type><name>TDRowValT</name></type> <name>valType</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>bitmapMode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>bitmapMode</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="number">0</literal></expr>:</case>
      <expr_stmt><expr><call><name>tdSetBitmapValTypeII</name><argument_list>(<argument><expr><name>pBitmap</name></expr></argument>, <argument><expr><name>colIdx</name></expr></argument>, <argument><expr><name>valType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>
    <case>case <expr><literal type="number">1</literal></expr>:</case>
      <expr_stmt><expr><call><name>tdSetBitmapValTypeI</name><argument_list>(<argument><expr><name>pBitmap</name></expr></argument>, <argument><expr><name>colIdx</name></expr></argument>, <argument><expr><name>valType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></switch>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>tdGetBitmapAddr</name><parameter_list>(<parameter><decl><type><name>STSRow</name> <modifier>*</modifier></type><name>pRow</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>rowType</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>flen</name></decl></parameter>, <parameter><decl><type><name>col_id_t</name></type> <name>nKvCols</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TD_SUPPORT_BITMAP</name></cpp:ifdef>
  <switch>switch <condition>(<expr><name>rowType</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TD_ROW_TP</name></expr>:</case>
      <return>return <expr><call><name>tdGetBitmapAddrTp</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>, <argument><expr><name>flen</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>TD_ROW_KV</name></expr>:</case>
      <return>return <expr><call><name>tdGetBitmapAddrKv</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>, <argument><expr><name>nKvCols</name></expr></argument>)</argument_list></call></expr>;</return>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tdSTSRowIterReset</name><parameter_list>(<parameter><decl><type><name>STSRowIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>, <parameter><decl><type><name>STSRow</name> <modifier>*</modifier></type><name>pRow</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pRow</name></name> <operator>=</operator> <name>pRow</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pBitmap</name></name> <operator>=</operator> <call><name>tdGetBitmapAddr</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>, <argument><expr><name><name>pRow</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pSchema</name><operator>-&gt;</operator><name>flen</name></name></expr></argument>, <argument><expr><call><name>tdRowGetNCols</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>colIdx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>  <comment type="line">// PRIMARYKEY_TIMESTAMP_COL_ID;</comment>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>kvIdx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tdSTSRowIterInit</name><parameter_list>(<parameter><decl><type><name>STSRowIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>, <parameter><decl><type><name>STSchema</name> <modifier>*</modifier></type><name>pSchema</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pSchema</name></name> <operator>=</operator> <name>pSchema</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>maxColId</name></name> <operator>=</operator> <name><name>pSchema</name><operator>-&gt;</operator><name>columns</name><index>[<expr><name><name>pSchema</name><operator>-&gt;</operator><name>numOfCols</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>colId</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tTSRowGetVal</name><parameter_list>(<parameter><decl><type><name>STSRow</name> <modifier>*</modifier></type><name>pRow</name></decl></parameter>, <parameter><decl><type><name>STSchema</name> <modifier>*</modifier></type><name>pTSchema</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>iCol</name></decl></parameter>, <parameter><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>pColVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STColumn</name> <modifier>*</modifier></type><name>pTColumn</name> <init>= <expr><operator>&amp;</operator><name><name>pTSchema</name><operator>-&gt;</operator><name>columns</name><index>[<expr><name>iCol</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCellVal</name></type>  <name>cv</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SValue</name></type>    <name>value</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name><name>pTColumn</name><operator>-&gt;</operator><name>colId</name></name> <operator>==</operator> <name>PRIMARYKEY_TIMESTAMP_COL_ID</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>iCol</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>TD_IS_TP_ROW</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdSTpRowGetVal</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>, <argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>pTSchema</name><operator>-&gt;</operator><name>flen</name></name></expr></argument>, <argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>iCol</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>TD_IS_KV_ROW</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdSKvRowGetVal</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>, <argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><name>iCol</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tdValTypeIsNone</name><argument_list>(<argument><expr><name><name>cv</name><operator>.</operator><name>valType</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pColVal</name> <operator>=</operator> <call><name>COL_VAL_NONE</name><argument_list>(<argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>tdValTypeIsNull</name><argument_list>(<argument><expr><name><name>cv</name><operator>.</operator><name>valType</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pColVal</name> <operator>=</operator> <call><name>COL_VAL_NULL</name><argument_list>(<argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pColVal</name><operator>-&gt;</operator><name>cid</name></name> <operator>=</operator> <name><name>pTColumn</name><operator>-&gt;</operator><name>colId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pColVal</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>pTColumn</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pColVal</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <name>CV_FLAG_VALUE</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pColVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>nData</name></name> <operator>=</operator> <call><name>varDataLen</name><argument_list>(<argument><expr><name><name>cv</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pColVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>pData</name></name> <operator>=</operator> <call><name>varDataVal</name><argument_list>(<argument><expr><name><name>cv</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pColVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>val</name></name></expr></argument>, <argument><expr><name><name>cv</name><operator>.</operator><name>val</name></name></expr></argument>, <argument><expr><name><name>tDataTypes</name><index>[<expr><name><name>pTColumn</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>.</operator><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
