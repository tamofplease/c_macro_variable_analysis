<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/common/src/ttypes.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ttypes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcompression.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name><name>TYPE_BYTES</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{
    <expr><operator>-</operator><literal type="number">1</literal></expr>,                      <comment type="line">// TSDB_DATA_TYPE_NULL</comment>
    <expr><name>CHAR_BYTES</name></expr>,              <comment type="line">// TSDB_DATA_TYPE_BOOL</comment>
    <expr><name>CHAR_BYTES</name></expr>,              <comment type="line">// TSDB_DATA_TYPE_TINYINT</comment>
    <expr><name>SHORT_BYTES</name></expr>,             <comment type="line">// TSDB_DATA_TYPE_SMALLINT</comment>
    <expr><name>INT_BYTES</name></expr>,               <comment type="line">// TSDB_DATA_TYPE_INT</comment>
    <expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr>,         <comment type="line">// TSDB_DATA_TYPE_BIGINT</comment>
    <expr><name>FLOAT_BYTES</name></expr>,             <comment type="line">// TSDB_DATA_TYPE_FLOAT</comment>
    <expr><name>DOUBLE_BYTES</name></expr>,            <comment type="line">// TSDB_DATA_TYPE_DOUBLE</comment>
    <expr><sizeof>sizeof<argument_list>(<argument><expr><name>VarDataOffsetT</name></expr></argument>)</argument_list></sizeof></expr>,  <comment type="line">// TSDB_DATA_TYPE_BINARY</comment>
    <expr><sizeof>sizeof<argument_list>(<argument><expr><name>TSKEY</name></expr></argument>)</argument_list></sizeof></expr>,           <comment type="line">// TSDB_DATA_TYPE_TIMESTAMP</comment>
    <expr><sizeof>sizeof<argument_list>(<argument><expr><name>VarDataOffsetT</name></expr></argument>)</argument_list></sizeof></expr>,  <comment type="line">// TSDB_DATA_TYPE_NCHAR</comment>
    <expr><name>CHAR_BYTES</name></expr>,              <comment type="line">// TSDB_DATA_TYPE_UTINYINT</comment>
    <expr><name>SHORT_BYTES</name></expr>,             <comment type="line">// TSDB_DATA_TYPE_USMALLINT</comment>
    <expr><name>INT_BYTES</name></expr>,               <comment type="line">// TSDB_DATA_TYPE_UINT</comment>
    <expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr>,        <comment type="line">// TSDB_DATA_TYPE_UBIGINT</comment>
    <expr><name>TSDB_MAX_JSON_TAG_LEN</name></expr>,   <comment type="line">// TSDB_DATA_TYPE_JSON</comment>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>tDataTypeDescriptor</name></type> <name><name>tDataTypes</name><index>[<expr><name>TSDB_DATA_TYPE_MAX</name></expr>]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><name>TSDB_DATA_TYPE_NULL</name></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"NOTYPE"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><name>TSDB_DATA_TYPE_BOOL</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>CHAR_BYTES</name></expr>, <expr><literal type="string">"BOOL"</literal></expr>, <expr><name>false</name></expr>, <expr><name>true</name></expr>, <expr><name>tsCompressBool</name></expr>, <expr><name>tsDecompressBool</name></expr>}</block></expr>,
    <expr><block>{<expr><name>TSDB_DATA_TYPE_TINYINT</name></expr>, <expr><literal type="number">7</literal></expr>, <expr><name>CHAR_BYTES</name></expr>, <expr><literal type="string">"TINYINT"</literal></expr>, <expr><name>INT8_MIN</name></expr>, <expr><name>INT8_MAX</name></expr>, <expr><name>tsCompressTinyint</name></expr>, <expr><name>tsDecompressTinyint</name></expr>}</block></expr>,
    <expr><block>{<expr><name>TSDB_DATA_TYPE_SMALLINT</name></expr>, <expr><literal type="number">8</literal></expr>, <expr><name>SHORT_BYTES</name></expr>, <expr><literal type="string">"SMALLINT"</literal></expr>, <expr><name>INT16_MIN</name></expr>, <expr><name>INT16_MAX</name></expr>, <expr><name>tsCompressSmallint</name></expr>,
     <expr><name>tsDecompressSmallint</name></expr>}</block></expr>,
    <expr><block>{<expr><name>TSDB_DATA_TYPE_INT</name></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>INT_BYTES</name></expr>, <expr><literal type="string">"INT"</literal></expr>, <expr><name>INT32_MIN</name></expr>, <expr><name>INT32_MAX</name></expr>, <expr><name>tsCompressInt</name></expr>, <expr><name>tsDecompressInt</name></expr>}</block></expr>,
    <expr><block>{<expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>, <expr><literal type="number">6</literal></expr>, <expr><name>LONG_BYTES</name></expr>, <expr><literal type="string">"BIGINT"</literal></expr>, <expr><name>INT64_MIN</name></expr>, <expr><name>INT64_MAX</name></expr>, <expr><name>tsCompressBigint</name></expr>, <expr><name>tsDecompressBigint</name></expr>}</block></expr>,
    <expr><block>{<expr><name>TSDB_DATA_TYPE_FLOAT</name></expr>, <expr><literal type="number">5</literal></expr>, <expr><name>FLOAT_BYTES</name></expr>, <expr><literal type="string">"FLOAT"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>tsCompressFloat</name></expr>, <expr><name>tsDecompressFloat</name></expr>}</block></expr>,
    <expr><block>{<expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>, <expr><literal type="number">6</literal></expr>, <expr><name>DOUBLE_BYTES</name></expr>, <expr><literal type="string">"DOUBLE"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>tsCompressDouble</name></expr>, <expr><name>tsDecompressDouble</name></expr>}</block></expr>,
    <expr><block>{<expr><name>TSDB_DATA_TYPE_VARCHAR</name></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"VARCHAR"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>tsCompressString</name></expr>, <expr><name>tsDecompressString</name></expr>}</block></expr>,
    <expr><block>{<expr><name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>, <expr><literal type="number">9</literal></expr>, <expr><name>LONG_BYTES</name></expr>, <expr><literal type="string">"TIMESTAMP"</literal></expr>, <expr><name>INT64_MIN</name></expr>, <expr><name>INT64_MAX</name></expr>, <expr><name>tsCompressTimestamp</name></expr>,
     <expr><name>tsDecompressTimestamp</name></expr>}</block></expr>,
    <expr><block>{<expr><name>TSDB_DATA_TYPE_NCHAR</name></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"NCHAR"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>tsCompressString</name></expr>, <expr><name>tsDecompressString</name></expr>}</block></expr>,
    <expr><block>{<expr><name>TSDB_DATA_TYPE_UTINYINT</name></expr>, <expr><literal type="number">16</literal></expr>, <expr><name>CHAR_BYTES</name></expr>, <expr><literal type="string">"TINYINT UNSIGNED"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>UINT8_MAX</name></expr>, <expr><name>tsCompressTinyint</name></expr>, <expr><name>tsDecompressTinyint</name></expr>}</block></expr>,
    <expr><block>{<expr><name>TSDB_DATA_TYPE_USMALLINT</name></expr>, <expr><literal type="number">17</literal></expr>, <expr><name>SHORT_BYTES</name></expr>, <expr><literal type="string">"SMALLINT UNSIGNED"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>UINT16_MAX</name></expr>, <expr><name>tsCompressSmallint</name></expr>,
     <expr><name>tsDecompressSmallint</name></expr>}</block></expr>,
    <expr><block>{<expr><name>TSDB_DATA_TYPE_UINT</name></expr>, <expr><literal type="number">12</literal></expr>, <expr><name>INT_BYTES</name></expr>, <expr><literal type="string">"INT UNSIGNED"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>UINT32_MAX</name></expr>, <expr><name>tsCompressInt</name></expr>, <expr><name>tsDecompressInt</name></expr>}</block></expr>,
    <expr><block>{<expr><name>TSDB_DATA_TYPE_UBIGINT</name></expr>, <expr><literal type="number">15</literal></expr>, <expr><name>LONG_BYTES</name></expr>, <expr><literal type="string">"BIGINT UNSIGNED"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>UINT64_MAX</name></expr>, <expr><name>tsCompressBigint</name></expr>, <expr><name>tsDecompressBigint</name></expr>}</block></expr>,
    <expr><block>{<expr><name>TSDB_DATA_TYPE_JSON</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>TSDB_MAX_JSON_TAG_LEN</name></expr>, <expr><literal type="string">"JSON"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>tsCompressString</name></expr>, <expr><name>tsDecompressString</name></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type>  <name>floatMin</name> <init>= <expr><operator>-</operator><name>FLT_MAX</name></expr></init></decl>, <decl><type ref="prev"/><name>floatMax</name> <init>= <expr><name>FLT_MAX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>double</name></type> <name>doubleMin</name> <init>= <expr><operator>-</operator><name>DBL_MAX</name></expr></init></decl>, <decl><type ref="prev"/><name>doubleMax</name> <init>= <expr><name>DBL_MAX</name></expr></init></decl>;</decl_stmt>

<function><type><name>FORCE_INLINE</name> <name>void</name> <modifier>*</modifier></type><name>getDataMin</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_DATA_TYPE_FLOAT</name></expr>:</case>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name>value</name> <operator>=</operator> <name>floatMin</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>:</case>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name>value</name> <operator>=</operator> <name>doubleMin</name></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name>value</name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name>minValue</name></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>

  <return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>FORCE_INLINE</name> <name>void</name> <modifier>*</modifier></type><name>getDataMax</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_DATA_TYPE_FLOAT</name></expr>:</case>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name>value</name> <operator>=</operator> <name>floatMax</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>:</case>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name>value</name> <operator>=</operator> <name>doubleMax</name></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name>value</name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name>maxValue</name></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>

  <return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>isValidDataType</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>type</name> <operator>&gt;=</operator> <name>TSDB_DATA_TYPE_NULL</name> <operator>&amp;&amp;</operator> <name>type</name> <operator>&lt;</operator> <name>TSDB_DATA_TYPE_MAX</name></expr>;</return> </block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POINTER_SHIFT</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void *)((char *)(p) + (b)))</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>assignVal</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_DATA_TYPE_BOOL</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_TINYINT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_UTINYINT</name></expr>:</case>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int8_t</name> <operator>*</operator><operator>)</operator><name>val</name><operator>)</operator> <operator>=</operator> <call><name>GET_INT8_VAL</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_SMALLINT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_USMALLINT</name></expr>:</case>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name>val</name><operator>)</operator> <operator>=</operator> <call><name>GET_INT16_VAL</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_INT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_UINT</name></expr>:</case>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><name>val</name><operator>)</operator> <operator>=</operator> <call><name>GET_INT32_VAL</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>TSDB_DATA_TYPE_FLOAT</name></expr>:</case>
      <expr_stmt><expr><call><name>SET_FLOAT_VAL</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><call><name>GET_FLOAT_VAL</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>:</case>
      <expr_stmt><expr><call><name>SET_DOUBLE_VAL</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><call><name>GET_DOUBLE_VAL</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_UBIGINT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>:</case>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name>val</name><operator>)</operator> <operator>=</operator> <call><name>GET_INT64_VAL</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_BINARY</name></expr>:</case>
      <expr_stmt><expr><call><name>varDataCopy</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_NCHAR</name></expr>:</case>
      <expr_stmt><expr><call><name>varDataCopy</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default> <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>operateVal</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>optr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>optr</name> <operator>==</operator> <name>OP_TYPE_ADD</name></expr>)</condition> <block>{<block_content>
    <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>TSDB_DATA_TYPE_TINYINT</name></expr>:</case>
        <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int8_t</name> <operator>*</operator><operator>)</operator><name>dst</name><operator>)</operator> <operator>=</operator> <call><name>GET_INT8_VAL</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>GET_INT8_VAL</name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>TSDB_DATA_TYPE_UTINYINT</name></expr>:</case>
        <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>dst</name><operator>)</operator> <operator>=</operator> <call><name>GET_UINT8_VAL</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>GET_UINT8_VAL</name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>TSDB_DATA_TYPE_SMALLINT</name></expr>:</case>
        <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name>dst</name><operator>)</operator> <operator>=</operator> <call><name>GET_INT16_VAL</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>GET_INT16_VAL</name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>TSDB_DATA_TYPE_USMALLINT</name></expr>:</case>
        <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>dst</name><operator>)</operator> <operator>=</operator> <call><name>GET_UINT16_VAL</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>GET_UINT16_VAL</name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>TSDB_DATA_TYPE_INT</name></expr>:</case>
        <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><name>dst</name><operator>)</operator> <operator>=</operator> <call><name>GET_INT32_VAL</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>GET_INT32_VAL</name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>TSDB_DATA_TYPE_UINT</name></expr>:</case>
        <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>dst</name><operator>)</operator> <operator>=</operator> <call><name>GET_UINT32_VAL</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>GET_UINT32_VAL</name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>:</case>
        <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name>dst</name><operator>)</operator> <operator>=</operator> <call><name>GET_INT64_VAL</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>GET_INT64_VAL</name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>TSDB_DATA_TYPE_UBIGINT</name></expr>:</case>
        <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>dst</name><operator>)</operator> <operator>=</operator> <call><name>GET_UINT64_VAL</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>GET_UINT64_VAL</name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>:</case>
        <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name>dst</name><operator>)</operator> <operator>=</operator> <call><name>GET_INT64_VAL</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>GET_INT64_VAL</name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>TSDB_DATA_TYPE_FLOAT</name></expr>:</case>
        <expr_stmt><expr><call><name>SET_FLOAT_VAL</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><call><name>GET_FLOAT_VAL</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>GET_FLOAT_VAL</name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>:</case>
        <expr_stmt><expr><call><name>SET_DOUBLE_VAL</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><call><name>GET_DOUBLE_VAL</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>GET_DOUBLE_VAL</name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default> <block>{<block_content>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
    </block_content>}</block></switch>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
