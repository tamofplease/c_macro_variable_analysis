<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/common/src/tvariant.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tvariant.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ttime.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ttokendef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tvariant.h"</cpp:file></cpp:include>

<function><type><name>int32_t</name></type> <name>toInteger</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>endPtr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <call><name>taosStr2Int64</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endPtr</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ERANGE</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>EINVAL</name> <operator>||</operator> <name>endPtr</name> <operator>-</operator> <name>z</name> <operator>!=</operator> <name>n</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>toUInteger</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>endPtr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>z</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <call><name>taosStr2UInt64</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endPtr</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ERANGE</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>EINVAL</name> <operator>||</operator> <name>endPtr</name> <operator>-</operator> <name>z</name> <operator>!=</operator> <name>n</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * create SVariant from binary string, not ascii data
 * @param pVar
 * @param pz
 * @param len
 * @param type
 */</comment>
<function><type><name>void</name></type> <name>taosVariantCreateFromBinary</name><parameter_list>(<parameter><decl><type><name>SVariant</name> <modifier>*</modifier></type><name>pVar</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pz</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_DATA_TYPE_BOOL</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_TINYINT</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><name><name>pVar</name><operator>-&gt;</operator><name>nLen</name></name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pVar</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <call><name>GET_INT8_VAL</name><argument_list>(<argument><expr><name>pz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_UTINYINT</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><name><name>pVar</name><operator>-&gt;</operator><name>nLen</name></name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pVar</name><operator>-&gt;</operator><name>u</name></name> <operator>=</operator> <call><name>GET_UINT8_VAL</name><argument_list>(<argument><expr><name>pz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_SMALLINT</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><name><name>pVar</name><operator>-&gt;</operator><name>nLen</name></name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pVar</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <call><name>GET_INT16_VAL</name><argument_list>(<argument><expr><name>pz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_USMALLINT</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><name><name>pVar</name><operator>-&gt;</operator><name>nLen</name></name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pVar</name><operator>-&gt;</operator><name>u</name></name> <operator>=</operator> <call><name>GET_UINT16_VAL</name><argument_list>(<argument><expr><name>pz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_INT</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><name><name>pVar</name><operator>-&gt;</operator><name>nLen</name></name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pVar</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <call><name>GET_INT32_VAL</name><argument_list>(<argument><expr><name>pz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_UINT</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><name><name>pVar</name><operator>-&gt;</operator><name>nLen</name></name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pVar</name><operator>-&gt;</operator><name>u</name></name> <operator>=</operator> <call><name>GET_UINT32_VAL</name><argument_list>(<argument><expr><name>pz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><name><name>pVar</name><operator>-&gt;</operator><name>nLen</name></name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pVar</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <call><name>GET_INT64_VAL</name><argument_list>(<argument><expr><name>pz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_UBIGINT</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><name><name>pVar</name><operator>-&gt;</operator><name>nLen</name></name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pVar</name><operator>-&gt;</operator><name>u</name></name> <operator>=</operator> <call><name>GET_UINT64_VAL</name><argument_list>(<argument><expr><name>pz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><name><name>pVar</name><operator>-&gt;</operator><name>nLen</name></name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pVar</name><operator>-&gt;</operator><name>d</name></name> <operator>=</operator> <call><name>GET_DOUBLE_VAL</name><argument_list>(<argument><expr><name>pz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_FLOAT</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><name><name>pVar</name><operator>-&gt;</operator><name>nLen</name></name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pVar</name><operator>-&gt;</operator><name>f</name></name> <operator>=</operator> <call><name>GET_FLOAT_VAL</name><argument_list>(<argument><expr><name>pz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_NCHAR</name></expr>:</case> <block>{<block_content>  <comment type="line">// here we get the nchar length from raw binary bits length</comment>
      <decl_stmt><decl><type><name>size_t</name></type> <name>lenInwchar</name> <init>= <expr><name>len</name> <operator>/</operator> <name>TSDB_NCHAR_SIZE</name></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name><name>pVar</name><operator>-&gt;</operator><name>ucs4</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>lenInwchar</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>TSDB_NCHAR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pVar</name><operator>-&gt;</operator><name>ucs4</name></name></expr></argument>, <argument><expr><name>pz</name></expr></argument>, <argument><expr><name>lenInwchar</name> <operator>*</operator> <name>TSDB_NCHAR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pVar</name><operator>-&gt;</operator><name>nLen</name></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><name>len</name></expr>;</expr_stmt>

      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_DATA_TYPE_BINARY</name></expr>:</case> <block>{<block_content>  <comment type="line">// todo refactor, extract a method</comment>
      <expr_stmt><expr><name><name>pVar</name><operator>-&gt;</operator><name>pz</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pVar</name><operator>-&gt;</operator><name>pz</name></name></expr></argument>, <argument><expr><name>pz</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pVar</name><operator>-&gt;</operator><name>nLen</name></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><name>len</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>

    <default>default:</default>
      <expr_stmt><expr><name><name>pVar</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <call><name>GET_INT32_VAL</name><argument_list>(<argument><expr><name>pz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pVar</name><operator>-&gt;</operator><name>nLen</name></name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name>TSDB_DATA_TYPE_INT</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
  </block_content>}</block></switch>

  <expr_stmt><expr><name><name>pVar</name><operator>-&gt;</operator><name>nType</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosVariantDestroy</name><parameter_list>(<parameter><decl><type><name>SVariant</name> <modifier>*</modifier></type><name>pVar</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pVar</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pVar</name><operator>-&gt;</operator><name>nType</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_BINARY</name> <operator>||</operator> <name><name>pVar</name><operator>-&gt;</operator><name>nType</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_NCHAR</name> <operator>||</operator>
      <name><name>pVar</name><operator>-&gt;</operator><name>nType</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_JSON</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pVar</name><operator>-&gt;</operator><name>pz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pVar</name><operator>-&gt;</operator><name>nLen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// NOTE: this is only for string array</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pVar</name><operator>-&gt;</operator><name>nType</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_POINTER_ARRAY</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>num</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pVar</name><operator>-&gt;</operator><name>arr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pVar</name><operator>-&gt;</operator><name>arr</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pVar</name><operator>-&gt;</operator><name>arr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pVar</name><operator>-&gt;</operator><name>arr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pVar</name><operator>-&gt;</operator><name>nType</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_VALUE_ARRAY</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pVar</name><operator>-&gt;</operator><name>arr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pVar</name><operator>-&gt;</operator><name>arr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosVariantAssign</name><parameter_list>(<parameter><decl><type><name>SVariant</name> <modifier>*</modifier></type><name>pDst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SVariant</name> <modifier>*</modifier></type><name>pSrc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pSrc</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pDst</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>nType</name></name> <operator>=</operator> <name><name>pSrc</name><operator>-&gt;</operator><name>nType</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pSrc</name><operator>-&gt;</operator><name>nType</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_BINARY</name> <operator>||</operator> <name><name>pSrc</name><operator>-&gt;</operator><name>nType</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_NCHAR</name> <operator>||</operator>
      <name><name>pSrc</name><operator>-&gt;</operator><name>nType</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_JSON</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><name><name>pSrc</name><operator>-&gt;</operator><name>nLen</name></name> <operator>+</operator> <name>TSDB_NCHAR_SIZE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>taosMemoryRealloc</name><argument_list>(<argument><expr><name><name>pDst</name><operator>-&gt;</operator><name>pz</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>pz</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pDst</name><operator>-&gt;</operator><name>pz</name></name></expr></argument>, <argument><expr><name><name>pSrc</name><operator>-&gt;</operator><name>pz</name></name></expr></argument>, <argument><expr><name><name>pSrc</name><operator>-&gt;</operator><name>nLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>nLen</name></name> <operator>=</operator> <name><name>pSrc</name><operator>-&gt;</operator><name>nLen</name></name></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>IS_NUMERIC_TYPE</name><argument_list>(<argument><expr><name><name>pSrc</name><operator>-&gt;</operator><name>nType</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name><name>pSrc</name><operator>-&gt;</operator><name>nType</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_BOOL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <name><name>pSrc</name><operator>-&gt;</operator><name>i</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pSrc</name><operator>-&gt;</operator><name>nType</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_POINTER_ARRAY</name></expr>)</condition> <block>{<block_content>  <comment type="line">// this is only for string array</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>num</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pSrc</name><operator>-&gt;</operator><name>arr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>arr</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pSrc</name><operator>-&gt;</operator><name>arr</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pDst</name><operator>-&gt;</operator><name>arr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pSrc</name><operator>-&gt;</operator><name>nType</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_VALUE_ARRAY</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>num</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pSrc</name><operator>-&gt;</operator><name>arr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>arr</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>nLen</name></name> <operator>=</operator> <name><name>pSrc</name><operator>-&gt;</operator><name>nLen</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pSrc</name><operator>-&gt;</operator><name>nLen</name></name> <operator>==</operator> <name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pSrc</name><operator>-&gt;</operator><name>arr</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pDst</name><operator>-&gt;</operator><name>arr</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pDst</name><operator>-&gt;</operator><name>nType</name></name> <operator>!=</operator> <name>TSDB_DATA_TYPE_POINTER_ARRAY</name> <operator>&amp;&amp;</operator> <name><name>pDst</name><operator>-&gt;</operator><name>nType</name></name> <operator>!=</operator> <name>TSDB_DATA_TYPE_VALUE_ARRAY</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>nLen</name></name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name><name>pDst</name><operator>-&gt;</operator><name>nType</name></name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosVariantCompare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SVariant</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SVariant</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>p1</name><operator>-&gt;</operator><name>nType</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_NULL</name> <operator>&amp;&amp;</operator> <name><name>p2</name><operator>-&gt;</operator><name>nType</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>p1</name><operator>-&gt;</operator><name>nType</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>p2</name><operator>-&gt;</operator><name>nType</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>p1</name><operator>-&gt;</operator><name>nType</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_BINARY</name> <operator>||</operator> <name><name>p1</name><operator>-&gt;</operator><name>nType</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_NCHAR</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>p1</name><operator>-&gt;</operator><name>nLen</name></name> <operator>==</operator> <name><name>p2</name><operator>-&gt;</operator><name>nLen</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>p1</name><operator>-&gt;</operator><name>pz</name></name></expr></argument>, <argument><expr><name><name>p2</name><operator>-&gt;</operator><name>pz</name></name></expr></argument>, <argument><expr><name><name>p1</name><operator>-&gt;</operator><name>nLen</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><ternary><condition><expr><name><name>p1</name><operator>-&gt;</operator><name>nLen</name></name> <operator>&gt;</operator> <name><name>p2</name><operator>-&gt;</operator><name>nLen</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p1</name><operator>-&gt;</operator><name>nType</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_DOUBLE</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>p1</name><operator>-&gt;</operator><name>d</name></name> <operator>==</operator> <name><name>p2</name><operator>-&gt;</operator><name>d</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><ternary><condition><expr><name><name>p1</name><operator>-&gt;</operator><name>d</name></name> <operator>&gt;</operator> <name><name>p2</name><operator>-&gt;</operator><name>d</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p1</name><operator>-&gt;</operator><name>nType</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_FLOAT</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>p1</name><operator>-&gt;</operator><name>f</name></name> <operator>==</operator> <name><name>p2</name><operator>-&gt;</operator><name>f</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><ternary><condition><expr><name><name>p1</name><operator>-&gt;</operator><name>f</name></name> <operator>&gt;</operator> <name><name>p2</name><operator>-&gt;</operator><name>f</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_UNSIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name><name>p1</name><operator>-&gt;</operator><name>nType</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>p1</name><operator>-&gt;</operator><name>u</name></name> <operator>==</operator> <name><name>p2</name><operator>-&gt;</operator><name>u</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><ternary><condition><expr><name><name>p1</name><operator>-&gt;</operator><name>u</name></name> <operator>&gt;</operator> <name><name>p2</name><operator>-&gt;</operator><name>u</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>p1</name><operator>-&gt;</operator><name>i</name></name> <operator>==</operator> <name><name>p2</name><operator>-&gt;</operator><name>i</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><ternary><condition><expr><name><name>p1</name><operator>-&gt;</operator><name>i</name></name> <operator>&gt;</operator> <name><name>p2</name><operator>-&gt;</operator><name>i</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>taosVariantGet</name><parameter_list>(<parameter><decl><type><name>SVariant</name> <modifier>*</modifier></type><name>pVar</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_DATA_TYPE_BOOL</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_TINYINT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_SMALLINT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_INT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>:</case>
      <return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pVar</name><operator>-&gt;</operator><name>i</name></name></expr>;</return>
    <case>case <expr><name>TSDB_DATA_TYPE_UTINYINT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_USMALLINT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_UINT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_UBIGINT</name></expr>:</case>
      <return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pVar</name><operator>-&gt;</operator><name>u</name></name></expr>;</return>
    <case>case <expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>:</case>
      <return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pVar</name><operator>-&gt;</operator><name>d</name></name></expr>;</return>
    <case>case <expr><name>TSDB_DATA_TYPE_FLOAT</name></expr>:</case>
      <return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pVar</name><operator>-&gt;</operator><name>f</name></name></expr>;</return>
    <case>case <expr><name>TSDB_DATA_TYPE_BINARY</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_JSON</name></expr>:</case>
      <return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>pVar</name><operator>-&gt;</operator><name>pz</name></name></expr>;</return>
    <case>case <expr><name>TSDB_DATA_TYPE_NCHAR</name></expr>:</case>
      <return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>pVar</name><operator>-&gt;</operator><name>ucs4</name></name></expr>;</return>
    <default>default:</default>
      <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></switch>

  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
</unit>
