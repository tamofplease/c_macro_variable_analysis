<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/common/src/tdatablock.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdatablock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcompare.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tname.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MALLOC_ALIGN_BYTES</name></cpp:macro>  <cpp:value>256</cpp:value></cpp:define>

<function><type><name>int32_t</name></type> <name>colDataGetLength</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColumnInfoData</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfRows</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pColumnInfoData</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>length</name></name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_NULL</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name> <operator>*</operator> <name>numOfRows</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>colDataGetFullLength</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColumnInfoData</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfRows</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>length</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>numOfRows</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_NULL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name> <operator>*</operator> <name>numOfRows</name></expr></else></ternary><operator>)</operator> <operator>+</operator> <call><name>BitmapLen</name><argument_list>(<argument><expr><name>numOfRows</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>colDataTrim</name><parameter_list>(<parameter><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColumnInfoData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// TODO</comment>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>getJsonValueLen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>dataLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>data</name> <operator>==</operator> <name>TSDB_DATA_TYPE_NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>dataLen</name> <operator>=</operator> <name>CHAR_BYTES</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>data</name> <operator>==</operator> <name>TSDB_DATA_TYPE_NCHAR</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>dataLen</name> <operator>=</operator> <call><name>varDataTLen</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <name>CHAR_BYTES</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>CHAR_BYTES</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>data</name> <operator>==</operator> <name>TSDB_DATA_TYPE_DOUBLE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>dataLen</name> <operator>=</operator> <name>DOUBLE_BYTES</name> <operator>+</operator> <name>CHAR_BYTES</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>data</name> <operator>==</operator> <name>TSDB_DATA_TYPE_BOOL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>dataLen</name> <operator>=</operator> <name>CHAR_BYTES</name> <operator>+</operator> <name>CHAR_BYTES</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>tTagIsJson</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="line">// json string</comment>
    <expr_stmt><expr><name>dataLen</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>STag</name><operator>*</operator><operator>)</operator><operator>(</operator><name>data</name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>len</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>dataLen</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>colDataAppend</name><parameter_list>(<parameter><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColumnInfoData</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>currentRow</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pData</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isNull</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pColumnInfoData</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>isNull</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// There is a placehold for each NULL value of binary or nchar type.</comment>
    <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>offset</name><index>[<expr><name>currentRow</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>  <comment type="line">// it is a null value of VAR type.</comment>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>colDataSetNull_f</name><argument_list>(<argument><expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>currentRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>hasNull</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>type</name> <init>= <expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>dataLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_JSON</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>dataLen</name> <operator>=</operator> <call><name>getJsonValueLen</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>dataLen</name> <operator>=</operator> <call><name>varDataTLen</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <decl_stmt><decl><type><name>SVarColAttr</name><modifier>*</modifier></type> <name>pAttr</name> <init>= <expr><operator>&amp;</operator><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>varmeta</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pAttr</name><operator>-&gt;</operator><name>allocLen</name></name> <operator>&lt;</operator> <name><name>pAttr</name><operator>-&gt;</operator><name>length</name></name> <operator>+</operator> <name>dataLen</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>uint32_t</name></type> <name>newSize</name> <init>= <expr><name><name>pAttr</name><operator>-&gt;</operator><name>allocLen</name></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>newSize</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>newSize</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <while>while <condition>(<expr><name>newSize</name> <operator>&lt;</operator> <name><name>pAttr</name><operator>-&gt;</operator><name>length</name></name> <operator>+</operator> <name>dataLen</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>newSize</name> <operator>=</operator> <name>newSize</name> <operator>*</operator> <literal type="number">1.5</literal></expr>;</expr_stmt>
      </block_content>}</block></while>

      <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>buf</name> <init>= <expr><call><name>taosMemoryRealloc</name><argument_list>(<argument><expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name>newSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pAttr</name><operator>-&gt;</operator><name>allocLen</name></name> <operator>=</operator> <name>newSize</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>uint32_t</name></type> <name>len</name> <init>= <expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>offset</name><index>[<expr><name>currentRow</name></expr>]</index></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>pData</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>dataLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>length</name></name> <operator>+=</operator> <name>dataLen</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>pData</name></name> <operator>+</operator> <name><name>pColumnInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name> <operator>*</operator> <name>currentRow</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>colDataReserve</name><parameter_list>(<parameter><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColumnInfoData</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>newSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>allocLen</name></name> <operator>&gt;=</operator> <name>newSize</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>allocLen</name></name> <operator>&lt;</operator> <name>newSize</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>buf</name> <init>= <expr><call><name>taosMemoryRealloc</name><argument_list>(<argument><expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name>newSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>allocLen</name></name> <operator>=</operator> <name>newSize</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>doCopyNItems</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SColumnInfoData</name></name><modifier>*</modifier></type> <name>pColumnInfoData</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>currentRow</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pData</name></decl></parameter>,
                         <parameter><decl><type><name>int32_t</name></type> <name>itemLen</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfRows</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name> <operator>&gt;=</operator> <name>itemLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>start</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// the first item</comment>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>itemLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>count</name> <init>= <expr><call><name>log</name><argument_list>(<argument><expr><name>numOfRows</name></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>log</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>t</name> <operator>&lt;</operator> <name>count</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>xlen</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>t</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>pData</name></name> <operator>+</operator> <name>start</name> <operator>*</operator> <name>itemLen</name> <operator>+</operator> <name><name>pColumnInfoData</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>,
           <argument><expr><name>xlen</name> <operator>*</operator> <name>itemLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>t</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>start</name> <operator>+=</operator> <name>xlen</name></expr>;</expr_stmt>
  </block_content>}</block></while>

  <comment type="line">// the tail part</comment>
  <if_stmt><if>if <condition>(<expr><name>numOfRows</name> <operator>&gt;</operator> <name>start</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>pData</name></name> <operator>+</operator> <name>start</name> <operator>*</operator> <name>itemLen</name> <operator>+</operator> <name>currentRow</name> <operator>*</operator> <name>itemLen</name></expr></argument>, <argument><expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>,
           <argument><expr><operator>(</operator><name>numOfRows</name> <operator>-</operator> <name>start</name><operator>)</operator> <operator>*</operator> <name>itemLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfRows</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>offset</name><index>[<expr><name>i</name> <operator>+</operator> <name>currentRow</name></expr>]</index></name> <operator>=</operator> <name><name>pColumnInfoData</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>length</name></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>itemLen</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>length</name></name> <operator>+=</operator> <name>numOfRows</name> <operator>*</operator> <name>itemLen</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>colDataAppendNItems</name><parameter_list>(<parameter><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColumnInfoData</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>currentRow</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pData</name></decl></parameter>,
                            <parameter><decl><type><name>uint32_t</name></type> <name>numOfRows</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pData</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>pColumnInfoData</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>varDataTLen</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>allocLen</name></name> <operator>&lt;</operator> <operator>(</operator><name>numOfRows</name> <operator>+</operator> <name>currentRow</name><operator>)</operator> <operator>*</operator> <name>len</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>colDataReserve</name><argument_list>(<argument><expr><name>pColumnInfoData</name></expr></argument>, <argument><expr><operator>(</operator><name>numOfRows</name> <operator>+</operator> <name>currentRow</name><operator>)</operator> <operator>*</operator> <name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>code</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>doCopyNItems</name><argument_list>(<argument><expr><name>pColumnInfoData</name></expr></argument>, <argument><expr><name>currentRow</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>doBitmapMerge</name><parameter_list>(<parameter><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColumnInfoData</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfRow1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SColumnInfoData</name><modifier>*</modifier></type> <name>pSource</name></decl></parameter>,
                          <parameter><decl><type><name>int32_t</name></type> <name>numOfRow2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>numOfRow2</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>uint32_t</name></type> <name>total</name> <init>= <expr><name>numOfRow1</name> <operator>+</operator> <name>numOfRow2</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>uint32_t</name></type> <name>remindBits</name> <init>= <expr><call><name>BitPos</name><argument_list>(<argument><expr><name>numOfRow1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>shiftBits</name> <init>= <expr><literal type="number">8</literal> <operator>-</operator> <name>remindBits</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>remindBits</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>  <comment type="line">// no need to shift bits of bitmap</comment>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>nullbitmap</name></name> <operator>+</operator> <call><name>BitmapLen</name><argument_list>(<argument><expr><name>numOfRow1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pSource</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><call><name>BitmapLen</name><argument_list>(<argument><expr><name>numOfRow2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name><name>pSource</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>nullbitmap</name><index>[<expr><call><name>BitmapLen</name><argument_list>(<argument><expr><name>numOfRow1</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name>remindBits</name><operator>)</operator></expr>;</expr_stmt>  <comment type="line">// copy remind bits</comment>

  <if_stmt><if>if <condition>(<expr><call><name>BitmapLen</name><argument_list>(<argument><expr><name>numOfRow1</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>BitmapLen</name><argument_list>(<argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>BitmapLen</name><argument_list>(<argument><expr><name>numOfRow2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>start</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>nullbitmap</name><index>[<expr><call><name>BitmapLen</name><argument_list>(<argument><expr><name>numOfRow1</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>overCount</name> <init>= <expr><call><name>BitmapLen</name><argument_list>(<argument><expr><name>total</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>BitmapLen</name><argument_list>(<argument><expr><name>numOfRow1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>  <comment type="line">// size limit of pSource-&gt;nullbitmap</comment>
    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>start</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>remindBits</name><operator>)</operator></expr>;</expr_stmt>  <comment type="line">// copy remind bits</comment>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>overCount</name></expr>)</condition> <block>{<block_content>  <comment type="line">// size limit of pColumnInfoData-&gt;nullbitmap</comment>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>start</name><index>[<expr><name>i</name></expr>]</index></name> <operator>|=</operator> <operator>(</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>shiftBits</name><operator>)</operator></expr>;</expr_stmt>  <comment type="line">// copy shift bits</comment>
    <expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>colDataMergeCol</name><parameter_list>(<parameter><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColumnInfoData</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfRow1</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>capacity</name></decl></parameter>,
                        <parameter><decl><type><specifier>const</specifier> <name>SColumnInfoData</name><modifier>*</modifier></type> <name>pSource</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfRow2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pColumnInfoData</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>pSource</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pColumnInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>pSource</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>numOfRow2</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>numOfRow1</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pSource</name><operator>-&gt;</operator><name>hasNull</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>hasNull</name></name> <operator>=</operator> <name><name>pSource</name><operator>-&gt;</operator><name>hasNull</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint32_t</name></type> <name>finalNumOfRows</name> <init>= <expr><name>numOfRow1</name> <operator>+</operator> <name>numOfRow2</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <comment type="line">// Handle the bitmap</comment>
    <if_stmt><if>if <condition>(<expr><name>finalNumOfRows</name> <operator>&gt;</operator> <operator>(</operator><operator>*</operator><name>capacity</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>taosMemoryRealloc</name><argument_list>(<argument><expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>offset</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>numOfRow1</name> <operator>+</operator> <name>numOfRow2</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><operator>*</operator><name>capacity</name> <operator>=</operator> <name>finalNumOfRows</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>p</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfRow2</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pSource</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>offset</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>offset</name><index>[<expr><name>i</name> <operator>+</operator> <name>numOfRow1</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>offset</name><index>[<expr><name>i</name> <operator>+</operator> <name>numOfRow1</name></expr>]</index></name> <operator>=</operator> <name><name>pSource</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>offset</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>pColumnInfoData</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <comment type="line">// copy data</comment>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>len</name> <init>= <expr><name><name>pSource</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>oldLen</name> <init>= <expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>allocLen</name></name> <operator>&lt;</operator> <name>len</name> <operator>+</operator> <name>oldLen</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>tmp</name> <init>= <expr><call><name>taosMemoryRealloc</name><argument_list>(<argument><expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <name>oldLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>allocLen</name></name> <operator>=</operator> <name>len</name> <operator>+</operator> <name>oldLen</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>pData</name></name> <operator>&amp;&amp;</operator> <name><name>pSource</name><operator>-&gt;</operator><name>pData</name></name></expr>)</condition> <block>{<block_content> <comment type="line">// TD-20382</comment>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>pData</name></name> <operator>+</operator> <name>oldLen</name></expr></argument>, <argument><expr><name><name>pSource</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name>len</name> <operator>+</operator> <name>oldLen</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>finalNumOfRows</name> <operator>&gt;</operator> <operator>(</operator><operator>*</operator><name>capacity</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <comment type="line">// all data may be null, when the pColumnInfoData-&gt;info.type == 0, bytes == 0;</comment>
      <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>tmp</name> <init>= <expr><call><name>taosMemoryRealloc</name><argument_list>(<argument><expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name>finalNumOfRows</name> <operator>*</operator> <name><name>pColumnInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>BitmapLen</name><argument_list>(<argument><expr><name>numOfRow1</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>BitmapLen</name><argument_list>(<argument><expr><name>finalNumOfRows</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>    <name>btmp</name> <init>= <expr><call><name>taosMemoryRealloc</name><argument_list>(<argument><expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><call><name>BitmapLen</name><argument_list>(<argument><expr><name>finalNumOfRows</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint32_t</name></type> <name>extend</name> <init>= <expr><call><name>BitmapLen</name><argument_list>(<argument><expr><name>finalNumOfRows</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>BitmapLen</name><argument_list>(<argument><expr><name>numOfRow1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>btmp</name> <operator>+</operator> <call><name>BitmapLen</name><argument_list>(<argument><expr><name>numOfRow1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>extend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>nullbitmap</name></name> <operator>=</operator> <name>btmp</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><operator>*</operator><name>capacity</name> <operator>=</operator> <name>finalNumOfRows</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>doBitmapMerge</name><argument_list>(<argument><expr><name>pColumnInfoData</name></expr></argument>, <argument><expr><name>numOfRow1</name></expr></argument>, <argument><expr><name>pSource</name></expr></argument>, <argument><expr><name>numOfRow2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pSource</name><operator>-&gt;</operator><name>pData</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>offset</name> <init>= <expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name> <operator>*</operator> <name>numOfRow1</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>pData</name></name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name><name>pSource</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pSource</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name> <operator>*</operator> <name>numOfRow2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>numOfRow1</name> <operator>+</operator> <name>numOfRow2</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>colDataAssign</name><parameter_list>(<parameter><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColumnInfoData</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SColumnInfoData</name><modifier>*</modifier></type> <name>pSource</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfRows</name></decl></parameter>,
                      <parameter><decl><type><specifier>const</specifier> <name>SDataBlockInfo</name><modifier>*</modifier></type> <name>pBlockInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pColumnInfoData</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>pSource</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pColumnInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>pSource</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>numOfRows</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>numOfRows</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>pBlockInfo</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>capacity</name></name> <operator>&gt;=</operator> <name>numOfRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>pSource</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>offset</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>numOfRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>allocLen</name></name> <operator>&lt;</operator> <name><name>pSource</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>tmp</name> <init>= <expr><call><name>taosMemoryRealloc</name><argument_list>(<argument><expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pSource</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>allocLen</name></name> <operator>=</operator> <name><name>pSource</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name><name>pSource</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>pData</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pSource</name><operator>-&gt;</operator><name>pData</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pSource</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pSource</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name><name>pSource</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><call><name>BitmapLen</name><argument_list>(<argument><expr><name>numOfRows</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pSource</name><operator>-&gt;</operator><name>pData</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pSource</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pSource</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name> <operator>*</operator> <name>numOfRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>hasNull</name></name> <operator>=</operator> <name><name>pSource</name><operator>-&gt;</operator><name>hasNull</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pColumnInfoData</name><operator>-&gt;</operator><name>info</name></name> <operator>=</operator> <name><name>pSource</name><operator>-&gt;</operator><name>info</name></name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>blockDataGetNumOfCols</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>size_t</name></type> <name>blockDataGetNumOfRows</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>blockDataUpdateTsWindow</name><parameter_list>(<parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pDataBlock</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>tsColumnIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pDataBlock</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>numOfCols</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>numOfCols</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>index</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>tsColumnIndex</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>tsColumnIndex</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfoData</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>TSKEY</name></type> <name>skey</name> <init>= <expr><operator>*</operator><operator>(</operator><name>TSKEY</name><operator>*</operator><operator>)</operator><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSKEY</name></type> <name>ekey</name> <init>= <expr><operator>*</operator><operator>(</operator><name>TSKEY</name><operator>*</operator><operator>)</operator><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><operator>(</operator><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>window</name><operator>.</operator><name>skey</name></name> <operator>=</operator> <call><name>TMIN</name><argument_list>(<argument><expr><name>skey</name></expr></argument>, <argument><expr><name>ekey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>window</name><operator>.</operator><name>ekey</name></name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name>skey</name></expr></argument>, <argument><expr><name>ekey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>blockDataMerge</name><parameter_list>(<parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pDest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pSrc</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>pDest</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>capacity</name> <init>= <expr><name><name>pDest</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>capacity</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>numOfCols</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pDest</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCol2</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pDest</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCol1</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pSrc</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>capacity</name> <operator>=</operator> <name><name>pDest</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>capacity</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataMergeCol</name><argument_list>(<argument><expr><name>pCol2</name></expr></argument>, <argument><expr><name><name>pDest</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>capacity</name></expr></argument>, <argument><expr><name>pCol1</name></expr></argument>, <argument><expr><name><name>pSrc</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pDest</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>capacity</name></name> <operator>=</operator> <name>capacity</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDest</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>+=</operator> <name><name>pSrc</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>blockDataGetSize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pBlock</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>numOfCols</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfoData</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>total</name> <operator>+=</operator> <call><name>colDataGetFullLength</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>total</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// the number of tuples can be fit in one page.</comment>
<comment type="line">// Actual data rows pluses the corresponding meta data must fit in one memory buffer of the given page size.</comment>
<function><type><name>int32_t</name></type> <name>blockDataSplitRows</name><parameter_list>(<parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>hasVarCol</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>startIndex</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>stopIndex</name></decl></parameter>,
                           <parameter><decl><type><name>int32_t</name></type> <name>pageSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pBlock</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>stopIndex</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>size_t</name></type>  <name>numOfCols</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfRows</name> <init>= <expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>bitmapChar</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>headerSize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>colHeaderSize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>numOfCols</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>payloadSize</name> <init>= <expr><name>pageSize</name> <operator>-</operator> <operator>(</operator><name>headerSize</name> <operator>+</operator> <name>colHeaderSize</name><operator>)</operator></expr></init></decl>;</decl_stmt>

  <comment type="line">// TODO speedup by checking if the whole page can fit in firstly.</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>hasVarCol</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type>  <name>rowSize</name> <init>= <expr><call><name>blockDataGetRowSize</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>capacity</name> <init>= <expr><name>payloadSize</name> <operator>/</operator> <operator>(</operator><name>rowSize</name> <operator>+</operator> <name>numOfCols</name> <operator>*</operator> <name>bitmapChar</name> <operator>/</operator> <literal type="number">8.0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>capacity</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>stopIndex</name> <operator>=</operator> <name>startIndex</name> <operator>+</operator> <name>capacity</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>stopIndex</name> <operator>&gt;=</operator> <name>numOfRows</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>stopIndex</name> <operator>=</operator> <name>numOfRows</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// iterate the rows that can be fit in this buffer page</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><operator>(</operator><name>headerSize</name> <operator>+</operator> <name>colHeaderSize</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><name>startIndex</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>numOfRows</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfoData</name> <init>= <expr><call><name>TARRAY_GET_ELEM</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>offset</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>varDataTLen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>size</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>size</name> <operator>+=</operator> <name><name>pColInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>j</name> <operator>-</operator> <name>startIndex</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x07</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>  <comment type="line">// the space for null bitmap</comment>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name>pageSize</name></expr>)</condition> <block>{<block_content>  <comment type="line">// pageSize must be able to hold one row</comment>
      <expr_stmt><expr><operator>*</operator><name>stopIndex</name> <operator>=</operator> <name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>*</operator><name>stopIndex</name> <operator>&gt;=</operator> <name>startIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <comment type="line">// all fit in</comment>
  <expr_stmt><expr><operator>*</operator><name>stopIndex</name> <operator>=</operator> <name>numOfRows</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>blockDataExtractBlock</name><parameter_list>(<parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>startIndex</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rowCount</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pBlock</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>startIndex</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>rowCount</name></expr></argument> &gt;</argument_list></name> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>||</operator> <name>rowCount</name> <operator>+</operator> <name>startIndex</name> <operator>&gt;</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pDst</name> <init>= <expr><call><name>createDataBlock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pDst</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>info</name></name> <operator>=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>capacity</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>numOfCols</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnInfoData</name></type>  <name>colInfo</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pSrcCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>colInfo</name><operator>.</operator><name>info</name></name> <operator>=</operator> <name><name>pSrcCol</name><operator>-&gt;</operator><name>info</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>blockDataAppendColInfo</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>colInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>, <argument><expr><name>rowCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColData</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pDstCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pDst</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><name>startIndex</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><name>startIndex</name> <operator>+</operator> <name>rowCount</name><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>bool</name></type> <name>isNull</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pBlock</name><operator>-&gt;</operator><name>pBlockAgg</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>isNull</name> <operator>=</operator> <call><name>colDataIsNull_s</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>isNull</name> <operator>=</operator> <call><name>colDataIsNull</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pBlockAgg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>isNull</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>colDataAppendNULL</name><argument_list>(<argument><expr><name>pDstCol</name></expr></argument>, <argument><expr><name>j</name> <operator>-</operator> <name>startIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pDstCol</name></expr></argument>, <argument><expr><name>j</name> <operator>-</operator> <name>startIndex</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <name>rowCount</name></expr>;</expr_stmt>
  <return>return <expr><name>pDst</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 *
 * +------------------+---------------------------------------------+
 * |the number of rows|                    column #1                |
 * |    (4 bytes)     |------------+-----------------------+--------+
 * |                  | null bitmap| column length(4bytes) | values |
 * +------------------+------------+-----------------------+--------+
 * @param buf
 * @param pBlock
 * @return
 */</comment>
<function><type><name>int32_t</name></type> <name>blockDataToBuf</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pBlock</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// write the number of rows</comment>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><name>buf</name> <operator>=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>size_t</name></type>  <name>numOfCols</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfRows</name> <init>= <expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>pStart</name> <init>= <expr><name>buf</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pStart</name></expr></argument>, <argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>offset</name></name></expr></argument>, <argument><expr><name>numOfRows</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pStart</name> <operator>+=</operator> <name>numOfRows</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pStart</name></expr></argument>, <argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><call><name>BitmapLen</name><argument_list>(<argument><expr><name>numOfRows</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pStart</name> <operator>+=</operator> <call><name>BitmapLen</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <decl_stmt><decl><type><name>uint32_t</name></type> <name>dataSize</name> <init>= <expr><call><name>colDataGetLength</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>pStart</name> <operator>=</operator> <name>dataSize</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pStart</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pStart</name></expr></argument>, <argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name>dataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pStart</name> <operator>+=</operator> <name>dataSize</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>blockDataFromBuf</name><parameter_list>(<parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfRows</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>buf</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <name>numOfRows</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>      <name>numOfCols</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pStart</name> <init>= <expr><name>buf</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>size_t</name></type> <name>metaSize</name> <init>= <expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>  <name>tmp</name> <init>= <expr><call><name>taosMemoryRealloc</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>offset</name></name></expr></argument>, <argument><expr><name>metaSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="line">// preview calloc is too small</comment>
      <if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>pCol</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>tmp</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>offset</name></name></expr></argument>, <argument><expr><name>pStart</name></expr></argument>, <argument><expr><name>metaSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pStart</name> <operator>+=</operator> <name>metaSize</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>pStart</name></expr></argument>, <argument><expr><call><name>BitmapLen</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pStart</name> <operator>+=</operator> <call><name>BitmapLen</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>colLength</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>pStart</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>pStart</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pCol</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>allocLen</name></name> <operator>&lt;</operator> <name>colLength</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>tmp</name> <init>= <expr><call><name>taosMemoryRealloc</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name>colLength</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pCol</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>allocLen</name></name> <operator>=</operator> <name>colLength</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name><name>pCol</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name>colLength</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>length</name></name> <operator>&lt;=</operator> <name><name>pCol</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>allocLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name>pStart</name></expr></argument>, <argument><expr><name>colLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pStart</name> <operator>+=</operator> <name>colLength</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// todo remove this</comment>
<function><type><name>int32_t</name></type> <name>blockDataFromBuf1</name><parameter_list>(<parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>capacity</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>buf</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>buf</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>numOfCols</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pStart</name> <init>= <expr><name>buf</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pCol</name><operator>-&gt;</operator><name>hasNull</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>size_t</name></type> <name>metaSize</name> <init>= <expr><name>capacity</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>offset</name></name></expr></argument>, <argument><expr><name>pStart</name></expr></argument>, <argument><expr><name>metaSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pStart</name> <operator>+=</operator> <name>metaSize</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>pStart</name></expr></argument>, <argument><expr><call><name>BitmapLen</name><argument_list>(<argument><expr><name>capacity</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pStart</name> <operator>+=</operator> <call><name>BitmapLen</name><argument_list>(<argument><expr><name>capacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>colLength</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>pStart</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>pStart</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pCol</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>allocLen</name></name> <operator>&lt;</operator> <name>colLength</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>tmp</name> <init>= <expr><call><name>taosMemoryRealloc</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name>colLength</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pCol</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>allocLen</name></name> <operator>=</operator> <name>colLength</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name><name>pCol</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name>colLength</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>length</name></name> <operator>&lt;=</operator> <name><name>pCol</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>allocLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>colDataIsNNull_s</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name>pStart</name></expr></argument>, <argument><expr><name>colLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>pStart</name> <operator>+=</operator> <name><name>pCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name> <operator>*</operator> <name>capacity</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>blockDataGetRowSize</name><parameter_list>(<parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pBlock</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rowSize</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>rowSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>size_t</name></type> <name>numOfCols</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>rowSize</name> <operator>+=</operator> <name><name>pColInfo</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rowSize</name></name> <operator>=</operator> <name>rowSize</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rowSize</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * @refitem blockDataToBuf for the meta size
 * @param pBlock
 * @return
 */</comment>
<function><type><name>size_t</name></type> <name>blockDataGetSerialMetaSize</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>numOfCols</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// | version | total length | total rows | total columns | flag seg| block group id | column schema | each column</comment>
  <comment type="line">// length |</comment>
  <return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
         <name>numOfCols</name> <operator>*</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int8_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>+</operator> <name>numOfCols</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</return>
</block_content>}</block></function>

<function><type><name>double</name></type> <name>blockDataGetSerialRowSize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pBlock</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>rowSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>numOfCols</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>rowSize</name> <operator>+=</operator> <name><name>pColInfo</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pColInfo</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rowSize</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>rowSize</name> <operator>+=</operator> <literal type="number">1</literal> <operator>/</operator> <literal type="number">8.0</literal></expr>;</expr_stmt>  <comment type="line">// one bit for each record</comment>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>rowSize</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>SSDataBlockSortHelper</name> <block>{
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>      <name>orderInfo</name></decl>;</decl_stmt>  <comment type="line">// SArray&lt;SBlockOrderInfo&gt;</comment>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pDataBlock</name></decl>;</decl_stmt>
}</block></struct></type> <name>SSDataBlockSortHelper</name>;</typedef>

<function><type><name>int32_t</name></type> <name>dataBlockCompar</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>p2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SSDataBlockSortHelper</name><modifier>*</modifier></type> <name>pHelper</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SSDataBlockSortHelper</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pDataBlock</name> <init>= <expr><name><name>pHelper</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>left</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>p1</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>right</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>p2</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pHelper</name><operator>-&gt;</operator><name>orderInfo</name></name></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SBlockOrderInfo</name><modifier>*</modifier></type> <name>pOrder</name> <init>= <expr><call><name>TARRAY_GET_ELEM</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfoData</name> <init>= <expr><name><name>pOrder</name><operator>-&gt;</operator><name>pColData</name></name></expr></init></decl>;</decl_stmt>  <comment type="line">// TARRAY_GET_ELEM(pDataBlock-&gt;pDataBlock, pOrder-&gt;colIndex);</comment>

    <if_stmt><if>if <condition>(<expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>hasNull</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>bool</name></type> <name>leftNull</name> <init>= <expr><call><name>colDataIsNull</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>bool</name></type> <name>rightNull</name> <init>= <expr><call><name>colDataIsNull</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>leftNull</name> <operator>&amp;&amp;</operator> <name>rightNull</name></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>  <comment type="line">// continue to next slot</comment>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>rightNull</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name><name>pOrder</name><operator>-&gt;</operator><name>nullFirst</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>leftNull</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><name><name>pOrder</name><operator>-&gt;</operator><name>nullFirst</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>left1</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>right1</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_JSON</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>tTagIsJson</name><argument_list>(<argument><expr><name>left1</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>tTagIsJson</name><argument_list>(<argument><expr><name>right1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_QRY_JSON_NOT_SUPPORT_ERROR</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>__compar_fn_t</name></type> <name>fn</name> <init>= <expr><call><name>getKeyComparFunc</name><argument_list>(<argument><expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>pOrder</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>fn</name><argument_list>(<argument><expr><name>left1</name></expr></argument>, <argument><expr><name>right1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><name>ret</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>doAssignOneTuple</name><parameter_list>(<parameter><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pDstCols</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfRows</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>pSrcBlock</name></decl></parameter>,
                                <parameter><decl><type><name>int32_t</name></type> <name>tupleIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>  <name>numOfCols</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pSrcBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pDst</name> <init>= <expr><operator>&amp;</operator><name><name>pDstCols</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pSrc</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pSrcBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pSrc</name><operator>-&gt;</operator><name>hasNull</name></name> <operator>&amp;&amp;</operator> <call><name>colDataIsNull</name><argument_list>(<argument><expr><name>pSrc</name></expr></argument>, <argument><expr><name><name>pSrcBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><name>tupleIndex</name></expr></argument>, <argument><expr><name><name>pSrcBlock</name><operator>-&gt;</operator><name>pBlockAgg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>colDataAppend</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>code</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pSrc</name></expr></argument>, <argument><expr><name>tupleIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>colDataAppend</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>code</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>blockDataAssign</name><parameter_list>(<parameter><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCols</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>pDataBlock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int32_t</name><modifier>*</modifier></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  for (int32_t i = 0; i &lt; pDataBlock-&gt;info.rows; ++i) {
    int32_t code = doAssignOneTuple(pCols, i, pDataBlock, index[i]);
    if (code != TSDB_CODE_SUCCESS) {
      return code;
    }
  }
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>size_t</name></type> <name>numOfCols</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pDst</name> <init>= <expr><operator>&amp;</operator><name><name>pCols</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pSrc</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pSrc</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pSrc</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pDst</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pSrc</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pSrc</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name><name>pSrc</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>

      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>offset</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>pSrc</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>offset</name><index>[<expr><name><name>index</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pSrc</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name><name>index</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>colDataSetNull_f</name><argument_list>(<argument><expr><name><name>pDst</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pDst</name><operator>-&gt;</operator><name>pData</name></name> <operator>+</operator> <name>j</name> <operator>*</operator> <name><name>pDst</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name></expr></argument>, <argument><expr><name><name>pSrc</name><operator>-&gt;</operator><name>pData</name></name> <operator>+</operator> <name><name>index</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <name><name>pDst</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name></expr></argument>, <argument><expr><name><name>pDst</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SColumnInfoData</name><modifier>*</modifier></type> <name>createHelpColInfoData</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>pDataBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>rows</name> <init>= <expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>capacity</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>  <name>numOfCols</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCols</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>numOfCols</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SColumnInfoData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pCols</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfoData</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pCols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>info</name> <operator>=</operator> <name><name>pColInfoData</name><operator>-&gt;</operator><name>info</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pCols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pCols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>varmeta</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pCols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pData</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>pCols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>varmeta</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name><name>pColInfoData</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pCols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>varmeta</name><operator>.</operator><name>allocLen</name></name> <operator>=</operator> <name><name>pCols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>varmeta</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pCols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nullbitmap</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>BitmapLen</name><argument_list>(<argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pCols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pData</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name><name>pCols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>info</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>pCols</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>copyBackToBlock</name><parameter_list>(<parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pDataBlock</name></decl></parameter>, <parameter><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCols</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>numOfCols</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfoData</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>info</name></name> <operator>=</operator> <name><name>pCols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>info</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>varmeta</name></name> <operator>=</operator> <name><name>pCols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>varmeta</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>nullbitmap</name></name> <operator>=</operator> <name><name>pCols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nullbitmap</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <name><name>pCols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pData</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pCols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name><modifier>*</modifier></type> <name>createTupleIndex</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>rows</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>index</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rows</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>index</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>destroyTupleIndex</name><parameter_list>(<parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>blockDataSort</name><parameter_list>(<parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pDataBlock</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pOrderInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pDataBlock</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>pOrderInfo</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// Allocate the additional buffer.</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>rows</name> <init>= <expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>sortColumnHasNull</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>varTypeSort</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pOrderInfo</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SBlockOrderInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pOrderInfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfoData</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>slotId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>hasNull</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>sortColumnHasNull</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>varTypeSort</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>size_t</name></type> <name>numOfCols</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pOrderInfo</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>sortColumnHasNull</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>numOfCols</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>varTypeSort</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfoData</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SBlockOrderInfo</name><modifier>*</modifier></type> <name>pOrder</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pOrderInfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int64_t</name></type> <name>p0</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>__compar_fn_t</name></type> <name>fn</name> <init>= <expr><call><name>getKeyComparFunc</name><argument_list>(<argument><expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>pOrder</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>taosSort</name><argument_list>(<argument><expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name></expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>int64_t</name></type> <name>p1</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"blockDataSort easy cost:%"</literal> <name>PRId64</name> <literal type="string">", rows:%d\n"</literal></expr></argument>, <argument><expr><name>p1</name> <operator>-</operator> <name>p0</name></expr></argument>, <argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// var data type</comment>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>numOfCols</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>index</name> <init>= <expr><call><name>createTupleIndex</name><argument_list>(<argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>p0</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SSDataBlockSortHelper</name></type> <name>helper</name> <init>= <expr><block>{<expr><operator>.</operator><name>pDataBlock</name> <operator>=</operator> <name>pDataBlock</name></expr>, <expr><operator>.</operator><name>orderInfo</name> <operator>=</operator> <name>pOrderInfo</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>helper</name><operator>.</operator><name>orderInfo</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>SBlockOrderInfo</name></name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>helper</name><operator>.</operator><name>orderInfo</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pColData</name></name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>slotId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosqsort</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>helper</name></expr></argument>, <argument><expr><name>dataBlockCompar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>terrno</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>terrno</name></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>p1</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCols</name> <init>= <expr><call><name>createHelpColInfoData</name><argument_list>(<argument><expr><name>pDataBlock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pCols</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>destroyTupleIndex</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>p2</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>blockDataAssign</name><argument_list>(<argument><expr><name>pCols</name></expr></argument>, <argument><expr><name>pDataBlock</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>p3</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>copyBackToBlock</name><argument_list>(<argument><expr><name>pDataBlock</name></expr></argument>, <argument><expr><name>pCols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>p4</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"blockDataSort complex sort:%"</literal> <name>PRId64</name> <literal type="string">", create:%"</literal> <name>PRId64</name> <literal type="string">", assign:%"</literal> <name>PRId64</name> <literal type="string">", copyback:%"</literal> <name>PRId64</name>
         <literal type="string">", rows:%d\n"</literal></expr></argument>,
         <argument><expr><name>p1</name> <operator>-</operator> <name>p0</name></expr></argument>, <argument><expr><name>p2</name> <operator>-</operator> <name>p1</name></expr></argument>, <argument><expr><name>p3</name> <operator>-</operator> <name>p2</name></expr></argument>, <argument><expr><name>p4</name> <operator>-</operator> <name>p3</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>destroyTupleIndex</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>SHelper</name> <block>{
  <decl_stmt><decl><type><name>int32_t</name></type> <name>index</name></decl>;</decl_stmt>
  <union>union <block>{
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>pData</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>i64</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type>  <name>d64</name></decl>;</decl_stmt>
  }</block>;</union>
}</block></struct></type> <name>SHelper</name>;</typedef>

<function><type><name>SHelper</name><modifier>*</modifier></type> <name>createTupleIndex_rv</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>numOfRows</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pOrderInfo</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>sortValLengthPerRow</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfCols</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pOrderInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SBlockOrderInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pOrderInfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>slotId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pColData</name></name> <operator>=</operator> <name>pColInfo</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>sortValLengthPerRow</name> <operator>+=</operator> <name><name>pColInfo</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><name>sortValLengthPerRow</name> <operator>*</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>    <name>buf</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHelper</name><modifier>*</modifier></type> <name>phelper</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SHelper</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfRows</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>phelper</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>index</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>phelper</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pData</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name>sortValLengthPerRow</name> <operator>*</operator> <name>i</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SBlockOrderInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pOrderInfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>numOfRows</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>phelper</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>i64</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name><name>pInfo</name><operator>-&gt;</operator><name>pColData</name><operator>-&gt;</operator><name>pData</name></name> <operator>+</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>pColData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name> <operator>*</operator> <name>j</name></expr>;</expr_stmt>
      <comment type="line">//      memcpy(phelper[j].pData + offset, pInfo-&gt;pColData-&gt;pData + pInfo-&gt;pColData-&gt;info.bytes * j,</comment>
      <comment type="line">//      pInfo-&gt;pColData-&gt;info.bytes);</comment>
    </block_content>}</block></for>

    <expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>pColData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>phelper</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>dataBlockCompar_rv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>p2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SSDataBlockSortHelper</name><modifier>*</modifier></type> <name>pHelper</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SSDataBlockSortHelper</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>

  <comment type="line">//  SSDataBlock* pDataBlock = pHelper-&gt;pDataBlock;</comment>

  <decl_stmt><decl><type><name>SHelper</name><modifier>*</modifier></type> <name>left</name> <init>= <expr><operator>(</operator><name>SHelper</name><operator>*</operator><operator>)</operator><name>p1</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHelper</name><modifier>*</modifier></type> <name>right</name> <init>= <expr><operator>(</operator><name>SHelper</name><operator>*</operator><operator>)</operator><name>p2</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pHelper</name><operator>-&gt;</operator><name>orderInfo</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <comment type="line">//  for(int32_t i = 0; i &lt; pInfo-&gt;size; ++i) {</comment>
  <comment type="line">//    SBlockOrderInfo* pOrder = TARRAY_GET_ELEM(pInfo, 0);</comment>
  <comment type="line">//    SColumnInfoData* pColInfoData = pOrder-&gt;pColData;//TARRAY_GET_ELEM(pDataBlock-&gt;pDataBlock, pOrder-&gt;colIndex);</comment>

  <comment type="line">//    if (pColInfoData-&gt;hasNull) {</comment>
  <comment type="line">//      bool leftNull  = colDataIsNull(pColInfoData, pDataBlock-&gt;info.rows, left, pDataBlock-&gt;pBlockAgg);</comment>
  <comment type="line">//      bool rightNull = colDataIsNull(pColInfoData, pDataBlock-&gt;info.rows, right, pDataBlock-&gt;pBlockAgg);</comment>
  <comment type="line">//      if (leftNull &amp;&amp; rightNull) {</comment>
  <comment type="line">//        continue; // continue to next slot</comment>
  <comment type="line">//      }</comment>
  <comment type="line">//</comment>
  <comment type="line">//      if (rightNull) {</comment>
  <comment type="line">//        return pHelper-&gt;nullFirst? 1:-1;</comment>
  <comment type="line">//      }</comment>
  <comment type="line">//</comment>
  <comment type="line">//      if (leftNull) {</comment>
  <comment type="line">//        return pHelper-&gt;nullFirst? -1:1;</comment>
  <comment type="line">//      }</comment>
  <comment type="line">//    }</comment>

  <comment type="line">//    void* left1  = colDataGetData(pColInfoData, left);</comment>
  <comment type="line">//    void* right1 = colDataGetData(pColInfoData, right);</comment>

  <comment type="line">//    switch(pColInfoData-&gt;info.type) {</comment>
  <comment type="line">//      case TSDB_DATA_TYPE_INT: {</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>leftx</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name><name>left</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>    <comment type="line">//*(int32_t*)(left-&gt;pData + offset);</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>rightx</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name><name>right</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>  <comment type="line">//*(int32_t*)(right-&gt;pData + offset);</comment>

  <comment type="line">//        offset += pColInfoData-&gt;info.bytes;</comment>
  <if_stmt><if>if <condition>(<expr><name>leftx</name> <operator>==</operator> <name>rightx</name></expr>)</condition> <block>{<block_content>
    <comment type="line">//          break;</comment>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="line">//          if (pOrder-&gt;order == TSDB_ORDER_ASC) {</comment>
    <return>return <expr><ternary><condition><expr><operator>(</operator><name>leftx</name> <operator>&lt;</operator> <name>rightx</name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
    <comment type="line">//          } else {</comment>
    <comment type="line">//            return (leftx &lt; rightx)? 1:-1;</comment>
    <comment type="line">//          }</comment>
  </block_content>}</block></else></if_stmt>
  <comment type="line">//      }</comment>
  <comment type="line">//      default:</comment>
  <comment type="line">//        assert(0);</comment>
  <comment type="line">//    }</comment>
  <comment type="line">//  }</comment>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>blockDataSort_rv</name><parameter_list>(<parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pDataBlock</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pOrderInfo</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>nullFirst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// Allocate the additional buffer.</comment>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>p0</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SSDataBlockSortHelper</name></type> <name>helper</name> <init>= <expr><block>{<expr><operator>.</operator><name>pDataBlock</name> <operator>=</operator> <name>pDataBlock</name></expr>, <expr><operator>.</operator><name>orderInfo</name> <operator>=</operator> <name>pOrderInfo</name></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>uint32_t</name></type> <name>rows</name> <init>= <expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHelper</name><modifier>*</modifier></type> <name>index</name> <init>= <expr><call><name>createTupleIndex_rv</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name><name>helper</name><operator>.</operator><name>orderInfo</name></name></expr></argument>, <argument><expr><name>pDataBlock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosqsort</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SHelper</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>helper</name></expr></argument>, <argument><expr><name>dataBlockCompar_rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type>          <name>p1</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCols</name> <init>= <expr><call><name>createHelpColInfoData</name><argument_list>(<argument><expr><name>pDataBlock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pCols</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>p2</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">//  int32_t code = blockDataAssign(pCols, pDataBlock, index);</comment>
  <comment type="line">//  if (code != TSDB_CODE_SUCCESS) {</comment>
  <comment type="line">//    terrno = code;</comment>
  <comment type="line">//    return code;</comment>
  <comment type="line">//  }</comment>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>p3</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>copyBackToBlock</name><argument_list>(<argument><expr><name>pDataBlock</name></expr></argument>, <argument><expr><name>pCols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>p4</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"sort:%"</literal> <name>PRId64</name> <literal type="string">", create:%"</literal> <name>PRId64</name> <literal type="string">", assign:%"</literal> <name>PRId64</name> <literal type="string">", copyback:%"</literal> <name>PRId64</name> <literal type="string">", rows:%d\n"</literal></expr></argument>, <argument><expr><name>p1</name> <operator>-</operator> <name>p0</name></expr></argument>, <argument><expr><name>p2</name> <operator>-</operator> <name>p1</name></expr></argument>,
         <argument><expr><name>p3</name> <operator>-</operator> <name>p2</name></expr></argument>, <argument><expr><name>p4</name> <operator>-</operator> <name>p3</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//  destroyTupleIndex(index);</comment>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>blockDataCleanup</name><parameter_list>(<parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pDataBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>blockDataEmpty</name><argument_list>(<argument><expr><name>pDataBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SDataBlockInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>groupId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>blockDataEmpty</name><parameter_list>(<parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pDataBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDataBlockInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>rows</name></name> <operator>&lt;=</operator> <name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>capacity</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>numOfCols</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>colInfoDataCleanup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>rows</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>ekey</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>skey</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// todo temporarily disable it</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>doEnsureCapacity</name><parameter_list>(<parameter><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColumn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SDataBlockInfo</name><modifier>*</modifier></type> <name>pBlockInfo</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>numOfRows</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>clearPayload</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>numOfRows</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument> <comment type="block">/*&amp;&amp; pBlockInfo-&gt;capacity &gt;= pBlockInfo-&gt;rows*/</comment>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>numOfRows</name> <operator>&lt;=</operator> <name><name>pBlockInfo</name><operator>-&gt;</operator><name>capacity</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// todo temp disable it</comment>
  <comment type="line">//  ASSERT(pColumn-&gt;info.bytes != 0);</comment>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>existedRows</name> <init>= <expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>rows</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>tmp</name> <init>= <expr><call><name>taosMemoryRealloc</name><argument_list>(<argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>offset</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>numOfRows</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pColumn</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>tmp</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pColumn</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>offset</name><index>[<expr><name>existedRows</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>numOfRows</name> <operator>-</operator> <name>existedRows</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="line">// prepare for the null bitmap</comment>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>tmp</name> <init>= <expr><call><name>taosMemoryRealloc</name><argument_list>(<argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><call><name>BitmapLen</name><argument_list>(<argument><expr><name>numOfRows</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>oldLen</name> <init>= <expr><call><name>BitmapLen</name><argument_list>(<argument><expr><name>existedRows</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pColumn</name><operator>-&gt;</operator><name>nullbitmap</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pColumn</name><operator>-&gt;</operator><name>nullbitmap</name><index>[<expr><name>oldLen</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>BitmapLen</name><argument_list>(<argument><expr><name>numOfRows</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>oldLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// make sure the allocated memory is MALLOC_ALIGN_BYTES aligned</comment>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>taosMemoryMallocAlign</name><argument_list>(<argument><expr><name>MALLOC_ALIGN_BYTES</name></expr></argument>, <argument><expr><name>numOfRows</name> <operator>*</operator> <name><name>pColumn</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// copy back the existed data</comment>
    <if_stmt><if>if <condition>(<expr><name><name>pColumn</name><operator>-&gt;</operator><name>pData</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name>existedRows</name> <operator>*</operator> <name><name>pColumn</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pColumn</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

    <comment type="line">// todo remove it soon</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>LINUX</name></expr></cpp:if>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>pColumn</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>MALLOC_ALIGN_BYTES</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0x0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if <condition>(<expr><name>clearPayload</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tmp</name> <operator>+</operator> <name><name>pColumn</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name> <operator>*</operator> <name>existedRows</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name> <operator>*</operator> <operator>(</operator><name>numOfRows</name> <operator>-</operator> <name>existedRows</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>colInfoDataCleanup</name><parameter_list>(<parameter><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColumn</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>numOfRows</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pColumn</name><operator>-&gt;</operator><name>hasNull</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pColumn</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pColumn</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>offset</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>offset</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>numOfRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pColumn</name><operator>-&gt;</operator><name>nullbitmap</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>BitmapLen</name><argument_list>(<argument><expr><name>numOfRows</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>colInfoDataEnsureCapacity</name><parameter_list>(<parameter><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColumn</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>numOfRows</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>clearPayload</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDataBlockInfo</name></type> <name>info</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>doEnsureCapacity</name><argument_list>(<argument><expr><name>pColumn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>clearPayload</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>blockDataEnsureCapacity</name><parameter_list>(<parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pDataBlock</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>numOfRows</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>numOfRows</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>numOfRows</name> <operator>&lt;=</operator> <name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>capacity</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>numOfCols</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>doEnsureCapacity</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name></name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>capacity</name></name> <operator>=</operator> <name>numOfRows</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>blockDataEnsureCapacityNoClear</name><parameter_list>(<parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pDataBlock</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>numOfRows</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>numOfRows</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>numOfRows</name> <operator>&lt;=</operator> <name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>capacity</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>numOfCols</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>doEnsureCapacity</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name></name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>capacity</name></name> <operator>=</operator> <name>numOfRows</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>blockDataFreeRes</name><parameter_list>(<parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfOutput</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfOutput</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfoData</name> <init>= <expr><operator>(</operator><name>SColumnInfoData</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>colDataDestroy</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pBlockAgg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>pTag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBlock</name><operator>-&gt;</operator><name>info</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDataBlockInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>blockDataDestroy</name><parameter_list>(<parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pBlock</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>blockDataFreeRes</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>assignOneDataBlock</name><parameter_list>(<parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>src</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>src</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>info</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>info</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>capacity</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>numOfCols</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SColumnInfoData</name></type>  <name>colInfo</name> <init>= <expr><block>{<expr><operator>.</operator><name>hasNull</name> <operator>=</operator> <name>true</name></expr>, <expr><operator>.</operator><name>info</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>info</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>blockDataAppendColInfo</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>colInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pDst</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pSrc</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pSrc</name><operator>-&gt;</operator><name>pData</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pSrc</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>colDataAssign</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>, <argument><expr><name>pSrc</name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>src</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>uint32_t</name></type> <name>cap</name> <init>= <expr><name><name>dst</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>capacity</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>info</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>info</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>capacity</name></name> <operator>=</operator> <name>cap</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>copyDataBlock</name><parameter_list>(<parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>src</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>src</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>dst</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>blockDataCleanup</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>numOfCols</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pDst</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pSrc</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>colDataAssign</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>, <argument><expr><name>pSrc</name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>src</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>uint32_t</name></type> <name>cap</name> <init>= <expr><name><name>dst</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>capacity</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>info</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>info</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>capacity</name></name> <operator>=</operator> <name>cap</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>createSpecialDataBlock</name><parameter_list>(<parameter><decl><type><name>EStreamType</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSDataBlock</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>hasVarCol</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rowSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TSKEY</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TSKEY</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TSKEY</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
                         <sizeof>sizeof<argument_list>(<argument><expr><name>TSKEY</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <name>TSDB_TABLE_NAME_LEN</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>watermark</name></name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SColumnInfoData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SColumnInfoData</name></type> <name>infoData</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>infoData</name><operator>.</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>infoData</name><operator>.</operator><name>info</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TSKEY</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <comment type="line">// window start ts</comment>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>infoData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// window end ts</comment>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>infoData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>infoData</name><operator>.</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_UBIGINT</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>infoData</name><operator>.</operator><name>info</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <comment type="line">// uid</comment>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>infoData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// group id</comment>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>infoData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>infoData</name><operator>.</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>infoData</name><operator>.</operator><name>info</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TSKEY</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <comment type="line">// calculate start ts</comment>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>infoData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// calculate end ts</comment>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>infoData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// table name</comment>
  <expr_stmt><expr><name><name>infoData</name><operator>.</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_VARCHAR</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>infoData</name><operator>.</operator><name>info</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <name>TSDB_TABLE_NAME_LEN</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>infoData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>pBlock</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>blockCopyOneRow</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>pDataBlock</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rowIdx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pDataBlock</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><call><name>createDataBlock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name></name> <operator>=</operator> <name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>capacity</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>numOfCols</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SColumnInfoData</name></type>  <name>colInfo</name> <init>= <expr><block>{<expr><operator>.</operator><name>hasNull</name> <operator>=</operator> <name>true</name></expr>, <expr><operator>.</operator><name>info</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>info</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>blockDataAppendColInfo</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>colInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pDst</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pSrc</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>            <name>pData</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pSrc</name></expr></argument>, <argument><expr><name>rowIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>             <name>isNull</name> <init>= <expr><call><name>colDataIsNull</name><argument_list>(<argument><expr><name>pSrc</name></expr></argument>, <argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><name>rowIdx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>isNull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <return>return <expr><name>pBlock</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>createOneDataBlock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>pDataBlock</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>copyData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pDataBlock</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><call><name>createDataBlock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name></name> <operator>=</operator> <name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>capacity</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rowSize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>numOfCols</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SColumnInfoData</name></type>  <name>colInfo</name> <init>= <expr><block>{<expr><operator>.</operator><name>hasNull</name> <operator>=</operator> <name>true</name></expr>, <expr><operator>.</operator><name>info</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>info</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>blockDataAppendColInfo</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>colInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name>copyData</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pDst</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pSrc</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>colDataAssign</name><argument_list>(<argument><expr><name>pDst</name></expr></argument>, <argument><expr><name>pSrc</name></expr></argument>, <argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>capacity</name></name> <operator>=</operator> <name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>pBlock</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>createDataBlock</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSDataBlock</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pBlock</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SColumnInfoData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>pBlock</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>blockDataAppendColInfo</name><parameter_list>(<parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfoData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pBlock</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>pColInfoData</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SColumnInfoData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <return>return <expr><name>terrno</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>pColInfoData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// todo disable it temporarily</comment>
  <comment type="line">//  ASSERT(pColInfoData-&gt;info.type != 0);</comment>
  <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>hasVarCol</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rowSize</name></name> <operator>+=</operator> <name><name>pColInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SColumnInfoData</name></type> <name>createColumnInfoData</name><parameter_list>(<parameter><decl><type><name>int16_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>colId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SColumnInfoData</name></type> <name>col</name> <init>= <expr><block>{<expr><operator>.</operator><name>hasNull</name> <operator>=</operator> <name>true</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>col</name><operator>.</operator><name>info</name><operator>.</operator><name>colId</name></name> <operator>=</operator> <name>colId</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>col</name><operator>.</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>col</name><operator>.</operator><name>info</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt>

  <return>return <expr><name>col</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>bdGetColumnInfoData</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pBlock</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>blockDataGetCapacityInRow</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pageSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>numOfCols</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>payloadSize</name> <init>= <expr><name>pageSize</name> <operator>-</operator> <call><name>blockDataGetSerialMetaSize</name><argument_list>(<argument><expr><name>numOfCols</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>rowSize</name> <init>= <expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rowSize</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>nRows</name> <init>= <expr><name>payloadSize</name> <operator>/</operator> <name>rowSize</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>nRows</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// the true value must be less than the value of nRows</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>additional</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>additional</name> <operator>+=</operator> <name>nRows</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>additional</name> <operator>+=</operator> <call><name>BitmapLen</name><argument_list>(<argument><expr><name>nRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>newRows</name> <init>= <expr><operator>(</operator><name>payloadSize</name> <operator>-</operator> <name>additional</name><operator>)</operator> <operator>/</operator> <name>rowSize</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>newRows</name> <operator>&lt;=</operator> <name>nRows</name> <operator>&amp;&amp;</operator> <name>newRows</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>newRows</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>colDataDestroy</name><parameter_list>(<parameter><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pColData</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>doShiftBitmap</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>nullBitmap</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>total</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>BitmapLen</name><argument_list>(<argument><expr><name>total</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>newLen</name> <init>= <expr><call><name>BitmapLen</name><argument_list>(<argument><expr><name>total</name> <operator>-</operator> <name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>n</name> <operator>%</operator> <literal type="number">8</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>nullBitmap</name></expr></argument>, <argument><expr><name>nullBitmap</name> <operator>+</operator> <name>n</name> <operator>/</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>newLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type>  <name>tail</name> <init>= <expr><name>n</name> <operator>%</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>  <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>nullBitmap</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
      <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>uint8_t</name></type> <name>v</name> <init>= <expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>  <comment type="line">// source bitmap value</comment>
        <expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>v</name> <operator>&lt;&lt;</operator> <name>tail</name><operator>)</operator></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>uint8_t</name></type> <name>next</name> <init>= <expr><name><name>p</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>|=</operator> <operator>(</operator><name>next</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>tail</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></while>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>gap</name> <init>= <expr><name>len</name> <operator>-</operator> <name>newLen</name></expr></init></decl>;</decl_stmt>
      <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>newLen</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>uint8_t</name></type> <name>v</name> <init>= <expr><name><name>p</name><index>[<expr><name>i</name> <operator>+</operator> <name>gap</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>v</name> <operator>&lt;&lt;</operator> <name>tail</name><operator>)</operator></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>newLen</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>uint8_t</name></type> <name>next</name> <init>= <expr><name><name>p</name><index>[<expr><name>i</name> <operator>+</operator> <name>gap</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>|=</operator> <operator>(</operator><name>next</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>tail</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></while>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>colDataMoveVarData</name><parameter_list>(<parameter><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfoData</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>end</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>dataOffset</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>dataLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>beigin</name> <init>= <expr><name>start</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>beigin</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>offset</name> <init>= <expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>offset</name><index>[<expr><name>beigin</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>offset</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>beigin</name><operator>++</operator></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>start</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>offset</name><index>[<expr><name>beigin</name></expr>]</index></name> <operator>=</operator> <name>dataLen</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>pData</name></name> <operator>+</operator> <name>offset</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>dataOffset</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>dataOffset</name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="line">// mark the begin of data</comment>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>type</name> <init>= <expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_JSON</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>dataLen</name> <operator>+=</operator> <call><name>getJsonValueLen</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>dataLen</name> <operator>+=</operator> <call><name>varDataTLen</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>beigin</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><name>dataOffset</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>pData</name></name> <operator>+</operator> <name>dataOffset</name></expr></argument>, <argument><expr><name>dataLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>offset</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pColInfoData</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>offset</name><index>[<expr><name>start</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>end</name> <operator>-</operator> <name>start</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>dataLen</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>colDataTrimFirstNRows</name><parameter_list>(<parameter><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfoData</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>total</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>length</name></name> <operator>=</operator> <call><name>colDataMoveVarData</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// clear the offset value of the unused entries.</comment>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pColInfoData</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>offset</name><index>[<expr><name>total</name> <operator>-</operator> <name>n</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>bytes</name> <init>= <expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>pColInfoData</name><operator>-&gt;</operator><name>pData</name></name> <operator>+</operator> <name>n</name> <operator>*</operator> <name>bytes</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>total</name> <operator>-</operator> <name>n</name><operator>)</operator> <operator>*</operator> <name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>doShiftBitmap</name><argument_list>(<argument><expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>blockDataTrimFirstNRows</name><parameter_list>(<parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&lt;=</operator> <name>n</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>blockDataEmpty</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>numOfCols</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfoData</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>colDataTrimFirstNRows</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>colDataKeepFirstNRows</name><parameter_list>(<parameter><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfoData</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>total</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>length</name></name> <operator>=</operator> <call><name>colDataMoveVarData</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pColInfoData</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>offset</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>total</name> <operator>-</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// reset the bitmap value</comment>
    <comment type="block">/*int32_t stopIndex = BitmapLen(n) * 8;
    for(int32_t i = n; i &lt; stopIndex; ++i) {
      colDataClearNull_f(pColInfoData-&gt;nullbitmap, i);
    }

    int32_t remain = BitmapLen(total) - BitmapLen(n);
    if (remain &gt; 0) {
      memset(pColInfoData-&gt;nullbitmap+BitmapLen(n), 0, remain);
    }*/</comment>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>blockDataKeepFirstNRows</name><parameter_list>(<parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>blockDataEmpty</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&lt;=</operator> <name>n</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>numOfCols</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfoData</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>colDataKeepFirstNRows</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tEncodeDataBlock</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>tbUid</name> <init>= <expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>uid</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int16_t</name></type> <name>numOfCols</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int16_t</name></type> <name>hasVarCol</name> <init>= <expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>hasVarCol</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>rows</name> <init>= <expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>sz</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>tlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <call><name>taosEncodeFixedI64</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>tbUid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <call><name>taosEncodeFixedI16</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>numOfCols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <call><name>taosEncodeFixedI16</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>hasVarCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <call><name>taosEncodeFixedI32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <call><name>taosEncodeFixedI32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColData</name> <init>= <expr><operator>(</operator><name>SColumnInfoData</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <call><name>taosEncodeFixedI16</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>colId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <call><name>taosEncodeFixedI8</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <call><name>taosEncodeFixedI32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <call><name>taosEncodeFixedBool</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>hasNull</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <call><name>taosEncodeBinary</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>offset</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <call><name>taosEncodeBinary</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><call><name>BitmapLen</name><argument_list>(<argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>colDataGetLength</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <call><name>taosEncodeFixedI32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <call><name>taosEncodeBinary</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>tlen</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>tDecodeDataBlock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>sz</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int16_t</name></type> <name>numOfCols</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeFixedU64</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeFixedI16</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numOfCols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeFixedI16</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>hasVarCol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeFixedI32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeFixedI32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>sz</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SColumnInfoData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnInfoData</name></type> <name>data</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeFixedI16</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>.</operator><name>info</name><operator>.</operator><name>colId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeFixedI8</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>.</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeFixedI32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>.</operator><name>info</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeFixedBool</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>.</operator><name>hasNull</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeBinary</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>data</name><operator>.</operator><name>varmeta</name><operator>.</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeBinary</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>data</name><operator>.</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><call><name>BitmapLen</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeFixedI32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeBinary</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>data</name><operator>.</operator><name>pData</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>data</name><operator>.</operator><name>varmeta</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>data</name><operator>.</operator><name>varmeta</name><operator>.</operator><name>allocLen</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>buf</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tEncodeDataBlocks</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SArray</name><modifier>*</modifier></type> <name>blocks</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>tlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>sz</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>blocks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <call><name>taosEncodeFixedI32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>blocks</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <call><name>tEncodeDataBlock</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>tlen</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>tDecodeDataBlocks</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier><modifier>*</modifier></type> <name>blocks</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>sz</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeFixedI32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>blocks</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>sz</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSDataBlock</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSDataBlock</name></type> <name>pBlock</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>tDecodeDataBlock</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><operator>*</operator><name>blocks</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>buf</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>formatTimestamp</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>precision</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>time_t</name></type>  <name>tt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ms</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>precision</name> <operator>==</operator> <name>TSDB_TIME_PRECISION_NANO</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>tt</name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator><operator>(</operator><name>val</name> <operator>/</operator> <literal type="number">1000000000</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>ms</name> <operator>=</operator> <name>val</name> <operator>%</operator> <literal type="number">1000000000</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>precision</name> <operator>==</operator> <name>TSDB_TIME_PRECISION_MICRO</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>tt</name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator><operator>(</operator><name>val</name> <operator>/</operator> <literal type="number">1000000</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>ms</name> <operator>=</operator> <name>val</name> <operator>%</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>tt</name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator><operator>(</operator><name>val</name> <operator>/</operator> <literal type="number">1000</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>ms</name> <operator>=</operator> <name>val</name> <operator>%</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* comment out as it make testcases like select_with_tags.sim fail.
    but in windows, this may cause the call to localtime crash if tt &lt; 0,
    need to find a better solution.
    if (tt &lt; 0) {
      tt = 0;
    }
    */</comment>

  <if_stmt><if>if <condition>(<expr><name>tt</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ms</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>tt</name><operator>--</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>precision</name> <operator>==</operator> <name>TSDB_TIME_PRECISION_NANO</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>ms</name> <operator>+=</operator> <literal type="number">1000000000</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>precision</name> <operator>==</operator> <name>TSDB_TIME_PRECISION_MICRO</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>ms</name> <operator>+=</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>ms</name> <operator>+=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>ptm</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosLocalTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>pos</name> <init>= <expr><call><name>strftime</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">35</literal></expr></argument>, <argument><expr><literal type="string">"%Y-%m-%d %H:%M:%S"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>precision</name> <operator>==</operator> <name>TSDB_TIME_PRECISION_NANO</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><literal type="string">".%09d"</literal></expr></argument>, <argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>precision</name> <operator>==</operator> <name>TSDB_TIME_PRECISION_MICRO</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><literal type="string">".%06d"</literal></expr></argument>, <argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><literal type="string">".%03d"</literal></expr></argument>, <argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>blockDebugShowDataBlock</name><parameter_list>(<parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>flag</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>dataBlocks</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSDataBlock</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>dataBlocks</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>blockDebugShowDataBlocks</name><argument_list>(<argument><expr><name>dataBlocks</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>dataBlocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>blockDebugShowDataBlocks</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SArray</name><modifier>*</modifier></type> <name>dataBlocks</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>flag</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>pBuf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>sz</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>dataBlocks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pDataBlock</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>dataBlocks</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type>       <name>numOfCols</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>rows</name> <init>= <expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s |block ver %"</literal> <name>PRIi64</name> <literal type="string">" |block type %d |child id %d|group id %"</literal> <name>PRIu64</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>flag</name></expr></argument>,
           <argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>version</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>childId</name></name></expr></argument>,
           <argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>rows</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s |"</literal></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfoData</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>            <name>var</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name>j</name> <operator>*</operator> <name><name>pColInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>colDataIsNull</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %15s |"</literal></expr></argument>, <argument><expr><literal type="string">"NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <switch>switch <condition>(<expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
          <case>case <expr><name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>:</case>
            <expr_stmt><expr><call><name>formatTimestamp</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><name>var</name></expr></argument>, <argument><expr><name>TSDB_TIME_PRECISION_MILLI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %25s |"</literal></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          <case>case <expr><name>TSDB_DATA_TYPE_BOOL</name></expr>:</case>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %15d |"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          <case>case <expr><name>TSDB_DATA_TYPE_INT</name></expr>:</case>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %15d |"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          <case>case <expr><name>TSDB_DATA_TYPE_UINT</name></expr>:</case>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %15u |"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          <case>case <expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>:</case>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %15"</literal> <name>PRId64</name> <literal type="string">" |"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          <case>case <expr><name>TSDB_DATA_TYPE_UBIGINT</name></expr>:</case>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %15"</literal> <name>PRIu64</name> <literal type="string">" |"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          <case>case <expr><name>TSDB_DATA_TYPE_FLOAT</name></expr>:</case>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %15f |"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          <case>case <expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>:</case>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %15lf |"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>double</name><operator>*</operator><operator>)</operator><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          <case>case <expr><name>TSDB_DATA_TYPE_VARCHAR</name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>pData</name> <init>= <expr><call><name>colDataGetVarData</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int32_t</name></type> <name>dataSize</name> <init>= <expr><call><name>TMIN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name>varDataLen</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dataSize</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %15s |"</literal></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block> <break>break;</break>
          <case>case <expr><name>TSDB_DATA_TYPE_NCHAR</name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>pData</name> <init>= <expr><call><name>colDataGetVarData</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int32_t</name></type> <name>dataSize</name> <init>= <expr><call><name>TMIN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><call><name>varDataLen</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>taosUcs4ToMbs</name><argument_list>(<argument><expr><operator>(</operator><name>TdUcs4</name><operator>*</operator><operator>)</operator><call><name>varDataVal</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dataSize</name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %15s |"</literal></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block> <break>break;</break>
          <default>default:</default>
            <break>break;</break>
        </block_content>}</block></switch>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>
</block_content>}</block></function>

<comment type="line">// for debug</comment>
<function><type><name>char</name><modifier>*</modifier></type> <name>dumpBlockData</name><parameter_list>(<parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pDataBlock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>flag</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>pDataBuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><literal type="number">2048</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>pDataBuf</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>dumpBuf</name> <init>= <expr><operator>*</operator><name>pDataBuf</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>pBuf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>colNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>rows</name> <init>= <expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>dumpBuf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>len</name></expr></argument>,
                  <argument><expr><literal type="string">"===stream===%s|block type %d|child id %d|group id:%"</literal> <name>PRIu64</name> <literal type="string">"|uid:%"</literal> <name>PRId64</name>
                  <literal type="string">"|rows:%d|version:%"</literal> <name>PRIu64</name> <literal type="string">"|cal start:%"</literal> <name>PRIu64</name> <literal type="string">"|cal end:%"</literal> <name>PRIu64</name> <literal type="string">"\n"</literal></expr></argument>,
                  <argument><expr><name>flag</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>childId</name></name></expr></argument>, <argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr></argument>,
                  <argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>uid</name></name></expr></argument>, <argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>version</name></name></expr></argument>, <argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>calWin</name><operator>.</operator><name>skey</name></name></expr></argument>, <argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>calWin</name><operator>.</operator><name>ekey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>dumpBuf</name></expr>;</return></block_content></block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>rows</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>dumpBuf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"%s |"</literal></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>dumpBuf</name></expr>;</return></block_content></block></if></if_stmt>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>colNum</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfoData</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>colDataIsNull</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><name><name>pColInfoData</name><operator>-&gt;</operator><name>pData</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>dumpBuf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">" %15s |"</literal></expr></argument>, <argument><expr><literal type="string">"NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>dumpBuf</name></expr>;</return></block_content></block></if></if_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>var</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <switch>switch <condition>(<expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>:</case>
          <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>formatTimestamp</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><name>var</name></expr></argument>, <argument><expr><name>TSDB_TIME_PRECISION_MILLI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>dumpBuf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">" %25s |"</literal></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>dumpBuf</name></expr>;</return></block_content></block></if></if_stmt>
          <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_TINYINT</name></expr>:</case>
          <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>dumpBuf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">" %15d |"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int8_t</name><operator>*</operator><operator>)</operator><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>dumpBuf</name></expr>;</return></block_content></block></if></if_stmt>
          <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_UTINYINT</name></expr>:</case>
          <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>dumpBuf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">" %15d |"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>dumpBuf</name></expr>;</return></block_content></block></if></if_stmt>
          <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_SMALLINT</name></expr>:</case>
          <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>dumpBuf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">" %15d |"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>dumpBuf</name></expr>;</return></block_content></block></if></if_stmt>
          <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_USMALLINT</name></expr>:</case>
          <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>dumpBuf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">" %15d |"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>dumpBuf</name></expr>;</return></block_content></block></if></if_stmt>
          <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_INT</name></expr>:</case>
          <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>dumpBuf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">" %15d |"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>dumpBuf</name></expr>;</return></block_content></block></if></if_stmt>
          <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_UINT</name></expr>:</case>
          <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>dumpBuf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">" %15u |"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>dumpBuf</name></expr>;</return></block_content></block></if></if_stmt>
          <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>:</case>
          <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>dumpBuf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">" %15"</literal> <name>PRId64</name> <literal type="string">" |"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>dumpBuf</name></expr>;</return></block_content></block></if></if_stmt>
          <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_UBIGINT</name></expr>:</case>
          <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>dumpBuf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">" %15"</literal> <name>PRIu64</name> <literal type="string">" |"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>dumpBuf</name></expr>;</return></block_content></block></if></if_stmt>
          <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_FLOAT</name></expr>:</case>
          <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>dumpBuf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">" %15f |"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>dumpBuf</name></expr>;</return></block_content></block></if></if_stmt>
          <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>:</case>
          <comment type="line">// len += snprintf(dumpBuf + len, size - len, " %15lf |", *(double*)var);</comment>
          <comment type="line">// if (len &gt;= size - 1) return dumpBuf;</comment>
          <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_BOOL</name></expr>:</case>
          <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>dumpBuf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">" %15d |"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>bool</name><operator>*</operator><operator>)</operator><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>dumpBuf</name></expr>;</return></block_content></block></if></if_stmt>
          <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_VARCHAR</name></expr>:</case> <block>{<block_content>
          <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>pData</name> <init>= <expr><call><name>colDataGetVarData</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int32_t</name></type> <name>dataSize</name> <init>= <expr><call><name>TMIN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><call><name>varDataLen</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name>dataSize</name> <operator>=</operator> <call><name>TMIN</name><argument_list>(<argument><expr><name>dataSize</name></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dataSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>dumpBuf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">" %15s |"</literal></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>dumpBuf</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block> <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_NCHAR</name></expr>:</case> <block>{<block_content>
          <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>pData</name> <init>= <expr><call><name>colDataGetVarData</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int32_t</name></type> <name>dataSize</name> <init>= <expr><call><name>TMIN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><call><name>varDataLen</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>taosUcs4ToMbs</name><argument_list>(<argument><expr><operator>(</operator><name>TdUcs4</name><operator>*</operator><operator>)</operator><call><name>varDataVal</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dataSize</name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>dumpBuf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">" %15s |"</literal></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>dumpBuf</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block> <break>break;</break>
      </block_content>}</block></switch>
    </block_content>}</block></for>
    <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>dumpBuf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>dumpBuf</name></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>dumpBuf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"%s |end\n"</literal></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>dumpBuf</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * @brief TODO: Assume that the final generated result it less than 3M
 *
 * @param pReq
 * @param pDataBlocks
 * @param vgId
 * @param suid
 *
 */</comment>
<function><type><name>int32_t</name></type> <name>buildSubmitReqFromDataBlock</name><parameter_list>(<parameter><decl><type><name>SSubmitReq</name><modifier>*</modifier><modifier>*</modifier></type> <name>pReq</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>pDataBlock</name></decl></parameter>, <parameter><decl><type><name>STSchema</name><modifier>*</modifier></type> <name>pTSchema</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>vgId</name></decl></parameter>,
                                    <parameter><decl><type><name>tb_uid_t</name></type> <name>suid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>bufSize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSubmitReq</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>sz</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>SDataBlockInfo</name><modifier>*</modifier></type> <name>pBlkInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>colNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>bufSize</name> <operator>+=</operator> <name><name>pBlkInfo</name><operator>-&gt;</operator><name>rows</name></name> <operator>*</operator> <operator>(</operator><name>TD_ROW_HEAD_LEN</name> <operator>+</operator> <name><name>pBlkInfo</name><operator>-&gt;</operator><name>rowSize</name></name> <operator>+</operator> <call><name>BitmapLen</name><argument_list>(<argument><expr><name>colNum</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>bufSize</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSubmitBlk</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><operator>*</operator><name>pReq</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>bufSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>pReq</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pDataBuf</name> <init>= <expr><operator>*</operator><name>pReq</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>     <name>msgLen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSubmitReq</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>numOfBlks</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRowBuilder</name></type> <name>rb</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tdSRowInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>, <argument><expr><name><name>pTSchema</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>colNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>rows</name> <init>= <expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>colNum</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// invalid if only with TS col</comment>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>rb</name><operator>.</operator><name>nCols</name></name> <operator>!=</operator> <name>colNum</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tdSRowSetTpInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>, <argument><expr><name>colNum</name></expr></argument>, <argument><expr><name><name>pTSchema</name><operator>-&gt;</operator><name>flen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SSubmitBlk</name><modifier>*</modifier></type> <name>pSubmitBlk</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>pDataBuf</name></expr></argument>, <argument><expr><name>msgLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pSubmitBlk</name><operator>-&gt;</operator><name>suid</name></name> <operator>=</operator> <name>suid</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSubmitBlk</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <name><name>pDataBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSubmitBlk</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>=</operator> <name>rows</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSubmitBlk</name><operator>-&gt;</operator><name>sversion</name></name> <operator>=</operator> <name><name>pTSchema</name><operator>-&gt;</operator><name>version</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>msgLen</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSubmitBlk</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>dataLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>rows</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>                               <comment type="line">// iterate by row</comment>
      <expr_stmt><expr><call><name>tdSRowResetBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>, <argument><expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>pDataBuf</name></expr></argument>, <argument><expr><name>msgLen</name> <operator>+</operator> <name>dataLen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// set row buf</comment>
      <decl_stmt><decl><type><name>bool</name></type>    <name>isStartKey</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>colNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>  <comment type="line">// iterate by column</comment>
        <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfoData</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>STColumn</name><modifier>*</modifier></type>        <name>pCol</name> <init>= <expr><operator>&amp;</operator><name><name>pTSchema</name><operator>-&gt;</operator><name>columns</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>            <name>var</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name>j</name> <operator>*</operator> <name><name>pColInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
          <case>case <expr><name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isStartKey</name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name>isStartKey</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>tdAppendColValToRow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>, <argument><expr><name>PRIMARYKEY_TIMESTAMP_COL_ID</name></expr></argument>, <argument><expr><name>TSDB_DATA_TYPE_TIMESTAMP</name></expr></argument>, <argument><expr><name>TD_VTYPE_NORM</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
                                  <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <continue>continue;</continue> <comment type="line">// offset should keep 0 for next column</comment>

            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>colDataIsNull_s</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><call><name>tdAppendColValToRow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>, <argument><expr><name>PRIMARYKEY_TIMESTAMP_COL_ID</name> <operator>+</operator> <name>k</name></expr></argument>, <argument><expr><name>TSDB_DATA_TYPE_TIMESTAMP</name></expr></argument>, <argument><expr><name>TD_VTYPE_NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                  <argument><expr><name>false</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
              <expr_stmt><expr><call><name>tdAppendColValToRow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>, <argument><expr><name>PRIMARYKEY_TIMESTAMP_COL_ID</name> <operator>+</operator> <name>k</name></expr></argument>, <argument><expr><name>TSDB_DATA_TYPE_TIMESTAMP</name></expr></argument>, <argument><expr><name>TD_VTYPE_NORM</name></expr></argument>, <argument><expr><name>var</name></expr></argument>,
                                  <argument><expr><name>true</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
          <case>case <expr><name>TSDB_DATA_TYPE_NCHAR</name></expr>:</case>
          <case>case <expr><name>TSDB_DATA_TYPE_VARCHAR</name></expr>:</case> <block>{<block_content>  <comment type="line">// TSDB_DATA_TYPE_BINARY</comment>
            <if_stmt><if>if <condition>(<expr><call><name>colDataIsNull_s</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><call><name>tdAppendColValToRow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>, <argument><expr><name>PRIMARYKEY_TIMESTAMP_COL_ID</name> <operator>+</operator> <name>k</name></expr></argument>, <argument><expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name>TD_VTYPE_NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                  <argument><expr><name>false</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
              <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><call><name>colDataGetData</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
              <expr_stmt><expr><call><name>tdAppendColValToRow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>, <argument><expr><name>PRIMARYKEY_TIMESTAMP_COL_ID</name> <operator>+</operator> <name>k</name></expr></argument>, <argument><expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name>TD_VTYPE_NORM</name></expr></argument>, <argument><expr><name>data</name></expr></argument>,
                                  <argument><expr><name>true</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
          </block_content>}</block>
          <case>case <expr><name>TSDB_DATA_TYPE_VARBINARY</name></expr>:</case>
          <case>case <expr><name>TSDB_DATA_TYPE_DECIMAL</name></expr>:</case>
          <case>case <expr><name>TSDB_DATA_TYPE_BLOB</name></expr>:</case>
          <case>case <expr><name>TSDB_DATA_TYPE_JSON</name></expr>:</case>
          <case>case <expr><name>TSDB_DATA_TYPE_MEDIUMBLOB</name></expr>:</case>
            <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"the column type %"</literal> <name>PRIi16</name> <literal type="string">" is defined but not implemented yet"</literal></expr></argument>, <argument><expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          <default>default:</default>
            <if_stmt><if>if <condition>(<expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>&lt;</operator> <name>TSDB_DATA_TYPE_MAX</name> <operator>&amp;&amp;</operator> <name><name>pColInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>&gt;</operator> <name>TSDB_DATA_TYPE_NULL</name></expr>)</condition> <block>{<block_content>
              <if_stmt><if>if <condition>(<expr><call><name>colDataIsNull_s</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>tdAppendColValToRow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>, <argument><expr><name>PRIMARYKEY_TIMESTAMP_COL_ID</name> <operator>+</operator> <name>k</name></expr></argument>, <argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>TD_VTYPE_NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
                                    <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pCol</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name><name>pColInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>tdAppendColValToRow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>, <argument><expr><name>PRIMARYKEY_TIMESTAMP_COL_ID</name> <operator>+</operator> <name>k</name></expr></argument>, <argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>TD_VTYPE_NORM</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>,
                                    <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block></if> <else>else <block>{<block_content>
                <decl_stmt><decl><type><name>char</name></type> <name><name>tv</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_FLOAT</name></expr>)</condition> <block>{<block_content>
                  <decl_stmt><decl><type><name>float</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><call><name>GET_TYPED_DATA</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name>SET_TYPED_DATA</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_DOUBLE</name></expr>)</condition> <block>{<block_content>
                  <decl_stmt><decl><type><name>double</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><call><name>GET_TYPED_DATA</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>double</name></expr></argument>, <argument><expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name>SET_TYPED_DATA</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_SIGNED_NUMERIC_TYPE</name><argument_list>(<argument><expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                  <decl_stmt><decl><type><name>int64_t</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><call><name>GET_TYPED_DATA</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name>SET_TYPED_DATA</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                  <decl_stmt><decl><type><name>uint64_t</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><call><name>GET_TYPED_DATA</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name>SET_TYPED_DATA</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <expr_stmt><expr><call><name>tdAppendColValToRow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>, <argument><expr><name>PRIMARYKEY_TIMESTAMP_COL_ID</name> <operator>+</operator> <name>k</name></expr></argument>, <argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>TD_VTYPE_NORM</name></expr></argument>, <argument><expr><name>tv</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>,
                                    <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block></else></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
              <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"the column type %"</literal> <name>PRIi16</name> <literal type="string">" is undefined\n"</literal></expr></argument>, <argument><expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>
        </block_content>}</block></switch>
        <expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>TYPE_BYTES</name><index>[<expr><name><name>pCol</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name></expr>;</expr_stmt>  <comment type="line">// sum/avg would convert to int64_t/uint64_t/double during aggregation</comment>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name>tdSRowEnd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>dataLen</name> <operator>+=</operator> <call><name>TD_ROW_LEN</name><argument_list>(<argument><expr><name><name>rb</name><operator>.</operator><name>pBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TD_DEBUG_PRINT_ROW</name></cpp:ifdef>
      <expr_stmt><expr><call><name>tdSRowPrint</name><argument_list>(<argument><expr><name><name>rb</name><operator>.</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name>pTSchema</name></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></for>

    <expr_stmt><expr><operator>++</operator><name>numOfBlks</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pSubmitBlk</name><operator>-&gt;</operator><name>dataLen</name></name> <operator>=</operator> <name>dataLen</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>msgLen</name> <operator>+=</operator> <name><name>pSubmitBlk</name><operator>-&gt;</operator><name>dataLen</name></name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name>numOfBlks</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pReq</name><operator>)</operator><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name>msgLen</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pReq</name><operator>)</operator><operator>-&gt;</operator><name><name>header</name><operator>.</operator><name>vgId</name></name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>vgId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pReq</name><operator>)</operator><operator>-&gt;</operator><name><name>header</name><operator>.</operator><name>contLen</name></name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>msgLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pReq</name><operator>)</operator><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>pReq</name><operator>)</operator><operator>-&gt;</operator><name><name>header</name><operator>.</operator><name>contLen</name></name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pReq</name><operator>)</operator><operator>-&gt;</operator><name>numOfBlocks</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>numOfBlks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SSubmitBlk</name><modifier>*</modifier></type> <name>blk</name> <init>= <expr><operator>(</operator><name>SSubmitBlk</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>*</operator><name>pReq</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>numOfBlks</name><operator>--</operator></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>dataLen</name> <init>= <expr><name><name>blk</name><operator>-&gt;</operator><name>dataLen</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <call><name>htobe64</name><argument_list>(<argument><expr><name><name>blk</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>suid</name></name> <operator>=</operator> <call><name>htobe64</name><argument_list>(<argument><expr><name><name>blk</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>sversion</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>blk</name><operator>-&gt;</operator><name>sversion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>dataLen</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>blk</name><operator>-&gt;</operator><name>dataLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>schemaLen</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>blk</name><operator>-&gt;</operator><name>schemaLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>blk</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>blk</name> <operator>=</operator> <operator>(</operator><name>SSubmitBlk</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>blk</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>dataLen</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="line">// no valid rows</comment>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><operator>*</operator><name>pReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>buildCtbNameByGroupId</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>stbFullName</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>groupId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>stbFullName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>tags</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tags</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSmlKv</name><modifier>*</modifier></type> <name>pTag</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSmlKv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTag</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>tags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>cname</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TSDB_TABLE_NAME_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>cname</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>tags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pTag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pTag</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <literal type="string">"group_id"</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTag</name><operator>-&gt;</operator><name>keyLen</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>pTag</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTag</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_UBIGINT</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTag</name><operator>-&gt;</operator><name>u</name></name> <operator>=</operator> <name>groupId</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTag</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>tags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>RandTableName</name></type> <name>rname</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>tags</name> <operator>=</operator> <name>tags</name></expr>,
      <expr><operator>.</operator><name>stbFullName</name> <operator>=</operator> <name>stbFullName</name></expr>,
      <expr><operator>.</operator><name>stbFullNameLen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>stbFullName</name></expr></argument>)</argument_list></call></expr>,
      <expr><operator>.</operator><name>ctbShortName</name> <operator>=</operator> <name>cname</name></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>buildChildTableName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pTag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>tags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>rname</name><operator>.</operator><name>ctbShortName</name></name> <operator>&amp;&amp;</operator> <name><name>rname</name><operator>.</operator><name>ctbShortName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>rname</name><operator>.</operator><name>ctbShortName</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>blockEncode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfCols</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>dataLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// todo extract method</comment>
  <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>version</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>version</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>data</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>actualLen</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>data</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>rows</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>rows</name> <operator>=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>data</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>*</operator><name>rows</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>cols</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>cols</name> <operator>=</operator> <name>numOfCols</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>data</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

  <comment type="line">// flag segment.</comment>
  <comment type="line">// the inital bit is for column info</comment>
  <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>flagSegment</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>flagSegment</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>

  <expr_stmt><expr><name>data</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>uint64_t</name><modifier>*</modifier></type> <name>groupId</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>data</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfoData</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int8_t</name><operator>*</operator><operator>)</operator><name>data</name><operator>)</operator> <operator>=</operator> <name><name>pColInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>data</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int8_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>data</name><operator>)</operator> <operator>=</operator> <name><name>pColInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>data</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>colSizes</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>data</name> <operator>+=</operator> <name>numOfCols</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

  <expr_stmt><expr><name>dataLen</name> <operator>=</operator> <call><name>blockDataGetSerialMetaSize</name><argument_list>(<argument><expr><name>numOfCols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfRows</name> <init>= <expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>col</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColRes</name> <init>= <expr><operator>(</operator><name>SColumnInfoData</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// copy the null bitmap</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>metaSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pColRes</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>metaSize</name> <operator>=</operator> <name>numOfRows</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>pColRes</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>offset</name></name></expr></argument>, <argument><expr><name>metaSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>metaSize</name> <operator>=</operator> <call><name>BitmapLen</name><argument_list>(<argument><expr><name>numOfRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>pColRes</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>metaSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>data</name> <operator>+=</operator> <name>metaSize</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>dataLen</name> <operator>+=</operator> <name>metaSize</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>colSizes</name><index>[<expr><name>col</name></expr>]</index></name> <operator>=</operator> <call><name>colDataGetLength</name><argument_list>(<argument><expr><name>pColRes</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>dataLen</name> <operator>+=</operator> <name><name>colSizes</name><index>[<expr><name>col</name></expr>]</index></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pColRes</name><operator>-&gt;</operator><name>pData</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>pColRes</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>colSizes</name><index>[<expr><name>col</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>data</name> <operator>+=</operator> <name><name>colSizes</name><index>[<expr><name>col</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>colSizes</name><index>[<expr><name>col</name></expr>]</index></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>colSizes</name><index>[<expr><name>col</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><operator>*</operator><name>actualLen</name> <operator>=</operator> <name>dataLen</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>groupId</name> <operator>=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>dataLen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"build data block, actualLen:%d, rows:%d, cols:%d"</literal></expr></argument>, <argument><expr><name>dataLen</name></expr></argument>, <argument><expr><operator>*</operator><name>rows</name></expr></argument>, <argument><expr><operator>*</operator><name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>dataLen</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>blockDecode</name><parameter_list>(<parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pStart</name> <init>= <expr><name>pData</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>version</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>pStart</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>pStart</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>version</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// total length sizeof(int32_t)</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>dataLen</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>pStart</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>pStart</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

  <comment type="line">// total rows sizeof(int32_t)</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfRows</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>pStart</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>pStart</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

  <comment type="line">// total columns sizeof(int32_t)</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfCols</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>pStart</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>pStart</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

  <comment type="line">// has column info segment</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>flagSeg</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>pStart</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>hasColumnInfo</name> <init>= <expr><operator>(</operator><name>flagSeg</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>pStart</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

  <comment type="line">// group id sizeof(uint64_t)</comment>
  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><name>pStart</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>pStart</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>numOfCols</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SColumnInfoData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArraySetSize</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>numOfCols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfoData</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int8_t</name><operator>*</operator><operator>)</operator><name>pStart</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pStart</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int8_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>pStart</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pStart</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>hasVarCol</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>colLen</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>pStart</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>pStart</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>numOfCols</name></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>colLen</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>colLen</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>colLen</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfoData</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>offset</name></name></expr></argument>, <argument><expr><name>pStart</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>numOfRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pStart</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>numOfRows</name></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>colLen</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pColInfoData</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>allocLen</name></name> <operator>&lt;</operator> <name><name>colLen</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>tmp</name> <init>= <expr><call><name>taosMemoryRealloc</name><argument_list>(<argument><expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>colLen</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>allocLen</name></name> <operator>=</operator> <name><name>colLen</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>varmeta</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name><name>colLen</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>pStart</name></expr></argument>, <argument><expr><call><name>BitmapLen</name><argument_list>(<argument><expr><name>numOfRows</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pStart</name> <operator>+=</operator> <call><name>BitmapLen</name><argument_list>(<argument><expr><name>numOfRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>colLen</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name>pStart</name></expr></argument>, <argument><expr><name><name>colLen</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// TODO</comment>
    <comment type="line">// setting this flag to true temporarily so aggregate function on stable will</comment>
    <comment type="line">// examine NULL value for non-primary key column</comment>
    <expr_stmt><expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>hasNull</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pStart</name> <operator>+=</operator> <name><name>colLen</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <name>numOfRows</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pStart</name> <operator>-</operator> <name>pData</name> <operator>==</operator> <name>dataLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pStart</name></expr>;</return>
</block_content>}</block></function>
</unit>
