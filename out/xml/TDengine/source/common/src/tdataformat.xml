<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/common/src/tdataformat.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdataformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tRealloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcoding.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdatablock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tlog.h"</cpp:file></cpp:include>

<comment type="line">// SBuffer ================================</comment>
<function><type><name>void</name></type> <name>tBufferDestroy</name><parameter_list>(<parameter><decl><type><name>SBuffer</name> <modifier>*</modifier></type><name>pBuffer</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>tFree</name><argument_list>(<argument><expr><name><name>pBuffer</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBuffer</name><operator>-&gt;</operator><name>pBuf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tBufferInit</name><parameter_list>(<parameter><decl><type><name>SBuffer</name> <modifier>*</modifier></type><name>pBuffer</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pBuffer</name><operator>-&gt;</operator><name>nBuf</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuffer</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tBufferPut</name><parameter_list>(<parameter><decl><type><name>SBuffer</name> <modifier>*</modifier></type><name>pBuffer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>nData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuffer</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name><name>pBuffer</name><operator>-&gt;</operator><name>nBuf</name></name> <operator>+</operator> <name>nData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pBuffer</name><operator>-&gt;</operator><name>pBuf</name></name> <operator>+</operator> <name><name>pBuffer</name><operator>-&gt;</operator><name>nBuf</name></name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>nData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBuffer</name><operator>-&gt;</operator><name>nBuf</name></name> <operator>+=</operator> <name>nData</name></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tBufferReserve</name><parameter_list>(<parameter><decl><type><name>SBuffer</name> <modifier>*</modifier></type><name>pBuffer</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>nData</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuffer</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name><name>pBuffer</name><operator>-&gt;</operator><name>nBuf</name></name> <operator>+</operator> <name>nData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppData</name> <operator>=</operator> <name><name>pBuffer</name><operator>-&gt;</operator><name>pBuf</name></name> <operator>+</operator> <name><name>pBuffer</name><operator>-&gt;</operator><name>nBuf</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBuffer</name><operator>-&gt;</operator><name>nBuf</name></name> <operator>+=</operator> <name>nData</name></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// ================================</comment>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>tGetTagVal</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>STagVal</name> <modifier>*</modifier></type><name>pTagVal</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>isJson</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// SRow ========================================================================</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KV_FLG_LIT</name></cpp:macro> <cpp:value>((uint8_t)0x10)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KV_FLG_MID</name></cpp:macro> <cpp:value>((uint8_t)0x20)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KV_FLG_BIG</name></cpp:macro> <cpp:value>((uint8_t)0x30)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROW_BIT_NONE</name></cpp:macro>  <cpp:value>((uint8_t)0x0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROW_BIT_NULL</name></cpp:macro>  <cpp:value>((uint8_t)0x1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROW_BIT_VALUE</name></cpp:macro> <cpp:value>((uint8_t)0x2)</cpp:value></cpp:define>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pack</name><name>(</name><name>push</name><name>,</name> <name>1</name><name>)</name></cpp:pragma>
<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>int16_t</name></type> <name>nCol</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>idx</name><index>[]</index></name></decl>;</decl_stmt>  <comment type="line">// uint8_t * | uint16_t * | uint32_t *</comment>
}</block></struct></type> <name>SKVIdx</name>;</typedef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pack</name><name>(</name><name>pop</name><name>)</name></cpp:pragma>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROW_SET_BITMAP</name><parameter_list>(<parameter><type><name>PB</name></type></parameter>, <parameter><type><name>FLAG</name></type></parameter>, <parameter><type><name>IDX</name></type></parameter>, <parameter><type><name>VAL</name></type></parameter>)</parameter_list></cpp:macro>        \
  <cpp:value>do {                                            \
    if (PB) {                                     \
      switch (FLAG) {                             \
        case (HAS_NULL | HAS_NONE):               \
          SET_BIT1(PB, IDX, VAL);                 \
          break;                                  \
        case (HAS_VALUE | HAS_NONE):              \
          SET_BIT1(PB, IDX, (VAL) ? (VAL)-1 : 0); \
          break;                                  \
        case (HAS_VALUE | HAS_NULL):              \
          SET_BIT1(PB, IDX, (VAL)-1);             \
          break;                                  \
        case (HAS_VALUE | HAS_NULL | HAS_NONE):   \
          SET_BIT2(PB, IDX, VAL);                 \
          break;                                  \
        default:                                  \
          ASSERT(0);                              \
          break;                                  \
      }                                           \
    }                                             \
  } while (0)</cpp:value></cpp:define>

<function><type><name>int32_t</name></type> <name>tRowBuild</name><parameter_list>(<parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>aColVal</name></decl></parameter>, <parameter><decl><type><name>STSchema</name> <modifier>*</modifier></type><name>pTSchema</name></decl></parameter>, <parameter><decl><type><name>SBuffer</name> <modifier>*</modifier></type><name>pBuffer</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>aColVal</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SColVal</name> <operator>*</operator><operator>)</operator><name><name>aColVal</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><name>cid</name> <operator>==</operator> <name>PRIMARYKEY_TIMESTAMP_COL_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SColVal</name> <operator>*</operator><operator>)</operator><name><name>aColVal</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// scan ---------------</comment>
  <decl_stmt><decl><type><name>uint8_t</name></type>       <name>flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>iColVal</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>nColVal</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>aColVal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColVal</name>      <modifier>*</modifier></type><name>pColVal</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>iColVal</name> <operator>&lt;</operator> <name>nColVal</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>SColVal</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>aColVal</name></expr></argument>, <argument><expr><name>iColVal</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>iTColumn</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STColumn</name>     <modifier>*</modifier></type><name>pTColumn</name> <init>= <expr><name><name>pTSchema</name><operator>-&gt;</operator><name>columns</name></name> <operator>+</operator> <name>iTColumn</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>ntp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>nkv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>maxIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>nIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>pTColumn</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>pColVal</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pColVal</name><operator>-&gt;</operator><name>cid</name></name> <operator>==</operator> <name><name>pTColumn</name><operator>-&gt;</operator><name>colId</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>ntp</name> <operator>+=</operator> <name><name>TYPE_BYTES</name><index>[<expr><name><name>pTColumn</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>COL_VAL_IS_VALUE</name><argument_list>(<argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="line">// VALUE</comment>
          <expr_stmt><expr><name>flag</name> <operator>|=</operator> <name>HAS_VALUE</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>maxIdx</name> <operator>=</operator> <name>nkv</name></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>ntp</name> <operator>=</operator> <name>ntp</name> <operator>+</operator> <call><name>tPutU32v</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>pColVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>nData</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>pColVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>nData</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>nkv</name> <operator>=</operator> <name>nkv</name> <operator>+</operator> <call><name>tPutI16v</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>tPutU32v</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>pColVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>nData</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>pColVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>nData</name></name></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>nkv</name> <operator>=</operator> <name>nkv</name> <operator>+</operator> <call><name>tPutI16v</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>pTColumn</name><operator>-&gt;</operator><name>bytes</name></name></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
          <expr_stmt><expr><name>nIdx</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>COL_VAL_IS_NONE</name><argument_list>(<argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="line">// NONE</comment>
          <expr_stmt><expr><name>flag</name> <operator>|=</operator> <name>HAS_NONE</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>COL_VAL_IS_NULL</name><argument_list>(<argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="line">// NULL</comment>
          <expr_stmt><expr><name>flag</name> <operator>|=</operator> <name>HAS_NULL</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>maxIdx</name> <operator>=</operator> <name>nkv</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>nkv</name> <operator>+=</operator> <call><name>tPutI16v</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><name><name>pTColumn</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>nIdx</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><name>pTColumn</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>++</operator><name>iTColumn</name> <operator>&lt;</operator> <name><name>pTSchema</name><operator>-&gt;</operator><name>numOfCols</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>pTSchema</name><operator>-&gt;</operator><name>columns</name></name> <operator>+</operator> <name>iTColumn</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name>pColVal</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>++</operator><name>iColVal</name> <operator>&lt;</operator> <name>nColVal</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>SColVal</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>aColVal</name></expr></argument>, <argument><expr><name>iColVal</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pColVal</name><operator>-&gt;</operator><name>cid</name></name> <operator>&gt;</operator> <name><name>pTColumn</name><operator>-&gt;</operator><name>colId</name></name></expr>)</condition> <block>{<block_content>  <comment type="line">// NONE</comment>
        <expr_stmt><expr><name>flag</name> <operator>|=</operator> <name>HAS_NONE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ntp</name> <operator>+=</operator> <name><name>TYPE_BYTES</name><index>[<expr><name><name>pTColumn</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>pTColumn</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>++</operator><name>iTColumn</name> <operator>&lt;</operator> <name><name>pTSchema</name><operator>-&gt;</operator><name>numOfCols</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>pTSchema</name><operator>-&gt;</operator><name>columns</name></name> <operator>+</operator> <name>iTColumn</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>pColVal</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>++</operator><name>iColVal</name> <operator>&lt;</operator> <name>nColVal</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>SColVal</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>aColVal</name></expr></argument>, <argument><expr><name>iColVal</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// NONE</comment>
      <expr_stmt><expr><name>flag</name> <operator>|=</operator> <name>HAS_NONE</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>ntp</name> <operator>+=</operator> <name><name>TYPE_BYTES</name><index>[<expr><name><name>pTColumn</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>pTColumn</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>++</operator><name>iTColumn</name> <operator>&lt;</operator> <name><name>pTSchema</name><operator>-&gt;</operator><name>numOfCols</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>pTSchema</name><operator>-&gt;</operator><name>columns</name></name> <operator>+</operator> <name>iTColumn</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>

  <comment type="line">// compare ---------------</comment>
  <switch>switch <condition>(<expr><name>flag</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>HAS_NONE</name></expr>:</case>
    <case>case <expr><name>HAS_NULL</name></expr>:</case>
      <expr_stmt><expr><name>ntp</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SRow</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HAS_VALUE</name></expr>:</case>
      <expr_stmt><expr><name>ntp</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SRow</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>ntp</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><operator>(</operator><name>HAS_NULL</name> <operator>|</operator> <name>HAS_NONE</name><operator>)</operator></expr>:</case>
      <expr_stmt><expr><name>ntp</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SRow</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <call><name>BIT1_SIZE</name><argument_list>(<argument><expr><name><name>pTSchema</name><operator>-&gt;</operator><name>numOfCols</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><operator>(</operator><name>HAS_VALUE</name> <operator>|</operator> <name>HAS_NONE</name><operator>)</operator></expr>:</case>
    <case>case <expr><operator>(</operator><name>HAS_VALUE</name> <operator>|</operator> <name>HAS_NULL</name><operator>)</operator></expr>:</case>
      <expr_stmt><expr><name>ntp</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SRow</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <call><name>BIT1_SIZE</name><argument_list>(<argument><expr><name><name>pTSchema</name><operator>-&gt;</operator><name>numOfCols</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name>ntp</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><operator>(</operator><name>HAS_VALUE</name> <operator>|</operator> <name>HAS_NULL</name> <operator>|</operator> <name>HAS_NONE</name><operator>)</operator></expr>:</case>
      <expr_stmt><expr><name>ntp</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SRow</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <call><name>BIT2_SIZE</name><argument_list>(<argument><expr><name><name>pTSchema</name><operator>-&gt;</operator><name>numOfCols</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name>ntp</name></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>
  <if_stmt><if>if <condition>(<expr><name>maxIdx</name> <operator>&lt;=</operator> <name>UINT8_MAX</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>nkv</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SRow</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SKVIdx</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>nIdx</name> <operator>+</operator> <name>nkv</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>flag</name> <operator>|=</operator> <name>KV_FLG_LIT</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>maxIdx</name> <operator>&lt;=</operator> <name>UINT16_MAX</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>nkv</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SRow</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SKVIdx</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <operator>(</operator><name>nIdx</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>nkv</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>flag</name> <operator>|=</operator> <name>KV_FLG_MID</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>nkv</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SRow</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SKVIdx</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <operator>(</operator><name>nIdx</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <name>nkv</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>flag</name> <operator>|=</operator> <name>KV_FLG_BIG</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>nRow</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>nkv</name> <operator>&lt;</operator> <name>ntp</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>nRow</name> <operator>=</operator> <name>nkv</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>nRow</name> <operator>=</operator> <name>ntp</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>flag</name> <operator>&amp;=</operator> <operator>(</operator><operator>(</operator><name>uint8_t</name><operator>)</operator><literal type="number">0x0f</literal><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="line">// alloc --------------</comment>
  <decl_stmt><decl><type><name>SRow</name> <modifier>*</modifier></type><name>pRow</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tBufferReserve</name><argument_list>(<argument><expr><name>pBuffer</name></expr></argument>, <argument><expr><name>nRow</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

  <comment type="line">// build --------------</comment>
  <expr_stmt><expr><name>pColVal</name> <operator>=</operator> <operator>(</operator><name>SColVal</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>aColVal</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pRow</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <name>flag</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRow</name><operator>-&gt;</operator><name>rsv</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRow</name><operator>-&gt;</operator><name>sver</name></name> <operator>=</operator> <name><name>pTSchema</name><operator>-&gt;</operator><name>version</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRow</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>nRow</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRow</name><operator>-&gt;</operator><name>ts</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pColVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>val</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TSKEY</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>flag</name> <operator>==</operator> <name>HAS_NONE</name> <operator>||</operator> <name>flag</name> <operator>==</operator> <name>HAS_NULL</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>iColVal</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>pColVal</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>iColVal</name> <operator>&lt;</operator> <name>nColVal</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>SColVal</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>aColVal</name></expr></argument>, <argument><expr><name>iColVal</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name>iTColumn</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>pTColumn</name> <operator>=</operator> <name><name>pTSchema</name><operator>-&gt;</operator><name>columns</name></name> <operator>+</operator> <name>iTColumn</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>flag</name> <operator>&amp;</operator> <literal type="number">0xf0</literal></expr>)</condition> <block>{<block_content>  <comment type="line">// KV</comment>
    <decl_stmt><decl><type><name>SKVIdx</name>  <modifier>*</modifier></type><name>pIdx</name> <init>= <expr><operator>(</operator><name>SKVIdx</name> <operator>*</operator><operator>)</operator><name><name>pRow</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>  <name>iIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>  <name>nv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>flag</name> <operator>&amp;</operator> <name>KV_FLG_LIT</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pv</name> <operator>=</operator> <name><name>pIdx</name><operator>-&gt;</operator><name>idx</name></name> <operator>+</operator> <name>nIdx</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>flag</name> <operator>&amp;</operator> <name>KV_FLG_MID</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pv</name> <operator>=</operator> <name><name>pIdx</name><operator>-&gt;</operator><name>idx</name></name> <operator>+</operator> <operator>(</operator><name>nIdx</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>pv</name> <operator>=</operator> <name><name>pIdx</name><operator>-&gt;</operator><name>idx</name></name> <operator>+</operator> <operator>(</operator><name>nIdx</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name><name>pIdx</name><operator>-&gt;</operator><name>nCol</name></name> <operator>=</operator> <name>nIdx</name></expr>;</expr_stmt>

    <while>while <condition>(<expr><name>pTColumn</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>pColVal</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pColVal</name><operator>-&gt;</operator><name>cid</name></name> <operator>==</operator> <name><name>pTColumn</name><operator>-&gt;</operator><name>colId</name></name></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><call><name>COL_VAL_IS_VALUE</name><argument_list>(<argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>flag</name> <operator>&amp;</operator> <name>KV_FLG_LIT</name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>pIdx</name><operator>-&gt;</operator><name>idx</name></name><operator>)</operator><index>[<expr><name>iIdx</name></expr>]</index> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name>nv</name></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>flag</name> <operator>&amp;</operator> <name>KV_FLG_MID</name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><operator>(</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>pIdx</name><operator>-&gt;</operator><name>idx</name></name><operator>)</operator><index>[<expr><name>iIdx</name></expr>]</index> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><name>nv</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
              <expr_stmt><expr><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name><name>pIdx</name><operator>-&gt;</operator><name>idx</name></name><operator>)</operator><index>[<expr><name>iIdx</name></expr>]</index> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>nv</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><name>iIdx</name><operator>++</operator></expr>;</expr_stmt>

            <expr_stmt><expr><name>nv</name> <operator>+=</operator> <call><name>tPutI16v</name><argument_list>(<argument><expr><name>pv</name> <operator>+</operator> <name>nv</name></expr></argument>, <argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name>nv</name> <operator>+=</operator> <call><name>tPutU32v</name><argument_list>(<argument><expr><name>pv</name> <operator>+</operator> <name>nv</name></expr></argument>, <argument><expr><name><name>pColVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>nData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pv</name> <operator>+</operator> <name>nv</name></expr></argument>, <argument><expr><name><name>pColVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pColVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>nData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>nv</name> <operator>+=</operator> <name><name>pColVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>nData</name></name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
              <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pv</name> <operator>+</operator> <name>nv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pColVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>val</name></name></expr></argument>, <argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>nv</name> <operator>+=</operator> <name><name>pTColumn</name><operator>-&gt;</operator><name>bytes</name></name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
          </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>COL_VAL_IS_NULL</name><argument_list>(<argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>flag</name> <operator>&amp;</operator> <name>KV_FLG_LIT</name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>pIdx</name><operator>-&gt;</operator><name>idx</name></name><operator>)</operator><index>[<expr><name>iIdx</name></expr>]</index> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name>nv</name></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>flag</name> <operator>&amp;</operator> <name>KV_FLG_MID</name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><operator>(</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>pIdx</name><operator>-&gt;</operator><name>idx</name></name><operator>)</operator><index>[<expr><name>iIdx</name></expr>]</index> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><name>nv</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
              <expr_stmt><expr><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name><name>pIdx</name><operator>-&gt;</operator><name>idx</name></name><operator>)</operator><index>[<expr><name>iIdx</name></expr>]</index> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>nv</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><name>iIdx</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>nv</name> <operator>+=</operator> <call><name>tPutI16v</name><argument_list>(<argument><expr><name>pv</name> <operator>+</operator> <name>nv</name></expr></argument>, <argument><expr><operator>-</operator><name><name>pTColumn</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>

          <expr_stmt><expr><name>pTColumn</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>++</operator><name>iTColumn</name> <operator>&lt;</operator> <name><name>pTSchema</name><operator>-&gt;</operator><name>numOfCols</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>pTSchema</name><operator>-&gt;</operator><name>columns</name></name> <operator>+</operator> <name>iTColumn</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
          <expr_stmt><expr><name>pColVal</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>++</operator><name>iColVal</name> <operator>&lt;</operator> <name>nColVal</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>SColVal</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>aColVal</name></expr></argument>, <argument><expr><name>iColVal</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pColVal</name><operator>-&gt;</operator><name>cid</name></name> <operator>&gt;</operator> <name><name>pTColumn</name><operator>-&gt;</operator><name>colId</name></name></expr>)</condition> <block>{<block_content>  <comment type="line">// NONE</comment>
          <expr_stmt><expr><name>pTColumn</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>++</operator><name>iTColumn</name> <operator>&lt;</operator> <name><name>pTSchema</name><operator>-&gt;</operator><name>numOfCols</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>pTSchema</name><operator>-&gt;</operator><name>columns</name></name> <operator>+</operator> <name>iTColumn</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>pColVal</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>++</operator><name>iColVal</name> <operator>&lt;</operator> <name>nColVal</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>SColVal</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>aColVal</name></expr></argument>, <argument><expr><name>iColVal</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// NONE</comment>
        <expr_stmt><expr><name>pTColumn</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>++</operator><name>iTColumn</name> <operator>&lt;</operator> <name><name>pTSchema</name><operator>-&gt;</operator><name>numOfCols</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>pTSchema</name><operator>-&gt;</operator><name>columns</name></name> <operator>+</operator> <name>iTColumn</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// TUPLE</comment>
    <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>  <name>nv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name>flag</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><operator>(</operator><name>HAS_NULL</name> <operator>|</operator> <name>HAS_NONE</name><operator>)</operator></expr>:</case>
        <expr_stmt><expr><name>pb</name> <operator>=</operator> <name><name>pRow</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>HAS_VALUE</name></expr>:</case>
        <expr_stmt><expr><name>pf</name> <operator>=</operator> <name><name>pRow</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>pv</name> <operator>=</operator> <name>pf</name> <operator>+</operator> <name><name>pTSchema</name><operator>-&gt;</operator><name>flen</name></name></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><operator>(</operator><name>HAS_VALUE</name> <operator>|</operator> <name>HAS_NONE</name><operator>)</operator></expr>:</case>
      <case>case <expr><operator>(</operator><name>HAS_VALUE</name> <operator>|</operator> <name>HAS_NULL</name><operator>)</operator></expr>:</case>
        <expr_stmt><expr><name>pb</name> <operator>=</operator> <name><name>pRow</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>pf</name> <operator>=</operator> <name>pb</name> <operator>+</operator> <call><name>BIT1_SIZE</name><argument_list>(<argument><expr><name><name>pTSchema</name><operator>-&gt;</operator><name>numOfCols</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pv</name> <operator>=</operator> <name>pf</name> <operator>+</operator> <name><name>pTSchema</name><operator>-&gt;</operator><name>flen</name></name></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><operator>(</operator><name>HAS_VALUE</name> <operator>|</operator> <name>HAS_NULL</name> <operator>|</operator> <name>HAS_NONE</name><operator>)</operator></expr>:</case>
        <expr_stmt><expr><name>pb</name> <operator>=</operator> <name><name>pRow</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>pf</name> <operator>=</operator> <name>pb</name> <operator>+</operator> <call><name>BIT2_SIZE</name><argument_list>(<argument><expr><name><name>pTSchema</name><operator>-&gt;</operator><name>numOfCols</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pv</name> <operator>=</operator> <name>pf</name> <operator>+</operator> <name><name>pTSchema</name><operator>-&gt;</operator><name>flen</name></name></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>

    <comment type="line">// build impl</comment>
    <while>while <condition>(<expr><name>pTColumn</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>pColVal</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pColVal</name><operator>-&gt;</operator><name>cid</name></name> <operator>==</operator> <name><name>pTColumn</name><operator>-&gt;</operator><name>colId</name></name></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><call><name>COL_VAL_IS_VALUE</name><argument_list>(<argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="line">// VALUE</comment>
            <expr_stmt><expr><call><name>ROW_SET_BITMAP</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>iTColumn</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ROW_BIT_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>pf</name> <operator>+</operator> <name><name>pTColumn</name><operator>-&gt;</operator><name>offset</name></name><operator>)</operator> <operator>=</operator> <name>nv</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>nv</name> <operator>+=</operator> <call><name>tPutU32v</name><argument_list>(<argument><expr><name>pv</name> <operator>+</operator> <name>nv</name></expr></argument>, <argument><expr><name><name>pColVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>nData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <if_stmt><if>if <condition>(<expr><name><name>pColVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>nData</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pv</name> <operator>+</operator> <name>nv</name></expr></argument>, <argument><expr><name><name>pColVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pColVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>nData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>nv</name> <operator>+=</operator> <name><name>pColVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>nData</name></name></expr>;</expr_stmt>
              </block_content>}</block></if></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
              <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pf</name> <operator>+</operator> <name><name>pTColumn</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pColVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>val</name></name></expr></argument>, <argument><expr><name><name>TYPE_BYTES</name><index>[<expr><name><name>pTColumn</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
          </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>COL_VAL_IS_NONE</name><argument_list>(<argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="line">// NONE</comment>
            <expr_stmt><expr><call><name>ROW_SET_BITMAP</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>iTColumn</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ROW_BIT_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>pf</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pf</name> <operator>+</operator> <name><name>pTColumn</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>TYPE_BYTES</name><index>[<expr><name><name>pTColumn</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// NULL</comment>
            <expr_stmt><expr><call><name>ROW_SET_BITMAP</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>iTColumn</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ROW_BIT_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>pf</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pf</name> <operator>+</operator> <name><name>pTColumn</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>TYPE_BYTES</name><index>[<expr><name><name>pTColumn</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
          </block_content>}</block></else></if_stmt>

          <expr_stmt><expr><name>pTColumn</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>++</operator><name>iTColumn</name> <operator>&lt;</operator> <name><name>pTSchema</name><operator>-&gt;</operator><name>numOfCols</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>pTSchema</name><operator>-&gt;</operator><name>columns</name></name> <operator>+</operator> <name>iTColumn</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
          <expr_stmt><expr><name>pColVal</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>++</operator><name>iColVal</name> <operator>&lt;</operator> <name>nColVal</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>SColVal</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>aColVal</name></expr></argument>, <argument><expr><name>iColVal</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pColVal</name><operator>-&gt;</operator><name>cid</name></name> <operator>&gt;</operator> <name><name>pTColumn</name><operator>-&gt;</operator><name>colId</name></name></expr>)</condition> <block>{<block_content>  <comment type="line">// NONE</comment>
          <expr_stmt><expr><call><name>ROW_SET_BITMAP</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>iTColumn</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ROW_BIT_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>pf</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pf</name> <operator>+</operator> <name><name>pTColumn</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>TYPE_BYTES</name><index>[<expr><name><name>pTColumn</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
          <expr_stmt><expr><name>pTColumn</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>++</operator><name>iTColumn</name> <operator>&lt;</operator> <name><name>pTSchema</name><operator>-&gt;</operator><name>numOfCols</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>pTSchema</name><operator>-&gt;</operator><name>columns</name></name> <operator>+</operator> <name>iTColumn</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>pColVal</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>++</operator><name>iColVal</name> <operator>&lt;</operator> <name>nColVal</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>SColVal</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>aColVal</name></expr></argument>, <argument><expr><name>iColVal</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// NONE</comment>
        <expr_stmt><expr><call><name>ROW_SET_BITMAP</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>iTColumn</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ROW_BIT_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>pf</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pf</name> <operator>+</operator> <name><name>pTColumn</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>TYPE_BYTES</name><index>[<expr><name><name>pTColumn</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>pTColumn</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>++</operator><name>iTColumn</name> <operator>&lt;</operator> <name><name>pTSchema</name><operator>-&gt;</operator><name>numOfCols</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>pTSchema</name><operator>-&gt;</operator><name>columns</name></name> <operator>+</operator> <name>iTColumn</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></else></if_stmt>

<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tRowGet</name><parameter_list>(<parameter><decl><type><name>SRow</name> <modifier>*</modifier></type><name>pRow</name></decl></parameter>, <parameter><decl><type><name>STSchema</name> <modifier>*</modifier></type><name>pTSchema</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>iCol</name></decl></parameter>, <parameter><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>pColVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>iCol</name> <operator>&lt;</operator> <name><name>pTSchema</name><operator>-&gt;</operator><name>numOfCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pRow</name><operator>-&gt;</operator><name>sver</name></name> <operator>==</operator> <name><name>pTSchema</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>STColumn</name> <modifier>*</modifier></type><name>pTColumn</name> <init>= <expr><name><name>pTSchema</name><operator>-&gt;</operator><name>columns</name></name> <operator>+</operator> <name>iCol</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>iCol</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pColVal</name><operator>-&gt;</operator><name>cid</name></name> <operator>=</operator> <name><name>pTColumn</name><operator>-&gt;</operator><name>colId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pColVal</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>pTColumn</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pColVal</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <name>CV_FLAG_VALUE</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pColVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>val</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRow</name><operator>-&gt;</operator><name>ts</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TSKEY</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pRow</name><operator>-&gt;</operator><name>flag</name></name> <operator>==</operator> <name>HAS_NONE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pColVal</name> <operator>=</operator> <call><name>COL_VAL_NONE</name><argument_list>(<argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pRow</name><operator>-&gt;</operator><name>flag</name></name> <operator>==</operator> <name>HAS_NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pColVal</name> <operator>=</operator> <call><name>COL_VAL_NULL</name><argument_list>(<argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pRow</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <literal type="number">0xf0</literal></expr>)</condition> <block>{<block_content>  <comment type="line">// KV Row</comment>
    <decl_stmt><decl><type><name>SKVIdx</name>  <modifier>*</modifier></type><name>pIdx</name> <init>= <expr><operator>(</operator><name>SKVIdx</name> <operator>*</operator><operator>)</operator><name><name>pRow</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pRow</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>KV_FLG_LIT</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pv</name> <operator>=</operator> <name><name>pIdx</name><operator>-&gt;</operator><name>idx</name></name> <operator>+</operator> <name><name>pIdx</name><operator>-&gt;</operator><name>nCol</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pRow</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>KV_FLG_MID</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pv</name> <operator>=</operator> <name><name>pIdx</name><operator>-&gt;</operator><name>idx</name></name> <operator>+</operator> <operator>(</operator><name><name>pIdx</name><operator>-&gt;</operator><name>nCol</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>pv</name> <operator>=</operator> <name><name>pIdx</name><operator>-&gt;</operator><name>idx</name></name> <operator>+</operator> <operator>(</operator><name><name>pIdx</name><operator>-&gt;</operator><name>nCol</name></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <decl_stmt><decl><type><name>int16_t</name></type> <name>lidx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int16_t</name></type> <name>ridx</name> <init>= <expr><name><name>pIdx</name><operator>-&gt;</operator><name>nCol</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>lidx</name> <operator>&lt;=</operator> <name>ridx</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int16_t</name></type>  <name>mid</name> <init>= <expr><operator>(</operator><name>lidx</name> <operator>+</operator> <name>ridx</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pRow</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>KV_FLG_LIT</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>pData</name> <operator>=</operator> <name>pv</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>pIdx</name><operator>-&gt;</operator><name>idx</name></name><operator>)</operator><index>[<expr><name>mid</name></expr>]</index></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pRow</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>KV_FLG_MID</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>pData</name> <operator>=</operator> <name>pv</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>pIdx</name><operator>-&gt;</operator><name>idx</name></name><operator>)</operator><index>[<expr><name>mid</name></expr>]</index></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>pData</name> <operator>=</operator> <name>pv</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name><name>pIdx</name><operator>-&gt;</operator><name>idx</name></name><operator>)</operator><index>[<expr><name>mid</name></expr>]</index></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <decl_stmt><decl><type><name>int16_t</name></type> <name>cid</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>pData</name> <operator>+=</operator> <call><name>tGetI16v</name><argument_list>(<argument><expr><name>pData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>TABS</name><argument_list>(<argument><expr><name>cid</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>pTColumn</name><operator>-&gt;</operator><name>colId</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>cid</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><operator>*</operator><name>pColVal</name> <operator>=</operator> <call><name>COL_VAL_NULL</name><argument_list>(<argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name><name>pColVal</name><operator>-&gt;</operator><name>cid</name></name> <operator>=</operator> <name><name>pTColumn</name><operator>-&gt;</operator><name>colId</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pColVal</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>pTColumn</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pColVal</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <name>CV_FLAG_VALUE</name></expr>;</expr_stmt>

          <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>pData</name> <operator>+=</operator> <call><name>tGetU32v</name><argument_list>(<argument><expr><name>pData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pColVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>nData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>pColVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>nData</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name><name>pColVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>pData</name></name> <operator>=</operator> <name>pData</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
              <expr_stmt><expr><name><name>pColVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>pData</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pColVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>val</name></name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return;</return>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>TABS</name><argument_list>(<argument><expr><name>cid</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>pTColumn</name><operator>-&gt;</operator><name>colId</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>lidx</name> <operator>=</operator> <name>mid</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>ridx</name> <operator>=</operator> <name>mid</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><operator>*</operator><name>pColVal</name> <operator>=</operator> <call><name>COL_VAL_NONE</name><argument_list>(<argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// Tuple Row</comment>
    <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type>  <name>bv</name> <init>= <expr><name>ROW_BIT_VALUE</name></expr></init></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name><name>pRow</name><operator>-&gt;</operator><name>flag</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>HAS_VALUE</name></expr>:</case>
        <expr_stmt><expr><name>pf</name> <operator>=</operator> <name><name>pRow</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>pv</name> <operator>=</operator> <name>pf</name> <operator>+</operator> <name><name>pTSchema</name><operator>-&gt;</operator><name>flen</name></name></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><operator>(</operator><name>HAS_NULL</name> <operator>|</operator> <name>HAS_NONE</name><operator>)</operator></expr>:</case>
        <expr_stmt><expr><name>bv</name> <operator>=</operator> <call><name>GET_BIT1</name><argument_list>(<argument><expr><name><name>pRow</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>iCol</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><operator>(</operator><name>HAS_VALUE</name> <operator>|</operator> <name>HAS_NONE</name><operator>)</operator></expr>:</case>
        <expr_stmt><expr><name>bv</name> <operator>=</operator> <call><name>GET_BIT1</name><argument_list>(<argument><expr><name><name>pRow</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>iCol</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>bv</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>bv</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>pf</name> <operator>=</operator> <name><name>pRow</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <call><name>BIT1_SIZE</name><argument_list>(<argument><expr><name><name>pTSchema</name><operator>-&gt;</operator><name>numOfCols</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pv</name> <operator>=</operator> <name>pf</name> <operator>+</operator> <name><name>pTSchema</name><operator>-&gt;</operator><name>flen</name></name></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><operator>(</operator><name>HAS_VALUE</name> <operator>|</operator> <name>HAS_NULL</name><operator>)</operator></expr>:</case>
        <expr_stmt><expr><name>bv</name> <operator>=</operator> <call><name>GET_BIT1</name><argument_list>(<argument><expr><name><name>pRow</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>iCol</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>bv</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>pf</name> <operator>=</operator> <name><name>pRow</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <call><name>BIT1_SIZE</name><argument_list>(<argument><expr><name><name>pTSchema</name><operator>-&gt;</operator><name>numOfCols</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pv</name> <operator>=</operator> <name>pf</name> <operator>+</operator> <name><name>pTSchema</name><operator>-&gt;</operator><name>flen</name></name></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><operator>(</operator><name>HAS_VALUE</name> <operator>|</operator> <name>HAS_NULL</name> <operator>|</operator> <name>HAS_NONE</name><operator>)</operator></expr>:</case>
        <expr_stmt><expr><name>bv</name> <operator>=</operator> <call><name>GET_BIT2</name><argument_list>(<argument><expr><name><name>pRow</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>iCol</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pf</name> <operator>=</operator> <name><name>pRow</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <call><name>BIT2_SIZE</name><argument_list>(<argument><expr><name><name>pTSchema</name><operator>-&gt;</operator><name>numOfCols</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pv</name> <operator>=</operator> <name>pf</name> <operator>+</operator> <name><name>pTSchema</name><operator>-&gt;</operator><name>flen</name></name></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>

    <if_stmt><if>if <condition>(<expr><name>bv</name> <operator>==</operator> <name>ROW_BIT_NONE</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pColVal</name> <operator>=</operator> <call><name>COL_VAL_NONE</name><argument_list>(<argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>bv</name> <operator>==</operator> <name>ROW_BIT_NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pColVal</name> <operator>=</operator> <call><name>COL_VAL_NULL</name><argument_list>(<argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pColVal</name><operator>-&gt;</operator><name>cid</name></name> <operator>=</operator> <name><name>pTColumn</name><operator>-&gt;</operator><name>colId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pColVal</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>pTColumn</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pColVal</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <name>CV_FLAG_VALUE</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name> <init>= <expr><name>pv</name> <operator>+</operator> <operator>*</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>pf</name> <operator>+</operator> <name><name>pTColumn</name><operator>-&gt;</operator><name>offset</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>pData</name> <operator>+=</operator> <call><name>tGetU32v</name><argument_list>(<argument><expr><name>pData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pColVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>nData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pColVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>nData</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pColVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>pData</name></name> <operator>=</operator> <name>pData</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>pColVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>pData</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pColVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>val</name></name></expr></argument>, <argument><expr><name>pv</name> <operator>+</operator> <name><name>pTColumn</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="line">// SRowIter ========================================</comment>
<struct>struct <name>SRowIter</name> <block>{
  <decl_stmt><decl><type><name>SRow</name>     <modifier>*</modifier></type><name>pRow</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STSchema</name> <modifier>*</modifier></type><name>pTSchema</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>iTColumn</name></decl>;</decl_stmt>
  <union>union <block>{
    <struct>struct <block>{  <comment type="line">// kv</comment>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>iCol</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SKVIdx</name> <modifier>*</modifier></type><name>pIdx</name></decl>;</decl_stmt>
    }</block>;</struct>
    <struct>struct <block>{  <comment type="line">// tuple</comment>
      <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pb</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pf</name></decl>;</decl_stmt>
    }</block>;</struct>
    <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pv</name></decl>;</decl_stmt>
  }</block>;</union>

  <decl_stmt><decl><type><name>SColVal</name></type> <name>cv</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>int32_t</name></type> <name>tRowIterOpen</name><parameter_list>(<parameter><decl><type><name>SRow</name> <modifier>*</modifier></type><name>pRow</name></decl></parameter>, <parameter><decl><type><name>STSchema</name> <modifier>*</modifier></type><name>pTSchema</name></decl></parameter>, <parameter><decl><type><name>SRowIter</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppIter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pRow</name><operator>-&gt;</operator><name>sver</name></name> <operator>==</operator> <name><name>pTSchema</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SRowIter</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pIter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pIter</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pRow</name></name> <operator>=</operator> <name>pRow</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pTSchema</name></name> <operator>=</operator> <name>pTSchema</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iTColumn</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pRow</name><operator>-&gt;</operator><name>flag</name></name> <operator>==</operator> <name>HAS_NONE</name> <operator>||</operator> <name><name>pRow</name><operator>-&gt;</operator><name>flag</name></name> <operator>==</operator> <name>HAS_NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pRow</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <literal type="number">0xf0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iCol</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pIdx</name></name> <operator>=</operator> <operator>(</operator><name>SKVIdx</name> <operator>*</operator><operator>)</operator><name><name>pRow</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pRow</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>KV_FLG_LIT</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pv</name></name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>pIdx</name><operator>-&gt;</operator><name>idx</name></name> <operator>+</operator> <name><name>pIter</name><operator>-&gt;</operator><name>pIdx</name><operator>-&gt;</operator><name>nCol</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pRow</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>KV_FLG_MID</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pv</name></name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>pIdx</name><operator>-&gt;</operator><name>idx</name></name> <operator>+</operator> <operator>(</operator><name><name>pIter</name><operator>-&gt;</operator><name>pIdx</name><operator>-&gt;</operator><name>nCol</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pv</name></name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>pIdx</name><operator>-&gt;</operator><name>idx</name></name> <operator>+</operator> <operator>(</operator><name><name>pIter</name><operator>-&gt;</operator><name>pIdx</name><operator>-&gt;</operator><name>nCol</name></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <switch>switch <condition>(<expr><name><name>pRow</name><operator>-&gt;</operator><name>flag</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><operator>(</operator><name>HAS_NULL</name> <operator>|</operator> <name>HAS_NONE</name><operator>)</operator></expr>:</case>
        <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pb</name></name> <operator>=</operator> <name><name>pRow</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>HAS_VALUE</name></expr>:</case>
        <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pf</name></name> <operator>=</operator> <name><name>pRow</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pv</name></name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>pf</name></name> <operator>+</operator> <name><name>pTSchema</name><operator>-&gt;</operator><name>flen</name></name></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><operator>(</operator><name>HAS_VALUE</name> <operator>|</operator> <name>HAS_NONE</name><operator>)</operator></expr>:</case>
      <case>case <expr><operator>(</operator><name>HAS_VALUE</name> <operator>|</operator> <name>HAS_NULL</name><operator>)</operator></expr>:</case>
        <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pb</name></name> <operator>=</operator> <name><name>pRow</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pf</name></name> <operator>=</operator> <name><name>pRow</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <call><name>BIT1_SIZE</name><argument_list>(<argument><expr><name><name>pTSchema</name><operator>-&gt;</operator><name>numOfCols</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pv</name></name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>pf</name></name> <operator>+</operator> <name><name>pTSchema</name><operator>-&gt;</operator><name>flen</name></name></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><operator>(</operator><name>HAS_VALUE</name> <operator>|</operator> <name>HAS_NULL</name> <operator>|</operator> <name>HAS_NONE</name><operator>)</operator></expr>:</case>
        <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pb</name></name> <operator>=</operator> <name><name>pRow</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pf</name></name> <operator>=</operator> <name><name>pRow</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <call><name>BIT2_SIZE</name><argument_list>(<argument><expr><name><name>pTSchema</name><operator>-&gt;</operator><name>numOfCols</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pv</name></name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>pf</name></name> <operator>+</operator> <name><name>pTSchema</name><operator>-&gt;</operator><name>flen</name></name></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></else></if_stmt>

<label><name>_exit</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>ppIter</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pIter</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>ppIter</name> <operator>=</operator> <name>pIter</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tRowIterClose</name><parameter_list>(<parameter><decl><type><name>SRowIter</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppIter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SRowIter</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><operator>*</operator><name>ppIter</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pIter</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppIter</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SColVal</name> <modifier>*</modifier></type><name>tRowIterNext</name><parameter_list>(<parameter><decl><type><name>SRowIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pIter</name><operator>-&gt;</operator><name>iTColumn</name></name> <operator>&gt;=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>pTSchema</name><operator>-&gt;</operator><name>numOfCols</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STColumn</name> <modifier>*</modifier></type><name>pTColumn</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>pTSchema</name><operator>-&gt;</operator><name>columns</name></name> <operator>+</operator> <name><name>pIter</name><operator>-&gt;</operator><name>iTColumn</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// timestamp</comment>
  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name><name>pIter</name><operator>-&gt;</operator><name>iTColumn</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>cv</name><operator>.</operator><name>cid</name></name> <operator>=</operator> <name><name>pTColumn</name><operator>-&gt;</operator><name>colId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>cv</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>pTColumn</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>cv</name><operator>.</operator><name>flag</name></name> <operator>=</operator> <name>CV_FLAG_VALUE</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>cv</name><operator>.</operator><name>value</name><operator>.</operator><name>val</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>pRow</name><operator>-&gt;</operator><name>ts</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TSKEY</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pIter</name><operator>-&gt;</operator><name>pRow</name><operator>-&gt;</operator><name>flag</name></name> <operator>==</operator> <name>HAS_NONE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>cv</name></name> <operator>=</operator> <call><name>COL_VAL_NONE</name><argument_list>(<argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pIter</name><operator>-&gt;</operator><name>pRow</name><operator>-&gt;</operator><name>flag</name></name> <operator>==</operator> <name>HAS_NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>cv</name></name> <operator>=</operator> <call><name>COL_VAL_NULL</name><argument_list>(<argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pIter</name><operator>-&gt;</operator><name>pRow</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <literal type="number">0xf0</literal></expr>)</condition> <block>{<block_content>  <comment type="line">// KV</comment>
    <if_stmt><if>if <condition>(<expr><name><name>pIter</name><operator>-&gt;</operator><name>iCol</name></name> <operator>&lt;</operator> <name><name>pIter</name><operator>-&gt;</operator><name>pIdx</name><operator>-&gt;</operator><name>nCol</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pIter</name><operator>-&gt;</operator><name>pRow</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>KV_FLG_LIT</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>pData</name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>pv</name></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>pIter</name><operator>-&gt;</operator><name>pIdx</name><operator>-&gt;</operator><name>idx</name></name><operator>)</operator><index>[<expr><name><name>pIter</name><operator>-&gt;</operator><name>iCol</name></name></expr>]</index></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pIter</name><operator>-&gt;</operator><name>pRow</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>KV_FLG_MID</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>pData</name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>pv</name></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>pIter</name><operator>-&gt;</operator><name>pIdx</name><operator>-&gt;</operator><name>idx</name></name><operator>)</operator><index>[<expr><name><name>pIter</name><operator>-&gt;</operator><name>iCol</name></name></expr>]</index></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>pData</name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>pv</name></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name><name>pIter</name><operator>-&gt;</operator><name>pIdx</name><operator>-&gt;</operator><name>idx</name></name><operator>)</operator><index>[<expr><name><name>pIter</name><operator>-&gt;</operator><name>iCol</name></name></expr>]</index></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <decl_stmt><decl><type><name>int16_t</name></type> <name>cid</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>pData</name> <operator>+=</operator> <call><name>tGetI16v</name><argument_list>(<argument><expr><name>pData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>TABS</name><argument_list>(<argument><expr><name>cid</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>pTColumn</name><operator>-&gt;</operator><name>colId</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>cid</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>cv</name></name> <operator>=</operator> <call><name>COL_VAL_NULL</name><argument_list>(<argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>cv</name><operator>.</operator><name>cid</name></name> <operator>=</operator> <name><name>pTColumn</name><operator>-&gt;</operator><name>colId</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>cv</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>pTColumn</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>cv</name><operator>.</operator><name>flag</name></name> <operator>=</operator> <name>CV_FLAG_VALUE</name></expr>;</expr_stmt>

          <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>pData</name> <operator>+=</operator> <call><name>tGetU32v</name><argument_list>(<argument><expr><name>pData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>cv</name><operator>.</operator><name>value</name><operator>.</operator><name>nData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>pIter</name><operator>-&gt;</operator><name>cv</name><operator>.</operator><name>value</name><operator>.</operator><name>nData</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>cv</name><operator>.</operator><name>value</name><operator>.</operator><name>pData</name></name> <operator>=</operator> <name>pData</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
              <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>cv</name><operator>.</operator><name>value</name><operator>.</operator><name>pData</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>cv</name><operator>.</operator><name>value</name><operator>.</operator><name>val</name></name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iCol</name></name><operator>++</operator></expr>;</expr_stmt>
        <goto>goto <name>_exit</name>;</goto>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>TABS</name><argument_list>(<argument><expr><name>cid</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>pTColumn</name><operator>-&gt;</operator><name>colId</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>cv</name></name> <operator>=</operator> <call><name>COL_VAL_NONE</name><argument_list>(<argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>_exit</name>;</goto>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>cv</name></name> <operator>=</operator> <call><name>COL_VAL_NONE</name><argument_list>(<argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_exit</name>;</goto>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// Tuple</comment>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>bv</name> <init>= <expr><name>ROW_BIT_VALUE</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pIter</name><operator>-&gt;</operator><name>pb</name></name></expr>)</condition> <block>{<block_content>
      <switch>switch <condition>(<expr><name><name>pIter</name><operator>-&gt;</operator><name>pRow</name><operator>-&gt;</operator><name>flag</name></name></expr>)</condition> <block>{<block_content>
        <case>case <expr><operator>(</operator><name>HAS_NULL</name> <operator>|</operator> <name>HAS_NONE</name><operator>)</operator></expr>:</case>
          <expr_stmt><expr><name>bv</name> <operator>=</operator> <call><name>GET_BIT1</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>iTColumn</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><operator>(</operator><name>HAS_VALUE</name> <operator>|</operator> <name>HAS_NONE</name><operator>)</operator></expr>:</case>
          <expr_stmt><expr><name>bv</name> <operator>=</operator> <call><name>GET_BIT1</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>iTColumn</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>bv</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>bv</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
          <break>break;</break>
        <case>case <expr><operator>(</operator><name>HAS_VALUE</name> <operator>|</operator> <name>HAS_NULL</name><operator>)</operator></expr>:</case>
          <expr_stmt><expr><name>bv</name> <operator>=</operator> <call><name>GET_BIT1</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>iTColumn</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><operator>(</operator><name>HAS_VALUE</name> <operator>|</operator> <name>HAS_NULL</name> <operator>|</operator> <name>HAS_NONE</name><operator>)</operator></expr>:</case>
          <expr_stmt><expr><name>bv</name> <operator>=</operator> <call><name>GET_BIT2</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>iTColumn</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <default>default:</default>
          <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
      </block_content>}</block></switch>

      <if_stmt><if>if <condition>(<expr><name>bv</name> <operator>==</operator> <name>ROW_BIT_NONE</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>cv</name></name> <operator>=</operator> <call><name>COL_VAL_NONE</name><argument_list>(<argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>_exit</name>;</goto>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>bv</name> <operator>==</operator> <name>ROW_BIT_NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>cv</name></name> <operator>=</operator> <call><name>COL_VAL_NULL</name><argument_list>(<argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>_exit</name>;</goto>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>cv</name><operator>.</operator><name>cid</name></name> <operator>=</operator> <name><name>pTColumn</name><operator>-&gt;</operator><name>colId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>cv</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>pTColumn</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>cv</name><operator>.</operator><name>flag</name></name> <operator>=</operator> <name>CV_FLAG_VALUE</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>pv</name></name> <operator>+</operator> <operator>*</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pIter</name><operator>-&gt;</operator><name>pf</name></name> <operator>+</operator> <name><name>pTColumn</name><operator>-&gt;</operator><name>offset</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>pData</name> <operator>+=</operator> <call><name>tGetU32v</name><argument_list>(<argument><expr><name>pData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>cv</name><operator>.</operator><name>value</name><operator>.</operator><name>nData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pIter</name><operator>-&gt;</operator><name>cv</name><operator>.</operator><name>value</name><operator>.</operator><name>nData</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>cv</name><operator>.</operator><name>value</name><operator>.</operator><name>pData</name></name> <operator>=</operator> <name>pData</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>cv</name><operator>.</operator><name>value</name><operator>.</operator><name>pData</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>cv</name><operator>.</operator><name>value</name><operator>.</operator><name>val</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pv</name></name> <operator>+</operator> <name><name>pTColumn</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></else></if_stmt>

<label><name>_exit</name>:</label>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iTColumn</name></name><operator>++</operator></expr>;</expr_stmt>
  <return>return <expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>cv</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// STSchema ========================================</comment>

<comment type="line">// STag ========================================</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>tTagValCmprFn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>STagVal</name> <operator>*</operator><operator>)</operator><name>p1</name><operator>)</operator><operator>-&gt;</operator><name>cid</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>STagVal</name> <operator>*</operator><operator>)</operator><name>p2</name><operator>)</operator><operator>-&gt;</operator><name>cid</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator><name>STagVal</name> <operator>*</operator><operator>)</operator><name>p1</name><operator>)</operator><operator>-&gt;</operator><name>cid</name> <operator>&gt;</operator> <operator>(</operator><operator>(</operator><name>STagVal</name> <operator>*</operator><operator>)</operator><name>p2</name><operator>)</operator><operator>-&gt;</operator><name>cid</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>tTagValJsonCmprFn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>STagVal</name> <operator>*</operator><operator>)</operator><name>p1</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><name>pKey</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>STagVal</name> <operator>*</operator><operator>)</operator><name>p2</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index><operator>.</operator><name>pKey</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>debugPrintTagVal</name><parameter_list>(<parameter><decl><type><name>int8_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>vlen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>ln</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_DATA_TYPE_JSON</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_VARCHAR</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_NCHAR</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type> <name><name>tmpVal</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>tmpVal</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><ternary><condition><expr><name>vlen</name> <operator>&gt;</operator> <literal type="number">31</literal></expr> ?</condition><then> <expr><literal type="number">31</literal></expr> </then><else>: <expr><name>vlen</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s:%d type:%d vlen:%d, val:\"%s\"\n"</literal></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>ln</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>type</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>, <argument><expr><name>tmpVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_FLOAT</name></expr>:</case>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s:%d type:%d vlen:%d, val:%f\n"</literal></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>ln</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>type</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>:</case>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s:%d type:%d vlen:%d, val:%lf\n"</literal></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>ln</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>type</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_BOOL</name></expr>:</case>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s:%d type:%d vlen:%d, val:%"</literal> <name>PRIu8</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>ln</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>type</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_TINYINT</name></expr>:</case>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s:%d type:%d vlen:%d, val:%"</literal> <name>PRIi8</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>ln</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>type</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int8_t</name> <operator>*</operator><operator>)</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_SMALLINT</name></expr>:</case>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s:%d type:%d vlen:%d, val:%"</literal> <name>PRIi16</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>ln</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>type</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_INT</name></expr>:</case>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s:%d type:%d vlen:%d, val:%"</literal> <name>PRIi32</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>ln</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>type</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>:</case>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s:%d type:%d vlen:%d, val:%"</literal> <name>PRIi64</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>ln</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>type</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>:</case>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s:%d type:%d vlen:%d, val:%"</literal> <name>PRIi64</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>ln</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>type</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_UTINYINT</name></expr>:</case>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s:%d type:%d vlen:%d, val:%"</literal> <name>PRIu8</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>ln</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>type</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_USMALLINT</name></expr>:</case>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s:%d type:%d vlen:%d, val:%"</literal> <name>PRIu16</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>ln</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>type</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_UINT</name></expr>:</case>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s:%d type:%d vlen:%d, val:%"</literal> <name>PRIu32</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>ln</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>type</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_UBIGINT</name></expr>:</case>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s:%d type:%d vlen:%d, val:%"</literal> <name>PRIu64</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>ln</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>type</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_NULL</name></expr>:</case>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s:%d type:%d vlen:%d, val:%"</literal> <name>PRIi8</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>ln</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>type</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int8_t</name> <operator>*</operator><operator>)</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>debugPrintSTag</name><parameter_list>(<parameter><decl><type><name>STag</name> <modifier>*</modifier></type><name>pTag</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>ln</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int8_t</name></type>   <name>isJson</name> <init>= <expr><name><name>pTag</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>TD_TAG_JSON</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type>   <name>isLarge</name> <init>= <expr><name><name>pTag</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>TD_TAG_LARGE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int16_t</name></type>  <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>isLarge</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name><name>pTag</name><operator>-&gt;</operator><name>idx</name></name><operator>)</operator><index>[<expr><name><name>pTag</name><operator>-&gt;</operator><name>nTag</name></name></expr>]</index></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pTag</name><operator>-&gt;</operator><name>idx</name><index>[<expr><name><name>pTag</name><operator>-&gt;</operator><name>nTag</name></name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s:%d &gt;&gt;&gt; STAG === %s:%s, len: %d, nTag: %d, sver:%d\n"</literal></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>ln</name></expr></argument>, <argument><expr><ternary><condition><expr><name>isJson</name></expr> ?</condition><then> <expr><literal type="string">"json"</literal></expr> </then><else>: <expr><literal type="string">"normal"</literal></expr></else></ternary></expr></argument>,
         <argument><expr><ternary><condition><expr><name>isLarge</name></expr> ?</condition><then> <expr><literal type="string">"large"</literal></expr> </then><else>: <expr><literal type="string">"small"</literal></expr></else></ternary></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>pTag</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>pTag</name><operator>-&gt;</operator><name>nTag</name></name></expr></argument>, <argument><expr><name><name>pTag</name><operator>-&gt;</operator><name>ver</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>uint16_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>pTag</name><operator>-&gt;</operator><name>nTag</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>isLarge</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name><name>pTag</name><operator>-&gt;</operator><name>idx</name></name><operator>)</operator><index>[<expr><name>n</name></expr>]</index></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>pTag</name><operator>-&gt;</operator><name>idx</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <decl_stmt><decl><type><name>STagVal</name></type> <name>tagVal</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>isJson</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>tagVal</name><operator>.</operator><name>pKey</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>tagVal</name><operator>.</operator><name>cid</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s:%d loop[%d-%d] offset=%d\n"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name><name>pTag</name><operator>-&gt;</operator><name>nTag</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>n</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tGetTagVal</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tagVal</name></expr></argument>, <argument><expr><name>isJson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>tagVal</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>debugPrintTagVal</name><argument_list>(<argument><expr><name><name>tagVal</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>tagVal</name><operator>.</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>tagVal</name><operator>.</operator><name>nData</name></name></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>debugPrintTagVal</name><argument_list>(<argument><expr><name><name>tagVal</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tagVal</name><operator>.</operator><name>i64</name></name></expr></argument>, <argument><expr><name><name>tDataTypes</name><index>[<expr><name><name>tagVal</name><operator>.</operator><name>type</name></name></expr>]</index></name><operator>.</operator><name>bytes</name></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tPutTagVal</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>STagVal</name> <modifier>*</modifier></type><name>pTagVal</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>isJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// key</comment>
  <if_stmt><if>if <condition>(<expr><name>isJson</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutCStr</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pTagVal</name><operator>-&gt;</operator><name>pKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI16v</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pTagVal</name><operator>-&gt;</operator><name>cid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="line">// type</comment>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI8</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pTagVal</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// value</comment>
  <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pTagVal</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutBinary</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pTagVal</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pTagVal</name><operator>-&gt;</operator><name>nData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>+=</operator> <name><name>tDataTypes</name><index>[<expr><name><name>pTagVal</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pTagVal</name><operator>-&gt;</operator><name>i64</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>tDataTypes</name><index>[<expr><name><name>pTagVal</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>.</operator><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tGetTagVal</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>STagVal</name> <modifier>*</modifier></type><name>pTagVal</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>isJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// key</comment>
  <if_stmt><if>if <condition>(<expr><name>isJson</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetCStr</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTagVal</name><operator>-&gt;</operator><name>pKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI16v</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTagVal</name><operator>-&gt;</operator><name>cid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="line">// type</comment>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI8</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTagVal</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// value</comment>
  <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pTagVal</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetBinary</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTagVal</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTagVal</name><operator>-&gt;</operator><name>nData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pTagVal</name><operator>-&gt;</operator><name>i64</name></name><operator>)</operator></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><name><name>tDataTypes</name><index>[<expr><name><name>pTagVal</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>.</operator><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>+=</operator> <name><name>tDataTypes</name><index>[<expr><name><name>pTagVal</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>tTagIsJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pTag</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>STag</name> <operator>*</operator><operator>)</operator><name>pTag</name><operator>)</operator><operator>-&gt;</operator><name>flags</name> <operator>&amp;</operator> <name>TD_TAG_JSON</name><operator>)</operator></expr>;</return> </block_content>}</block></function>

<function><type><name>bool</name></type> <name>tTagIsJsonNull</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STag</name>  <modifier>*</modifier></type><name>pTag</name> <init>= <expr><operator>(</operator><name>STag</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type> <name>isJson</name> <init>= <expr><call><name>tTagIsJson</name><argument_list>(<argument><expr><name>pTag</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isJson</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><operator>(</operator><operator>(</operator><name>STag</name> <operator>*</operator><operator>)</operator><name>data</name><operator>)</operator><operator>-&gt;</operator><name>nTag</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tTagNew</name><parameter_list>(<parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pArray</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>isJson</name></decl></parameter>, <parameter><decl><type><name>STag</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppTag</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int16_t</name></type>  <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int16_t</name></type>  <name>nTag</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>szTag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type>   <name>isLarge</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// sort</comment>
  <if_stmt><if>if <condition>(<expr><name>isJson</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosSort</name><argument_list>(<argument><expr><name><name>pArray</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name>nTag</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STagVal</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>tTagValJsonCmprFn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>taosSort</name><argument_list>(<argument><expr><name><name>pArray</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name>nTag</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STagVal</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>tTagValCmprFn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="line">// get size</comment>
  <for>for <control>(<init><decl><type><name>int16_t</name></type> <name>iTag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iTag</name> <operator>&lt;</operator> <name>nTag</name></expr>;</condition> <incr><expr><name>iTag</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>szTag</name> <operator>+=</operator> <call><name>tPutTagVal</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>STagVal</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>iTag</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>isJson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if <condition>(<expr><name>szTag</name> <operator>&lt;=</operator> <name>INT8_MAX</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>szTag</name> <operator>=</operator> <name>szTag</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>STag</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int8_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nTag</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>szTag</name> <operator>=</operator> <name>szTag</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>STag</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nTag</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>isLarge</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>szTag</name> <operator>&lt;=</operator> <name>INT16_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// build tag</comment>
  <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ppTag</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>STag</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>szTag</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>ppTag</name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>ppTag</name><operator>)</operator><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>isJson</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>ppTag</name><operator>)</operator><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>TD_TAG_JSON</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>isLarge</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>ppTag</name><operator>)</operator><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>TD_TAG_LARGE</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>ppTag</name><operator>)</operator><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>szTag</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>ppTag</name><operator>)</operator><operator>-&gt;</operator><name>nTag</name></name> <operator>=</operator> <name>nTag</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>ppTag</name><operator>)</operator><operator>-&gt;</operator><name>ver</name></name> <operator>=</operator> <name>version</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>isLarge</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name><operator>(</operator><operator>*</operator><name>ppTag</name><operator>)</operator><operator>-&gt;</operator><name>idx</name></name><operator>)</operator><index>[<expr><name>nTag</name></expr>]</index></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>ppTag</name><operator>)</operator><operator>-&gt;</operator><name>idx</name></name><index>[<expr><name>nTag</name></expr>]</index></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int16_t</name></type> <name>iTag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iTag</name> <operator>&lt;</operator> <name>nTag</name></expr>;</condition> <incr><expr><name>iTag</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>isLarge</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>(</operator><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name><operator>(</operator><operator>*</operator><name>ppTag</name><operator>)</operator><operator>-&gt;</operator><name>idx</name></name><operator>)</operator><index>[<expr><name>iTag</name></expr>]</index> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>ppTag</name><operator>)</operator><operator>-&gt;</operator><name>idx</name></name><index>[<expr><name>iTag</name></expr>]</index> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutTagVal</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>(</operator><name>STagVal</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>iTag</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>isJson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TD_DEBUG_PRINT_TAG</name></cpp:ifdef>
  <expr_stmt><expr><call><name>debugPrintSTag</name><argument_list>(<argument><expr><operator>*</operator><name>ppTag</name></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tTagFree</name><parameter_list>(<parameter><decl><type><name>STag</name> <modifier>*</modifier></type><name>pTag</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pTag</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pTag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>tTagValToData</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>STagVal</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name>  <modifier>*</modifier></type><name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type> <name>typeBytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>isJson</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>typeBytes</name> <operator>=</operator> <name>CHAR_BYTES</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>typeBytes</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <name><name>value</name><operator>-&gt;</operator><name>nData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>isJson</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <name><name>value</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>varDataLen</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <name>typeBytes</name></expr></argument>)</argument_list></call> <operator>=</operator> <name><name>value</name><operator>-&gt;</operator><name>nData</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <name>typeBytes</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>value</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>value</name><operator>-&gt;</operator><name>nData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>value</name><operator>-&gt;</operator><name>i64</name></name><operator>)</operator><operator>)</operator> <operator>-</operator> <name>typeBytes</name></expr>;</expr_stmt>  <comment type="line">// json with type</comment>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>tTagGet</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>STag</name> <modifier>*</modifier></type><name>pTag</name></decl></parameter>, <parameter><decl><type><name>STagVal</name> <modifier>*</modifier></type><name>pTagVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pTag</name> <operator>||</operator> <operator>!</operator><name>pTagVal</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int16_t</name></type>  <name>lidx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int16_t</name></type>  <name>ridx</name> <init>= <expr><name><name>pTag</name><operator>-&gt;</operator><name>nTag</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int16_t</name></type>  <name>midx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type>   <name>isJson</name> <init>= <expr><name><name>pTag</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>TD_TAG_JSON</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type>   <name>isLarge</name> <init>= <expr><name><name>pTag</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>TD_TAG_LARGE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int16_t</name></type>  <name>offset</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STagVal</name></type>  <name>tv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>      <name>c</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>isLarge</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name><name>pTag</name><operator>-&gt;</operator><name>idx</name></name><operator>)</operator><index>[<expr><name><name>pTag</name><operator>-&gt;</operator><name>nTag</name></name></expr>]</index></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pTag</name><operator>-&gt;</operator><name>idx</name><index>[<expr><name><name>pTag</name><operator>-&gt;</operator><name>nTag</name></name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>pTagVal</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTagVal</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTagVal</name><operator>-&gt;</operator><name>nData</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>lidx</name> <operator>&lt;=</operator> <name>ridx</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>midx</name> <operator>=</operator> <operator>(</operator><name>lidx</name> <operator>+</operator> <name>ridx</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>isLarge</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name><name>pTag</name><operator>-&gt;</operator><name>idx</name></name><operator>)</operator><index>[<expr><name>midx</name></expr>]</index></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>pTag</name><operator>-&gt;</operator><name>idx</name><index>[<expr><name>midx</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>tGetTagVal</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>isJson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>isJson</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>tTagValJsonCmprFn</name><argument_list>(<argument><expr><name>pTagVal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>tTagValCmprFn</name><argument_list>(<argument><expr><name>pTagVal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>ridx</name> <operator>=</operator> <name>midx</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>lidx</name> <operator>=</operator> <name>midx</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pTagVal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tEncodeTag</name><parameter_list>(<parameter><decl><type><name>SEncoder</name> <modifier>*</modifier></type><name>pEncoder</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>STag</name> <modifier>*</modifier></type><name>pTag</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>tEncodeBinary</name><argument_list>(<argument><expr><name>pEncoder</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name>pTag</name></expr></argument>, <argument><expr><name><name>pTag</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tDecodeTag</name><parameter_list>(<parameter><decl><type><name>SDecoder</name> <modifier>*</modifier></type><name>pDecoder</name></decl></parameter>, <parameter><decl><type><name>STag</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppTag</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>tDecodeBinary</name><argument_list>(<argument><expr><name>pDecoder</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>ppTag</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tTagToValArray</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>STag</name> <modifier>*</modifier></type><name>pTag</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppArray</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STagVal</name></type>  <name>tv</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type>   <name>isLarge</name> <init>= <expr><name><name>pTag</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>TD_TAG_LARGE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int16_t</name></type>  <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>isLarge</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name><name>pTag</name><operator>-&gt;</operator><name>idx</name></name><operator>)</operator><index>[<expr><name><name>pTag</name><operator>-&gt;</operator><name>nTag</name></name></expr>]</index></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pTag</name><operator>-&gt;</operator><name>idx</name><index>[<expr><name><name>pTag</name><operator>-&gt;</operator><name>nTag</name></name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ppArray</name><operator>)</operator> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name><name>pTag</name><operator>-&gt;</operator><name>nTag</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STagVal</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>ppArray</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int16_t</name></type> <name>iTag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iTag</name> <operator>&lt;</operator> <name><name>pTag</name><operator>-&gt;</operator><name>nTag</name></name></expr>;</condition> <incr><expr><name>iTag</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>isLarge</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name><name>pTag</name><operator>-&gt;</operator><name>idx</name></name><operator>)</operator><index>[<expr><name>iTag</name></expr>]</index></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>pTag</name><operator>-&gt;</operator><name>idx</name><index>[<expr><name>iTag</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>tGetTagVal</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name><name>pTag</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>TD_TAG_JSON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><operator>*</operator><name>ppArray</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tTagSetCid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>STag</name> <modifier>*</modifier></type><name>pTag</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>iTag</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>cid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type>   <name>isLarge</name> <init>= <expr><name><name>pTag</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>TD_TAG_LARGE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int16_t</name></type>  <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>isLarge</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name><name>pTag</name><operator>-&gt;</operator><name>idx</name></name><operator>)</operator><index>[<expr><name><name>pTag</name><operator>-&gt;</operator><name>nTag</name></name></expr>]</index></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pTag</name><operator>-&gt;</operator><name>idx</name><index>[<expr><name><name>pTag</name><operator>-&gt;</operator><name>nTag</name></name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>isLarge</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name><name>pTag</name><operator>-&gt;</operator><name>idx</name></name><operator>)</operator><index>[<expr><name>iTag</name></expr>]</index></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>pTag</name><operator>-&gt;</operator><name>idx</name><index>[<expr><name>iTag</name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>tPutI16v</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>cid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>  <comment type="line">// ===================================================================================================================</comment>
<function><type><name>int</name></type> <name>tdInitTSchemaBuilder</name><parameter_list>(<parameter><decl><type><name>STSchemaBuilder</name> <modifier>*</modifier></type><name>pBuilder</name></decl></parameter>, <parameter><decl><type><name>schema_ver_t</name></type> <name>version</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pBuilder</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>tCols</name></name> <operator>=</operator> <literal type="number">256</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>columns</name></name> <operator>=</operator> <operator>(</operator><name>STColumn</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STColumn</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>pBuilder</name><operator>-&gt;</operator><name>tCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pBuilder</name><operator>-&gt;</operator><name>columns</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>tdResetTSchemaBuilder</name><argument_list>(<argument><expr><name>pBuilder</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tdDestroyTSchemaBuilder</name><parameter_list>(<parameter><decl><type><name>STSchemaBuilder</name> <modifier>*</modifier></type><name>pBuilder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pBuilder</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>columns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tdResetTSchemaBuilder</name><parameter_list>(<parameter><decl><type><name>STSchemaBuilder</name> <modifier>*</modifier></type><name>pBuilder</name></decl></parameter>, <parameter><decl><type><name>schema_ver_t</name></type> <name>version</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nCols</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>tlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>flen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name>version</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tdAddColToSchema</name><parameter_list>(<parameter><decl><type><name>STSchemaBuilder</name> <modifier>*</modifier></type><name>pBuilder</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>col_id_t</name></type> <name>colId</name></decl></parameter>, <parameter><decl><type><name>col_bytes_t</name></type> <name>bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isValidDataType</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nCols</name></name> <operator>&gt;=</operator> <name><name>pBuilder</name><operator>-&gt;</operator><name>tCols</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>tCols</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>STColumn</name> <modifier>*</modifier></type><name>columns</name> <init>= <expr><operator>(</operator><name>STColumn</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryRealloc</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>columns</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STColumn</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>pBuilder</name><operator>-&gt;</operator><name>tCols</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>columns</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>columns</name></name> <operator>=</operator> <name>columns</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STColumn</name> <modifier>*</modifier></type><name>pCol</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>pBuilder</name><operator>-&gt;</operator><name>columns</name><index>[<expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nCols</name></name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pCol</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCol</name><operator>-&gt;</operator><name>colId</name></name> <operator>=</operator> <name>colId</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCol</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nCols</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pCol</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pCol</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name><name>pBuilder</name><operator>-&gt;</operator><name>flen</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>flen</name></name> <operator>+=</operator> <name><name>TYPE_BYTES</name><index>[<expr><name>type</name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pCol</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>tlen</name></name> <operator>+=</operator> <operator>(</operator><name><name>TYPE_BYTES</name><index>[<expr><name>type</name></expr>]</index></name> <operator>+</operator> <name>bytes</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pCol</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <name><name>TYPE_BYTES</name><index>[<expr><name>type</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>tlen</name></name> <operator>+=</operator> <name><name>TYPE_BYTES</name><index>[<expr><name>type</name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nCols</name></name><operator>++</operator></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>offset</name></name> <operator>&lt;</operator> <name><name>pBuilder</name><operator>-&gt;</operator><name>flen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>STSchema</name> <modifier>*</modifier></type><name>tdGetSchemaFromBuilder</name><parameter_list>(<parameter><decl><type><name>STSchemaBuilder</name> <modifier>*</modifier></type><name>pBuilder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nCols</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>tlen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>STSchema</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>STColumn</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>pBuilder</name><operator>-&gt;</operator><name>nCols</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>STSchema</name> <modifier>*</modifier></type><name>pSchema</name> <init>= <expr><operator>(</operator><name>STSchema</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>tlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pSchema</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>pSchema</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name><name>pBuilder</name><operator>-&gt;</operator><name>version</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSchema</name><operator>-&gt;</operator><name>numOfCols</name></name> <operator>=</operator> <name><name>pBuilder</name><operator>-&gt;</operator><name>nCols</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSchema</name><operator>-&gt;</operator><name>tlen</name></name> <operator>=</operator> <name><name>pBuilder</name><operator>-&gt;</operator><name>tlen</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSchema</name><operator>-&gt;</operator><name>flen</name></name> <operator>=</operator> <name><name>pBuilder</name><operator>-&gt;</operator><name>flen</name></name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TD_SUPPORT_BITMAP</name></cpp:ifdef>
  <expr_stmt><expr><name><name>pSchema</name><operator>-&gt;</operator><name>tlen</name></name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>TD_BITMAP_BYTES</name><argument_list>(<argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>numOfCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSchema</name><operator>-&gt;</operator><name>columns</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>columns</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STColumn</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>pBuilder</name><operator>-&gt;</operator><name>nCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>pSchema</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>STSchema</name> <modifier>*</modifier></type><name>tBuildTSchema</name><parameter_list>(<parameter><decl><type><name>SSchema</name> <modifier>*</modifier></type><name>aSchema</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfCols</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>version</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STSchema</name> <modifier>*</modifier></type><name>pTSchema</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STSchema</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>STColumn</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>numOfCols</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTSchema</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>pTSchema</name><operator>-&gt;</operator><name>numOfCols</name></name> <operator>=</operator> <name>numOfCols</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTSchema</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name>version</name></expr>;</expr_stmt>

  <comment type="line">// timestamp column</comment>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>aSchema</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>aSchema</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>colId</name> <operator>==</operator> <name>PRIMARYKEY_TIMESTAMP_COL_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTSchema</name><operator>-&gt;</operator><name>columns</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>colId</name> <operator>=</operator> <name><name>aSchema</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>colId</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTSchema</name><operator>-&gt;</operator><name>columns</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>aSchema</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTSchema</name><operator>-&gt;</operator><name>columns</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <name><name>aSchema</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>flags</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTSchema</name><operator>-&gt;</operator><name>columns</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>bytes</name> <operator>=</operator> <name><name>aSchema</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTSchema</name><operator>-&gt;</operator><name>columns</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>offset</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

  <comment type="line">// other columns</comment>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iCol</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>iCol</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><name>iCol</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSchema</name>  <modifier>*</modifier></type><name>pSchema</name> <init>= <expr><operator>&amp;</operator><name><name>aSchema</name><index>[<expr><name>iCol</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>STColumn</name> <modifier>*</modifier></type><name>pTColumn</name> <init>= <expr><operator>&amp;</operator><name><name>pTSchema</name><operator>-&gt;</operator><name>columns</name><index>[<expr><name>iCol</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>colId</name></name> <operator>=</operator> <name><name>pSchema</name><operator>-&gt;</operator><name>colId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>pSchema</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name><name>pSchema</name><operator>-&gt;</operator><name>flags</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <name><name>pSchema</name><operator>-&gt;</operator><name>bytes</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name><name>pTSchema</name><operator>-&gt;</operator><name>flen</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pTSchema</name><operator>-&gt;</operator><name>flen</name></name> <operator>+=</operator> <name><name>TYPE_BYTES</name><index>[<expr><name><name>pTColumn</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>pTSchema</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tDestroyTSchema</name><parameter_list>(<parameter><decl><type><name>STSchema</name> <modifier>*</modifier></type><name>pTSchema</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pTSchema</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pTSchema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">// SColData ========================================</comment>
<function><type><name>void</name></type> <name>tColDataDestroy</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ph</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name> <init>= <expr><operator>(</operator><name>SColData</name> <operator>*</operator><operator>)</operator><name>ph</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tFree</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tFree</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>pColData</name><operator>-&gt;</operator><name>aOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tFree</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tColDataInit</name><parameter_list>(<parameter><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>cid</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>smaOn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pColData</name><operator>-&gt;</operator><name>cid</name></name> <operator>=</operator> <name>cid</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pColData</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pColData</name><operator>-&gt;</operator><name>smaOn</name></name> <operator>=</operator> <name>smaOn</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tColDataClear</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tColDataClear</name><parameter_list>(<parameter><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pColData</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pColData</name><operator>-&gt;</operator><name>nData</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>tColDataPutValue</name><parameter_list>(<parameter><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name></decl></parameter>, <parameter><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>pColVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>pColData</name><operator>-&gt;</operator><name>aOffset</name></name><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>pColData</name><operator>-&gt;</operator><name>aOffset</name><index>[<expr><name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name></expr>]</index></name> <operator>=</operator> <name><name>pColData</name><operator>-&gt;</operator><name>nData</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pColVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>nData</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pColData</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>nData</name></name> <operator>+</operator> <name><name>pColVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>nData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>pData</name></name> <operator>+</operator> <name><name>pColData</name><operator>-&gt;</operator><name>nData</name></name></expr></argument>, <argument><expr><name><name>pColVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pColVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>nData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pColData</name><operator>-&gt;</operator><name>nData</name></name> <operator>+=</operator> <name><name>pColVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>nData</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>nData</name></name> <operator>==</operator> <name><name>tDataTypes</name><index>[<expr><name><name>pColData</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>.</operator><name>bytes</name> <operator>*</operator> <name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pColData</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>nData</name></name> <operator>+</operator> <name><name>tDataTypes</name><index>[<expr><name><name>pColData</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>.</operator><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>pData</name></name> <operator>+</operator> <name><name>pColData</name><operator>-&gt;</operator><name>nData</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pColVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>val</name></name></expr></argument>, <argument><expr><name><name>tDataTypes</name><index>[<expr><name><name>pColData</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>.</operator><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pColData</name><operator>-&gt;</operator><name>nData</name></name> <operator>+=</operator> <name><name>tDataTypes</name><index>[<expr><name><name>pColData</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name><operator>++</operator></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>tColDataAppendValue00</name><parameter_list>(<parameter><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name></decl></parameter>, <parameter><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>pColVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pColData</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <name>HAS_VALUE</name></expr>;</expr_stmt>
  <return>return <expr><call><name>tColDataPutValue</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>tColDataAppendValue01</name><parameter_list>(<parameter><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name></decl></parameter>, <parameter><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>pColVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pColData</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <name>HAS_NONE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name><operator>++</operator></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>tColDataAppendValue02</name><parameter_list>(<parameter><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name></decl></parameter>, <parameter><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>pColVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pColData</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <name>HAS_NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name><operator>++</operator></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>tColDataAppendValue10</name><parameter_list>(<parameter><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name></decl></parameter>, <parameter><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>pColVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>nBit</name> <init>= <expr><call><name>BIT1_SIZE</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pColData</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><name>nBit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nBit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SET_BIT1</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pColData</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>HAS_VALUE</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>nOffset</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>pColData</name><operator>-&gt;</operator><name>aOffset</name></name><operator>)</operator></expr></argument>, <argument><expr><name>nOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>aOffset</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pColData</name><operator>-&gt;</operator><name>nData</name></name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name><name>pColData</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>.</operator><name>bytes</name> <operator>*</operator> <name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pColData</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>nData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>nData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>tColDataPutValue</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>tColDataAppendValue11</name><parameter_list>(<parameter><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name></decl></parameter>, <parameter><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>pColVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name><operator>++</operator></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>tColDataAppendValue12</name><parameter_list>(<parameter><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name></decl></parameter>, <parameter><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>pColVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>nBit</name> <init>= <expr><call><name>BIT1_SIZE</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pColData</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><name>nBit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nBit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SET_BIT1</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pColData</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>HAS_NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name><operator>++</operator></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>tColDataAppendValue20</name><parameter_list>(<parameter><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name></decl></parameter>, <parameter><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>pColVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>nBit</name> <init>= <expr><call><name>BIT1_SIZE</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pColData</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><name>nBit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nBit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SET_BIT1</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pColData</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>HAS_VALUE</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>nOffset</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>pColData</name><operator>-&gt;</operator><name>aOffset</name></name><operator>)</operator></expr></argument>, <argument><expr><name>nOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>aOffset</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pColData</name><operator>-&gt;</operator><name>nData</name></name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name><name>pColData</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>.</operator><name>bytes</name> <operator>*</operator> <name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pColData</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>nData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>nData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>tColDataPutValue</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>tColDataAppendValue21</name><parameter_list>(<parameter><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name></decl></parameter>, <parameter><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>pColVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>nBit</name> <init>= <expr><call><name>BIT1_SIZE</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pColData</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><name>nBit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><name>nBit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SET_BIT1</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pColData</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>HAS_NONE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name><operator>++</operator></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>tColDataAppendValue22</name><parameter_list>(<parameter><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name></decl></parameter>, <parameter><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>pColVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name><operator>++</operator></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>tColDataAppendValue30</name><parameter_list>(<parameter><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name></decl></parameter>, <parameter><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>pColVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pColData</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>HAS_VALUE</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pBitMap</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pBitMap</name></expr></argument>, <argument><expr><call><name>BIT2_SIZE</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iVal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iVal</name> <operator>&lt;</operator> <name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name></expr>;</condition> <incr><expr><name>iVal</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>SET_BIT2</name><argument_list>(<argument><expr><name>pBitMap</name></expr></argument>, <argument><expr><name>iVal</name></expr></argument>, <argument><expr><call><name>GET_BIT1</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><name>iVal</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>SET_BIT2</name><argument_list>(<argument><expr><name>pBitMap</name></expr></argument>, <argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tFree</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pColData</name><operator>-&gt;</operator><name>pBitMap</name></name> <operator>=</operator> <name>pBitMap</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>nOffset</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>pColData</name><operator>-&gt;</operator><name>aOffset</name></name><operator>)</operator></expr></argument>, <argument><expr><name>nOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>aOffset</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pColData</name><operator>-&gt;</operator><name>nData</name></name> <operator>=</operator> <name><name>tDataTypes</name><index>[<expr><name><name>pColData</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>.</operator><name>bytes</name> <operator>*</operator> <name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pColData</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>nData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>nData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>tColDataPutValue</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>tColDataAppendValue31</name><parameter_list>(<parameter><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name></decl></parameter>, <parameter><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>pColVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pColData</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><call><name>BIT1_SIZE</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>SET_BIT1</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name><operator>++</operator></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>tColDataAppendValue32</name><parameter_list>(<parameter><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name></decl></parameter>, <parameter><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>pColVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pColData</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><call><name>BIT1_SIZE</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>SET_BIT1</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name><operator>++</operator></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tColDataAppendValue40</name></cpp:macro> <cpp:value>tColDataPutValue</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>tColDataAppendValue41</name><parameter_list>(<parameter><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name></decl></parameter>, <parameter><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>pColVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pColData</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>HAS_NONE</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>nBit</name> <init>= <expr><call><name>BIT1_SIZE</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pColData</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><name>nBit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><name>nBit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SET_BIT1</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>tColDataPutValue</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>tColDataAppendValue42</name><parameter_list>(<parameter><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name></decl></parameter>, <parameter><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>pColVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pColData</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>HAS_NULL</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>nBit</name> <init>= <expr><call><name>BIT1_SIZE</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pColData</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><name>nBit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><name>nBit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SET_BIT1</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>tColDataPutValue</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>tColDataAppendValue50</name><parameter_list>(<parameter><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name></decl></parameter>, <parameter><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>pColVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pColData</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><call><name>BIT1_SIZE</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>SET_BIT1</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>tColDataPutValue</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>tColDataAppendValue51</name><parameter_list>(<parameter><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name></decl></parameter>, <parameter><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>pColVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pColData</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><call><name>BIT1_SIZE</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>SET_BIT1</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>tColDataPutValue</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>tColDataAppendValue52</name><parameter_list>(<parameter><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name></decl></parameter>, <parameter><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>pColVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pColData</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>HAS_NULL</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pBitMap</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pBitMap</name></expr></argument>, <argument><expr><call><name>BIT2_SIZE</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iVal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iVal</name> <operator>&lt;</operator> <name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name></expr>;</condition> <incr><expr><name>iVal</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>SET_BIT2</name><argument_list>(<argument><expr><name>pBitMap</name></expr></argument>, <argument><expr><name>iVal</name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>GET_BIT1</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><name>iVal</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>SET_BIT2</name><argument_list>(<argument><expr><name>pBitMap</name></expr></argument>, <argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tFree</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pColData</name><operator>-&gt;</operator><name>pBitMap</name></name> <operator>=</operator> <name>pBitMap</name></expr>;</expr_stmt>

  <return>return <expr><call><name>tColDataPutValue</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>tColDataAppendValue60</name><parameter_list>(<parameter><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name></decl></parameter>, <parameter><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>pColVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pColData</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><call><name>BIT1_SIZE</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>SET_BIT1</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>tColDataPutValue</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>tColDataAppendValue61</name><parameter_list>(<parameter><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name></decl></parameter>, <parameter><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>pColVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pColData</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>HAS_NONE</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pBitMap</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pBitMap</name></expr></argument>, <argument><expr><call><name>BIT2_SIZE</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iVal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iVal</name> <operator>&lt;</operator> <name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name></expr>;</condition> <incr><expr><name>iVal</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>SET_BIT2</name><argument_list>(<argument><expr><name>pBitMap</name></expr></argument>, <argument><expr><name>iVal</name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>GET_BIT1</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><name>iVal</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>SET_BIT2</name><argument_list>(<argument><expr><name>pBitMap</name></expr></argument>, <argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tFree</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pColData</name><operator>-&gt;</operator><name>pBitMap</name></name> <operator>=</operator> <name>pBitMap</name></expr>;</expr_stmt>

  <return>return <expr><call><name>tColDataPutValue</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>tColDataAppendValue62</name><parameter_list>(<parameter><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name></decl></parameter>, <parameter><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>pColVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pColData</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><call><name>BIT1_SIZE</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>SET_BIT1</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>tColDataPutValue</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>tColDataAppendValue70</name><parameter_list>(<parameter><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name></decl></parameter>, <parameter><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>pColVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pColData</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><call><name>BIT2_SIZE</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>SET_BIT2</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>tColDataPutValue</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>tColDataAppendValue71</name><parameter_list>(<parameter><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name></decl></parameter>, <parameter><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>pColVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pColData</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><call><name>BIT2_SIZE</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>SET_BIT2</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>tColDataPutValue</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>tColDataAppendValue72</name><parameter_list>(<parameter><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name></decl></parameter>, <parameter><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>pColVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pColData</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><call><name>BIT2_SIZE</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>SET_BIT2</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>tColDataPutValue</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> (<modifier>*</modifier><name>tColDataAppendValueImpl</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index>)<parameter_list>(<parameter><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name></decl></parameter>, <parameter><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>pColVal</name></decl></parameter>)</parameter_list> <init>= <expr><block>{
    <expr><block>{<expr><name>tColDataAppendValue00</name></expr></block></expr></block></expr></init><operator>,</operator> tColDataAppendValue01<operator>,</operator> tColDataAppendValue02</function_decl>},  <comment type="line">// 0</comment>
    <block>{<block_content><expr><name>tColDataAppendValue10</name></expr><operator>,</operator> <expr><name>tColDataAppendValue11</name></expr><operator>,</operator> <expr><name>tColDataAppendValue12</name></expr></block_content>}</block><operator>,</operator>  <comment type="line">// HAS_NONE</comment>
    <block>{<block_content><expr><name>tColDataAppendValue20</name></expr><operator>,</operator> <expr><name>tColDataAppendValue21</name></expr><operator>,</operator> <expr><name>tColDataAppendValue22</name></expr></block_content>}</block><operator>,</operator>  <comment type="line">// HAS_NULL</comment>
    <block>{<block_content><expr><name>tColDataAppendValue30</name></expr><operator>,</operator> <expr><name>tColDataAppendValue31</name></expr><operator>,</operator> <expr><name>tColDataAppendValue32</name></expr></block_content>}</block><operator>,</operator>  <comment type="line">// HAS_NULL|HAS_NONE</comment>
    <block>{<block_content><expr><name>tColDataAppendValue40</name></expr><operator>,</operator> <expr><name>tColDataAppendValue41</name></expr><operator>,</operator> <expr><name>tColDataAppendValue42</name></expr></block_content>}</block><operator>,</operator>  <comment type="line">// HAS_VALUE</comment>
    <block>{<block_content><expr><name>tColDataAppendValue50</name></expr><operator>,</operator> <expr><name>tColDataAppendValue51</name></expr><operator>,</operator> <expr><name>tColDataAppendValue52</name></expr></block_content>}</block><operator>,</operator>  <comment type="line">// HAS_VALUE|HAS_NONE</comment>
    <block>{<block_content><expr><name>tColDataAppendValue60</name></expr><operator>,</operator> <expr><name>tColDataAppendValue61</name></expr><operator>,</operator> <expr><name>tColDataAppendValue62</name></expr></block_content>}</block><operator>,</operator>  <comment type="line">// HAS_VALUE|HAS_NULL</comment>
    <block>{<block_content><expr><name>tColDataAppendValue70</name></expr><operator>,</operator> <expr><name>tColDataAppendValue71</name></expr><operator>,</operator> <expr><name>tColDataAppendValue72</name></expr></block_content>}</block><operator>,</operator>  <comment type="line">// HAS_VALUE|HAS_NULL|HAS_NONE</comment>
};
<function><type><name>int32_t</name></type> <name>tColDataAppendValue</name><parameter_list>(<parameter><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name></decl></parameter>, <parameter><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>pColVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>cid</name></name> <operator>==</operator> <name><name>pColVal</name><operator>-&gt;</operator><name>cid</name></name> <operator>&amp;&amp;</operator> <name><name>pColData</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name><name>pColVal</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>tColDataAppendValueImpl</name><index>[<expr><name><name>pColData</name><operator>-&gt;</operator><name>flag</name></name></expr>]</index><index>[<expr><name><name>pColVal</name><operator>-&gt;</operator><name>flag</name></name></expr>]</index></name><operator>(</operator><name>pColData</name><operator>,</operator> <name>pColVal</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>tColDataGetValue1</name><parameter_list>(<parameter><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>iVal</name></decl></parameter>, <parameter><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>pColVal</name></decl></parameter>)</parameter_list> <block>{<block_content>  <comment type="line">// HAS_NONE</comment>
  <expr_stmt><expr><operator>*</operator><name>pColVal</name> <operator>=</operator> <call><name>COL_VAL_NONE</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>cid</name></name></expr></argument>, <argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>tColDataGetValue2</name><parameter_list>(<parameter><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>iVal</name></decl></parameter>, <parameter><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>pColVal</name></decl></parameter>)</parameter_list> <block>{<block_content>  <comment type="line">// HAS_NULL</comment>
  <expr_stmt><expr><operator>*</operator><name>pColVal</name> <operator>=</operator> <call><name>COL_VAL_NULL</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>cid</name></name></expr></argument>, <argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>tColDataGetValue3</name><parameter_list>(<parameter><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>iVal</name></decl></parameter>, <parameter><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>pColVal</name></decl></parameter>)</parameter_list> <block>{<block_content>  <comment type="line">// HAS_NULL|HAS_NONE</comment>
  <switch>switch <condition>(<expr><call><name>GET_BIT1</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><name>iVal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="number">0</literal></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>pColVal</name> <operator>=</operator> <call><name>COL_VAL_NONE</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>cid</name></name></expr></argument>, <argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="number">1</literal></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>pColVal</name> <operator>=</operator> <call><name>COL_VAL_NULL</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>cid</name></name></expr></argument>, <argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></switch>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>tColDataGetValue4</name><parameter_list>(<parameter><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>iVal</name></decl></parameter>, <parameter><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>pColVal</name></decl></parameter>)</parameter_list> <block>{<block_content>  <comment type="line">// HAS_VALUE</comment>
  <decl_stmt><decl><type><name>SValue</name></type> <name>value</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>iVal</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>value</name><operator>.</operator><name>nData</name></name> <operator>=</operator> <name><name>pColData</name><operator>-&gt;</operator><name>aOffset</name><index>[<expr><name>iVal</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>pColData</name><operator>-&gt;</operator><name>aOffset</name><index>[<expr><name>iVal</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>value</name><operator>.</operator><name>nData</name></name> <operator>=</operator> <name><name>pColData</name><operator>-&gt;</operator><name>nData</name></name> <operator>-</operator> <name><name>pColData</name><operator>-&gt;</operator><name>aOffset</name><index>[<expr><name>iVal</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name><name>value</name><operator>.</operator><name>pData</name></name> <operator>=</operator> <name><name>pColData</name><operator>-&gt;</operator><name>pData</name></name> <operator>+</operator> <name><name>pColData</name><operator>-&gt;</operator><name>aOffset</name><index>[<expr><name>iVal</name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>value</name><operator>.</operator><name>val</name></name></expr></argument>, <argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>pData</name></name> <operator>+</operator> <name><name>tDataTypes</name><index>[<expr><name><name>pColData</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>.</operator><name>bytes</name> <operator>*</operator> <name>iVal</name></expr></argument>, <argument><expr><name><name>tDataTypes</name><index>[<expr><name><name>pColData</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>.</operator><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>pColVal</name> <operator>=</operator> <call><name>COL_VAL_VALUE</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>cid</name></name></expr></argument>, <argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>tColDataGetValue5</name><parameter_list>(<parameter><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>iVal</name></decl></parameter>,
                                           <parameter><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>pColVal</name></decl></parameter>)</parameter_list> <block>{<block_content>  <comment type="line">// HAS_VALUE|HAS_NONE</comment>
  <switch>switch <condition>(<expr><call><name>GET_BIT1</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><name>iVal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="number">0</literal></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>pColVal</name> <operator>=</operator> <call><name>COL_VAL_NONE</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>cid</name></name></expr></argument>, <argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="number">1</literal></expr>:</case>
      <expr_stmt><expr><call><name>tColDataGetValue4</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><name>iVal</name></expr></argument>, <argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></switch>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>tColDataGetValue6</name><parameter_list>(<parameter><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>iVal</name></decl></parameter>,
                                           <parameter><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>pColVal</name></decl></parameter>)</parameter_list> <block>{<block_content>  <comment type="line">// HAS_VALUE|HAS_NULL</comment>
  <switch>switch <condition>(<expr><call><name>GET_BIT1</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><name>iVal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="number">0</literal></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>pColVal</name> <operator>=</operator> <call><name>COL_VAL_NULL</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>cid</name></name></expr></argument>, <argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="number">1</literal></expr>:</case>
      <expr_stmt><expr><call><name>tColDataGetValue4</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><name>iVal</name></expr></argument>, <argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></switch>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>tColDataGetValue7</name><parameter_list>(<parameter><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>iVal</name></decl></parameter>,
                                           <parameter><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>pColVal</name></decl></parameter>)</parameter_list> <block>{<block_content>  <comment type="line">// HAS_VALUE|HAS_NULL|HAS_NONE</comment>
  <switch>switch <condition>(<expr><call><name>GET_BIT2</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><name>iVal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="number">0</literal></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>pColVal</name> <operator>=</operator> <call><name>COL_VAL_NONE</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>cid</name></name></expr></argument>, <argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="number">1</literal></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>pColVal</name> <operator>=</operator> <call><name>COL_VAL_NULL</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>cid</name></name></expr></argument>, <argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="number">2</literal></expr>:</case>
      <expr_stmt><expr><call><name>tColDataGetValue4</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><name>iVal</name></expr></argument>, <argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></switch>
</block_content>}</block></function>
<function_decl><type><specifier>static</specifier> <name>void</name></type> (<modifier>*</modifier><name>tColDataGetValueImpl</name><index>[]</index>)<parameter_list>(<parameter><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>iVal</name></decl></parameter>, <parameter><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>pColVal</name></decl></parameter>)</parameter_list> <init>= <expr><block>{
    <expr><name>NULL</name></expr></block></expr></init><operator>,</operator>               <comment type="line">// 0</comment>
    tColDataGetValue1<operator>,</operator>  <comment type="line">// HAS_NONE</comment>
    tColDataGetValue2<operator>,</operator>  <comment type="line">// HAS_NULL</comment>
    tColDataGetValue3<operator>,</operator>  <comment type="line">// HAS_NULL | HAS_NONE</comment>
    tColDataGetValue4<operator>,</operator>  <comment type="line">// HAS_VALUE</comment>
    tColDataGetValue5<operator>,</operator>  <comment type="line">// HAS_VALUE | HAS_NONE</comment>
    tColDataGetValue6<operator>,</operator>  <comment type="line">// HAS_VALUE | HAS_NULL</comment>
    tColDataGetValue7</function_decl>   <comment type="line">// HAS_VALUE | HAS_NULL | HAS_NONE</comment>
};
<function><type><name>void</name></type> <name>tColDataGetValue</name><parameter_list>(<parameter><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>iVal</name></decl></parameter>, <parameter><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>pColVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>iVal</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>iVal</name> <operator>&lt;</operator> <name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name> <operator>&amp;&amp;</operator> <name><name>pColData</name><operator>-&gt;</operator><name>flag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tColDataGetValueImpl</name><index>[<expr><name><name>pColData</name><operator>-&gt;</operator><name>flag</name></name></expr>]</index></name><operator>(</operator><name>pColData</name><operator>,</operator> <name>iVal</name><operator>,</operator> <name>pColVal</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>uint8_t</name></type> <name>tColDataGetBitValue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SColData</name> <modifier>*</modifier></type><name>pColData</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>iVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>v</name></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name><name>pColData</name><operator>-&gt;</operator><name>flag</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>HAS_NONE</name></expr>:</case>
      <expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HAS_NULL</name></expr>:</case>
      <expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><operator>(</operator><name>HAS_NULL</name> <operator>|</operator> <name>HAS_NONE</name><operator>)</operator></expr>:</case>
      <expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>GET_BIT1</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><name>iVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>HAS_VALUE</name></expr>:</case>
      <expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><operator>(</operator><name>HAS_VALUE</name> <operator>|</operator> <name>HAS_NONE</name><operator>)</operator></expr>:</case>
      <expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>GET_BIT1</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><name>iVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>v</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <break>break;</break>
    <case>case <expr><operator>(</operator><name>HAS_VALUE</name> <operator>|</operator> <name>HAS_NULL</name><operator>)</operator></expr>:</case>
      <expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>GET_BIT1</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><name>iVal</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><operator>(</operator><name>HAS_VALUE</name> <operator>|</operator> <name>HAS_NULL</name> <operator>|</operator> <name>HAS_NONE</name><operator>)</operator></expr>:</case>
      <expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>GET_BIT2</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><name>iVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>
  <return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tColDataCopy</name><parameter_list>(<parameter><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColDataSrc</name></decl></parameter>, <parameter><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColDataDest</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pColDataSrc</name><operator>-&gt;</operator><name>nVal</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pColDataDest</name><operator>-&gt;</operator><name>cid</name></name> <operator>==</operator> <name><name>pColDataSrc</name><operator>-&gt;</operator><name>cid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pColDataDest</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name><name>pColDataSrc</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pColDataDest</name><operator>-&gt;</operator><name>smaOn</name></name> <operator>=</operator> <name><name>pColDataSrc</name><operator>-&gt;</operator><name>smaOn</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pColDataDest</name><operator>-&gt;</operator><name>nVal</name></name> <operator>=</operator> <name><name>pColDataSrc</name><operator>-&gt;</operator><name>nVal</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pColDataDest</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <name><name>pColDataSrc</name><operator>-&gt;</operator><name>flag</name></name></expr>;</expr_stmt>

  <comment type="line">// bitmap</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pColDataSrc</name><operator>-&gt;</operator><name>flag</name></name> <operator>!=</operator> <name>HAS_NONE</name> <operator>&amp;&amp;</operator> <name><name>pColDataSrc</name><operator>-&gt;</operator><name>flag</name></name> <operator>!=</operator> <name>HAS_NULL</name> <operator>&amp;&amp;</operator> <name><name>pColDataSrc</name><operator>-&gt;</operator><name>flag</name></name> <operator>!=</operator> <name>HAS_VALUE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>BIT2_SIZE</name><argument_list>(<argument><expr><name><name>pColDataSrc</name><operator>-&gt;</operator><name>nVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pColDataDest</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pColDataDest</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><name><name>pColDataSrc</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// offset</comment>
  <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pColDataDest</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>pColDataSrc</name><operator>-&gt;</operator><name>nVal</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pColDataDest</name><operator>-&gt;</operator><name>aOffset</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pColDataDest</name><operator>-&gt;</operator><name>aOffset</name></name></expr></argument>, <argument><expr><name><name>pColDataSrc</name><operator>-&gt;</operator><name>aOffset</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// value</comment>
  <expr_stmt><expr><name><name>pColDataDest</name><operator>-&gt;</operator><name>nData</name></name> <operator>=</operator> <name><name>pColDataSrc</name><operator>-&gt;</operator><name>nData</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pColDataDest</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pColDataSrc</name><operator>-&gt;</operator><name>nData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pColDataDest</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pColDataSrc</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pColDataDest</name><operator>-&gt;</operator><name>nData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALC_SUM_MAX_MIN</name><parameter_list>(<parameter><type><name>SUM</name></type></parameter>, <parameter><type><name>MAX</name></type></parameter>, <parameter><type><name>MIN</name></type></parameter>, <parameter><type><name>VAL</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>do {                                       \
    (SUM) += (VAL);                          \
    if ((MAX) &lt; (VAL)) (MAX) = (VAL);        \
    if ((MIN) &gt; (VAL)) (MIN) = (VAL);        \
  } while (0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>tColDataCalcSMABool</name><parameter_list>(<parameter><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>sum</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>max</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>min</name></decl></parameter>,
                                             <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>numOfNull</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>sum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>max</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>min</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>numOfNull</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int8_t</name></type> <name>val</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>HAS_VALUE</name> <operator>==</operator> <name><name>pColData</name><operator>-&gt;</operator><name>flag</name></name></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iVal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iVal</name> <operator>&lt;</operator> <name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name></expr>;</condition> <incr><expr><name>iVal</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>val</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name>int8_t</name> <operator>*</operator><operator>)</operator><name><name>pColData</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator><index>[<expr><name>iVal</name></expr>]</index></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>CALC_SUM_MAX_MIN</name><argument_list>(<argument><expr><operator>*</operator><name>sum</name></expr></argument>, <argument><expr><operator>*</operator><name>max</name></expr></argument>, <argument><expr><operator>*</operator><name>min</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iVal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iVal</name> <operator>&lt;</operator> <name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name></expr>;</condition> <incr><expr><name>iVal</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <switch>switch <condition>(<expr><call><name>tColDataGetBitValue</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><name>iVal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="number">0</literal></expr>:</case>
        <case>case <expr><literal type="number">1</literal></expr>:</case>
          <expr_stmt><expr><operator>(</operator><operator>*</operator><name>numOfNull</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><literal type="number">2</literal></expr>:</case>
          <expr_stmt><expr><name>val</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name>int8_t</name> <operator>*</operator><operator>)</operator><name><name>pColData</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator><index>[<expr><name>iVal</name></expr>]</index></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>CALC_SUM_MAX_MIN</name><argument_list>(<argument><expr><operator>*</operator><name>sum</name></expr></argument>, <argument><expr><operator>*</operator><name>max</name></expr></argument>, <argument><expr><operator>*</operator><name>min</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <default>default:</default>
          <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
      </block_content>}</block></switch>
    </block_content>}</block></for>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>tColDataCalcSMATinyInt</name><parameter_list>(<parameter><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>sum</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>max</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>min</name></decl></parameter>,
                                                <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>numOfNull</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>sum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>max</name> <operator>=</operator> <name>INT8_MIN</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>min</name> <operator>=</operator> <name>INT8_MAX</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>numOfNull</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int8_t</name></type> <name>val</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>HAS_VALUE</name> <operator>==</operator> <name><name>pColData</name><operator>-&gt;</operator><name>flag</name></name></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iVal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iVal</name> <operator>&lt;</operator> <name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name></expr>;</condition> <incr><expr><name>iVal</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int8_t</name> <operator>*</operator><operator>)</operator><name><name>pColData</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator><index>[<expr><name>iVal</name></expr>]</index></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>CALC_SUM_MAX_MIN</name><argument_list>(<argument><expr><operator>*</operator><name>sum</name></expr></argument>, <argument><expr><operator>*</operator><name>max</name></expr></argument>, <argument><expr><operator>*</operator><name>min</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iVal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iVal</name> <operator>&lt;</operator> <name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name></expr>;</condition> <incr><expr><name>iVal</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <switch>switch <condition>(<expr><call><name>tColDataGetBitValue</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><name>iVal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="number">0</literal></expr>:</case>
        <case>case <expr><literal type="number">1</literal></expr>:</case>
          <expr_stmt><expr><operator>(</operator><operator>*</operator><name>numOfNull</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><literal type="number">2</literal></expr>:</case>
          <expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int8_t</name> <operator>*</operator><operator>)</operator><name><name>pColData</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator><index>[<expr><name>iVal</name></expr>]</index></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>CALC_SUM_MAX_MIN</name><argument_list>(<argument><expr><operator>*</operator><name>sum</name></expr></argument>, <argument><expr><operator>*</operator><name>max</name></expr></argument>, <argument><expr><operator>*</operator><name>min</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <default>default:</default>
          <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
      </block_content>}</block></switch>
    </block_content>}</block></for>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>tColDataCalcSMATinySmallInt</name><parameter_list>(<parameter><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>sum</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>max</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>min</name></decl></parameter>,
                                                     <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>numOfNull</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>sum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>max</name> <operator>=</operator> <name>INT16_MIN</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>min</name> <operator>=</operator> <name>INT16_MAX</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>numOfNull</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int16_t</name></type> <name>val</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>HAS_VALUE</name> <operator>==</operator> <name><name>pColData</name><operator>-&gt;</operator><name>flag</name></name></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iVal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iVal</name> <operator>&lt;</operator> <name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name></expr>;</condition> <incr><expr><name>iVal</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name><name>pColData</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator><index>[<expr><name>iVal</name></expr>]</index></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>CALC_SUM_MAX_MIN</name><argument_list>(<argument><expr><operator>*</operator><name>sum</name></expr></argument>, <argument><expr><operator>*</operator><name>max</name></expr></argument>, <argument><expr><operator>*</operator><name>min</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iVal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iVal</name> <operator>&lt;</operator> <name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name></expr>;</condition> <incr><expr><name>iVal</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <switch>switch <condition>(<expr><call><name>tColDataGetBitValue</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><name>iVal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="number">0</literal></expr>:</case>
        <case>case <expr><literal type="number">1</literal></expr>:</case>
          <expr_stmt><expr><operator>(</operator><operator>*</operator><name>numOfNull</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><literal type="number">2</literal></expr>:</case>
          <expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name><name>pColData</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator><index>[<expr><name>iVal</name></expr>]</index></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>CALC_SUM_MAX_MIN</name><argument_list>(<argument><expr><operator>*</operator><name>sum</name></expr></argument>, <argument><expr><operator>*</operator><name>max</name></expr></argument>, <argument><expr><operator>*</operator><name>min</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <default>default:</default>
          <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
      </block_content>}</block></switch>
    </block_content>}</block></for>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>tColDataCalcSMAInt</name><parameter_list>(<parameter><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>sum</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>max</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>min</name></decl></parameter>,
                                            <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>numOfNull</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>sum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>max</name> <operator>=</operator> <name>INT32_MIN</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>min</name> <operator>=</operator> <name>INT32_MAX</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>numOfNull</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>val</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>HAS_VALUE</name> <operator>==</operator> <name><name>pColData</name><operator>-&gt;</operator><name>flag</name></name></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iVal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iVal</name> <operator>&lt;</operator> <name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name></expr>;</condition> <incr><expr><name>iVal</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><name><name>pColData</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator><index>[<expr><name>iVal</name></expr>]</index></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>CALC_SUM_MAX_MIN</name><argument_list>(<argument><expr><operator>*</operator><name>sum</name></expr></argument>, <argument><expr><operator>*</operator><name>max</name></expr></argument>, <argument><expr><operator>*</operator><name>min</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iVal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iVal</name> <operator>&lt;</operator> <name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name></expr>;</condition> <incr><expr><name>iVal</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <switch>switch <condition>(<expr><call><name>tColDataGetBitValue</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><name>iVal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="number">0</literal></expr>:</case>
        <case>case <expr><literal type="number">1</literal></expr>:</case>
          <expr_stmt><expr><operator>(</operator><operator>*</operator><name>numOfNull</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><literal type="number">2</literal></expr>:</case>
          <expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><name><name>pColData</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator><index>[<expr><name>iVal</name></expr>]</index></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>CALC_SUM_MAX_MIN</name><argument_list>(<argument><expr><operator>*</operator><name>sum</name></expr></argument>, <argument><expr><operator>*</operator><name>max</name></expr></argument>, <argument><expr><operator>*</operator><name>min</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <default>default:</default>
          <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
      </block_content>}</block></switch>
    </block_content>}</block></for>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>tColDataCalcSMABigInt</name><parameter_list>(<parameter><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>sum</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>max</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>min</name></decl></parameter>,
                                               <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>numOfNull</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>sum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>max</name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>min</name> <operator>=</operator> <name>INT64_MAX</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>numOfNull</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>val</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>HAS_VALUE</name> <operator>==</operator> <name><name>pColData</name><operator>-&gt;</operator><name>flag</name></name></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iVal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iVal</name> <operator>&lt;</operator> <name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name></expr>;</condition> <incr><expr><name>iVal</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name><name>pColData</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator><index>[<expr><name>iVal</name></expr>]</index></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>CALC_SUM_MAX_MIN</name><argument_list>(<argument><expr><operator>*</operator><name>sum</name></expr></argument>, <argument><expr><operator>*</operator><name>max</name></expr></argument>, <argument><expr><operator>*</operator><name>min</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iVal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iVal</name> <operator>&lt;</operator> <name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name></expr>;</condition> <incr><expr><name>iVal</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <switch>switch <condition>(<expr><call><name>tColDataGetBitValue</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><name>iVal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="number">0</literal></expr>:</case>
        <case>case <expr><literal type="number">1</literal></expr>:</case>
          <expr_stmt><expr><operator>(</operator><operator>*</operator><name>numOfNull</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><literal type="number">2</literal></expr>:</case>
          <expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name><name>pColData</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator><index>[<expr><name>iVal</name></expr>]</index></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>CALC_SUM_MAX_MIN</name><argument_list>(<argument><expr><operator>*</operator><name>sum</name></expr></argument>, <argument><expr><operator>*</operator><name>max</name></expr></argument>, <argument><expr><operator>*</operator><name>min</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <default>default:</default>
          <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
      </block_content>}</block></switch>
    </block_content>}</block></for>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>tColDataCalcSMAFloat</name><parameter_list>(<parameter><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>sum</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>max</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>min</name></decl></parameter>,
                                              <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>numOfNull</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name>sum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name>max</name> <operator>=</operator> <operator>-</operator><name>FLT_MAX</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name>min</name> <operator>=</operator> <name>FLT_MAX</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>numOfNull</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>float</name></type> <name>val</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>HAS_VALUE</name> <operator>==</operator> <name><name>pColData</name><operator>-&gt;</operator><name>flag</name></name></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iVal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iVal</name> <operator>&lt;</operator> <name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name></expr>;</condition> <incr><expr><name>iVal</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>pColData</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator><index>[<expr><name>iVal</name></expr>]</index></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>CALC_SUM_MAX_MIN</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name>sum</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name>max</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name>min</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iVal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iVal</name> <operator>&lt;</operator> <name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name></expr>;</condition> <incr><expr><name>iVal</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <switch>switch <condition>(<expr><call><name>tColDataGetBitValue</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><name>iVal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="number">0</literal></expr>:</case>
        <case>case <expr><literal type="number">1</literal></expr>:</case>
          <expr_stmt><expr><operator>(</operator><operator>*</operator><name>numOfNull</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><literal type="number">2</literal></expr>:</case>
          <expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>pColData</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator><index>[<expr><name>iVal</name></expr>]</index></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>CALC_SUM_MAX_MIN</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name>sum</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name>max</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name>min</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <default>default:</default>
          <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
      </block_content>}</block></switch>
    </block_content>}</block></for>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>tColDataCalcSMADouble</name><parameter_list>(<parameter><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>sum</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>max</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>min</name></decl></parameter>,
                                               <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>numOfNull</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name>sum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name>max</name> <operator>=</operator> <operator>-</operator><name>DBL_MAX</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name>min</name> <operator>=</operator> <name>DBL_MAX</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>numOfNull</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>double</name></type> <name>val</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>HAS_VALUE</name> <operator>==</operator> <name><name>pColData</name><operator>-&gt;</operator><name>flag</name></name></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iVal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iVal</name> <operator>&lt;</operator> <name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name></expr>;</condition> <incr><expr><name>iVal</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name><name>pColData</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator><index>[<expr><name>iVal</name></expr>]</index></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>CALC_SUM_MAX_MIN</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name>sum</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name>max</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name>min</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iVal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iVal</name> <operator>&lt;</operator> <name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name></expr>;</condition> <incr><expr><name>iVal</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <switch>switch <condition>(<expr><call><name>tColDataGetBitValue</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><name>iVal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="number">0</literal></expr>:</case>
        <case>case <expr><literal type="number">1</literal></expr>:</case>
          <expr_stmt><expr><operator>(</operator><operator>*</operator><name>numOfNull</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><literal type="number">2</literal></expr>:</case>
          <expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name><name>pColData</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator><index>[<expr><name>iVal</name></expr>]</index></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>CALC_SUM_MAX_MIN</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name>sum</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name>max</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name>min</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <default>default:</default>
          <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
      </block_content>}</block></switch>
    </block_content>}</block></for>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>tColDataCalcSMAUTinyInt</name><parameter_list>(<parameter><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>sum</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>max</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>min</name></decl></parameter>,
                                                 <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>numOfNull</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>sum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>max</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>min</name> <operator>=</operator> <name>UINT8_MAX</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>numOfNull</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>uint8_t</name></type> <name>val</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>HAS_VALUE</name> <operator>==</operator> <name><name>pColData</name><operator>-&gt;</operator><name>flag</name></name></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iVal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iVal</name> <operator>&lt;</operator> <name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name></expr>;</condition> <incr><expr><name>iVal</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>pColData</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator><index>[<expr><name>iVal</name></expr>]</index></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>CALC_SUM_MAX_MIN</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>sum</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>max</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>min</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iVal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iVal</name> <operator>&lt;</operator> <name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name></expr>;</condition> <incr><expr><name>iVal</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <switch>switch <condition>(<expr><call><name>tColDataGetBitValue</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><name>iVal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="number">0</literal></expr>:</case>
        <case>case <expr><literal type="number">1</literal></expr>:</case>
          <expr_stmt><expr><operator>(</operator><operator>*</operator><name>numOfNull</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><literal type="number">2</literal></expr>:</case>
          <expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>pColData</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator><index>[<expr><name>iVal</name></expr>]</index></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>CALC_SUM_MAX_MIN</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>sum</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>max</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>min</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <default>default:</default>
          <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
      </block_content>}</block></switch>
    </block_content>}</block></for>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>tColDataCalcSMATinyUSmallInt</name><parameter_list>(<parameter><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>sum</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>max</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>min</name></decl></parameter>,
                                                      <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>numOfNull</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>sum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>max</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>min</name> <operator>=</operator> <name>UINT16_MAX</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>numOfNull</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>uint16_t</name></type> <name>val</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>HAS_VALUE</name> <operator>==</operator> <name><name>pColData</name><operator>-&gt;</operator><name>flag</name></name></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iVal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iVal</name> <operator>&lt;</operator> <name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name></expr>;</condition> <incr><expr><name>iVal</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>pColData</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator><index>[<expr><name>iVal</name></expr>]</index></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>CALC_SUM_MAX_MIN</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>sum</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>max</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>min</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iVal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iVal</name> <operator>&lt;</operator> <name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name></expr>;</condition> <incr><expr><name>iVal</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <switch>switch <condition>(<expr><call><name>tColDataGetBitValue</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><name>iVal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="number">0</literal></expr>:</case>
        <case>case <expr><literal type="number">1</literal></expr>:</case>
          <expr_stmt><expr><operator>(</operator><operator>*</operator><name>numOfNull</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><literal type="number">2</literal></expr>:</case>
          <expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>pColData</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator><index>[<expr><name>iVal</name></expr>]</index></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>CALC_SUM_MAX_MIN</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>sum</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>max</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>min</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <default>default:</default>
          <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
      </block_content>}</block></switch>
    </block_content>}</block></for>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>tColDataCalcSMAUInt</name><parameter_list>(<parameter><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>sum</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>max</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>min</name></decl></parameter>,
                                             <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>numOfNull</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>sum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>max</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>min</name> <operator>=</operator> <name>UINT32_MAX</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>numOfNull</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>uint32_t</name></type> <name>val</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>HAS_VALUE</name> <operator>==</operator> <name><name>pColData</name><operator>-&gt;</operator><name>flag</name></name></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iVal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iVal</name> <operator>&lt;</operator> <name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name></expr>;</condition> <incr><expr><name>iVal</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name><name>pColData</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator><index>[<expr><name>iVal</name></expr>]</index></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>CALC_SUM_MAX_MIN</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>sum</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>max</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>min</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iVal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iVal</name> <operator>&lt;</operator> <name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name></expr>;</condition> <incr><expr><name>iVal</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <switch>switch <condition>(<expr><call><name>tColDataGetBitValue</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><name>iVal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="number">0</literal></expr>:</case>
        <case>case <expr><literal type="number">1</literal></expr>:</case>
          <expr_stmt><expr><operator>(</operator><operator>*</operator><name>numOfNull</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><literal type="number">2</literal></expr>:</case>
          <expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name><name>pColData</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator><index>[<expr><name>iVal</name></expr>]</index></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>CALC_SUM_MAX_MIN</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>sum</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>max</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>min</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <default>default:</default>
          <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
      </block_content>}</block></switch>
    </block_content>}</block></for>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>tColDataCalcSMAUBigInt</name><parameter_list>(<parameter><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>sum</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>max</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>min</name></decl></parameter>,
                                                <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>numOfNull</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>sum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>max</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>min</name> <operator>=</operator> <name>UINT64_MAX</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>numOfNull</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>uint64_t</name></type> <name>val</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>HAS_VALUE</name> <operator>==</operator> <name><name>pColData</name><operator>-&gt;</operator><name>flag</name></name></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iVal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iVal</name> <operator>&lt;</operator> <name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name></expr>;</condition> <incr><expr><name>iVal</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name><name>pColData</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator><index>[<expr><name>iVal</name></expr>]</index></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>CALC_SUM_MAX_MIN</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>sum</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>max</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>min</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iVal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iVal</name> <operator>&lt;</operator> <name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name></expr>;</condition> <incr><expr><name>iVal</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <switch>switch <condition>(<expr><call><name>tColDataGetBitValue</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><name>iVal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="number">0</literal></expr>:</case>
        <case>case <expr><literal type="number">1</literal></expr>:</case>
          <expr_stmt><expr><operator>(</operator><operator>*</operator><name>numOfNull</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><literal type="number">2</literal></expr>:</case>
          <expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name><name>pColData</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator><index>[<expr><name>iVal</name></expr>]</index></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>CALC_SUM_MAX_MIN</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>sum</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>max</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>min</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <default>default:</default>
          <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
      </block_content>}</block></switch>
    </block_content>}</block></for>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>tColDataCalcSMA</name><index>[]</index>)<parameter_list>(<parameter><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>sum</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>max</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>min</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>numOfNull</name></decl></parameter>)</parameter_list> <init>= <expr><block>{
    <expr><name>NULL</name></expr></block></expr></init><operator>,</operator>
    tColDataCalcSMABool<operator>,</operator>           <comment type="line">// TSDB_DATA_TYPE_BOOL</comment>
    tColDataCalcSMATinyInt<operator>,</operator>        <comment type="line">// TSDB_DATA_TYPE_TINYINT</comment>
    tColDataCalcSMATinySmallInt<operator>,</operator>   <comment type="line">// TSDB_DATA_TYPE_SMALLINT</comment>
    tColDataCalcSMAInt<operator>,</operator>            <comment type="line">// TSDB_DATA_TYPE_INT</comment>
    tColDataCalcSMABigInt<operator>,</operator>         <comment type="line">// TSDB_DATA_TYPE_BIGINT</comment>
    tColDataCalcSMAFloat<operator>,</operator>          <comment type="line">// TSDB_DATA_TYPE_FLOAT</comment>
    tColDataCalcSMADouble<operator>,</operator>         <comment type="line">// TSDB_DATA_TYPE_DOUBLE</comment>
    NULL<operator>,</operator>                          <comment type="line">// TSDB_DATA_TYPE_VARCHAR</comment>
    tColDataCalcSMABigInt<operator>,</operator>         <comment type="line">// TSDB_DATA_TYPE_TIMESTAMP</comment>
    NULL<operator>,</operator>                          <comment type="line">// TSDB_DATA_TYPE_NCHAR</comment>
    tColDataCalcSMAUTinyInt<operator>,</operator>       <comment type="line">// TSDB_DATA_TYPE_UTINYINT</comment>
    tColDataCalcSMATinyUSmallInt<operator>,</operator>  <comment type="line">// TSDB_DATA_TYPE_USMALLINT</comment>
    tColDataCalcSMAUInt<operator>,</operator>           <comment type="line">// TSDB_DATA_TYPE_UINT</comment>
    tColDataCalcSMAUBigInt<operator>,</operator>        <comment type="line">// TSDB_DATA_TYPE_UBIGINT</comment>
    NULL<operator>,</operator>                          <comment type="line">// TSDB_DATA_TYPE_JSON</comment>
    NULL<operator>,</operator>                          <comment type="line">// TSDB_DATA_TYPE_VARBINARY</comment>
    NULL<operator>,</operator>                          <comment type="line">// TSDB_DATA_TYPE_DECIMAL</comment>
    NULL<operator>,</operator>                          <comment type="line">// TSDB_DATA_TYPE_BLOB</comment>
    NULL</function_decl>                           <comment type="line">// TSDB_DATA_TYPE_MEDIUMBLOB</comment>
};
</unit>
