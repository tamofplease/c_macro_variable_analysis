<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/common/src/tglobal.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tglobal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tconfig.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tgrant.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tmisce.h"</cpp:file></cpp:include>

<expr_stmt><expr><name>GRANT_CFG_DECLARE</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>SConfig</name> <modifier>*</modifier></type><name>tsCfg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="line">// cluster</comment>
<decl_stmt><decl><type><name>char</name></type>     <name><name>tsFirst</name><index>[<expr><name>TSDB_EP_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type>     <name><name>tsSecond</name><index>[<expr><name>TSDB_EP_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type>     <name><name>tsLocalFqdn</name><index>[<expr><name>TSDB_FQDN_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type>     <name><name>tsLocalEp</name><index>[<expr><name>TSDB_EP_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>  <comment type="line">// Local End Point, hostname:port</comment>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>tsServerPort</name> <init>= <expr><literal type="number">6030</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type>  <name>tsVersion</name> <init>= <expr><literal type="number">30000000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type>  <name>tsStatusInterval</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>  <comment type="line">// second</comment>
<decl_stmt><decl><type><name>int32_t</name></type>  <name>tsNumOfSupportVnodes</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>;</decl_stmt>

<comment type="line">// common</comment>
<decl_stmt><decl><type><name>int32_t</name></type> <name>tsMaxShellConns</name> <init>= <expr><literal type="number">50000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>tsShellActivityTimer</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>  <comment type="line">// second</comment>
<decl_stmt><decl><type><name>bool</name></type>    <name>tsPrintAuth</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<comment type="line">// queue &amp; threads</comment>
<decl_stmt><decl><type><name>int32_t</name></type> <name>tsNumOfRpcThreads</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>tsNumOfCommitThreads</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>tsNumOfTaskQueueThreads</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>tsNumOfMnodeQueryThreads</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>tsNumOfMnodeFetchThreads</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>tsNumOfMnodeReadThreads</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>tsNumOfVnodeQueryThreads</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>tsNumOfVnodeStreamThreads</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>tsNumOfVnodeFetchThreads</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>tsNumOfVnodeRsmaThreads</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>tsNumOfQnodeQueryThreads</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>tsNumOfQnodeFetchThreads</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>tsNumOfSnodeStreamThreads</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>tsNumOfSnodeWriteThreads</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<comment type="line">// sync raft</comment>
<decl_stmt><decl><type><name>int32_t</name></type> <name>tsElectInterval</name> <init>= <expr><literal type="number">25</literal> <operator>*</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>tsHeartbeatInterval</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>tsHeartbeatTimeout</name> <init>= <expr><literal type="number">20</literal> <operator>*</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>

<comment type="line">// monitor</comment>
<decl_stmt><decl><type><name>bool</name></type>     <name>tsEnableMonitor</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type>  <name>tsMonitorInterval</name> <init>= <expr><literal type="number">30</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type>     <name><name>tsMonitorFqdn</name><index>[<expr><name>TSDB_FQDN_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>tsMonitorPort</name> <init>= <expr><literal type="number">6043</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type>  <name>tsMonitorMaxLogs</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>     <name>tsMonitorComp</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<comment type="line">// telem</comment>
<decl_stmt><decl><type><name>bool</name></type>     <name>tsEnableTelem</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type>  <name>tsTelemInterval</name> <init>= <expr><literal type="number">43200</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type>     <name><name>tsTelemServer</name><index>[<expr><name>TSDB_FQDN_LEN</name></expr>]</index></name> <init>= <expr><literal type="string">"telemetry.taosdata.com"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>tsTelemPort</name> <init>= <expr><literal type="number">80</literal></expr></init></decl>;</decl_stmt>

<comment type="line">// schemaless</comment>
<decl_stmt><decl><type><name>char</name></type> <name><name>tsSmlTagName</name><index>[<expr><name>TSDB_COL_NAME_LEN</name></expr>]</index></name> <init>= <expr><literal type="string">"_tag_null"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>tsSmlChildTableName</name><index>[<expr><name>TSDB_TABLE_NAME_LEN</name></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>  <comment type="line">// user defined child table name can be specified in tag value.</comment>
                                                     <comment type="line">// If set to empty system will generate table name using MD5 hash.</comment>
<comment type="line">// true means that the name and order of cols in each line are the same(only for influx protocol)</comment>
<decl_stmt><decl><type><name>bool</name></type>    <name>tsSmlDataFormat</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>tsSmlBatchSize</name> <init>= <expr><literal type="number">10000</literal></expr></init></decl>;</decl_stmt>

<comment type="line">// query</comment>
<decl_stmt><decl><type><name>int32_t</name></type> <name>tsQueryPolicy</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>tsQueryRspPolicy</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>    <name>tsEnableQueryHb</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>tsQuerySmaOptimize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>tsQueryRsmaTolerance</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>  <comment type="line">// the tolerance time (ms) to judge from which level to query rsma data.</comment>
<decl_stmt><decl><type><name>bool</name></type>    <name>tsQueryPlannerTrace</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>tsQueryNodeChunkSize</name> <init>= <expr><literal type="number">32</literal> <operator>*</operator> <literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>    <name>tsQueryUseNodeAllocator</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>    <name>tsKeepColumnName</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>tsRedirectPeriod</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>tsRedirectFactor</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>tsRedirectMaxPeriod</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>tsMaxRetryWaitTime</name> <init>= <expr><literal type="number">10000</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * denote if the server needs to compress response message at the application layer to client, including query rsp,
 * metricmeta rsp, and multi-meter query rsp message body. The client compress the submit message to server.
 *
 * 0: all data are compressed
 * -1: all data are not compressed
 * other values: if the message payload size is greater than the tsCompressMsgSize, the message will be compressed.
 */</comment>
<decl_stmt><decl><type><name>int32_t</name></type> <name>tsCompressMsgSize</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/* denote if server needs to compress the retrieved column data before adding to the rpc response message body.
 * 0: all data are compressed
 * -1: all data are not compressed
 * other values: if any retrieved column size is greater than the tsCompressColData, all data will be compressed.
 */</comment>
<decl_stmt><decl><type><name>int32_t</name></type> <name>tsCompressColData</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<comment type="line">// count/hyperloglog function always return values in case of all NULL data or Empty data set.</comment>
<decl_stmt><decl><type><name>int32_t</name></type> <name>tsCountAlwaysReturnValue</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<comment type="line">// 10 ms for sliding time, the value will changed in case of time precision changed</comment>
<decl_stmt><decl><type><name>int32_t</name></type> <name>tsMinSlidingTime</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<comment type="line">// the maxinum number of distict query result</comment>
<decl_stmt><decl><type><name>int32_t</name></type> <name>tsMaxNumOfDistinctResults</name> <init>= <expr><literal type="number">1000</literal> <operator>*</operator> <literal type="number">10000</literal></expr></init></decl>;</decl_stmt>

<comment type="line">// 1 database precision unit for interval time range, changed accordingly</comment>
<decl_stmt><decl><type><name>int32_t</name></type> <name>tsMinIntervalTime</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<comment type="line">// maximum memory allowed to be allocated for a single csv load (in MB)</comment>
<decl_stmt><decl><type><name>int32_t</name></type> <name>tsMaxMemUsedByInsert</name> <init>= <expr><literal type="number">1024</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type>   <name>tsSelectivityRatio</name> <init>= <expr><literal type="number">1.0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>tsTagFilterResCacheSize</name> <init>= <expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<comment type="line">// the maximum allowed query buffer size during query processing for each data node.</comment>
<comment type="line">// -1 no limit (default)</comment>
<comment type="line">// 0  no query allowed, queries are disabled</comment>
<comment type="line">// positive value (in MB)</comment>
<decl_stmt><decl><type><name>int32_t</name></type> <name>tsQueryBufferSize</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>tsQueryBufferSizeBytes</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type>  <name>tsDiskCfgNum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SDiskCfg</name></type> <name><name>tsDiskCfg</name><index>[<expr><name>TFS_MAX_DISKS</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<comment type="line">// stream scheduler</comment>
<decl_stmt><decl><type><name>bool</name></type> <name>tsDeployOnSnode</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * minimum scale for whole system, millisecond by default
 * for TSDB_TIME_PRECISION_MILLI: 60000L
 *     TSDB_TIME_PRECISION_MICRO: 60000000L
 *     TSDB_TIME_PRECISION_NANO:  60000000000L
 */</comment>
<decl_stmt><decl><type><name>int64_t</name></type> <name><name>tsTickPerMin</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">60000L</literal></expr>, <expr><literal type="number">60000000L</literal></expr>, <expr><literal type="number">60000000000L</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<comment type="line">// lossy compress 6</comment>
<decl_stmt><decl><type><name>char</name></type> <name><name>tsLossyColumns</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>  <comment type="line">// "float|double" means all float and double columns can be lossy compressed.  set empty</comment>
                               <comment type="line">// can close lossy compress.</comment>
<comment type="line">// below option can take effect when tsLossyColumns not empty</comment>
<decl_stmt><decl><type><name>double</name></type>   <name>tsFPrecision</name> <init>= <expr><literal type="number">1E</literal><operator>-</operator><literal type="number">8</literal></expr></init></decl>;</decl_stmt>                   <comment type="line">// float column precision</comment>
<decl_stmt><decl><type><name>double</name></type>   <name>tsDPrecision</name> <init>= <expr><literal type="number">1E</literal><operator>-</operator><literal type="number">16</literal></expr></init></decl>;</decl_stmt>                  <comment type="line">// double column precision</comment>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>tsMaxRange</name> <init>= <expr><literal type="number">500</literal></expr></init></decl>;</decl_stmt>                      <comment type="line">// max range</comment>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>tsCurRange</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>                      <comment type="line">// range</comment>
<decl_stmt><decl><type><name>char</name></type>     <name><name>tsCompressor</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><literal type="string">"ZSTD_COMPRESSOR"</literal></expr></init></decl>;</decl_stmt>  <comment type="line">// ZSTD_COMPRESSOR or GZIP_COMPRESSOR</comment>

<comment type="line">// udf</comment>
<decl_stmt><decl><type><name>bool</name></type> <name>tsStartUdfd</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<comment type="line">// wal</comment>
<decl_stmt><decl><type><name>int64_t</name></type> <name>tsWalFsyncDataSizeLimit</name> <init>= <expr><operator>(</operator><literal type="number">100</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024L</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<comment type="line">// internal</comment>
<decl_stmt><decl><type><name>int32_t</name></type> <name>tsTransPullupInterval</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>tsMqRebalanceInterval</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>tsStreamCheckpointTickInterval</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>tsTtlUnit</name> <init>= <expr><literal type="number">86400</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>tsTtlPushInterval</name> <init>= <expr><literal type="number">86400</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>tsGrantHBInterval</name> <init>= <expr><literal type="number">60</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>tsUptimeInterval</name> <init>= <expr><literal type="number">300</literal></expr></init></decl>;</decl_stmt>    <comment type="line">// seconds</comment>
<decl_stmt><decl><type><name>char</name></type>    <name><name>tsUdfdResFuncs</name><index>[<expr><literal type="number">512</literal></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>  <comment type="line">// udfd resident funcs that teardown when udfd exits</comment>
<decl_stmt><decl><type><name>char</name></type>    <name><name>tsUdfdLdLibPath</name><index>[<expr><literal type="number">512</literal></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>tsRpcRetryLimit</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>tsRpcRetryInterval</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_STORAGE</name></cpp:ifndef>
<function><type><name>int32_t</name></type> <name>taosSetTfsCfg</name><parameter_list>(<parameter><decl><type><name>SConfig</name> <modifier>*</modifier></type><name>pCfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SConfigItem</name> <modifier>*</modifier></type><name>pItem</name> <init>= <expr><call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"dataDir"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tsDataDir</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PATH_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>array</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>tsDiskCfgNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>tsDiskCfg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>dir</name></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>TSDB_FILENAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tsDiskCfg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>level</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tsDiskCfg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>primary</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name>tsDataDir</name></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>PATH_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taosMulMkDir</name><argument_list>(<argument><expr><name>tsDataDir</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"failed to create dataDir:%s"</literal></expr></argument>, <argument><expr><name>tsDataDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function_decl><type><name>int32_t</name></type> <name>taosSetTfsCfg</name><parameter_list>(<parameter><decl><type><name>SConfig</name> <modifier>*</modifier></type><name>pCfg</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name><name>struct</name> <name>SConfig</name></name> <modifier>*</modifier></type><name>taosGetCfg</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>tsCfg</name></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>taosLoadCfg</name><parameter_list>(<parameter><decl><type><name>SConfig</name> <modifier>*</modifier></type><name>pCfg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>envCmd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>inputCfgDir</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>envFile</name></decl></parameter>,
                           <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>apolloUrl</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>cfgDir</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>cfgFile</name><index>[<expr><name>PATH_MAX</name> <operator>+</operator> <literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosExpandDir</name><argument_list>(<argument><expr><name>inputCfgDir</name></expr></argument>, <argument><expr><name>cfgDir</name></expr></argument>, <argument><expr><name>PATH_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taosIsDir</name><argument_list>(<argument><expr><name>cfgDir</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>cfgFile</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cfgFile</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal> <name>TD_DIRSEP</name> <literal type="string">"taos.cfg"</literal></expr></argument>, <argument><expr><name>cfgDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name>cfgFile</name></expr></argument>, <argument><expr><name>cfgDir</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cfgDir</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>apolloUrl</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>apolloUrl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>cfgGetApollUrl</name><argument_list>(<argument><expr><name>envCmd</name></expr></argument>, <argument><expr><name>envFile</name></expr></argument>, <argument><expr><name>apolloUrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>cfgLoad</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><name>CFG_STYPE_APOLLO_URL</name></expr></argument>, <argument><expr><name>apolloUrl</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"failed to load from apollo url:%s since %s"</literal></expr></argument>, <argument><expr><name>apolloUrl</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>cfgLoad</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><name>CFG_STYPE_CFG_FILE</name></expr></argument>, <argument><expr><name>cfgFile</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"failed to load from cfg file:%s since %s"</literal></expr></argument>, <argument><expr><name>cfgFile</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>cfgLoad</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><name>CFG_STYPE_ENV_FILE</name></expr></argument>, <argument><expr><name>envFile</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"failed to load from env file:%s since %s"</literal></expr></argument>, <argument><expr><name>envFile</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>cfgLoad</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><name>CFG_STYPE_ENV_VAR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"failed to load from global env variables since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>cfgLoad</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><name>CFG_STYPE_ENV_CMD</name></expr></argument>, <argument><expr><name>envCmd</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"failed to load from cmd env variables since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosAddClientLogCfg</name><parameter_list>(<parameter><decl><type><name>SConfig</name> <modifier>*</modifier></type><name>pCfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddDir</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"configDir"</literal></expr></argument>, <argument><expr><name>configDir</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddDir</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"scriptDir"</literal></expr></argument>, <argument><expr><name>configDir</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddDir</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"logDir"</literal></expr></argument>, <argument><expr><name>tsLogDir</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddFloat</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"minimalLogDirGB"</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">0.001f</literal></expr></argument>, <argument><expr><literal type="number">10000000</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"numOfLogLines"</literal></expr></argument>, <argument><expr><name>tsNumOfLogLines</name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><literal type="number">2000000000</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddBool</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"asyncLog"</literal></expr></argument>, <argument><expr><name>tsAsyncLog</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"logKeepDays"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">365000</literal></expr></argument>, <argument><expr><literal type="number">365000</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"debugFlag"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"simDebugFlag"</literal></expr></argument>, <argument><expr><literal type="number">143</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"tmrDebugFlag"</literal></expr></argument>, <argument><expr><name>tmrDebugFlag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"uDebugFlag"</literal></expr></argument>, <argument><expr><name>uDebugFlag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"rpcDebugFlag"</literal></expr></argument>, <argument><expr><name>rpcDebugFlag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"jniDebugFlag"</literal></expr></argument>, <argument><expr><name>jniDebugFlag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"qDebugFlag"</literal></expr></argument>, <argument><expr><name>qDebugFlag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"cDebugFlag"</literal></expr></argument>, <argument><expr><name>cDebugFlag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>taosAddServerLogCfg</name><parameter_list>(<parameter><decl><type><name>SConfig</name> <modifier>*</modifier></type><name>pCfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"dDebugFlag"</literal></expr></argument>, <argument><expr><name>dDebugFlag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"vDebugFlag"</literal></expr></argument>, <argument><expr><name>vDebugFlag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"mDebugFlag"</literal></expr></argument>, <argument><expr><name>mDebugFlag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"wDebugFlag"</literal></expr></argument>, <argument><expr><name>wDebugFlag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"sDebugFlag"</literal></expr></argument>, <argument><expr><name>sDebugFlag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"tsdbDebugFlag"</literal></expr></argument>, <argument><expr><name>tsdbDebugFlag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"tqDebugFlag"</literal></expr></argument>, <argument><expr><name>tqDebugFlag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"fsDebugFlag"</literal></expr></argument>, <argument><expr><name>fsDebugFlag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"udfDebugFlag"</literal></expr></argument>, <argument><expr><name>udfDebugFlag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"smaDebugFlag"</literal></expr></argument>, <argument><expr><name>smaDebugFlag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"idxDebugFlag"</literal></expr></argument>, <argument><expr><name>idxDebugFlag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"tdbDebugFlag"</literal></expr></argument>, <argument><expr><name>tdbDebugFlag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"metaDebugFlag"</literal></expr></argument>, <argument><expr><name>metaDebugFlag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>taosAddClientCfg</name><parameter_list>(<parameter><decl><type><name>SConfig</name> <modifier>*</modifier></type><name>pCfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>defaultFqdn</name><index>[<expr><name>TSDB_FQDN_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>defaultServerPort</name> <init>= <expr><literal type="number">6030</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taosGetFqdn</name><argument_list>(<argument><expr><name>defaultFqdn</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>defaultFqdn</name></expr></argument>, <argument><expr><literal type="string">"localhost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>cfgAddString</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"firstEp"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddString</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"secondEp"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddString</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"fqdn"</literal></expr></argument>, <argument><expr><name>defaultFqdn</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"serverPort"</literal></expr></argument>, <argument><expr><name>defaultServerPort</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">65056</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddDir</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"tempDir"</literal></expr></argument>, <argument><expr><name>tsTempDir</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddFloat</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"minimalTmpDirGB"</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">0.001f</literal></expr></argument>, <argument><expr><literal type="number">10000000</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"shellActivityTimer"</literal></expr></argument>, <argument><expr><name>tsShellActivityTimer</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">120</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"compressMsgSize"</literal></expr></argument>, <argument><expr><name>tsCompressMsgSize</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">100000000</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"compressColData"</literal></expr></argument>, <argument><expr><name>tsCompressColData</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">100000000</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"queryPolicy"</literal></expr></argument>, <argument><expr><name>tsQueryPolicy</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddBool</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"enableQueryHb"</literal></expr></argument>, <argument><expr><name>tsEnableQueryHb</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"querySmaOptimize"</literal></expr></argument>, <argument><expr><name>tsQuerySmaOptimize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddBool</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"queryPlannerTrace"</literal></expr></argument>, <argument><expr><name>tsQueryPlannerTrace</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"queryNodeChunkSize"</literal></expr></argument>, <argument><expr><name>tsQueryNodeChunkSize</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">128</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddBool</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"queryUseNodeAllocator"</literal></expr></argument>, <argument><expr><name>tsQueryUseNodeAllocator</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddBool</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"keepColumnName"</literal></expr></argument>, <argument><expr><name>tsKeepColumnName</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddString</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"smlChildTableName"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddString</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"smlTagName"</literal></expr></argument>, <argument><expr><name>tsSmlTagName</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddBool</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"smlDataFormat"</literal></expr></argument>, <argument><expr><name>tsSmlDataFormat</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"smlBatchSize"</literal></expr></argument>, <argument><expr><name>tsSmlBatchSize</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>INT32_MAX</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"maxMemUsedByInsert"</literal></expr></argument>, <argument><expr><name>tsMaxMemUsedByInsert</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>INT32_MAX</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"rpcRetryLimit"</literal></expr></argument>, <argument><expr><name>tsRpcRetryLimit</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">100000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"rpcRetryInterval"</literal></expr></argument>, <argument><expr><name>tsRpcRetryInterval</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">100000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"maxRetryWaitTime"</literal></expr></argument>, <argument><expr><name>tsMaxRetryWaitTime</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">86400000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>tsNumOfTaskQueueThreads</name> <operator>=</operator> <name>tsNumOfCores</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsNumOfTaskQueueThreads</name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name>tsNumOfTaskQueueThreads</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>tsNumOfTaskQueueThreads</name> <operator>&gt;=</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>tsNumOfTaskQueueThreads</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"numOfTaskQueueThreads"</literal></expr></argument>, <argument><expr><name>tsNumOfTaskQueueThreads</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>taosAddSystemCfg</name><parameter_list>(<parameter><decl><type><name>SConfig</name> <modifier>*</modifier></type><name>pCfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SysNameInfo</name></type> <name>info</name> <init>= <expr><call><name>taosGetSysNameInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>cfgAddTimezone</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"timezone"</literal></expr></argument>, <argument><expr><name>tsTimezoneStr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddLocale</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"locale"</literal></expr></argument>, <argument><expr><name>tsLocale</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddCharset</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"charset"</literal></expr></argument>, <argument><expr><name>tsCharset</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddBool</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"assert"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddBool</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"enableCoreFile"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddFloat</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"numOfCores"</literal></expr></argument>, <argument><expr><name>tsNumOfCores</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">100000</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>cfgAddBool</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"SSE42"</literal></expr></argument>, <argument><expr><name>tsSSE42Enable</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddBool</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"AVX"</literal></expr></argument>, <argument><expr><name>tsAVXEnable</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddBool</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"AVX2"</literal></expr></argument>, <argument><expr><name>tsAVX2Enable</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddBool</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"FMA"</literal></expr></argument>, <argument><expr><name>tsFMAEnable</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddBool</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"SIMD-Supported"</literal></expr></argument>, <argument><expr><name>tsSIMDEnable</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt64</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"openMax"</literal></expr></argument>, <argument><expr><name>tsOpenMax</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INT64_MAX</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt64</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"streamMax"</literal></expr></argument>, <argument><expr><name>tsStreamMax</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INT64_MAX</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"pageSizeKB"</literal></expr></argument>, <argument><expr><name>tsPageSizeKB</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INT64_MAX</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt64</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"totalMemoryKB"</literal></expr></argument>, <argument><expr><name>tsTotalMemoryKB</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INT64_MAX</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddString</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"os sysname"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>sysname</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddString</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"os nodename"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>nodename</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddString</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"os release"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>release</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddString</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"os version"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>version</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddString</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"os machine"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>machine</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>cfgAddString</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"version"</literal></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddString</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"compatible_version"</literal></expr></argument>, <argument><expr><name>compatible_version</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddString</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"gitinfo"</literal></expr></argument>, <argument><expr><name>gitinfo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddString</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"buildinfo"</literal></expr></argument>, <argument><expr><name>buildinfo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>taosAddServerCfg</name><parameter_list>(<parameter><decl><type><name>SConfig</name> <modifier>*</modifier></type><name>pCfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddDir</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"dataDir"</literal></expr></argument>, <argument><expr><name>tsDataDir</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddFloat</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"minimalDataDirGB"</literal></expr></argument>, <argument><expr><literal type="number">2.0f</literal></expr></argument>, <argument><expr><literal type="number">0.001f</literal></expr></argument>, <argument><expr><literal type="number">10000000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>tsNumOfSupportVnodes</name> <operator>=</operator> <name>tsNumOfCores</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsNumOfSupportVnodes</name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name>tsNumOfSupportVnodes</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"supportVnodes"</literal></expr></argument>, <argument><expr><name>tsNumOfSupportVnodes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"maxShellConns"</literal></expr></argument>, <argument><expr><name>tsMaxShellConns</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">50000000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"statusInterval"</literal></expr></argument>, <argument><expr><name>tsStatusInterval</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"minSlidingTime"</literal></expr></argument>, <argument><expr><name>tsMinSlidingTime</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">1000000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"minIntervalTime"</literal></expr></argument>, <argument><expr><name>tsMinIntervalTime</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1000000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"maxNumOfDistinctRes"</literal></expr></argument>, <argument><expr><name>tsMaxNumOfDistinctResults</name></expr></argument>, <argument><expr><literal type="number">10</literal> <operator>*</operator> <literal type="number">10000</literal></expr></argument>, <argument><expr><literal type="number">10000</literal> <operator>*</operator> <literal type="number">10000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"countAlwaysReturnValue"</literal></expr></argument>, <argument><expr><name>tsCountAlwaysReturnValue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"queryBufferSize"</literal></expr></argument>, <argument><expr><name>tsQueryBufferSize</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">500000000000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddBool</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"printAuth"</literal></expr></argument>, <argument><expr><name>tsPrintAuth</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"queryRspPolicy"</literal></expr></argument>, <argument><expr><name>tsQueryRspPolicy</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>tsNumOfRpcThreads</name> <operator>=</operator> <name>tsNumOfCores</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsNumOfRpcThreads</name> <operator>=</operator> <call><name>TRANGE</name><argument_list>(<argument><expr><name>tsNumOfRpcThreads</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"numOfRpcThreads"</literal></expr></argument>, <argument><expr><name>tsNumOfRpcThreads</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>tsNumOfCommitThreads</name> <operator>=</operator> <name>tsNumOfCores</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsNumOfCommitThreads</name> <operator>=</operator> <call><name>TRANGE</name><argument_list>(<argument><expr><name>tsNumOfCommitThreads</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"numOfCommitThreads"</literal></expr></argument>, <argument><expr><name>tsNumOfCommitThreads</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>tsNumOfMnodeReadThreads</name> <operator>=</operator> <name>tsNumOfCores</name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsNumOfMnodeReadThreads</name> <operator>=</operator> <call><name>TRANGE</name><argument_list>(<argument><expr><name>tsNumOfMnodeReadThreads</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"numOfMnodeReadThreads"</literal></expr></argument>, <argument><expr><name>tsNumOfMnodeReadThreads</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>tsNumOfVnodeQueryThreads</name> <operator>=</operator> <name>tsNumOfCores</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsNumOfVnodeQueryThreads</name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name>tsNumOfVnodeQueryThreads</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"numOfVnodeQueryThreads"</literal></expr></argument>, <argument><expr><name>tsNumOfVnodeQueryThreads</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>tsNumOfVnodeStreamThreads</name> <operator>=</operator> <name>tsNumOfCores</name> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsNumOfVnodeStreamThreads</name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name>tsNumOfVnodeStreamThreads</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"numOfVnodeStreamThreads"</literal></expr></argument>, <argument><expr><name>tsNumOfVnodeStreamThreads</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>tsNumOfVnodeFetchThreads</name> <operator>=</operator> <name>tsNumOfCores</name> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsNumOfVnodeFetchThreads</name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name>tsNumOfVnodeFetchThreads</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"numOfVnodeFetchThreads"</literal></expr></argument>, <argument><expr><name>tsNumOfVnodeFetchThreads</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>tsNumOfVnodeRsmaThreads</name> <operator>=</operator> <name>tsNumOfCores</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsNumOfVnodeRsmaThreads</name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name>tsNumOfVnodeRsmaThreads</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"numOfVnodeRsmaThreads"</literal></expr></argument>, <argument><expr><name>tsNumOfVnodeRsmaThreads</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>tsNumOfQnodeQueryThreads</name> <operator>=</operator> <name>tsNumOfCores</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsNumOfQnodeQueryThreads</name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name>tsNumOfQnodeQueryThreads</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"numOfQnodeQueryThreads"</literal></expr></argument>, <argument><expr><name>tsNumOfQnodeQueryThreads</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <comment type="line">//  tsNumOfQnodeFetchThreads = tsNumOfCores / 2;</comment>
  <comment type="line">//  tsNumOfQnodeFetchThreads = TMAX(tsNumOfQnodeFetchThreads, 4);</comment>
  <comment type="line">//  if (cfgAddInt32(pCfg, "numOfQnodeFetchThreads", tsNumOfQnodeFetchThreads, 1, 1024, 0) != 0) return -1;</comment>

  <expr_stmt><expr><name>tsNumOfSnodeStreamThreads</name> <operator>=</operator> <name>tsNumOfCores</name> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsNumOfSnodeStreamThreads</name> <operator>=</operator> <call><name>TRANGE</name><argument_list>(<argument><expr><name>tsNumOfSnodeStreamThreads</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"numOfSnodeSharedThreads"</literal></expr></argument>, <argument><expr><name>tsNumOfSnodeStreamThreads</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>tsNumOfSnodeWriteThreads</name> <operator>=</operator> <name>tsNumOfCores</name> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsNumOfSnodeWriteThreads</name> <operator>=</operator> <call><name>TRANGE</name><argument_list>(<argument><expr><name>tsNumOfSnodeWriteThreads</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"numOfSnodeUniqueThreads"</literal></expr></argument>, <argument><expr><name>tsNumOfSnodeWriteThreads</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>tsRpcQueueMemoryAllowed</name> <operator>=</operator> <name>tsTotalMemoryKB</name> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">0.1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsRpcQueueMemoryAllowed</name> <operator>=</operator> <call><name>TRANGE</name><argument_list>(<argument><expr><name>tsRpcQueueMemoryAllowed</name></expr></argument>, <argument><expr><name>TSDB_MAX_MSG_SIZE</name> <operator>*</operator> <literal type="number">10LL</literal></expr></argument>, <argument><expr><name>TSDB_MAX_MSG_SIZE</name> <operator>*</operator> <literal type="number">10000LL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt64</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"rpcQueueMemoryAllowed"</literal></expr></argument>, <argument><expr><name>tsRpcQueueMemoryAllowed</name></expr></argument>, <argument><expr><name>TSDB_MAX_MSG_SIZE</name> <operator>*</operator> <literal type="number">10L</literal></expr></argument>, <argument><expr><name>INT64_MAX</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"syncElectInterval"</literal></expr></argument>, <argument><expr><name>tsElectInterval</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">1000</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">24</literal> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"syncHeartbeatInterval"</literal></expr></argument>, <argument><expr><name>tsHeartbeatInterval</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">1000</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">24</literal> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"syncHeartbeatTimeout"</literal></expr></argument>, <argument><expr><name>tsHeartbeatTimeout</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">1000</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">24</literal> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>cfgAddBool</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"monitor"</literal></expr></argument>, <argument><expr><name>tsEnableMonitor</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"monitorInterval"</literal></expr></argument>, <argument><expr><name>tsMonitorInterval</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">200000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddString</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"monitorFqdn"</literal></expr></argument>, <argument><expr><name>tsMonitorFqdn</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"monitorPort"</literal></expr></argument>, <argument><expr><name>tsMonitorPort</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">65056</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"monitorMaxLogs"</literal></expr></argument>, <argument><expr><name>tsMonitorMaxLogs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1000000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddBool</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"monitorComp"</literal></expr></argument>, <argument><expr><name>tsMonitorComp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>cfgAddBool</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"telemetryReporting"</literal></expr></argument>, <argument><expr><name>tsEnableTelem</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"telemetryInterval"</literal></expr></argument>, <argument><expr><name>tsTelemInterval</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">200000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddString</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"telemetryServer"</literal></expr></argument>, <argument><expr><name>tsTelemServer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"telemetryPort"</literal></expr></argument>, <argument><expr><name>tsTelemPort</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">65056</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"transPullupInterval"</literal></expr></argument>, <argument><expr><name>tsTransPullupInterval</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">10000</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"mqRebalanceInterval"</literal></expr></argument>, <argument><expr><name>tsMqRebalanceInterval</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">10000</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"ttlUnit"</literal></expr></argument>, <argument><expr><name>tsTtlUnit</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">86400</literal> <operator>*</operator> <literal type="number">365</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"ttlPushInterval"</literal></expr></argument>, <argument><expr><name>tsTtlPushInterval</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">100000</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"uptimeInterval"</literal></expr></argument>, <argument><expr><name>tsUptimeInterval</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">100000</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"queryRsmaTolerance"</literal></expr></argument>, <argument><expr><name>tsQueryRsmaTolerance</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">900000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt64</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"walFsyncDataSizeLimit"</literal></expr></argument>, <argument><expr><name>tsWalFsyncDataSizeLimit</name></expr></argument>, <argument><expr><literal type="number">100</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><name>INT64_MAX</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>cfgAddBool</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"udf"</literal></expr></argument>, <argument><expr><name>tsStartUdfd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddString</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"udfdResFuncs"</literal></expr></argument>, <argument><expr><name>tsUdfdResFuncs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddString</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"udfdLdLibPath"</literal></expr></argument>, <argument><expr><name>tsUdfdLdLibPath</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"rpcRetryLimit"</literal></expr></argument>, <argument><expr><name>tsRpcRetryLimit</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">100000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cfgAddInt32</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"rpcRetryInterval"</literal></expr></argument>, <argument><expr><name>tsRpcRetryInterval</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">100000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>GRANT_CFG_ADD</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>taosUpdateServerCfg</name><parameter_list>(<parameter><decl><type><name>SConfig</name> <modifier>*</modifier></type><name>pCfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SConfigItem</name> <modifier>*</modifier></type><name>pItem</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ECfgSrcType</name></type>  <name>stype</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>numOfCores</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>      <name>totalMemoryKB</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>pItem</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>tsCfg</name></expr></argument>, <argument><expr><literal type="string">"numOfCores"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pItem</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>stype</name> <operator>=</operator> <name><name>pItem</name><operator>-&gt;</operator><name>stype</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>numOfCores</name> <operator>=</operator> <name><name>pItem</name><operator>-&gt;</operator><name>fval</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name>pItem</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>tsCfg</name></expr></argument>, <argument><expr><literal type="string">"supportVnodes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pItem</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pItem</name><operator>-&gt;</operator><name>stype</name></name> <operator>==</operator> <name>CFG_STYPE_DEFAULT</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>tsNumOfSupportVnodes</name> <operator>=</operator> <name>numOfCores</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>tsNumOfSupportVnodes</name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name>tsNumOfSupportVnodes</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>i32</name></name> <operator>=</operator> <name>tsNumOfSupportVnodes</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>stype</name></name> <operator>=</operator> <name>stype</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pItem</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>tsCfg</name></expr></argument>, <argument><expr><literal type="string">"numOfRpcThreads"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pItem</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pItem</name><operator>-&gt;</operator><name>stype</name></name> <operator>==</operator> <name>CFG_STYPE_DEFAULT</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>tsNumOfRpcThreads</name> <operator>=</operator> <name>numOfCores</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>tsNumOfRpcThreads</name> <operator>=</operator> <call><name>TRANGE</name><argument_list>(<argument><expr><name>tsNumOfRpcThreads</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>i32</name></name> <operator>=</operator> <name>tsNumOfRpcThreads</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>stype</name></name> <operator>=</operator> <name>stype</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pItem</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>tsCfg</name></expr></argument>, <argument><expr><literal type="string">"numOfCommitThreads"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pItem</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pItem</name><operator>-&gt;</operator><name>stype</name></name> <operator>==</operator> <name>CFG_STYPE_DEFAULT</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>tsNumOfCommitThreads</name> <operator>=</operator> <name>numOfCores</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>tsNumOfCommitThreads</name> <operator>=</operator> <call><name>TRANGE</name><argument_list>(<argument><expr><name>tsNumOfCommitThreads</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>i32</name></name> <operator>=</operator> <name>tsNumOfCommitThreads</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>stype</name></name> <operator>=</operator> <name>stype</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pItem</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>tsCfg</name></expr></argument>, <argument><expr><literal type="string">"numOfMnodeReadThreads"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pItem</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pItem</name><operator>-&gt;</operator><name>stype</name></name> <operator>==</operator> <name>CFG_STYPE_DEFAULT</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>tsNumOfMnodeReadThreads</name> <operator>=</operator> <name>numOfCores</name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>tsNumOfMnodeReadThreads</name> <operator>=</operator> <call><name>TRANGE</name><argument_list>(<argument><expr><name>tsNumOfMnodeReadThreads</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>i32</name></name> <operator>=</operator> <name>tsNumOfMnodeReadThreads</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>stype</name></name> <operator>=</operator> <name>stype</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pItem</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>tsCfg</name></expr></argument>, <argument><expr><literal type="string">"numOfVnodeQueryThreads"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pItem</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pItem</name><operator>-&gt;</operator><name>stype</name></name> <operator>==</operator> <name>CFG_STYPE_DEFAULT</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>tsNumOfVnodeQueryThreads</name> <operator>=</operator> <name>numOfCores</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>tsNumOfVnodeQueryThreads</name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name>tsNumOfVnodeQueryThreads</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>i32</name></name> <operator>=</operator> <name>tsNumOfVnodeQueryThreads</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>stype</name></name> <operator>=</operator> <name>stype</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pItem</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>tsCfg</name></expr></argument>, <argument><expr><literal type="string">"numOfVnodeStreamThreads"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pItem</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pItem</name><operator>-&gt;</operator><name>stype</name></name> <operator>==</operator> <name>CFG_STYPE_DEFAULT</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>tsNumOfVnodeStreamThreads</name> <operator>=</operator> <name>numOfCores</name> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>tsNumOfVnodeStreamThreads</name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name>tsNumOfVnodeStreamThreads</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>i32</name></name> <operator>=</operator> <name>tsNumOfVnodeStreamThreads</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>stype</name></name> <operator>=</operator> <name>stype</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pItem</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>tsCfg</name></expr></argument>, <argument><expr><literal type="string">"numOfVnodeFetchThreads"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pItem</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pItem</name><operator>-&gt;</operator><name>stype</name></name> <operator>==</operator> <name>CFG_STYPE_DEFAULT</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>tsNumOfVnodeFetchThreads</name> <operator>=</operator> <name>numOfCores</name> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>tsNumOfVnodeFetchThreads</name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name>tsNumOfVnodeFetchThreads</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>i32</name></name> <operator>=</operator> <name>tsNumOfVnodeFetchThreads</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>stype</name></name> <operator>=</operator> <name>stype</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pItem</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>tsCfg</name></expr></argument>, <argument><expr><literal type="string">"numOfVnodeRsmaThreads"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pItem</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pItem</name><operator>-&gt;</operator><name>stype</name></name> <operator>==</operator> <name>CFG_STYPE_DEFAULT</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>tsNumOfVnodeRsmaThreads</name> <operator>=</operator> <name>numOfCores</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>tsNumOfVnodeRsmaThreads</name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name>tsNumOfVnodeRsmaThreads</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>i32</name></name> <operator>=</operator> <name>tsNumOfVnodeRsmaThreads</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>stype</name></name> <operator>=</operator> <name>stype</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pItem</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>tsCfg</name></expr></argument>, <argument><expr><literal type="string">"numOfQnodeQueryThreads"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pItem</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pItem</name><operator>-&gt;</operator><name>stype</name></name> <operator>==</operator> <name>CFG_STYPE_DEFAULT</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>tsNumOfQnodeQueryThreads</name> <operator>=</operator> <name>numOfCores</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>tsNumOfQnodeQueryThreads</name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name>tsNumOfQnodeQueryThreads</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>i32</name></name> <operator>=</operator> <name>tsNumOfQnodeQueryThreads</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>stype</name></name> <operator>=</operator> <name>stype</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/*
    pItem = cfgGetItem(tsCfg, "numOfQnodeFetchThreads");
    if (pItem != NULL &amp;&amp; pItem-&gt;stype == CFG_STYPE_DEFAULT) {
      tsNumOfQnodeFetchThreads = numOfCores / 2;
      tsNumOfQnodeFetchThreads = TMAX(tsNumOfQnodeFetchThreads, 4);
      pItem-&gt;i32 = tsNumOfQnodeFetchThreads;
      pItem-&gt;stype = stype;
    }
  */</comment>

  <expr_stmt><expr><name>pItem</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>tsCfg</name></expr></argument>, <argument><expr><literal type="string">"numOfSnodeSharedThreads"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pItem</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pItem</name><operator>-&gt;</operator><name>stype</name></name> <operator>==</operator> <name>CFG_STYPE_DEFAULT</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>tsNumOfSnodeStreamThreads</name> <operator>=</operator> <name>numOfCores</name> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>tsNumOfSnodeStreamThreads</name> <operator>=</operator> <call><name>TRANGE</name><argument_list>(<argument><expr><name>tsNumOfSnodeStreamThreads</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>i32</name></name> <operator>=</operator> <name>tsNumOfSnodeStreamThreads</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>stype</name></name> <operator>=</operator> <name>stype</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pItem</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>tsCfg</name></expr></argument>, <argument><expr><literal type="string">"numOfSnodeUniqueThreads"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pItem</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pItem</name><operator>-&gt;</operator><name>stype</name></name> <operator>==</operator> <name>CFG_STYPE_DEFAULT</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>tsNumOfSnodeWriteThreads</name> <operator>=</operator> <name>numOfCores</name> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>tsNumOfSnodeWriteThreads</name> <operator>=</operator> <call><name>TRANGE</name><argument_list>(<argument><expr><name>tsNumOfSnodeWriteThreads</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>i32</name></name> <operator>=</operator> <name>tsNumOfSnodeWriteThreads</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>stype</name></name> <operator>=</operator> <name>stype</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pItem</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>tsCfg</name></expr></argument>, <argument><expr><literal type="string">"totalMemoryKB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pItem</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>stype</name> <operator>=</operator> <name><name>pItem</name><operator>-&gt;</operator><name>stype</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>totalMemoryKB</name> <operator>=</operator> <name><name>pItem</name><operator>-&gt;</operator><name>i64</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name>pItem</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>tsCfg</name></expr></argument>, <argument><expr><literal type="string">"rpcQueueMemoryAllowed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pItem</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pItem</name><operator>-&gt;</operator><name>stype</name></name> <operator>==</operator> <name>CFG_STYPE_DEFAULT</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>tsRpcQueueMemoryAllowed</name> <operator>=</operator> <name>totalMemoryKB</name> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">0.1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>tsRpcQueueMemoryAllowed</name> <operator>=</operator> <call><name>TRANGE</name><argument_list>(<argument><expr><name>tsRpcQueueMemoryAllowed</name></expr></argument>, <argument><expr><name>TSDB_MAX_MSG_SIZE</name> <operator>*</operator> <literal type="number">10LL</literal></expr></argument>, <argument><expr><name>TSDB_MAX_MSG_SIZE</name> <operator>*</operator> <literal type="number">10000LL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>i64</name></name> <operator>=</operator> <name>tsRpcQueueMemoryAllowed</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>stype</name></name> <operator>=</operator> <name>stype</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>taosSetClientLogCfg</name><parameter_list>(<parameter><decl><type><name>SConfig</name> <modifier>*</modifier></type><name>pCfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SConfigItem</name> <modifier>*</modifier></type><name>pItem</name> <init>= <expr><call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"logDir"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name>tsLogDir</name></expr></argument>, <argument><expr><call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"logDir"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>str</name></expr></argument>, <argument><expr><name>PATH_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosExpandDir</name><argument_list>(<argument><expr><name>tsLogDir</name></expr></argument>, <argument><expr><name>tsLogDir</name></expr></argument>, <argument><expr><name>PATH_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tsLogSpace</name><operator>.</operator><name>reserved</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"minimalLogDirGB"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>fval</name><operator>)</operator> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsNumOfLogLines</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"numOfLogLines"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsAsyncLog</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"asyncLog"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>bval</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsLogKeepDays</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"logKeepDays"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tmrDebugFlag</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"tmrDebugFlag"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>uDebugFlag</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"uDebugFlag"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>jniDebugFlag</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"jniDebugFlag"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>rpcDebugFlag</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"rpcDebugFlag"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>qDebugFlag</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"qDebugFlag"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>cDebugFlag</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"cDebugFlag"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>taosSetServerLogCfg</name><parameter_list>(<parameter><decl><type><name>SConfig</name> <modifier>*</modifier></type><name>pCfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>dDebugFlag</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"dDebugFlag"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>vDebugFlag</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"vDebugFlag"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>mDebugFlag</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"mDebugFlag"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>wDebugFlag</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"wDebugFlag"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>sDebugFlag</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"sDebugFlag"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsdbDebugFlag</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"tsdbDebugFlag"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tqDebugFlag</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"tqDebugFlag"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>fsDebugFlag</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"fsDebugFlag"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>udfDebugFlag</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"udfDebugFlag"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>smaDebugFlag</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"smaDebugFlag"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>idxDebugFlag</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"idxDebugFlag"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tdbDebugFlag</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"tdbDebugFlag"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>metaDebugFlag</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"metaDebugFlag"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>taosSetClientCfg</name><parameter_list>(<parameter><decl><type><name>SConfig</name> <modifier>*</modifier></type><name>pCfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name>tsLocalFqdn</name></expr></argument>, <argument><expr><call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"fqdn"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>str</name></expr></argument>, <argument><expr><name>TSDB_FQDN_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsServerPort</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"serverPort"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>tsLocalEp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tsLocalEp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s:%u"</literal></expr></argument>, <argument><expr><name>tsLocalFqdn</name></expr></argument>, <argument><expr><name>tsServerPort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>defaultFirstEp</name><index>[<expr><name>TSDB_EP_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>defaultFirstEp</name></expr></argument>, <argument><expr><name>TSDB_EP_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s:%u"</literal></expr></argument>, <argument><expr><name>tsLocalFqdn</name></expr></argument>, <argument><expr><name>tsServerPort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SConfigItem</name> <modifier>*</modifier></type><name>pFirstEpItem</name> <init>= <expr><call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"firstEp"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SEp</name></type>          <name>firstEp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosGetFqdnPortFromEp</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pFirstEpItem</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>defaultFirstEp</name></expr> </then><else>: <expr><name><name>pFirstEpItem</name><operator>-&gt;</operator><name>str</name></name></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>firstEp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>tsFirst</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tsFirst</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s:%u"</literal></expr></argument>, <argument><expr><name><name>firstEp</name><operator>.</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name><name>firstEp</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>cfgSetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"firstEp"</literal></expr></argument>, <argument><expr><name>tsFirst</name></expr></argument>, <argument><expr><name><name>pFirstEpItem</name><operator>-&gt;</operator><name>stype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SConfigItem</name> <modifier>*</modifier></type><name>pSecondpItem</name> <init>= <expr><call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"secondEp"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SEp</name></type>          <name>secondEp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosGetFqdnPortFromEp</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pSecondpItem</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>defaultFirstEp</name></expr> </then><else>: <expr><name><name>pSecondpItem</name><operator>-&gt;</operator><name>str</name></name></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>secondEp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>tsSecond</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tsSecond</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s:%u"</literal></expr></argument>, <argument><expr><name><name>secondEp</name><operator>.</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name><name>secondEp</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>cfgSetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"secondEp"</literal></expr></argument>, <argument><expr><name>tsSecond</name></expr></argument>, <argument><expr><name><name>pSecondpItem</name><operator>-&gt;</operator><name>stype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name>tsTempDir</name></expr></argument>, <argument><expr><call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"tempDir"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>str</name></expr></argument>, <argument><expr><name>PATH_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosExpandDir</name><argument_list>(<argument><expr><name>tsTempDir</name></expr></argument>, <argument><expr><name>tsTempDir</name></expr></argument>, <argument><expr><name>PATH_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tsTempSpace</name><operator>.</operator><name>reserved</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"minimalTmpDirGB"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>fval</name><operator>)</operator> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal><operator>)</operator></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taosMulMkDir</name><argument_list>(<argument><expr><name>tsTempDir</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"failed to create tempDir:%s since %s"</literal></expr></argument>, <argument><expr><name>tsTempDir</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name>tsSmlChildTableName</name></expr></argument>, <argument><expr><call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"smlChildTableName"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>str</name></expr></argument>, <argument><expr><name>TSDB_TABLE_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name>tsSmlTagName</name></expr></argument>, <argument><expr><call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"smlTagName"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>str</name></expr></argument>, <argument><expr><name>TSDB_COL_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsSmlDataFormat</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"smlDataFormat"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>bval</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>tsSmlBatchSize</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"smlBatchSize"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsMaxMemUsedByInsert</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"maxMemUsedByInsert"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>tsShellActivityTimer</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"shellActivityTimer"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsCompressMsgSize</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"compressMsgSize"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsCompressColData</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"compressColData"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsNumOfTaskQueueThreads</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"numOfTaskQueueThreads"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsQueryPolicy</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"queryPolicy"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsEnableQueryHb</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"enableQueryHb"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>bval</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsQuerySmaOptimize</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"querySmaOptimize"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsQueryPlannerTrace</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"queryPlannerTrace"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>bval</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsQueryNodeChunkSize</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"queryNodeChunkSize"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsQueryUseNodeAllocator</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"queryUseNodeAllocator"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>bval</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsKeepColumnName</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"keepColumnName"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>bval</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>tsRpcRetryLimit</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"rpcRetryLimit"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsRpcRetryInterval</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"rpcRetryInterval"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsMaxRetryWaitTime</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"maxRetryWaitTime"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>taosSetSystemCfg</name><parameter_list>(<parameter><decl><type><name>SConfig</name> <modifier>*</modifier></type><name>pCfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SConfigItem</name> <modifier>*</modifier></type><name>pItem</name> <init>= <expr><call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"timezone"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>osSetTimezone</name><argument_list>(<argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"timezone format changed from %s to %s"</literal></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>tsTimezoneStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>cfgSetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"timezone"</literal></expr></argument>, <argument><expr><name>tsTimezoneStr</name></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>stype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>locale</name> <init>= <expr><call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"locale"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>str</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>charset</name> <init>= <expr><call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"charset"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>str</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosSetSystemLocale</name><argument_list>(<argument><expr><name>locale</name></expr></argument>, <argument><expr><name>charset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>osSetSystemLocale</name><argument_list>(<argument><expr><name>locale</name></expr></argument>, <argument><expr><name>charset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>enableCore</name> <init>= <expr><call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"enableCoreFile"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>bval</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosSetCoreDump</name><argument_list>(<argument><expr><name>enableCore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>tsAssert</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"assert"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>bval</name></expr>;</expr_stmt>

  <comment type="line">// todo</comment>
  <expr_stmt><expr><name>tsVersion</name> <operator>=</operator> <literal type="number">30000000</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>taosSetServerCfg</name><parameter_list>(<parameter><decl><type><name>SConfig</name> <modifier>*</modifier></type><name>pCfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>tsDataSpace</name><operator>.</operator><name>reserved</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"minimalDataDirGB"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>fval</name><operator>)</operator> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsNumOfSupportVnodes</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"supportVnodes"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsMaxShellConns</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"maxShellConns"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsStatusInterval</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"statusInterval"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsMinSlidingTime</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"minSlidingTime"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsMinIntervalTime</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"minIntervalTime"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsMaxNumOfDistinctResults</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"maxNumOfDistinctRes"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsCountAlwaysReturnValue</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"countAlwaysReturnValue"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsQueryBufferSize</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"queryBufferSize"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsPrintAuth</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"printAuth"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>bval</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>tsNumOfRpcThreads</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"numOfRpcThreads"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsNumOfCommitThreads</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"numOfCommitThreads"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsNumOfMnodeReadThreads</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"numOfMnodeReadThreads"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsNumOfVnodeQueryThreads</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"numOfVnodeQueryThreads"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsNumOfVnodeStreamThreads</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"numOfVnodeStreamThreads"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsNumOfVnodeFetchThreads</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"numOfVnodeFetchThreads"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsNumOfVnodeRsmaThreads</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"numOfVnodeRsmaThreads"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsNumOfQnodeQueryThreads</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"numOfQnodeQueryThreads"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
  <comment type="line">//  tsNumOfQnodeFetchThreads = cfgGetItem(pCfg, "numOfQnodeFetchThreads")-&gt;i32;</comment>
  <expr_stmt><expr><name>tsNumOfSnodeStreamThreads</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"numOfSnodeSharedThreads"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsNumOfSnodeWriteThreads</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"numOfSnodeUniqueThreads"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsRpcQueueMemoryAllowed</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"rpcQueueMemoryAllowed"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i64</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>tsEnableMonitor</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"monitor"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>bval</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsMonitorInterval</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"monitorInterval"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name>tsMonitorFqdn</name></expr></argument>, <argument><expr><call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"monitorFqdn"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>str</name></expr></argument>, <argument><expr><name>TSDB_FQDN_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsMonitorPort</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"monitorPort"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsMonitorMaxLogs</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"monitorMaxLogs"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsMonitorComp</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"monitorComp"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>bval</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsQueryRspPolicy</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"queryRspPolicy"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>tsEnableTelem</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"telemetryReporting"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>bval</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsTelemInterval</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"telemetryInterval"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name>tsTelemServer</name></expr></argument>, <argument><expr><call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"telemetryServer"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>str</name></expr></argument>, <argument><expr><name>TSDB_FQDN_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsTelemPort</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"telemetryPort"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>tsElectInterval</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"syncElectInterval"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsHeartbeatInterval</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"syncHeartbeatInterval"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsHeartbeatTimeout</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"syncHeartbeatTimeout"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>tsTransPullupInterval</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"transPullupInterval"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsMqRebalanceInterval</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"mqRebalanceInterval"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsTtlUnit</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"ttlUnit"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsTtlPushInterval</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"ttlPushInterval"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsUptimeInterval</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"uptimeInterval"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsQueryRsmaTolerance</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"queryRsmaTolerance"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>tsWalFsyncDataSizeLimit</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"walFsyncDataSizeLimit"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i64</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>tsElectInterval</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"syncElectInterval"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsHeartbeatInterval</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"syncHeartbeatInterval"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsHeartbeatTimeout</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"syncHeartbeatTimeout"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>tsStartUdfd</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"udf"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>bval</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name>tsUdfdResFuncs</name></expr></argument>, <argument><expr><call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"udfdResFuncs"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tsUdfdResFuncs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name>tsUdfdLdLibPath</name></expr></argument>, <argument><expr><call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"udfdLdLibPath"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tsUdfdLdLibPath</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>tsQueryBufferSize</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>tsQueryBufferSizeBytes</name> <operator>=</operator> <name>tsQueryBufferSize</name> <operator>*</operator> <literal type="number">1048576UL</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>tsRpcRetryLimit</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"rpcRetryLimit"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsRpcRetryInterval</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"rpcRetryInterval"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>GRANT_CFG_GET</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosLocalCfgForbiddenToChange</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>forbidden</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>lowcaseName</name><index>[<expr><name>CFG_NAME_MAX_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>strntolower</name><argument_list>(<argument><expr><name>lowcaseName</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>TMIN</name><argument_list>(<argument><expr><name>CFG_NAME_MAX_LEN</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"charset"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>forbidden</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>GRANT_CFG_CHECK</name></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>forbidden</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosSetCfg</name><parameter_list>(<parameter><decl><type><name>SConfig</name> <modifier>*</modifier></type><name>pCfg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>lowcaseName</name><index>[<expr><name>CFG_NAME_MAX_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>strntolower</name><argument_list>(<argument><expr><name>lowcaseName</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>TMIN</name><argument_list>(<argument><expr><name>CFG_NAME_MAX_LEN</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <switch>switch <condition>(<expr><name><name>lowcaseName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="char">'a'</literal></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"asyncLog"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>tsAsyncLog</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"asyncLog"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>bval</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"assert"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>tsAssert</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"assert"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>bval</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><literal type="char">'c'</literal></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"charset"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>locale</name> <init>= <expr><call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"locale"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>str</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>charset</name> <init>= <expr><call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"charset"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>str</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>taosSetSystemLocale</name><argument_list>(<argument><expr><name>locale</name></expr></argument>, <argument><expr><name>charset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>osSetSystemLocale</name><argument_list>(<argument><expr><name>locale</name></expr></argument>, <argument><expr><name>charset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"compressMsgSize"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>tsCompressMsgSize</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"compressMsgSize"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"compressColData"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>tsCompressColData</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"compressColData"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"countAlwaysReturnValue"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>tsCountAlwaysReturnValue</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"countAlwaysReturnValue"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"cDebugFlag"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>cDebugFlag</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"cDebugFlag"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><literal type="char">'d'</literal></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"dDebugFlag"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>dDebugFlag</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"dDebugFlag"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"debugFlag"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>flag</name> <init>= <expr><call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"debugFlag"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>taosSetAllDebugFlag</name><argument_list>(<argument><expr><name>flag</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><literal type="char">'e'</literal></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"enableCoreFile"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>bool</name></type> <name>enableCore</name> <init>= <expr><call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"enableCoreFile"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>bval</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>taosSetCoreDump</name><argument_list>(<argument><expr><name>enableCore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"enableQueryHb"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>tsEnableQueryHb</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"enableQueryHb"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>bval</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><literal type="char">'f'</literal></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"fqdn"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name>tsLocalFqdn</name></expr></argument>, <argument><expr><call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"fqdn"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>str</name></expr></argument>, <argument><expr><name>TSDB_FQDN_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tsServerPort</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"serverPort"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>tsLocalEp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tsLocalEp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s:%u"</literal></expr></argument>, <argument><expr><name>tsLocalFqdn</name></expr></argument>, <argument><expr><name>tsServerPort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>char</name></type> <name><name>defaultFirstEp</name><index>[<expr><name>TSDB_EP_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>defaultFirstEp</name></expr></argument>, <argument><expr><name>TSDB_EP_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s:%u"</literal></expr></argument>, <argument><expr><name>tsLocalFqdn</name></expr></argument>, <argument><expr><name>tsServerPort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>SConfigItem</name> <modifier>*</modifier></type><name>pFirstEpItem</name> <init>= <expr><call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"firstEp"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SEp</name></type>          <name>firstEp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>taosGetFqdnPortFromEp</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pFirstEpItem</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>defaultFirstEp</name></expr> </then><else>: <expr><name><name>pFirstEpItem</name><operator>-&gt;</operator><name>str</name></name></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>firstEp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>tsFirst</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tsFirst</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s:%u"</literal></expr></argument>, <argument><expr><name><name>firstEp</name><operator>.</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name><name>firstEp</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>cfgSetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"firstEp"</literal></expr></argument>, <argument><expr><name>tsFirst</name></expr></argument>, <argument><expr><name><name>pFirstEpItem</name><operator>-&gt;</operator><name>stype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"firstEp"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name>tsLocalFqdn</name></expr></argument>, <argument><expr><call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"fqdn"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>str</name></expr></argument>, <argument><expr><name>TSDB_FQDN_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tsServerPort</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"serverPort"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>tsLocalEp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tsLocalEp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s:%u"</literal></expr></argument>, <argument><expr><name>tsLocalFqdn</name></expr></argument>, <argument><expr><name>tsServerPort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>char</name></type> <name><name>defaultFirstEp</name><index>[<expr><name>TSDB_EP_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>defaultFirstEp</name></expr></argument>, <argument><expr><name>TSDB_EP_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s:%u"</literal></expr></argument>, <argument><expr><name>tsLocalFqdn</name></expr></argument>, <argument><expr><name>tsServerPort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>SConfigItem</name> <modifier>*</modifier></type><name>pFirstEpItem</name> <init>= <expr><call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"firstEp"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SEp</name></type>          <name>firstEp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>taosGetFqdnPortFromEp</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pFirstEpItem</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>defaultFirstEp</name></expr> </then><else>: <expr><name><name>pFirstEpItem</name><operator>-&gt;</operator><name>str</name></name></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>firstEp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>tsFirst</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tsFirst</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s:%u"</literal></expr></argument>, <argument><expr><name><name>firstEp</name><operator>.</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name><name>firstEp</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>cfgSetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"firstEp"</literal></expr></argument>, <argument><expr><name>tsFirst</name></expr></argument>, <argument><expr><name><name>pFirstEpItem</name><operator>-&gt;</operator><name>stype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"fsDebugFlag"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>fsDebugFlag</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"fsDebugFlag"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><literal type="char">'i'</literal></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"idxDebugFlag"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>idxDebugFlag</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"idxDebugFlag"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><literal type="char">'j'</literal></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"jniDebugFlag"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>jniDebugFlag</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"jniDebugFlag"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><literal type="char">'k'</literal></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"keepColumnName"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>tsKeepColumnName</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"keepColumnName"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>bval</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><literal type="char">'l'</literal></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"locale"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>locale</name> <init>= <expr><call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"locale"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>str</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>charset</name> <init>= <expr><call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"charset"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>str</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>taosSetSystemLocale</name><argument_list>(<argument><expr><name>locale</name></expr></argument>, <argument><expr><name>charset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>osSetSystemLocale</name><argument_list>(<argument><expr><name>locale</name></expr></argument>, <argument><expr><name>charset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"logDir"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name>tsLogDir</name></expr></argument>, <argument><expr><call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"logDir"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>str</name></expr></argument>, <argument><expr><name>PATH_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosExpandDir</name><argument_list>(<argument><expr><name>tsLogDir</name></expr></argument>, <argument><expr><name>tsLogDir</name></expr></argument>, <argument><expr><name>PATH_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"logKeepDays"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>tsLogKeepDays</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"logKeepDays"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><literal type="char">'m'</literal></expr>:</case> <block>{<block_content>
      <switch>switch <condition>(<expr><name><name>lowcaseName</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="char">'a'</literal></expr>:</case> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"maxShellConns"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>tsMaxShellConns</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"maxShellConns"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
          </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"maxNumOfDistinctRes"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>tsMaxNumOfDistinctResults</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"maxNumOfDistinctRes"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
          </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"maxMemUsedByInsert"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>tsMaxMemUsedByInsert</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"maxMemUsedByInsert"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
          </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"maxRetryWaitTime"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>tsMaxRetryWaitTime</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"maxRetryWaitTime"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <break>break;</break>
        </block_content>}</block>
        <case>case <expr><literal type="char">'d'</literal></expr>:</case> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"mDebugFlag"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>mDebugFlag</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"mDebugFlag"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <break>break;</break>
        </block_content>}</block>
        <case>case <expr><literal type="char">'i'</literal></expr>:</case> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"minimalTmpDirGB"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>tsTempSpace</name><operator>.</operator><name>reserved</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"minimalTmpDirGB"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>fval</name><operator>)</operator> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal><operator>)</operator></expr>;</expr_stmt>
          </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"minimalDataDirGB"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>tsDataSpace</name><operator>.</operator><name>reserved</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"minimalDataDirGB"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>fval</name><operator>)</operator> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal><operator>)</operator></expr>;</expr_stmt>
          </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"minSlidingTime"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>tsMinSlidingTime</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"minSlidingTime"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
          </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"minIntervalTime"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>tsMinIntervalTime</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"minIntervalTime"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
          </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"minimalLogDirGB"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>tsLogSpace</name><operator>.</operator><name>reserved</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"minimalLogDirGB"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>fval</name><operator>)</operator> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal><operator>)</operator></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <break>break;</break>
        </block_content>}</block>
        <case>case <expr><literal type="char">'o'</literal></expr>:</case> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"monitor"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>tsEnableMonitor</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"monitor"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>bval</name></expr>;</expr_stmt>
          </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"monitorInterval"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>tsMonitorInterval</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"monitorInterval"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
          </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"monitorFqdn"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name>tsMonitorFqdn</name></expr></argument>, <argument><expr><call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"monitorFqdn"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>str</name></expr></argument>, <argument><expr><name>TSDB_FQDN_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"monitorPort"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>tsMonitorPort</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"monitorPort"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
          </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"monitorMaxLogs"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>tsMonitorMaxLogs</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"monitorMaxLogs"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
          </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"monitorComp"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>tsMonitorComp</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"monitorComp"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>bval</name></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <break>break;</break>
        </block_content>}</block>
        <case>case <expr><literal type="char">'q'</literal></expr>:</case> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"mqRebalanceInterval"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>tsMqRebalanceInterval</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"mqRebalanceInterval"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <break>break;</break>
        </block_content>}</block>
        <case>case <expr><literal type="char">'u'</literal></expr>:</case> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"udfDebugFlag"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>udfDebugFlag</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"udfDebugFlag"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <break>break;</break>
        </block_content>}</block>
        <default>default:</default>
          <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_CFG_NOT_FOUND</name></expr>;</expr_stmt>
          <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></switch>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><literal type="char">'n'</literal></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"numOfTaskQueueThreads"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>tsNumOfTaskQueueThreads</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"numOfTaskQueueThreads"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"numOfRpcThreads"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>tsNumOfRpcThreads</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"numOfRpcThreads"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"numOfCommitThreads"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>tsNumOfCommitThreads</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"numOfCommitThreads"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"numOfMnodeReadThreads"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>tsNumOfMnodeReadThreads</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"numOfMnodeReadThreads"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"numOfVnodeQueryThreads"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>tsNumOfVnodeQueryThreads</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"numOfVnodeQueryThreads"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
        <comment type="block">/*
              } else if (strcasecmp("numOfVnodeFetchThreads", name) == 0) {
                tsNumOfVnodeFetchThreads = cfgGetItem(pCfg, "numOfVnodeFetchThreads")-&gt;i32;
        */</comment>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"numOfVnodeRsmaThreads"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>tsNumOfVnodeRsmaThreads</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"numOfVnodeRsmaThreads"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"numOfQnodeQueryThreads"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>tsNumOfQnodeQueryThreads</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"numOfQnodeQueryThreads"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
        <comment type="block">/*
              } else if (strcasecmp("numOfQnodeFetchThreads", name) == 0) {
                tsNumOfQnodeFetchThreads = cfgGetItem(pCfg, "numOfQnodeFetchThreads")-&gt;i32;
        */</comment>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"numOfSnodeSharedThreads"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>tsNumOfSnodeStreamThreads</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"numOfSnodeSharedThreads"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"numOfSnodeUniqueThreads"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>tsNumOfSnodeWriteThreads</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"numOfSnodeUniqueThreads"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"numOfLogLines"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>tsNumOfLogLines</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"numOfLogLines"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><literal type="char">'p'</literal></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"printAuth"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>tsPrintAuth</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"printAuth"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>bval</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><literal type="char">'q'</literal></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"queryPolicy"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>tsQueryPolicy</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"queryPolicy"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"querySmaOptimize"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>tsQuerySmaOptimize</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"querySmaOptimize"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"queryBufferSize"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>tsQueryBufferSize</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"queryBufferSize"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>tsQueryBufferSize</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>tsQueryBufferSizeBytes</name> <operator>=</operator> <name>tsQueryBufferSize</name> <operator>*</operator> <literal type="number">1048576UL</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"qDebugFlag"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>qDebugFlag</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"qDebugFlag"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"queryPlannerTrace"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>tsQueryPlannerTrace</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"queryPlannerTrace"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>bval</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"queryNodeChunkSize"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>tsQueryNodeChunkSize</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"queryNodeChunkSize"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"queryUseNodeAllocator"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>tsQueryUseNodeAllocator</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"queryUseNodeAllocator"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>bval</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"queryRsmaTolerance"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>tsQueryRsmaTolerance</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"queryRsmaTolerance"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><literal type="char">'r'</literal></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"rpcQueueMemoryAllowed"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>tsRpcQueueMemoryAllowed</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"rpcQueueMemoryAllowed"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i64</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"rpcDebugFlag"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rpcDebugFlag</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"rpcDebugFlag"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><literal type="char">'s'</literal></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"secondEp"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SConfigItem</name> <modifier>*</modifier></type><name>pSecondpItem</name> <init>= <expr><call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"secondEp"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SEp</name></type>          <name>secondEp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>taosGetFqdnPortFromEp</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pSecondpItem</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>tsFirst</name></expr> </then><else>: <expr><name><name>pSecondpItem</name><operator>-&gt;</operator><name>str</name></name></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>secondEp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>tsSecond</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tsSecond</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s:%u"</literal></expr></argument>, <argument><expr><name><name>secondEp</name><operator>.</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name><name>secondEp</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>cfgSetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"secondEp"</literal></expr></argument>, <argument><expr><name>tsSecond</name></expr></argument>, <argument><expr><name><name>pSecondpItem</name><operator>-&gt;</operator><name>stype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"smlChildTableName"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name>tsSmlChildTableName</name></expr></argument>, <argument><expr><call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"smlChildTableName"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>str</name></expr></argument>, <argument><expr><name>TSDB_TABLE_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"smlTagName"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name>tsSmlTagName</name></expr></argument>, <argument><expr><call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"smlTagName"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>str</name></expr></argument>, <argument><expr><name>TSDB_COL_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"smlDataFormat"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>tsSmlDataFormat</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"smlDataFormat"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>bval</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"smlBatchSize"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>tsSmlBatchSize</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"smlBatchSize"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"shellActivityTimer"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>tsShellActivityTimer</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"shellActivityTimer"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"supportVnodes"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>tsNumOfSupportVnodes</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"supportVnodes"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"statusInterval"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>tsStatusInterval</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"statusInterval"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"serverPort"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name>tsLocalFqdn</name></expr></argument>, <argument><expr><call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"fqdn"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>str</name></expr></argument>, <argument><expr><name>TSDB_FQDN_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tsServerPort</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"serverPort"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>tsLocalEp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tsLocalEp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s:%u"</literal></expr></argument>, <argument><expr><name>tsLocalFqdn</name></expr></argument>, <argument><expr><name>tsServerPort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>char</name></type> <name><name>defaultFirstEp</name><index>[<expr><name>TSDB_EP_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>defaultFirstEp</name></expr></argument>, <argument><expr><name>TSDB_EP_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s:%u"</literal></expr></argument>, <argument><expr><name>tsLocalFqdn</name></expr></argument>, <argument><expr><name>tsServerPort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>SConfigItem</name> <modifier>*</modifier></type><name>pFirstEpItem</name> <init>= <expr><call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"firstEp"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SEp</name></type>          <name>firstEp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>taosGetFqdnPortFromEp</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pFirstEpItem</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>defaultFirstEp</name></expr> </then><else>: <expr><name><name>pFirstEpItem</name><operator>-&gt;</operator><name>str</name></name></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>firstEp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>tsFirst</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tsFirst</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s:%u"</literal></expr></argument>, <argument><expr><name><name>firstEp</name><operator>.</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name><name>firstEp</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>cfgSetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"firstEp"</literal></expr></argument>, <argument><expr><name>tsFirst</name></expr></argument>, <argument><expr><name><name>pFirstEpItem</name><operator>-&gt;</operator><name>stype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"sDebugFlag"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>sDebugFlag</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"sDebugFlag"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"smaDebugFlag"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>smaDebugFlag</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"smaDebugFlag"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><literal type="char">'t'</literal></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"timezone"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SConfigItem</name> <modifier>*</modifier></type><name>pItem</name> <init>= <expr><call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"timezone"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>osSetTimezone</name><argument_list>(<argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"timezone format changed from %s to %s"</literal></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>tsTimezoneStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>cfgSetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"timezone"</literal></expr></argument>, <argument><expr><name>tsTimezoneStr</name></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>stype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"tempDir"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name>tsTempDir</name></expr></argument>, <argument><expr><call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"tempDir"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>str</name></expr></argument>, <argument><expr><name>PATH_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosExpandDir</name><argument_list>(<argument><expr><name>tsTempDir</name></expr></argument>, <argument><expr><name>tsTempDir</name></expr></argument>, <argument><expr><name>PATH_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>taosMulMkDir</name><argument_list>(<argument><expr><name>tsTempDir</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"failed to create tempDir:%s since %s"</literal></expr></argument>, <argument><expr><name>tsTempDir</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"tdbDebugFlag"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>tdbDebugFlag</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"tdbDebugFlag"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"telemetryReporting"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>tsEnableTelem</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"telemetryReporting"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>bval</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"telemetryInterval"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>tsTelemInterval</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"telemetryInterval"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"telemetryServer"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name>tsTelemServer</name></expr></argument>, <argument><expr><call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"telemetryServer"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>str</name></expr></argument>, <argument><expr><name>TSDB_FQDN_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"telemetryPort"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>tsTelemPort</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"telemetryPort"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"transPullupInterval"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>tsTransPullupInterval</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"transPullupInterval"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"ttlUnit"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>tsTtlUnit</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"ttlUnit"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"ttlPushInterval"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>tsTtlPushInterval</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"ttlPushInterval"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"tmrDebugFlag"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>tmrDebugFlag</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"tmrDebugFlag"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"tsdbDebugFlag"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>tsdbDebugFlag</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"tsdbDebugFlag"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"tqDebugFlag"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>tqDebugFlag</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"tqDebugFlag"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><literal type="char">'u'</literal></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"udf"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>tsStartUdfd</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"udf"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>bval</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"uDebugFlag"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>uDebugFlag</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"uDebugFlag"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><literal type="char">'v'</literal></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"vDebugFlag"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>vDebugFlag</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"vDebugFlag"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><literal type="char">'w'</literal></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"wDebugFlag"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>wDebugFlag</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"wDebugFlag"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <default>default:</default>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_CFG_NOT_FOUND</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></switch>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosCreateLog</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>logname</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>logFileNum</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cfgDir</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>envCmd</name></decl></parameter>,
                      <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>envFile</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>apolloUrl</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pArgs</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>tsc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>tsCfg</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>osDefaultInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>SConfig</name> <modifier>*</modifier></type><name>pCfg</name> <init>= <expr><call><name>cfgInit</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pCfg</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>tsc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>tsLogEmbedded</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>taosAddClientLogCfg</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>cfgCleanup</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>tsLogEmbedded</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>taosAddClientLogCfg</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>cfgCleanup</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>taosAddServerLogCfg</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>cfgCleanup</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosLoadCfg</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><name>envCmd</name></expr></argument>, <argument><expr><name>cfgDir</name></expr></argument>, <argument><expr><name>envFile</name></expr></argument>, <argument><expr><name>apolloUrl</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"failed to load cfg since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cfgCleanup</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>cfgLoadFromArray</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><name>pArgs</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"failed to load cfg from array since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cfgCleanup</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>tsc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosSetClientLogCfg</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>taosSetClientLogCfg</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosSetServerLogCfg</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>taosSetAllDebugFlag</name><argument_list>(<argument><expr><call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"debugFlag"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosMulModeMkDir</name><argument_list>(<argument><expr><name>tsLogDir</name></expr></argument>, <argument><expr><literal type="number">0777</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"failed to create dir:%s since %s"</literal></expr></argument>, <argument><expr><name>tsLogDir</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cfgCleanup</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosInitLog</name><argument_list>(<argument><expr><name>logname</name></expr></argument>, <argument><expr><name>logFileNum</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"failed to init log file since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cfgCleanup</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>cfgCleanup</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>taosCheckGlobalCfg</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>ipv4</name> <init>= <expr><call><name>taosGetIpv4FromFqdn</name><argument_list>(<argument><expr><name>tsLocalFqdn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ipv4</name> <operator>==</operator> <literal type="number">0xffffffff</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"failed to get ip from fqdn:%s since %s, dnode can not be initialized"</literal></expr></argument>, <argument><expr><name>tsLocalFqdn</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>tsServerPort</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"invalid server port:%u, dnode can not be initialized"</literal></expr></argument>, <argument><expr><name>tsServerPort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosInitCfg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cfgDir</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>envCmd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>envFile</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>apolloUrl</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pArgs</name></decl></parameter>,
                    <parameter><decl><type><name>bool</name></type> <name>tsc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>tsCfg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>tsCfg</name> <operator>=</operator> <call><name>cfgInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>tsc</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>taosAddClientCfg</name><argument_list>(<argument><expr><name>tsCfg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>taosAddClientLogCfg</name><argument_list>(<argument><expr><name>tsCfg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>taosAddClientCfg</name><argument_list>(<argument><expr><name>tsCfg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>taosAddServerCfg</name><argument_list>(<argument><expr><name>tsCfg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>taosAddClientLogCfg</name><argument_list>(<argument><expr><name>tsCfg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>taosAddServerLogCfg</name><argument_list>(<argument><expr><name>tsCfg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>taosAddSystemCfg</name><argument_list>(<argument><expr><name>tsCfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosLoadCfg</name><argument_list>(<argument><expr><name>tsCfg</name></expr></argument>, <argument><expr><name>envCmd</name></expr></argument>, <argument><expr><name>cfgDir</name></expr></argument>, <argument><expr><name>envFile</name></expr></argument>, <argument><expr><name>apolloUrl</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"failed to load cfg since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cfgCleanup</name><argument_list>(<argument><expr><name>tsCfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>tsCfg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>cfgLoadFromArray</name><argument_list>(<argument><expr><name>tsCfg</name></expr></argument>, <argument><expr><name>pArgs</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"failed to load cfg from array since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cfgCleanup</name><argument_list>(<argument><expr><name>tsCfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>tsCfg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>tsc</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>taosSetClientCfg</name><argument_list>(<argument><expr><name>tsCfg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>taosSetClientCfg</name><argument_list>(<argument><expr><name>tsCfg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>taosUpdateServerCfg</name><argument_list>(<argument><expr><name>tsCfg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>taosSetServerCfg</name><argument_list>(<argument><expr><name>tsCfg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>taosSetTfsCfg</name><argument_list>(<argument><expr><name>tsCfg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>taosSetSystemCfg</name><argument_list>(<argument><expr><name>tsCfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>cfgDumpCfg</name><argument_list>(<argument><expr><name>tsCfg</name></expr></argument>, <argument><expr><name>tsc</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosCheckGlobalCfg</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosCleanupCfg</name><parameter_list>()</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>tsCfg</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>cfgCleanup</name><argument_list>(<argument><expr><name>tsCfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>tsCfg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosCfgDynamicOptions</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>option</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><literal type="string">"debugFlag"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>flag</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosSetAllDebugFlag</name><argument_list>(<argument><expr><name>flag</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><literal type="string">"resetlog"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosResetLog</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cfgDumpCfg</name><argument_list>(<argument><expr><name>tsCfg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><literal type="string">"monitor"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>monitor</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>uInfo</name><argument_list>(<argument><expr><literal type="string">"monitor set from %d to %d"</literal></expr></argument>, <argument><expr><name>tsEnableMonitor</name></expr></argument>, <argument><expr><name>monitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>tsEnableMonitor</name> <operator>=</operator> <name>monitor</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SConfigItem</name> <modifier>*</modifier></type><name>pItem</name> <init>= <expr><call><name>cfgGetItem</name><argument_list>(<argument><expr><name>tsCfg</name></expr></argument>, <argument><expr><literal type="string">"monitor"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pItem</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>bval</name></name> <operator>=</operator> <name>tsEnableMonitor</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>options</name><index>[]</index></name> <init>= <expr><block>{
      <expr><literal type="string">"dDebugFlag"</literal></expr>,   <expr><literal type="string">"vDebugFlag"</literal></expr>,   <expr><literal type="string">"mDebugFlag"</literal></expr>,   <expr><literal type="string">"wDebugFlag"</literal></expr>,    <expr><literal type="string">"sDebugFlag"</literal></expr>,   <expr><literal type="string">"tsdbDebugFlag"</literal></expr>, <expr><literal type="string">"tqDebugFlag"</literal></expr>,
      <expr><literal type="string">"fsDebugFlag"</literal></expr>,  <expr><literal type="string">"udfDebugFlag"</literal></expr>, <expr><literal type="string">"smaDebugFlag"</literal></expr>, <expr><literal type="string">"idxDebugFlag"</literal></expr>,  <expr><literal type="string">"tdbDebugFlag"</literal></expr>, <expr><literal type="string">"tmrDebugFlag"</literal></expr>,  <expr><literal type="string">"uDebugFlag"</literal></expr>,
      <expr><literal type="string">"smaDebugFlag"</literal></expr>, <expr><literal type="string">"rpcDebugFlag"</literal></expr>, <expr><literal type="string">"qDebugFlag"</literal></expr>,   <expr><literal type="string">"metaDebugFlag"</literal></expr>, <expr><literal type="string">"jniDebugFlag"</literal></expr>,
  }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name><name>optionVars</name><index>[]</index></name> <init>= <expr><block>{
      <expr><operator>&amp;</operator><name>dDebugFlag</name></expr>,   <expr><operator>&amp;</operator><name>vDebugFlag</name></expr>,   <expr><operator>&amp;</operator><name>mDebugFlag</name></expr>,   <expr><operator>&amp;</operator><name>wDebugFlag</name></expr>,    <expr><operator>&amp;</operator><name>sDebugFlag</name></expr>,   <expr><operator>&amp;</operator><name>tsdbDebugFlag</name></expr>, <expr><operator>&amp;</operator><name>tqDebugFlag</name></expr>,
      <expr><operator>&amp;</operator><name>fsDebugFlag</name></expr>,  <expr><operator>&amp;</operator><name>udfDebugFlag</name></expr>, <expr><operator>&amp;</operator><name>smaDebugFlag</name></expr>, <expr><operator>&amp;</operator><name>idxDebugFlag</name></expr>,  <expr><operator>&amp;</operator><name>tdbDebugFlag</name></expr>, <expr><operator>&amp;</operator><name>tmrDebugFlag</name></expr>,  <expr><operator>&amp;</operator><name>uDebugFlag</name></expr>,
      <expr><operator>&amp;</operator><name>smaDebugFlag</name></expr>, <expr><operator>&amp;</operator><name>rpcDebugFlag</name></expr>, <expr><operator>&amp;</operator><name>qDebugFlag</name></expr>,   <expr><operator>&amp;</operator><name>metaDebugFlag</name></expr>, <expr><operator>&amp;</operator><name>jniDebugFlag</name></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>optionSize</name> <init>= <expr><call><name>tListLen</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>d</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>d</name> <operator>&lt;</operator> <name>optionSize</name></expr>;</condition> <incr><expr><operator>++</operator><name>d</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>optName</name> <init>= <expr><name><name>options</name><index>[<expr><name>d</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>     <name>optLen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>optName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><name>optName</name></expr></argument>, <argument><expr><name>optLen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>flag</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>uInfo</name><argument_list>(<argument><expr><literal type="string">"%s set from %d to %d"</literal></expr></argument>, <argument><expr><name>optName</name></expr></argument>, <argument><expr><operator>*</operator><name><name>optionVars</name><index>[<expr><name>d</name></expr>]</index></name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name><name>optionVars</name><index>[<expr><name>d</name></expr>]</index></name> <operator>=</operator> <name>flag</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosSetDebugFlag</name><argument_list>(<argument><expr><name><name>optionVars</name><index>[<expr><name>d</name></expr>]</index></name></expr></argument>, <argument><expr><name>optName</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"failed to cfg dynamic option:%s value:%s"</literal></expr></argument>, <argument><expr><name>option</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosSetDebugFlag</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>pFlagPtr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>flagName</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>flagVal</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>rewrite</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SConfigItem</name> <modifier>*</modifier></type><name>pItem</name> <init>= <expr><call><name>cfgGetItem</name><argument_list>(<argument><expr><name>tsCfg</name></expr></argument>, <argument><expr><name>flagName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pItem</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>rewrite</name> <operator>||</operator> <name><name>pItem</name><operator>-&gt;</operator><name>i32</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>i32</name></name> <operator>=</operator> <name>flagVal</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>pFlagPtr</name> <operator>=</operator> <name>flagVal</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosSetAllDebugFlag</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>rewrite</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>flag</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>taosSetDebugFlag</name><argument_list>(<argument><expr><operator>&amp;</operator><name>uDebugFlag</name></expr></argument>, <argument><expr><literal type="string">"uDebugFlag"</literal></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>rewrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosSetDebugFlag</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rpcDebugFlag</name></expr></argument>, <argument><expr><literal type="string">"rpcDebugFlag"</literal></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>rewrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosSetDebugFlag</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jniDebugFlag</name></expr></argument>, <argument><expr><literal type="string">"jniDebugFlag"</literal></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>rewrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosSetDebugFlag</name><argument_list>(<argument><expr><operator>&amp;</operator><name>qDebugFlag</name></expr></argument>, <argument><expr><literal type="string">"qDebugFlag"</literal></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>rewrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosSetDebugFlag</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cDebugFlag</name></expr></argument>, <argument><expr><literal type="string">"cDebugFlag"</literal></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>rewrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosSetDebugFlag</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dDebugFlag</name></expr></argument>, <argument><expr><literal type="string">"dDebugFlag"</literal></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>rewrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosSetDebugFlag</name><argument_list>(<argument><expr><operator>&amp;</operator><name>vDebugFlag</name></expr></argument>, <argument><expr><literal type="string">"vDebugFlag"</literal></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>rewrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosSetDebugFlag</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mDebugFlag</name></expr></argument>, <argument><expr><literal type="string">"mDebugFlag"</literal></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>rewrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosSetDebugFlag</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wDebugFlag</name></expr></argument>, <argument><expr><literal type="string">"wDebugFlag"</literal></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>rewrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosSetDebugFlag</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sDebugFlag</name></expr></argument>, <argument><expr><literal type="string">"sDebugFlag"</literal></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>rewrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosSetDebugFlag</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tsdbDebugFlag</name></expr></argument>, <argument><expr><literal type="string">"tsdbDebugFlag"</literal></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>rewrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosSetDebugFlag</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tqDebugFlag</name></expr></argument>, <argument><expr><literal type="string">"tqDebugFlag"</literal></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>rewrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosSetDebugFlag</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fsDebugFlag</name></expr></argument>, <argument><expr><literal type="string">"fsDebugFlag"</literal></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>rewrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosSetDebugFlag</name><argument_list>(<argument><expr><operator>&amp;</operator><name>udfDebugFlag</name></expr></argument>, <argument><expr><literal type="string">"udfDebugFlag"</literal></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>rewrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosSetDebugFlag</name><argument_list>(<argument><expr><operator>&amp;</operator><name>smaDebugFlag</name></expr></argument>, <argument><expr><literal type="string">"smaDebugFlag"</literal></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>rewrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosSetDebugFlag</name><argument_list>(<argument><expr><operator>&amp;</operator><name>idxDebugFlag</name></expr></argument>, <argument><expr><literal type="string">"idxDebugFlag"</literal></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>rewrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosSetDebugFlag</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tdbDebugFlag</name></expr></argument>, <argument><expr><literal type="string">"tdbDebugFlag"</literal></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>rewrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosSetDebugFlag</name><argument_list>(<argument><expr><operator>&amp;</operator><name>metaDebugFlag</name></expr></argument>, <argument><expr><literal type="string">"metaDebugFlag"</literal></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>rewrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosSetDebugFlag</name><argument_list>(<argument><expr><operator>&amp;</operator><name>metaDebugFlag</name></expr></argument>, <argument><expr><literal type="string">"tmrDebugFlag"</literal></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>rewrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uInfo</name><argument_list>(<argument><expr><literal type="string">"all debug flag are set to %d"</literal></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
