<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/common/src/ttime.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DARWIN</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_XOPEN_SOURCE</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_XOPEN_SOURCE</name></cpp:macro> <cpp:value>500</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_BSD_SOURCE</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ttime.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tlog.h"</cpp:file></cpp:include>

<comment type="block">/*
 * mktime64 - Converts date to seconds.
 * Converts Gregorian date to seconds since 1970-01-01 00:00:00.
 * Assumes input in normal date format, i.e. 1980-12-31 23:59:59
 * =&gt; year=1980, mon=12, day=31, hour=23, min=59, sec=59.
 *
 * [For the Julian calendar (which was used in Russia before 1917,
 * Britain &amp; colonies before 1752, anywhere else before 1582,
 * and is still in use by some communities) leave out the
 * -year/100+year/400 terms, and add 10.]
 *
 * This algorithm was first published by Gauss (I think).
 *
 * A leap second can be indicated by calling this function with sec as
 * 60 (allowable under ISO 8601).  The leap second is treated the same
 * as the following second since they don't exist in UNIX time.
 *
 * An encoding of midnight at the end of the day as 24:00:00 - ie. midnight
 * tomorrow - (allowable under ISO 8601) is supported.
 */</comment>
<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>user_mktime64</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>year0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>mon0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>day</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>hour</name></decl></parameter>,
                             <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>sec</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>time_zone</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>mon</name> <init>= <expr><name>mon0</name></expr></init></decl>, <decl><type ref="prev"/><name>year</name> <init>= <expr><name>year0</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* 1..12 -&gt; 11,12,1..10 */</comment>
  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&gt;=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>mon</name> <operator>-=</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>mon</name> <operator>+=</operator> <literal type="number">12</literal></expr>;</expr_stmt> <comment type="block">/* Puts Feb last since it has leap day */</comment>
    <expr_stmt><expr><name>year</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// int64_t res = (((((int64_t) (year/4 - year/100 + year/400 + 367*mon/12 + day) +</comment>
  <comment type="line">//                year*365 - 719499)*24 + hour)*60 + min)*60 + sec);</comment>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>res</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">367</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name>mon</name><operator>)</operator> <operator>/</operator> <literal type="number">12</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>res</name> <operator>+=</operator> <name>year</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>year</name> <operator>/</operator> <literal type="number">100</literal> <operator>+</operator> <name>year</name> <operator>/</operator> <literal type="number">400</literal> <operator>+</operator> <name>day</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name>year</name><operator>)</operator> <operator>*</operator> <literal type="number">365</literal> <operator>-</operator> <literal type="number">719499</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>res</name> <operator>=</operator> <name>res</name> <operator>*</operator> <literal type="number">24</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>res</name> <operator>+</operator> <name>hour</name><operator>)</operator> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator> <name>min</name><operator>)</operator> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator> <name>sec</name></expr>;</expr_stmt>

  <return>return <expr><operator>(</operator><name>res</name> <operator>+</operator> <name>time_zone</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="line">// ==== mktime() kernel code =================//</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int64_t</name></type> <name>m_deltaUtc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type>           <name>deltaToUtcInitOnce</name><parameter_list>()</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>taosStrpTime</name><argument_list>(<argument><expr><literal type="string">"1970-01-01 00:00:00"</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><literal type="string">"%Y-%m-%d %H:%M:%S"</literal><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>m_deltaUtc</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><call><name>taosMktime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// printf("====delta:%lld\n\n", seconds);</comment>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>int64_t</name></type> <name>parseFraction</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>timePrec</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>parseTimeWithTz</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>timestr</name></decl></parameter>, <parameter><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>time</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>timePrec</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>delim</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>parseLocaltime</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>timestr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>utime</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>timePrec</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>delim</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>parseLocaltimeDst</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>timestr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>utime</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>timePrec</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>delim</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type>   <name>forwardToTimeStringEnd</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>str</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type>    <name>checkTzPresent</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> (<modifier>*</modifier><name>parseLocaltimeFp</name><index>[]</index>)<parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>timestr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>utime</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>timePrec</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>delim</name></decl></parameter>)</parameter_list> <init>= <expr><block>{
    <expr><name>parseLocaltime</name></expr></block></expr></init><operator>,</operator> parseLocaltimeDst</function_decl>};

<function><type><name>int32_t</name></type> <name>taosParseTime</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>timestr</name></decl></parameter>, <parameter><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>utime</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>timePrec</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>day_light</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="block">/* parse datatime string in with tz */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>strnchr</name><argument_list>(<argument><expr><name>timestr</name></expr></argument>, <argument><expr><literal type="char">'T'</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>checkTzPresent</name><argument_list>(<argument><expr><name>timestr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>parseTimeWithTz</name><argument_list>(<argument><expr><name>timestr</name></expr></argument>, <argument><expr><name>utime</name></expr></argument>, <argument><expr><name>timePrec</name></expr></argument>, <argument><expr><literal type="char">'T'</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><call>(<modifier>*</modifier><name>parseLocaltimeFp</name><index>[<expr><name>day_light</name></expr>]</index>)<argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>timestr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>utime</name></expr></argument>, <argument><expr><name>timePrec</name></expr></argument>, <argument><expr><literal type="char">'T'</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>checkTzPresent</name><argument_list>(<argument><expr><name>timestr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>parseTimeWithTz</name><argument_list>(<argument><expr><name>timestr</name></expr></argument>, <argument><expr><name>utime</name></expr></argument>, <argument><expr><name>timePrec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><call>(<modifier>*</modifier><name>parseLocaltimeFp</name><index>[<expr><name>day_light</name></expr>]</index>)<argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>timestr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>utime</name></expr></argument>, <argument><expr><name>timePrec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>checkTzPresent</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>seg</name> <init>= <expr><call><name>forwardToTimeStringEnd</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>seg_len</name> <init>= <expr><name>len</name> <operator>-</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>seg</name> <operator>-</operator> <name>str</name><operator>)</operator></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>c</name> <init>= <expr><operator>&amp;</operator><name><name>seg</name><index>[<expr><name>seg_len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>seg_len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>c</name> <operator>==</operator> <literal type="char">'Z'</literal> <operator>||</operator> <operator>*</operator><name>c</name> <operator>==</operator> <literal type="char">'z'</literal> <operator>||</operator> <operator>*</operator><name>c</name> <operator>==</operator> <literal type="char">'+'</literal> <operator>||</operator> <operator>*</operator><name>c</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>c</name><operator>--</operator></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>forwardToTimeStringEnd</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfSep</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>numOfSep</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>numOfSep</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <while>while <condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>

  <return>return <expr><operator>&amp;</operator><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>parseFraction</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>timePrec</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>fraction</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>MILLI_SEC_FRACTION_LEN</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>MICRO_SEC_FRACTION_LEN</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>NANO_SEC_FRACTION_LEN</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name><name>factor</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><literal type="number">1000</literal></expr>, <expr><literal type="number">10000</literal></expr>, <expr><literal type="number">100000</literal></expr>, <expr><literal type="number">1000000</literal></expr>, <expr><literal type="number">10000000</literal></expr>, <expr><literal type="number">100000000</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>times</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>totalLen</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>totalLen</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* parse the fraction */</comment>
  <if_stmt><if>if <condition>(<expr><name>timePrec</name> <operator>==</operator> <name>TSDB_TIME_PRECISION_MILLI</name></expr>)</condition> <block>{<block_content>
    <comment type="block">/* only use the initial 3 bits */</comment>
    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>MILLI_SEC_FRACTION_LEN</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>i</name> <operator>=</operator> <name>MILLI_SEC_FRACTION_LEN</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>times</name> <operator>=</operator> <name>MILLI_SEC_FRACTION_LEN</name> <operator>-</operator> <name>i</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>timePrec</name> <operator>==</operator> <name>TSDB_TIME_PRECISION_MICRO</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>MICRO_SEC_FRACTION_LEN</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>i</name> <operator>=</operator> <name>MICRO_SEC_FRACTION_LEN</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>times</name> <operator>=</operator> <name>MICRO_SEC_FRACTION_LEN</name> <operator>-</operator> <name>i</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>timePrec</name> <operator>==</operator> <name>TSDB_TIME_PRECISION_NANO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>NANO_SEC_FRACTION_LEN</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>i</name> <operator>=</operator> <name>NANO_SEC_FRACTION_LEN</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>times</name> <operator>=</operator> <name>NANO_SEC_FRACTION_LEN</name> <operator>-</operator> <name>i</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name>fraction</name> <operator>=</operator> <call><name>strnatoi</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>factor</name><index>[<expr><name>times</name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <name>str</name> <operator>+</operator> <name>totalLen</name></expr>;</expr_stmt>

  <return>return <expr><name>fraction</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>parseTimezone</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>tzOffset</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>hour</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'+'</literal> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator> <operator>||</operator> <name><name>str</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>++</operator><name>j</name></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></while>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>sep</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>sep</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>sep</name> <operator>-</operator> <operator>&amp;</operator><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>hour</name> <operator>=</operator> <call><name>strnatoi</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name> <operator>+=</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>hour</name> <operator>=</operator> <call><name>strnatoi</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="line">// return error if there're illegal charaters after min(2 Digits)</comment>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>minStr</name> <init>= <expr><operator>&amp;</operator><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>minStr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <name><name>minStr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>minute</name> <init>= <expr><call><name>strnatoi</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>minute</name> <operator>&gt;</operator> <literal type="number">59</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>tzOffset</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>hour</name> <operator>*</operator> <literal type="number">3600</literal> <operator>+</operator> <name>minute</name> <operator>*</operator> <literal type="number">60</literal><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>tzOffset</name> <operator>=</operator> <name>hour</name> <operator>*</operator> <literal type="number">3600</literal> <operator>+</operator> <name>minute</name> <operator>*</operator> <literal type="number">60</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * rfc3339 format:
 * 2013-04-12T15:52:01+08:00
 * 2013-04-12T15:52:01.123+08:00
 *
 * 2013-04-12T15:52:01Z
 * 2013-04-12T15:52:01.123Z
 *
 * iso-8601 format:
 * 2013-04-12T15:52:01+0800
 * 2013-04-12T15:52:01.123+0800
 */</comment>
<function><type><name>int32_t</name></type> <name>parseTimeWithTz</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>timestr</name></decl></parameter>, <parameter><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>time</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>timePrec</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>delim</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>factor</name> <init>= <expr><call><name>TSDB_TICK_PER_SECOND</name><argument_list>(<argument><expr><name>timePrec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>tzOffset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>str</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>delim</name> <operator>==</operator> <literal type="char">'T'</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>taosStrpTime</name><argument_list>(<argument><expr><name>timestr</name></expr></argument>, <argument><expr><literal type="string">"%Y-%m-%dT%H:%M:%S"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>delim</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>taosStrpTime</name><argument_list>(<argument><expr><name>timestr</name></expr></argument>, <argument><expr><literal type="string">"%Y-%m-%d %H:%M:%S"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>str</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

<comment type="block">/* mktime will be affected by TZ, set by using taos_options */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>seconds</name> <init>= <expr><call><name>user_mktime64</name><argument_list>(<argument><expr><name><name>tm</name><operator>.</operator><name>tm_year</name></name> <operator>+</operator> <literal type="number">1900</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_mon</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_mday</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_hour</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_min</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_sec</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="line">// int64_t seconds = gmtime(&amp;tm);</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>seconds</name> <init>= <expr><call><name>timegm</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>fraction</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>forwardToTimeStringEnd</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>timestr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'Z'</literal> <operator>||</operator> <name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'z'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
    <comment type="block">/* utc time, no millisecond, return directly*/</comment>
    <expr_stmt><expr><operator>*</operator><name>time</name> <operator>=</operator> <name>seconds</name> <operator>*</operator> <name>factor</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>str</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>fraction</name> <operator>=</operator> <call><name>parseFraction</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><name>timePrec</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>time</name> <operator>=</operator> <name>seconds</name> <operator>*</operator> <name>factor</name> <operator>+</operator> <name>fraction</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>char</name></type> <name>seg</name> <init>= <expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>seg</name> <operator>!=</operator> <literal type="char">'Z'</literal> <operator>&amp;&amp;</operator> <name>seg</name> <operator>!=</operator> <literal type="char">'z'</literal> <operator>&amp;&amp;</operator> <name>seg</name> <operator>!=</operator> <literal type="char">'+'</literal> <operator>&amp;&amp;</operator> <name>seg</name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>seg</name> <operator>==</operator> <literal type="char">'Z'</literal> <operator>||</operator> <name>seg</name> <operator>==</operator> <literal type="char">'z'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>seg</name> <operator>==</operator> <literal type="char">'+'</literal> <operator>||</operator> <name>seg</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// parse the timezone</comment>
      <if_stmt><if>if <condition>(<expr><call><name>parseTimezone</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tzOffset</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><operator>*</operator><name>time</name> <operator>+=</operator> <name>tzOffset</name> <operator>*</operator> <name>factor</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal> <operator>||</operator> <name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>time</name> <operator>=</operator> <name>seconds</name> <operator>*</operator> <name>factor</name> <operator>+</operator> <name>fraction</name></expr>;</expr_stmt>

    <comment type="line">// parse the timezone</comment>
    <if_stmt><if>if <condition>(<expr><call><name>parseTimezone</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tzOffset</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>time</name> <operator>+=</operator> <name>tzOffset</name> <operator>*</operator> <name>factor</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>bool</name></type> <name>validateTm</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tm</name></name><modifier>*</modifier></type> <name>pTm</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pTm</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name><name>dayOfMonth</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">31</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>leapYearMonthDay</name> <init>= <expr><literal type="number">29</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>year</name> <init>= <expr><name><name>pTm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>+</operator> <literal type="number">1900</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>    <name>isLeapYear</name> <init>= <expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>year</name> <operator>%</operator> <literal type="number">100</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>year</name> <operator>%</operator> <literal type="number">400</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><operator>(</operator><name>year</name> <operator>%</operator> <literal type="number">4</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>isLeapYear</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pTm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pTm</name><operator>-&gt;</operator><name>tm_mday</name></name> <operator>&gt;</operator> <name>leapYearMonthDay</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pTm</name><operator>-&gt;</operator><name>tm_mday</name></name> <operator>&gt;</operator> <name><name>dayOfMonth</name><index>[<expr><name><name>pTm</name><operator>-&gt;</operator><name>tm_mon</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>parseLocaltime</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>timestr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>utime</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>timePrec</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>delim</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>utime</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>str</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>delim</name> <operator>==</operator> <literal type="char">'T'</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>taosStrpTime</name><argument_list>(<argument><expr><name>timestr</name></expr></argument>, <argument><expr><literal type="string">"%Y-%m-%dT%H:%M:%S"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>delim</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>taosStrpTime</name><argument_list>(<argument><expr><name>timestr</name></expr></argument>, <argument><expr><literal type="string">"%Y-%m-%d %H:%M:%S"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>str</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>str</name> <operator>-</operator> <name>timestr</name><operator>)</operator> <operator>&lt;</operator> <name>len</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>str</name> <operator>!=</operator> <literal type="char">'.'</literal><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>!</operator><call><name>validateTm</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <comment type="line">// if parse failed, try "%Y-%m-%d" format</comment>
    <expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>taosStrpTime</name><argument_list>(<argument><expr><name>timestr</name></expr></argument>, <argument><expr><literal type="string">"%Y-%m-%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>str</name> <operator>-</operator> <name>timestr</name><operator>)</operator> <operator>&lt;</operator> <name>len</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>str</name> <operator>!=</operator> <literal type="char">'.'</literal><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>!</operator><call><name>validateTm</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_MSC_VER</name></cpp:ifdef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1900</literal></expr></cpp:if>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>timezone</name> <init>= <expr><name>_timezone</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>seconds</name> <init>=
      <expr><call><name>user_mktime64</name><argument_list>(<argument><expr><name><name>tm</name><operator>.</operator><name>tm_year</name></name> <operator>+</operator> <literal type="number">1900</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_mon</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_mday</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_hour</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_min</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_sec</name></name></expr></argument>, <argument><expr><name>timezone</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>fraction</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
    <comment type="block">/* parse the second fraction part */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>fraction</name> <operator>=</operator> <call><name>parseFraction</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><name>timePrec</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>utime</name> <operator>=</operator> <call><name>TSDB_TICK_PER_SECOND</name><argument_list>(<argument><expr><name>timePrec</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>seconds</name> <operator>+</operator> <name>fraction</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>parseLocaltimeDst</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>timestr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>utime</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>timePrec</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>delim</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>utime</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_isdst</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>str</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>delim</name> <operator>==</operator> <literal type="char">'T'</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>taosStrpTime</name><argument_list>(<argument><expr><name>timestr</name></expr></argument>, <argument><expr><literal type="string">"%Y-%m-%dT%H:%M:%S"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>delim</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>taosStrpTime</name><argument_list>(<argument><expr><name>timestr</name></expr></argument>, <argument><expr><literal type="string">"%Y-%m-%d %H:%M:%S"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>str</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>str</name> <operator>-</operator> <name>timestr</name><operator>)</operator> <operator>&lt;</operator> <name>len</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>str</name> <operator>!=</operator> <literal type="char">'.'</literal><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>!</operator><call><name>validateTm</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <comment type="line">// if parse failed, try "%Y-%m-%d" format</comment>
    <expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>taosStrpTime</name><argument_list>(<argument><expr><name>timestr</name></expr></argument>, <argument><expr><literal type="string">"%Y-%m-%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>str</name> <operator>-</operator> <name>timestr</name><operator>)</operator> <operator>&lt;</operator> <name>len</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>str</name> <operator>!=</operator> <literal type="char">'.'</literal><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>!</operator><call><name>validateTm</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* mktime will be affected by TZ, set by using taos_options */</comment>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>seconds</name> <init>= <expr><call><name>taosMktime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>fraction</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
    <comment type="block">/* parse the second fraction part */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>fraction</name> <operator>=</operator> <call><name>parseFraction</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><name>timePrec</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>utime</name> <operator>=</operator> <call><name>TSDB_TICK_PER_SECOND</name><argument_list>(<argument><expr><name>timePrec</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>seconds</name> <operator>+</operator> <name>fraction</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name></type> <name>getPrecisionUnit</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>precision</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>units</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{<expr><name>TIME_UNIT_MILLISECOND</name></expr>, <expr><name>TIME_UNIT_MICROSECOND</name></expr>, <expr><name>TIME_UNIT_NANOSECOND</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name>precision</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_TIME_PRECISION_MILLI</name></expr>:</case>
    <case>case <expr><name>TSDB_TIME_PRECISION_MICRO</name></expr>:</case>
    <case>case <expr><name>TSDB_TIME_PRECISION_NANO</name></expr>:</case>
      <return>return <expr><name><name>units</name><index>[<expr><name>precision</name></expr>]</index></name></expr>;</return>
    <default>default:</default>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>convertTimePrecision</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>utime</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>fromPrecision</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>toPrecision</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>fromPrecision</name> <operator>==</operator> <name>TSDB_TIME_PRECISION_MILLI</name> <operator>||</operator> <name>fromPrecision</name> <operator>==</operator> <name>TSDB_TIME_PRECISION_MICRO</name> <operator>||</operator>
         <name>fromPrecision</name> <operator>==</operator> <name>TSDB_TIME_PRECISION_NANO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>toPrecision</name> <operator>==</operator> <name>TSDB_TIME_PRECISION_MILLI</name> <operator>||</operator> <name>toPrecision</name> <operator>==</operator> <name>TSDB_TIME_PRECISION_MICRO</name> <operator>||</operator>
         <name>toPrecision</name> <operator>==</operator> <name>TSDB_TIME_PRECISION_NANO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <switch>switch <condition>(<expr><name>fromPrecision</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_TIME_PRECISION_MILLI</name></expr>:</case> <block>{<block_content>
      <switch>switch <condition>(<expr><name>toPrecision</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>TSDB_TIME_PRECISION_MILLI</name></expr>:</case>
          <return>return <expr><name>utime</name></expr>;</return>
        <case>case <expr><name>TSDB_TIME_PRECISION_MICRO</name></expr>:</case>
          <if_stmt><if>if <condition>(<expr><name>utime</name> <operator>&gt;</operator> <name>INT64_MAX</name> <operator>/</operator> <literal type="number">1000</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>INT64_MAX</name></expr>;</return>
          </block_content>}</block></if></if_stmt>
          <return>return <expr><name>utime</name> <operator>*</operator> <literal type="number">1000</literal></expr>;</return>
        <case>case <expr><name>TSDB_TIME_PRECISION_NANO</name></expr>:</case>
          <if_stmt><if>if <condition>(<expr><name>utime</name> <operator>&gt;</operator> <name>INT64_MAX</name> <operator>/</operator> <literal type="number">1000000</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>INT64_MAX</name></expr>;</return>
          </block_content>}</block></if></if_stmt>
          <return>return <expr><name>utime</name> <operator>*</operator> <literal type="number">1000000</literal></expr>;</return>
        <default>default:</default>
          <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>utime</name></expr>;</return>
      </block_content>}</block></switch>
    </block_content>}</block>  <comment type="line">// end from milli</comment>
    <case>case <expr><name>TSDB_TIME_PRECISION_MICRO</name></expr>:</case> <block>{<block_content>
      <switch>switch <condition>(<expr><name>toPrecision</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>TSDB_TIME_PRECISION_MILLI</name></expr>:</case>
          <return>return <expr><name>utime</name> <operator>/</operator> <literal type="number">1000</literal></expr>;</return>
        <case>case <expr><name>TSDB_TIME_PRECISION_MICRO</name></expr>:</case>
          <return>return <expr><name>utime</name></expr>;</return>
        <case>case <expr><name>TSDB_TIME_PRECISION_NANO</name></expr>:</case>
          <if_stmt><if>if <condition>(<expr><name>utime</name> <operator>&gt;</operator> <name>INT64_MAX</name> <operator>/</operator> <literal type="number">1000</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>INT64_MAX</name></expr>;</return>
          </block_content>}</block></if></if_stmt>
          <return>return <expr><name>utime</name> <operator>*</operator> <literal type="number">1000</literal></expr>;</return>
        <default>default:</default>
          <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>utime</name></expr>;</return>
      </block_content>}</block></switch>
    </block_content>}</block>  <comment type="line">// end from micro</comment>
    <case>case <expr><name>TSDB_TIME_PRECISION_NANO</name></expr>:</case> <block>{<block_content>
      <switch>switch <condition>(<expr><name>toPrecision</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>TSDB_TIME_PRECISION_MILLI</name></expr>:</case>
          <return>return <expr><name>utime</name> <operator>/</operator> <literal type="number">1000000</literal></expr>;</return>
        <case>case <expr><name>TSDB_TIME_PRECISION_MICRO</name></expr>:</case>
          <return>return <expr><name>utime</name> <operator>/</operator> <literal type="number">1000</literal></expr>;</return>
        <case>case <expr><name>TSDB_TIME_PRECISION_NANO</name></expr>:</case>
          <return>return <expr><name>utime</name></expr>;</return>
        <default>default:</default>
          <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>utime</name></expr>;</return>
      </block_content>}</block></switch>
    </block_content>}</block>  <comment type="line">// end from nano</comment>
    <default>default:</default> <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>utime</name></expr>;</return>  <comment type="line">// only to pass windows compilation</comment>
    </block_content>}</block>
  </block_content>}</block></switch>  <comment type="line">// end switch fromPrecision</comment>

  <return>return <expr><name>utime</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// !!!!notice:there are precision problems, double lose precison if time is too large, for example:</comment>
<comment type="line">// 1626006833631000000*1.0 = double = 1626006833631000064</comment>
<comment type="line">// int64_t convertTimePrecision(int64_t time, int32_t fromPrecision, int32_t toPrecision) {</comment>
<comment type="line">//  assert(fromPrecision == TSDB_TIME_PRECISION_MILLI || fromPrecision == TSDB_TIME_PRECISION_MICRO ||</comment>
<comment type="line">//         fromPrecision == TSDB_TIME_PRECISION_NANO);</comment>
<comment type="line">//  assert(toPrecision == TSDB_TIME_PRECISION_MILLI || toPrecision == TSDB_TIME_PRECISION_MICRO ||</comment>
<comment type="line">//         toPrecision == TSDB_TIME_PRECISION_NANO);</comment>
<comment type="line">//  static double factors[3][3] = {{1., 1000., 1000000.}, {1.0 / 1000, 1., 1000.}, {1.0 / 1000000, 1.0 / 1000, 1.}};</comment>
<comment type="line">//  ((double)time * factors[fromPrecision][toPrecision]);</comment>
<comment type="line">//}</comment>

<comment type="line">// !!!!notice: double lose precison if time is too large, for example: 1626006833631000000*1.0 = double =</comment>
<comment type="line">// 1626006833631000064</comment>
<function><type><name>int64_t</name></type> <name>convertTimeFromPrecisionToUnit</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>time</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>fromPrecision</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>toUnit</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>fromPrecision</name> <operator>==</operator> <name>TSDB_TIME_PRECISION_MILLI</name> <operator>||</operator> <name>fromPrecision</name> <operator>==</operator> <name>TSDB_TIME_PRECISION_MICRO</name> <operator>||</operator>
         <name>fromPrecision</name> <operator>==</operator> <name>TSDB_TIME_PRECISION_NANO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name><name>factors</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{<expr><name>NANOSECOND_PER_MSEC</name></expr>, <expr><name>NANOSECOND_PER_USEC</name></expr>, <expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type>  <name>tmp</name> <init>= <expr><name>time</name></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name>toUnit</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="char">'s'</literal></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><name>time</name> <operator>/=</operator> <operator>(</operator><name>NANOSECOND_PER_SEC</name> <operator>/</operator> <name><name>factors</name><index>[<expr><name>fromPrecision</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>time</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><literal type="char">'m'</literal></expr>:</case>
      <expr_stmt><expr><name>time</name> <operator>/=</operator> <operator>(</operator><name>NANOSECOND_PER_MINUTE</name> <operator>/</operator> <name><name>factors</name><index>[<expr><name>fromPrecision</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>time</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'h'</literal></expr>:</case>
      <expr_stmt><expr><name>time</name> <operator>/=</operator> <operator>(</operator><name>NANOSECOND_PER_HOUR</name> <operator>/</operator> <name><name>factors</name><index>[<expr><name>fromPrecision</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>time</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'d'</literal></expr>:</case>
      <expr_stmt><expr><name>time</name> <operator>/=</operator> <operator>(</operator><name>NANOSECOND_PER_DAY</name> <operator>/</operator> <name><name>factors</name><index>[<expr><name>fromPrecision</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>time</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'w'</literal></expr>:</case>
      <expr_stmt><expr><name>time</name> <operator>/=</operator> <operator>(</operator><name>NANOSECOND_PER_WEEK</name> <operator>/</operator> <name><name>factors</name><index>[<expr><name>fromPrecision</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>time</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'a'</literal></expr>:</case>
      <expr_stmt><expr><name>time</name> <operator>/=</operator> <operator>(</operator><name>NANOSECOND_PER_MSEC</name> <operator>/</operator> <name><name>factors</name><index>[<expr><name>fromPrecision</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>time</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'u'</literal></expr>:</case>
      <comment type="line">// the result of (NANOSECOND_PER_USEC/(double)factors[fromPrecision]) maybe a double</comment>
      <switch>switch <condition>(<expr><name>fromPrecision</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>TSDB_TIME_PRECISION_MILLI</name></expr>:</case> <block>{<block_content>
          <expr_stmt><expr><name>tmp</name> <operator>*=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>time</name> <operator>*=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>TSDB_TIME_PRECISION_MICRO</name></expr>:</case> <block>{<block_content>
          <expr_stmt><expr><name>time</name> <operator>/=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>time</name></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>TSDB_TIME_PRECISION_NANO</name></expr>:</case> <block>{<block_content>
          <expr_stmt><expr><name>time</name> <operator>/=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>time</name></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block>
      </block_content>}</block></switch>
      <break>break;</break>
    <case>case <expr><literal type="char">'b'</literal></expr>:</case>
      <expr_stmt><expr><name>tmp</name> <operator>*=</operator> <name><name>factors</name><index>[<expr><name>fromPrecision</name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>time</name> <operator>*=</operator> <name><name>factors</name><index>[<expr><name>fromPrecision</name></expr>]</index></name></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default> <block>{<block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block>
  </block_content>}</block></switch>
  <if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>&gt;=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>INT64_MAX</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>INT64_MAX</name></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>&lt;=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>INT64_MIN</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>INT64_MIN</name></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><name>time</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>convertStringToTimestamp</name><parameter_list>(<parameter><decl><type><name>int16_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>inputData</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>timePrec</name></decl></parameter>, <parameter><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>timeVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>charLen</name> <init>= <expr><call><name>varDataLen</name><argument_list>(<argument><expr><name>inputData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>newColData</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_BINARY</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_VARBINARY</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>newColData</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>charLen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>newColData</name></expr></argument>, <argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>inputData</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>charLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>taosParseTime</name><argument_list>(<argument><expr><name>newColData</name></expr></argument>, <argument><expr><name>timeVal</name></expr></argument>, <argument><expr><name>charLen</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>timePrec</name></expr></argument>, <argument><expr><name>tsDaylight</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>newColData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_INVALID_TIMESTAMP</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>newColData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_NCHAR</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>newColData</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>charLen</name> <operator>+</operator> <name>TSDB_NCHAR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>taosUcs4ToMbs</name><argument_list>(<argument><expr><operator>(</operator><name>TdUcs4</name><operator>*</operator><operator>)</operator><call><name>varDataVal</name><argument_list>(<argument><expr><name>inputData</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>charLen</name></expr></argument>, <argument><expr><name>newColData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>newColData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>newColData</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>taosParseTime</name><argument_list>(<argument><expr><name>newColData</name></expr></argument>, <argument><expr><name>timeVal</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>timePrec</name></expr></argument>, <argument><expr><name>tsDaylight</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>newColData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>ret</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>newColData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getDuration</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>unit</name></decl></parameter>, <parameter><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>result</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>timePrecision</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>unit</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="char">'s'</literal></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>val</name> <operator>&gt;</operator> <name>INT64_MAX</name> <operator>/</operator> <name>MILLISECOND_PER_SECOND</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><operator>(</operator><operator>*</operator><name>result</name><operator>)</operator> <operator>=</operator> <call><name>convertTimePrecision</name><argument_list>(<argument><expr><name>val</name> <operator>*</operator> <name>MILLISECOND_PER_SECOND</name></expr></argument>, <argument><expr><name>TSDB_TIME_PRECISION_MILLI</name></expr></argument>, <argument><expr><name>timePrecision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'m'</literal></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>val</name> <operator>&gt;</operator> <name>INT64_MAX</name> <operator>/</operator> <name>MILLISECOND_PER_MINUTE</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><operator>(</operator><operator>*</operator><name>result</name><operator>)</operator> <operator>=</operator> <call><name>convertTimePrecision</name><argument_list>(<argument><expr><name>val</name> <operator>*</operator> <name>MILLISECOND_PER_MINUTE</name></expr></argument>, <argument><expr><name>TSDB_TIME_PRECISION_MILLI</name></expr></argument>, <argument><expr><name>timePrecision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'h'</literal></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>val</name> <operator>&gt;</operator> <name>INT64_MAX</name> <operator>/</operator> <name>MILLISECOND_PER_MINUTE</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><operator>(</operator><operator>*</operator><name>result</name><operator>)</operator> <operator>=</operator> <call><name>convertTimePrecision</name><argument_list>(<argument><expr><name>val</name> <operator>*</operator> <name>MILLISECOND_PER_HOUR</name></expr></argument>, <argument><expr><name>TSDB_TIME_PRECISION_MILLI</name></expr></argument>, <argument><expr><name>timePrecision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'d'</literal></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>val</name> <operator>&gt;</operator> <name>INT64_MAX</name> <operator>/</operator> <name>MILLISECOND_PER_DAY</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><operator>(</operator><operator>*</operator><name>result</name><operator>)</operator> <operator>=</operator> <call><name>convertTimePrecision</name><argument_list>(<argument><expr><name>val</name> <operator>*</operator> <name>MILLISECOND_PER_DAY</name></expr></argument>, <argument><expr><name>TSDB_TIME_PRECISION_MILLI</name></expr></argument>, <argument><expr><name>timePrecision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'w'</literal></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>val</name> <operator>&gt;</operator> <name>INT64_MAX</name> <operator>/</operator> <name>MILLISECOND_PER_WEEK</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><operator>(</operator><operator>*</operator><name>result</name><operator>)</operator> <operator>=</operator> <call><name>convertTimePrecision</name><argument_list>(<argument><expr><name>val</name> <operator>*</operator> <name>MILLISECOND_PER_WEEK</name></expr></argument>, <argument><expr><name>TSDB_TIME_PRECISION_MILLI</name></expr></argument>, <argument><expr><name>timePrecision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'a'</literal></expr>:</case>
      <expr_stmt><expr><operator>(</operator><operator>*</operator><name>result</name><operator>)</operator> <operator>=</operator> <call><name>convertTimePrecision</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>TSDB_TIME_PRECISION_MILLI</name></expr></argument>, <argument><expr><name>timePrecision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'u'</literal></expr>:</case>
      <expr_stmt><expr><operator>(</operator><operator>*</operator><name>result</name><operator>)</operator> <operator>=</operator> <call><name>convertTimePrecision</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>TSDB_TIME_PRECISION_MICRO</name></expr></argument>, <argument><expr><name>timePrecision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'b'</literal></expr>:</case>
      <expr_stmt><expr><operator>(</operator><operator>*</operator><name>result</name><operator>)</operator> <operator>=</operator> <call><name>convertTimePrecision</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>TSDB_TIME_PRECISION_NANO</name></expr></argument>, <argument><expr><name>timePrecision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default> <block>{<block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block>
  </block_content>}</block></switch>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * n - months
 * y - Years
 * is not allowed, since the duration of month or year are both variable.
 *
 * b - nanoseconds;
 * u - microseconds;
 * a - Millionseconds
 * s - Seconds
 * m - Minutes
 * h - Hours
 * d - Days (24 hours)
 * w - Weeks (7 days)
 */</comment>
<function><type><name>int32_t</name></type> <name>parseAbsoluteDuration</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>token</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>tokenlen</name></decl></parameter>, <parameter><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>duration</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>unit</name></decl></parameter>,
                              <parameter><decl><type><name>int32_t</name></type> <name>timePrecision</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>endPtr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* get the basic numeric value */</comment>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>timestamp</name> <init>= <expr><call><name>taosStr2Int64</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endPtr</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>timestamp</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>errno</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* natual month/year are not allowed in absolute duration */</comment>
  <expr_stmt><expr><operator>*</operator><name>unit</name> <operator>=</operator> <name><name>token</name><index>[<expr><name>tokenlen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>unit</name> <operator>==</operator> <literal type="char">'n'</literal> <operator>||</operator> <operator>*</operator><name>unit</name> <operator>==</operator> <literal type="char">'y'</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>getDuration</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><operator>*</operator><name>unit</name></expr></argument>, <argument><expr><name>duration</name></expr></argument>, <argument><expr><name>timePrecision</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>parseNatualDuration</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>token</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>tokenLen</name></decl></parameter>, <parameter><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>duration</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>unit</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>timePrecision</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <comment type="block">/* get the basic numeric value */</comment>
  <expr_stmt><expr><operator>*</operator><name>duration</name> <operator>=</operator> <call><name>taosStr2Int64</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>duration</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>errno</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>unit</name> <operator>=</operator> <name><name>token</name><index>[<expr><name>tokenLen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>unit</name> <operator>==</operator> <literal type="char">'n'</literal> <operator>||</operator> <operator>*</operator><name>unit</name> <operator>==</operator> <literal type="char">'y'</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>getDuration</name><argument_list>(<argument><expr><operator>*</operator><name>duration</name></expr></argument>, <argument><expr><operator>*</operator><name>unit</name></expr></argument>, <argument><expr><name>duration</name></expr></argument>, <argument><expr><name>timePrecision</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>taosTimeAdd</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>duration</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>unit</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>precision</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>duration</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>t</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>unit</name> <operator>!=</operator> <literal type="char">'n'</literal> <operator>&amp;&amp;</operator> <name>unit</name> <operator>!=</operator> <literal type="char">'y'</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>t</name> <operator>+</operator> <name>duration</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// The following code handles the y/n time duration</comment>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>numOfMonth</name> <init>= <expr><name>duration</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>unit</name> <operator>==</operator> <literal type="char">'y'</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>numOfMonth</name> <operator>*=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>fraction</name> <init>= <expr><name>t</name> <operator>%</operator> <call><name>TSDB_TICK_PER_SECOND</name><argument_list>(<argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>time_t</name></type>    <name>tt</name> <init>= <expr><operator>(</operator><name>time_t</name><operator>)</operator><operator>(</operator><name>t</name> <operator>/</operator> <call><name>TSDB_TICK_PER_SECOND</name><argument_list>(<argument><expr><name>precision</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosLocalTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>mon</name> <init>= <expr><name><name>tm</name><operator>.</operator><name>tm_year</name></name> <operator>*</operator> <literal type="number">12</literal> <operator>+</operator> <name><name>tm</name><operator>.</operator><name>tm_mon</name></name> <operator>+</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><name>numOfMonth</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_year</name></name> <operator>=</operator> <name>mon</name> <operator>/</operator> <literal type="number">12</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_mon</name></name> <operator>=</operator> <name>mon</name> <operator>%</operator> <literal type="number">12</literal></expr>;</expr_stmt>

  <return>return <expr><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><call><name>taosMktime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>TSDB_TICK_PER_SECOND</name><argument_list>(<argument><expr><name>precision</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>fraction</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosTimeCountInterval</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>skey</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ekey</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>interval</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>unit</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>precision</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>ekey</name> <operator>&lt;</operator> <name>skey</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>tmp</name> <init>= <expr><name>ekey</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>ekey</name> <operator>=</operator> <name>skey</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>skey</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>unit</name> <operator>!=</operator> <literal type="char">'n'</literal> <operator>&amp;&amp;</operator> <name>unit</name> <operator>!=</operator> <literal type="char">'y'</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>ekey</name> <operator>-</operator> <name>skey</name><operator>)</operator> <operator>/</operator> <name>interval</name><operator>)</operator></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>skey</name> <operator>/=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><call><name>TSDB_TICK_PER_SECOND</name><argument_list>(<argument><expr><name>precision</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>ekey</name> <operator>/=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><call><name>TSDB_TICK_PER_SECOND</name><argument_list>(<argument><expr><name>precision</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>time_t</name></type>    <name>t</name> <init>= <expr><operator>(</operator><name>time_t</name><operator>)</operator><name>skey</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosLocalTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>smon</name> <init>= <expr><name><name>tm</name><operator>.</operator><name>tm_year</name></name> <operator>*</operator> <literal type="number">12</literal> <operator>+</operator> <name><name>tm</name><operator>.</operator><name>tm_mon</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator><name>ekey</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosLocalTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>emon</name> <init>= <expr><name><name>tm</name><operator>.</operator><name>tm_year</name></name> <operator>*</operator> <literal type="number">12</literal> <operator>+</operator> <name><name>tm</name><operator>.</operator><name>tm_mon</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>unit</name> <operator>==</operator> <literal type="char">'y'</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>interval</name> <operator>*=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><operator>(</operator><name>emon</name> <operator>-</operator> <name>smon</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><name>interval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>taosTimeTruncate</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SInterval</name><modifier>*</modifier></type> <name>pInterval</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>precision</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pInterval</name><operator>-&gt;</operator><name>sliding</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>interval</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>t</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>start</name> <init>= <expr><name>t</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pInterval</name><operator>-&gt;</operator><name>slidingUnit</name></name> <operator>==</operator> <literal type="char">'n'</literal> <operator>||</operator> <name><name>pInterval</name><operator>-&gt;</operator><name>slidingUnit</name></name> <operator>==</operator> <literal type="char">'y'</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>start</name> <operator>/=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><call><name>TSDB_TICK_PER_SECOND</name><argument_list>(<argument><expr><name>precision</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type>    <name>tt</name> <init>= <expr><operator>(</operator><name>time_t</name><operator>)</operator><name>start</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosLocalTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_min</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_hour</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_mday</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pInterval</name><operator>-&gt;</operator><name>slidingUnit</name></name> <operator>==</operator> <literal type="char">'y'</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_mon</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_year</name></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name><name>tm</name><operator>.</operator><name>tm_year</name></name> <operator>/</operator> <name><name>pInterval</name><operator>-&gt;</operator><name>sliding</name></name> <operator>*</operator> <name><name>pInterval</name><operator>-&gt;</operator><name>sliding</name></name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>mon</name> <init>= <expr><name><name>tm</name><operator>.</operator><name>tm_year</name></name> <operator>*</operator> <literal type="number">12</literal> <operator>+</operator> <name><name>tm</name><operator>.</operator><name>tm_mon</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>mon</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>mon</name> <operator>/</operator> <name><name>pInterval</name><operator>-&gt;</operator><name>sliding</name></name> <operator>*</operator> <name><name>pInterval</name><operator>-&gt;</operator><name>sliding</name></name><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_year</name></name> <operator>=</operator> <name>mon</name> <operator>/</operator> <literal type="number">12</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_mon</name></name> <operator>=</operator> <name>mon</name> <operator>%</operator> <literal type="number">12</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>start</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><call><name>taosMktime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>TSDB_TICK_PER_SECOND</name><argument_list>(<argument><expr><name>precision</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>delta</name> <init>= <expr><name>t</name> <operator>-</operator> <name><name>pInterval</name><operator>-&gt;</operator><name>interval</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>factor</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>delta</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>start</name> <operator>=</operator> <operator>(</operator><name>delta</name> <operator>/</operator> <name><name>pInterval</name><operator>-&gt;</operator><name>sliding</name></name> <operator>+</operator> <name>factor</name><operator>)</operator> <operator>*</operator> <name><name>pInterval</name><operator>-&gt;</operator><name>sliding</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pInterval</name><operator>-&gt;</operator><name>intervalUnit</name></name> <operator>==</operator> <literal type="char">'d'</literal> <operator>||</operator> <name><name>pInterval</name><operator>-&gt;</operator><name>intervalUnit</name></name> <operator>==</operator> <literal type="char">'w'</literal></expr>)</condition> <block>{<block_content>
      <comment type="block">/*
       * here we revised the start time of day according to the local time zone,
       * but in case of DST, the start time of one day need to be dynamically decided.
       */</comment>
      <comment type="line">// todo refactor to extract function that is available for Linux/Windows/Mac platform</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WINDOWS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1900</literal></expr></cpp:if>
      <comment type="line">// see https://docs.microsoft.com/en-us/cpp/c-runtime-library/daylight-dstbias-timezone-and-tzname?view=vs-2019</comment>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>timezone</name> <init>= <expr><name>_timezone</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>daylight</name> <init>= <expr><name>_daylight</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type>  <name>tzname</name> <init>= <expr><name>_tzname</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

      <expr_stmt><expr><name>start</name> <operator>+=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>timezone</name> <operator>*</operator> <call><name>TSDB_TICK_PER_SECOND</name><argument_list>(<argument><expr><name>precision</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>end</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// not enough time range</comment>
    <if_stmt><if>if <condition>(<expr><name><name>start</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>INT64_MAX</name> <operator>-</operator> <name>start</name></expr></argument> &gt;</argument_list></name> <name><name>pInterval</name><operator>-&gt;</operator><name>interval</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>taosTimeAdd</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>intervalUnit</name></name></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <while>while <condition>(<expr><name>end</name> <operator>&lt;</operator> <name>t</name></expr>)</condition> <block>{<block_content>  <comment type="line">// move forward to the correct time window</comment>
        <expr_stmt><expr><name>start</name> <operator>+=</operator> <name><name>pInterval</name><operator>-&gt;</operator><name>sliding</name></name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>start</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>INT64_MAX</name> <operator>-</operator> <name>start</name></expr></argument> &gt;</argument_list></name> <name><name>pInterval</name><operator>-&gt;</operator><name>interval</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>end</name> <operator>=</operator> <name>start</name> <operator>+</operator> <name><name>pInterval</name><operator>-&gt;</operator><name>interval</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>end</name> <operator>=</operator> <name>INT64_MAX</name></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></while>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>end</name> <operator>=</operator> <name>INT64_MAX</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>offset</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pInterval</name><operator>-&gt;</operator><name>offset</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>taosTimeAdd</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>offsetUnit</name></name></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// try to move current window to the left-hande-side, due to the offset effect.</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>end</name> <init>= <expr><call><name>taosTimeAdd</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>intervalUnit</name></name></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>newEnd</name> <init>= <expr><name>end</name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>newEnd</name> <operator>&gt;=</operator> <name>t</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>end</name> <operator>=</operator> <name>newEnd</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>newEnd</name> <operator>=</operator> <call><name>taosTimeAdd</name><argument_list>(<argument><expr><name>newEnd</name></expr></argument>, <argument><expr><operator>-</operator><name><name>pInterval</name><operator>-&gt;</operator><name>sliding</name></name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>slidingUnit</name></name></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>taosTimeAdd</name><argument_list>(<argument><expr><name>end</name></expr></argument>, <argument><expr><operator>-</operator><name><name>pInterval</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>, <argument><expr><name><name>pInterval</name><operator>-&gt;</operator><name>intervalUnit</name></name></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>start</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// internal function, when program is paused in debugger,</comment>
<comment type="line">// one can call this function from debugger to print a</comment>
<comment type="line">// timestamp as human readable string, for example (gdb):</comment>
<comment type="line">//     p fmtts(1593769722)</comment>
<comment type="line">// outputs:</comment>
<comment type="line">//     2020-07-03 17:48:42</comment>
<comment type="line">// and the parameter can also be a variable.</comment>
<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>fmtts</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>ts</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">96</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>      <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type>   <name>tm</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>ts</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">62135625943</literal> <operator>&amp;&amp;</operator> <name>ts</name> <operator>&lt;</operator> <literal type="number">32503651200</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>time_t</name></type> <name>t</name> <init>= <expr><operator>(</operator><name>time_t</name><operator>)</operator><name>ts</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosLocalTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pos</name> <operator>+=</operator> <call><name>strftime</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"s=%Y-%m-%d %H:%M:%S"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>ts</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">62135625943000</literal> <operator>&amp;&amp;</operator> <name>ts</name> <operator>&lt;</operator> <literal type="number">32503651200000</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>time_t</name></type> <name>t</name> <init>= <expr><operator>(</operator><name>time_t</name><operator>)</operator><operator>(</operator><name>ts</name> <operator>/</operator> <literal type="number">1000</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosLocalTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>buf</name><index>[<expr><name>pos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>buf</name><index>[<expr><name>pos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'|'</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>buf</name><index>[<expr><name>pos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>pos</name> <operator>+=</operator> <call><name>strftime</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"ms=%Y-%m-%d %H:%M:%S"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pos</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><literal type="string">".%03d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>ts</name> <operator>%</operator> <literal type="number">1000</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <block>{<block_content>
    <decl_stmt><decl><type><name>time_t</name></type> <name>t</name> <init>= <expr><operator>(</operator><name>time_t</name><operator>)</operator><operator>(</operator><name>ts</name> <operator>/</operator> <literal type="number">1000000</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosLocalTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>buf</name><index>[<expr><name>pos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>buf</name><index>[<expr><name>pos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'|'</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>buf</name><index>[<expr><name>pos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>pos</name> <operator>+=</operator> <call><name>strftime</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"us=%Y-%m-%d %H:%M:%S"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pos</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><literal type="string">".%06d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>ts</name> <operator>%</operator> <literal type="number">1000000</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>

  <return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosFormatUtcTime</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>bufLen</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>precision</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type>      <name><name>ts</name><index>[<expr><literal type="number">40</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>ptm</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>fractionLen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>format</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>time_t</name></type>  <name>quot</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type>    <name>mod</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <switch>switch <condition>(<expr><name>precision</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_TIME_PRECISION_MILLI</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><name>quot</name> <operator>=</operator> <name>t</name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>fractionLen</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>format</name> <operator>=</operator> <literal type="string">".%03"</literal> <name>PRId64</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>mod</name> <operator>=</operator> <name>t</name> <operator>%</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>TSDB_TIME_PRECISION_MICRO</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><name>quot</name> <operator>=</operator> <name>t</name> <operator>/</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>fractionLen</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>format</name> <operator>=</operator> <literal type="string">".%06"</literal> <name>PRId64</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>mod</name> <operator>=</operator> <name>t</name> <operator>%</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>TSDB_TIME_PRECISION_NANO</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><name>quot</name> <operator>=</operator> <name>t</name> <operator>/</operator> <literal type="number">1000000000</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>fractionLen</name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>format</name> <operator>=</operator> <literal type="string">".%09"</literal> <name>PRId64</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>mod</name> <operator>=</operator> <name>t</name> <operator>%</operator> <literal type="number">1000000000</literal></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>

    <default>default:</default>
      <expr_stmt><expr><name>fractionLen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></switch>

  <expr_stmt><expr><call><name>taosLocalTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>quot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>length</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>strftime</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="string">"%Y-%m-%dT%H:%M:%S"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>length</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>ts</name> <operator>+</operator> <name>length</name></expr></argument>, <argument><expr><name>fractionLen</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>length</name> <operator>+=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>strftime</name><argument_list>(<argument><expr><name>ts</name> <operator>+</operator> <name>length</name></expr></argument>, <argument><expr><literal type="number">40</literal> <operator>-</operator> <name>length</name></expr></argument>, <argument><expr><literal type="string">"%z"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><name>bufLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
