<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/os/src/osSysinfo.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"taoserror.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROCESS_ITEM</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>user</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>nice</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>system</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>idle</name></decl>;</decl_stmt>
}</block></struct></type> <name>SysCpuInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>utime</name></decl>;</decl_stmt>   <comment type="line">// user time</comment>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>stime</name></decl>;</decl_stmt>   <comment type="line">// kernel time</comment>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>cutime</name></decl>;</decl_stmt>  <comment type="line">// all user time</comment>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>cstime</name></decl>;</decl_stmt>  <comment type="line">// all dead time</comment>
}</block></struct></type> <name>ProcCpuInfo</name>;</typedef>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>

<comment type="block">/*
 * windows implementation
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>_WIN64</name><operator>)</operator></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iphlpapi.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mswsock.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;psapi.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ws2tcpip.h&gt;</cpp:file></cpp:include>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>comment</name><name>(</name><name>lib</name><name>,</name> <cpp:literal>"Mswsock.lib "</cpp:literal><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;objbase.h&gt;</cpp:file></cpp:include>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>push</name><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name> <name>:</name> <name>4091</name><name>)</name></cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;DbgHelp.h&gt;</cpp:file></cpp:include>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>pop</name><name>)</name></cpp:pragma>

<function><type><name>LONG</name> <name>WINAPI</name></type> <name>FlCrashDump</name><parameter_list>(<parameter><decl><type><name>PEXCEPTION_POINTERS</name></type> <name>ep</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <typedef>typedef <function_decl><type><name>BOOL</name></type>(<name>WINAPI</name> <modifier>*</modifier> <name>FxMiniDumpWriteDump</name>)<parameter_list>(<parameter><decl><type><name>IN</name> <name>HANDLE</name></type> <name>hProcess</name></decl></parameter>, <parameter><decl><type><name>IN</name> <name>DWORD</name></type> <name>ProcessId</name></decl></parameter>, <parameter><decl><type><name>IN</name> <name>HANDLE</name></type> <name>hFile</name></decl></parameter>,
                                             <parameter><decl><type><name>IN</name> <name>MINIDUMP_TYPE</name></type>                           <name>DumpType</name></decl></parameter>,
                                             <parameter><decl><type><name>IN</name> <name>CONST</name> <name>PMINIDUMP_EXCEPTION_INFORMATION</name></type>   <name>ExceptionParam</name></decl></parameter>,
                                             <parameter><decl><type><name>IN</name> <name>CONST</name> <name>PMINIDUMP_USER_STREAM_INFORMATION</name></type> <name>UserStreamParam</name></decl></parameter>,
                                             <parameter><decl><type><name>IN</name> <name>CONST</name> <name>PMINIDUMP_CALLBACK_INFORMATION</name></type>    <name>CallbackParam</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

  <decl_stmt><decl><type><name>HMODULE</name></type> <name>dll</name> <init>= <expr><call><name>LoadLibrary</name><argument_list>(<argument><expr><literal type="string">"dbghelp.dll"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>dll</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>EXCEPTION_CONTINUE_SEARCH</name></expr>;</return></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><name>FxMiniDumpWriteDump</name></type> <name>mdwd</name> <init>= <expr><operator>(</operator><name>FxMiniDumpWriteDump</name><operator>)</operator><operator>(</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>dll</name></expr></argument>, <argument><expr><literal type="string">"MiniDumpWriteDump"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>mdwd</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name>dll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>EXCEPTION_CONTINUE_SEARCH</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>TCHAR</name></type> <name><name>path</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DWORD</name></type> <name>len</name> <init>= <expr><call><name>GetModuleFileName</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>_countof</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>path</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'d'</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>path</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'m'</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>path</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'p'</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>HANDLE</name></type> <name>file</name> <init>= <expr><call><name>CreateFile</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>GENERIC_WRITE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>CREATE_ALWAYS</name></expr></argument>, <argument><expr><name>FILE_ATTRIBUTE_NORMAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>MINIDUMP_EXCEPTION_INFORMATION</name></type> <name>mei</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>mei</name><operator>.</operator><name>ThreadId</name></name> <operator>=</operator> <call><name>GetCurrentThreadId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mei</name><operator>.</operator><name>ExceptionPointers</name></name> <operator>=</operator> <name>ep</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mei</name><operator>.</operator><name>ClientPointers</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

  <expr_stmt><expr><call>(<modifier>*</modifier><name>mdwd</name>)<argument_list>(<argument><expr><call><name>GetCurrentProcess</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>GetCurrentProcessId</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>MiniDumpWithHandleData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mei</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name>dll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>EXCEPTION_CONTINUE_SEARCH</name></expr>;</return>
</block_content>}</block></function>
<function_decl><type><name>LONG</name> <name>WINAPI</name></type> <name>exceptionHandler</name><parameter_list>(<parameter><decl><type><name>LPEXCEPTION_POINTERS</name></type> <name>exception</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_DARWIN_64</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libproc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sysctl.h&gt;</cpp:file></cpp:include>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;argp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/sysctl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/file.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/resource.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/statvfs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/syscall.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/utsname.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>pid_t</name></type> <name>tsProcId</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type>  <name><name>tsSysNetFile</name><index>[]</index></name> <init>= <expr><literal type="string">"/proc/net/dev"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type>  <name><name>tsSysCpuFile</name><index>[]</index></name> <init>= <expr><literal type="string">"/proc/stat"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type>  <name><name>tsProcCpuFile</name><index>[<expr><literal type="number">25</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type>  <name><name>tsProcMemFile</name><index>[<expr><literal type="number">25</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type>  <name><name>tsProcIOFile</name><index>[<expr><literal type="number">25</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>taosGetProcIOnfos</name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>tsPageSizeKB</name> <operator>=</operator> <call><name>sysconf</name><argument_list>(<argument><expr><name>_SC_PAGESIZE</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsOpenMax</name> <operator>=</operator> <call><name>sysconf</name><argument_list>(<argument><expr><name>_SC_OPEN_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsStreamMax</name> <operator>=</operator> <call><name>sysconf</name><argument_list>(<argument><expr><name>_SC_STREAM_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsProcId</name> <operator>=</operator> <operator>(</operator><name>pid_t</name><operator>)</operator><call><name>syscall</name><argument_list>(<argument><expr><name>SYS_gettid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>tsProcMemFile</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tsProcMemFile</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"/proc/%d/status"</literal></expr></argument>, <argument><expr><name>tsProcId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>tsProcCpuFile</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tsProcCpuFile</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"/proc/%d/stat"</literal></expr></argument>, <argument><expr><name>tsProcId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>tsProcIOFile</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tsProcIOFile</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"/proc/%d/io"</literal></expr></argument>, <argument><expr><name>tsProcId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>taosGetSysCpuInfo</name><parameter_list>(<parameter><decl><type><name>SysCpuInfo</name> <modifier>*</modifier></type><name>cpuInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <decl_stmt><decl><type><name>FILETIME</name></type> <name>pre_idleTime</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FILETIME</name></type> <name>pre_kernelTime</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FILETIME</name></type> <name>pre_userTime</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FILETIME</name></type> <name>idleTime</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FILETIME</name></type> <name>kernelTime</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FILETIME</name></type> <name>userTime</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>     <name>res</name> <init>= <expr><call><name>GetSystemTimes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>idleTime</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kernelTime</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>userTime</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>cpuInfo</name><operator>-&gt;</operator><name>idle</name></name> <operator>=</operator> <call><name>CompareFileTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pre_idleTime</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idleTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cpuInfo</name><operator>-&gt;</operator><name>system</name></name> <operator>=</operator> <call><name>CompareFileTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pre_kernelTime</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kernelTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cpuInfo</name><operator>-&gt;</operator><name>user</name></name> <operator>=</operator> <call><name>CompareFileTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pre_userTime</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>userTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cpuInfo</name><operator>-&gt;</operator><name>nice</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DARWIN</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <expr_stmt><expr><name><name>cpuInfo</name><operator>-&gt;</operator><name>idle</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cpuInfo</name><operator>-&gt;</operator><name>system</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cpuInfo</name><operator>-&gt;</operator><name>user</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cpuInfo</name><operator>-&gt;</operator><name>nice</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>pFile</name> <init>= <expr><call><name>taosOpenFile</name><argument_list>(<argument><expr><name>tsSysCpuFile</name></expr></argument>, <argument><expr><name>TD_FILE_READ</name> <operator>|</operator> <name>TD_FILE_STREAM</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name></type>    <name><name>line</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ssize_t</name></type> <name>bytes</name> <init>= <expr><call><name>taosGetsFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>cpu</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"%s %"</literal> <name>PRIu64</name> <literal type="string">" %"</literal> <name>PRIu64</name> <literal type="string">" %"</literal> <name>PRIu64</name> <literal type="string">" %"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><name>cpu</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cpuInfo</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cpuInfo</name><operator>-&gt;</operator><name>nice</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cpuInfo</name><operator>-&gt;</operator><name>system</name></name></expr></argument>,
         <argument><expr><operator>&amp;</operator><name><name>cpuInfo</name><operator>-&gt;</operator><name>idle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>taosGetProcCpuInfo</name><parameter_list>(<parameter><decl><type><name>ProcCpuInfo</name> <modifier>*</modifier></type><name>cpuInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <decl_stmt><decl><type><name>FILETIME</name></type> <name>pre_krnlTm</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FILETIME</name></type> <name>pre_usrTm</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FILETIME</name></type> <name>creatTm</name></decl>, <decl><type ref="prev"/><name>exitTm</name></decl>, <decl><type ref="prev"/><name>krnlTm</name></decl>, <decl><type ref="prev"/><name>usrTm</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>GetThreadTimes</name><argument_list>(<argument><expr><call><name>GetCurrentThread</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>creatTm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exitTm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>krnlTm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>usrTm</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>cpuInfo</name><operator>-&gt;</operator><name>stime</name></name> <operator>=</operator> <call><name>CompareFileTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pre_krnlTm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>krnlTm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cpuInfo</name><operator>-&gt;</operator><name>utime</name></name> <operator>=</operator> <call><name>CompareFileTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pre_usrTm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>usrTm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cpuInfo</name><operator>-&gt;</operator><name>cutime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cpuInfo</name><operator>-&gt;</operator><name>cstime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DARWIN</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <expr_stmt><expr><name><name>cpuInfo</name><operator>-&gt;</operator><name>stime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cpuInfo</name><operator>-&gt;</operator><name>utime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cpuInfo</name><operator>-&gt;</operator><name>cutime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cpuInfo</name><operator>-&gt;</operator><name>cstime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>pFile</name> <init>= <expr><call><name>taosOpenFile</name><argument_list>(<argument><expr><name>tsProcCpuFile</name></expr></argument>, <argument><expr><name>TD_FILE_READ</name> <operator>|</operator> <name>TD_FILE_STREAM</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name></type>    <name><name>line</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ssize_t</name></type> <name>bytes</name> <init>= <expr><call><name>taosGetsFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>blank</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>line</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>blank</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>blank</name> <operator>==</operator> <name>PROCESS_ITEM</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>line</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRIu64</name> <literal type="string">" %"</literal> <name>PRIu64</name> <literal type="string">" %"</literal> <name>PRIu64</name> <literal type="string">" %"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cpuInfo</name><operator>-&gt;</operator><name>utime</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cpuInfo</name><operator>-&gt;</operator><name>stime</name></name></expr></argument>,
             <argument><expr><operator>&amp;</operator><name><name>cpuInfo</name><operator>-&gt;</operator><name>cutime</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cpuInfo</name><operator>-&gt;</operator><name>cstime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>taosCheckSystemIsLittleEnd</name><parameter_list>()</parameter_list> <block>{<block_content>
  <union>union <name>check</name> <block>{
    <decl_stmt><decl><type><name>int16_t</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>    <name><name>ch</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
  }</block> <decl><name>c</name></decl>;</union>
  <expr_stmt><expr><name><name>c</name><operator>.</operator><name>i</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <return>return <expr><name><name>c</name><operator>.</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosGetSystemInfo</name><parameter_list>()</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <expr_stmt><expr><call><name>taosGetCpuCores</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tsNumOfCores</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosGetTotalMemory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tsTotalMemoryKB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosGetCpuUsage</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_DARWIN_64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <decl_stmt><decl><type><name>long</name></type> <name>physical_pages</name> <init>= <expr><call><name>sysconf</name><argument_list>(<argument><expr><name>_SC_PHYS_PAGES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type> <name>page_size</name> <init>= <expr><call><name>sysconf</name><argument_list>(<argument><expr><name>_SC_PAGESIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>tsTotalMemoryKB</name> <operator>=</operator> <name>physical_pages</name> <operator>*</operator> <name>page_size</name> <operator>/</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsPageSizeKB</name> <operator>=</operator> <name>page_size</name> <operator>/</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>tsNumOfCores</name> <operator>=</operator> <call><name>sysconf</name><argument_list>(<argument><expr><name>_SC_NPROCESSORS_ONLN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>taosGetProcIOnfos</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosGetCpuCores</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tsNumOfCores</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosGetTotalMemory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tsTotalMemoryKB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosGetCpuUsage</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosGetCpuInstructions</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tsSSE42Enable</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tsAVXEnable</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tsAVX2Enable</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tsFMAEnable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosGetEmail</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>email</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>maxLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <comment type="line">// assert(0);</comment>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_DARWIN_64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filepath</name> <init>= <expr><literal type="string">"/usr/local/taos/email"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>pFile</name> <init>= <expr><call><name>taosOpenFile</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><name>TD_FILE_READ</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosReadFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>email</name></expr></argument>, <argument><expr><name>maxLen</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filepath</name> <init>= <expr><literal type="string">"/usr/local/taos/email"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>pFile</name> <init>= <expr><call><name>taosOpenFile</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><name>TD_FILE_READ</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosReadFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>email</name></expr></argument>, <argument><expr><name>maxLen</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>



<function><type><name>int32_t</name></type> <name>taosGetOsReleaseName</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>releaseName</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>maxLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>releaseName</name></expr></argument>, <argument><expr><name>maxLen</name></expr></argument>, <argument><expr><literal type="string">"Windows"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_DARWIN_64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <decl_stmt><decl><type><name>char</name></type> <name><name>osversion</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>osversion_len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>osversion</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name><name>osversion_name</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>CTL_KERN</name></expr>, <expr><name>KERN_OSRELEASE</name></expr> }</block></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>sysctl</name><argument_list>(<argument><expr><name>osversion_name</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>osversion</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>osversion_len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint32_t</name></type> <name>major</name></decl>, <decl><type ref="prev"/><name>minor</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>osversion</name></expr></argument>, <argument><expr><literal type="string">"%u.%u"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>major</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>minor</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>major</name> <operator>&gt;=</operator> <literal type="number">20</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>major</name> <operator>-=</operator> <literal type="number">9</literal></expr>;</expr_stmt> <comment type="line">// macOS 11 and newer</comment>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>releaseName</name></expr></argument>, <argument><expr><literal type="string">"macOS %u.%u"</literal></expr></argument>, <argument><expr><name>major</name></expr></argument>, <argument><expr><name>minor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>major</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt> <comment type="line">// macOS 10.1.1 and newer</comment>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>releaseName</name></expr></argument>, <argument><expr><literal type="string">"macOS 10.%d.%d"</literal></expr></argument>, <argument><expr><name>major</name></expr></argument>, <argument><expr><name>minor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>line</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>  <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>pFile</name> <init>= <expr><call><name>taosOpenFile</name><argument_list>(<argument><expr><literal type="string">"/etc/os-release"</literal></expr></argument>, <argument><expr><name>TD_FILE_READ</name> <operator>|</operator> <name>TD_FILE_STREAM</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

  <while>while <condition>(<expr><operator>(</operator><name>size</name> <operator>=</operator> <call><name>taosGetsFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>line</name><index>[<expr><name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"PRETTY_NAME"</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>line</name><index>[<expr><name>size</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name>releaseName</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>maxLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosGetCpuInfo</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cpuModel</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>maxLen</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>numOfCores</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <decl_stmt><decl><type><name>char</name></type>  <name><name>value</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DWORD</name></type> <name>bufferSize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>RegGetValue</name><argument_list>(<argument><expr><name>HKEY_LOCAL_MACHINE</name></expr></argument>, <argument><expr><literal type="string">"HARDWARE\\DESCRIPTION\\System\\CentralProcessor\\0"</literal></expr></argument>, <argument><expr><literal type="string">"ProcessorNameString"</literal></expr></argument>,
              <argument><expr><name>RRF_RT_ANY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>PVOID</name><operator>)</operator><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufferSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name>cpuModel</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>maxLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SYSTEM_INFO</name></type> <name>si</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>si</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SYSTEM_INFO</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>GetSystemInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>numOfCores</name> <operator>=</operator> <name><name>si</name><operator>.</operator><name>dwNumberOfProcessors</name></name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_DARWIN_64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>buf</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>done</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>TdCmdPtr</name></type> <name>pCmd</name> <init>= <expr><call><name>taosOpenCmd</name><argument_list>(<argument><expr><literal type="string">"sysctl -n machdep.cpu.brand_string"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pCmd</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taosGetsCmd</name><argument_list>(<argument><expr><name>pCmd</name></expr></argument>, <argument><expr><name>maxLen</name></expr></argument>, <argument><expr><name>cpuModel</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>done</name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosCloseCmd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pCmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pCmd</name> <operator>=</operator> <call><name>taosOpenCmd</name><argument_list>(<argument><expr><literal type="string">"sysctl -n machdep.cpu.core_count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pCmd</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taosGetsCmd</name><argument_list>(<argument><expr><name>pCmd</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>done</name> <operator>|=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>numOfCores</name> <operator>=</operator> <call><name>atof</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosCloseCmd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pCmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>line</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>  <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>done</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>float</name></type>   <name>coreCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>pFile</name> <init>= <expr><call><name>taosOpenFile</name><argument_list>(<argument><expr><literal type="string">"/proc/cpuinfo"</literal></expr></argument>, <argument><expr><name>TD_FILE_READ</name> <operator>|</operator> <name>TD_FILE_STREAM</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

  <while>while <condition>(<expr><name>done</name> <operator>!=</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>size</name> <operator>=</operator> <call><name>taosGetsFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>line</name><index>[<expr><name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>done</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"model name"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name>cpuModel</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>maxLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>done</name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator><name>done</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"cpu cores"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><operator>*</operator><name>numOfCores</name> <operator>=</operator> <call><name>atof</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>done</name> <operator>|=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"processor"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>coreCount</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>done</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>pFile1</name> <init>= <expr><call><name>taosOpenFile</name><argument_list>(<argument><expr><literal type="string">"/proc/device-tree/model"</literal></expr></argument>, <argument><expr><name>TD_FILE_READ</name> <operator>|</operator> <name>TD_FILE_STREAM</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pFile1</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>taosGetsFile</name><argument_list>(<argument><expr><name>pFile1</name></expr></argument>, <argument><expr><name>maxLen</name></expr></argument>, <argument><expr><name>cpuModel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFile1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>done</name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>done</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>TdCmdPtr</name></type> <name>pCmd</name> <init>= <expr><call><name>taosOpenCmd</name><argument_list>(<argument><expr><literal type="string">"uname -a"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pCmd</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>taosGetsCmd</name><argument_list>(<argument><expr><name>pCmd</name></expr></argument>, <argument><expr><name>maxLen</name></expr></argument>, <argument><expr><name>cpuModel</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>done</name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosCloseCmd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pCmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>done</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>numOfCores</name> <operator>=</operator> <name>coreCount</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>done</name> <operator>|=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosGetCpuCores</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>numOfCores</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <decl_stmt><decl><type><name>SYSTEM_INFO</name></type> <name>info</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>GetSystemInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>numOfCores</name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>dwNumberOfProcessors</name></name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_DARWIN_64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <expr_stmt><expr><operator>*</operator><name>numOfCores</name> <operator>=</operator> <call><name>sysconf</name><argument_list>(<argument><expr><name>_SC_NPROCESSORS_ONLN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><operator>*</operator><name>numOfCores</name> <operator>=</operator> <call><name>sysconf</name><argument_list>(<argument><expr><name>_SC_NPROCESSORS_ONLN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosGetCpuUsage</name><parameter_list>(<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>cpu_system</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>cpu_engine</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <name>int64_t</name></type> <name>lastSysUsed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>int64_t</name></type> <name>lastSysTotal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>int64_t</name></type> <name>lastProcTotal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>int64_t</name></type> <name>curSysUsed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>int64_t</name></type> <name>curSysTotal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>int64_t</name></type> <name>curProcTotal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>cpu_system</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>cpu_system</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>cpu_engine</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>cpu_engine</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>SysCpuInfo</name></type>  <name>sysCpu</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ProcCpuInfo</name></type> <name>procCpu</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taosGetSysCpuInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sysCpu</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>taosGetProcCpuInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>procCpu</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>curSysUsed</name> <operator>=</operator> <name><name>sysCpu</name><operator>.</operator><name>user</name></name> <operator>+</operator> <name><name>sysCpu</name><operator>.</operator><name>nice</name></name> <operator>+</operator> <name><name>sysCpu</name><operator>.</operator><name>system</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>curSysTotal</name> <operator>=</operator> <name>curSysUsed</name> <operator>+</operator> <name><name>sysCpu</name><operator>.</operator><name>idle</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>curProcTotal</name> <operator>=</operator> <name><name>procCpu</name><operator>.</operator><name>utime</name></name> <operator>+</operator> <name><name>procCpu</name><operator>.</operator><name>stime</name></name> <operator>+</operator> <name><name>procCpu</name><operator>.</operator><name>cutime</name></name> <operator>+</operator> <name><name>procCpu</name><operator>.</operator><name>cstime</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>curSysTotal</name> <operator>&gt;</operator> <name>lastSysTotal</name> <operator>&amp;&amp;</operator> <name>curSysUsed</name> <operator>&gt;=</operator> <name>lastSysUsed</name> <operator>&amp;&amp;</operator> <name>curProcTotal</name> <operator>&gt;=</operator> <name>lastProcTotal</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>cpu_system</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>cpu_system</name> <operator>=</operator> <operator>(</operator><name>curSysUsed</name> <operator>-</operator> <name>lastSysUsed</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>curSysTotal</name> <operator>-</operator> <name>lastSysTotal</name><operator>)</operator> <operator>*</operator> <literal type="number">100</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>cpu_engine</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>cpu_engine</name> <operator>=</operator> <operator>(</operator><name>curProcTotal</name> <operator>-</operator> <name>lastProcTotal</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>curSysTotal</name> <operator>-</operator> <name>lastSysTotal</name><operator>)</operator> <operator>*</operator> <literal type="number">100</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>lastSysUsed</name> <operator>=</operator> <name>curSysUsed</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>lastSysTotal</name> <operator>=</operator> <name>curSysTotal</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>lastProcTotal</name> <operator>=</operator> <name>curProcTotal</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__cpuid_fix</name><parameter_list>(<parameter><type><name>level</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> \
              <cpp:value>__asm__("xor %%ecx, %%ecx\n" \
                      "cpuid\n" \
                      : "=a"(a), "=b"(b), "=c"(c), "=d"(d) \
                      : "0"(level))</cpp:value></cpp:define>

<comment type="line">// todo add for windows and mac</comment>
<function><type><name>int32_t</name></type> <name>taosGetCpuInstructions</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>sse42</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>avx</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>avx2</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>fma</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_DARWIN_64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_TD_X86_</name></cpp:ifdef>
  <comment type="line">// Since the compiler is not support avx/avx2 instructions, the global variables always need to be</comment>
  <comment type="line">// set to be false</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__AVX__</name> <operator>||</operator> <name>__AVX2__</name></expr></cpp:if>
  <expr_stmt><expr><name>tsSIMDEnable</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><name>tsSIMDEnable</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <decl_stmt><decl><type><name>uint32_t</name></type> <name>eax</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ebx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ecx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>edx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>__get_cpuid</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>eax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ebx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ecx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>edx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>  <comment type="line">// failed to get the cpuid info</comment>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>sse42</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>ecx</name> <operator>&amp;</operator> <name>bit_SSE4_2</name><operator>)</operator> <operator>==</operator> <name>bit_SSE4_2</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>avx</name>   <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>ecx</name> <operator>&amp;</operator> <name>bit_AVX</name><operator>)</operator> <operator>==</operator> <name>bit_AVX</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>fma</name>   <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>ecx</name> <operator>&amp;</operator> <name>bit_FMA</name><operator>)</operator> <operator>==</operator> <name>bit_FMA</name><operator>)</operator></expr>;</expr_stmt>

  <comment type="line">// work around a bug in GCC.</comment>
  <comment type="line">// Ref to https://gcc.gnu.org/bugzilla/show_bug.cgi?id=77756</comment>
  <expr_stmt><expr><call><name>__cpuid_fix</name><argument_list>(<argument><expr><literal type="number">7u</literal></expr></argument>, <argument><expr><name>eax</name></expr></argument>, <argument><expr><name>ebx</name></expr></argument>, <argument><expr><name>ecx</name></expr></argument>, <argument><expr><name>edx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>avx2</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>ebx</name> <operator>&amp;</operator> <name>bit_AVX2</name><operator>)</operator> <operator>==</operator> <name>bit_AVX2</name><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>   <comment type="line">// _TD_X86_</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosGetTotalMemory</name><parameter_list>(<parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>totalKB</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <decl_stmt><decl><type><name>MEMORYSTATUSEX</name></type> <name>memsStat</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>memsStat</name><operator>.</operator><name>dwLength</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>memsStat</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GlobalMemoryStatusEx</name><argument_list>(<argument><expr><operator>&amp;</operator><name>memsStat</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>totalKB</name> <operator>=</operator> <name><name>memsStat</name><operator>.</operator><name>ullTotalPhys</name></name> <operator>/</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_DARWIN_64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><operator>*</operator><name>totalKB</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><call><name>sysconf</name><argument_list>(<argument><expr><name>_SC_PHYS_PAGES</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>tsPageSizeKB</name><operator>)</operator></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosGetProcMemory</name><parameter_list>(<parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>usedKB</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>bytes_used</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>PROCESS_MEMORY_COUNTERS</name></type> <name>pmc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HANDLE</name></type>                  <name>cur_proc</name> <init>= <expr><call><name>GetCurrentProcess</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>GetProcessMemoryInfo</name><argument_list>(<argument><expr><name>cur_proc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pmc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pmc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>bytes_used</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name><name>pmc</name><operator>.</operator><name>WorkingSetSize</name></name> <operator>+</operator> <name><name>pmc</name><operator>.</operator><name>PagefileUsage</name></name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><operator>*</operator><name>usedKB</name> <operator>=</operator> <name>bytes_used</name> <operator>/</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_DARWIN_64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <expr_stmt><expr><operator>*</operator><name>usedKB</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>pFile</name> <init>= <expr><call><name>taosOpenFile</name><argument_list>(<argument><expr><name>tsProcMemFile</name></expr></argument>, <argument><expr><name>TD_FILE_READ</name> <operator>|</operator> <name>TD_FILE_STREAM</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// printf("open file:%s failed", tsProcMemFile);</comment>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>ssize_t</name></type> <name>bytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>line</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>!</operator><call><name>taosEOFFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>bytes</name> <operator>=</operator> <call><name>taosGetsFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"VmRSS:"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">// printf("read file:%s failed", tsProcMemFile);</comment>
    <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"%s %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>usedKB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosGetSysMemory</name><parameter_list>(<parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>usedKB</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <decl_stmt><decl><type><name>MEMORYSTATUSEX</name></type> <name>memsStat</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>memsStat</name><operator>.</operator><name>dwLength</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>memsStat</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GlobalMemoryStatusEx</name><argument_list>(<argument><expr><operator>&amp;</operator><name>memsStat</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>nMemFree</name> <init>= <expr><name><name>memsStat</name><operator>.</operator><name>ullAvailPhys</name></name> <operator>/</operator> <literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>nMemTotal</name> <init>= <expr><name><name>memsStat</name><operator>.</operator><name>ullTotalPhys</name></name> <operator>/</operator> <literal type="number">1024.0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><operator>*</operator><name>usedKB</name> <operator>=</operator> <name>nMemTotal</name> <operator>-</operator> <name>nMemFree</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_DARWIN_64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <expr_stmt><expr><operator>*</operator><name>usedKB</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><operator>*</operator><name>usedKB</name> <operator>=</operator> <call><name>sysconf</name><argument_list>(<argument><expr><name>_SC_AVPHYS_PAGES</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>tsPageSizeKB</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosGetDiskSize</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dataDir</name></decl></parameter>, <parameter><decl><type><name>SDiskSize</name> <modifier>*</modifier></type><name>diskSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>unsigned</name> <name>_int64</name></type> <name>i64FreeBytesToCaller</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>_int64</name></type> <name>i64TotalBytes</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>_int64</name></type> <name>i64FreeBytes</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>BOOL</name></type> <name>fResult</name> <init>= <expr><call><name>GetDiskFreeSpaceExA</name><argument_list>(<argument><expr><name>dataDir</name></expr></argument>, <argument><expr><operator>(</operator><name>PULARGE_INTEGER</name><operator>)</operator><operator>&amp;</operator><name>i64FreeBytesToCaller</name></expr></argument>, <argument><expr><operator>(</operator><name>PULARGE_INTEGER</name><operator>)</operator><operator>&amp;</operator><name>i64TotalBytes</name></expr></argument>,
                                     <argument><expr><operator>(</operator><name>PULARGE_INTEGER</name><operator>)</operator><operator>&amp;</operator><name>i64FreeBytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>fResult</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>diskSize</name><operator>-&gt;</operator><name>total</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>i64TotalBytes</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>diskSize</name><operator>-&gt;</operator><name>avail</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>i64FreeBytesToCaller</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>diskSize</name><operator>-&gt;</operator><name>used</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>i64TotalBytes</name> <operator>-</operator> <name>i64FreeBytes</name><operator>)</operator></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="line">// printf("failed to get disk size, dataDir:%s errno:%s", tsDataDir, strerror(errno));</comment>
    <comment type="line">// terrno = TAOS_SYSTEM_ERROR(errno);</comment>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_DARWIN_64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <decl_stmt><decl><type><name><name>struct</name> <name>statvfs</name></name></type> <name>info</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>statvfs</name><argument_list>(<argument><expr><name>dataDir</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <comment type="line">// printf("failed to get disk size, dataDir:%s errno:%s", tsDataDir, strerror(errno));</comment>
    <comment type="line">// terrno = TAOS_SYSTEM_ERROR(errno);</comment>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>diskSize</name><operator>-&gt;</operator><name>total</name></name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>f_blocks</name></name> <operator>*</operator> <name><name>info</name><operator>.</operator><name>f_frsize</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>diskSize</name><operator>-&gt;</operator><name>avail</name></name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>f_bavail</name></name> <operator>*</operator> <name><name>info</name><operator>.</operator><name>f_frsize</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>diskSize</name><operator>-&gt;</operator><name>used</name></name> <operator>=</operator> <operator>(</operator><name><name>info</name><operator>.</operator><name>f_blocks</name></name> <operator>-</operator> <name><name>info</name><operator>.</operator><name>f_bfree</name></name><operator>)</operator> <operator>*</operator> <name><name>info</name><operator>.</operator><name>f_frsize</name></name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name><name>struct</name> <name>statvfs</name></name></type> <name>info</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>statvfs</name><argument_list>(<argument><expr><name>dataDir</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <comment type="line">// terrno = TAOS_SYSTEM_ERROR(errno);</comment>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>diskSize</name><operator>-&gt;</operator><name>total</name></name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>f_blocks</name></name> <operator>*</operator> <name><name>info</name><operator>.</operator><name>f_frsize</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>diskSize</name><operator>-&gt;</operator><name>avail</name></name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>f_bavail</name></name> <operator>*</operator> <name><name>info</name><operator>.</operator><name>f_frsize</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>diskSize</name><operator>-&gt;</operator><name>used</name></name> <operator>=</operator> <name><name>diskSize</name><operator>-&gt;</operator><name>total</name></name> <operator>-</operator> <name><name>diskSize</name><operator>-&gt;</operator><name>avail</name></name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosGetProcIO</name><parameter_list>(<parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>rchars</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>wchars</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>read_bytes</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>write_bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <decl_stmt><decl><type><name>IO_COUNTERS</name></type> <name>io_counter</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>GetProcessIoCounters</name><argument_list>(<argument><expr><call><name>GetCurrentProcess</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>io_counter</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>rchars</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>rchars</name> <operator>=</operator> <name><name>io_counter</name><operator>.</operator><name>ReadTransferCount</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>wchars</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>wchars</name> <operator>=</operator> <name><name>io_counter</name><operator>.</operator><name>WriteTransferCount</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>read_bytes</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>read_bytes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>write_bytes</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>write_bytes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_DARWIN_64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <if_stmt><if>if <condition>(<expr><name>rchars</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>rchars</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>wchars</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>wchars</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>read_bytes</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>read_bytes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>write_bytes</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>write_bytes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>pFile</name> <init>= <expr><call><name>taosOpenFile</name><argument_list>(<argument><expr><name>tsProcIOFile</name></expr></argument>, <argument><expr><name>TD_FILE_READ</name> <operator>|</operator> <name>TD_FILE_STREAM</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>ssize_t</name></type> <name>bytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>line</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>tmp</name><index>[<expr><literal type="number">24</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>     <name>readIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><operator>!</operator><call><name>taosEOFFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>bytes</name> <operator>=</operator> <call><name>taosGetsFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"rchar:"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"%s %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>rchars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>readIndex</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"wchar:"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"%s %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>wchars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>readIndex</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"read_bytes:"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>  <comment type="line">// read_bytes</comment>
      <expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"%s %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>read_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>readIndex</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"write_bytes:"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>  <comment type="line">// write_bytes</comment>
      <expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"%s %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>write_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>readIndex</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>readIndex</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>readIndex</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosGetProcIODelta</name><parameter_list>(<parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>rchars</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>wchars</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>read_bytes</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>write_bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <name>int64_t</name></type> <name>last_rchars</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>int64_t</name></type> <name>last_wchars</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>int64_t</name></type> <name>last_read_bytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>int64_t</name></type> <name>last_write_bytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>int64_t</name></type> <name>cur_rchars</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>int64_t</name></type> <name>cur_wchars</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>int64_t</name></type> <name>cur_read_bytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>int64_t</name></type> <name>cur_write_bytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taosGetProcIO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur_rchars</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur_wchars</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur_read_bytes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur_write_bytes</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>rchars</name> <operator>=</operator> <name>cur_rchars</name> <operator>-</operator> <name>last_rchars</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>wchars</name> <operator>=</operator> <name>cur_wchars</name> <operator>-</operator> <name>last_wchars</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>read_bytes</name> <operator>=</operator> <name>cur_read_bytes</name> <operator>-</operator> <name>last_read_bytes</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>write_bytes</name> <operator>=</operator> <name>cur_write_bytes</name> <operator>-</operator> <name>last_write_bytes</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>last_rchars</name> <operator>=</operator> <name>cur_rchars</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>last_wchars</name> <operator>=</operator> <name>cur_wchars</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>last_read_bytes</name> <operator>=</operator> <name>cur_read_bytes</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>last_write_bytes</name> <operator>=</operator> <name>cur_write_bytes</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>rchars</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>wchars</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>read_bytes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>write_bytes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosGetCardInfo</name><parameter_list>(<parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>receive_bytes</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>transmit_bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <expr_stmt><expr><operator>*</operator><name>receive_bytes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>transmit_bytes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_DARWIN_64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <expr_stmt><expr><operator>*</operator><name>receive_bytes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>transmit_bytes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>pFile</name> <init>= <expr><call><name>taosOpenFile</name><argument_list>(<argument><expr><name>tsSysNetFile</name></expr></argument>, <argument><expr><name>TD_FILE_READ</name> <operator>|</operator> <name>TD_FILE_STREAM</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>ssize_t</name></type> <name>_bytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>line</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

  <while>while <condition>(<expr><operator>!</operator><call><name>taosEOFFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>o_rbytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>rpackts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>o_tbytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>tpackets</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nouse1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nouse2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nouse3</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nouse4</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nouse5</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nouse6</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>    <name><name>nouse0</name><index>[<expr><literal type="number">200</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>_bytes</name> <operator>=</operator> <call><name>taosGetsFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>_bytes</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>line</name><index>[<expr><name>_bytes</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"lo:"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>line</name></expr></argument>,
           <argument><expr><literal type="string">"%s %"</literal> <name>PRId64</name> <literal type="string">" %"</literal> <name>PRId64</name> <literal type="string">" %"</literal> <name>PRId64</name> <literal type="string">" %"</literal> <name>PRId64</name> <literal type="string">" %"</literal> <name>PRId64</name> <literal type="string">" %"</literal> <name>PRId64</name> <literal type="string">" %"</literal> <name>PRId64</name> <literal type="string">" %"</literal> <name>PRId64</name> <literal type="string">" %"</literal> <name>PRId64</name>
           <literal type="string">" %"</literal> <name>PRId64</name></expr></argument>,
           <argument><expr><name>nouse0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>o_rbytes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpackts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nouse1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nouse2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nouse3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nouse4</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nouse5</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nouse6</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>o_tbytes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tpackets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>receive_bytes</name> <operator>=</operator> <name>o_rbytes</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>transmit_bytes</name> <operator>=</operator> <name>o_tbytes</name></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosGetCardInfoDelta</name><parameter_list>(<parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>receive_bytes</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>transmit_bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <name>int64_t</name></type> <name>last_receive_bytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>int64_t</name></type> <name>last_transmit_bytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>int64_t</name></type> <name>cur_receive_bytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>int64_t</name></type> <name>cur_transmit_bytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taosGetCardInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur_receive_bytes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur_transmit_bytes</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>receive_bytes</name> <operator>=</operator> <name>cur_receive_bytes</name> <operator>-</operator> <name>last_receive_bytes</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>transmit_bytes</name> <operator>=</operator> <name>cur_transmit_bytes</name> <operator>-</operator> <name>last_transmit_bytes</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>last_receive_bytes</name> <operator>=</operator> <name>cur_receive_bytes</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>last_transmit_bytes</name> <operator>=</operator> <name>cur_transmit_bytes</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>receive_bytes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>transmit_bytes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosKillSystem</name><parameter_list>()</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"function taosKillSystem, exit!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_DARWIN_64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"function taosKillSystem, exit!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="line">// SIGINT</comment>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"taosd will shut down soon"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>kill</name><argument_list>(<argument><expr><name>tsProcId</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosGetSystemUUID</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>uid</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>uidlen</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <decl_stmt><decl><type><name>GUID</name></type> <name>guid</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CoCreateGuid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>guid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>uid</name></expr></argument>, <argument><expr><name>uidlen</name></expr></argument>, <argument><expr><literal type="string">"%08X-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X"</literal></expr></argument>, <argument><expr><name><name>guid</name><operator>.</operator><name>Data1</name></name></expr></argument>, <argument><expr><name><name>guid</name><operator>.</operator><name>Data2</name></name></expr></argument>, <argument><expr><name><name>guid</name><operator>.</operator><name>Data3</name></name></expr></argument>,
           <argument><expr><name><name>guid</name><operator>.</operator><name>Data4</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>guid</name><operator>.</operator><name>Data4</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>guid</name><operator>.</operator><name>Data4</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>guid</name><operator>.</operator><name>Data4</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>guid</name><operator>.</operator><name>Data4</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>guid</name><operator>.</operator><name>Data4</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>guid</name><operator>.</operator><name>Data4</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>,
           <argument><expr><name><name>guid</name><operator>.</operator><name>Data4</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_DARWIN_64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <decl_stmt><decl><type><name>uuid_t</name></type> <name>uuid</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>   <name><name>buf</name><index>[<expr><literal type="number">37</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>uuid_generate</name><argument_list>(<argument><expr><name>uuid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// it's caller's responsibility to make enough space for `uid`, that's 36-char + 1-null</comment>
  <expr_stmt><expr><call><name>uuid_unparse_lower</name><argument_list>(<argument><expr><name>uuid</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>uid</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>uidlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// fd = open("/proc/sys/kernel/random/uuid", 0);</comment>
  <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>pFile</name> <init>= <expr><call><name>taosOpenFile</name><argument_list>(<argument><expr><literal type="string">"/proc/sys/kernel/random/uuid"</literal></expr></argument>, <argument><expr><name>TD_FILE_READ</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>taosReadFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><name>uidlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">36</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>uid</name><index>[<expr><literal type="number">36</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>taosGetCmdlineByPID</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="string">""</literal></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_DARWIN_64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>cmdline</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>proc_pidpath</name><argument_list>(<argument><expr><name>pid</name></expr></argument>, <argument><expr><name>cmdline</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cmdline</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"PID is %d, %s"</literal></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>cmdline</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>cmdline</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>cmdline</name></expr></argument>, <argument><expr><literal type="string">"/proc/%d/cmdline"</literal></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// int fd = open(cmdline, O_RDONLY);</comment>
  <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>pFile</name> <init>= <expr><call><name>taosOpenFile</name><argument_list>(<argument><expr><name>cmdline</name></expr></argument>, <argument><expr><name>TD_FILE_READ</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>taosReadFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>cmdline</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cmdline</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>cmdline</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>--</operator><name>n</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>cmdline</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>cmdline</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>cmdline</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosSetCoreDump</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>enable</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>enable</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <expr_stmt><expr><call><name>SetUnhandledExceptionFilter</name><argument_list>(<argument><expr><name>exceptionHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SetUnhandledExceptionFilter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>FlCrashDump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_DARWIN_64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="line">// 1. set ulimit -c unlimited</comment>
  <decl_stmt><decl><type><name><name>struct</name> <name>rlimit</name></name></type> <name>rlim</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>rlimit</name></name></type> <name>rlim_new</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>getrlimit</name><argument_list>(<argument><expr><name>RLIMIT_CORE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rlim</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_ALPINE</name></cpp:ifndef>
    <comment type="line">// printf("the old unlimited para: rlim_cur=%" PRIu64 ", rlim_max=%" PRIu64, rlim.rlim_cur, rlim.rlim_max);</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="line">// printf("the old unlimited para: rlim_cur=%llu, rlim_max=%llu", rlim.rlim_cur, rlim.rlim_max);</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name><name>rlim_new</name><operator>.</operator><name>rlim_cur</name></name> <operator>=</operator> <name>RLIM_INFINITY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rlim_new</name><operator>.</operator><name>rlim_max</name></name> <operator>=</operator> <name>RLIM_INFINITY</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>setrlimit</name><argument_list>(<argument><expr><name>RLIMIT_CORE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rlim_new</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// printf("set unlimited fail, error: %s", strerror(errno));</comment>
      <expr_stmt><expr><name><name>rlim_new</name><operator>.</operator><name>rlim_cur</name></name> <operator>=</operator> <name><name>rlim</name><operator>.</operator><name>rlim_max</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>rlim_new</name><operator>.</operator><name>rlim_max</name></name> <operator>=</operator> <name><name>rlim</name><operator>.</operator><name>rlim_max</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>setrlimit</name><argument_list>(<argument><expr><name>RLIMIT_CORE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rlim_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>getrlimit</name><argument_list>(<argument><expr><name>RLIMIT_CORE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rlim</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_ALPINE</name></cpp:ifndef>
    <comment type="line">// printf("the new unlimited para: rlim_cur=%" PRIu64 ", rlim_max=%" PRIu64, rlim.rlim_cur, rlim.rlim_max);</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="line">// printf("the new unlimited para: rlim_cur=%llu, rlim_max=%llu", rlim.rlim_cur, rlim.rlim_max);</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></if></if_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_TD_ARM_</name></cpp:ifndef>
  <comment type="line">// 2. set the path for saving core file</comment>
  <decl_stmt><decl><type><name><name>struct</name> <name>__sysctl_args</name></name></type> <name>args</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type>    <name>old_usespid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>old_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>    <name>new_usespid</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>new_len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>new_usespid</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name><name>name</name><index>[]</index></name> <init>= <expr><block>{<expr><name>CTL_KERN</name></expr>, <expr><name>KERN_CORE_USES_PID</name></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>__sysctl_args</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>args</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>args</name><operator>.</operator><name>nlen</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>args</name><operator>.</operator><name>oldval</name></name> <operator>=</operator> <operator>&amp;</operator><name>old_usespid</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>args</name><operator>.</operator><name>oldlenp</name></name> <operator>=</operator> <operator>&amp;</operator><name>old_len</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>args</name><operator>.</operator><name>newval</name></name> <operator>=</operator> <operator>&amp;</operator><name>new_usespid</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>args</name><operator>.</operator><name>newlen</name></name> <operator>=</operator> <name>new_len</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>old_len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>old_usespid</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__loongarch64</name></cpp:ifndef>
  <if_stmt><if>if <condition>(<expr><call><name>syscall</name><argument_list>(<argument><expr><name>SYS__sysctl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">// printf("_sysctl(kern_core_uses_pid) set fail: %s", strerror(errno));</comment>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="line">// printf("The old core_uses_pid[%" PRIu64 "]: %d", old_len, old_usespid);</comment>

  <expr_stmt><expr><name>old_usespid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>old_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>__sysctl_args</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>args</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>args</name><operator>.</operator><name>nlen</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>args</name><operator>.</operator><name>oldval</name></name> <operator>=</operator> <operator>&amp;</operator><name>old_usespid</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>args</name><operator>.</operator><name>oldlenp</name></name> <operator>=</operator> <operator>&amp;</operator><name>old_len</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>old_len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>old_usespid</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__loongarch64</name></cpp:ifndef>
  <if_stmt><if>if <condition>(<expr><call><name>syscall</name><argument_list>(<argument><expr><name>SYS__sysctl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">// printf("_sysctl(kern_core_uses_pid) get fail: %s", strerror(errno));</comment>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="line">// printf("The new core_uses_pid[%" PRIu64 "]: %d", old_len, old_usespid);</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SysNameInfo</name></type> <name>taosGetSysNameInfo</name><parameter_list>()</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <decl_stmt><decl><type><name>SysNameInfo</name></type> <name>info</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DWORD</name></type>       <name>dwVersion</name> <init>= <expr><call><name>GetVersion</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"OS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>sysname</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>sysname</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"COMPUTERNAME"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>nodename</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>nodename</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>sprintf_s</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>release</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>release</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>dwVersion</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sprintf_s</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>version</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>release</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>dwVersion</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"PROCESSOR_ARCHITECTURE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>machine</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>machine</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <return>return <expr><name>info</name></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_DARWIN_64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <decl_stmt><decl><type><name>SysNameInfo</name></type> <name>info</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name><name>struct</name> <name>utsname</name></name></type> <name>uts</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>uname</name><argument_list>(<argument><expr><operator>&amp;</operator><name>uts</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>sysname</name></name></expr></argument>, <argument><expr><name><name>uts</name><operator>.</operator><name>sysname</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>sysname</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>nodename</name></name></expr></argument>, <argument><expr><name><name>uts</name><operator>.</operator><name>nodename</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>nodename</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>release</name></name></expr></argument>, <argument><expr><name><name>uts</name><operator>.</operator><name>release</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>release</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>version</name></name></expr></argument>, <argument><expr><name><name>uts</name><operator>.</operator><name>version</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>machine</name></name></expr></argument>, <argument><expr><name><name>uts</name><operator>.</operator><name>machine</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>machine</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>info</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>SysNameInfo</name></type> <name>info</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name><name>struct</name> <name>utsname</name></name></type> <name>uts</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>uname</name><argument_list>(<argument><expr><operator>&amp;</operator><name>uts</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>sysname</name></name></expr></argument>, <argument><expr><name><name>uts</name><operator>.</operator><name>sysname</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>sysname</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>nodename</name></name></expr></argument>, <argument><expr><name><name>uts</name><operator>.</operator><name>nodename</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>nodename</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>release</name></name></expr></argument>, <argument><expr><name><name>uts</name><operator>.</operator><name>release</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>release</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>version</name></name></expr></argument>, <argument><expr><name><name>uts</name><operator>.</operator><name>version</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>machine</name></name></expr></argument>, <argument><expr><name><name>uts</name><operator>.</operator><name>machine</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>machine</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>info</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>taosCheckCurrentInDll</name><parameter_list>()</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <decl_stmt><decl><type><name>MEMORY_BASIC_INFORMATION</name></type> <name>mbi</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>                     <name><name>path</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>GetModuleFileName</name><argument_list>(
      <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><call><name>VirtualQuery</name><argument_list>(<argument><expr><name>taosCheckCurrentInDll</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mbi</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mbi</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>HMODULE</name><operator>)</operator><name><name>mbi</name><operator>.</operator><name>AllocationBase</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>path</name></expr></argument>,
      <argument><expr><name>PATH_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>strLastIndex</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>path</name><index>[<expr><name>strLastIndex</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'d'</literal> <operator>||</operator> <name><name>path</name><index>[<expr><name>strLastIndex</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'D'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
      <operator>(</operator><name><name>path</name><index>[<expr><name>strLastIndex</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'l'</literal> <operator>||</operator> <name><name>path</name><index>[<expr><name>strLastIndex</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'L'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
      <operator>(</operator><name><name>path</name><index>[<expr><name>strLastIndex</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'l'</literal> <operator>||</operator> <name><name>path</name><index>[<expr><name>strLastIndex</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'L'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>false</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><name>false</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
</unit>
