<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/os/src/osSemaphore.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLOW_FORBID_FUNC</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pthread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdef.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>

<comment type="block">/*
 * windows implementation
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<function><type><name>bool</name></type> <name>taosCheckPthreadValid</name><parameter_list>(<parameter><decl><type><name>TdThread</name></type> <name>thread</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>thread</name><operator>.</operator><name>p</name></name> <operator>!=</operator> <name>NULL</name></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name></type> <name>taosResetPthread</name><parameter_list>(<parameter><decl><type><name>TdThread</name><modifier>*</modifier></type> <name>thread</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>taosGetPthreadId</name><parameter_list>(<parameter><decl><type><name>TdThread</name></type> <name>thread</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PTW32_VERSION</name></cpp:ifdef>
  <return>return <expr><call><name>pthread_getw32threadid_np</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>thread</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>taosGetSelfPthreadId</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>GetCurrentThreadId</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>bool</name></type> <name>taosComparePthread</name><parameter_list>(<parameter><decl><type><name>TdThread</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>TdThread</name></type> <name>second</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>first</name><operator>.</operator><name>p</name></name> <operator>==</operator> <name><name>second</name><operator>.</operator><name>p</name></name></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosGetPId</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>GetCurrentProcessId</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosGetAppName</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>filepath</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>GetModuleFileName</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>filepath</name></expr></argument>, <argument><expr><name>MAX_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>sub</name> <init>= <expr><call><name>strrchr</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>sub</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>sub</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>end</name> <init>= <expr><call><name>strrchr</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><name><name>TD_DIRSEP</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>end</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>end</name> <operator>=</operator> <name>filepath</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>TSDB_APP_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsem_wait</name><parameter_list>(<parameter><decl><type><name>tsem_t</name><modifier>*</modifier></type> <name>sem</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <do>do <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sem_wait</name><argument_list>(<argument><expr><name>sem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block> while <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition>;</do>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsem_timewait</name><parameter_list>(<parameter><decl><type><name>tsem_t</name><modifier>*</modifier></type> <name>sem</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ms</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>ts</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosClockGetTime</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>ts</name><operator>.</operator><name>tv_nsec</name></name> <operator>+=</operator> <name>ms</name> <operator>*</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ts</name><operator>.</operator><name>tv_sec</name></name> <operator>+=</operator> <name><name>ts</name><operator>.</operator><name>tv_nsec</name></name> <operator>/</operator> <literal type="number">1000000000</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ts</name><operator>.</operator><name>tv_nsec</name></name> <operator>%=</operator> <literal type="number">1000000000</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sem_timedwait</name><argument_list>(<argument><expr><name>sem</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></while>
  <return>return <expr><name>rc</name></expr>;</return>
  <comment type="block">/* This should have timed out */</comment>
  <comment type="line">// assert(errno == ETIMEDOUT);</comment>
  <comment type="line">// assert(rc != 0);</comment>
  <comment type="line">// GetSystemTimeAsFileTime(&amp;ft_after);</comment>
  <comment type="line">// // We specified a non-zero wait. Time must advance.</comment>
  <comment type="line">// if (ft_before.dwLowDateTime == ft_after.dwLowDateTime &amp;&amp; ft_before.dwHighDateTime == ft_after.dwHighDateTime)</comment>
  <comment type="line">//   {</comment>
  <comment type="line">//     printf("nanoseconds: %d, rc: %d, code:0x%x. before filetime: %d, %d; after filetime: %d, %d\n",</comment>
  <comment type="line">//         nanosecs, rc, errno,</comment>
  <comment type="line">//         (int)ft_before.dwLowDateTime, (int)ft_before.dwHighDateTime,</comment>
  <comment type="line">//         (int)ft_after.dwLowDateTime, (int)ft_after.dwHighDateTime);</comment>
  <comment type="line">//     printf("time must advance during sem_timedwait.");</comment>
  <comment type="line">//     return 1;</comment>
  <comment type="line">//   }</comment>
</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_DARWIN_64</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libproc.h&gt;</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>tsem_init</name><parameter_list>(<parameter><decl><type><name>tsem_t</name> <modifier>*</modifier></type><name>psem</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>psem</name> <operator>=</operator> <call><name>dispatch_semaphore_create</name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>psem</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tsem_destroy</name><parameter_list>(<parameter><decl><type><name>tsem_t</name> <modifier>*</modifier></type><name>psem</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>psem</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>psem</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <comment type="line">// dispatch_release(*psem);</comment>
  <comment type="line">// *psem = NULL;</comment>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tsem_post</name><parameter_list>(<parameter><decl><type><name>tsem_t</name> <modifier>*</modifier></type><name>psem</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>psem</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>psem</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>dispatch_semaphore_signal</name><argument_list>(<argument><expr><operator>*</operator><name>psem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tsem_wait</name><parameter_list>(<parameter><decl><type><name>tsem_t</name> <modifier>*</modifier></type><name>psem</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>psem</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>psem</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>dispatch_semaphore_wait</name><argument_list>(<argument><expr><operator>*</operator><name>psem</name></expr></argument>, <argument><expr><name>DISPATCH_TIME_FOREVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tsem_timewait</name><parameter_list>(<parameter><decl><type><name>tsem_t</name> <modifier>*</modifier></type><name>psem</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>milis</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>psem</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>psem</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>dispatch_semaphore_wait</name><argument_list>(<argument><expr><operator>*</operator><name>psem</name></expr></argument>, <argument><expr><name>milis</name> <operator>*</operator> <literal type="number">1000</literal> <operator>*</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>taosCheckPthreadValid</name><parameter_list>(<parameter><decl><type><name>TdThread</name></type> <name>thread</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>thread</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</return> </block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>taosGetSelfPthreadId</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TdThread</name></type> <name>thread</name> <init>= <expr><call><name>taosThreadSelf</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>thread</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>taosGetPthreadId</name><parameter_list>(<parameter><decl><type><name>TdThread</name></type> <name>thread</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>thread</name></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name></type> <name>taosResetPthread</name><parameter_list>(<parameter><decl><type><name>TdThread</name> <modifier>*</modifier></type><name>thread</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>thread</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>bool</name></type> <name>taosComparePthread</name><parameter_list>(<parameter><decl><type><name>TdThread</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>TdThread</name></type> <name>second</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><ternary><condition><expr><call><name>taosThreadEqual</name><argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><name>second</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosGetPId</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>getpid</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosGetAppName</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>PATH_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>proc_name</name><argument_list>(<argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>buf</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>len</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>TSDB_APP_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<comment type="block">/*
 * linux implementation
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/syscall.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<function><type><name>bool</name></type> <name>taosCheckPthreadValid</name><parameter_list>(<parameter><decl><type><name>TdThread</name></type> <name>thread</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>thread</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</return> </block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>taosGetSelfPthreadId</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <name>__thread</name> <name>int</name></type> <name>id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>id</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>id</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>syscall</name><argument_list>(<argument><expr><name>SYS_gettid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>taosGetPthreadId</name><parameter_list>(<parameter><decl><type><name>TdThread</name></type> <name>thread</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>thread</name></expr>;</return> </block_content>}</block></function>
<function><type><name>void</name></type>    <name>taosResetPthread</name><parameter_list>(<parameter><decl><type><name>TdThread</name><modifier>*</modifier></type> <name>thread</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>thread</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>bool</name></type>    <name>taosComparePthread</name><parameter_list>(<parameter><decl><type><name>TdThread</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>TdThread</name></type> <name>second</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>first</name> <operator>==</operator> <name>second</name></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosGetPId</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>pid</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pid</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>pid</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>pid</name> <operator>=</operator> <call><name>getpid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pid</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosGetAppName</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>self</name> <init>= <expr><literal type="string">"/proc/self/exe"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>        <name><name>path</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>readlink</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>PATH_MAX</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>path</name><index>[<expr><name>PATH_MAX</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>end</name> <init>= <expr><call><name>strrchr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>end</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>++</operator><name>end</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>TSDB_APP_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsem_wait</name><parameter_list>(<parameter><decl><type><name>tsem_t</name><modifier>*</modifier></type> <name>sem</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <do>do <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sem_wait</name><argument_list>(<argument><expr><name>sem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block> while <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition>;</do>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsem_timewait</name><parameter_list>(<parameter><decl><type><name>tsem_t</name><modifier>*</modifier></type> <name>sem</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ms</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>ts</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>clock_gettime</name><argument_list>(<argument><expr><name>CLOCK_REALTIME</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>ts</name><operator>.</operator><name>tv_nsec</name></name> <operator>+=</operator> <name>ms</name> <operator>*</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ts</name><operator>.</operator><name>tv_sec</name></name> <operator>+=</operator> <name><name>ts</name><operator>.</operator><name>tv_nsec</name></name> <operator>/</operator> <literal type="number">1000000000</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ts</name><operator>.</operator><name>tv_nsec</name></name> <operator>%=</operator> <literal type="number">1000000000</literal></expr>;</expr_stmt>

  <while>while <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>sem_timedwait</name><argument_list>(<argument><expr><name>sem</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></while>

  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
