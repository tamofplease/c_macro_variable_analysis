<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/os/src/osSystem.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLOW_FORBID_FUNC</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>MainWindows</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>argv</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>MainWindows</name></type> <name>mainWindowsFunc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SERVICE_STATUS</name></type>        <name>ServiceStatus</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SERVICE_STATUS_HANDLE</name></type> <name>hServiceStatusHandle</name></decl>;</decl_stmt>
<function><type><name>void</name> <name>WINAPI</name></type>           <name>windowsServiceCtrlHandle</name><parameter_list>(<parameter><decl><type><name>DWORD</name></type> <name>request</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <switch>switch <condition>(<expr><name>request</name></expr>)</condition> <block>{<block_content>
              <case>case <expr><name>SERVICE_CONTROL_STOP</name></expr>:</case>
              <case>case <expr><name>SERVICE_CONTROL_SHUTDOWN</name></expr>:</case>
      <expr_stmt><expr><call><name>raise</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>ServiceStatus</name><operator>.</operator><name>dwCurrentState</name></name> <operator>=</operator> <name>SERVICE_STOP_PENDING</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SetServiceStatus</name><argument_list>(<argument><expr><name>hServiceStatusHandle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ServiceStatus</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                  <decl_stmt><decl><type><name>DWORD</name></type> <name>nError</name> <init>= <expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to send stopped status to windows service: %d"</literal></expr></argument>, <argument><expr><name>nError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
              <default>default:</default>
      <return>return;</return>
  </block_content>}</block></switch>
</block_content>}</block></function>
<function><type><name>void</name> <name>WINAPI</name></type> <name>mainWindowsService</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ServiceStatus</name><operator>.</operator><name>dwServiceType</name></name> <operator>=</operator> <name>SERVICE_WIN32</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ServiceStatus</name><operator>.</operator><name>dwControlsAccepted</name></name> <operator>=</operator> <name>SERVICE_ACCEPT_PAUSE_CONTINUE</name> <operator>|</operator> <name>SERVICE_ACCEPT_STOP</name> <operator>|</operator> <name>SERVICE_ACCEPT_SHUTDOWN</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ServiceStatus</name><operator>.</operator><name>dwCurrentState</name></name> <operator>=</operator> <name>SERVICE_START_PENDING</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ServiceStatus</name><operator>.</operator><name>dwWin32ExitCode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ServiceStatus</name><operator>.</operator><name>dwCheckPoint</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ServiceStatus</name><operator>.</operator><name>dwWaitHint</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ServiceStatus</name><operator>.</operator><name>dwServiceSpecificExitCode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>hServiceStatusHandle</name> <operator>=</operator> <call><name>RegisterServiceCtrlHandler</name><argument_list>(<argument><expr><literal type="string">"taosd"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>windowsServiceCtrlHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>hServiceStatusHandle</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>DWORD</name></type> <name>nError</name> <init>= <expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to register windows service ctrl handler: %d"</literal></expr></argument>, <argument><expr><name>nError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>ServiceStatus</name><operator>.</operator><name>dwCurrentState</name></name> <operator>=</operator> <name>SERVICE_RUNNING</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>SetServiceStatus</name><argument_list>(<argument><expr><name>hServiceStatusHandle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ServiceStatus</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>DWORD</name></type> <name>nError</name> <init>= <expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to send running status to windows service: %d"</literal></expr></argument>, <argument><expr><name>nError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>mainWindowsFunc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>mainWindowsFunc</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>ServiceStatus</name><operator>.</operator><name>dwCurrentState</name></name> <operator>=</operator> <name>SERVICE_STOPPED</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SetServiceStatus</name><argument_list>(<argument><expr><name>hServiceStatusHandle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ServiceStatus</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>DWORD</name></type> <name>nError</name> <init>= <expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to send stopped status to windows service: %d"</literal></expr></argument>, <argument><expr><name>nError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>stratWindowsService</name><parameter_list>(<parameter><decl><type><name>MainWindows</name></type> <name>mainWindows</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>mainWindowsFunc</name> <operator>=</operator> <name>mainWindows</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SERVICE_TABLE_ENTRY</name></type> <name><name>ServiceTable</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ServiceTable</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lpServiceName</name> <operator>=</operator> <literal type="string">"taosd"</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ServiceTable</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lpServiceProc</name> <operator>=</operator> <operator>(</operator><name>LPSERVICE_MAIN_FUNCTION</name><operator>)</operator><name>mainWindowsService</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ServiceTable</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>lpServiceName</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ServiceTable</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>lpServiceProc</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>StartServiceCtrlDispatcher</name><argument_list>(<argument><expr><name>ServiceTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_DARWIN_64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dlfcn.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;termios.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>termios</name></name></type> <name>oldtio</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name><name>struct</name> <name>FILE</name></name></type> <name>TdCmd</name>;</typedef>

<function><type><name>void</name><modifier>*</modifier></type> <name>taosLoadDll</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_DARWIN_64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><name>NULL</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>handle</name> <init>= <expr><call><name>dlopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>RTLD_LAZY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>handle</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// printf("load dll:%s failed, error:%s", filename, dlerror());</comment>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// printf("dll %s loaded", filename);</comment>

  <return>return <expr><name>handle</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>taosLoadSym</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_DARWIN_64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><name>NULL</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>sym</name> <init>= <expr><call><name>dlsym</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>error</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>error</name> <operator>=</operator> <call><name>dlerror</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// printf("load sym:%s failed, error:%s", name, dlerror());</comment>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// printf("sym %s loaded", name);</comment>

  <return>return <expr><name>sym</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosCloseDll</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_DARWIN_64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <if_stmt><if>if <condition>(<expr><name>handle</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dlclose</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>taosSetConsoleEcho</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>on</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>HANDLE</name></type> <name>hStdin</name> <init>= <expr><call><name>GetStdHandle</name><argument_list>(<argument><expr><name>STD_INPUT_HANDLE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DWORD</name></type>  <name>mode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>GetConsoleMode</name><argument_list>(<argument><expr><name>hStdin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>on</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>mode</name> <operator>|=</operator> <name>ENABLE_ECHO_INPUT</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>mode</name> <operator>&amp;=</operator> <operator>~</operator><name>ENABLE_ECHO_INPUT</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>SetConsoleMode</name><argument_list>(<argument><expr><name>hStdin</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECHOFLAGS</name></cpp:macro> <cpp:value>(ECHO | ECHOE | ECHOK | ECHONL)</cpp:value></cpp:define>
  <decl_stmt><decl><type><name>int</name></type>            <name>err</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>termios</name></name></type> <name>term</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tcgetattr</name><argument_list>(<argument><expr><name>STDIN_FILENO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>term</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <comment type="block">/*perror("Cannot get the attribution of the terminal");*/</comment>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>on</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>term</name><operator>.</operator><name>c_lflag</name></name> <operator>|=</operator> <name>ECHOFLAGS</name></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>term</name><operator>.</operator><name>c_lflag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ECHOFLAGS</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

  <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>tcsetattr</name><argument_list>(<argument><expr><name>STDIN_FILENO</name></expr></argument>, <argument><expr><name>TCSAFLUSH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>err</name> <operator>==</operator> <name>EINTR</name></expr>)</condition> <block>{<block_content>
    <comment type="block">/*printf("Cannot set the attribution of the terminal");*/</comment>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosSetTerminalMode</name><parameter_list>()</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name><name>struct</name> <name>termios</name></name></type> <name>newtio</name></decl>;</decl_stmt>

  <comment type="block">/* if (atexit() != 0) { */</comment>
  <comment type="block">/*     fprintf(stderr, "Error register exit function!\n"); */</comment>
  <comment type="block">/*     exit(EXIT_FAILURE); */</comment>
  <comment type="block">/* } */</comment>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newtio</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oldtio</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>oldtio</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Set new terminal attributes.</comment>
  <expr_stmt><expr><name><name>newtio</name><operator>.</operator><name>c_iflag</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>IXON</name> <operator>|</operator> <name>IXOFF</name> <operator>|</operator> <name>ICRNL</name> <operator>|</operator> <name>INLCR</name> <operator>|</operator> <name>IGNCR</name> <operator>|</operator> <name>IMAXBEL</name> <operator>|</operator> <name>ISTRIP</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>newtio</name><operator>.</operator><name>c_iflag</name></name> <operator>|=</operator> <name>IGNBRK</name></expr>;</expr_stmt>

  <comment type="line">// newtio.c_oflag &amp;= ~(OPOST|ONLCR|OCRNL|ONLRET);</comment>
  <expr_stmt><expr><name><name>newtio</name><operator>.</operator><name>c_oflag</name></name> <operator>|=</operator> <name>OPOST</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>newtio</name><operator>.</operator><name>c_oflag</name></name> <operator>|=</operator> <name>ONLCR</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>newtio</name><operator>.</operator><name>c_oflag</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>OCRNL</name> <operator>|</operator> <name>ONLRET</name><operator>)</operator></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>newtio</name><operator>.</operator><name>c_lflag</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>IEXTEN</name> <operator>|</operator> <name>ICANON</name> <operator>|</operator> <name>ECHO</name> <operator>|</operator> <name>ECHOE</name> <operator>|</operator> <name>ECHONL</name> <operator>|</operator> <name>ECHOCTL</name> <operator>|</operator> <name>ECHOPRT</name> <operator>|</operator> <name>ECHOKE</name> <operator>|</operator> <name>ISIG</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>newtio</name><operator>.</operator><name>c_cc</name><index>[<expr><name>VMIN</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>newtio</name><operator>.</operator><name>c_cc</name><index>[<expr><name>VTIME</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tcsetattr</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TCSANOW</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newtio</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Fail to set terminal properties!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosGetOldTerminalMode</name><parameter_list>()</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/* Make sure stdin is a terminal. */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isatty</name><argument_list>(<argument><expr><name>STDIN_FILENO</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// Get the parameter of current terminal</comment>
  <if_stmt><if>if <condition>(<expr><call><name>tcgetattr</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>oldtio</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">1</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosResetTerminalMode</name><parameter_list>()</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <if_stmt><if>if <condition>(<expr><call><name>tcsetattr</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TCSANOW</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oldtio</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Fail to reset the terminal properties!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>TdCmdPtr</name></type> <name>taosOpenCmd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><operator>(</operator><name>TdCmdPtr</name><operator>)</operator><call><name>_popen</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><operator>(</operator><name>TdCmdPtr</name><operator>)</operator><call><name>popen</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>taosGetsCmd</name><parameter_list>(<parameter><decl><type><name>TdCmdPtr</name></type> <name>pCmd</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>maxSize</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier> <name>__restrict</name></type> <name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pCmd</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>maxSize</name></expr></argument>, <argument><expr><operator>(</operator><name>FILE</name><operator>*</operator><operator>)</operator><name>pCmd</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>taosGetLineCmd</name><parameter_list>(<parameter><decl><type><name>TdCmdPtr</name></type> <name>pCmd</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier> <name>__restrict</name></type> <name>ptrBuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pCmd</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>ptrBuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptrBuf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><operator>*</operator><name>ptrBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <expr_stmt><expr><operator>*</operator><name>ptrBuf</name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptrBuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><operator>*</operator><name>ptrBuf</name></expr></argument>, <argument><expr><literal type="number">1023</literal></expr></argument>, <argument><expr><operator>(</operator><name>FILE</name><operator>*</operator><operator>)</operator><name>pCmd</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><operator>*</operator><name>ptrBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ptrBuf</name><operator>)</operator><index>[<expr><literal type="number">1023</literal></expr>]</index> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><call><name>strlen</name><argument_list>(<argument><expr><operator>*</operator><name>ptrBuf</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>getline</name><argument_list>(<argument><expr><name>ptrBuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><operator>(</operator><name>FILE</name><operator>*</operator><operator>)</operator><name>pCmd</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosEOFCmd</name><parameter_list>(<parameter><decl><type><name>TdCmdPtr</name></type> <name>pCmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pCmd</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>feof</name><argument_list>(<argument><expr><operator>(</operator><name>FILE</name><operator>*</operator><operator>)</operator><name>pCmd</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>taosCloseCmd</name><parameter_list>(<parameter><decl><type><name>TdCmdPtr</name><modifier>*</modifier></type> <name>ppCmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>ppCmd</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>ppCmd</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <expr_stmt><expr><call><name>_pclose</name><argument_list>(<argument><expr><operator>(</operator><name>FILE</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>*</operator><name>ppCmd</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>pclose</name><argument_list>(<argument><expr><operator>(</operator><name>FILE</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>*</operator><name>ppCmd</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><operator>*</operator><name>ppCmd</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
