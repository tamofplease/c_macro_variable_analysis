<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/os/src/osMemory.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLOW_FORBID_FUNC</name></cpp:macro></cpp:define>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_TD_DARWIN_64</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;malloc/malloc.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;malloc.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_TD_MEMORY</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_ADDR2LINE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TD_MEMORY_SYMBOL</name></cpp:macro> <cpp:value>('T' &lt;&lt; 24 | 'A' &lt;&lt; 16 | 'O' &lt;&lt; 8 | 'S')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TD_MEMORY_STACK_TRACE_DEPTH</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<typedef>typedef <type><name><name>struct</name> <name>TdMemoryInfo</name></name> <modifier>*</modifier></type><name>TdMemoryInfoPtr</name>;</typedef>

<typedef>typedef <type><struct>struct <name>TdMemoryInfo</name> <block>{
  <decl_stmt><decl><type><name>int32_t</name></type> <name>symbol</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>memorySize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name><name>stackTrace</name><index>[<expr><name>TD_MEMORY_STACK_TRACE_DEPTH</name></expr>]</index></name></decl>;</decl_stmt>  <comment type="line">// gdb: disassemble /m 0xXXX</comment>
  <comment type="line">// TdMemoryInfoPtr pNext;</comment>
  <comment type="line">// TdMemoryInfoPtr pPrev;</comment>
}</block></struct></type> <name>TdMemoryInfo</name>;</typedef>

<comment type="line">// static TdMemoryInfoPtr GlobalMemoryPtr = NULL;</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tstrdup</name><parameter_list>(<parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_strdup(str)</cpp:value></cpp:define>

<function><type><name>int32_t</name></type> <name>taosBackTrace</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>frame</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>frame</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ADDR2LINE</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;DbgHelp.h&gt;</cpp:file></cpp:include>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>comment</name><name>(</name><name>lib</name><name>,</name> <cpp:literal>"dbghelp.lib"</cpp:literal><name>)</name></cpp:pragma>

<function><type><name>void</name></type> <name>taosPrintBackTrace</name><parameter_list>()</parameter_list> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_STACK_FRAMES</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name><name>pStack</name><index>[<expr><name>MAX_STACK_FRAMES</name></expr>]</index></name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>HANDLE</name></type> <name>process</name> <init>= <expr><call><name>GetCurrentProcess</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>SymInitialize</name><argument_list>(<argument><expr><name>process</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>WORD</name></type> <name>frames</name> <init>= <expr><call><name>CaptureStackBackTrace</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>MAX_STACK_FRAMES</name></expr></argument>, <argument><expr><name>pStack</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>buf_tmp</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>WORD</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>frames</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>DWORD64</name></type> <name>address</name> <init>= <expr><operator>(</operator><name>DWORD64</name><operator>)</operator><operator>(</operator><name><name>pStack</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>DWORD64</name></type>      <name>displacementSym</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>         <name><name>buffer</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>SYMBOL_INFO</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>MAX_SYM_NAME</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TCHAR</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PSYMBOL_INFO</name></type> <name>pSymbol</name> <init>= <expr><operator>(</operator><name>PSYMBOL_INFO</name><operator>)</operator><name>buffer</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pSymbol</name><operator>-&gt;</operator><name>SizeOfStruct</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SYMBOL_INFO</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSymbol</name><operator>-&gt;</operator><name>MaxNameLen</name></name> <operator>=</operator> <name>MAX_SYM_NAME</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>DWORD</name></type>           <name>displacementLine</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>IMAGEHLP_LINE64</name></type> <name>line</name></decl>;</decl_stmt>
    <comment type="line">// SymSetOptions(SYMOPT_LOAD_LINES);</comment>
    <expr_stmt><expr><name><name>line</name><operator>.</operator><name>SizeOfStruct</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>IMAGEHLP_LINE64</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>SymFromAddr</name><argument_list>(<argument><expr><name>process</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>displacementSym</name></expr></argument>, <argument><expr><name>pSymbol</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
        <call><name>SymGetLineFromAddr64</name><argument_list>(<argument><expr><name>process</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>displacementLine</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>line</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf_tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf_tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"BackTrace %08"</literal> <name>PRId64</name> <literal type="string">" %s:%d %s\n"</literal></expr></argument>, <argument><expr><call><name>taosGetSelfPthreadId</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>line</name><operator>.</operator><name>FileName</name></name></expr></argument>,
               <argument><expr><name><name>line</name><operator>.</operator><name>LineNumber</name></name></expr></argument>, <argument><expr><name><name>pSymbol</name><operator>-&gt;</operator><name>Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf_tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf_tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"BackTrace error: %d\n"</literal></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>buf_tmp</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf_tmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tstrdup</name><parameter_list>(<parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>strdup(str)</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;execinfo.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACKCALL</name></cpp:macro> <cpp:value>__attribute__((regparm(1), noinline))</cpp:value></cpp:define>
<function><type><name>void</name> <modifier>*</modifier><modifier>*</modifier><name>STACKCALL</name></type> <name>taosGetEbp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ebp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <asm>__asm__ <specifier>__volatile__</specifier>("mov %%rbp, %0;\n\t"
                       : "=m"(ebp)  <comment type="block">/* output */</comment>
                       :            <comment type="block">/* input */</comment>
                       : "memory");</asm> <comment type="block">/* not affect register */</comment>
  <return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><operator>*</operator><name>ebp</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosBackTrace</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>frame</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>  <modifier>*</modifier><modifier>*</modifier></type><name>ebp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>  <modifier>*</modifier><modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>  <name>func_frame_distance</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>buffer</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ebp</name> <operator>=</operator> <call><name>taosGetEbp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>func_frame_distance</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>*</operator><name>ebp</name> <operator>-</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>ebp</name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>ebp</name> <operator>&amp;&amp;</operator> <name>frame</name> <operator>&lt;</operator> <name>size</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>func_frame_distance</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator><operator>)</operator>  <comment type="line">// assume function ebp more than 16M</comment>
           <operator>&amp;&amp;</operator> <operator>(</operator><name>func_frame_distance</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ebp</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>buffer</name><index>[<expr><name>frame</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>ret</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>ebp</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><operator>*</operator><name>ebp</name><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>func_frame_distance</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>*</operator><name>ebp</name> <operator>-</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>ebp</name></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>frame</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// char **taosBackTraceSymbols(int32_t *size) {</comment>
<comment type="line">//   void  *buffer[20] = {NULL};</comment>
<comment type="line">//   *size = taosBackTrace(buffer, 20);</comment>
<comment type="line">//   return backtrace_symbols(buffer, *size);</comment>
<comment type="line">// }</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ADDR2LINE</name></cpp:ifdef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dwarf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libdwarf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"osThread.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DW_PR_DUu</name></cpp:macro> <cpp:value>"llu"</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>lookup_table</name> <block>{
  <decl_stmt><decl><type><name>Dwarf_Line</name>         <modifier>*</modifier></type><name>table</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Dwarf_Line_Context</name> <modifier>*</modifier></type><name>ctxts</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>                 <name>cnt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Dwarf_Addr</name></type>          <name>low</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Dwarf_Addr</name></type>          <name>high</name></decl>;</decl_stmt>
}</block></struct></type> <name>lookup_tableT</name>;</typedef>

<function_decl><type><specifier>extern</specifier> <name>int</name></type>  <name>create_lookup_table</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>lookup_tableT</name> <modifier>*</modifier></type><name>lookup_table</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>delete_lookup_table</name><parameter_list>(<parameter><decl><type><name>lookup_tableT</name> <modifier>*</modifier></type><name>lookup_table</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>size_t</name></type>              <name>addr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lookup_tableT</name></type>       <name>lookup_table</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Dwarf_Debug</name></type>         <name>tDbg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>TdThreadOnce</name></type> <name>traceThreadInit</name> <init>= <expr><name>PTHREAD_ONCE_INIT</name></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>endTrace</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TdThreadOnce</name></type> <name>tmp</name> <init>= <expr><name>PTHREAD_ONCE_INIT</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>traceThreadInit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TdThreadOnce</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>delete_lookup_table</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lookup_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dwarf_finish</name><argument_list>(<argument><expr><name>tDbg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>startTrace</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type>       <name>ret</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Dwarf_Ptr</name></type> <name>errarg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><literal type="string">"/proc/self/maps"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>fscanf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%lx-"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dwarf_init_path</name><argument_list>(<argument><expr><literal type="string">"/proc/self/exe"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>DW_GROUPNUMBER_ANY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>errarg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tDbg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>DW_DLV_NO_ENTRY</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Unable to open file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>create_lookup_table</name><argument_list>(<argument><expr><name>tDbg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lookup_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>DW_DLV_OK</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Unable to create lookup table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>atexit</name><argument_list>(<argument><expr><name>endTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>print_line</name><parameter_list>(<parameter><decl><type><name>Dwarf_Debug</name></type> <name>dbg</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Line</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><name>Dwarf_Addr</name></type> <name>pc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name>          <modifier>*</modifier></type><name>linesrc</name> <init>= <expr><literal type="string">"??"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Dwarf_Unsigned</name></type> <name>lineno</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>line</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>dwarf_linesrc</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>linesrc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dwarf_lineno</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lineno</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"BackTrace %08"</literal> <name>PRId64</name> <literal type="string">" %s:%"</literal> <name>DW_PR_DUu</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>taosGetSelfPthreadId</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>linesrc</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>line</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>dwarf_dealloc</name><argument_list>(<argument><expr><name>dbg</name></expr></argument>, <argument><expr><name>linesrc</name></expr></argument>, <argument><expr><name>DW_DLA_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>taosPrintBackTrace</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type>        <name>size</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>     <modifier>*</modifier><modifier>*</modifier></type><name><name>buffer</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Dwarf_Addr</name></type> <name>pc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>frame</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>     <modifier>*</modifier><modifier>*</modifier></type><name>ebp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>     <modifier>*</modifier><modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>     <name>func_frame_distance</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosThreadOnce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>traceThreadInit</name></expr></argument>, <argument><expr><name>startTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>buffer</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ebp</name> <operator>=</operator> <call><name>taosGetEbp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>func_frame_distance</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>*</operator><name>ebp</name> <operator>-</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>ebp</name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>ebp</name> <operator>&amp;&amp;</operator> <name>frame</name> <operator>&lt;</operator> <name>size</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>func_frame_distance</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>func_frame_distance</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ebp</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>buffer</name><index>[<expr><name>frame</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>ret</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>ebp</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><operator>*</operator><name>ebp</name><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>func_frame_distance</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>*</operator><name>ebp</name> <operator>-</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>ebp</name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>frame</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>pc</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>addr</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>pc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>pc</name> <operator>&gt;=</operator> <name><name>lookup_table</name><operator>.</operator><name>low</name></name> <operator>&amp;&amp;</operator> <name>pc</name> <operator>&lt;</operator> <name><name>lookup_table</name><operator>.</operator><name>high</name></name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>Dwarf_Line</name></type> <name>line</name> <init>= <expr><name><name>lookup_table</name><operator>.</operator><name>table</name><index>[<expr><name>pc</name> <operator>-</operator> <name><name>lookup_table</name><operator>.</operator><name>low</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name>line</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>print_line</name><argument_list>(<argument><expr><name>tDbg</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>USE_ADDR2LINE</name></cpp:ifndef>
<function><type><name>void</name></type> <name>taosPrintBackTrace</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return;</return> </block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name> <modifier>*</modifier></type><name>taosMemoryMalloc</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_TD_MEMORY</name></cpp:ifdef>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>size</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TdMemoryInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>TdMemoryInfoPtr</name></type> <name>pTdMemoryInfo</name> <init>= <expr><operator>(</operator><name>TdMemoryInfoPtr</name><operator>)</operator><name>tmp</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pTdMemoryInfo</name><operator>-&gt;</operator><name>memorySize</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTdMemoryInfo</name><operator>-&gt;</operator><name>symbol</name></name> <operator>=</operator> <name>TD_MEMORY_SYMBOL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosBackTrace</name><argument_list>(<argument><expr><name><name>pTdMemoryInfo</name><operator>-&gt;</operator><name>stackTrace</name></name></expr></argument>, <argument><expr><name>TD_MEMORY_STACK_TRACE_DEPTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>tmp</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TdMemoryInfo</name></expr></argument>)</argument_list></sizeof></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>taosMemoryCalloc</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_TD_MEMORY</name></cpp:ifdef>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>memorySize</name> <init>= <expr><name>num</name> <operator>*</operator> <name>size</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><name>memorySize</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TdMemoryInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>TdMemoryInfoPtr</name></type> <name>pTdMemoryInfo</name> <init>= <expr><operator>(</operator><name>TdMemoryInfoPtr</name><operator>)</operator><name>tmp</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pTdMemoryInfo</name><operator>-&gt;</operator><name>memorySize</name></name> <operator>=</operator> <name>memorySize</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTdMemoryInfo</name><operator>-&gt;</operator><name>symbol</name></name> <operator>=</operator> <name>TD_MEMORY_SYMBOL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosBackTrace</name><argument_list>(<argument><expr><name><name>pTdMemoryInfo</name><operator>-&gt;</operator><name>stackTrace</name></name></expr></argument>, <argument><expr><name>TD_MEMORY_STACK_TRACE_DEPTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>tmp</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TdMemoryInfo</name></expr></argument>)</argument_list></sizeof></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>calloc</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>taosMemoryRealloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_TD_MEMORY</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>TdMemoryInfoPtr</name></type> <name>pTdMemoryInfo</name> <init>= <expr><operator>(</operator><name>TdMemoryInfoPtr</name><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>ptr</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TdMemoryInfo</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pTdMemoryInfo</name><operator>-&gt;</operator><name>symbol</name></name> <operator>==</operator> <name>TD_MEMORY_SYMBOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>TdMemoryInfo</name></type> <name>tdMemoryInfo</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tdMemoryInfo</name></expr></argument>, <argument><expr><name>pTdMemoryInfo</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TdMemoryInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>realloc</name><argument_list>(<argument><expr><name>pTdMemoryInfo</name></expr></argument>, <argument><expr><name>size</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TdMemoryInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tdMemoryInfo</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TdMemoryInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><operator>(</operator><name>TdMemoryInfoPtr</name><operator>)</operator><name>tmp</name><operator>)</operator><operator>-&gt;</operator><name>memorySize</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

  <return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>tmp</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TdMemoryInfo</name></expr></argument>)</argument_list></sizeof></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>realloc</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>taosMemoryStrDup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_TD_MEMORY</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>TdMemoryInfoPtr</name></type> <name>pTdMemoryInfo</name> <init>= <expr><operator>(</operator><name>TdMemoryInfoPtr</name><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>ptr</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TdMemoryInfo</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pTdMemoryInfo</name><operator>-&gt;</operator><name>symbol</name></name> <operator>==</operator> <name>TD_MEMORY_SYMBOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>tstrdup</name><argument_list>(<argument><expr><name>pTdMemoryInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>pTdMemoryInfo</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TdMemoryInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosBackTrace</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>TdMemoryInfoPtr</name><operator>)</operator><name>tmp</name><operator>)</operator><operator>-&gt;</operator><name>stackTrace</name></expr></argument>, <argument><expr><name>TD_MEMORY_STACK_TRACE_DEPTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>tmp</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TdMemoryInfo</name></expr></argument>)</argument_list></sizeof></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>tstrdup</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosMemoryFree</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>ptr</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_TD_MEMORY</name></cpp:ifdef>
  <decl_stmt><decl><type><name>TdMemoryInfoPtr</name></type> <name>pTdMemoryInfo</name> <init>= <expr><operator>(</operator><name>TdMemoryInfoPtr</name><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>ptr</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TdMemoryInfo</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pTdMemoryInfo</name><operator>-&gt;</operator><name>symbol</name></name> <operator>==</operator> <name>TD_MEMORY_SYMBOL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pTdMemoryInfo</name><operator>-&gt;</operator><name>memorySize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <comment type="line">// memset(pTdMemoryInfo, 0, sizeof(TdMemoryInfo));</comment>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pTdMemoryInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>taosMemorySize</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_TD_MEMORY</name></cpp:ifdef>
  <decl_stmt><decl><type><name>TdMemoryInfoPtr</name></type> <name>pTdMemoryInfo</name> <init>= <expr><operator>(</operator><name>TdMemoryInfoPtr</name><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>ptr</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TdMemoryInfo</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pTdMemoryInfo</name><operator>-&gt;</operator><name>symbol</name></name> <operator>==</operator> <name>TD_MEMORY_SYMBOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name><name>pTdMemoryInfo</name><operator>-&gt;</operator><name>memorySize</name></name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><call><name>_msize</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_DARWIN_64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>malloc_size</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>malloc_usable_size</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosMemoryTrim</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WINDOWS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>DARWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="line">// do nothing</comment>
  <return>return;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>malloc_trim</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>taosMemoryMallocAlign</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>alignment</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_TD_MEMORY</name></cpp:ifdef>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LINUX</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>memalign</name><argument_list>(<argument><expr><name>alignment</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>p</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
</unit>
