<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/os/src/osSocket.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLOW_FORBID_FUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;IPHlpApi.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;WS2tcpip.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Winsock2.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tchar.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winbase.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net/if.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/ip.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/tcp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/udp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DARWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dispatch/dispatch.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"osEok.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/epoll.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>INVALID_SOCKET</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INVALID_SOCKET</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>TdSocket</name> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SOCKET_WITH_LOCK</name></expr></cpp:if>
  <decl_stmt><decl><type><name>TdThreadRwlock</name></type> <name>rwlock</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name>int</name></type>      <name>refId</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SocketFd</name></type> <name>fd</name></decl>;</decl_stmt>
}</block></struct></type> * <name>TdSocketPtr</name><operator>,</operator> <name>TdSocket</name>;</typedef>

<typedef>typedef <type><struct>struct <name>TdSocketServer</name> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SOCKET_WITH_LOCK</name></expr></cpp:if>
  <decl_stmt><decl><type><name>TdThreadRwlock</name></type> <name>rwlock</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name>int</name></type>      <name>refId</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SocketFd</name></type> <name>fd</name></decl>;</decl_stmt>
}</block></struct></type> * <name>TdSocketServerPtr</name><operator>,</operator> <name>TdSocketServer</name>;</typedef>

<typedef>typedef <type><struct>struct <name>TdEpoll</name> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SOCKET_WITH_LOCK</name></expr></cpp:if>
  <decl_stmt><decl><type><name>TdThreadRwlock</name></type> <name>rwlock</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name>int</name></type>     <name>refId</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>EpollFd</name></type> <name>fd</name></decl>;</decl_stmt>
}</block></struct></type> * <name>TdEpollPtr</name><operator>,</operator> <name>TdEpoll</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
int32_t taosSendto(TdSocketPtr pSocket, void *buf, int len, unsigned int flags, const struct sockaddr *dest_addr,
                   int addrlen) {
  if (pSocket == NULL || pSocket-&gt;fd &lt; 0) {
    return -1;
  }
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  return sendto(pSocket-&gt;fd, buf, len, flags, dest_addr, addrlen);
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  return sendto(pSocket-&gt;fd, buf, len, flags, dest_addr, addrlen);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}

int32_t taosWriteSocket(TdSocketPtr pSocket, void *buf, int len) {
  if (pSocket == NULL || pSocket-&gt;fd &lt; 0) {
    return -1;
  }
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  return send(pSocket-&gt;fd, buf, len, 0);
  ;
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  return write(pSocket-&gt;fd, buf, len);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}
int32_t taosReadSocket(TdSocketPtr pSocket, void *buf, int len) {
  if (pSocket == NULL || pSocket-&gt;fd &lt; 0) {
    return -1;
  }
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  return recv(pSocket-&gt;fd, buf, len, 0);
  ;
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  return read(pSocket-&gt;fd, buf, len);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}

int32_t taosReadFromSocket(TdSocketPtr pSocket, void *buf, int32_t len, int32_t flags, struct sockaddr *destAddr,
                           int *addrLen) {
  if (pSocket == NULL || pSocket-&gt;fd &lt; 0) {
    return -1;
  }
  return recvfrom(pSocket-&gt;fd, buf, len, flags, destAddr, addrLen);
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// endif 0</comment>

<function><type><name>int32_t</name></type> <name>taosCloseSocketNoCheck1</name><parameter_list>(<parameter><decl><type><name>SocketFd</name></type> <name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><call><name>closesocket</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosCloseSocket</name><parameter_list>(<parameter><decl><type><name>TdSocketPtr</name> <modifier>*</modifier></type><name>ppSocket</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ppSocket</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>ppSocket</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><operator>(</operator><operator>*</operator><name>ppSocket</name><operator>)</operator><operator>-&gt;</operator><name>fd</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taosCloseSocketNoCheck1</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>ppSocket</name><operator>)</operator><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>ppSocket</name><operator>)</operator><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><operator>*</operator><name>ppSocket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
int32_t taosCloseSocketServer(TdSocketServerPtr *ppSocketServer) {
  int32_t code;
  if (ppSocketServer == NULL || *ppSocketServer == NULL || (*ppSocketServer)-&gt;fd &lt; 0) {
    return -1;
  }
  code = taosCloseSocketNoCheck1((*ppSocketServer)-&gt;fd);
  (*ppSocketServer)-&gt;fd = -1;
  taosMemoryFree(*ppSocketServer);
  return code;
}

int32_t taosShutDownSocketRD(TdSocketPtr pSocket) {
  if (pSocket == NULL || pSocket-&gt;fd &lt; 0) {
    return -1;
  }
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  return closesocket(pSocket-&gt;fd);
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__APPLE__</name></expr></cpp:elif>
  return close(pSocket-&gt;fd);
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  return shutdown(pSocket-&gt;fd, SHUT_RD);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}
int32_t taosShutDownSocketServerRD(TdSocketServerPtr pSocketServer) {
  if (pSocketServer == NULL || pSocketServer-&gt;fd &lt; 0) {
    return -1;
  }
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  return closesocket(pSocketServer-&gt;fd);
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__APPLE__</name></expr></cpp:elif>
  return close(pSocketServer-&gt;fd);
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  return shutdown(pSocketServer-&gt;fd, SHUT_RD);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}

int32_t taosShutDownSocketWR(TdSocketPtr pSocket) {
  if (pSocket == NULL || pSocket-&gt;fd &lt; 0) {
    return -1;
  }
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  return closesocket(pSocket-&gt;fd);
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__APPLE__</name></expr></cpp:elif>
  return close(pSocket-&gt;fd);
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  return shutdown(pSocket-&gt;fd, SHUT_WR);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}
int32_t taosShutDownSocketServerWR(TdSocketServerPtr pSocketServer) {
  if (pSocketServer == NULL || pSocketServer-&gt;fd &lt; 0) {
    return -1;
  }
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  return closesocket(pSocketServer-&gt;fd);
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__APPLE__</name></expr></cpp:elif>
  return close(pSocketServer-&gt;fd);
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  return shutdown(pSocketServer-&gt;fd, SHUT_WR);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}
int32_t taosShutDownSocketRDWR(TdSocketPtr pSocket) {
  if (pSocket == NULL || pSocket-&gt;fd &lt; 0) {
    return -1;
  }
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  return closesocket(pSocket-&gt;fd);
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__APPLE__</name></expr></cpp:elif>
  return close(pSocket-&gt;fd);
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  return shutdown(pSocket-&gt;fd, SHUT_RDWR);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}
int32_t taosShutDownSocketServerRDWR(TdSocketServerPtr pSocketServer) {
  if (pSocketServer == NULL || pSocketServer-&gt;fd &lt; 0) {
    return -1;
  }
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  return closesocket(pSocketServer-&gt;fd);
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>__APPLE__</name></expr></cpp:elif>
  return close(pSocketServer-&gt;fd);
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  return shutdown(pSocketServer-&gt;fd, SHUT_RDWR);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}

int32_t taosSetNonblocking(TdSocketPtr pSocket, int32_t on) {
  if (pSocket == NULL || pSocket-&gt;fd &lt; 0) {
    return -1;
  }
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  u_long mode;
  if (on) {
    mode = 1;
    ioctlsocket(pSocket-&gt;fd, FIONBIO, &amp;mode);
  } else {
    mode = 0;
    ioctlsocket(pSocket-&gt;fd, FIONBIO, &amp;mode);
  }
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  int32_t flags = 0;
  if ((flags = fcntl(pSocket-&gt;fd, F_GETFL, 0)) &lt; 0) {
    <comment type="line">// printf("fcntl(F_GETFL) error: %d (%s)\n", errno, strerror(errno));</comment>
    return 1;
  }

  if (on)
    flags |= O_NONBLOCK;
  else
    flags &amp;= ~O_NONBLOCK;

  if ((flags = fcntl(pSocket-&gt;fd, F_SETFL, flags)) &lt; 0) {
    <comment type="line">// printf("fcntl(F_SETFL) error: %d (%s)\n", errno, strerror(errno));</comment>
    return 1;
  }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  return 0;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// endif 0</comment>

<function><type><name>int32_t</name></type> <name>taosSetSockOpt</name><parameter_list>(<parameter><decl><type><name>TdSocketPtr</name></type> <name>pSocket</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>optname</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optval</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>optlen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pSocket</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pSocket</name><operator>-&gt;</operator><name>fd</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TCP_KEEPCNT</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><name>level</name> <operator>==</operator> <name>SOL_SOCKET</name> <operator>&amp;&amp;</operator> <name>optname</name> <operator>==</operator> <name>TCP_KEEPCNT</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TCP_KEEPIDLE</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><name>level</name> <operator>==</operator> <name>SOL_TCP</name> <operator>&amp;&amp;</operator> <name>optname</name> <operator>==</operator> <name>TCP_KEEPIDLE</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TCP_KEEPINTVL</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><name>level</name> <operator>==</operator> <name>SOL_TCP</name> <operator>&amp;&amp;</operator> <name>optname</name> <operator>==</operator> <name>TCP_KEEPINTVL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TCP_KEEPCNT</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><name>level</name> <operator>==</operator> <name>SOL_TCP</name> <operator>&amp;&amp;</operator> <name>optname</name> <operator>==</operator> <name>TCP_KEEPCNT</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <return>return <expr><call><name>setsockopt</name><argument_list>(<argument><expr><name><name>pSocket</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>optname</name></expr></argument>, <argument><expr><name>optval</name></expr></argument>, <argument><expr><name>optlen</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>setsockopt</name><argument_list>(<argument><expr><name><name>pSocket</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>optname</name></expr></argument>, <argument><expr><name>optval</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>optlen</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
int32_t taosGetSockOpt(TdSocketPtr pSocket, int32_t level, int32_t optname, void *optval, int32_t *optlen) {
  if (pSocket == NULL || pSocket-&gt;fd &lt; 0) {
    return -1;
  }
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  assert(0);
  return 0;
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  return getsockopt(pSocket-&gt;fd, level, optname, optval, (int *)optlen);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>uint32_t</name></type> <name>taosInetAddr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ipAddr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>value</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>ret</name> <init>= <expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>ipAddr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>INADDR_NONE</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name>value</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>inet_addr</name><argument_list>(<argument><expr><name>ipAddr</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>taosInetNtoa</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>ipInt</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dstStr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ipInt</name></expr></argument>, <argument><expr><name>dstStr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SIGPIPE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGPIPE</name></cpp:macro> <cpp:value>EPIPE</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCP_CONN_TIMEOUT</name></cpp:macro> <cpp:value>3000</cpp:value></cpp:define>  <comment type="line">// conn timeout</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
int32_t taosWriteMsg(TdSocketPtr pSocket, void *buf, int32_t nbytes) {
  if (pSocket == NULL || pSocket-&gt;fd &lt; 0) {
    return -1;
  }
  int32_t nleft, nwritten;
  char   *ptr = (char *)buf;

  nleft = nbytes;

  while (nleft &gt; 0) {
    nwritten = taosWriteSocket(pSocket, (char *)ptr, (size_t)nleft);
    if (nwritten &lt;= 0) {
      if (errno == EINTR <comment type="block">/* || errno == EAGAIN || errno == EWOULDBLOCK */</comment>)
        continue;
      else
        return -1;
    } else {
      nleft -= nwritten;
      ptr += nwritten;
    }

    if (errno == SIGPIPE || errno == EPIPE) {
      return -1;
    }
  }

  return (nbytes - nleft);
}

int32_t taosReadMsg(TdSocketPtr pSocket, void *buf, int32_t nbytes) {
  if (pSocket == NULL || pSocket-&gt;fd &lt; 0) {
    return -1;
  }
  int32_t nleft, nread;
  char   *ptr = (char *)buf;

  nleft = nbytes;

  while (nleft &gt; 0) {
    nread = taosReadSocket(pSocket, ptr, (size_t)nleft);
    if (nread == 0) {
      break;
    } else if (nread &lt; 0) {
      if (errno == EINTR <comment type="block">/* || errno == EAGAIN || errno == EWOULDBLOCK*/</comment>) {
        continue;
      } else {
        return -1;
      }
    } else {
      nleft -= nread;
      ptr += nread;
    }

    if (errno == SIGPIPE || errno == EPIPE) {
      return -1;
    }
  }

  return (nbytes - nleft);
}

int32_t taosNonblockwrite(TdSocketPtr pSocket, char *ptr, int32_t nbytes) {
  if (pSocket == NULL || pSocket-&gt;fd &lt; 0) {
    return -1;
  }
  taosSetNonblocking(pSocket, 1);

  int32_t        nleft, nwritten, nready;
  fd_set         fset;
  struct timeval tv;

  nleft = nbytes;
  while (nleft &gt; 0) {
    tv.tv_sec = 30;
    tv.tv_usec = 0;
    FD_ZERO(&amp;fset);
    FD_SET(pSocket-&gt;fd, &amp;fset);
    if ((nready = select((SocketFd)(pSocket-&gt;fd + 1), NULL, &amp;fset, NULL, &amp;tv)) == 0) {
      errno = ETIMEDOUT;
      <comment type="line">// printf("fd %d timeout, no enough space to write", fd);</comment>
      break;

    } else if (nready &lt; 0) {
      if (errno == EINTR) continue;

      <comment type="line">// printf("select error, %d (%s)", errno, strerror(errno));</comment>
      return -1;
    }

    nwritten = (int32_t)send(pSocket-&gt;fd, ptr, (size_t)nleft, MSG_NOSIGNAL);
    if (nwritten &lt;= 0) {
      if (errno == EAGAIN || errno == EINTR) continue;

      <comment type="line">// printf("write error, %d (%s)", errno, strerror(errno));</comment>
      return -1;
    }

    nleft -= nwritten;
    ptr += nwritten;
  }

  taosSetNonblocking(pSocket, 0);

  return (nbytes - nleft);
}

TdSocketPtr taosOpenUdpSocket(uint32_t ip, uint16_t port) {
  struct sockaddr_in localAddr;
  SocketFd           fd;
  int32_t            bufSize = 1024000;

  <comment type="line">// printf("open udp socket:0x%x:%hu", ip, port);</comment>

  memset((char *)&amp;localAddr, 0, sizeof(localAddr));
  localAddr.sin_family = AF_INET;
  localAddr.sin_addr.s_addr = ip;
  localAddr.sin_port = (uint16_t)htons(port);

  if ((fd = socket(AF_INET, SOCK_DGRAM, 0)) &lt;= 2) {
    <comment type="line">// printf("failed to open udp socket: %d (%s)", errno, strerror(errno));</comment>
    taosCloseSocketNoCheck1(fd);
    return NULL;
  }

  TdSocketPtr pSocket = (TdSocketPtr)taosMemoryMalloc(sizeof(TdSocket));
  if (pSocket == NULL) {
    taosCloseSocketNoCheck1(fd);
    return NULL;
  }
  pSocket-&gt;fd = fd;
  pSocket-&gt;refId = 0;

  if (taosSetSockOpt(pSocket, SOL_SOCKET, SO_SNDBUF, (void *)&amp;bufSize, sizeof(bufSize)) != 0) {
    <comment type="line">// printf("failed to set the send buffer size for UDP socket\n");</comment>
    taosCloseSocket(&amp;pSocket);
    return NULL;
  }

  if (taosSetSockOpt(pSocket, SOL_SOCKET, SO_RCVBUF, (void *)&amp;bufSize, sizeof(bufSize)) != 0) {
    <comment type="line">// printf("failed to set the receive buffer size for UDP socket\n");</comment>
    taosCloseSocket(&amp;pSocket);
    return NULL;
  }

  <comment type="block">/* bind socket to local address */</comment>
  if (bind(pSocket-&gt;fd, (struct sockaddr *)&amp;localAddr, sizeof(localAddr)) &lt; 0) {
    <comment type="line">// printf("failed to bind udp socket: %d (%s), 0x%x:%hu", errno, strerror(errno), ip, port);</comment>
    taosCloseSocket(&amp;pSocket);
    return NULL;
  }

  return pSocket;
}

TdSocketPtr taosOpenTcpClientSocket(uint32_t destIp, uint16_t destPort, uint32_t clientIp) {
  SocketFd           fd = -1;
  int32_t            ret;
  struct sockaddr_in serverAddr, clientAddr;
  int32_t            bufSize = 1024 * 1024;

  fd = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);

  if (fd &lt;= 2) {
    <comment type="line">// printf("failed to open the socket: %d (%s)", errno, strerror(errno));</comment>
    if (fd &gt;= 0) taosCloseSocketNoCheck1(fd);
    return NULL;
  }

  TdSocketPtr pSocket = (TdSocketPtr)taosMemoryMalloc(sizeof(TdSocket));
  if (pSocket == NULL) {
    taosCloseSocketNoCheck1(fd);
    return NULL;
  }
  pSocket-&gt;fd = fd;
  pSocket-&gt;refId = 0;

  <comment type="block">/* set REUSEADDR option, so the portnumber can be re-used */</comment>
  int32_t reuse = 1;
  if (taosSetSockOpt(pSocket, SOL_SOCKET, SO_REUSEADDR, (void *)&amp;reuse, sizeof(reuse)) &lt; 0) {
    <comment type="line">// printf("setsockopt SO_REUSEADDR failed: %d (%s)", errno, strerror(errno));</comment>
    taosCloseSocket(&amp;pSocket);
    return NULL;
  }

  if (taosSetSockOpt(pSocket, SOL_SOCKET, SO_SNDBUF, (void *)&amp;bufSize, sizeof(bufSize)) != 0) {
    <comment type="line">// printf("failed to set the send buffer size for TCP socket\n");</comment>
    taosCloseSocket(&amp;pSocket);
    return NULL;
  }

  if (taosSetSockOpt(pSocket, SOL_SOCKET, SO_RCVBUF, (void *)&amp;bufSize, sizeof(bufSize)) != 0) {
    <comment type="line">// printf("failed to set the receive buffer size for TCP socket\n");</comment>
    taosCloseSocket(&amp;pSocket);
    return NULL;
  }

  if (clientIp != 0) {
    memset((char *)&amp;clientAddr, 0, sizeof(clientAddr));
    clientAddr.sin_family = AF_INET;
    clientAddr.sin_addr.s_addr = clientIp;
    clientAddr.sin_port = 0;

    <comment type="block">/* bind socket to client address */</comment>
    if (bind(pSocket-&gt;fd, (struct sockaddr *)&amp;clientAddr, sizeof(clientAddr)) &lt; 0) {
      <comment type="line">// printf("bind tcp client socket failed, client(0x%x:0), dest(0x%x:%d), reason:(%s)", clientIp, destIp, destPort,</comment>
      <comment type="line">//        strerror(errno));</comment>
      taosCloseSocket(&amp;pSocket);
      return NULL;
    }
  }

  memset((char *)&amp;serverAddr, 0, sizeof(serverAddr));
  serverAddr.sin_family = AF_INET;
  serverAddr.sin_addr.s_addr = destIp;
  serverAddr.sin_port = (uint16_t)htons((uint16_t)destPort);

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_TD_LINUX</name></cpp:ifdef>
  taosSetNonblocking(pSocket, 1);
  ret = connect(pSocket-&gt;fd, (struct sockaddr *)&amp;serverAddr, sizeof(serverAddr));
  if (ret == -1) {
    if (errno == EHOSTUNREACH) {
      <comment type="line">// printf("failed to connect socket, ip:0x%x, port:%hu(%s)", destIp, destPort, strerror(errno));</comment>
      taosCloseSocket(&amp;pSocket);
      return -1;
    } else if (errno == EINPROGRESS || errno == EAGAIN || errno == EWOULDBLOCK) {
      struct pollfd wfd[1];

      wfd[0].fd = pSocket-&gt;fd;
      wfd[0].events = POLLOUT;

      int res = poll(wfd, 1, TCP_CONN_TIMEOUT);
      if (res == -1 || res == 0) {
        <comment type="line">// printf("failed to connect socket, ip:0x%x, port:%hu(poll error/conn timeout)", destIp, destPort);</comment>
        taosCloseSocket(&amp;pSocket);  <comment type="line">//</comment>
        return -1;
      }
      int optVal = -1, optLen = sizeof(int);
      if ((0 != taosGetSockOpt(pSocket, SOL_SOCKET, SO_ERROR, &amp;optVal, &amp;optLen)) || (optVal != 0)) {
        <comment type="line">// printf("failed to connect socket, ip:0x%x, port:%hu(connect host error)", destIp, destPort);</comment>
        taosCloseSocket(&amp;pSocket);  <comment type="line">//</comment>
        return -1;
      }
      ret = 0;
    } else {  <comment type="line">// Other error</comment>
      <comment type="line">// printf("failed to connect socket, ip:0x%x, port:%hu(target host cannot be reached)", destIp, destPort);</comment>
      taosCloseSocket(&amp;pSocket);  <comment type="line">//</comment>
      return -1;
    }
  }
  taosSetNonblocking(pSocket, 0);

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  ret = connect(pSocket-&gt;fd, (struct sockaddr *)&amp;serverAddr, sizeof(serverAddr));
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  if (ret != 0) {
    <comment type="line">// printf("failed to connect socket, ip:0x%x, port:%hu(%s)", destIp, destPort, strerror(errno));</comment>
    taosCloseSocket(&amp;pSocket);
    return NULL;
  } else {
    if (taosKeepTcpAlive(pSocket) == -1) {
      return NULL;
    }
  }

  return pSocket;
}

int32_t taosKeepTcpAlive(TdSocketPtr pSocket) {
  if (pSocket == NULL || pSocket-&gt;fd &lt; 0) {
    return -1;
  }
  int32_t alive = 1;
  if (taosSetSockOpt(pSocket, SOL_SOCKET, SO_KEEPALIVE, (void *)&amp;alive, sizeof(alive)) &lt; 0) {
    <comment type="line">// printf("fd:%d setsockopt SO_KEEPALIVE failed: %d (%s)", sockFd, errno, strerror(errno));</comment>
    taosCloseSocket(&amp;pSocket);
    return -1;
  }

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__APPLE__</name></cpp:ifndef>
  <comment type="line">// all fails on macosx</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TCP_KEEPCNT</name></cpp:ifdef>
  int32_t probes = 3;
  if (taosSetSockOpt(pSocket, SOL_TCP, TCP_KEEPCNT, (void *)&amp;probes, sizeof(probes)) &lt; 0) {
    <comment type="line">// printf("fd:%d setsockopt SO_KEEPCNT failed: %d (%s)", sockFd, errno, strerror(errno));</comment>
    taosCloseSocket(&amp;pSocket);
    return -1;
  }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TCP_KEEPIDLE</name></cpp:ifdef>
  int32_t alivetime = 10;
  if (taosSetSockOpt(pSocket, SOL_TCP, TCP_KEEPIDLE, (void *)&amp;alivetime, sizeof(alivetime)) &lt; 0) {
    <comment type="line">// printf("fd:%d setsockopt SO_KEEPIDLE failed: %d (%s)", sockFd, errno, strerror(errno));</comment>
    taosCloseSocket(&amp;pSocket);
    return -1;
  }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TCP_KEEPINTVL</name></cpp:ifdef>
  int32_t interval = 3;
  if (taosSetSockOpt(pSocket, SOL_TCP, TCP_KEEPINTVL, (void *)&amp;interval, sizeof(interval)) &lt; 0) {
    <comment type="line">// printf("fd:%d setsockopt SO_KEEPINTVL failed: %d (%s)", sockFd, errno, strerror(errno));</comment>
    taosCloseSocket(&amp;pSocket);
    return -1;
  }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// __APPLE__</comment>

  int32_t nodelay = 1;
  if (taosSetSockOpt(pSocket, IPPROTO_TCP, TCP_NODELAY, (void *)&amp;nodelay, sizeof(nodelay)) &lt; 0) {
    <comment type="line">// printf("fd:%d setsockopt TCP_NODELAY failed %d (%s)", sockFd, errno, strerror(errno));</comment>
    taosCloseSocket(&amp;pSocket);
    return -1;
  }

  struct linger linger = {0};
  linger.l_onoff = 1;
  linger.l_linger = 3;
  if (taosSetSockOpt(pSocket, SOL_SOCKET, SO_LINGER, (void *)&amp;linger, sizeof(linger)) &lt; 0) {
    <comment type="line">// printf("setsockopt SO_LINGER failed: %d (%s)", errno, strerror(errno));</comment>
    taosCloseSocket(&amp;pSocket);
    return -1;
  }

  return 0;
}

int taosGetLocalIp(const char *eth, char *ip) {
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="line">// DO NOTHAING</comment>
  assert(0);
  return 0;
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  int                fd;
  struct ifreq       ifr;
  struct sockaddr_in sin;

  fd = socket(AF_INET, SOCK_DGRAM, 0);
  if (-1 == fd) {
    return -1;
  }
  strncpy(ifr.ifr_name, eth, IFNAMSIZ);
  ifr.ifr_name[IFNAMSIZ - 1] = 0;

  if (ioctl(fd, SIOCGIFADDR, &amp;ifr) &lt; 0) {
    taosCloseSocketNoCheck1(fd);
    return -1;
  }
  memcpy(&amp;sin, &amp;ifr.ifr_addr, sizeof(sin));
  taosInetNtoa(sin.sin_addr, ip, 64);
  taosCloseSocketNoCheck1(fd);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  return 0;
}
int taosValidIp(uint32_t ip) {
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="line">// DO NOTHAING</comment>
  assert(0);
  return 0;
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  int ret = -1;
  int fd;

  struct ifconf ifconf;

  char buf[512] = {0};
  ifconf.ifc_len = 512;
  ifconf.ifc_buf = buf;

  if ((fd = socket(AF_INET, SOCK_DGRAM, 0)) &lt; 0) {
    return -1;
  }

  ioctl(fd, SIOCGIFCONF, &amp;ifconf);
  struct ifreq *ifreq = (struct ifreq *)ifconf.ifc_buf;
  for (int i = (ifconf.ifc_len / sizeof(struct ifreq)); i &gt; 0; i--) {
    char ip_str[64] = {0};
    if (ifreq-&gt;ifr_flags == AF_INET) {
      ret = taosGetLocalIp(ifreq-&gt;ifr_name, ip_str);
      if (ret != 0) {
        break;
      }
      ret = -1;
      if (ip == (uint32_t)taosInetAddr(ip_str)) {
        ret = 0;
        break;
      }
      ifreq++;
    }
  }
  taosCloseSocketNoCheck1(fd);
  return ret;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  return 0;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// endif 0</comment>

<function><type><name>bool</name></type> <name>taosValidIpAndPort</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>ip</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>port</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>serverAdd</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SocketFd</name></type>           <name>fd</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>            <name>reuse</name></decl>;</decl_stmt>

  <comment type="line">// printf("open tcp server socket:0x%x:%hu", ip, port);</comment>

  <expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>serverAdd</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>serverAdd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>serverAdd</name><operator>.</operator><name>sin_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <expr_stmt><expr><name><name>serverAdd</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <name>INADDR_ANY</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><name><name>serverAdd</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <name>ip</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><name><name>serverAdd</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><call><name>htons</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">// printf("failed to open TCP socket: %d (%s)", errno, strerror(errno));</comment>
    <expr_stmt><expr><call><name>taosCloseSocketNoCheck1</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>TdSocketPtr</name></type> <name>pSocket</name> <init>= <expr><operator>(</operator><name>TdSocketPtr</name><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TdSocket</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pSocket</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosCloseSocketNoCheck1</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pSocket</name><operator>-&gt;</operator><name>refId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSocket</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>

  <comment type="block">/* set REUSEADDR option, so the portnumber can be re-used */</comment>
  <expr_stmt><expr><name>reuse</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taosSetSockOpt</name><argument_list>(<argument><expr><name>pSocket</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_REUSEADDR</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>reuse</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>reuse</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">// printf("setsockopt SO_REUSEADDR failed: %d (%s)", errno, strerror(errno));</comment>
    <expr_stmt><expr><call><name>taosCloseSocket</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pSocket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* bind socket to server address */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>bind</name><argument_list>(<argument><expr><name><name>pSocket</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>serverAdd</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>serverAdd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">// printf("bind tcp server socket failed, 0x%x:%hu(%s)", ip, port, strerror(errno));</comment>
    <expr_stmt><expr><call><name>taosCloseSocket</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pSocket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosCloseSocket</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pSocket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
  <comment type="line">// return 0 == taosValidIp(ip) ? true : false;</comment>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
TdSocketServerPtr taosOpenTcpServerSocket(uint32_t ip, uint16_t port) {
  struct sockaddr_in serverAdd;
  SocketFd           fd;
  int32_t            reuse;

  <comment type="line">// printf("open tcp server socket:0x%x:%hu", ip, port);</comment>

  bzero((char *)&amp;serverAdd, sizeof(serverAdd));
  serverAdd.sin_family = AF_INET;
  serverAdd.sin_addr.s_addr = ip;
  serverAdd.sin_port = (uint16_t)htons(port);

  if ((fd = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)) &lt;= 2) {
    <comment type="line">// printf("failed to open TCP socket: %d (%s)", errno, strerror(errno));</comment>
    taosCloseSocketNoCheck1(fd);
    return NULL;
  }

  TdSocketPtr pSocket = (TdSocketPtr)taosMemoryMalloc(sizeof(TdSocket));
  if (pSocket == NULL) {
    taosCloseSocketNoCheck1(fd);
    return NULL;
  }
  pSocket-&gt;refId = 0;
  pSocket-&gt;fd = fd;

  <comment type="block">/* set REUSEADDR option, so the portnumber can be re-used */</comment>
  reuse = 1;
  if (taosSetSockOpt(pSocket, SOL_SOCKET, SO_REUSEADDR, (void *)&amp;reuse, sizeof(reuse)) &lt; 0) {
    <comment type="line">// printf("setsockopt SO_REUSEADDR failed: %d (%s)", errno, strerror(errno));</comment>
    taosCloseSocket(&amp;pSocket);
    return NULL;
  }

  <comment type="block">/* bind socket to server address */</comment>
  if (bind(pSocket-&gt;fd, (struct sockaddr *)&amp;serverAdd, sizeof(serverAdd)) &lt; 0) {
    <comment type="line">// printf("bind tcp server socket failed, 0x%x:%hu(%s)", ip, port, strerror(errno));</comment>
    taosCloseSocket(&amp;pSocket);
    return NULL;
  }

  if (taosKeepTcpAlive(pSocket) &lt; 0) {
    <comment type="line">// printf("failed to set tcp server keep-alive option, 0x%x:%hu(%s)", ip, port, strerror(errno));</comment>
    return NULL;
  }

  if (listen(pSocket-&gt;fd, 1024) &lt; 0) {
    <comment type="line">// printf("listen tcp server socket failed, 0x%x:%hu(%s)", ip, port, strerror(errno));</comment>
    taosCloseSocket(&amp;pSocket);
    return NULL;
  }

  return (TdSocketServerPtr)pSocket;
}

TdSocketPtr taosAcceptTcpConnectSocket(TdSocketServerPtr pServerSocket, struct sockaddr *destAddr, int *addrLen) {
  if (pServerSocket == NULL || pServerSocket-&gt;fd &lt; 0) {
    return NULL;
  }
  SocketFd fd = accept(pServerSocket-&gt;fd, destAddr, addrLen);
  if (fd == -1) {
    <comment type="line">// tError("TCP accept failure(%s)", strerror(errno));</comment>
    return NULL;
  }

  TdSocketPtr pSocket = (TdSocketPtr)taosMemoryMalloc(sizeof(TdSocket));
  if (pSocket == NULL) {
    taosCloseSocketNoCheck1(fd);
    return NULL;
  }
  pSocket-&gt;fd = fd;
  pSocket-&gt;refId = 0;
  return pSocket;
}
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPY_SIZE</name></cpp:macro> <cpp:value>32768</cpp:value></cpp:define>
<comment type="line">// sendfile shall be used</comment>

int64_t taosCopyFds(TdSocketPtr pSrcSocket, TdSocketPtr pDestSocket, int64_t len) {
  if (pSrcSocket == NULL || pSrcSocket-&gt;fd &lt; 0 || pDestSocket == NULL || pDestSocket-&gt;fd &lt; 0) {
    return -1;
  }
  int64_t leftLen;
  int64_t readLen, writeLen;
  char    temp[COPY_SIZE];

  leftLen = len;

  while (leftLen &gt; 0) {
    if (leftLen &lt; COPY_SIZE)
      readLen = leftLen;
    else
      readLen = COPY_SIZE;  <comment type="line">// 4K</comment>

    int64_t retLen = taosReadMsg(pSrcSocket, temp, (int32_t)readLen);
    if (readLen != retLen) {
      <comment type="line">// printf("read error, readLen:%" PRId64 " retLen:%" PRId64 " len:%" PRId64 " leftLen:%" PRId64 ", reason:%s",</comment>
      <comment type="line">//        readLen, retLen, len, leftLen, strerror(errno));</comment>
      return -1;
    }

    writeLen = taosWriteMsg(pDestSocket, temp, (int32_t)readLen);

    if (readLen != writeLen) {
      <comment type="line">// printf("copy error, readLen:%" PRId64 " writeLen:%" PRId64 " len:%" PRId64 " leftLen:%" PRId64 ", reason:%s",</comment>
      <comment type="line">//        readLen, writeLen, len, leftLen, strerror(errno));</comment>
      return -1;
    }

    leftLen -= readLen;
  }

  return len;
}

<comment type="line">// Function converting an IP address string to an uint32_t.</comment>
uint32_t ip2uint(const char *const ip_addr) {
  char ip_addr_cpy[20];
  char ip[5];

  tstrncpy(ip_addr_cpy, ip_addr, sizeof(ip_addr_cpy));

  char *s_start, *s_end;
  s_start = ip_addr_cpy;
  s_end = ip_addr_cpy;

  int32_t k;

  for (k = 0; *s_start != '\0'; s_start = s_end) {
    for (s_end = s_start; *s_end != '.' &amp;&amp; *s_end != '\0'; s_end++) {
    }
    if (*s_end == '.') {
      *s_end = '\0';
      s_end++;
    }
    ip[k++] = (char)atoi(s_start);
  }

  ip[k] = '\0';

  return *((uint32_t *)ip);
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// endif 0</comment>

<function><type><name>void</name></type> <name>taosBlockSIGPIPE</name><parameter_list>()</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <comment type="line">// assert(0);</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>sigset_t</name></type> <name>signal_mask</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sigemptyset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>signal_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sigaddset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>signal_mask</name></expr></argument>, <argument><expr><name>SIGPIPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>rc</name> <init>= <expr><call><name>pthread_sigmask</name><argument_list>(<argument><expr><name>SIG_BLOCK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>signal_mask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">// printf("failed to block SIGPIPE");</comment>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>taosGetIpv4FromFqdn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fqdn</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <comment type="line">// Initialize Winsock</comment>
  <decl_stmt><decl><type><name>WSADATA</name></type> <name>wsaData</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>     <name>iResult</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>iResult</name> <operator>=</operator> <call><name>WSAStartup</name><argument_list>(<argument><expr><call><name>MAKEWORD</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>wsaData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>iResult</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">// printf("WSAStartup failed: %d\n", iResult);</comment>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hints</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>getaddrinfo</name><argument_list>(<argument><expr><name>fqdn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr</name></name>    <modifier>*</modifier></type><name>sa</name> <init>= <expr><name><name>result</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>si</name> <init>= <expr><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><name>sa</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type>      <name>ia</name> <init>= <expr><name><name>si</name><operator>-&gt;</operator><name>sin_addr</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type>            <name>ip</name> <init>= <expr><name><name>ia</name><operator>.</operator><name>s_addr</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ip</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>EAI_SYSTEM</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>EAI_SYSTEM</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// printf("failed to get the ip address, fqdn:%s, errno:%d, since:%s", fqdn, errno, strerror(errno));</comment>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="line">// printf("failed to get the ip address, fqdn:%s, ret:%d, since:%s", fqdn, ret, gai_strerror(ret));</comment>
    </block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="line">// printf("failed to get the ip address, fqdn:%s, ret:%d, since:%s", fqdn, ret, gai_strerror(ret));</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr><literal type="number">0xFFFFFFFF</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosGetFqdn</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>fqdn</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <comment type="line">// Initialize Winsock</comment>
  <decl_stmt><decl><type><name>WSADATA</name></type> <name>wsaData</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>     <name>iResult</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>iResult</name> <operator>=</operator> <call><name>WSAStartup</name><argument_list>(<argument><expr><call><name>MAKEWORD</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>wsaData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>iResult</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">// printf("WSAStartup failed: %d\n", iResult);</comment>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name>char</name></type> <name><name>hostname</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>hostname</name><index>[<expr><literal type="number">1023</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>gethostname</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><literal type="number">1023</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to get hostname, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><call><name>WSAGetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to get hostname, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type>  <name>hints</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__APPLE__</name></cpp:ifdef>
  <comment type="line">// on macosx, hostname -f has the form of xxx.local</comment>
  <comment type="line">// which will block getaddrinfo for a few seconds if AI_CANONNAME is set</comment>
  <comment type="line">// thus, we choose AF_INET (ipv4 for the moment) to make getaddrinfo return</comment>
  <comment type="line">// immediately</comment>
  <expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>   <comment type="line">// __APPLE__</comment>
  <expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_flags</name></name> <operator>=</operator> <name>AI_CANONNAME</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// __APPLE__</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>getaddrinfo</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"failed to get fqdn, code:%d, reason:%s\n"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><call><name>gai_strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__APPLE__</name></cpp:ifdef>
  <comment type="line">// refer to comments above</comment>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>fqdn</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>   <comment type="line">// __APPLE__</comment>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>fqdn</name></expr></argument>, <argument><expr><name><name>result</name><operator>-&gt;</operator><name>ai_canonname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// __APPLE__</comment>
  <expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tinet_ntoa</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ipstr</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ip</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>ipstr</name></expr></argument>, <argument><expr><literal type="string">"%d.%d.%d.%d"</literal></expr></argument>, <argument><expr><name>ip</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></argument>, <argument><expr><operator>(</operator><name>ip</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></argument>, <argument><expr><operator>(</operator><name>ip</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></argument>, <argument><expr><name>ip</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosIgnSIGPIPE</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>taosSetMaskSIGPIPE</name><parameter_list>()</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <comment type="line">// assert(0);</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>sigset_t</name></type> <name>signal_mask</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sigemptyset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>signal_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sigaddset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>signal_mask</name></expr></argument>, <argument><expr><name>SIGPIPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>rc</name> <init>= <expr><call><name>pthread_sigmask</name><argument_list>(<argument><expr><name>SIG_SETMASK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>signal_mask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">// printf("failed to setmask SIGPIPE");</comment>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
int32_t taosGetSocketName(TdSocketPtr pSocket, struct sockaddr *destAddr, int *addrLen) {
  if (pSocket == NULL || pSocket-&gt;fd &lt; 0) {
    return -1;
  }
  return getsockname(pSocket-&gt;fd, destAddr, addrLen);
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// endif 0</comment>

<comment type="block">/*
 * Set TCP connection timeout per-socket level.
 * ref [https://github.com/libuv/help/issues/54]
 */</comment>
<function><type><name>int32_t</name></type> <name>taosCreateSocketWithTimeout</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>timeout</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>SOCKET</name></type> <name>fd</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>int</name></type>      <name>fd</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>PF_INET</name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>INVALID_SOCKET</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>, <argument><expr><name>TCP_MAXRT</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>timeout</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>timeout</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosCloseSocketNoCheck1</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_DARWIN_64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>conn_timeout_ms</name> <init>= <expr><name>timeout</name> <operator>*</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>, <argument><expr><name>TCP_CONNECTIONTIMEOUT</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>conn_timeout_ms</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>conn_timeout_ms</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosCloseSocketNoCheck1</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>  <comment type="line">// Linux like systems</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>conn_timeout_ms</name> <init>= <expr><name>timeout</name> <operator>*</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>, <argument><expr><name>TCP_USER_TIMEOUT</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>conn_timeout_ms</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>conn_timeout_ms</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosCloseSocketNoCheck1</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>fd</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosWinSocketInit</name><parameter_list>()</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name>flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>flag</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>WORD</name></type>    <name>wVersionRequested</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>WSADATA</name></type> <name>wsaData</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>wVersionRequested</name> <operator>=</operator> <call><name>MAKEWORD</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>WSAStartup</name><argument_list>(<argument><expr><name>wVersionRequested</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wsaData</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>taosHton64</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WINDOWS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>DARWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <return>return <expr><operator>(</operator><operator>(</operator><name>val</name> <operator>&amp;</operator> <literal type="number">0x00000000000000ff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">7</literal> <operator>*</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>val</name> <operator>&amp;</operator> <literal type="number">0x000000000000ff00</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator>
         <operator>(</operator><operator>(</operator><name>val</name> <operator>&amp;</operator> <literal type="number">0x0000000000ff0000</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>val</name> <operator>&amp;</operator> <literal type="number">0x00000000ff000000</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator>
         <operator>(</operator><operator>(</operator><name>val</name> <operator>&amp;</operator> <literal type="number">0x000000ff00000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>val</name> <operator>&amp;</operator> <literal type="number">0x0000ff0000000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator>
         <operator>(</operator><operator>(</operator><name>val</name> <operator>&amp;</operator> <literal type="number">0x00ff000000000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>val</name> <operator>&amp;</operator> <literal type="number">0xff00000000000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <if_stmt><if>if <condition>(<expr><name>__BYTE_ORDER</name> <operator>==</operator> <name>__LITTLE_ENDIAN</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>htonl</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>val</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>htonl</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>__BYTE_ORDER</name> <operator>==</operator> <name>__BIG_ENDIAN</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>val</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>taosNtoh64</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WINDOWS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>DARWIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <return>return <expr><call><name>taosHton64</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <if_stmt><if>if <condition>(<expr><name>__BYTE_ORDER</name> <operator>==</operator> <name>__LITTLE_ENDIAN</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>htonl</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>val</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>htonl</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>__BYTE_ORDER</name> <operator>==</operator> <name>__BIG_ENDIAN</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>val</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
</unit>
