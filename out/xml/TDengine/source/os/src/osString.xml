<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/os/src/osString.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLOW_FORBID_FUNC</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os.h"</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>DISALLOW_NCHAR_WITHOUT_ICONV</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iconv.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>wcwidth</name><parameter_list>(<parameter><decl><type><name>wchar_t</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>wcswidth</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
<function><type><name>char</name> <modifier>*</modifier></type><name>strsep</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>stringp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>delim</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>spanp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>c</name></decl>, <decl><type ref="prev"/><name>sc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>tok</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>s</name> <operator>=</operator> <operator>*</operator><name>stringp</name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
  <for>for <control>(<init><expr><name>tok</name> <operator>=</operator> <name>s</name></expr>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
    <expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>spanp</name> <operator>=</operator> <name>delim</name></expr>;</expr_stmt>
    <do>do <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>sc</name> <operator>=</operator> <operator>*</operator><name>spanp</name><operator>++</operator><operator>)</operator> <operator>==</operator> <name>c</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><name>s</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
          <expr_stmt><expr><name><name>s</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <expr_stmt><expr><operator>*</operator><name>stringp</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
        <return>return <expr><operator>(</operator><name>tok</name><operator>)</operator></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block> while <condition>(<expr><name>sc</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>
  </block_content>}</block></for>
  <comment type="block">/* NOTREACHED */</comment>
</block_content>}</block></function>
<comment type="block">/* Duplicate a string, up to at most size characters */</comment>
<function><type><name>char</name> <modifier>*</modifier></type><name>strndup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>l</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>  <modifier>*</modifier></type><name>s2</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>l</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>s2</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>s2</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s2</name><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>s2</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* Copy no more than N characters of SRC to DEST, returning the address of
   the terminating '\0' in DEST, if any, or else DEST + N.  */</comment>
<function><type><name>char</name> <modifier>*</modifier></type><name>stpncpy</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><call><name>strnlen</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>dest</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>dest</name></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><call><name>memset</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><name>n</name> <operator>-</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int64_t</name></type> <name>taosStr2int64</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>endptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>strtoll</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endptr</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tasoUcs4Compare</name><parameter_list>(<parameter><decl><type><name>TdUcs4</name> <modifier>*</modifier></type><name>f1_ucs4</name></decl></parameter>, <parameter><decl><type><name>TdUcs4</name> <modifier>*</modifier></type><name>f2_ucs4</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>bytes</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TdUcs4</name></expr></argument>)</argument_list></sizeof></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>f1</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>f1_ucs4</name> <operator>+</operator> <name>i</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>f2</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>f2_ucs4</name> <operator>+</operator> <name>i</name><operator>)</operator></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f1</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>f2</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>f1</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>f2</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>f1</name> <operator>-</operator> <name>f2</name></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>f1</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>f2</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>f1</name> <operator>!=</operator> <name>f2</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>f1</name> <operator>-</operator> <name>f2</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  int32_t ucs4_max_len = bytes + 4;
  char *f1_mbs = taosMemoryCalloc(bytes, 1);
  char *f2_mbs = taosMemoryCalloc(bytes, 1);
  if (taosUcs4ToMbs(f1_ucs4, ucs4_max_len, f1_mbs) &lt; 0) {
    return -1;
  }
  if (taosUcs4ToMbs(f2_ucs4, ucs4_max_len, f2_mbs) &lt; 0) {
    return -1;
  }
  int32_t ret = strcmp(f1_mbs, f2_mbs);
  taosMemoryFree(f1_mbs);
  taosMemoryFree(f2_mbs);
  return ret;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>TdUcs4</name> <modifier>*</modifier></type><name>tasoUcs4Copy</name><parameter_list>(<parameter><decl><type><name>TdUcs4</name> <modifier>*</modifier></type><name>target_ucs4</name></decl></parameter>, <parameter><decl><type><name>TdUcs4</name> <modifier>*</modifier></type><name>source_ucs4</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len_ucs4</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>taosMemorySize</name><argument_list>(<argument><expr><name>target_ucs4</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>len_ucs4</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TdUcs4</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>memcpy</name><argument_list>(<argument><expr><name>target_ucs4</name></expr></argument>, <argument><expr><name>source_ucs4</name></expr></argument>, <argument><expr><name>len_ucs4</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TdUcs4</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosUcs4ToMbs</name><parameter_list>(<parameter><decl><type><name>TdUcs4</name> <modifier>*</modifier></type><name>ucs4</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>ucs4_max_len</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>mbs</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DISALLOW_NCHAR_WITHOUT_ICONV</name></cpp:ifdef>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Nchar cannot be read and written without iconv, please install iconv library and recompile TDengine.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>iconv_t</name></type> <name>cd</name> <init>= <expr><call><name>iconv_open</name><argument_list>(<argument><expr><name>tsCharset</name></expr></argument>, <argument><expr><name>DEFAULT_UNICODE_ENCODEC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>  <name>ucs4_input_len</name> <init>= <expr><name>ucs4_max_len</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>  <name>outLen</name> <init>= <expr><name>ucs4_max_len</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>iconv</name><argument_list>(<argument><expr><name>cd</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ucs4</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ucs4_input_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mbs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outLen</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iconv_close</name><argument_list>(<argument><expr><name>cd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>iconv_close</name><argument_list>(<argument><expr><name>cd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>ucs4_max_len</name> <operator>-</operator> <name>outLen</name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>iconv_t</name></type> <name>conv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type>  <name>inUse</name></decl>;</decl_stmt>
}</block></struct></type> <name>SConv</name>;</typedef>

<decl_stmt><decl><type><name>SConv</name>  <modifier>*</modifier></type><name>gConv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>convUsed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>gConvMaxNum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int32_t</name></type> <name>taosConvInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>gConvMaxNum</name> <operator>=</operator> <literal type="number">512</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>gConv</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>gConvMaxNum</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SConv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>gConvMaxNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>gConv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>conv</name> <operator>=</operator> <call><name>iconv_open</name><argument_list>(<argument><expr><name>DEFAULT_UNICODE_ENCODEC</name></expr></argument>, <argument><expr><name>tsCharset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>iconv_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <name><name>gConv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>conv</name> <operator>||</operator> <operator>(</operator><name>iconv_t</name><operator>)</operator><literal type="number">0</literal> <operator>==</operator> <name><name>gConv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>conv</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosConvDestroy</name><parameter_list>()</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>gConvMaxNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>iconv_close</name><argument_list>(<argument><expr><name><name>gConv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>conv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>gConv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>gConvMaxNum</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>iconv_t</name></type> <name>taosAcquireConv</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>gConvMaxNum</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>idx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <return>return <expr><call><name>iconv_open</name><argument_list>(<argument><expr><name>DEFAULT_UNICODE_ENCODEC</name></expr></argument>, <argument><expr><name>tsCharset</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>used</name> <init>= <expr><call><name>atomic_add_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>convUsed</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>used</name> <operator>&gt;</operator> <name>gConvMaxNum</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>used</name> <operator>=</operator> <call><name>atomic_sub_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>convUsed</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sched_yield</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <break>break;</break>
  </block_content>}</block></while>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>startId</name> <init>= <expr><call><name>taosGetSelfPthreadId</name><argument_list>()</argument_list></call> <operator>%</operator> <name>gConvMaxNum</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>gConv</name><index>[<expr><name>startId</name></expr>]</index></name><operator>.</operator><name>inUse</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>startId</name> <operator>=</operator> <operator>(</operator><name>startId</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>gConvMaxNum</name></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int8_t</name></type> <name>old</name> <init>= <expr><call><name>atomic_val_compare_exchange_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gConv</name><index>[<expr><name>startId</name></expr>]</index></name><operator>.</operator><name>inUse</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>old</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><operator>*</operator><name>idx</name> <operator>=</operator> <name>startId</name></expr>;</expr_stmt>
  <return>return <expr><name><name>gConv</name><index>[<expr><name>startId</name></expr>]</index></name><operator>.</operator><name>conv</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosReleaseConv</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>iconv_t</name></type> <name>conv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>iconv_close</name><argument_list>(<argument><expr><name>conv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gConv</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>inUse</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>atomic_sub_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>convUsed</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>taosMbsToUcs4</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mbs</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>mbsLength</name></decl></parameter>, <parameter><decl><type><name>TdUcs4</name> <modifier>*</modifier></type><name>ucs4</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>ucs4_max_len</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DISALLOW_NCHAR_WITHOUT_ICONV</name></cpp:ifdef>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Nchar cannot be read and written without iconv, please install iconv library and recompile TDengine.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ucs4</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ucs4_max_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>idx</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>iconv_t</name></type> <name>conv</name> <init>= <expr><call><name>taosAcquireConv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>  <name>ucs4_input_len</name> <init>= <expr><name>mbsLength</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>  <name>outLeft</name> <init>= <expr><name>ucs4_max_len</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>iconv</name><argument_list>(<argument><expr><name>conv</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>mbs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ucs4_input_len</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ucs4</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outLeft</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosReleaseConv</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>conv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosReleaseConv</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>conv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>ucs4_max_len</name> <operator>-</operator> <name>outLeft</name><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>true</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>taosValidateEncodec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>encodec</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DISALLOW_NCHAR_WITHOUT_ICONV</name></cpp:ifdef>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Nchar cannot be read and written without iconv, please install iconv library and recompile TDengine.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>iconv_t</name></type> <name>cd</name> <init>= <expr><call><name>iconv_open</name><argument_list>(<argument><expr><name>encodec</name></expr></argument>, <argument><expr><name>DEFAULT_UNICODE_ENCODEC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>cd</name> <operator>==</operator> <operator>(</operator><name>iconv_t</name><operator>)</operator><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>iconv_close</name><argument_list>(<argument><expr><name>cd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosUcs4len</name><parameter_list>(<parameter><decl><type><name>TdUcs4</name> <modifier>*</modifier></type><name>ucs4</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TdUcs4</name> <modifier>*</modifier></type><name>wstr</name> <init>= <expr><operator>(</operator><name>TdUcs4</name> <operator>*</operator><operator>)</operator><name>ucs4</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>wstr</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <operator>*</operator><name>wstr</name><operator>++</operator></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>

  <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// dst buffer size should be at least 2*len + 1</comment>
<function><type><name>int32_t</name></type> <name>taosHexEncode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dst</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosHexDecode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dst</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint8_t</name></type> <name>hn</name></decl>, <decl><type ref="prev"/><name>ln</name></decl>, <decl><type ref="prev"/><name>out</name></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name> <operator>*</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr><operator>,</operator> <expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>hn</name> <operator>=</operator> <ternary><condition><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="char">'9'</literal></expr> ?</condition><then> <expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'a'</literal> <operator>+</operator> <literal type="number">10</literal></expr> </then><else>: <expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name>ln</name> <operator>=</operator> <ternary><condition><expr><name><name>src</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="char">'9'</literal></expr> ?</condition><then> <expr><name><name>src</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'a'</literal> <operator>+</operator> <literal type="number">10</literal></expr> </then><else>: <expr><name><name>src</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><name>hn</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <name>ln</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>j</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosWcharWidth</name><parameter_list>(<parameter><decl><type><name>TdWchar</name></type> <name>wchar</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>wcwidth</name><argument_list>(<argument><expr><name>wchar</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosWcharsWidth</name><parameter_list>(<parameter><decl><type><name>TdWchar</name> <modifier>*</modifier></type><name>pWchar</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>wcswidth</name><argument_list>(<argument><expr><name>pWchar</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosMbToWchar</name><parameter_list>(<parameter><decl><type><name>TdWchar</name> <modifier>*</modifier></type><name>pWchar</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pStr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>mbtowc</name><argument_list>(<argument><expr><name>pWchar</name></expr></argument>, <argument><expr><name>pStr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosMbsToWchars</name><parameter_list>(<parameter><decl><type><name>TdWchar</name> <modifier>*</modifier></type><name>pWchars</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pStrs</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>mbstowcs</name><argument_list>(<argument><expr><name>pWchars</name></expr></argument>, <argument><expr><name>pStrs</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosWcharToMb</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pStr</name></decl></parameter>, <parameter><decl><type><name>TdWchar</name></type> <name>wchar</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>wctomb</name><argument_list>(<argument><expr><name>pStr</name></expr></argument>, <argument><expr><name>wchar</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>taosStrCaseStr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pattern</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>pattern</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>str</name></expr>;</return></block_content></block></if></if_stmt>

  <for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>str</name></expr>;</condition> <incr><expr><name>str</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>toupper</name><argument_list>(<argument><expr><operator>*</operator><name>str</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>toupper</name><argument_list>(<argument><expr><operator>*</operator><name>pattern</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init><condition>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pattern</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>str</name></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>toupper</name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>toupper</name><argument_list>(<argument><expr><name><name>pattern</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>taosStr2Int64</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pEnd</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>radix</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>tmp</name> <init>= <expr><call><name>strtoll</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pEnd</name></expr></argument>, <argument><expr><name>radix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DARWIN</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINVAL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TD_CHECK_STR_TO_INT_ERROR</name></cpp:ifdef>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>errno</name> <operator>!=</operator> <name>ERANGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>errno</name> <operator>!=</operator> <name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>tmp</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>taosStr2UInt64</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pEnd</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>radix</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>tmp</name> <init>= <expr><call><name>strtoull</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pEnd</name></expr></argument>, <argument><expr><name>radix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DARWIN</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINVAL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TD_CHECK_STR_TO_INT_ERROR</name></cpp:ifdef>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>errno</name> <operator>!=</operator> <name>ERANGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>errno</name> <operator>!=</operator> <name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>tmp</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosStr2Int32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pEnd</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>radix</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>tmp</name> <init>= <expr><call><name>strtol</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pEnd</name></expr></argument>, <argument><expr><name>radix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DARWIN</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINVAL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TD_CHECK_STR_TO_INT_ERROR</name></cpp:ifdef>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>errno</name> <operator>!=</operator> <name>ERANGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>errno</name> <operator>!=</operator> <name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>tmp</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>taosStr2UInt32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pEnd</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>radix</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp</name> <init>= <expr><call><name>strtol</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pEnd</name></expr></argument>, <argument><expr><name>radix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DARWIN</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINVAL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TD_CHECK_STR_TO_INT_ERROR</name></cpp:ifdef>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>errno</name> <operator>!=</operator> <name>ERANGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>errno</name> <operator>!=</operator> <name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>tmp</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int16_t</name></type> <name>taosStr2Int16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pEnd</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>radix</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>tmp</name> <init>= <expr><call><name>strtol</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pEnd</name></expr></argument>, <argument><expr><name>radix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DARWIN</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINVAL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TD_CHECK_STR_TO_INT_ERROR</name></cpp:ifdef>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>errno</name> <operator>!=</operator> <name>ERANGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>errno</name> <operator>!=</operator> <name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>tmp</name> <operator>&gt;=</operator> <name>SHRT_MIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>tmp</name> <operator>&lt;=</operator> <name>SHRT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><operator>(</operator><name>int16_t</name><operator>)</operator><name>tmp</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint16_t</name></type> <name>taosStr2UInt16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pEnd</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>radix</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp</name> <init>= <expr><call><name>strtoul</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pEnd</name></expr></argument>, <argument><expr><name>radix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DARWIN</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINVAL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TD_CHECK_STR_TO_INT_ERROR</name></cpp:ifdef>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>errno</name> <operator>!=</operator> <name>ERANGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>errno</name> <operator>!=</operator> <name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>tmp</name> <operator>&lt;=</operator> <name>USHRT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><operator>(</operator><name>uint16_t</name><operator>)</operator><name>tmp</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int8_t</name></type> <name>taosStr2Int8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pEnd</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>radix</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>tmp</name> <init>= <expr><call><name>strtol</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pEnd</name></expr></argument>, <argument><expr><name>radix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TD_CHECK_STR_TO_INT_ERROR</name></cpp:ifdef>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>errno</name> <operator>!=</operator> <name>ERANGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>errno</name> <operator>!=</operator> <name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>tmp</name> <operator>&gt;=</operator> <name>SCHAR_MIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>tmp</name> <operator>&lt;=</operator> <name>SCHAR_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>tmp</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint8_t</name></type> <name>taosStr2UInt8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pEnd</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>radix</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp</name> <init>= <expr><call><name>strtoul</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pEnd</name></expr></argument>, <argument><expr><name>radix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DARWIN</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINVAL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TD_CHECK_STR_TO_INT_ERROR</name></cpp:ifdef>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>errno</name> <operator>!=</operator> <name>ERANGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>errno</name> <operator>!=</operator> <name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>tmp</name> <operator>&lt;=</operator> <name>UCHAR_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>tmp</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>double</name></type> <name>taosStr2Double</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pEnd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>double</name></type> <name>tmp</name> <init>= <expr><call><name>strtod</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pEnd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TD_CHECK_STR_TO_INT_ERROR</name></cpp:ifdef>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>errno</name> <operator>!=</operator> <name>ERANGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>errno</name> <operator>!=</operator> <name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>tmp</name> <operator>!=</operator> <name>HUGE_VAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>tmp</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>float</name></type> <name>taosStr2Float</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pEnd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>float</name></type> <name>tmp</name> <init>= <expr><call><name>strtof</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pEnd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TD_CHECK_STR_TO_INT_ERROR</name></cpp:ifdef>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>errno</name> <operator>!=</operator> <name>ERANGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>errno</name> <operator>!=</operator> <name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>tmp</name> <operator>!=</operator> <name>HUGE_VALF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>tmp</name> <operator>!=</operator> <name>NAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>tmp</name></expr>;</return>
</block_content>}</block></function>
</unit>
