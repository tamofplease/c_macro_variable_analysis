<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/os/src/osTime.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLOW_FORBID_FUNC</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_BSD_SOURCE</name></cpp:macro></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DARWIN</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_XOPEN_SOURCE</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_XOPEN_SOURCE</name></cpp:macro> <cpp:value>500</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<comment type="line">//#define TM_YEAR_BASE 1970 //origin</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TM_YEAR_BASE</name></cpp:macro> <cpp:value>1900</cpp:value></cpp:define>  <comment type="line">// slguan</comment>
<comment type="block">/*
 * We do not implement alternate representations. However, we always
 * check whether a given modifier is allowed for a certain conversion.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALT_E</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALT_O</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEGAL_ALT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>                   \
  <cpp:value>{                                    \
    if (alt_format &amp; ~(x)) return (0); \
  }</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>conv_num</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>llim</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ulim</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* The limit also determines the number of valid digits. */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>rulim</name> <init>= <expr><name>ulim</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name><name>buf</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <operator>*</operator><operator>*</operator><name>buf</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

  <do>do <block>{<block_content>
    <expr_stmt><expr><name>result</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>result</name> <operator>+=</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>buf</name><operator>)</operator><operator>++</operator> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>rulim</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
  </block_content>}</block> while <condition>(<expr><operator>(</operator><name>result</name> <operator>*</operator> <literal type="number">10</literal> <operator>&lt;=</operator> <name>ulim</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>rulim</name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>*</operator><name>buf</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>*</operator><name>buf</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition>;</do>

  <if_stmt><if>if <condition>(<expr><name><name>result</name> <argument_list type="generic">&lt; <argument><expr><name>llim</name> <operator>||</operator> <name>result</name></expr></argument> &gt;</argument_list></name> <name>ulim</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>day</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"Sunday"</literal></expr>, <expr><literal type="string">"Monday"</literal></expr>, <expr><literal type="string">"Tuesday"</literal></expr>, <expr><literal type="string">"Wednesday"</literal></expr>, <expr><literal type="string">"Thursday"</literal></expr>, <expr><literal type="string">"Friday"</literal></expr>, <expr><literal type="string">"Saturday"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>abday</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"Sun"</literal></expr>, <expr><literal type="string">"Mon"</literal></expr>, <expr><literal type="string">"Tue"</literal></expr>, <expr><literal type="string">"Wed"</literal></expr>, <expr><literal type="string">"Thu"</literal></expr>, <expr><literal type="string">"Fri"</literal></expr>, <expr><literal type="string">"Sat"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>mon</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"January"</literal></expr>, <expr><literal type="string">"February"</literal></expr>, <expr><literal type="string">"March"</literal></expr>,     <expr><literal type="string">"April"</literal></expr>,   <expr><literal type="string">"May"</literal></expr>,      <expr><literal type="string">"June"</literal></expr>,
                              <expr><literal type="string">"July"</literal></expr>,    <expr><literal type="string">"August"</literal></expr>,   <expr><literal type="string">"September"</literal></expr>, <expr><literal type="string">"October"</literal></expr>, <expr><literal type="string">"November"</literal></expr>, <expr><literal type="string">"December"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>abmon</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"Jan"</literal></expr>, <expr><literal type="string">"Feb"</literal></expr>, <expr><literal type="string">"Mar"</literal></expr>, <expr><literal type="string">"Apr"</literal></expr>, <expr><literal type="string">"May"</literal></expr>, <expr><literal type="string">"Jun"</literal></expr>, <expr><literal type="string">"Jul"</literal></expr>, <expr><literal type="string">"Aug"</literal></expr>, <expr><literal type="string">"Sep"</literal></expr>, <expr><literal type="string">"Oct"</literal></expr>, <expr><literal type="string">"Nov"</literal></expr>, <expr><literal type="string">"Dec"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>am_pm</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"AM"</literal></expr>, <expr><literal type="string">"PM"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>char</name> <modifier>*</modifier></type><name>taosStrpTime</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <decl_stmt><decl><type><name>char</name></type>        <name>c</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>      <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>         <name>alt_format</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>split_year</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>bp</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

  <while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>fmt</name><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
    <comment type="block">/* Clear `alternate' modifier prior to new conversion. */</comment>
    <expr_stmt><expr><name>alt_format</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="block">/* Eat up white-space. */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <while>while <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>bp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>bp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

      <expr_stmt><expr><name>fmt</name><operator>++</operator></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>fmt</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <literal type="char">'%'</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>literal</name>;</goto></block_content></block></if></if_stmt>

  <label><name>again</name>:</label>
    <switch>switch <condition>(<expr><name>c</name> <operator>=</operator> <operator>*</operator><name>fmt</name><operator>++</operator></expr>)</condition> <block>{<block_content>
      <case>case <expr><literal type="char">'%'</literal></expr>:</case> <comment type="block">/* "%%" is converted to "%". */</comment>
      <label><name>literal</name>:</label>
        <if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <operator>*</operator><name>bp</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
        <break>break;</break>

        <comment type="block">/*
         * "Alternative" modifiers. Just set the appropriate flag
         * and start over again.
         */</comment>
      <case>case <expr><literal type="char">'E'</literal></expr>:</case> <comment type="block">/* "%E?" alternative conversion modifier. */</comment>
        <expr_stmt><expr><call><name>LEGAL_ALT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>alt_format</name> <operator>|=</operator> <name>ALT_E</name></expr>;</expr_stmt>
        <goto>goto <name>again</name>;</goto>

      <case>case <expr><literal type="char">'O'</literal></expr>:</case> <comment type="block">/* "%O?" alternative conversion modifier. */</comment>
        <expr_stmt><expr><call><name>LEGAL_ALT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>alt_format</name> <operator>|=</operator> <name>ALT_O</name></expr>;</expr_stmt>
        <goto>goto <name>again</name>;</goto>

        <comment type="block">/*
         * "Complex" conversion rules, implemented through recursion.
         */</comment>
      <case>case <expr><literal type="char">'c'</literal></expr>:</case> <comment type="block">/* Date and time, using the locale's format. */</comment>
        <expr_stmt><expr><call><name>LEGAL_ALT</name><argument_list>(<argument><expr><name>ALT_E</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>bp</name> <operator>=</operator> <call><name>taosStrpTime</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><literal type="string">"%x %X"</literal></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
        <break>break;</break>

      <case>case <expr><literal type="char">'D'</literal></expr>:</case> <comment type="block">/* The date as "%m/%d/%y". */</comment>
        <expr_stmt><expr><call><name>LEGAL_ALT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>bp</name> <operator>=</operator> <call><name>taosStrpTime</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><literal type="string">"%m/%d/%y"</literal></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
        <break>break;</break>

      <case>case <expr><literal type="char">'R'</literal></expr>:</case> <comment type="block">/* The time as "%H:%M". */</comment>
        <expr_stmt><expr><call><name>LEGAL_ALT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>bp</name> <operator>=</operator> <call><name>taosStrpTime</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><literal type="string">"%H:%M"</literal></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
        <break>break;</break>

      <case>case <expr><literal type="char">'r'</literal></expr>:</case> <comment type="block">/* The time in 12-hour clock representation. */</comment>
        <expr_stmt><expr><call><name>LEGAL_ALT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>bp</name> <operator>=</operator> <call><name>taosStrpTime</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><literal type="string">"%I:%M:%S %p"</literal></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
        <break>break;</break>

      <case>case <expr><literal type="char">'T'</literal></expr>:</case> <comment type="block">/* The time as "%H:%M:%S". */</comment>
        <expr_stmt><expr><call><name>LEGAL_ALT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>bp</name> <operator>=</operator> <call><name>taosStrpTime</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><literal type="string">"%H:%M:%S"</literal></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
        <break>break;</break>

      <case>case <expr><literal type="char">'X'</literal></expr>:</case> <comment type="block">/* The time, using the locale's format. */</comment>
        <expr_stmt><expr><call><name>LEGAL_ALT</name><argument_list>(<argument><expr><name>ALT_E</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>bp</name> <operator>=</operator> <call><name>taosStrpTime</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><literal type="string">"%H:%M:%S"</literal></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
        <break>break;</break>

      <case>case <expr><literal type="char">'x'</literal></expr>:</case> <comment type="block">/* The date, using the locale's format. */</comment>
        <expr_stmt><expr><call><name>LEGAL_ALT</name><argument_list>(<argument><expr><name>ALT_E</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>bp</name> <operator>=</operator> <call><name>taosStrpTime</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><literal type="string">"%m/%d/%y"</literal></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
        <break>break;</break>

        <comment type="block">/*
         * "Elementary" conversion rules.
         */</comment>
      <case>case <expr><literal type="char">'A'</literal></expr>:</case> <comment type="block">/* The day of week, using the locale's form. */</comment>
      <case>case <expr><literal type="char">'a'</literal></expr>:</case>
        <expr_stmt><expr><call><name>LEGAL_ALT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
          <comment type="block">/* Full name. */</comment>
          <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>day</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>day</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>bp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

          <comment type="block">/* Abbreviated name. */</comment>
          <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>abday</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>abday</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>bp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
        </block_content>}</block></for>

        <comment type="block">/* Nothing matched. */</comment>
        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_wday</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>bp</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><literal type="char">'B'</literal></expr>:</case> <comment type="block">/* The month, using the locale's form. */</comment>
      <case>case <expr><literal type="char">'b'</literal></expr>:</case>
      <case>case <expr><literal type="char">'h'</literal></expr>:</case>
        <expr_stmt><expr><call><name>LEGAL_ALT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
          <comment type="block">/* Full name. */</comment>
          <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>mon</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>mon</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>bp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

          <comment type="block">/* Abbreviated name. */</comment>
          <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>abmon</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>abmon</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>bp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
        </block_content>}</block></for>

        <comment type="block">/* Nothing matched. */</comment>
        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>bp</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><literal type="char">'C'</literal></expr>:</case> <comment type="block">/* The century number. */</comment>
        <expr_stmt><expr><call><name>LEGAL_ALT</name><argument_list>(<argument><expr><name>ALT_E</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>conv_num</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">99</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>split_year</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>=</operator> <operator>(</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>%</operator> <literal type="number">100</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">100</literal><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>=</operator> <name>i</name> <operator>*</operator> <literal type="number">100</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>split_year</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>

      <case>case <expr><literal type="char">'d'</literal></expr>:</case> <comment type="block">/* The day of month. */</comment>
      <case>case <expr><literal type="char">'e'</literal></expr>:</case>
        <expr_stmt><expr><call><name>LEGAL_ALT</name><argument_list>(<argument><expr><name>ALT_O</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>conv_num</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
        <break>break;</break>

      <case>case <expr><literal type="char">'k'</literal></expr>:</case> <comment type="block">/* The hour (24-hour clock representation). */</comment>
        <expr_stmt><expr><call><name>LEGAL_ALT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* FALLTHROUGH */</comment>
      <case>case <expr><literal type="char">'H'</literal></expr>:</case>
        <expr_stmt><expr><call><name>LEGAL_ALT</name><argument_list>(<argument><expr><name>ALT_O</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>conv_num</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
        <break>break;</break>

      <case>case <expr><literal type="char">'l'</literal></expr>:</case> <comment type="block">/* The hour (12-hour clock representation). */</comment>
        <expr_stmt><expr><call><name>LEGAL_ALT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* FALLTHROUGH */</comment>
      <case>case <expr><literal type="char">'I'</literal></expr>:</case>
        <expr_stmt><expr><call><name>LEGAL_ALT</name><argument_list>(<argument><expr><name>ALT_O</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>conv_num</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>==</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <break>break;</break>

      <case>case <expr><literal type="char">'j'</literal></expr>:</case> <comment type="block">/* The day of year. */</comment>
        <expr_stmt><expr><call><name>LEGAL_ALT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>conv_num</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">366</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_yday</name></name> <operator>=</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><literal type="char">'M'</literal></expr>:</case> <comment type="block">/* The minute. */</comment>
        <expr_stmt><expr><call><name>LEGAL_ALT</name><argument_list>(<argument><expr><name>ALT_O</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>conv_num</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_min</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">59</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
        <break>break;</break>

      <case>case <expr><literal type="char">'m'</literal></expr>:</case> <comment type="block">/* The month. */</comment>
        <expr_stmt><expr><call><name>LEGAL_ALT</name><argument_list>(<argument><expr><name>ALT_O</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>conv_num</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>=</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><literal type="char">'p'</literal></expr>:</case> <comment type="block">/* The locale's equivalent of AM/PM. */</comment>
        <expr_stmt><expr><call><name>LEGAL_ALT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* AM? */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>am_pm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bp</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>&gt;</operator> <literal type="number">11</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

          <expr_stmt><expr><name>bp</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>am_pm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if>
        <comment type="block">/* PM? */</comment>
        <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>am_pm</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bp</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>&gt;</operator> <literal type="number">11</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

          <expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>+=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>bp</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>am_pm</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* Nothing matched. */</comment>
        <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>

      <case>case <expr><literal type="char">'S'</literal></expr>:</case> <comment type="block">/* The seconds. */</comment>
        <expr_stmt><expr><call><name>LEGAL_ALT</name><argument_list>(<argument><expr><name>ALT_O</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>conv_num</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_sec</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">61</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
        <break>break;</break>

      <case>case <expr><literal type="char">'U'</literal></expr>:</case> <comment type="block">/* The week of year, beginning on sunday. */</comment>
      <case>case <expr><literal type="char">'W'</literal></expr>:</case> <comment type="block">/* The week of year, beginning on monday. */</comment>
        <expr_stmt><expr><call><name>LEGAL_ALT</name><argument_list>(<argument><expr><name>ALT_O</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/*
         * XXX This is bogus, as we can not assume any valid
         * information present in the tm structure at this
         * point to calculate a real value, so just check the
         * range for now.
         */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>conv_num</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">53</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
        <break>break;</break>

      <case>case <expr><literal type="char">'w'</literal></expr>:</case> <comment type="block">/* The day of week, beginning on sunday. */</comment>
        <expr_stmt><expr><call><name>LEGAL_ALT</name><argument_list>(<argument><expr><name>ALT_O</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>conv_num</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_wday</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
        <break>break;</break>

      <case>case <expr><literal type="char">'Y'</literal></expr>:</case> <comment type="block">/* The year. */</comment>
        <expr_stmt><expr><call><name>LEGAL_ALT</name><argument_list>(<argument><expr><name>ALT_E</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>conv_num</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">9999</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>=</operator> <name>i</name> <operator>-</operator> <name>TM_YEAR_BASE</name></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><literal type="char">'y'</literal></expr>:</case> <comment type="block">/* The year within 100 years of the epoch. */</comment>
        <expr_stmt><expr><call><name>LEGAL_ALT</name><argument_list>(<argument><expr><name>ALT_E</name> <operator>|</operator> <name>ALT_O</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>conv_num</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">99</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>split_year</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>/</operator> <literal type="number">100</literal><operator>)</operator> <operator>*</operator> <literal type="number">100</literal><operator>)</operator> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>split_year</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;=</operator> <literal type="number">68</literal></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">2000</literal> <operator>-</operator> <name>TM_YEAR_BASE</name></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
          <expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1900</literal> <operator>-</operator> <name>TM_YEAR_BASE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <break>break;</break>

        <comment type="block">/*
         * Miscellaneous conversions.
         */</comment>
      <case>case <expr><literal type="char">'n'</literal></expr>:</case> <comment type="block">/* Any kind of white-space. */</comment>
      <case>case <expr><literal type="char">'t'</literal></expr>:</case>
        <expr_stmt><expr><call><name>LEGAL_ALT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>bp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>bp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
        <break>break;</break>

      <default>default:</default> <comment type="block">/* Unknown/unsupported conversion. */</comment>
        <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
    </block_content>}</block></switch>
  </block_content>}</block></while>

  <comment type="block">/* LINTED functional specification */</comment>
  <return>return <expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>bp</name><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>strptime</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosGetTimeOfDay</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <decl_stmt><decl><type><name>time_t</name></type> <name>t</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>taosGetTimestampSec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SYSTEMTIME</name></type> <name>st</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>GetLocalTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><name>t</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>=</operator> <name><name>st</name><operator>.</operator><name>wMilliseconds</name></name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>gettimeofday</name><argument_list>(<argument><expr><name>tv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>time_t</name></type> <name>taosTime</name><parameter_list>(<parameter><decl><type><name>time_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>time</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>time_t</name></type> <name>taosMktime</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>timep</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type>     <name>tm1</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>LARGE_INTEGER</name></type> <name>t</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FILETIME</name></type>      <name>f</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SYSTEMTIME</name></type>    <name>s</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FILETIME</name></type>      <name>ff</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SYSTEMTIME</name></type>    <name>ss</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>LARGE_INTEGER</name></type> <name>offset</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>time_t</name></type> <name>tt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>localtime_s</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ss</name><operator>.</operator><name>wYear</name></name> <operator>=</operator> <name><name>tm1</name><operator>.</operator><name>tm_year</name></name> <operator>+</operator> <literal type="number">1900</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ss</name><operator>.</operator><name>wMonth</name></name> <operator>=</operator> <name><name>tm1</name><operator>.</operator><name>tm_mon</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ss</name><operator>.</operator><name>wDay</name></name> <operator>=</operator> <name><name>tm1</name><operator>.</operator><name>tm_mday</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ss</name><operator>.</operator><name>wHour</name></name> <operator>=</operator> <name><name>tm1</name><operator>.</operator><name>tm_hour</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ss</name><operator>.</operator><name>wMinute</name></name> <operator>=</operator> <name><name>tm1</name><operator>.</operator><name>tm_min</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ss</name><operator>.</operator><name>wSecond</name></name> <operator>=</operator> <name><name>tm1</name><operator>.</operator><name>tm_sec</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ss</name><operator>.</operator><name>wMilliseconds</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SystemTimeToFileTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ss</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>offset</name><operator>.</operator><name>QuadPart</name></name> <operator>=</operator> <name><name>ff</name><operator>.</operator><name>dwHighDateTime</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>offset</name><operator>.</operator><name>QuadPart</name></name> <operator>&lt;&lt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>offset</name><operator>.</operator><name>QuadPart</name></name> <operator>|=</operator> <name><name>ff</name><operator>.</operator><name>dwLowDateTime</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>s</name><operator>.</operator><name>wYear</name></name> <operator>=</operator> <name><name>timep</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>+</operator> <literal type="number">1900</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>s</name><operator>.</operator><name>wMonth</name></name> <operator>=</operator> <name><name>timep</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>s</name><operator>.</operator><name>wDay</name></name> <operator>=</operator> <name><name>timep</name><operator>-&gt;</operator><name>tm_mday</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>s</name><operator>.</operator><name>wHour</name></name> <operator>=</operator> <name><name>timep</name><operator>-&gt;</operator><name>tm_hour</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>s</name><operator>.</operator><name>wMinute</name></name> <operator>=</operator> <name><name>timep</name><operator>-&gt;</operator><name>tm_min</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>s</name><operator>.</operator><name>wSecond</name></name> <operator>=</operator> <name><name>timep</name><operator>-&gt;</operator><name>tm_sec</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>s</name><operator>.</operator><name>wMilliseconds</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SystemTimeToFileTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>t</name><operator>.</operator><name>QuadPart</name></name> <operator>=</operator> <name><name>f</name><operator>.</operator><name>dwHighDateTime</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>t</name><operator>.</operator><name>QuadPart</name></name> <operator>&lt;&lt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>t</name><operator>.</operator><name>QuadPart</name></name> <operator>|=</operator> <name><name>f</name><operator>.</operator><name>dwLowDateTime</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>t</name><operator>.</operator><name>QuadPart</name></name> <operator>-=</operator> <name><name>offset</name><operator>.</operator><name>QuadPart</name></name></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>time_t</name><operator>)</operator><operator>(</operator><name><name>t</name><operator>.</operator><name>QuadPart</name></name> <operator>/</operator> <literal type="number">10000000</literal><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>mktime</name><argument_list>(<argument><expr><name>timep</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>taosLocalTime</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>time_t</name> <modifier>*</modifier></type><name>timep</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>localtime</name><argument_list>(<argument><expr><name>timep</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>timep</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SYSTEMTIME</name></type>    <name>ss</name></decl>, <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILETIME</name></type>      <name>ff</name></decl>, <decl><type ref="prev"/><name>f</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LARGE_INTEGER</name></type> <name>offset</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type>     <name>tm1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type>        <name>tt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>localtime_s</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ss</name><operator>.</operator><name>wYear</name></name> <operator>=</operator> <name><name>tm1</name><operator>.</operator><name>tm_year</name></name> <operator>+</operator> <literal type="number">1900</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ss</name><operator>.</operator><name>wMonth</name></name> <operator>=</operator> <name><name>tm1</name><operator>.</operator><name>tm_mon</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ss</name><operator>.</operator><name>wDay</name></name> <operator>=</operator> <name><name>tm1</name><operator>.</operator><name>tm_mday</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ss</name><operator>.</operator><name>wHour</name></name> <operator>=</operator> <name><name>tm1</name><operator>.</operator><name>tm_hour</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ss</name><operator>.</operator><name>wMinute</name></name> <operator>=</operator> <name><name>tm1</name><operator>.</operator><name>tm_min</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ss</name><operator>.</operator><name>wSecond</name></name> <operator>=</operator> <name><name>tm1</name><operator>.</operator><name>tm_sec</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ss</name><operator>.</operator><name>wMilliseconds</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SystemTimeToFileTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ss</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>offset</name><operator>.</operator><name>QuadPart</name></name> <operator>=</operator> <name><name>ff</name><operator>.</operator><name>dwHighDateTime</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>offset</name><operator>.</operator><name>QuadPart</name></name> <operator>&lt;&lt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>offset</name><operator>.</operator><name>QuadPart</name></name> <operator>|=</operator> <name><name>ff</name><operator>.</operator><name>dwLowDateTime</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>offset</name><operator>.</operator><name>QuadPart</name></name> <operator>+=</operator> <operator>*</operator><name>timep</name> <operator>*</operator> <literal type="number">10000000</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>f</name><operator>.</operator><name>dwLowDateTime</name></name> <operator>=</operator> <name><name>offset</name><operator>.</operator><name>QuadPart</name></name> <operator>&amp;</operator> <literal type="number">0xffffffff</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>f</name><operator>.</operator><name>dwHighDateTime</name></name> <operator>=</operator> <operator>(</operator><name><name>offset</name><operator>.</operator><name>QuadPart</name></name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffffffff</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FileTimeToSystemTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tm_sec</name></name> <operator>=</operator> <name><name>s</name><operator>.</operator><name>wSecond</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>=</operator> <name><name>s</name><operator>.</operator><name>wMinute</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>=</operator> <name><name>s</name><operator>.</operator><name>wHour</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tm_mday</name></name> <operator>=</operator> <name><name>s</name><operator>.</operator><name>wDay</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>=</operator> <name><name>s</name><operator>.</operator><name>wMonth</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>=</operator> <name><name>s</name><operator>.</operator><name>wYear</name></name> <operator>-</operator> <literal type="number">1900</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tm_wday</name></name> <operator>=</operator> <name><name>s</name><operator>.</operator><name>wDayOfWeek</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tm_yday</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tm_isdst</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>localtime_s</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>timep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>localtime_r</name><argument_list>(<argument><expr><name>timep</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>isLeapYear</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>year</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>year</name> <operator>%</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><name>year</name> <operator>%</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><name>year</name> <operator>%</operator> <literal type="number">400</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>taosLocalTimeNolock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>time_t</name> <modifier>*</modifier></type><name>timep</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>localtime</name><argument_list>(<argument><expr><name>timep</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>timep</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SYSTEMTIME</name></type>    <name>ss</name></decl>, <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILETIME</name></type>      <name>ff</name></decl>, <decl><type ref="prev"/><name>f</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LARGE_INTEGER</name></type> <name>offset</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type>     <name>tm1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type>        <name>tt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>localtime_s</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ss</name><operator>.</operator><name>wYear</name></name> <operator>=</operator> <name><name>tm1</name><operator>.</operator><name>tm_year</name></name> <operator>+</operator> <literal type="number">1900</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ss</name><operator>.</operator><name>wMonth</name></name> <operator>=</operator> <name><name>tm1</name><operator>.</operator><name>tm_mon</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ss</name><operator>.</operator><name>wDay</name></name> <operator>=</operator> <name><name>tm1</name><operator>.</operator><name>tm_mday</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ss</name><operator>.</operator><name>wHour</name></name> <operator>=</operator> <name><name>tm1</name><operator>.</operator><name>tm_hour</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ss</name><operator>.</operator><name>wMinute</name></name> <operator>=</operator> <name><name>tm1</name><operator>.</operator><name>tm_min</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ss</name><operator>.</operator><name>wSecond</name></name> <operator>=</operator> <name><name>tm1</name><operator>.</operator><name>tm_sec</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ss</name><operator>.</operator><name>wMilliseconds</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SystemTimeToFileTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ss</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>offset</name><operator>.</operator><name>QuadPart</name></name> <operator>=</operator> <name><name>ff</name><operator>.</operator><name>dwHighDateTime</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>offset</name><operator>.</operator><name>QuadPart</name></name> <operator>&lt;&lt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>offset</name><operator>.</operator><name>QuadPart</name></name> <operator>|=</operator> <name><name>ff</name><operator>.</operator><name>dwLowDateTime</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>offset</name><operator>.</operator><name>QuadPart</name></name> <operator>+=</operator> <operator>*</operator><name>timep</name> <operator>*</operator> <literal type="number">10000000</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>f</name><operator>.</operator><name>dwLowDateTime</name></name> <operator>=</operator> <name><name>offset</name><operator>.</operator><name>QuadPart</name></name> <operator>&amp;</operator> <literal type="number">0xffffffff</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>f</name><operator>.</operator><name>dwHighDateTime</name></name> <operator>=</operator> <operator>(</operator><name><name>offset</name><operator>.</operator><name>QuadPart</name></name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffffffff</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FileTimeToSystemTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tm_sec</name></name> <operator>=</operator> <name><name>s</name><operator>.</operator><name>wSecond</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>=</operator> <name><name>s</name><operator>.</operator><name>wMinute</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>=</operator> <name><name>s</name><operator>.</operator><name>wHour</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tm_mday</name></name> <operator>=</operator> <name><name>s</name><operator>.</operator><name>wDay</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>=</operator> <name><name>s</name><operator>.</operator><name>wMonth</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>=</operator> <name><name>s</name><operator>.</operator><name>wYear</name></name> <operator>-</operator> <literal type="number">1900</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tm_wday</name></name> <operator>=</operator> <name><name>s</name><operator>.</operator><name>wDayOfWeek</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tm_yday</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tm_isdst</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>localtime_s</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>timep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LINUX</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <decl_stmt><decl><type><name>time_t</name></type> <name>secsMin</name> <init>= <expr><literal type="number">60</literal></expr></init></decl>, <decl><type ref="prev"/><name>secsHour</name> <init>= <expr><literal type="number">3600</literal></expr></init></decl>, <decl><type ref="prev"/><name>secsDay</name> <init>= <expr><literal type="number">3600</literal> <operator>*</operator> <literal type="number">24</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type>   <name>tz</name> <init>= <expr><name>timezone</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>time_t</name></type> <name>t</name> <init>= <expr><operator>*</operator><name>timep</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>t</name> <operator>-=</operator> <name>tz</name></expr>;</expr_stmt>                      <comment type="block">/* Adjust for timezone. */</comment>
  <expr_stmt><expr><name>t</name> <operator>+=</operator> <literal type="number">3600</literal> <operator>*</operator> <name>dst</name></expr>;</expr_stmt>              <comment type="block">/* Adjust for daylight time. */</comment>
  <decl_stmt><decl><type><name>time_t</name></type> <name>days</name> <init>= <expr><name>t</name> <operator>/</operator> <name>secsDay</name></expr></init></decl>;</decl_stmt>    <comment type="block">/* Days passed since epoch. */</comment>
  <decl_stmt><decl><type><name>time_t</name></type> <name>seconds</name> <init>= <expr><name>t</name> <operator>%</operator> <name>secsDay</name></expr></init></decl>;</decl_stmt> <comment type="block">/* Remaining seconds. */</comment>

  <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tm_isdst</name></name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>=</operator> <name>seconds</name> <operator>/</operator> <name>secsHour</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>=</operator> <operator>(</operator><name>seconds</name> <operator>%</operator> <name>secsHour</name><operator>)</operator> <operator>/</operator> <name>secsMin</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tm_sec</name></name> <operator>=</operator> <operator>(</operator><name>seconds</name> <operator>%</operator> <name>secsHour</name><operator>)</operator> <operator>%</operator> <name>secsMin</name></expr>;</expr_stmt>

  <comment type="block">/* 1/1/1970 was a Thursday, that is, day 4 from the POV of the tm structure
   * where sunday = 0, so to calculate the day of the week we have to add 4
   * and take the modulo by 7. */</comment>
  <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tm_wday</name></name> <operator>=</operator> <operator>(</operator><name>days</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>%</operator> <literal type="number">7</literal></expr>;</expr_stmt>

  <comment type="block">/* Calculate the current year. */</comment>
  <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>=</operator> <literal type="number">1970</literal></expr>;</expr_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <comment type="block">/* Leap years have one day more. */</comment>
    <decl_stmt><decl><type><name>time_t</name></type> <name>daysOfYear</name> <init>= <expr><literal type="number">365</literal> <operator>+</operator> <call><name>isLeapYear</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>tm_year</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>daysOfYear</name> <operator>&gt;</operator> <name>days</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>days</name> <operator>-=</operator> <name>daysOfYear</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tm_year</name></name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tm_yday</name></name> <operator>=</operator> <name>days</name></expr>;</expr_stmt> <comment type="block">/* Number of day of the current year. */</comment>
  <comment type="block">/* We need to calculate in which month and day of the month we are. To do
   * so we need to skip days according to how many days there are in each
   * month, and adjust for the leap year that has one more day in February. */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name><name>mdays</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">31</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>mdays</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <call><name>isLeapYear</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>tm_year</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>days</name> <operator>&gt;=</operator> <name><name>mdays</name><index>[<expr><name><name>result</name><operator>-&gt;</operator><name>tm_mon</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>days</name> <operator>-=</operator> <name><name>mdays</name><index>[<expr><name><name>result</name><operator>-&gt;</operator><name>tm_mon</name></name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tm_mon</name></name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tm_mday</name></name> <operator>=</operator> <name>days</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* Add 1 since our 'days' is zero-based. */</comment>
  <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>-=</operator> <literal type="number">1900</literal></expr>;</expr_stmt>    <comment type="block">/* Surprisingly tm_year is year-1900. */</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>localtime_r</name><argument_list>(<argument><expr><name>timep</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosGetTimestampSec</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosClockGetTime</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>clock_id</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timespec</name></name> <modifier>*</modifier></type><name>pTS</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <decl_stmt><decl><type><name>LARGE_INTEGER</name></type>        <name>t</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FILETIME</name></type>             <name>f</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>FILETIME</name></type>      <name>ff</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>SYSTEMTIME</name></type>    <name>ss</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>LARGE_INTEGER</name></type> <name>offset</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>static</specifier> <name>int8_t</name></type>        <name>offsetInit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>bool</name></type> <name>offsetInitFinished</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type>               <name>old</name> <init>= <expr><call><name>atomic_val_compare_exchange_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>offsetInit</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>old</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>ss</name><operator>.</operator><name>wYear</name></name> <operator>=</operator> <literal type="number">1970</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ss</name><operator>.</operator><name>wMonth</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ss</name><operator>.</operator><name>wDay</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ss</name><operator>.</operator><name>wHour</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ss</name><operator>.</operator><name>wMinute</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ss</name><operator>.</operator><name>wSecond</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ss</name><operator>.</operator><name>wMilliseconds</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SystemTimeToFileTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ss</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>offset</name><operator>.</operator><name>QuadPart</name></name> <operator>=</operator> <name><name>ff</name><operator>.</operator><name>dwHighDateTime</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>offset</name><operator>.</operator><name>QuadPart</name></name> <operator>&lt;&lt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>offset</name><operator>.</operator><name>QuadPart</name></name> <operator>|=</operator> <name><name>ff</name><operator>.</operator><name>dwLowDateTime</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>offsetInitFinished</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <while>while <condition>(<expr><operator>!</operator><name>offsetInitFinished</name></expr>)</condition><block type="pseudo"><block_content>
      <empty_stmt>;</empty_stmt></block_content></block></while>  <comment type="line">// Ensure initialization is completed.</comment>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>GetSystemTimeAsFileTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>t</name><operator>.</operator><name>QuadPart</name></name> <operator>=</operator> <name><name>f</name><operator>.</operator><name>dwHighDateTime</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>t</name><operator>.</operator><name>QuadPart</name></name> <operator>&lt;&lt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>t</name><operator>.</operator><name>QuadPart</name></name> <operator>|=</operator> <name><name>f</name><operator>.</operator><name>dwLowDateTime</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>t</name><operator>.</operator><name>QuadPart</name></name> <operator>-=</operator> <name><name>offset</name><operator>.</operator><name>QuadPart</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTS</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>QuadPart</name></name> <operator>/</operator> <literal type="number">10000000</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTS</name><operator>-&gt;</operator><name>tv_nsec</name></name> <operator>=</operator> <operator>(</operator><name><name>t</name><operator>.</operator><name>QuadPart</name></name> <operator>%</operator> <literal type="number">10000000</literal><operator>)</operator> <operator>*</operator> <literal type="number">100</literal></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>clock_gettime</name><argument_list>(<argument><expr><name>clock_id</name></expr></argument>, <argument><expr><name>pTS</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
</unit>
