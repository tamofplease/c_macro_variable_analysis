<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/os/src/osEnv.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"osEnv.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>char</name></type>            <name><name>configDir</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type>            <name><name>tsDataDir</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type>            <name><name>tsLogDir</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type>            <name><name>tsTempDir</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SDiskSpace</name></type>      <name>tsDataSpace</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SDiskSpace</name></type>      <name>tsLogSpace</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SDiskSpace</name></type>      <name>tsTempSpace</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type>            <name><name>tsOsName</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type>            <name><name>tsTimezoneStr</name><index>[<expr><name>TD_TIMEZONE_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>TdTimezone</name></name></type> <name>tsTimezone</name> <init>= <expr><name>TdZeroZone</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type>            <name><name>tsLocale</name><index>[<expr><name>TD_LOCALE_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type>            <name><name>tsCharset</name><index>[<expr><name>TD_CHARSET_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int8_t</name></type>          <name>tsDaylight</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>            <name>tsEnableCoreFile</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type>         <name>tsPageSizeKB</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type>         <name>tsOpenMax</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type>         <name>tsStreamMax</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type>           <name>tsNumOfCores</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type>         <name>tsTotalMemoryKB</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name>           <modifier>*</modifier></type><name>tsProcPath</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type>            <name>tsSIMDEnable</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type>            <name>tsSSE42Enable</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type>            <name>tsAVXEnable</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type>            <name>tsAVX2Enable</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type>            <name>tsFMAEnable</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>osDefaultInit</name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosSeedRand</name><argument_list>(<argument><expr><call><name>taosSafeRand</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosGetSystemLocale</name><argument_list>(<argument><expr><name>tsLocale</name></expr></argument>, <argument><expr><name>tsCharset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosGetSystemTimezone</name><argument_list>(<argument><expr><name>tsTimezoneStr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tsTimezone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosSetSystemTimezone</name><argument_list>(<argument><expr><name>tsTimezoneStr</name></expr></argument>, <argument><expr><name>tsTimezoneStr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tsDaylight</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tsTimezone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosGetSystemInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// deadlock in query</comment>
  <if_stmt><if>if <condition>(<expr><name>tsNumOfCores</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>tsNumOfCores</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <expr_stmt><expr><call><name>taosWinSocketInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tmpDir</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"tmp"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tmpDir</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>tmpDir</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"temp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>tmpDir</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>tsTempDir</name></expr></argument>, <argument><expr><name>tmpDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>tsOsName</name></expr></argument>, <argument><expr><literal type="string">"Windows"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_DARWIN_64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>tsOsName</name></expr></argument>, <argument><expr><literal type="string">"Darwin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>tsOsName</name></expr></argument>, <argument><expr><literal type="string">"Linux"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <if_stmt><if>if <condition>(<expr><name><name>configDir</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>configDir</name></expr></argument>, <argument><expr><name>TD_CFG_DIR_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>tsDataDir</name></expr></argument>, <argument><expr><name>TD_DATA_DIR_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>tsLogDir</name></expr></argument>, <argument><expr><name>TD_LOG_DIR_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>tsTempDir</name></expr></argument>, <argument><expr><name>TD_TMP_DIR_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>osUpdate</name><parameter_list>()</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>tsLogDir</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosGetDiskSize</name><argument_list>(<argument><expr><name>tsLogDir</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tsLogSpace</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>tsDataDir</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosGetDiskSize</name><argument_list>(<argument><expr><name>tsDataDir</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tsDataSpace</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>tsTempDir</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosGetDiskSize</name><argument_list>(<argument><expr><name>tsTempDir</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tsTempSpace</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>osCleanup</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>

<function><type><name>bool</name></type> <name>osLogSpaceAvailable</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name><name>tsLogSpace</name><operator>.</operator><name>size</name><operator>.</operator><name>avail</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return> </block_content>}</block></function>

<function><type><name>bool</name></type> <name>osDataSpaceAvailable</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name><name>tsDataSpace</name><operator>.</operator><name>size</name><operator>.</operator><name>avail</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return> </block_content>}</block></function>

<function><type><name>bool</name></type> <name>osTempSpaceAvailable</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name><name>tsTempSpace</name><operator>.</operator><name>size</name><operator>.</operator><name>avail</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return> </block_content>}</block></function>

<function><type><name>bool</name></type> <name>osLogSpaceSufficient</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name><name>tsLogSpace</name><operator>.</operator><name>size</name><operator>.</operator><name>avail</name></name> <operator>&gt;</operator> <name><name>tsLogSpace</name><operator>.</operator><name>reserved</name></name></expr>;</return> </block_content>}</block></function>

<function><type><name>bool</name></type> <name>osDataSpaceSufficient</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name><name>tsDataSpace</name><operator>.</operator><name>size</name><operator>.</operator><name>avail</name></name> <operator>&gt;</operator> <name><name>tsDataSpace</name><operator>.</operator><name>reserved</name></name></expr>;</return> </block_content>}</block></function>

<function><type><name>bool</name></type> <name>osTempSpaceSufficient</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name><name>tsTempSpace</name><operator>.</operator><name>size</name><operator>.</operator><name>avail</name></name> <operator>&gt;</operator> <name><name>tsTempSpace</name><operator>.</operator><name>reserved</name></name></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name></type> <name>osSetTimezone</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tz</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>taosSetSystemTimezone</name><argument_list>(<argument><expr><name>tz</name></expr></argument>, <argument><expr><name>tsTimezoneStr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tsDaylight</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tsTimezone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>osSetSystemLocale</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>inLocale</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>inCharSet</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tsLocale</name></expr></argument>, <argument><expr><name>inLocale</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>inLocale</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tsCharset</name></expr></argument>, <argument><expr><name>inCharSet</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>inCharSet</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>osSetProcPath</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>tsProcPath</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> </block_content>}</block></function>
</unit>
