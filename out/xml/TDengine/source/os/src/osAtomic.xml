<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/os/src/osAtomic.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLOW_FORBID_FUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>

<comment type="line">// add</comment>
<function><type><name>int8_t</name></type> <name>interlocked_add_fetch_8</name><parameter_list>(<parameter><decl><type><name>int8_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>_InterlockedExchangeAdd8</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>val</name></expr>;</return> </block_content>}</block></function>

<function><type><name>int16_t</name></type> <name>interlocked_add_fetch_16</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>_InterlockedExchangeAdd16</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>val</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>interlocked_add_fetch_32</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>_InterlockedExchangeAdd</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>val</name></expr>;</return> </block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>interlocked_add_fetch_64</name><parameter_list>(<parameter><decl><type><name>int64_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>InterlockedExchangeAdd64</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>val</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>interlocked_add_fetch_ptr</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><call><name>_InterlockedExchangeAdd</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>val</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><name>val</name><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><call><name>InterlockedExchangeAdd64</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>val</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>val</name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int8_t</name></type> <name>interlocked_and_fetch_8</name><parameter_list>(<parameter><decl><type><name>int8_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>_InterlockedAnd8</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>val</name></expr>;</return> </block_content>}</block></function>

<function><type><name>int16_t</name></type> <name>interlocked_and_fetch_16</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>_InterlockedAnd16</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>val</name></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>interlocked_and_fetch_32</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>_InterlockedAnd</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>val</name></expr>;</return> </block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>interlocked_and_fetch_64</name><parameter_list>(<parameter><decl><type><name>int64_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>old</name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>
  <do>do <block>{<block_content>
    <expr_stmt><expr><name>old</name> <operator>=</operator> <operator>*</operator><name>ptr</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <name>old</name> <operator>&amp;</operator> <name>val</name></expr>;</expr_stmt>
  </block_content>}</block> while <condition>(<expr><call><name>_InterlockedCompareExchange64</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>old</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>old</name></expr>)</condition>;</do>
  <return>return <expr><name>res</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>_InterlockedAnd64</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>val</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>interlocked_and_fetch_ptr</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><call><name>interlocked_and_fetch_32</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><name>ptr</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><call><name>interlocked_and_fetch_64</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><name>ptr</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>interlocked_fetch_and_64</name><parameter_list>(<parameter><decl><type><name>int64_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>old</name></decl>;</decl_stmt>
  <do>do <block>{<block_content>
    <expr_stmt><expr><name>old</name> <operator>=</operator> <operator>*</operator><name>ptr</name></expr>;</expr_stmt>
  </block_content>}</block> while <condition>(<expr><call><name>_InterlockedCompareExchange64</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>old</name> <operator>&amp;</operator> <name>val</name></expr></argument>, <argument><expr><name>old</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>old</name></expr>)</condition>;</do>
  <return>return <expr><name>old</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>_InterlockedAnd64</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>interlocked_fetch_and_ptr</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><call><name>_InterlockedAnd</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><call><name>_InterlockedAnd64</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int8_t</name></type> <name>interlocked_or_fetch_8</name><parameter_list>(<parameter><decl><type><name>int8_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>_InterlockedOr8</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>val</name></expr>;</return> </block_content>}</block></function>

<function><type><name>int16_t</name></type> <name>interlocked_or_fetch_16</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>_InterlockedOr16</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>val</name></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>interlocked_or_fetch_32</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>_InterlockedOr</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>val</name></expr>;</return> </block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>interlocked_or_fetch_64</name><parameter_list>(<parameter><decl><type><name>int64_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>old</name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>
  <do>do <block>{<block_content>
    <expr_stmt><expr><name>old</name> <operator>=</operator> <operator>*</operator><name>ptr</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <name>old</name> <operator>|</operator> <name>val</name></expr>;</expr_stmt>
  </block_content>}</block> while <condition>(<expr><call><name>_InterlockedCompareExchange64</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>old</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>old</name></expr>)</condition>;</do>
  <return>return <expr><name>res</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>_InterlockedOr64</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>val</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>interlocked_or_fetch_ptr</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><call><name>interlocked_or_fetch_32</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><name>ptr</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><call><name>interlocked_or_fetch_64</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><name>ptr</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>interlocked_fetch_or_64</name><parameter_list>(<parameter><decl><type><name>int64_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>old</name></decl>;</decl_stmt>
  <do>do <block>{<block_content>
    <expr_stmt><expr><name>old</name> <operator>=</operator> <operator>*</operator><name>ptr</name></expr>;</expr_stmt>
  </block_content>}</block> while <condition>(<expr><call><name>_InterlockedCompareExchange64</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>old</name> <operator>|</operator> <name>val</name></expr></argument>, <argument><expr><name>old</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>old</name></expr>)</condition>;</do>
  <return>return <expr><name>old</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>_InterlockedOr64</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>interlocked_fetch_or_ptr</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><call><name>_InterlockedOr</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><call><name>interlocked_fetch_or_64</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int8_t</name></type> <name>interlocked_xor_fetch_8</name><parameter_list>(<parameter><decl><type><name>int8_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>_InterlockedXor8</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>^</operator> <name>val</name></expr>;</return> </block_content>}</block></function>

<function><type><name>int16_t</name></type> <name>interlocked_xor_fetch_16</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>_InterlockedXor16</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>^</operator> <name>val</name></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>interlocked_xor_fetch_32</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>_InterlockedXor</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>^</operator> <name>val</name></expr>;</return> </block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>interlocked_xor_fetch_64</name><parameter_list>(<parameter><decl><type><name>int64_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>old</name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>
  <do>do <block>{<block_content>
    <expr_stmt><expr><name>old</name> <operator>=</operator> <operator>*</operator><name>ptr</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <name>old</name> <operator>^</operator> <name>val</name></expr>;</expr_stmt>
  </block_content>}</block> while <condition>(<expr><call><name>_InterlockedCompareExchange64</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>old</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>old</name></expr>)</condition>;</do>
  <return>return <expr><name>res</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>_InterlockedXor64</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>^</operator> <name>val</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>interlocked_xor_fetch_ptr</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><call><name>interlocked_xor_fetch_32</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><call><name>interlocked_xor_fetch_64</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>interlocked_fetch_xor_64</name><parameter_list>(<parameter><decl><type><name>int64_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>old</name></decl>;</decl_stmt>
  <do>do <block>{<block_content>
    <expr_stmt><expr><name>old</name> <operator>=</operator> <operator>*</operator><name>ptr</name></expr>;</expr_stmt>
  </block_content>}</block> while <condition>(<expr><call><name>_InterlockedCompareExchange64</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>old</name> <operator>^</operator> <name>val</name></expr></argument>, <argument><expr><name>old</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>old</name></expr>)</condition>;</do>
  <return>return <expr><name>old</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>_InterlockedXor64</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>interlocked_fetch_xor_ptr</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><call><name>_InterlockedXor</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><call><name>interlocked_fetch_xor_64</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>interlocked_sub_fetch_32</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>interlocked_add_fetch_32</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>-</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>interlocked_sub_fetch_64</name><parameter_list>(<parameter><decl><type><name>int64_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>interlocked_add_fetch_64</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>-</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>interlocked_sub_fetch_ptr</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><call><name>interlocked_sub_fetch_32</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><name>ptr</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><call><name>interlocked_add_fetch_64</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><name>ptr</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<function><type><name>int32_t</name></type> <name>interlocked_fetch_sub_32</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>_InterlockedExchangeAdd</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>-</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>interlocked_fetch_sub_64</name><parameter_list>(<parameter><decl><type><name>int64_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_TD_WINDOWS_32</name></cpp:ifdef>
  <return>return <expr><call><name>_InterlockedExchangeAdd</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><name>ptr</name></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name>int32_t</name><operator>)</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>_InterlockedExchangeAdd64</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>-</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>interlocked_fetch_sub_ptr</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><call><name>interlocked_fetch_sub_32</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><name>ptr</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><call><name>interlocked_fetch_sub_64</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><name>ptr</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_TD_NINGSI_60</name></cpp:ifdef>
<function><type><name>void</name><modifier>*</modifier></type> <name>atomic_exchange_ptr_impl</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>old</name></decl>;</decl_stmt>
  <do>do <block>{<block_content>
    <expr_stmt><expr><name>old</name> <operator>=</operator> <operator>*</operator><name>ptr</name></expr>;</expr_stmt>
  </block_content>}</block> while <condition>(<expr><operator>!</operator><call><name>__sync_bool_compare_and_swap</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>old</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
  <return>return <expr><name>old</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int8_t</name></type> <name>atomic_exchange_8_impl</name><parameter_list>(<parameter><decl><type><name>int8_t</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int8_t</name></type> <name>old</name></decl>;</decl_stmt>
  <do>do <block>{<block_content>
    <expr_stmt><expr><name>old</name> <operator>=</operator> <operator>*</operator><name>ptr</name></expr>;</expr_stmt>
  </block_content>}</block> while <condition>(<expr><operator>!</operator><call><name>__sync_bool_compare_and_swap</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>old</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
  <return>return <expr><name>old</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int16_t</name></type> <name>atomic_exchange_16_impl</name><parameter_list>(<parameter><decl><type><name>int16_t</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int16_t</name></type> <name>old</name></decl>;</decl_stmt>
  <do>do <block>{<block_content>
    <expr_stmt><expr><name>old</name> <operator>=</operator> <operator>*</operator><name>ptr</name></expr>;</expr_stmt>
  </block_content>}</block> while <condition>(<expr><operator>!</operator><call><name>__sync_bool_compare_and_swap</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>old</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
  <return>return <expr><name>old</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int32_t</name></type> <name>atomic_exchange_32_impl</name><parameter_list>(<parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>old</name></decl>;</decl_stmt>
  <do>do <block>{<block_content>
    <expr_stmt><expr><name>old</name> <operator>=</operator> <operator>*</operator><name>ptr</name></expr>;</expr_stmt>
  </block_content>}</block> while <condition>(<expr><operator>!</operator><call><name>__sync_bool_compare_and_swap</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>old</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
  <return>return <expr><name>old</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int64_t</name></type> <name>atomic_exchange_64_impl</name><parameter_list>(<parameter><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>old</name></decl>;</decl_stmt>
  <do>do <block>{<block_content>
    <expr_stmt><expr><name>old</name> <operator>=</operator> <operator>*</operator><name>ptr</name></expr>;</expr_stmt>
  </block_content>}</block> while <condition>(<expr><operator>!</operator><call><name>__sync_bool_compare_and_swap</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>old</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
  <return>return <expr><name>old</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int8_t</name></type> <name>atomic_load_8</name><parameter_list>(<parameter><decl><type><name>int8_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><operator>(</operator><operator>*</operator><operator>(</operator><name>int8_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator><operator>)</operator></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>__sync_fetch_and_add</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>__atomic_load_n</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int16_t</name></type> <name>atomic_load_16</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><operator>(</operator><operator>*</operator><operator>(</operator><name>int16_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator><operator>)</operator></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>__sync_fetch_and_add</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>__atomic_load_n</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>atomic_load_32</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><operator>(</operator><operator>*</operator><operator>(</operator><name>int32_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator><operator>)</operator></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>__sync_fetch_and_add</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>__atomic_load_n</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>atomic_load_64</name><parameter_list>(<parameter><decl><type><name>int64_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><operator>(</operator><operator>*</operator><operator>(</operator><name>int64_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator><operator>)</operator></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>__sync_fetch_and_add</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>__atomic_load_n</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>atomic_load_ptr</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><operator>(</operator><operator>*</operator><operator>(</operator><name>void</name><operator>*</operator> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator><operator>)</operator></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>__sync_fetch_and_add</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>__atomic_load_n</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>atomic_store_8</name><parameter_list>(<parameter><decl><type><name>int8_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <expr_stmt><expr><operator>(</operator><operator>(</operator><operator>*</operator><operator>(</operator><name>int8_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><name>ptr</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>val</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>__atomic_store_n</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>atomic_store_16</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <expr_stmt><expr><operator>(</operator><operator>(</operator><operator>*</operator><operator>(</operator><name>int16_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><name>ptr</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>val</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>__atomic_store_n</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>atomic_store_32</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <expr_stmt><expr><operator>(</operator><operator>(</operator><operator>*</operator><operator>(</operator><name>int32_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><name>ptr</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>val</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>__atomic_store_n</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>atomic_store_64</name><parameter_list>(<parameter><decl><type><name>int64_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <expr_stmt><expr><operator>(</operator><operator>(</operator><operator>*</operator><operator>(</operator><name>int64_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><name>ptr</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>val</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>__atomic_store_n</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>atomic_store_ptr</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <expr_stmt><expr><operator>(</operator><operator>(</operator><operator>*</operator><operator>(</operator><name>void</name><operator>*</operator> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><name>ptr</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>val</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>__atomic_store_n</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int8_t</name></type> <name>atomic_exchange_8</name><parameter_list>(<parameter><decl><type><name>int8_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><call><name>_InterlockedExchange8</name><argument_list>(<argument><expr><operator>(</operator><name>int8_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int8_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>atomic_exchange_8_impl</name><argument_list>(<argument><expr><operator>(</operator><name>int8_t</name><operator>*</operator><operator>)</operator><name>ptr</name></expr></argument>, <argument><expr><operator>(</operator><name>int8_t</name><operator>)</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>__atomic_exchange_n</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int16_t</name></type> <name>atomic_exchange_16</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><call><name>_InterlockedExchange16</name><argument_list>(<argument><expr><operator>(</operator><name>int16_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>atomic_exchange_16_impl</name><argument_list>(<argument><expr><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name>ptr</name></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name><operator>)</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>__atomic_exchange_n</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>atomic_exchange_32</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><call><name>_InterlockedExchange</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>atomic_exchange_32_impl</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>ptr</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>__atomic_exchange_n</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>atomic_exchange_64</name><parameter_list>(<parameter><decl><type><name>int64_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_TD_WINDOWS_32</name></cpp:ifdef>
  <return>return <expr><call><name>_InterlockedExchange</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>_InterlockedExchange64</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>atomic_exchange_64_impl</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name>ptr</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>__atomic_exchange_n</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>atomic_exchange_ptr</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN64</name></cpp:ifdef>
  <return>return <expr><call><name>_InterlockedExchangePointer</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>_InlineInterlockedExchangePointer</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>atomic_exchange_ptr_impl</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>ptr</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>__atomic_exchange_n</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int8_t</name></type> <name>atomic_val_compare_exchange_8</name><parameter_list>(<parameter><decl><type><name>int8_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>newval</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><call><name>_InterlockedCompareExchange8</name><argument_list>(<argument><expr><operator>(</operator><name>int8_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int8_t</name><operator>)</operator><operator>(</operator><name>newval</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int8_t</name><operator>)</operator><operator>(</operator><name>oldval</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>__sync_val_compare_and_swap</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>oldval</name></expr></argument>, <argument><expr><name>newval</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>__sync_val_compare_and_swap</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>oldval</name></expr></argument>, <argument><expr><name>newval</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int16_t</name></type> <name>atomic_val_compare_exchange_16</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>newval</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><call><name>_InterlockedCompareExchange16</name><argument_list>(<argument><expr><operator>(</operator><name>int16_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name><operator>)</operator><operator>(</operator><name>newval</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name><operator>)</operator><operator>(</operator><name>oldval</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>__sync_val_compare_and_swap</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>oldval</name></expr></argument>, <argument><expr><name>newval</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>__sync_val_compare_and_swap</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>oldval</name></expr></argument>, <argument><expr><name>newval</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>atomic_val_compare_exchange_32</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>newval</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><call><name>_InterlockedCompareExchange</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>newval</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>oldval</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>__sync_val_compare_and_swap</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>oldval</name></expr></argument>, <argument><expr><name>newval</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>__sync_val_compare_and_swap</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>oldval</name></expr></argument>, <argument><expr><name>newval</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>atomic_val_compare_exchange_64</name><parameter_list>(<parameter><decl><type><name>int64_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>newval</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><call><name>_InterlockedCompareExchange64</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>newval</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>oldval</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>__sync_val_compare_and_swap</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>oldval</name></expr></argument>, <argument><expr><name>newval</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>__sync_val_compare_and_swap</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>oldval</name></expr></argument>, <argument><expr><name>newval</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>atomic_val_compare_exchange_ptr</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>newval</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><call><name>_InterlockedCompareExchangePointer</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name>newval</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name>oldval</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>__sync_val_compare_and_swap</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>oldval</name></expr></argument>, <argument><expr><name>newval</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>__sync_val_compare_and_swap</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><name>ptr</name></expr></argument>, <argument><expr><name>oldval</name></expr></argument>, <argument><expr><name>newval</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int8_t</name></type> <name>atomic_add_fetch_8</name><parameter_list>(<parameter><decl><type><name>int8_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><call><name>interlocked_add_fetch_8</name><argument_list>(<argument><expr><operator>(</operator><name>int8_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int8_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>__sync_add_and_fetch</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>__atomic_add_fetch</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int16_t</name></type> <name>atomic_add_fetch_16</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><call><name>interlocked_add_fetch_16</name><argument_list>(<argument><expr><operator>(</operator><name>int16_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>__sync_add_and_fetch</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>__atomic_add_fetch</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>atomic_add_fetch_32</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><call><name>interlocked_add_fetch_32</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>__sync_add_and_fetch</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>__atomic_add_fetch</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>atomic_add_fetch_64</name><parameter_list>(<parameter><decl><type><name>int64_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><call><name>interlocked_add_fetch_64</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>__sync_add_and_fetch</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>__atomic_add_fetch</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>atomic_add_fetch_ptr</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><call><name>interlocked_add_fetch_ptr</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>__sync_add_and_fetch</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>__atomic_add_fetch</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int8_t</name></type> <name>atomic_fetch_add_8</name><parameter_list>(<parameter><decl><type><name>int8_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><call><name>_InterlockedExchangeAdd8</name><argument_list>(<argument><expr><operator>(</operator><name>int8_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int8_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>__sync_fetch_and_add</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>__atomic_fetch_add</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int16_t</name></type> <name>atomic_fetch_add_16</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><call><name>_InterlockedExchangeAdd16</name><argument_list>(<argument><expr><operator>(</operator><name>int16_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>__sync_fetch_and_add</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>__atomic_fetch_add</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>atomic_fetch_add_32</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><call><name>_InterlockedExchangeAdd</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>__sync_fetch_and_add</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>__atomic_fetch_add</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>atomic_fetch_add_64</name><parameter_list>(<parameter><decl><type><name>int64_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_TD_WINDOWS_32</name></cpp:ifdef>
  <return>return <expr><call><name>_InterlockedExchangeAdd</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>_InterlockedExchangeAdd64</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>__sync_fetch_and_add</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>__atomic_fetch_add</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>atomic_fetch_add_ptr</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><call><name>_InterlockedExchangePointer</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>__sync_fetch_and_add</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>__atomic_fetch_add</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int8_t</name></type> <name>atomic_sub_fetch_8</name><parameter_list>(<parameter><decl><type><name>int8_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><call><name>interlocked_add_fetch_8</name><argument_list>(<argument><expr><operator>(</operator><name>int8_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name>int8_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>__sync_sub_and_fetch</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>__atomic_sub_fetch</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int16_t</name></type> <name>atomic_sub_fetch_16</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><call><name>interlocked_add_fetch_16</name><argument_list>(<argument><expr><operator>(</operator><name>int16_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name>int16_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>__sync_sub_and_fetch</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>__atomic_sub_fetch</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>atomic_sub_fetch_32</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><call><name>interlocked_sub_fetch_32</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>__sync_sub_and_fetch</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>__atomic_sub_fetch</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>atomic_sub_fetch_64</name><parameter_list>(<parameter><decl><type><name>int64_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><call><name>interlocked_sub_fetch_64</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>__sync_sub_and_fetch</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>__atomic_sub_fetch</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>atomic_sub_fetch_ptr</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><call><name>interlocked_sub_fetch_ptr</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>__sync_sub_and_fetch</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_DARWIN_64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>__atomic_sub_fetch</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>__atomic_sub_fetch</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int8_t</name></type> <name>atomic_fetch_sub_8</name><parameter_list>(<parameter><decl><type><name>int8_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><call><name>_InterlockedExchangeAdd8</name><argument_list>(<argument><expr><operator>(</operator><name>int8_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name>int8_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>__sync_fetch_and_sub</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>__atomic_fetch_sub</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int16_t</name></type> <name>atomic_fetch_sub_16</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><call><name>_InterlockedExchangeAdd16</name><argument_list>(<argument><expr><operator>(</operator><name>int16_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name>int16_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>__sync_fetch_and_sub</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>__atomic_fetch_sub</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>atomic_fetch_sub_32</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><call><name>interlocked_fetch_sub_32</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>__sync_fetch_and_sub</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>__atomic_fetch_sub</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>atomic_fetch_sub_64</name><parameter_list>(<parameter><decl><type><name>int64_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_TD_WINDOWS_32</name></cpp:ifdef>
  <return>return <expr><call><name>_InterlockedExchangeAdd</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>_InterlockedExchangeAdd64</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>__sync_fetch_and_sub</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>__atomic_fetch_sub</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>atomic_fetch_sub_ptr</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><call><name>interlocked_fetch_sub_ptr</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>__sync_fetch_and_sub</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_DARWIN_64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>__atomic_fetch_sub</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>__atomic_fetch_sub</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int8_t</name></type> <name>atomic_and_fetch_8</name><parameter_list>(<parameter><decl><type><name>int8_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><call><name>interlocked_and_fetch_8</name><argument_list>(<argument><expr><operator>(</operator><name>int8_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int8_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>__sync_and_and_fetch</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>__atomic_and_fetch</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int16_t</name></type> <name>atomic_and_fetch_16</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><call><name>interlocked_and_fetch_16</name><argument_list>(<argument><expr><operator>(</operator><name>int16_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>__sync_and_and_fetch</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>__atomic_and_fetch</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>atomic_and_fetch_32</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><call><name>interlocked_and_fetch_32</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>__sync_and_and_fetch</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>__atomic_and_fetch</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>atomic_and_fetch_64</name><parameter_list>(<parameter><decl><type><name>int64_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><call><name>interlocked_and_fetch_64</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>__sync_and_and_fetch</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>__atomic_and_fetch</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>atomic_and_fetch_ptr</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><call><name>interlocked_and_fetch_ptr</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>__sync_and_and_fetch</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_DARWIN_64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><call><name>__atomic_and_fetch</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>__atomic_and_fetch</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int8_t</name></type> <name>atomic_fetch_and_8</name><parameter_list>(<parameter><decl><type><name>int8_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><call><name>_InterlockedAnd8</name><argument_list>(<argument><expr><operator>(</operator><name>int8_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int8_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>__sync_fetch_and_and</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>__atomic_fetch_and</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int16_t</name></type> <name>atomic_fetch_and_16</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><call><name>_InterlockedAnd16</name><argument_list>(<argument><expr><operator>(</operator><name>int16_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>__sync_fetch_and_and</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>__atomic_fetch_and</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>atomic_fetch_and_32</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><call><name>_InterlockedAnd</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>__sync_fetch_and_and</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>__atomic_fetch_and</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>atomic_fetch_and_64</name><parameter_list>(<parameter><decl><type><name>int64_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><call><name>interlocked_fetch_and_64</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>__sync_fetch_and_and</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>__atomic_fetch_and</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>atomic_fetch_and_ptr</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><call><name>interlocked_fetch_and_ptr</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>__sync_fetch_and_and</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_DARWIN_64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><call><name>__atomic_fetch_and</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>__atomic_fetch_and</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int8_t</name></type> <name>atomic_or_fetch_8</name><parameter_list>(<parameter><decl><type><name>int8_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><call><name>interlocked_or_fetch_8</name><argument_list>(<argument><expr><operator>(</operator><name>int8_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int8_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>__sync_or_and_fetch</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>__atomic_or_fetch</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int16_t</name></type> <name>atomic_or_fetch_16</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><call><name>interlocked_or_fetch_16</name><argument_list>(<argument><expr><operator>(</operator><name>int16_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>__sync_or_and_fetch</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>__atomic_or_fetch</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>atomic_or_fetch_32</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><call><name>interlocked_or_fetch_32</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>__sync_or_and_fetch</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>__atomic_or_fetch</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>atomic_or_fetch_64</name><parameter_list>(<parameter><decl><type><name>int64_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><call><name>interlocked_or_fetch_64</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>__sync_or_and_fetch</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>__atomic_or_fetch</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>atomic_or_fetch_ptr</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><call><name>interlocked_or_fetch_ptr</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>__sync_or_and_fetch</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_DARWIN_64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><call><name>__atomic_or_fetch</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>__atomic_or_fetch</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int8_t</name></type> <name>atomic_fetch_or_8</name><parameter_list>(<parameter><decl><type><name>int8_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><call><name>_InterlockedOr8</name><argument_list>(<argument><expr><operator>(</operator><name>int8_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int8_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>__sync_fetch_and_or</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>__atomic_fetch_or</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int16_t</name></type> <name>atomic_fetch_or_16</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><call><name>_InterlockedOr16</name><argument_list>(<argument><expr><operator>(</operator><name>int16_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>__sync_fetch_and_or</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>__atomic_fetch_or</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>atomic_fetch_or_32</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><call><name>_InterlockedOr</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>__sync_fetch_and_or</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>__atomic_fetch_or</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>atomic_fetch_or_64</name><parameter_list>(<parameter><decl><type><name>int64_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><call><name>interlocked_fetch_or_64</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>__sync_fetch_and_or</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>__atomic_fetch_or</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>atomic_fetch_or_ptr</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><call><name>interlocked_fetch_or_ptr</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>__sync_fetch_and_or</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_DARWIN_64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><call><name>__atomic_fetch_or</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>__atomic_fetch_or</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int8_t</name></type> <name>atomic_xor_fetch_8</name><parameter_list>(<parameter><decl><type><name>int8_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><call><name>interlocked_xor_fetch_8</name><argument_list>(<argument><expr><operator>(</operator><name>int8_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int8_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>__sync_xor_and_fetch</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>__atomic_xor_fetch</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int16_t</name></type> <name>atomic_xor_fetch_16</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><call><name>interlocked_xor_fetch_16</name><argument_list>(<argument><expr><operator>(</operator><name>int16_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>__sync_xor_and_fetch</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>__atomic_xor_fetch</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>atomic_xor_fetch_32</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><call><name>interlocked_xor_fetch_32</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>__sync_xor_and_fetch</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>__atomic_xor_fetch</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>atomic_xor_fetch_64</name><parameter_list>(<parameter><decl><type><name>int64_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><call><name>interlocked_xor_fetch_64</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>__sync_xor_and_fetch</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>__atomic_xor_fetch</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>atomic_xor_fetch_ptr</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><call><name>interlocked_xor_fetch_ptr</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>__sync_xor_and_fetch</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_DARWIN_64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><call><name>__atomic_xor_fetch</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>__atomic_xor_fetch</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int8_t</name></type> <name>atomic_fetch_xor_8</name><parameter_list>(<parameter><decl><type><name>int8_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><call><name>_InterlockedXor8</name><argument_list>(<argument><expr><operator>(</operator><name>int8_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int8_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>__sync_fetch_and_xor</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>__atomic_fetch_xor</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int16_t</name></type> <name>atomic_fetch_xor_16</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><call><name>_InterlockedXor16</name><argument_list>(<argument><expr><operator>(</operator><name>int16_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>__sync_fetch_and_xor</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>__atomic_fetch_xor</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>atomic_fetch_xor_32</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><call><name>_InterlockedXor</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>__sync_fetch_and_xor</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>__atomic_fetch_xor</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>atomic_fetch_xor_64</name><parameter_list>(<parameter><decl><type><name>int64_t</name> <specifier>volatile</specifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><call><name>interlocked_fetch_xor_64</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>__sync_fetch_and_xor</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>__atomic_fetch_xor</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>atomic_fetch_xor_ptr</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><call><name>interlocked_fetch_xor_ptr</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator> <specifier>volatile</specifier><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_NINGSI_60</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><call><name>__sync_fetch_and_xor</name><argument_list>(<argument><expr><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_DARWIN_64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><call><name>__atomic_fetch_xor</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>__atomic_fetch_xor</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>val</name><operator>)</operator></expr></argument>, <argument><expr><name>__ATOMIC_SEQ_CST</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
</unit>
