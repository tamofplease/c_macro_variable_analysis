<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/os/src/osThread.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLOW_FORBID_FUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os.h"</cpp:file></cpp:include>

<function><type><name>int32_t</name></type> <name>taosThreadCreate</name><parameter_list>(<parameter><decl><type><name>TdThread</name> <modifier>*</modifier></type><name>tid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TdThreadAttr</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>, <parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>start</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>pthread_create</name><argument_list>(<argument><expr><name>tid</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosThreadAttrDestroy</name><parameter_list>(<parameter><decl><type><name>TdThreadAttr</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>pthread_attr_destroy</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosThreadAttrGetDetachState</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TdThreadAttr</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>detachstate</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>pthread_attr_getdetachstate</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><name>detachstate</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosThreadAttrGetInheritSched</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TdThreadAttr</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>inheritsched</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>pthread_attr_getinheritsched</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><name>inheritsched</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosThreadAttrGetSchedParam</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TdThreadAttr</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sched_param</name></name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>pthread_attr_getschedparam</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosThreadAttrGetSchedPolicy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TdThreadAttr</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>policy</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>pthread_attr_getschedpolicy</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><name>policy</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosThreadAttrGetScope</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TdThreadAttr</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>contentionscope</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>pthread_attr_getscope</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><name>contentionscope</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosThreadAttrGetStackSize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TdThreadAttr</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>stacksize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>pthread_attr_getstacksize</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><name>stacksize</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosThreadAttrInit</name><parameter_list>(<parameter><decl><type><name>TdThreadAttr</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>pthread_attr_init</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosThreadAttrSetDetachState</name><parameter_list>(<parameter><decl><type><name>TdThreadAttr</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>detachstate</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>pthread_attr_setdetachstate</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><name>detachstate</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosThreadAttrSetInheritSched</name><parameter_list>(<parameter><decl><type><name>TdThreadAttr</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>inheritsched</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>pthread_attr_setinheritsched</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><name>inheritsched</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosThreadAttrSetSchedParam</name><parameter_list>(<parameter><decl><type><name>TdThreadAttr</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sched_param</name></name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>pthread_attr_setschedparam</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosThreadAttrSetSchedPolicy</name><parameter_list>(<parameter><decl><type><name>TdThreadAttr</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>policy</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>pthread_attr_setschedpolicy</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><name>policy</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosThreadAttrSetScope</name><parameter_list>(<parameter><decl><type><name>TdThreadAttr</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>contentionscope</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>pthread_attr_setscope</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><name>contentionscope</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosThreadAttrSetStackSize</name><parameter_list>(<parameter><decl><type><name>TdThreadAttr</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>stacksize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>pthread_attr_setstacksize</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><name>stacksize</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosThreadCancel</name><parameter_list>(<parameter><decl><type><name>TdThread</name></type> <name>thread</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>pthread_cancel</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosThreadCondDestroy</name><parameter_list>(<parameter><decl><type><name>TdThreadCond</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>pthread_cond_destroy</name><argument_list>(<argument><expr><name>cond</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosThreadCondInit</name><parameter_list>(<parameter><decl><type><name>TdThreadCond</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TdThreadCondAttr</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>pthread_cond_init</name><argument_list>(<argument><expr><name>cond</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosThreadCondSignal</name><parameter_list>(<parameter><decl><type><name>TdThreadCond</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>pthread_cond_signal</name><argument_list>(<argument><expr><name>cond</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosThreadCondBroadcast</name><parameter_list>(<parameter><decl><type><name>TdThreadCond</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>pthread_cond_broadcast</name><argument_list>(<argument><expr><name>cond</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosThreadCondWait</name><parameter_list>(<parameter><decl><type><name>TdThreadCond</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>, <parameter><decl><type><name>TdThreadMutex</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>pthread_cond_wait</name><argument_list>(<argument><expr><name>cond</name></expr></argument>, <argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosThreadCondTimedWait</name><parameter_list>(<parameter><decl><type><name>TdThreadCond</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>, <parameter><decl><type><name>TdThreadMutex</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timespec</name></name> <modifier>*</modifier></type><name>abstime</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>pthread_cond_timedwait</name><argument_list>(<argument><expr><name>cond</name></expr></argument>, <argument><expr><name>mutex</name></expr></argument>, <argument><expr><name>abstime</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosThreadCondAttrDestroy</name><parameter_list>(<parameter><decl><type><name>TdThreadCondAttr</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>pthread_condattr_destroy</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosThreadCondAttrGetPshared</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TdThreadCondAttr</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>pshared</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>pthread_condattr_getpshared</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><name>pshared</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosThreadCondAttrInit</name><parameter_list>(<parameter><decl><type><name>TdThreadCondAttr</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>pthread_condattr_init</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosThreadCondAttrSetPshared</name><parameter_list>(<parameter><decl><type><name>TdThreadCondAttr</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>pshared</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>pthread_condattr_setpshared</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><name>pshared</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosThreadDetach</name><parameter_list>(<parameter><decl><type><name>TdThread</name></type> <name>thread</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>pthread_detach</name><argument_list>(<argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosThreadEqual</name><parameter_list>(<parameter><decl><type><name>TdThread</name></type> <name>t1</name></decl></parameter>, <parameter><decl><type><name>TdThread</name></type> <name>t2</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>pthread_equal</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name></type> <name>taosThreadExit</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>valuePtr</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>pthread_exit</name><argument_list>(<argument><expr><name>valuePtr</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosThreadGetSchedParam</name><parameter_list>(<parameter><decl><type><name>TdThread</name></type> <name>thread</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>policy</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sched_param</name></name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>pthread_getschedparam</name><argument_list>(<argument><expr><name>thread</name></expr></argument>, <argument><expr><name>policy</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>taosThreadGetSpecific</name><parameter_list>(<parameter><decl><type><name>TdThreadKey</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>pthread_getspecific</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosThreadJoin</name><parameter_list>(<parameter><decl><type><name>TdThread</name></type> <name>thread</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>valuePtr</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>pthread_join</name><argument_list>(<argument><expr><name>thread</name></expr></argument>, <argument><expr><name>valuePtr</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosThreadKeyCreate</name><parameter_list>(<parameter><decl><type><name>TdThreadKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>destructor</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>pthread_key_create</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>destructor</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosThreadKeyDelete</name><parameter_list>(<parameter><decl><type><name>TdThreadKey</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>pthread_key_delete</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosThreadKill</name><parameter_list>(<parameter><decl><type><name>TdThread</name></type> <name>thread</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>sig</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>pthread_kill</name><argument_list>(<argument><expr><name>thread</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<comment type="line">// int32_t taosThreadMutexConsistent(TdThreadMutex* mutex) {</comment>
<comment type="line">//   return pthread_mutex_consistent(mutex);</comment>
<comment type="line">// }</comment>

<function><type><name>int32_t</name></type> <name>taosThreadMutexDestroy</name><parameter_list>(<parameter><decl><type><name>TdThreadMutex</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosThreadMutexInit</name><parameter_list>(<parameter><decl><type><name>TdThreadMutex</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TdThreadMutexAttr</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosThreadMutexLock</name><parameter_list>(<parameter><decl><type><name>TdThreadMutex</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<comment type="line">// int32_t taosThreadMutexTimedLock(TdThreadMutex * mutex, const struct timespec *abstime) {</comment>
<comment type="line">//   return pthread_mutex_timedlock(mutex, abstime);</comment>
<comment type="line">// }</comment>

<function><type><name>int32_t</name></type> <name>taosThreadMutexTryLock</name><parameter_list>(<parameter><decl><type><name>TdThreadMutex</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>pthread_mutex_trylock</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosThreadMutexUnlock</name><parameter_list>(<parameter><decl><type><name>TdThreadMutex</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosThreadMutexAttrDestroy</name><parameter_list>(<parameter><decl><type><name>TdThreadMutexAttr</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>pthread_mutexattr_destroy</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosThreadMutexAttrGetPshared</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TdThreadMutexAttr</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>pshared</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>pthread_mutexattr_getpshared</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><name>pshared</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// int32_t taosThreadMutexAttrGetRobust(const TdThreadMutexAttr * attr, int32_t * robust) {</comment>
<comment type="line">//   return pthread_mutexattr_getrobust(attr, robust);</comment>
<comment type="line">// }</comment>

<function><type><name>int32_t</name></type> <name>taosThreadMutexAttrGetType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TdThreadMutexAttr</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>kind</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>pthread_mutexattr_gettype</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosThreadMutexAttrInit</name><parameter_list>(<parameter><decl><type><name>TdThreadMutexAttr</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>pthread_mutexattr_init</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosThreadMutexAttrSetPshared</name><parameter_list>(<parameter><decl><type><name>TdThreadMutexAttr</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>pshared</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>pthread_mutexattr_setpshared</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><name>pshared</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// int32_t taosThreadMutexAttrSetRobust(TdThreadMutexAttr * attr, int32_t robust) {</comment>
<comment type="line">//   return pthread_mutexattr_setrobust(attr, robust);</comment>
<comment type="line">// }</comment>

<function><type><name>int32_t</name></type> <name>taosThreadMutexAttrSetType</name><parameter_list>(<parameter><decl><type><name>TdThreadMutexAttr</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>kind</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>pthread_mutexattr_settype</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosThreadOnce</name><parameter_list>(<parameter><decl><type><name>TdThreadOnce</name> <modifier>*</modifier></type><name>onceControl</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>initRoutine</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>pthread_once</name><argument_list>(<argument><expr><name>onceControl</name></expr></argument>, <argument><expr><name>initRoutine</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosThreadRwlockDestroy</name><parameter_list>(<parameter><decl><type><name>TdThreadRwlock</name> <modifier>*</modifier></type><name>rwlock</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>pthread_rwlock_destroy</name><argument_list>(<argument><expr><name>rwlock</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosThreadRwlockInit</name><parameter_list>(<parameter><decl><type><name>TdThreadRwlock</name> <modifier>*</modifier></type><name>rwlock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TdThreadRwlockAttr</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>pthread_rwlock_init</name><argument_list>(<argument><expr><name>rwlock</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosThreadRwlockRdlock</name><parameter_list>(<parameter><decl><type><name>TdThreadRwlock</name> <modifier>*</modifier></type><name>rwlock</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>pthread_rwlock_rdlock</name><argument_list>(<argument><expr><name>rwlock</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<comment type="line">// int32_t taosThreadRwlockTimedRdlock(TdThreadRwlock * rwlock, const struct timespec *abstime) {</comment>
<comment type="line">//   return pthread_rwlock_timedrdlock(rwlock, abstime);</comment>
<comment type="line">// }</comment>

<comment type="line">// int32_t taosThreadRwlockTimedWrlock(TdThreadRwlock * rwlock, const struct timespec *abstime) {</comment>
<comment type="line">//   return pthread_rwlock_timedwrlock(rwlock, abstime);</comment>
<comment type="line">// }</comment>

<function><type><name>int32_t</name></type> <name>taosThreadRwlockTryRdlock</name><parameter_list>(<parameter><decl><type><name>TdThreadRwlock</name> <modifier>*</modifier></type><name>rwlock</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>pthread_rwlock_tryrdlock</name><argument_list>(<argument><expr><name>rwlock</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosThreadRwlockTryWrlock</name><parameter_list>(<parameter><decl><type><name>TdThreadRwlock</name> <modifier>*</modifier></type><name>rwlock</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>pthread_rwlock_trywrlock</name><argument_list>(<argument><expr><name>rwlock</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosThreadRwlockUnlock</name><parameter_list>(<parameter><decl><type><name>TdThreadRwlock</name> <modifier>*</modifier></type><name>rwlock</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><name>rwlock</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosThreadRwlockWrlock</name><parameter_list>(<parameter><decl><type><name>TdThreadRwlock</name> <modifier>*</modifier></type><name>rwlock</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>pthread_rwlock_wrlock</name><argument_list>(<argument><expr><name>rwlock</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosThreadRwlockAttrDestroy</name><parameter_list>(<parameter><decl><type><name>TdThreadRwlockAttr</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>pthread_rwlockattr_destroy</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosThreadRwlockAttrGetPshared</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TdThreadRwlockAttr</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>pshared</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>pthread_rwlockattr_getpshared</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><name>pshared</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosThreadRwlockAttrInit</name><parameter_list>(<parameter><decl><type><name>TdThreadRwlockAttr</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>pthread_rwlockattr_init</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosThreadRwlockAttrSetPshared</name><parameter_list>(<parameter><decl><type><name>TdThreadRwlockAttr</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>pshared</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>pthread_rwlockattr_setpshared</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><name>pshared</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>TdThread</name></type> <name>taosThreadSelf</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>pthread_self</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosThreadSetCancelState</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>oldstate</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>pthread_setcancelstate</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>oldstate</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosThreadSetCancelType</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>oldtype</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>pthread_setcanceltype</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>oldtype</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosThreadSetSchedParam</name><parameter_list>(<parameter><decl><type><name>TdThread</name></type> <name>thread</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>policy</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sched_param</name></name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>pthread_setschedparam</name><argument_list>(<argument><expr><name>thread</name></expr></argument>, <argument><expr><name>policy</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosThreadSetSpecific</name><parameter_list>(<parameter><decl><type><name>TdThreadKey</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>pthread_setspecific</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosThreadSpinDestroy</name><parameter_list>(<parameter><decl><type><name>TdThreadSpinlock</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TD_USE_SPINLOCK_AS_MUTEX</name></cpp:ifdef>
  <return>return <expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>(</operator><name>pthread_mutex_t</name> <operator>*</operator><operator>)</operator><name>lock</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>pthread_spin_destroy</name><argument_list>(<argument><expr><operator>(</operator><name>pthread_spinlock_t</name> <operator>*</operator><operator>)</operator><name>lock</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosThreadSpinInit</name><parameter_list>(<parameter><decl><type><name>TdThreadSpinlock</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>pshared</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TD_USE_SPINLOCK_AS_MUTEX</name></cpp:ifdef>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pshared</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>(</operator><name>pthread_mutex_t</name> <operator>*</operator><operator>)</operator><name>lock</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>pthread_spin_init</name><argument_list>(<argument><expr><operator>(</operator><name>pthread_spinlock_t</name> <operator>*</operator><operator>)</operator><name>lock</name></expr></argument>, <argument><expr><name>pshared</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosThreadSpinLock</name><parameter_list>(<parameter><decl><type><name>TdThreadSpinlock</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TD_USE_SPINLOCK_AS_MUTEX</name></cpp:ifdef>
  <return>return <expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>(</operator><name>pthread_mutex_t</name> <operator>*</operator><operator>)</operator><name>lock</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>pthread_spin_lock</name><argument_list>(<argument><expr><operator>(</operator><name>pthread_spinlock_t</name> <operator>*</operator><operator>)</operator><name>lock</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosThreadSpinTrylock</name><parameter_list>(<parameter><decl><type><name>TdThreadSpinlock</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TD_USE_SPINLOCK_AS_MUTEX</name></cpp:ifdef>
  <return>return <expr><call><name>pthread_mutex_trylock</name><argument_list>(<argument><expr><operator>(</operator><name>pthread_mutex_t</name> <operator>*</operator><operator>)</operator><name>lock</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>pthread_spin_trylock</name><argument_list>(<argument><expr><operator>(</operator><name>pthread_spinlock_t</name> <operator>*</operator><operator>)</operator><name>lock</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosThreadSpinUnlock</name><parameter_list>(<parameter><decl><type><name>TdThreadSpinlock</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TD_USE_SPINLOCK_AS_MUTEX</name></cpp:ifdef>
  <return>return <expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>(</operator><name>pthread_mutex_t</name> <operator>*</operator><operator>)</operator><name>lock</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>pthread_spin_unlock</name><argument_list>(<argument><expr><operator>(</operator><name>pthread_spinlock_t</name> <operator>*</operator><operator>)</operator><name>lock</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosThreadTestCancel</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>pthread_testcancel</name><argument_list>()</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name></type> <name>taosThreadClear</name><parameter_list>(<parameter><decl><type><name>TdThread</name> <modifier>*</modifier></type><name>thread</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>thread</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TdThread</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function></unit>
