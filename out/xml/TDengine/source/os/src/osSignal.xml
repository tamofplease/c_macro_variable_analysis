<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/os/src/osSignal.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>

<comment type="block">/*
 * windows implementation
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>FWinSignalHandler</name>)<parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>signum</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function><type><name>void</name></type> <name>taosSetSignal</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>signum</name></decl></parameter>, <parameter><decl><type><name>FSignalHandler</name></type> <name>sigfp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>signum</name> <operator>==</operator> <name>SIGUSR1</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <comment type="line">// SIGHUP doesn't exist in windows, we handle it in the way of ctrlhandler</comment>
  <if_stmt><if>if <condition>(<expr><name>signum</name> <operator>==</operator> <name>SIGHUP</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SetConsoleCtrlHandler</name><argument_list>(<argument><expr><operator>(</operator><name>PHANDLER_ROUTINE</name><operator>)</operator><name>sigfp</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>signum</name></expr></argument>, <argument><expr><operator>(</operator><name>FWinSignalHandler</name><operator>)</operator><name>sigfp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosIgnSignal</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>signum</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>signum</name> <operator>==</operator> <name>SIGUSR1</name> <operator>||</operator> <name>signum</name> <operator>==</operator> <name>SIGHUP</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>signum</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosDflSignal</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>signum</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>signum</name> <operator>==</operator> <name>SIGUSR1</name> <operator>||</operator> <name>signum</name> <operator>==</operator> <name>SIGHUP</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>signum</name></expr></argument>, <argument><expr><name>SIG_DFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosKillChildOnParentStopped</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<comment type="block">/*
 * linux and darwin implementation
 */</comment>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>FLinuxSignalHandler</name>)<parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>signum</name></decl></parameter>, <parameter><decl><type><name>siginfo_t</name> <modifier>*</modifier></type><name>sigInfo</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function><type><name>void</name></type> <name>taosSetSignal</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>signum</name></decl></parameter>, <parameter><decl><type><name>FSignalHandler</name></type> <name>sigfp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>sigaction</name></name></type> <name>act</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>act</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>act</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
  <expr_stmt><expr><name><name>act</name><operator>.</operator><name>sa_flags</name></name> <operator>=</operator> <name>SA_SIGINFO</name> <operator>|</operator> <name>SA_RESTART</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>act</name><operator>.</operator><name>sa_sigaction</name></name> <operator>=</operator> <operator>(</operator><name>FLinuxSignalHandler</name><operator>)</operator><name>sigfp</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><name><name>act</name><operator>.</operator><name>sa_handler</name></name> <operator>=</operator> <name>sigfp</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>signum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>act</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosIgnSignal</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>signum</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>signum</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>taosDflSignal</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>signum</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>signum</name></expr></argument>, <argument><expr><name>SIG_DFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>taosKillChildOnParentStopped</name><parameter_list>()</parameter_list> <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_TD_DARWIN_64</name></cpp:ifndef>
  <expr_stmt><expr><call><name>prctl</name><argument_list>(<argument><expr><name>PR_SET_PDEATHSIG</name></expr></argument>, <argument><expr><name>SIGKILL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
