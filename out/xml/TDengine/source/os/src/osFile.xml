<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/os/src/osFile.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLOW_FORBID_FUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"osSemaphore.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_OK</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>W_OK</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_OK</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_SEND_FILE_STEP_</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/file.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_TD_DARWIN_64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sendfile.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINUX_FILE_NO_TEXT_OPTION</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_TEXT</name></cpp:macro>                    <cpp:value>LINUX_FILE_NO_TEXT_OPTION</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_SEND_FILE_STEP_</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WINDOWS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>int32_t</name></type> <name>FileFd</name>;</typedef>
<typedef>typedef <type><name>int32_t</name></type> <name>SocketFd</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>int32_t</name></type> <name>FileFd</name>;</typedef>
<typedef>typedef <type><name>int32_t</name></type> <name>SocketFd</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name>int32_t</name></type> <name>FileFd</name>;</typedef>

<typedef>typedef <type><struct>struct <name>TdFile</name> <block>{
  <decl_stmt><decl><type><name>TdThreadRwlock</name></type> <name>rwlock</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>            <name>refId</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FileFd</name></type>         <name>fd</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FILE</name>          <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
}</block></struct></type> * <name>TdFilePtr</name><operator>,</operator> <name>TdFile</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_WITH_LOCK</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<typedef>typedef <type><name><name>struct</name> <name>AutoDelFile</name></name> <modifier>*</modifier></type><name>AutoDelFilePtr</name>;</typedef>
<typedef>typedef <type><struct>struct <name>AutoDelFile</name> <block>{
  <decl_stmt><decl><type><name>char</name>          <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>AutoDelFilePtr</name></type> <name>lastAutoDelFilePtr</name></decl>;</decl_stmt>
}</block></struct></type> <name>AutoDelFile</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>TdThreadMutex</name></type>  <name>autoDelFileLock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>AutoDelFilePtr</name></type> <name>nowAutoDelFilePtr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>TdThreadOnce</name></type>   <name>autoDelFileInit</name> <init>= <expr><name>PTHREAD_ONCE_INIT</name></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>taosGetTmpfilePath</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>inputTmpDir</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileNamePrefix</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dstPath</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tdengineTmpFileNamePrefix</name> <init>= <expr><literal type="string">"tdengine-"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>        <name><name>tmpPath</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>inputTmpDir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmpPath</name></expr></argument>, <argument><expr><name>inputTmpDir</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>tmpPath</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <name><name>tmpPath</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>tmpPath</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>tmpPath</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>tdengineTmpFileNamePrefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>tmpPath</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>fileNamePrefix</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"-%d-%s"</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>PATH_MAX</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>tmpPath</name></expr></argument>, <argument><expr><name>fileNamePrefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>tmpPath</name></expr></argument>, <argument><expr><literal type="string">"-%d-%s"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>rand</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosRandStr</name><argument_list>(<argument><expr><name>rand</name></expr></argument>, <argument><expr><call><name>tListLen</name><argument_list>(<argument><expr><name>rand</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>dstPath</name></expr></argument>, <argument><expr><name>PATH_MAX</name></expr></argument>, <argument><expr><name>tmpPath</name></expr></argument>, <argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>rand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tdengineTmpFileNamePrefix</name> <init>= <expr><literal type="string">"tdengine-"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name></type>    <name><name>tmpPath</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>inputTmpDir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmpPath</name></expr></argument>, <argument><expr><name>inputTmpDir</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>uint64_t</name></type> <name>seqId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>tmpPath</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>tmpPath</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>tmpPath</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>tdengineTmpFileNamePrefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>tmpPath</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>fileNamePrefix</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"-%d-%s"</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>PATH_MAX</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>tmpPath</name></expr></argument>, <argument><expr><name>fileNamePrefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>tmpPath</name></expr></argument>, <argument><expr><literal type="string">"-%d-%s"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>rand</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>rand</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><call><name>atomic_add_fetch_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>seqId</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>dstPath</name></expr></argument>, <argument><expr><name>PATH_MAX</name></expr></argument>, <argument><expr><name>tmpPath</name></expr></argument>, <argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>rand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>taosCopyFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>to</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><call><name>CopyFile</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>buffer</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>bytes</name></decl>;</decl_stmt>

  <comment type="line">// fidfrom = open(from, O_RDONLY);</comment>
  <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>pFileFrom</name> <init>= <expr><call><name>taosOpenFile</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>TD_FILE_READ</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pFileFrom</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <comment type="line">// fidto = open(to, O_WRONLY | O_CREAT | O_EXCL, 0755);</comment>
  <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>pFileTo</name> <init>= <expr><call><name>taosOpenFile</name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr><name>TD_FILE_CREATE</name> <operator>|</operator> <name>TD_FILE_WRITE</name> <operator>|</operator> <name>TD_FILE_EXCL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pFileTo</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>bytes</name> <operator>=</operator> <call><name>taosReadFile</name><argument_list>(<argument><expr><name>pFileFrom</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>size</name> <operator>+=</operator> <name>bytes</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>taosWriteFile</name><argument_list>(<argument><expr><name>pFileTo</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>buffer</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>bytes</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>taosFsyncFile</name><argument_list>(<argument><expr><name>pFileTo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFileFrom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFileTo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>size</name></expr>;</return>

<label><name>_err</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>pFileFrom</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFileFrom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>pFileTo</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFileTo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>taosRemoveFile</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>TdFilePtr</name></type> <name>taosCreateFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>tdFileOptions</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>fp</name> <init>= <expr><call><name>taosOpenFile</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>tdFileOptions</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fp</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOENT</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// Try to create directory recursively</comment>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>taosMulMkDir</name><argument_list>(<argument><expr><call><name>taosDirName</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>taosOpenFile</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>tdFileOptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fp</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>fp</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosRemoveFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>remove</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosRenameFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>oldName</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>newName</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <decl_stmt><decl><type><name>bool</name></type> <name>code</name> <init>= <expr><call><name>MoveFileEx</name><argument_list>(<argument><expr><name>oldName</name></expr></argument>, <argument><expr><name>newName</name></expr></argument>, <argument><expr><name>MOVEFILE_REPLACE_EXISTING</name> <operator>|</operator> <name>MOVEFILE_COPY_ALLOWED</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to rename file %s to %s, reason:%s\n"</literal></expr></argument>, <argument><expr><name>oldName</name></expr></argument>, <argument><expr><name>newName</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><ternary><condition><expr><name>code</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>rename</name><argument_list>(<argument><expr><name>oldName</name></expr></argument>, <argument><expr><name>newName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to rename file %s to %s, reason:%s\n"</literal></expr></argument>, <argument><expr><name>oldName</name></expr></argument>, <argument><expr><name>newName</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosStatFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>mtime</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <decl_stmt><decl><type><name><name>struct</name> <name>_stati64</name></name></type> <name>fileStat</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>         <name>code</name> <init>= <expr><call><name>_stati64</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fileStat</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>fileStat</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>code</name> <init>= <expr><call><name>stat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fileStat</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <name><name>fileStat</name><operator>.</operator><name>st_size</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>mtime</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>mtime</name> <operator>=</operator> <name><name>fileStat</name><operator>.</operator><name>st_mtime</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>int32_t</name></type> <name>taosDevInoFile</name><parameter_list>(<parameter><decl><type><name>TdFilePtr</name></type> <name>pFile</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>stDev</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>stIno</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>fd</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// Please check if you have closed the file.</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>

  <decl_stmt><decl><type><name>BY_HANDLE_FILE_INFORMATION</name></type> <name>bhfi</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HANDLE</name></type>                     <name>handle</name> <init>= <expr><operator>(</operator><name>HANDLE</name><operator>)</operator><call><name>_get_osfhandle</name><argument_list>(<argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>GetFileInformationByHandle</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bhfi</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FALSE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"taosFStatFile get file info fail."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>stDev</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>stDev</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name><name>bhfi</name><operator>.</operator><name>dwVolumeSerialNumber</name></name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>stIno</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>stIno</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>bhfi</name><operator>.</operator><name>nFileIndexHigh</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>+</operator> <name><name>bhfi</name><operator>.</operator><name>nFileIndexLow</name></name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

  <decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>fileStat</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>code</name> <init>= <expr><call><name>fstat</name><argument_list>(<argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fileStat</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"taosFStatFile run fstat fail."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>stDev</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>stDev</name> <operator>=</operator> <name><name>fileStat</name><operator>.</operator><name>st_dev</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>stIno</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>stIno</name> <operator>=</operator> <name><name>fileStat</name><operator>.</operator><name>st_ino</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>autoDelFileList</name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>autoDelFileLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>nowAutoDelFilePtr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosRemoveFile</name><argument_list>(<argument><expr><name><name>nowAutoDelFilePtr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>AutoDelFilePtr</name></type> <name>tmp</name> <init>= <expr><name><name>nowAutoDelFilePtr</name><operator>-&gt;</operator><name>lastAutoDelFilePtr</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>nowAutoDelFilePtr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>nowAutoDelFilePtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nowAutoDelFilePtr</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>autoDelFileLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>autoDelFileLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>autoDelFileListInit</name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosThreadMutexInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>autoDelFileLock</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>atexit</name><argument_list>(<argument><expr><name>autoDelFileList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>autoDelFileListAdd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosThreadOnce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>autoDelFileInit</name></expr></argument>, <argument><expr><name>autoDelFileListInit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>autoDelFileLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>AutoDelFilePtr</name></type> <name>tmp</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AutoDelFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>lastAutoDelFilePtr</name></name> <operator>=</operator> <name>nowAutoDelFilePtr</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>taosMemoryStrDup</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>nowAutoDelFilePtr</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>autoDelFileLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>TdFilePtr</name></type> <name>taosOpenFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>tdFileOptions</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type>   <name>fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tdFileOptions</name> <operator>&amp;</operator> <name>TD_FILE_STREAM</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>tdFileOptions</name> <operator>&amp;</operator> <name>TD_FILE_APPEND</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>mode</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>tdFileOptions</name> <operator>&amp;</operator> <name>TD_FILE_TEXT</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"at+"</literal></expr> </then><else>: <expr><literal type="string">"ab+"</literal></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tdFileOptions</name> <operator>&amp;</operator> <name>TD_FILE_TRUNC</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>mode</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>tdFileOptions</name> <operator>&amp;</operator> <name>TD_FILE_TEXT</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"wt+"</literal></expr> </then><else>: <expr><literal type="string">"wb+"</literal></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>tdFileOptions</name> <operator>&amp;</operator> <name>TD_FILE_READ</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>tdFileOptions</name> <operator>&amp;</operator> <name>TD_FILE_WRITE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>mode</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>tdFileOptions</name> <operator>&amp;</operator> <name>TD_FILE_TEXT</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"rt"</literal></expr> </then><else>: <expr><literal type="string">"rb"</literal></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>mode</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>tdFileOptions</name> <operator>&amp;</operator> <name>TD_FILE_TEXT</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"rt+"</literal></expr> </then><else>: <expr><literal type="string">"rb+"</literal></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>tdFileOptions</name> <operator>&amp;</operator> <name>TD_FILE_EXCL</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// terrno = TAOS_SYSTEM_ERROR(errno);</comment>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>access</name> <init>= <expr><name>O_BINARY</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>access</name> <operator>|=</operator> <ternary><condition><expr><operator>(</operator><name>tdFileOptions</name> <operator>&amp;</operator> <name>TD_FILE_CREATE</name><operator>)</operator></expr> ?</condition><then> <expr><name>O_CREAT</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>tdFileOptions</name> <operator>&amp;</operator> <name>TD_FILE_WRITE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>tdFileOptions</name> <operator>&amp;</operator> <name>TD_FILE_READ</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>access</name> <operator>|=</operator> <name>O_RDWR</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tdFileOptions</name> <operator>&amp;</operator> <name>TD_FILE_WRITE</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>access</name> <operator>|=</operator> <name>O_WRONLY</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tdFileOptions</name> <operator>&amp;</operator> <name>TD_FILE_READ</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>access</name> <operator>|=</operator> <name>O_RDONLY</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>access</name> <operator>|=</operator> <ternary><condition><expr><operator>(</operator><name>tdFileOptions</name> <operator>&amp;</operator> <name>TD_FILE_TRUNC</name><operator>)</operator></expr> ?</condition><then> <expr><name>O_TRUNC</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name>access</name> <operator>|=</operator> <ternary><condition><expr><operator>(</operator><name>tdFileOptions</name> <operator>&amp;</operator> <name>TD_FILE_APPEND</name><operator>)</operator></expr> ?</condition><then> <expr><name>O_APPEND</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name>access</name> <operator>|=</operator> <ternary><condition><expr><operator>(</operator><name>tdFileOptions</name> <operator>&amp;</operator> <name>TD_FILE_TEXT</name><operator>)</operator></expr> ?</condition><then> <expr><name>O_TEXT</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name>access</name> <operator>|=</operator> <ternary><condition><expr><operator>(</operator><name>tdFileOptions</name> <operator>&amp;</operator> <name>TD_FILE_EXCL</name><operator>)</operator></expr> ?</condition><then> <expr><name>O_EXCL</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
    <expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>_open</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>access</name></expr></argument>, <argument><expr><name>_S_IREAD</name> <operator>|</operator> <name>_S_IWRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>access</name></expr></argument>, <argument><expr><name>S_IRWXU</name> <operator>|</operator> <name>S_IRWXG</name> <operator>|</operator> <name>S_IRWXO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// terrno = TAOS_SYSTEM_ERROR(errno);</comment>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>pFile</name> <init>= <expr><operator>(</operator><name>TdFilePtr</name><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TdFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// terrno = TSDB_CODE_OUT_OF_MEMORY;</comment>
    <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>fp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FILE_WITH_LOCK</name></expr></cpp:if>
  <expr_stmt><expr><call><name>taosThreadRwlockInit</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pFile</name><operator>-&gt;</operator><name>rwlock</name></name><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><name><name>pFile</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFile</name><operator>-&gt;</operator><name>fp</name></name> <operator>=</operator> <name>fp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFile</name><operator>-&gt;</operator><name>refId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>tdFileOptions</name> <operator>&amp;</operator> <name>TD_FILE_AUTO_DEL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>autoDelFileListAdd</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>pFile</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosCloseFile</name><parameter_list>(<parameter><decl><type><name>TdFilePtr</name> <modifier>*</modifier></type><name>ppFile</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ppFile</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>ppFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FILE_WITH_LOCK</name></expr></cpp:if>
  <expr_stmt><expr><call><name>taosThreadRwlockWrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>ppFile</name><operator>)</operator><operator>-&gt;</operator><name>rwlock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>ppFile</name><operator>)</operator><operator>-&gt;</operator><name>fp</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>ppFile</name><operator>)</operator><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>ppFile</name><operator>)</operator><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>ppFile</name><operator>)</operator><operator>-&gt;</operator><name>fp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>ppFile</name><operator>)</operator><operator>-&gt;</operator><name>fd</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
    <decl_stmt><decl><type><name>HANDLE</name></type> <name>h</name> <init>= <expr><operator>(</operator><name>HANDLE</name><operator>)</operator><call><name>_get_osfhandle</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>ppFile</name><operator>)</operator><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>!</operator><call><name>FlushFileBuffers</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="line">// warning: never fsync silently in base lib</comment>
    <comment type="block">/*fsync((*ppFile)-&gt;fd);*/</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>close</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>ppFile</name><operator>)</operator><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>ppFile</name><operator>)</operator><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>ppFile</name><operator>)</operator><operator>-&gt;</operator><name>refId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FILE_WITH_LOCK</name></expr></cpp:if>
  <expr_stmt><expr><call><name>taosThreadRwlockUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>ppFile</name><operator>)</operator><operator>-&gt;</operator><name>rwlock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadRwlockDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>ppFile</name><operator>)</operator><operator>-&gt;</operator><name>rwlock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><operator>*</operator><name>ppFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppFile</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>taosReadFile</name><parameter_list>(<parameter><decl><type><name>TdFilePtr</name></type> <name>pFile</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FILE_WITH_LOCK</name></expr></cpp:if>
  <expr_stmt><expr><call><name>taosThreadRwlockRdlock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pFile</name><operator>-&gt;</operator><name>rwlock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>fd</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// Please check if you have closed the file.</comment>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>leftbytes</name> <init>= <expr><name>count</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>readbytes</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>tbuf</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>leftbytes</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
    <expr_stmt><expr><name>readbytes</name> <operator>=</operator> <call><name>_read</name><argument_list>(<argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>tbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>leftbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>readbytes</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>tbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>leftbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <if_stmt><if>if <condition>(<expr><name>readbytes</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if> <else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FILE_WITH_LOCK</name></expr></cpp:if>
        <expr_stmt><expr><call><name>taosThreadRwlockUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pFile</name><operator>-&gt;</operator><name>rwlock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>readbytes</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FILE_WITH_LOCK</name></expr></cpp:if>
      <expr_stmt><expr><call><name>taosThreadRwlockUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pFile</name><operator>-&gt;</operator><name>rwlock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <return>return <expr><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>count</name> <operator>-</operator> <name>leftbytes</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>leftbytes</name> <operator>-=</operator> <name>readbytes</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>tbuf</name> <operator>+=</operator> <name>readbytes</name></expr>;</expr_stmt>
  </block_content>}</block></while>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FILE_WITH_LOCK</name></expr></cpp:if>
  <expr_stmt><expr><call><name>taosThreadRwlockUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pFile</name><operator>-&gt;</operator><name>rwlock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>taosPReadFile</name><parameter_list>(<parameter><decl><type><name>TdFilePtr</name></type> <name>pFile</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FILE_WITH_LOCK</name></expr></cpp:if>
  <expr_stmt><expr><call><name>taosThreadRwlockRdlock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pFile</name><operator>-&gt;</operator><name>rwlock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>fd</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// Please check if you have closed the file.</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <decl_stmt><decl><type><name>size_t</name></type> <name>pos</name> <init>= <expr><call><name>_lseeki64</name><argument_list>(<argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>_lseeki64</name><argument_list>(<argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>ret</name> <init>= <expr><call><name>_read</name><argument_list>(<argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>_lseeki64</name><argument_list>(<argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>ret</name> <init>= <expr><call><name>pread</name><argument_list>(<argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FILE_WITH_LOCK</name></expr></cpp:if>
  <expr_stmt><expr><call><name>taosThreadRwlockUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pFile</name><operator>-&gt;</operator><name>rwlock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>taosWriteFile</name><parameter_list>(<parameter><decl><type><name>TdFilePtr</name></type> <name>pFile</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FILE_WITH_LOCK</name></expr></cpp:if>
  <expr_stmt><expr><call><name>taosThreadRwlockWrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pFile</name><operator>-&gt;</operator><name>rwlock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>fd</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// Please check if you have closed the file.</comment>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>nleft</name> <init>= <expr><name>count</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>nwritten</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>tbuf</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>nleft</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>nwritten</name> <operator>=</operator> <call><name>write</name><argument_list>(<argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>tbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>nleft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>nwritten</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FILE_WITH_LOCK</name></expr></cpp:if>
      <expr_stmt><expr><call><name>taosThreadRwlockUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pFile</name><operator>-&gt;</operator><name>rwlock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>nleft</name> <operator>-=</operator> <name>nwritten</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>tbuf</name> <operator>+=</operator> <name>nwritten</name></expr>;</expr_stmt>
  </block_content>}</block></while>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FILE_WITH_LOCK</name></expr></cpp:if>
  <expr_stmt><expr><call><name>taosThreadRwlockUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pFile</name><operator>-&gt;</operator><name>rwlock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>taosPWriteFile</name><parameter_list>(<parameter><decl><type><name>TdFilePtr</name></type> <name>pFile</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FILE_WITH_LOCK</name></expr></cpp:if>
  <expr_stmt><expr><call><name>taosThreadRwlockWrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pFile</name><operator>-&gt;</operator><name>rwlock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>fd</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// Please check if you have closed the file.</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <decl_stmt><decl><type><name>size_t</name></type> <name>pos</name> <init>= <expr><call><name>_lseeki64</name><argument_list>(<argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>_lseeki64</name><argument_list>(<argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>ret</name> <init>= <expr><call><name>_write</name><argument_list>(<argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>_lseeki64</name><argument_list>(<argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>ret</name> <init>= <expr><call><name>pwrite</name><argument_list>(<argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FILE_WITH_LOCK</name></expr></cpp:if>
  <expr_stmt><expr><call><name>taosThreadRwlockUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pFile</name><operator>-&gt;</operator><name>rwlock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>taosLSeekFile</name><parameter_list>(<parameter><decl><type><name>TdFilePtr</name></type> <name>pFile</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>whence</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FILE_WITH_LOCK</name></expr></cpp:if>
  <expr_stmt><expr><call><name>taosThreadRwlockRdlock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pFile</name><operator>-&gt;</operator><name>rwlock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>fd</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// Please check if you have closed the file.</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>ret</name> <init>= <expr><call><name>_lseeki64</name><argument_list>(<argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>whence</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>ret</name> <init>= <expr><call><name>lseek</name><argument_list>(<argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>whence</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FILE_WITH_LOCK</name></expr></cpp:if>
  <expr_stmt><expr><call><name>taosThreadRwlockUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pFile</name><operator>-&gt;</operator><name>rwlock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosFStatFile</name><parameter_list>(<parameter><decl><type><name>TdFilePtr</name></type> <name>pFile</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>mtime</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>fd</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// Please check if you have closed the file.</comment>

  <decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>fileStat</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>_fstat</name><argument_list>(<argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fileStat</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>fstat</name><argument_list>(<argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fileStat</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <name><name>fileStat</name><operator>.</operator><name>st_size</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>mtime</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>mtime</name> <operator>=</operator> <name><name>fileStat</name><operator>.</operator><name>st_mtime</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosLockFile</name><parameter_list>(<parameter><decl><type><name>TdFilePtr</name></type> <name>pFile</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>fd</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// Please check if you have closed the file.</comment>

  <return>return <expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>flock</name><argument_list>(<argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>LOCK_EX</name> <operator>|</operator> <name>LOCK_NB</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosUnLockFile</name><parameter_list>(<parameter><decl><type><name>TdFilePtr</name></type> <name>pFile</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>fd</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// Please check if you have closed the file.</comment>

  <return>return <expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>flock</name><argument_list>(<argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>LOCK_UN</name> <operator>|</operator> <name>LOCK_NB</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosFtruncateFile</name><parameter_list>(<parameter><decl><type><name>TdFilePtr</name></type> <name>pFile</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>l_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><name><name>pFile</name><operator>-&gt;</operator><name>fd</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EBADF</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Ftruncate file error, fd arg was negative\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>HANDLE</name></type> <name>h</name> <init>= <expr><operator>(</operator><name>HANDLE</name><operator>)</operator><call><name>_get_osfhandle</name><argument_list>(<argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>LARGE_INTEGER</name></type> <name>li_0</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>li_0</name><operator>.</operator><name>QuadPart</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>BOOL</name></type> <name>cur</name> <init>= <expr><call><name>SetFilePointerEx</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>li_0</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FILE_CURRENT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>cur</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"SetFilePointerEx Error getting current position in file.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>LARGE_INTEGER</name></type> <name>li_size</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>li_size</name><operator>.</operator><name>QuadPart</name></name> <operator>=</operator> <name>l_size</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>BOOL</name></type> <name>cur2</name> <init>= <expr><call><name>SetFilePointerEx</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>li_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FILE_BEGIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>cur2</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"SetFilePointerEx GetLastError is: %d\n"</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <switch>switch <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>ERROR_INVALID_HANDLE</name></expr>:</case>
        <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EBADF</name></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EIO</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SetEndOfFile</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"SetEndOfFile GetLastError is:%d"</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <switch>switch <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>ERROR_INVALID_HANDLE</name></expr>:</case>
        <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EBADF</name></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EIO</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>fd</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// Please check if you have closed the file.</comment>

  <return>return <expr><call><name>ftruncate</name><argument_list>(<argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>l_size</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosFsyncFile</name><parameter_list>(<parameter><decl><type><name>TdFilePtr</name></type> <name>pFile</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// this implementation is WRONG</comment>
  <comment type="line">// fflush is not a replacement of fsync</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pFile</name><operator>-&gt;</operator><name>fp</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>fflush</name><argument_list>(<argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pFile</name><operator>-&gt;</operator><name>fd</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
    <decl_stmt><decl><type><name>HANDLE</name></type> <name>h</name> <init>= <expr><operator>(</operator><name>HANDLE</name><operator>)</operator><call><name>_get_osfhandle</name><argument_list>(<argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>!</operator><call><name>FlushFileBuffers</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <return>return <expr><call><name>fsync</name><argument_list>(<argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>taosFSendFile</name><parameter_list>(<parameter><decl><type><name>TdFilePtr</name></type> <name>pFileOut</name></decl></parameter>, <parameter><decl><type><name>TdFilePtr</name></type> <name>pFileIn</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>offset</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pFileOut</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pFileIn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pFileIn</name><operator>-&gt;</operator><name>fd</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pFileOut</name><operator>-&gt;</operator><name>fd</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>

  <expr_stmt><expr><call><name>_lseeki64</name><argument_list>(<argument><expr><name><name>pFileIn</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>*</operator><name>offset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>writeLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buffer</name><index>[<expr><name>_SEND_FILE_STEP_</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>len</name> <operator>&lt;</operator> <operator>(</operator><name>size</name> <operator>-</operator> <name>_SEND_FILE_STEP_</name><operator>)</operator></expr>;</condition> <incr><expr><name>len</name> <operator>+=</operator> <name>_SEND_FILE_STEP_</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>rlen</name> <init>= <expr><call><name>_read</name><argument_list>(<argument><expr><name><name>pFileIn</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>buffer</name></expr></argument>, <argument><expr><name>_SEND_FILE_STEP_</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>rlen</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>writeLen</name></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rlen</name> <operator>&lt;</operator> <name>_SEND_FILE_STEP_</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name><name>pFileOut</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>rlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>writeLen</name> <operator>+</operator> <name>rlen</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name><name>pFileOut</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>buffer</name></expr></argument>, <argument><expr><name>_SEND_FILE_STEP_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>writeLen</name> <operator>+=</operator> <name>_SEND_FILE_STEP_</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>remain</name> <init>= <expr><name>size</name> <operator>-</operator> <name>writeLen</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>remain</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>rlen</name> <init>= <expr><call><name>_read</name><argument_list>(<argument><expr><name><name>pFileIn</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>remain</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>rlen</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>writeLen</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name><name>pFileOut</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>remain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>writeLen</name> <operator>+=</operator> <name>remain</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>writeLen</name></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_DARWIN_64</name></expr></argument>)</argument_list></call></expr></cpp:elif>

  <expr_stmt><expr><call><name>lseek</name><argument_list>(<argument><expr><name><name>pFileIn</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>offset</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>writeLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buffer</name><index>[<expr><name>_SEND_FILE_STEP_</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>len</name> <operator>&lt;</operator> <operator>(</operator><name>size</name> <operator>-</operator> <name>_SEND_FILE_STEP_</name><operator>)</operator></expr>;</condition> <incr><expr><name>len</name> <operator>+=</operator> <name>_SEND_FILE_STEP_</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>rlen</name> <init>= <expr><call><name>read</name><argument_list>(<argument><expr><name><name>pFileIn</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>buffer</name></expr></argument>, <argument><expr><name>_SEND_FILE_STEP_</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>rlen</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>writeLen</name></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rlen</name> <operator>&lt;</operator> <name>_SEND_FILE_STEP_</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name><name>pFileOut</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>rlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>writeLen</name> <operator>+</operator> <name>rlen</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name><name>pFileOut</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>buffer</name></expr></argument>, <argument><expr><name>_SEND_FILE_STEP_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>writeLen</name> <operator>+=</operator> <name>_SEND_FILE_STEP_</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>remain</name> <init>= <expr><name>size</name> <operator>-</operator> <name>writeLen</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>remain</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>rlen</name> <init>= <expr><call><name>read</name><argument_list>(<argument><expr><name><name>pFileIn</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>remain</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>rlen</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>writeLen</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name><name>pFileOut</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>remain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>writeLen</name> <operator>+=</operator> <name>remain</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>writeLen</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>leftbytes</name> <init>= <expr><name>size</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>sentbytes</name></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>leftbytes</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_TD_ARM_32</name></cpp:ifdef>
    <expr_stmt><expr><name>sentbytes</name> <operator>=</operator> <call><name>sendfile</name><argument_list>(<argument><expr><name><name>pFileOut</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>pFileIn</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>int</name> <operator>*</operator><operator>)</operator><name>offset</name></expr></argument>, <argument><expr><name>leftbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>sentbytes</name> <operator>=</operator> <call><name>sendfile</name><argument_list>(<argument><expr><name><name>pFileOut</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>pFileIn</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>leftbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <if_stmt><if>if <condition>(<expr><name>sentbytes</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINTR</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>EAGAIN</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>EWOULDBLOCK</name></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>sentbytes</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>size</name> <operator>-</operator> <name>leftbytes</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>leftbytes</name> <operator>-=</operator> <name>sentbytes</name></expr>;</expr_stmt>
  </block_content>}</block></while>

  <return>return <expr><name>size</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosFprintfFile</name><parameter_list>(<parameter><decl><type><name>TdFilePtr</name></type> <name>pFile</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>fp</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vfprintf</name><argument_list>(<argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>taosValidFile</name><parameter_list>(<parameter><decl><type><name>TdFilePtr</name></type> <name>pFile</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>pFile</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pFile</name><operator>-&gt;</operator><name>fd</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosUmaskFile</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>maskVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>umask</name><argument_list>(<argument><expr><name>maskVal</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosGetErrorFile</name><parameter_list>(<parameter><decl><type><name>TdFilePtr</name></type> <name>pFile</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>errno</name></expr>;</return> </block_content>}</block></function>
<function><type><name>int64_t</name></type> <name>taosGetLineFile</name><parameter_list>(<parameter><decl><type><name>TdFilePtr</name></type> <name>pFile</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><name>__restrict</name></type> <name>ptrBuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>ptrBuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptrBuf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><operator>*</operator><name>ptrBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>fp</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <expr_stmt><expr><operator>*</operator><name>ptrBuf</name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptrBuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><operator>*</operator><name>ptrBuf</name></expr></argument>, <argument><expr><literal type="number">1023</literal></expr></argument>, <argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><operator>*</operator><name>ptrBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ptrBuf</name><operator>)</operator><index>[<expr><literal type="number">1023</literal></expr>]</index> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><call><name>strlen</name><argument_list>(<argument><expr><operator>*</operator><name>ptrBuf</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>getline</name><argument_list>(<argument><expr><name>ptrBuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>taosGetsFile</name><parameter_list>(<parameter><decl><type><name>TdFilePtr</name></type> <name>pFile</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>maxSize</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><name>__restrict</name></type> <name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>fp</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>maxSize</name></expr></argument>, <argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosEOFFile</name><parameter_list>(<parameter><decl><type><name>TdFilePtr</name></type> <name>pFile</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>fp</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>feof</name><argument_list>(<argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>taosCheckAccessFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>tdFileAccessOptions</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>tdFileAccessOptions</name> <operator>&amp;</operator> <name>TD_FILE_ACCESS_EXIST_OK</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>F_OK</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>tdFileAccessOptions</name> <operator>&amp;</operator> <name>TD_FILE_ACCESS_READ_OK</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>R_OK</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>tdFileAccessOptions</name> <operator>&amp;</operator> <name>TD_FILE_ACCESS_WRITE_OK</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>W_OK</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <return>return <expr><call><name>_access</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>access</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>taosCheckExistFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>taosCheckAccessFile</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>, <argument><expr><name>TD_FILE_ACCESS_EXIST_OK</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function><empty_stmt>;</empty_stmt>
</unit>
