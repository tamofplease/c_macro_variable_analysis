<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/os/src/osTimer.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLOW_FORBID_FUNC</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Mmsystem.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name> <name>:</name> <name>4244</name><name>)</name></cpp:pragma>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>win_timer_f</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>signo</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function><type><name>void</name> <name>WINAPI</name></type> <name>taosWinOnTimer</name><parameter_list>(<parameter><decl><type><name>UINT</name></type> <name>wTimerID</name></decl></parameter>, <parameter><decl><type><name>UINT</name></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>DWORD_PTR</name></type> <name>dwUser</name></decl></parameter>, <parameter><decl><type><name>DWORD_PTR</name></type> <name>dwl</name></decl></parameter>, <parameter><decl><type><name>DWORD_PTR</name></type> <name>dw2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>win_timer_f</name></type> <name>callback</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>win_timer_f</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dwUser</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>callback</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>callback</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>MMRESULT</name></type> <name>timerId</name></decl>;</decl_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_DARWIN_64</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/event.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/syscall.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> (<modifier>*</modifier><name>timer_callback</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>          <name>timer_ms</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>TdThread</name></type>     <name>timer_thread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>          <name>timer_kq</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>timer_stop</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>timer_routine</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>arg</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>setThreadName</name><argument_list>(<argument><expr><literal type="string">"timer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int</name></type>             <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>to</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>to</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name>timer_ms</name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>to</name><operator>.</operator><name>tv_nsec</name></name> <operator>=</operator> <operator>(</operator><name>timer_ms</name> <operator>%</operator> <literal type="number">1000</literal><operator>)</operator> <operator>*</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
  <while>while <condition>(<expr><operator>!</operator><name>timer_stop</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>kevent64_s</name></name></type> <name><name>kev</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>kevent64</name><argument_list>(<argument><expr><name>timer_kq</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>kev</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>kev</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>kev</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"==%s[%d]%s()==kevent64 failed\n"</literal></expr></argument>, <argument><expr><call><name>taosDirEntryBaseName</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>timer_callback</name><argument_list>(<argument><expr><name>SIGALRM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// just mock</comment>
  </block_content>}</block></while>

  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taos_block_sigalrm</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// we don't know if there's any specific API for SIGALRM to deliver to specific thread</comment>
  <comment type="line">// this implementation relies on kqueue rather than SIGALRM</comment>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/syscall.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>taosDeleteTimer</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tharg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>timer_t</name> <modifier>*</modifier></type><name>pTimer</name> <init>= <expr><name>tharg</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>timer_delete</name><argument_list>(<argument><expr><operator>*</operator><name>pTimer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>TdThread</name></type>      <name>timerThread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>timer_t</name></type>       <name>timerId</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>bool</name></type> <name>stopTimer</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name>         <modifier>*</modifier></type><name>taosProcessAlarmSignal</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tharg</name></decl></parameter>)</parameter_list> <block>{<block_content>
          <comment type="line">// Block the signal</comment>
  <decl_stmt><decl><type><name>sigset_t</name></type> <name>sigset</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sigemptyset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sigset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sigaddset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sigset</name></expr></argument>, <argument><expr><name>SIGALRM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sigprocmask</name><argument_list>(<argument><expr><name>SIG_BLOCK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sigset</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>callback</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list> <init>= <expr><name>tharg</name></expr></init>;</function_decl>

  <decl_stmt><decl><type><name><name>struct</name> <name>sigevent</name></name></type> <name>sevent</name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>setThreadName</name><argument_list>(<argument><expr><literal type="string">"tmr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_ALPINE</name></cpp:ifdef>
  <expr_stmt><expr><name><name>sevent</name><operator>.</operator><name>sigev_notify</name></name> <operator>=</operator> <name>SIGEV_THREAD</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sevent</name><operator>.</operator><name>sigev_value</name><operator>.</operator><name>sival_int</name></name> <operator>=</operator> <call><name>syscall</name><argument_list>(<argument><expr><name>__NR_gettid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><name><name>sevent</name><operator>.</operator><name>sigev_notify</name></name> <operator>=</operator> <name>SIGEV_THREAD_ID</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sevent</name><operator>.</operator><name>_sigev_un</name><operator>.</operator><name>_tid</name></name> <operator>=</operator> <call><name>syscall</name><argument_list>(<argument><expr><name>__NR_gettid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><name><name>sevent</name><operator>.</operator><name>sigev_signo</name></name> <operator>=</operator> <name>SIGALRM</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>timer_create</name><argument_list>(<argument><expr><name>CLOCK_REALTIME</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sevent</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timerId</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// printf("Failed to create timer");</comment>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosThreadCleanupPush</name><argument_list>(<argument><expr><name>taosDeleteTimer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>struct</name> <name>itimerspec</name></name></type> <name>ts</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ts</name><operator>.</operator><name>it_value</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ts</name><operator>.</operator><name>it_value</name><operator>.</operator><name>tv_nsec</name></name> <operator>=</operator> <literal type="number">1000000</literal> <operator>*</operator> <name>MSECONDS_PER_TICK</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ts</name><operator>.</operator><name>it_interval</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ts</name><operator>.</operator><name>it_interval</name><operator>.</operator><name>tv_nsec</name></name> <operator>=</operator> <literal type="number">1000000</literal> <operator>*</operator> <name>MSECONDS_PER_TICK</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>timer_settime</name><argument_list>(<argument><expr><name>timerId</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <comment type="line">// printf("Failed to init timer");</comment>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>signo</name></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>!</operator><name>stopTimer</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>sigwait</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sigset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>signo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
              <comment type="line">// printf("Failed to wait signal: number %d", signo);</comment>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
            <comment type="block">/* //printf("Signal handling: number %d ......\n", signo); */</comment>

            <expr_stmt><expr><call><name>callback</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>taosThreadCleanupPop</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>taosInitTimer</name><parameter_list>(<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>callback</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ms</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <decl_stmt><decl><type><name>DWORD_PTR</name></type> <name>param</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>callback</name><operator>)</operator></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>timerId</name> <operator>=</operator> <call><name>timeSetEvent</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>LPTIMECALLBACK</name><operator>)</operator><name>taosWinOnTimer</name></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><name>TIME_PERIODIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>timerId</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_DARWIN_64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>timer_kq</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>timer_stop</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>timer_ms</name> <operator>=</operator> <name>ms</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>timer_callback</name> <operator>=</operator> <name>callback</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>timer_kq</name> <operator>=</operator> <call><name>kqueue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>timer_kq</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"==%s[%d]%s()==failed to create timer kq\n"</literal></expr></argument>, <argument><expr><call><name>taosDirEntryBaseName</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// since no caller of this func checks the return value for the moment</comment>
    <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>taosThreadCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timer_thread</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>timer_routine</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"==%s[%d]%s()==failed to create timer thread\n"</literal></expr></argument>, <argument><expr><call><name>taosDirEntryBaseName</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>,
            <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// since no caller of this func checks the return value for the moment</comment>
    <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><name>stopTimer</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>TdThreadAttr</name></type> <name>tattr</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosThreadAttrInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tattr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><call><name>taosThreadCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timerThread</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tattr</name></expr></argument>, <argument><expr><name>taosProcessAlarmSignal</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosThreadAttrDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tattr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">// printf("failed to create timer thread");</comment>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="line">// printf("timer thread:0x%08" PRIx64 " is created", taosGetPthreadId(timerThread));</comment>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosUninitTimer</name><parameter_list>()</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <expr_stmt><expr><call><name>timeKillEvent</name><argument_list>(<argument><expr><name>timerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_DARWIN_64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>timer_stop</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>taosThreadJoin</name><argument_list>(<argument><expr><name>timer_thread</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"==%s[%d]%s()==failed to join timer thread\n"</literal></expr></argument>, <argument><expr><call><name>taosDirEntryBaseName</name><argument_list>(<argument><expr><name>__FILE__</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// since no caller of this func checks the return value for the moment</comment>
    <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>timer_kq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>timer_kq</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><name>stopTimer</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

  <comment type="line">// printf("join timer thread:0x%08" PRIx64, taosGetPthreadId(timerThread));</comment>
  <expr_stmt><expr><call><name>taosThreadJoin</name><argument_list>(<argument><expr><name>timerThread</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>taosGetMonotonicMs</name><parameter_list>()</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>  
  return getMonotonicUs() / 1000;
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>taosMonotonicInit</name><parameter_list>()</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  return monotonicInit();
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><name>NULL</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
</unit>
