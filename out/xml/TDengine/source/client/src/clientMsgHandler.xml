<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/client/src/clientMsgHandler.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clientInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clientLog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"query.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tname.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdatablock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"systable.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setErrno</name><parameter_list>(<parameter><decl><type><name>SRequestObj</name><modifier>*</modifier></type> <name>pRequest</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>genericRspCallback</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>SDataBuf</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SRequestObj</name><modifier>*</modifier></type> <name>pRequest</name> <init>= <expr><name>param</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>setErrno</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>NEED_CLIENT_RM_TBLMETA_REQ</name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>removeMeta</name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name></name></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>targetTableList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pEpSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>queryFp</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>queryFp</name></name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>param</name></name></expr></argument>, <argument><expr><name>pRequest</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>tsem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>rspSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>processConnectRsp</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>SDataBuf</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SRequestObj</name> <modifier>*</modifier></type><name>pRequest</name> <init>= <expr><call><name>acquireRequest</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name>param</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pRequest</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>End</name>;</goto>
  </block_content>}</block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>setErrno</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tsem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>rspSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>End</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STscObj</name><modifier>*</modifier></type> <name>pTscObj</name> <init>= <expr><name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name></name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>pAppHbMgr</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>setErrno</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>, <argument><expr><name>TSDB_CODE_TSC_DISCONNECTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tsem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>rspSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>End</name>;</goto>
  </block_content>}</block></if></if_stmt>
  
  <decl_stmt><decl><type><name>SConnectRsp</name></type> <name>connectRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSConnectRsp</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>connectRsp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_TSC_INVALID_VERSION</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setErrno</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tsem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>rspSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>End</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>now</name> <init>= <expr><call><name>taosGetTimestampSec</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>delta</name> <init>= <expr><call><name>abs</name><argument_list>(<argument><expr><name>now</name> <operator>-</operator> <name><name>connectRsp</name><operator>.</operator><name>svrTimestamp</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>delta</name> <operator>&gt;</operator> <name>timestampDeltaLimit</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_TIME_UNSYNCED</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"time diff:%ds is too big"</literal></expr></argument>, <argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setErrno</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tsem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>rspSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>End</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/*assert(connectRsp.epSet.numOfEps &gt; 0);*/</comment>
  <if_stmt><if>if <condition>(<expr><name><name>connectRsp</name><operator>.</operator><name>epSet</name><operator>.</operator><name>numOfEps</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>setErrno</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>, <argument><expr><name>TSDB_CODE_APP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tsem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>rspSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>End</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>connectRsp</name><operator>.</operator><name>dnodeNum</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SEpSet</name></type> <name>srcEpSet</name> <init>= <expr><call><name>getEpSet_s</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>mgmtEp</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SEpSet</name></type> <name>dstEpSet</name> <init>= <expr><name><name>connectRsp</name><operator>.</operator><name>epSet</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>rpcSetDefaultAddr</name><argument_list>(<argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>pTransporter</name></name></expr></argument>, <argument><expr><name><name>srcEpSet</name><operator>.</operator><name>eps</name><index>[<expr><name><name>srcEpSet</name><operator>.</operator><name>inUse</name></name></expr>]</index></name><operator>.</operator><name>fqdn</name></expr></argument>,
                      <argument><expr><name><name>dstEpSet</name><operator>.</operator><name>eps</name><index>[<expr><name><name>dstEpSet</name><operator>.</operator><name>inUse</name></name></expr>]</index></name><operator>.</operator><name>fqdn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>connectRsp</name><operator>.</operator><name>dnodeNum</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isEpsetEqual</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>mgmtEp</name><operator>.</operator><name>epSet</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>connectRsp</name><operator>.</operator><name>epSet</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SEpSet</name><modifier>*</modifier></type> <name>pOrig</name> <init>= <expr><operator>&amp;</operator><name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>mgmtEp</name><operator>.</operator><name>epSet</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SEp</name><modifier>*</modifier></type>    <name>pOrigEp</name> <init>= <expr><operator>&amp;</operator><name><name>pOrig</name><operator>-&gt;</operator><name>eps</name><index>[<expr><name><name>pOrig</name><operator>-&gt;</operator><name>inUse</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SEp</name><modifier>*</modifier></type>    <name>pNewEp</name> <init>= <expr><operator>&amp;</operator><name><name>connectRsp</name><operator>.</operator><name>epSet</name><operator>.</operator><name>eps</name><index>[<expr><name><name>connectRsp</name><operator>.</operator><name>epSet</name><operator>.</operator><name>inUse</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"mnode epset updated from %d/%d=&gt;%s:%d to %d/%d=&gt;%s:%d in connRsp"</literal></expr></argument>, <argument><expr><name><name>pOrig</name><operator>-&gt;</operator><name>inUse</name></name></expr></argument>, <argument><expr><name><name>pOrig</name><operator>-&gt;</operator><name>numOfEps</name></name></expr></argument>,
             <argument><expr><name><name>pOrigEp</name><operator>-&gt;</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name><name>pOrigEp</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name><name>connectRsp</name><operator>.</operator><name>epSet</name><operator>.</operator><name>inUse</name></name></expr></argument>, <argument><expr><name><name>connectRsp</name><operator>.</operator><name>epSet</name><operator>.</operator><name>numOfEps</name></name></expr></argument>, <argument><expr><name><name>pNewEp</name><operator>-&gt;</operator><name>fqdn</name></name></expr></argument>,
             <argument><expr><name><name>pNewEp</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>updateEpSet_s</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>mgmtEp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>connectRsp</name><operator>.</operator><name>epSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>connectRsp</name><operator>.</operator><name>epSet</name><operator>.</operator><name>numOfEps</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"0x%"</literal> <name>PRIx64</name> <literal type="string">" epSet.fqdn[%d]:%s port:%d, connObj:0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
             <argument><expr><name><name>connectRsp</name><operator>.</operator><name>epSet</name><operator>.</operator><name>eps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fqdn</name></expr></argument>, <argument><expr><name><name>connectRsp</name><operator>.</operator><name>epSet</name><operator>.</operator><name>eps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>port</name></expr></argument>, <argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>sysInfo</name></name> <operator>=</operator> <name><name>connectRsp</name><operator>.</operator><name>sysInfo</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>connId</name></name> <operator>=</operator> <name><name>connectRsp</name><operator>.</operator><name>connId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>acctId</name></name> <operator>=</operator> <name><name>connectRsp</name><operator>.</operator><name>acctId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>sVer</name></name></expr></argument>, <argument><expr><name><name>connectRsp</name><operator>.</operator><name>sVer</name></name></expr></argument>, <argument><expr><call><name>tListLen</name><argument_list>(<argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>sVer</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>sDetailVer</name></name></expr></argument>, <argument><expr><name><name>connectRsp</name><operator>.</operator><name>sDetailVer</name></name></expr></argument>, <argument><expr><call><name>tListLen</name><argument_list>(<argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>sDetailVer</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// update the appInstInfo</comment>
  <expr_stmt><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>clusterId</name></name> <operator>=</operator> <name><name>connectRsp</name><operator>.</operator><name>clusterId</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>connType</name></name> <operator>=</operator> <name><name>connectRsp</name><operator>.</operator><name>connType</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>hbRegisterConn</name><argument_list>(<argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>pAppHbMgr</name></name></expr></argument>, <argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>connectRsp</name><operator>.</operator><name>clusterId</name></name></expr></argument>, <argument><expr><name><name>connectRsp</name><operator>.</operator><name>connType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"0x%"</literal> <name>PRIx64</name> <literal type="string">" clusterId:%"</literal> <name>PRId64</name> <literal type="string">", totalConn:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr></argument>, <argument><expr><name><name>connectRsp</name><operator>.</operator><name>clusterId</name></name></expr></argument>,
           <argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>numOfConns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           
  <expr_stmt><expr><call><name>tsem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>rspSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>End</name>:</label>

  <if_stmt><if>if <condition>(<expr><name>pRequest</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>releaseRequest</name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>self</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pEpSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SMsgSendInfo</name><modifier>*</modifier></type> <name>buildMsgInfoImpl</name><parameter_list>(<parameter><decl><type><name>SRequestObj</name><modifier>*</modifier></type> <name>pRequest</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMsgSendInfo</name><modifier>*</modifier></type> <name>pMsgSendInfo</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgSendInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pMsgSendInfo</name><operator>-&gt;</operator><name>requestObjRefId</name></name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>self</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsgSendInfo</name><operator>-&gt;</operator><name>requestId</name></name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsgSendInfo</name><operator>-&gt;</operator><name>param</name></name> <operator>=</operator> <name>pRequest</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsgSendInfo</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsgSendInfo</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TARGET_TYPE_MNODE</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pRequest</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsgSendInfo</name><operator>-&gt;</operator><name>msgInfo</name></name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>requestMsg</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsgSendInfo</name><operator>-&gt;</operator><name>fp</name></name> <operator>=</operator> <call><name>getMsgRspHandle</name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pMsgSendInfo</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>processCreateDbRsp</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>SDataBuf</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// todo rsp with the vnode id list</comment>
  <decl_stmt><decl><type><name>SRequestObj</name><modifier>*</modifier></type> <name>pRequest</name> <init>= <expr><name>param</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pEpSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>setErrno</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>queryFp</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>queryFp</name></name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>param</name></name></expr></argument>, <argument><expr><name>pRequest</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>tsem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>rspSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>processUseDbRsp</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>SDataBuf</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SRequestObj</name><modifier>*</modifier></type> <name>pRequest</name> <init>= <expr><name>param</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_MND_DB_NOT_EXIST</name> <operator>==</operator> <name>code</name> <operator>||</operator> <name>TSDB_CODE_MND_DB_IN_CREATING</name> <operator>==</operator> <name>code</name> <operator>||</operator>
      <name>TSDB_CODE_MND_DB_IN_DROPPING</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SUseDbRsp</name></type> <name>usedbRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tDeserializeSUseDbRsp</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>usedbRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>SCatalog</name></name><modifier>*</modifier></type> <name>pCatalog</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>usedbRsp</name><operator>.</operator><name>vgVersion</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <comment type="line">// cached in local</comment>
      <decl_stmt><decl><type><name>uint64_t</name></type> <name>clusterId</name> <init>= <expr><name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>clusterId</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type>  <name>code1</name> <init>= <expr><call><name>catalogGetHandle</name><argument_list>(<argument><expr><name>clusterId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCatalog</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>code1</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tscWarn</name><argument_list>(<argument><expr><literal type="string">"0x%"</literal> <name>PRIx64</name> <literal type="string">"catalogGetHandle failed, clusterId:%"</literal> <name>PRIx64</name> <literal type="string">", error:%s"</literal></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr></argument>, <argument><expr><name>clusterId</name></expr></argument>,
                <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>catalogRemoveDB</name><argument_list>(<argument><expr><name>pCatalog</name></expr></argument>, <argument><expr><name><name>usedbRsp</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>usedbRsp</name><operator>.</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>tFreeSUsedbRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>usedbRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pEpSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setErrno</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>queryFp</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>queryFp</name></name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>param</name></name></expr></argument>, <argument><expr><name>pRequest</name></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>tsem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>rspSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SUseDbRsp</name></type> <name>usedbRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tDeserializeSUseDbRsp</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>usedbRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>usedbRsp</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>usedbRsp</name><operator>.</operator><name>errCode</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name><name>usedbRsp</name><operator>.</operator><name>errCode</name></name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_APP_ERROR</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tscTrace</name><argument_list>(<argument><expr><literal type="string">"db:%s, usedbRsp received, numOfVgroups:%d"</literal></expr></argument>, <argument><expr><name><name>usedbRsp</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>usedbRsp</name><operator>.</operator><name>vgNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>usedbRsp</name><operator>.</operator><name>vgNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SVgroupInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>usedbRsp</name><operator>.</operator><name>pVgroupInfos</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tscTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, numOfEps:%d inUse:%d "</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>numOfEps</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>inUse</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>numOfEps</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>tscTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, index:%d epset:%s:%u"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>eps</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>fqdn</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>eps</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>SName</name></type> <name>name</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameFromString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name><name>usedbRsp</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name>T_NAME_ACCT</name> <operator>|</operator> <name>T_NAME_DB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SUseDbOutput</name></type> <name>output</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>queryBuildUseDbOutput</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>usedbRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>output</name><operator>.</operator><name>dbVgroup</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>output</name><operator>.</operator><name>dbVgroup</name><operator>-&gt;</operator><name>vgHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"0x%"</literal> <name>PRIx64</name> <literal type="string">" failed to build use db output since %s"</literal></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>output</name><operator>.</operator><name>dbVgroup</name></name> <operator>&amp;&amp;</operator> <name><name>output</name><operator>.</operator><name>dbVgroup</name><operator>-&gt;</operator><name>vgHash</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>SCatalog</name></name><modifier>*</modifier></type> <name>pCatalog</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>code1</name> <init>= <expr><call><name>catalogGetHandle</name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>clusterId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCatalog</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code1</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tscWarn</name><argument_list>(<argument><expr><literal type="string">"catalogGetHandle failed, clusterId:%"</literal> <name>PRIx64</name> <literal type="string">", error:%s"</literal></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>clusterId</name></name></expr></argument>,
              <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>catalogUpdateDBVgInfo</name><argument_list>(<argument><expr><name>pCatalog</name></expr></argument>, <argument><expr><name><name>output</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>output</name><operator>.</operator><name>dbId</name></name></expr></argument>, <argument><expr><name><name>output</name><operator>.</operator><name>dbVgroup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>output</name><operator>.</operator><name>dbVgroup</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>output</name><operator>.</operator><name>dbVgroup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tFreeSUsedbRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>usedbRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>db</name><index>[<expr><name>TSDB_DB_NAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameGetDbName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>setConnectionDB</name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name></name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pEpSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>queryFp</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>queryFp</name></name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>param</name></name></expr></argument>, <argument><expr><name>pRequest</name></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>tsem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>rspSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>processCreateSTableRsp</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>SDataBuf</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pMsg</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>param</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SRequestObj</name><modifier>*</modifier></type> <name>pRequest</name> <init>= <expr><name>param</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>setErrno</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>SMCreateStbRsp</name></type> <name>createRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SDecoder</name></type>       <name>coder</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tDecodeSMCreateStbRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>createRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>resInfo</name><operator>.</operator><name>execRes</name><operator>.</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_MND_CREATE_STB</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>resInfo</name><operator>.</operator><name>execRes</name><operator>.</operator><name>res</name></name> <operator>=</operator> <name><name>createRsp</name><operator>.</operator><name>pMeta</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pEpSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>queryFp</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SExecResult</name><modifier>*</modifier></type> <name>pRes</name> <init>= <expr><operator>&amp;</operator><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>resInfo</name><operator>.</operator><name>execRes</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCatalog</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type>   <name>ret</name> <init>= <expr><call><name>catalogGetHandle</name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>clusterId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCatalog</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pRes</name><operator>-&gt;</operator><name>res</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>handleCreateTbExecRes</name><argument_list>(<argument><expr><name><name>pRes</name><operator>-&gt;</operator><name>res</name></name></expr></argument>, <argument><expr><name>pCatalog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>queryFp</name></name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>param</name></name></expr></argument>, <argument><expr><name>pRequest</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>tsem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>rspSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>processDropDbRsp</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>SDataBuf</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SRequestObj</name><modifier>*</modifier></type> <name>pRequest</name> <init>= <expr><name>param</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>setErrno</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>SDropDbRsp</name></type> <name>dropdbRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tDeserializeSDropDbRsp</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dropdbRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>SCatalog</name></name><modifier>*</modifier></type> <name>pCatalog</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>          <name>code</name> <init>= <expr><call><name>catalogGetHandle</name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>clusterId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCatalog</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>catalogRemoveDB</name><argument_list>(<argument><expr><name>pCatalog</name></expr></argument>, <argument><expr><name><name>dropdbRsp</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>dropdbRsp</name><operator>.</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>STscObj</name><modifier>*</modifier></type>             <name>pTscObj</name> <init>= <expr><name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name></name></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>SRequestConnInfo</name></type> <name>conn</name> <init>= <expr><block>{<expr><operator>.</operator><name>pTrans</name> <operator>=</operator> <name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>pTransporter</name></name></expr>,
                               <expr><operator>.</operator><name>requestId</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr>,
                               <expr><operator>.</operator><name>requestObjRefId</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>self</name></name></expr>,
                               <expr><operator>.</operator><name>mgmtEps</name> <operator>=</operator> <macro><name>getEpSet_s</name><argument_list>(<argument>&amp;pTscObj-&gt;pAppInfo-&gt;mgmtEp</argument>)</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name></type> <name><name>dbFName</name><index>[<expr><name>TSDB_DB_FNAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>dbFName</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dbFName</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%d.%s"</literal></expr></argument>, <argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>acctId</name></name></expr></argument>, <argument><expr><name>TSDB_INFORMATION_SCHEMA_DB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>catalogRefreshDBVgInfo</name><argument_list>(<argument><expr><name>pCatalog</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conn</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>dbFName</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dbFName</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%d.%s"</literal></expr></argument>, <argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>acctId</name></name></expr></argument>, <argument><expr><name>TSDB_PERFORMANCE_SCHEMA_DB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>catalogRefreshDBVgInfo</name><argument_list>(<argument><expr><name>pCatalog</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conn</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pEpSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>queryFp</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>queryFp</name></name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>param</name></name></expr></argument>, <argument><expr><name>pRequest</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>tsem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>rspSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>processAlterStbRsp</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>SDataBuf</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SRequestObj</name><modifier>*</modifier></type> <name>pRequest</name> <init>= <expr><name>param</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>setErrno</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>SMAlterStbRsp</name></type> <name>alterRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SDecoder</name></type>      <name>coder</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tDecodeSMAlterStbRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alterRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>resInfo</name><operator>.</operator><name>execRes</name><operator>.</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_MND_ALTER_STB</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>resInfo</name><operator>.</operator><name>execRes</name><operator>.</operator><name>res</name></name> <operator>=</operator> <name><name>alterRsp</name><operator>.</operator><name>pMeta</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pEpSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>queryFp</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SExecResult</name><modifier>*</modifier></type> <name>pRes</name> <init>= <expr><operator>&amp;</operator><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>resInfo</name><operator>.</operator><name>execRes</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCatalog</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type>   <name>ret</name> <init>= <expr><call><name>catalogGetHandle</name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>clusterId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCatalog</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pRes</name><operator>-&gt;</operator><name>res</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>handleAlterTbExecRes</name><argument_list>(<argument><expr><name><name>pRes</name><operator>-&gt;</operator><name>res</name></name></expr></argument>, <argument><expr><name>pCatalog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>queryFp</name></name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>param</name></name></expr></argument>, <argument><expr><name>pRequest</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>tsem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>rspSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>buildShowVariablesBlock</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pVars</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier><modifier>*</modifier></type> <name>block</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSDataBlock</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>hasVarCol</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>SHOW_VARIABLES_RESULT_COLS</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SColumnInfoData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SColumnInfoData</name></type> <name>infoData</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>infoData</name><operator>.</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_VARCHAR</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>infoData</name><operator>.</operator><name>info</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name>SHOW_VARIABLES_RESULT_FIELD1_LEN</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>infoData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>infoData</name><operator>.</operator><name>info</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_VARCHAR</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>infoData</name><operator>.</operator><name>info</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name>SHOW_VARIABLES_RESULT_FIELD2_LEN</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>infoData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfCfg</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pVars</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>numOfCfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCfg</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr><operator>,</operator> <expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SVariablesInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pVars</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>TSDB_CONFIG_OPTION_LEN</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>STR_WITH_MAXSIZE_TO_VARSTR</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>TSDB_CONFIG_OPTION_LEN</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>c</name><operator>++</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>char</name></type> <name><name>value</name><index>[<expr><name>TSDB_CONFIG_VALUE_LEN</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>STR_WITH_MAXSIZE_TO_VARSTR</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>TSDB_CONFIG_VALUE_LEN</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pColInfo</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>c</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <name>numOfCfg</name></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>block</name> <operator>=</operator> <name>pBlock</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>buildShowVariablesRsp</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pVars</name></decl></parameter>, <parameter><decl><type><name>SRetrieveTableRsp</name><modifier>*</modifier><modifier>*</modifier></type> <name>pRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>code</name> <init>= <expr><call><name>buildShowVariablesBlock</name><argument_list>(<argument><expr><name>pVars</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pBlock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>rspSize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SRetrieveTableRsp</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <call><name>blockGetEncodeSize</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>pRsp</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>rspSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pRsp</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pRsp</name><operator>)</operator><operator>-&gt;</operator><name>useconds</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pRsp</name><operator>)</operator><operator>-&gt;</operator><name>completed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pRsp</name><operator>)</operator><operator>-&gt;</operator><name>precision</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pRsp</name><operator>)</operator><operator>-&gt;</operator><name>compressed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pRsp</name><operator>)</operator><operator>-&gt;</operator><name>compLen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pRsp</name><operator>)</operator><operator>-&gt;</operator><name>numOfRows</name></name> <operator>=</operator> <call><name>htobe64</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pRsp</name><operator>)</operator><operator>-&gt;</operator><name>numOfCols</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>SHOW_VARIABLES_RESULT_COLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>blockEncode</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>pRsp</name><operator>)</operator><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>SHOW_VARIABLES_RESULT_COLS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>len</name> <operator>==</operator> <name>rspSize</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SRetrieveTableRsp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>processShowVariablesRsp</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>SDataBuf</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SRequestObj</name><modifier>*</modifier></type> <name>pRequest</name> <init>= <expr><name>param</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>setErrno</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>SShowVariablesRsp</name></type>  <name>rsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SRetrieveTableRsp</name><modifier>*</modifier></type> <name>pRes</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tDeserializeSShowVariablesRsp</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildShowVariablesRsp</name><argument_list>(<argument><expr><name><name>rsp</name><operator>.</operator><name>variables</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>setQueryResultFromRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>resInfo</name></name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>tFreeSShowVariablesRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pEpSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>queryFp</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>queryFp</name></name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>param</name></name></expr></argument>, <argument><expr><name>pRequest</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>tsem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>rspSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>__async_send_cb_fn_t</name></type> <name>getMsgRspHandle</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>msgType</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>msgType</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TDMT_MND_CONNECT</name></expr>:</case>
      <return>return <expr><name>processConnectRsp</name></expr>;</return>
    <case>case <expr><name>TDMT_MND_CREATE_DB</name></expr>:</case>
      <return>return <expr><name>processCreateDbRsp</name></expr>;</return>
    <case>case <expr><name>TDMT_MND_USE_DB</name></expr>:</case>
      <return>return <expr><name>processUseDbRsp</name></expr>;</return>
    <case>case <expr><name>TDMT_MND_CREATE_STB</name></expr>:</case>
      <return>return <expr><name>processCreateSTableRsp</name></expr>;</return>
    <case>case <expr><name>TDMT_MND_DROP_DB</name></expr>:</case>
      <return>return <expr><name>processDropDbRsp</name></expr>;</return>
    <case>case <expr><name>TDMT_MND_ALTER_STB</name></expr>:</case>
      <return>return <expr><name>processAlterStbRsp</name></expr>;</return>
    <case>case <expr><name>TDMT_MND_SHOW_VARIABLES</name></expr>:</case>
      <return>return <expr><name>processShowVariablesRsp</name></expr>;</return>
    <default>default:</default>
      <return>return <expr><name>genericRspCallback</name></expr>;</return>
  </block_content>}</block></switch>
</block_content>}</block></function>
</unit>
