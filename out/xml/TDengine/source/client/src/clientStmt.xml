<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/client/src/clientStmt.c">
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clientInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clientLog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdef.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clientStmt.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>gStmtStatusStr</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"unknown"</literal></expr>,     <expr><literal type="string">"init"</literal></expr>, <expr><literal type="string">"prepare"</literal></expr>, <expr><literal type="string">"settbname"</literal></expr>, <expr><literal type="string">"settags"</literal></expr>,
                          <expr><literal type="string">"fetchFields"</literal></expr>, <expr><literal type="string">"bind"</literal></expr>, <expr><literal type="string">"bindCol"</literal></expr>, <expr><literal type="string">"addBatch"</literal></expr>,  <expr><literal type="string">"exec"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>stmtCreateRequest</name><parameter_list>(<parameter><decl><type><name>STscStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildRequest</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>taos</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>sqlStr</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>sqlLen</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name></name></expr></argument>,
                        <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>reqid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pStmt</name><operator>-&gt;</operator><name>reqid</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>reqid</name></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name><operator>-&gt;</operator><name>syncQuery</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>stmtSwitchStatus</name><parameter_list>(<parameter><decl><type><name>STscStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>STMT_STATUS</name></type> <name>newStatus</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>newStatus</name> <operator>&gt;=</operator> <name>STMT_INIT</name> <operator>&amp;&amp;</operator> <name>newStatus</name> <operator>&lt;</operator> <name>STMT_MAX</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>STMT_LOG_SEQ</name><argument_list>(<argument><expr><name>newStatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <switch>switch <condition>(<expr><name>newStatus</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>STMT_PREPARE</name></expr>:</case>
      <break>break;</break>
    <case>case <expr><name>STMT_SETTBNAME</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><call><name>STMT_STATUS_EQ</name><argument_list>(<argument><expr><name>INIT</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>STMT_STATUS_EQ</name><argument_list>(<argument><expr><name>BIND</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>STMT_STATUS_EQ</name><argument_list>(<argument><expr><name>BIND_COL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_TSC_STMT_API_ERROR</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    <case>case <expr><name>STMT_SETTAGS</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><call><name>STMT_STATUS_NE</name><argument_list>(<argument><expr><name>SETTBNAME</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>STMT_STATUS_NE</name><argument_list>(<argument><expr><name>FETCH_FIELDS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_TSC_STMT_API_ERROR</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    <case>case <expr><name>STMT_FETCH_FIELDS</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><call><name>STMT_STATUS_EQ</name><argument_list>(<argument><expr><name>INIT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_TSC_STMT_API_ERROR</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    <case>case <expr><name>STMT_BIND</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><call><name>STMT_STATUS_EQ</name><argument_list>(<argument><expr><name>INIT</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>STMT_STATUS_EQ</name><argument_list>(<argument><expr><name>BIND_COL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_TSC_STMT_API_ERROR</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <comment type="block">/*
            if ((pStmt-&gt;sql.type == STMT_TYPE_MULTI_INSERT) &amp;&amp; ()) {
              code = TSDB_CODE_TSC_STMT_API_ERROR;
            }
      */</comment>
      <break>break;</break>
    <case>case <expr><name>STMT_BIND_COL</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><call><name>STMT_STATUS_EQ</name><argument_list>(<argument><expr><name>INIT</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>STMT_STATUS_EQ</name><argument_list>(<argument><expr><name>BIND</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_TSC_STMT_API_ERROR</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    <case>case <expr><name>STMT_ADD_BATCH</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><call><name>STMT_STATUS_NE</name><argument_list>(<argument><expr><name>BIND</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>STMT_STATUS_NE</name><argument_list>(<argument><expr><name>BIND_COL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>STMT_STATUS_NE</name><argument_list>(<argument><expr><name>FETCH_FIELDS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_TSC_STMT_API_ERROR</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    <case>case <expr><name>STMT_EXECUTE</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>STMT_TYPE_QUERY</name> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>STMT_STATUS_NE</name><argument_list>(<argument><expr><name>ADD_BATCH</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>STMT_STATUS_NE</name><argument_list>(<argument><expr><name>FETCH_FIELDS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>STMT_STATUS_NE</name><argument_list>(<argument><expr><name>BIND</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
            <call><name>STMT_STATUS_NE</name><argument_list>(<argument><expr><name>BIND_COL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_TSC_STMT_API_ERROR</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>STMT_STATUS_NE</name><argument_list>(<argument><expr><name>ADD_BATCH</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>STMT_STATUS_NE</name><argument_list>(<argument><expr><name>FETCH_FIELDS</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_TSC_STMT_API_ERROR</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_APP_ERROR</name></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>

  <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>status</name></name> <operator>=</operator> <name>newStatus</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>stmtGetTbName</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name><modifier>*</modifier></type> <name>stmt</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>tbName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STscStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>STscStmt</name><operator>*</operator><operator>)</operator><name>stmt</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>STMT_TYPE_MULTI_INSERT</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><literal type="char">'\0'</literal> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"no table name set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_TSC_STMT_TBNAME_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>tbName</name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbName</name></name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>stmtBackupQueryFields</name><parameter_list>(<parameter><decl><type><name>STscStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStmtQueryResInfo</name><modifier>*</modifier></type> <name>pRes</name> <init>= <expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>queryRes</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>numOfCols</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>resInfo</name><operator>.</operator><name>numOfCols</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>precision</name></name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>resInfo</name><operator>.</operator><name>precision</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><name><name>pRes</name><operator>-&gt;</operator><name>numOfCols</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TAOS_FIELD</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>fields</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>userFields</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pRes</name><operator>-&gt;</operator><name>fields</name></name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name><name>pRes</name><operator>-&gt;</operator><name>userFields</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pRes</name><operator>-&gt;</operator><name>fields</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>resInfo</name><operator>.</operator><name>fields</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pRes</name><operator>-&gt;</operator><name>userFields</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>resInfo</name><operator>.</operator><name>userFields</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>stmtRestoreQueryFields</name><parameter_list>(<parameter><decl><type><name>STscStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStmtQueryResInfo</name><modifier>*</modifier></type> <name>pRes</name> <init>= <expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>queryRes</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>            <name>size</name> <init>= <expr><name><name>pRes</name><operator>-&gt;</operator><name>numOfCols</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TAOS_FIELD</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>resInfo</name><operator>.</operator><name>numOfCols</name></name> <operator>=</operator> <name><name>pRes</name><operator>-&gt;</operator><name>numOfCols</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>resInfo</name><operator>.</operator><name>precision</name></name> <operator>=</operator> <name><name>pRes</name><operator>-&gt;</operator><name>precision</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>resInfo</name><operator>.</operator><name>fields</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>resInfo</name><operator>.</operator><name>fields</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>resInfo</name><operator>.</operator><name>fields</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>resInfo</name><operator>.</operator><name>fields</name></name></expr></argument>, <argument><expr><name><name>pRes</name><operator>-&gt;</operator><name>fields</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>resInfo</name><operator>.</operator><name>userFields</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>resInfo</name><operator>.</operator><name>userFields</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>resInfo</name><operator>.</operator><name>userFields</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>resInfo</name><operator>.</operator><name>userFields</name></name></expr></argument>, <argument><expr><name><name>pRes</name><operator>-&gt;</operator><name>userFields</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>stmtUpdateBindInfo</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name><modifier>*</modifier></type> <name>stmt</name></decl></parameter>, <parameter><decl><type><name>STableMeta</name><modifier>*</modifier></type> <name>pTableMeta</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>tags</name></decl></parameter>, <parameter><decl><type><name>SName</name><modifier>*</modifier></type> <name>tbName</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>sTableName</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>autoCreateTbl</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STscStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>STscStmt</name><operator>*</operator><operator>)</operator><name>stmt</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>           <name><name>tbFName</name><index>[<expr><name>TSDB_TABLE_FNAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameExtractFullName</name><argument_list>(<argument><expr><name>tbName</name></expr></argument>, <argument><expr><name>tbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>sname</name></name></expr></argument>, <argument><expr><name>tbName</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>tbName</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbFName</name></name></expr></argument>, <argument><expr><name>tbFName</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbFName</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbFName</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbFName</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbUid</name></name> <operator>=</operator> <ternary><condition><expr><name>autoCreateTbl</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>uid</name></name></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbSuid</name></name> <operator>=</operator> <name><name>pTableMeta</name><operator>-&gt;</operator><name>suid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbType</name></name> <operator>=</operator> <name><name>pTableMeta</name><operator>-&gt;</operator><name>tableType</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>boundTags</name></name> <operator>=</operator> <name>tags</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tagsCached</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>stbFName</name></name></expr></argument>, <argument><expr><name>sTableName</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>stbFName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>stmtUpdateExecInfo</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name><modifier>*</modifier></type> <name>stmt</name></decl></parameter>, <parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pVgHash</name></decl></parameter>, <parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pBlockHash</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>autoCreateTbl</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STscStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>STscStmt</name><operator>*</operator><operator>)</operator><name>stmt</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>pVgHash</name></name> <operator>=</operator> <name>pVgHash</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pBlockHash</name></name> <operator>=</operator> <name>pBlockHash</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>autoCreateTbl</name></name> <operator>=</operator> <name>autoCreateTbl</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>stmtUpdateInfo</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name><modifier>*</modifier></type> <name>stmt</name></decl></parameter>, <parameter><decl><type><name>STableMeta</name><modifier>*</modifier></type> <name>pTableMeta</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>tags</name></decl></parameter>, <parameter><decl><type><name>SName</name><modifier>*</modifier></type> <name>tbName</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>autoCreateTbl</name></decl></parameter>,
                       <parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pVgHash</name></decl></parameter>, <parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pBlockHash</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>sTableName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STscStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>STscStmt</name><operator>*</operator><operator>)</operator><name>stmt</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><call><name>stmtUpdateBindInfo</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>pTableMeta</name></expr></argument>, <argument><expr><name>tags</name></expr></argument>, <argument><expr><name>tbName</name></expr></argument>, <argument><expr><name>sTableName</name></expr></argument>, <argument><expr><name>autoCreateTbl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><call><name>stmtUpdateExecInfo</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>pVgHash</name></expr></argument>, <argument><expr><name>pBlockHash</name></expr></argument>, <argument><expr><name>autoCreateTbl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>autoCreateTbl</name></name> <operator>=</operator> <name>autoCreateTbl</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>stmtGetExecInfo</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name><modifier>*</modifier></type> <name>stmt</name></decl></parameter>, <parameter><decl><type><name>SHashObj</name><modifier>*</modifier><modifier>*</modifier></type> <name>pVgHash</name></decl></parameter>, <parameter><decl><type><name>SHashObj</name><modifier>*</modifier><modifier>*</modifier></type> <name>pBlockHash</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STscStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>STscStmt</name><operator>*</operator><operator>)</operator><name>stmt</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><operator>*</operator><name>pVgHash</name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>pVgHash</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pBlockHash</name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pBlockHash</name></name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>stmtCacheBlock</name><parameter_list>(<parameter><decl><type><name>STscStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>STMT_TYPE_MULTI_INSERT</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint64_t</name></type> <name>uid</name> <init>= <expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbUid</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>cacheUid</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>TSDB_CHILD_TABLE</name> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbType</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbSuid</name></name></expr> </then><else>: <expr><name>uid</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>pTableCache</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cacheUid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cacheUid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STableDataBlocks</name><modifier>*</modifier><modifier>*</modifier></type> <name>pSrc</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pBlockHash</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbFName</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbFName</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pSrc</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>STableDataBlocks</name><modifier>*</modifier></type> <name>pDst</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><call><name>qCloneStmtDataBlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pDst</name></expr></argument>, <argument><expr><operator>*</operator><name>pSrc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SStmtTableCache</name></type> <name>cache</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>pDataBlock</name> <operator>=</operator> <name>pDst</name></expr>,
      <expr><operator>.</operator><name>boundTags</name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>boundTags</name></name></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>pTableCache</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cacheUid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cacheUid</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>cache</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>autoCreateTbl</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tagsCached</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>boundTags</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>stmtParseSql</name><parameter_list>(<parameter><decl><type><name>STscStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SStmtCallback</name></type> <name>stmtCb</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>pStmt</name> <operator>=</operator> <name>pStmt</name></expr>,
      <expr><operator>.</operator><name>getTbNameFn</name> <operator>=</operator> <name>stmtGetTbName</name></expr>,
      <expr><operator>.</operator><name>setInfoFn</name> <operator>=</operator> <name>stmtUpdateInfo</name></expr>,
      <expr><operator>.</operator><name>getExecInfoFn</name> <operator>=</operator> <name>stmtGetExecInfo</name></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><call><name>stmtCreateRequest</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><call><name>parseSql</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>pQuery</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmtCb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>needParse</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name> <operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>STMT_TYPE_INSERT</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>pQuery</name><operator>-&gt;</operator><name>pPrepareRoot</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>STMT_TYPE_QUERY</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>stmtCleanBindInfo</name><parameter_list>(<parameter><decl><type><name>STscStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbUid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbSuid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbType</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>needParse</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>inExecCache</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbFName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tagsCached</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>destroyBoundColumnInfo</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>boundTags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>boundTags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>stbFName</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TSDB_TABLE_FNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>stmtCleanExecInfo</name><parameter_list>(<parameter><decl><type><name>STscStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>keepTable</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>deepClean</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>STMT_TYPE_QUERY</name> <operator>!=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>type</name></name> <operator>||</operator> <name>deepClean</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>keyLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>  <name>pIter</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pBlockHash</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>pIter</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>STableDataBlocks</name><modifier>*</modifier></type> <name>pBlocks</name> <init>= <expr><operator>*</operator><operator>(</operator><name>STableDataBlocks</name><operator>*</operator><operator>*</operator><operator>)</operator><name>pIter</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>             <name>key</name> <init>= <expr><call><name>taosHashGetKey</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keyLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>STableMeta</name><modifier>*</modifier></type>       <name>pMeta</name> <init>= <expr><call><name>qGetTableMetaInDataBlock</name><argument_list>(<argument><expr><name>pBlocks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>keepTable</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbFName</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>keyLen</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbFName</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><call><name>qResetStmtDataBlock</name><argument_list>(<argument><expr><name>pBlocks</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pBlockHash</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>STMT_TYPE_MULTI_INSERT</name> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>qFreeStmtDataBlock</name><argument_list>(<argument><expr><name>pBlocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>qDestroyStmtDataBlock</name><argument_list>(<argument><expr><name>pBlocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>taosHashRemove</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pBlockHash</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pBlockHash</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>autoCreateTbl</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>keepTable</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pBlockHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pBlockHash</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><call><name>stmtCleanBindInfo</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>stmtCleanSQLInfo</name><parameter_list>(<parameter><decl><type><name>STscStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>queryRes</name><operator>.</operator><name>fields</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>queryRes</name><operator>.</operator><name>userFields</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>sqlStr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>qDestroyQuery</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>pQuery</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>nodeList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>pVgHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>pVgHash</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pIter</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>pTableCache</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>pIter</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SStmtTableCache</name><modifier>*</modifier></type> <name>pCache</name> <init>= <expr><operator>(</operator><name>SStmtTableCache</name><operator>*</operator><operator>)</operator><name>pIter</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>qDestroyStmtDataBlock</name><argument_list>(<argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>destroyBoundColumnInfo</name><argument_list>(<argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>boundTags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>boundTags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>pTableCache</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>pTableCache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>pTableCache</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><call><name>stmtCleanExecInfo</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><call><name>stmtCleanBindInfo</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>sql</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>sql</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>stmtRebuildDataBlock</name><parameter_list>(<parameter><decl><type><name>STscStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>STableDataBlocks</name><modifier>*</modifier></type> <name>pDataBlock</name></decl></parameter>, <parameter><decl><type><name>STableDataBlocks</name><modifier>*</modifier><modifier>*</modifier></type> <name>newBlock</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>uid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SEpSet</name></type>           <name>ep</name> <init>= <expr><call><name>getEpSet_s</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>taos</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>mgmtEp</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVgroupInfo</name></type>      <name>vgInfo</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRequestConnInfo</name></type> <name>conn</name> <init>= <expr><block>{<expr><operator>.</operator><name>pTrans</name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>taos</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>pTransporter</name></name></expr>,
                           <expr><operator>.</operator><name>requestId</name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr>,
                           <expr><operator>.</operator><name>requestObjRefId</name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name><operator>-&gt;</operator><name>self</name></name></expr>,
                           <expr><operator>.</operator><name>mgmtEps</name> <operator>=</operator> <macro><name>getEpSet_s</name><argument_list>(<argument>&amp;pStmt-&gt;taos-&gt;pAppInfo-&gt;mgmtEp</argument>)</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><call><name>catalogGetTableHashVgroup</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pCatalog</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>sname</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vgInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(
      <argument><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>pVgHash</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>vgInfo</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>vgInfo</name><operator>.</operator><name>vgId</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>vgInfo</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vgInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><call><name>qRebuildStmtDataBlock</name><argument_list>(<argument><expr><name>newBlock</name></expr></argument>, <argument><expr><name>pDataBlock</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><name><name>vgInfo</name><operator>.</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>stmtGetFromCache</name><parameter_list>(<parameter><decl><type><name>STscStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>needParse</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>inExecCache</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>STableDataBlocks</name><modifier>*</modifier></type> <name>pBlockInExec</name> <init>=
      <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pBlockHash</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbFName</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbFName</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pBlockInExec</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>needParse</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>inExecCache</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>autoCreateTbl</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"reuse stmt block for tb %s in execBlock"</literal></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbFName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>pTableCache</name></name> <operator>||</operator> <call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>pTableCache</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>inExecCache</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pBlockHash</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>needParse</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"reuse stmt block for tb %s in execBlock"</literal></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbFName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"no stmt block cache for tb %s"</literal></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbFName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pCatalog</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><call><name>catalogGetHandle</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>taos</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>clusterId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>pCatalog</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>autoCreateTbl</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SStmtTableCache</name><modifier>*</modifier></type> <name>pCache</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>pTableCache</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbSuid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbSuid</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pCache</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>needParse</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>autoCreateTbl</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbUid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>STableDataBlocks</name><modifier>*</modifier></type> <name>pNewBlock</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><call><name>stmtRebuildDataBlock</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pNewBlock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pBlockHash</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbFName</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbFName</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>pNewBlock</name></expr></argument>,
                      <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"reuse stmt block for tb %s in sqlBlock, suid:0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbFName</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbSuid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>STMT_RET</name><argument_list>(<argument><expr><call><name>stmtCleanBindInfo</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STableMeta</name><modifier>*</modifier></type>      <name>pTableMeta</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRequestConnInfo</name></type> <name>conn</name> <init>= <expr><block>{<expr><operator>.</operator><name>pTrans</name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>taos</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>pTransporter</name></name></expr>,
                           <expr><operator>.</operator><name>requestId</name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr>,
                           <expr><operator>.</operator><name>requestObjRefId</name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name><operator>-&gt;</operator><name>self</name></name></expr>,
                           <expr><operator>.</operator><name>mgmtEps</name> <operator>=</operator> <macro><name>getEpSet_s</name><argument_list>(<argument>&amp;pStmt-&gt;taos-&gt;pAppInfo-&gt;mgmtEp</argument>)</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>code</name> <init>= <expr><call><name>catalogGetTableMeta</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pCatalog</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>sname</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTableMeta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_PAR_TABLE_NOT_EXIST</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><call><name>stmtCleanBindInfo</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"tb %s not exist"</literal></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbFName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>uint64_t</name></type> <name>uid</name> <init>= <expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>uid</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>suid</name> <init>= <expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>suid</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type>   <name>tableType</name> <init>= <expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>tableType</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pTableMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>cacheUid</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>TSDB_CHILD_TABLE</name> <operator>==</operator> <name>tableType</name><operator>)</operator></expr> ?</condition><then> <expr><name>suid</name></expr> </then><else>: <expr><name>uid</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>uid</name> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbUid</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>needParse</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"tb %s is current table"</literal></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbFName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>inExecCache</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SStmtTableCache</name><modifier>*</modifier></type> <name>pCache</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>pTableCache</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cacheUid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cacheUid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCache</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"table [%s, %"</literal> <name>PRIx64</name> <literal type="string">", %"</literal> <name>PRIx64</name> <literal type="string">"] found in exec blockHash, but not in sql blockHash"</literal></expr></argument>,
               <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbFName</name></name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><name>cacheUid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_APP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>needParse</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbUid</name></name> <operator>=</operator> <name>uid</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbSuid</name></name> <operator>=</operator> <name>suid</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbType</name></name> <operator>=</operator> <name>tableType</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>boundTags</name></name> <operator>=</operator> <name><name>pCache</name><operator>-&gt;</operator><name>boundTags</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tagsCached</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"tb %s in execBlock list, set to current"</literal></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbFName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SStmtTableCache</name><modifier>*</modifier></type> <name>pCache</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>pTableCache</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cacheUid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cacheUid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pCache</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>needParse</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbUid</name></name> <operator>=</operator> <name>uid</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbSuid</name></name> <operator>=</operator> <name>suid</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbType</name></name> <operator>=</operator> <name>tableType</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>boundTags</name></name> <operator>=</operator> <name><name>pCache</name><operator>-&gt;</operator><name>boundTags</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tagsCached</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>STableDataBlocks</name><modifier>*</modifier></type> <name>pNewBlock</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><call><name>stmtRebuildDataBlock</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name><name>pCache</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pNewBlock</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pBlockHash</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbFName</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbFName</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>pNewBlock</name></expr></argument>,
                    <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"tb %s in sqlBlock list, set to current"</literal></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbFName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><call><name>stmtCleanBindInfo</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>stmtResetStmt</name><parameter_list>(<parameter><decl><type><name>STscStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><call><name>stmtCleanSQLInfo</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>pTableCache</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BIGINT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>pTableCache</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>status</name></name> <operator>=</operator> <name>STMT_INIT</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>TAOS_STMT</name><modifier>*</modifier></type> <name>stmtInit</name><parameter_list>(<parameter><decl><type><name>STscObj</name><modifier>*</modifier></type> <name>taos</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>reqid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STscObj</name><modifier>*</modifier></type>  <name>pObj</name> <init>= <expr><operator>(</operator><name>STscObj</name><operator>*</operator><operator>)</operator><name>taos</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STscStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>pStmt</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STscStmt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pStmt</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>pTableCache</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BIGINT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>pTableCache</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>taos</name></name> <operator>=</operator> <name>pObj</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>needParse</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>status</name></name> <operator>=</operator> <name>STMT_INIT</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>reqid</name></name> <operator>=</operator> <name>reqid</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>STMT_LOG_SEQ</name><argument_list>(<argument><expr><name>STMT_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"stmt:%p initialized"</literal></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>stmtPrepare</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name><modifier>*</modifier></type> <name>stmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>sql</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STscStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>STscStmt</name><operator>*</operator><operator>)</operator><name>stmt</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>STMT_DLOG_E</name><argument_list>(<argument><expr><literal type="string">"start to prepare"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>status</name></name> <operator>&gt;=</operator> <name>STMT_PREPARE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><call><name>stmtResetStmt</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><call><name>stmtSwitchStatus</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>STMT_PREPARE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>length</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>sqlStr</name></name> <operator>=</operator> <call><name>strndup</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>sqlLen</name></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>stmtSetTbName</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name><modifier>*</modifier></type> <name>stmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>tbName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STscStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>STscStmt</name><operator>*</operator><operator>)</operator><name>stmt</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>STMT_DLOG</name><argument_list>(<argument><expr><literal type="string">"start to set tbName: %s"</literal></expr></argument>, <argument><expr><name>tbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><call><name>stmtSwitchStatus</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>STMT_SETTBNAME</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>insert</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>stmtIsInsert</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>insert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>insert</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"set tb name not available for none insert statement"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_TSC_STMT_API_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><call><name>stmtCreateRequest</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><call><name>qCreateSName</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>sname</name></name></expr></argument>, <argument><expr><name>tbName</name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>taos</name><operator>-&gt;</operator><name>acctId</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name><operator>-&gt;</operator><name>pDb</name></name></expr></argument>,
                            <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name><operator>-&gt;</operator><name>msgBufLen</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tNameExtractFullName</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>sname</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbFName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><call><name>stmtGetFromCache</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>needParse</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbName</name></name></expr></argument>, <argument><expr><name>tbName</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbName</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbName</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbName</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><call><name>stmtParseSql</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>stmtSetTbTags</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name><modifier>*</modifier></type> <name>stmt</name></decl></parameter>, <parameter><decl><type><name>TAOS_MULTI_BIND</name><modifier>*</modifier></type> <name>tags</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STscStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>STscStmt</name><operator>*</operator><operator>)</operator><name>stmt</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>STMT_DLOG_E</name><argument_list>(<argument><expr><literal type="string">"start to set tbTags"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><call><name>stmtSwitchStatus</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>STMT_SETTAGS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>inExecCache</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STableDataBlocks</name><modifier>*</modifier><modifier>*</modifier></type> <name>pDataBlock</name> <init>=
      <expr><operator>(</operator><name>STableDataBlocks</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pBlockHash</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbFName</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbFName</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pDataBlock</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"table %s not found in exec blockHash"</literal></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbFName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_APP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"start to bind stmt tag values"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><call><name>qBindStmtTagsValue</name><argument_list>(<argument><expr><operator>*</operator><name>pDataBlock</name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>boundTags</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbSuid</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>stbFName</name></name></expr></argument>,
                                  <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>sname</name><operator>.</operator><name>tname</name></name></expr></argument>, <argument><expr><name>tags</name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>,
                                  <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name><operator>-&gt;</operator><name>msgBufLen</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>autoCreateTbl</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>stmtFetchTagFields</name><parameter_list>(<parameter><decl><type><name>STscStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>fieldNum</name></decl></parameter>, <parameter><decl><type><name>TAOS_FIELD_E</name><modifier>*</modifier><modifier>*</modifier></type> <name>fields</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>STMT_TYPE_QUERY</name> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"invalid operation to get query tag fileds"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_TSC_STMT_API_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STableDataBlocks</name><modifier>*</modifier><modifier>*</modifier></type> <name>pDataBlock</name> <init>=
      <expr><operator>(</operator><name>STableDataBlocks</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pBlockHash</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbFName</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbFName</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pDataBlock</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"table %s not found in exec blockHash"</literal></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbFName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_APP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><call><name>qBuildStmtTagFields</name><argument_list>(<argument><expr><operator>*</operator><name>pDataBlock</name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>boundTags</name></name></expr></argument>, <argument><expr><name>fieldNum</name></expr></argument>, <argument><expr><name>fields</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>stmtFetchColFields</name><parameter_list>(<parameter><decl><type><name>STscStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>fieldNum</name></decl></parameter>, <parameter><decl><type><name>TAOS_FIELD_E</name><modifier>*</modifier><modifier>*</modifier></type> <name>fields</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>STMT_TYPE_QUERY</name> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"invalid operation to get query column fileds"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_TSC_STMT_API_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STableDataBlocks</name><modifier>*</modifier><modifier>*</modifier></type> <name>pDataBlock</name> <init>=
      <expr><operator>(</operator><name>STableDataBlocks</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pBlockHash</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbFName</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbFName</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pDataBlock</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"table %s not found in exec blockHash"</literal></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbFName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_APP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><call><name>qBuildStmtColFields</name><argument_list>(<argument><expr><operator>*</operator><name>pDataBlock</name></expr></argument>, <argument><expr><name>fieldNum</name></expr></argument>, <argument><expr><name>fields</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>stmtBindBatch</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name><modifier>*</modifier></type> <name>stmt</name></decl></parameter>, <parameter><decl><type><name>TAOS_MULTI_BIND</name><modifier>*</modifier></type> <name>bind</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>colIdx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STscStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>STscStmt</name><operator>*</operator><operator>)</operator><name>stmt</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>STMT_DLOG</name><argument_list>(<argument><expr><literal type="string">"start to bind stmt data, colIdx: %d"</literal></expr></argument>, <argument><expr><name>colIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><call><name>stmtSwitchStatus</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>STMT_BIND</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>needParse</name></name> <operator>&amp;&amp;</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>runTimes</name></name> <operator>&amp;&amp;</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>type</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
      <name>STMT_TYPE_MULTI_INSERT</name> <operator>!=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>needParse</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name></name> <operator>&amp;&amp;</operator> <name>STMT_TYPE_QUERY</name> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>type</name></name> <operator>&amp;&amp;</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>runTimes</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><call><name>stmtCreateRequest</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>needParse</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><call><name>stmtParseSql</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>STMT_TYPE_QUERY</name> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><call><name>qStmtBindParams</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>pQuery</name></name></expr></argument>, <argument><expr><name>bind</name></expr></argument>, <argument><expr><name>colIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SParseContext</name></type> <name>ctx</name> <init>= <expr><block>{<expr><operator>.</operator><name>requestId</name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr>,
                         <expr><operator>.</operator><name>acctId</name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>taos</name><operator>-&gt;</operator><name>acctId</name></name></expr>,
                         <expr><operator>.</operator><name>db</name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name><operator>-&gt;</operator><name>pDb</name></name></expr>,
                         <expr><operator>.</operator><name>topicQuery</name> <operator>=</operator> <name>false</name></expr>,
                         <expr><operator>.</operator><name>pSql</name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>sqlStr</name></name></expr>,
                         <expr><operator>.</operator><name>sqlLen</name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>sqlLen</name></name></expr>,
                         <expr><operator>.</operator><name>pMsg</name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name><operator>-&gt;</operator><name>msgBuf</name></name></expr>,
                         <expr><operator>.</operator><name>msgLen</name> <operator>=</operator> <name>ERROR_MSG_BUF_DEFAULT_SIZE</name></expr>,
                         <expr><operator>.</operator><name>pTransporter</name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>taos</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>pTransporter</name></name></expr>,
                         <expr><operator>.</operator><name>pStmtCb</name> <operator>=</operator> <name>NULL</name></expr>,
                         <expr><operator>.</operator><name>pUser</name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>taos</name><operator>-&gt;</operator><name>user</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>mgmtEpSet</name></name> <operator>=</operator> <call><name>getEpSet_s</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>taos</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>mgmtEp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><call><name>catalogGetHandle</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>taos</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>clusterId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>.</operator><name>pCatalog</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><call><name>qStmtParseQuerySql</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>pQuery</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>pQuery</name><operator>-&gt;</operator><name>haveResultSet</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>setResSchemaInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>resInfo</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>pQuery</name><operator>-&gt;</operator><name>pResSchema</name></name></expr></argument>,
                       <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>pQuery</name><operator>-&gt;</operator><name>numOfResCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>pQuery</name><operator>-&gt;</operator><name>pResSchema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>setResPrecision</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>resInfo</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>pQuery</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>TSWAP</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name><operator>-&gt;</operator><name>dbList</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>pQuery</name><operator>-&gt;</operator><name>pDbList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSWAP</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name><operator>-&gt;</operator><name>tableList</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>pQuery</name><operator>-&gt;</operator><name>pTableList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSWAP</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name><operator>-&gt;</operator><name>targetTableList</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>pQuery</name><operator>-&gt;</operator><name>pTargetTableList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// if (STMT_TYPE_QUERY == pStmt-&gt;sql.queryRes) {</comment>
    <comment type="line">//   STMT_ERR_RET(stmtRestoreQueryFields(pStmt));</comment>
    <comment type="line">// }</comment>

    <comment type="line">// STMT_ERR_RET(stmtBackupQueryFields(pStmt));</comment>

    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STableDataBlocks</name><modifier>*</modifier><modifier>*</modifier></type> <name>pDataBlock</name> <init>=
      <expr><operator>(</operator><name>STableDataBlocks</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pBlockHash</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbFName</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbFName</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pDataBlock</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"table %s not found in exec blockHash"</literal></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbFName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_APP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>colIdx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>qBindStmtColsValue</name><argument_list>(<argument><expr><operator>*</operator><name>pDataBlock</name></expr></argument>, <argument><expr><name>bind</name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name><operator>-&gt;</operator><name>msgBufLen</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"qBindStmtColsValue failed, error:%s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>colIdx</name> <operator>!=</operator> <operator>(</operator><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>sBindLastIdx</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>colIdx</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"bind column index not in sequence"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_APP_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>sBindLastIdx</name></name> <operator>=</operator> <name>colIdx</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>colIdx</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>sBindRowNum</name></name> <operator>=</operator> <name><name>bind</name><operator>-&gt;</operator><name>num</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>qBindStmtSingleColValue</name><argument_list>(<argument><expr><operator>*</operator><name>pDataBlock</name></expr></argument>, <argument><expr><name>bind</name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name><operator>-&gt;</operator><name>msgBufLen</name></name></expr></argument>, <argument><expr><name>colIdx</name></expr></argument>,
                            <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>sBindRowNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>stmtAddBatch</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name><modifier>*</modifier></type> <name>stmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STscStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>STscStmt</name><operator>*</operator><operator>)</operator><name>stmt</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>STMT_DLOG_E</name><argument_list>(<argument><expr><literal type="string">"start to add batch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><call><name>stmtSwitchStatus</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>STMT_ADD_BATCH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><call><name>stmtCacheBlock</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>stmtUpdateTableUid</name><parameter_list>(<parameter><decl><type><name>STscStmt</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>, <parameter><decl><type><name>SSubmitRsp</name><modifier>*</modifier></type> <name>pRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"stmt start to update tbUid, blockNum: %d"</literal></expr></argument>, <argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>nBlocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>finalCode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>  <name>keyLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STableDataBlocks</name><modifier>*</modifier><modifier>*</modifier></type> <name>pIter</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pBlockHash</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>pIter</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>STableDataBlocks</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><operator>*</operator><name>pIter</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>             <name>key</name> <init>= <expr><call><name>taosHashGetKey</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keyLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>STableMeta</name><modifier>*</modifier></type> <name>pMeta</name> <init>= <expr><call><name>qGetTableMetaInDataBlock</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pMeta</name><operator>-&gt;</operator><name>uid</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pBlockHash</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SSubmitBlkRsp</name><modifier>*</modifier></type> <name>blkRsp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>        <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pRsp</name><operator>-&gt;</operator><name>nBlocks</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>blkRsp</name> <operator>=</operator> <name><name>pRsp</name><operator>-&gt;</operator><name>pBlocks</name></name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>blkRsp</name><operator>-&gt;</operator><name>tblFName</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>keyLen</name></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>blkRsp</name><operator>-&gt;</operator><name>tblFName</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <break>break;</break>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>pRsp</name><operator>-&gt;</operator><name>nBlocks</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"auto created table %s uid updated from %"</literal> <name>PRIx64</name> <literal type="string">" to %"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name><name>blkRsp</name><operator>-&gt;</operator><name>tblFName</name></name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>,
               <argument><expr><name><name>blkRsp</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>pMeta</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <name><name>blkRsp</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbUid</name></name> <operator>=</operator> <name><name>blkRsp</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"table %s not found in submit rsp, will update from catalog"</literal></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbFName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>pCatalog</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogGetHandle</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>taos</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>clusterId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>pCatalog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pBlockHash</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>finalCode</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>stmtCreateRequest</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pBlockHash</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>finalCode</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>STableMeta</name><modifier>*</modifier></type>      <name>pTableMeta</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SRequestConnInfo</name></type> <name>conn</name> <init>= <expr><block>{<expr><operator>.</operator><name>pTrans</name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>taos</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>pTransporter</name></name></expr>,
                               <expr><operator>.</operator><name>requestId</name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr>,
                               <expr><operator>.</operator><name>requestObjRefId</name> <operator>=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name><operator>-&gt;</operator><name>self</name></name></expr>,
                               <expr><operator>.</operator><name>mgmtEps</name> <operator>=</operator> <macro><name>getEpSet_s</name><argument_list>(<argument>&amp;pStmt-&gt;taos-&gt;pAppInfo-&gt;mgmtEp</argument>)</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type>          <name>code</name> <init>= <expr><call><name>catalogGetTableMeta</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pCatalog</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>sname</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTableMeta</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>pTableMeta</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pBlockHash</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>finalCode</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pTableMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name><name>pMeta</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <name><name>pTableMeta</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>tbUid</name></name> <operator>=</operator> <name><name>pTableMeta</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pTableMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>      
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pBlockHash</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <return>return <expr><name>finalCode</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>stmtExec</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name><modifier>*</modifier></type> <name>stmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STscStmt</name><modifier>*</modifier></type>   <name>pStmt</name> <init>= <expr><operator>(</operator><name>STscStmt</name><operator>*</operator><operator>)</operator><name>stmt</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSubmitRsp</name><modifier>*</modifier></type> <name>pRsp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>        <name>autoCreateTbl</name> <init>= <expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>autoCreateTbl</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>STMT_DLOG_E</name><argument_list>(<argument><expr><literal type="string">"start to exec"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><call><name>stmtSwitchStatus</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>STMT_EXECUTE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>STMT_TYPE_QUERY</name> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>launchQueryImpl</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>pQuery</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><call><name>qBuildStmtOutput</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>pQuery</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>pVgHash</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pBlockHash</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>launchQueryImpl</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>pQuery</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>autoCreateTbl</name></expr> ?</condition><then> <expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pRsp</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name><operator>-&gt;</operator><name>code</name></name> <operator>&amp;&amp;</operator> <call><name>NEED_CLIENT_HANDLE_ERROR</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>refreshMeta</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>tFreeSSubmitRsp</name><argument_list>(<argument><expr><name>pRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><call><name>stmtResetStmt</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_NEED_RETRY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>STMT_ERR_JRET</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>affectedRows</name></name> <operator>=</operator> <call><name>taos_affected_rows</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>affectedRows</name></name> <operator>+=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>affectedRows</name></name></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>stmtCleanExecInfo</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>code</name></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><name>true</name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <name>autoCreateTbl</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pRsp</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"no submit resp got for auto create table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_APP_ERROR</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>stmtUpdateTableUid</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>pRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tFreeSSubmitRsp</name><argument_list>(<argument><expr><name>pRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>++</operator><name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>runTimes</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>STMT_RET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>stmtClose</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name><modifier>*</modifier></type> <name>stmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STscStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>STscStmt</name><operator>*</operator><operator>)</operator><name>stmt</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>stmtCleanSQLInfo</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>stmtErrstr</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name><modifier>*</modifier></type> <name>stmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STscStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>STscStmt</name><operator>*</operator><operator>)</operator><name>stmt</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>stmt</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt>

  <return>return <expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>stmtAffectedRows</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name><modifier>*</modifier></type> <name>stmt</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><operator>(</operator><name>STscStmt</name><operator>*</operator><operator>)</operator><name>stmt</name><operator>)</operator><operator>-&gt;</operator><name>affectedRows</name></expr>;</return> </block_content>}</block></function>

<function><type><name>int</name></type> <name>stmtAffectedRowsOnce</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name><modifier>*</modifier></type> <name>stmt</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><operator>(</operator><name>STscStmt</name><operator>*</operator><operator>)</operator><name>stmt</name><operator>)</operator><operator>-&gt;</operator><name><name>exec</name><operator>.</operator><name>affectedRows</name></name></expr>;</return> </block_content>}</block></function>

<function><type><name>int</name></type> <name>stmtIsInsert</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name><modifier>*</modifier></type> <name>stmt</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>insert</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STscStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>STscStmt</name><operator>*</operator><operator>)</operator><name>stmt</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>STMT_DLOG_E</name><argument_list>(<argument><expr><literal type="string">"start is insert"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>insert</name> <operator>=</operator> <operator>(</operator><name>STMT_TYPE_INSERT</name> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>type</name></name> <operator>||</operator> <name>STMT_TYPE_MULTI_INSERT</name> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>type</name></name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>insert</name> <operator>=</operator> <call><name>qIsInsertValuesSql</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>sqlStr</name></name></expr></argument>, <argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>sqlLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>stmtGetTagFields</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name><modifier>*</modifier></type> <name>stmt</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>nums</name></decl></parameter>, <parameter><decl><type><name>TAOS_FIELD_E</name><modifier>*</modifier><modifier>*</modifier></type> <name>fields</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STscStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>STscStmt</name><operator>*</operator><operator>)</operator><name>stmt</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>STMT_DLOG_E</name><argument_list>(<argument><expr><literal type="string">"start to get tag fields"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>STMT_TYPE_QUERY</name> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>STMT_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_TSC_STMT_API_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><call><name>stmtSwitchStatus</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>STMT_FETCH_FIELDS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>needParse</name></name> <operator>&amp;&amp;</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>runTimes</name></name> <operator>&amp;&amp;</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>type</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
      <name>STMT_TYPE_MULTI_INSERT</name> <operator>!=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>needParse</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name></name> <operator>&amp;&amp;</operator> <name>STMT_TYPE_QUERY</name> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>type</name></name> <operator>&amp;&amp;</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>runTimes</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><call><name>stmtCreateRequest</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>needParse</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><call><name>stmtParseSql</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><call><name>stmtFetchTagFields</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>nums</name></expr></argument>, <argument><expr><name>fields</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>stmtGetColFields</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name><modifier>*</modifier></type> <name>stmt</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>nums</name></decl></parameter>, <parameter><decl><type><name>TAOS_FIELD_E</name><modifier>*</modifier><modifier>*</modifier></type> <name>fields</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STscStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>STscStmt</name><operator>*</operator><operator>)</operator><name>stmt</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>STMT_DLOG_E</name><argument_list>(<argument><expr><literal type="string">"start to get col fields"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>STMT_TYPE_QUERY</name> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>STMT_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_TSC_STMT_API_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><call><name>stmtSwitchStatus</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>STMT_FETCH_FIELDS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>needParse</name></name> <operator>&amp;&amp;</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>runTimes</name></name> <operator>&amp;&amp;</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>type</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
      <name>STMT_TYPE_MULTI_INSERT</name> <operator>!=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>needParse</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name></name> <operator>&amp;&amp;</operator> <name>STMT_TYPE_QUERY</name> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>type</name></name> <operator>&amp;&amp;</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>runTimes</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><call><name>stmtCreateRequest</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>needParse</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><call><name>stmtParseSql</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><call><name>stmtFetchColFields</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>nums</name></expr></argument>, <argument><expr><name>fields</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>stmtGetParamNum</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name><modifier>*</modifier></type> <name>stmt</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>nums</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STscStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>STscStmt</name><operator>*</operator><operator>)</operator><name>stmt</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>STMT_DLOG_E</name><argument_list>(<argument><expr><literal type="string">"start to get param num"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><call><name>stmtSwitchStatus</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>STMT_FETCH_FIELDS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>needParse</name></name> <operator>&amp;&amp;</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>runTimes</name></name> <operator>&amp;&amp;</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>type</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
      <name>STMT_TYPE_MULTI_INSERT</name> <operator>!=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>needParse</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name></name> <operator>&amp;&amp;</operator> <name>STMT_TYPE_QUERY</name> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>type</name></name> <operator>&amp;&amp;</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>runTimes</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><call><name>stmtCreateRequest</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>needParse</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><call><name>stmtParseSql</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>STMT_TYPE_QUERY</name> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>nums</name> <operator>=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>pQuery</name><operator>-&gt;</operator><name>pPlaceholderValues</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><call><name>stmtFetchColFields</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>nums</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>stmtGetParam</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name><modifier>*</modifier></type> <name>stmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STscStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>STscStmt</name><operator>*</operator><operator>)</operator><name>stmt</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>STMT_DLOG_E</name><argument_list>(<argument><expr><literal type="string">"start to get param"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>STMT_TYPE_QUERY</name> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>STMT_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_TSC_STMT_API_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><call><name>stmtSwitchStatus</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>STMT_FETCH_FIELDS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>needParse</name></name> <operator>&amp;&amp;</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>runTimes</name></name> <operator>&amp;&amp;</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>type</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
      <name>STMT_TYPE_MULTI_INSERT</name> <operator>!=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>needParse</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name></name> <operator>&amp;&amp;</operator> <name>STMT_TYPE_QUERY</name> <operator>==</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>type</name></name> <operator>&amp;&amp;</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>runTimes</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><call><name>stmtCreateRequest</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pStmt</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>needParse</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><call><name>stmtParseSql</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>       <name>nums</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TAOS_FIELD_E</name><modifier>*</modifier></type> <name>pField</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><call><name>stmtFetchColFields</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nums</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pField</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;=</operator> <name>nums</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"idx %d is too big"</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pField</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>STMT_ERR_RET</name><argument_list>(<argument><expr><name>TSDB_CODE_INVALID_PARA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <name><name>pField</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>type</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>bytes</name> <operator>=</operator> <name><name>pField</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pField</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>TAOS_RES</name><modifier>*</modifier></type> <name>stmtUseResult</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name><modifier>*</modifier></type> <name>stmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STscStmt</name><modifier>*</modifier></type> <name>pStmt</name> <init>= <expr><operator>(</operator><name>STscStmt</name><operator>*</operator><operator>)</operator><name>stmt</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>STMT_DLOG_E</name><argument_list>(<argument><expr><literal type="string">"start to use result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>STMT_TYPE_QUERY</name> <operator>!=</operator> <name><name>pStmt</name><operator>-&gt;</operator><name>sql</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"useResult only for query statement"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name><name>pStmt</name><operator>-&gt;</operator><name>exec</name><operator>.</operator><name>pRequest</name></name></expr>;</return>
</block_content>}</block></function>
</unit>
