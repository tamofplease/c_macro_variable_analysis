<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/client/src/clientTmqConnector.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"com_taosdata_jdbc_tmq_TMQConnector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jniCommon.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"taos.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>commit_cb</name><parameter_list>(<parameter><decl><type><name>tmq_t</name> <modifier>*</modifier></type><name>tmq</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>     <name>status</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>g_vm</name><operator>)</operator><operator>-&gt;</operator><name>GetEnv</name></name><argument_list>(<argument><expr><name>g_vm</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>env</name></expr></argument>, <argument><expr><name>JNI_VERSION_1_6</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>    <name>needDetach</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>status</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><operator>(</operator><operator>*</operator><name>g_vm</name><operator>)</operator><operator>-&gt;</operator><name>AttachCurrentThread</name></name><argument_list>(<argument><expr><name>g_vm</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>env</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>needDetach</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>jobject</name></type> <name>obj</name> <init>= <expr><operator>(</operator><name>jobject</name><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallVoidMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>g_commitCallback</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteGlobalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>param</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>needDetach</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>g_vm</name><operator>)</operator><operator>-&gt;</operator><name>DetachCurrentThread</name></name><argument_list>(<argument><expr><name>g_vm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>env</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>JNIEXPORT</name> <name>jlong</name> <name>JNICALL</name></type> <name>Java_com_taosdata_jdbc_tmq_TMQConnector_tmqConfNewImp</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>jobj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>tmq_conf_t</name> <modifier>*</modifier></type><name>conf</name> <init>= <expr><call><name>tmq_conf_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>jniGetGlobalMethod</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>jlong</name><operator>)</operator><name>conf</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>JNIEXPORT</name> <name>jint</name> <name>JNICALL</name></type> <name>Java_com_taosdata_jdbc_tmq_TMQConnector_tmqConfSetImp</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>jobj</name></decl></parameter>, <parameter><decl><type><name>jlong</name></type> <name>conf</name></decl></parameter>,
                                                                             <parameter><decl><type><name>jstring</name></type> <name>jkey</name></decl></parameter>, <parameter><decl><type><name>jstring</name></type> <name>jvalue</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>jkey</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniError</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, failed set tmq config. key is null"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TMQ_CONF_KEY_NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jkey</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>jvalue</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniError</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, failed set tmq config. key %s, value is null"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ReleaseStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jkey</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TMQ_CONF_VALUE_NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jvalue</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>tmq_conf_res_t</name></type> <name>res</name> <init>= <expr><call><name>tmq_conf_set</name><argument_list>(<argument><expr><operator>(</operator><name>tmq_conf_t</name> <operator>*</operator><operator>)</operator><name>conf</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ReleaseStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jkey</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ReleaseStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jvalue</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>jint</name><operator>)</operator><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>JNIEXPORT</name> <name>void</name> <name>JNICALL</name></type> <name>Java_com_taosdata_jdbc_tmq_TMQConnector_tmqConfDestroyImp</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>jobj</name></decl></parameter>,
                                                                                 <parameter><decl><type><name>jlong</name></type> <name>jconf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>tmq_conf_t</name> <modifier>*</modifier></type><name>conf</name> <init>= <expr><operator>(</operator><name>tmq_conf_t</name> <operator>*</operator><operator>)</operator><name>jconf</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>conf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniDebug</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, tmq config is already destroyed"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>jniDebug</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, config:%p, tmq successfully destroy config"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tmq_conf_destroy</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>JNIEXPORT</name> <name>jlong</name> <name>JNICALL</name></type> <name>Java_com_taosdata_jdbc_tmq_TMQConnector_tmqConsumerNewImp</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>jobj</name></decl></parameter>,
                                                                                  <parameter><decl><type><name>jlong</name></type> <name>jconf</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>jconsumer</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>tmq_conf_t</name> <modifier>*</modifier></type><name>conf</name> <init>= <expr><operator>(</operator><name>tmq_conf_t</name> <operator>*</operator><operator>)</operator><name>jconf</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>conf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniError</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, tmq config is already destroyed"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TMQ_CONF_NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int</name></type>   <name>len</name> <init>= <expr><literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>len</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>msg</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniError</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, config:%p, tmq alloc memory failed"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JNI_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>tmq_t</name> <modifier>*</modifier></type><name>tmq</name> <init>= <expr><call><name>tmq_consumer_new</name><argument_list>(<argument><expr><operator>(</operator><name>tmq_conf_t</name> <operator>*</operator><operator>)</operator><name>conf</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniError</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, config:%p, tmq create consumer error: %s"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallVoidMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jconsumer</name></expr></argument>, <argument><expr><name>g_createConsumerErrorCallback</name></expr></argument>, <argument><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewStringUTF</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TMQ_CONSUMER_CREATE_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>jlong</name><operator>)</operator><name>tmq</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>JNIEXPORT</name> <name>jlong</name> <name>JNICALL</name></type> <name>Java_com_taosdata_jdbc_tmq_TMQConnector_tmqTopicNewImp</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>jobj</name></decl></parameter>, <parameter><decl><type><name>jlong</name></type> <name>jtmq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>tmq_t</name> <modifier>*</modifier></type><name>tmq</name> <init>= <expr><operator>(</operator><name>tmq_t</name> <operator>*</operator><operator>)</operator><name>jtmq</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tmq</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniError</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, tmq is closed"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TMQ_CONSUMER_NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>tmq_list_t</name> <modifier>*</modifier></type><name>topics</name> <init>= <expr><call><name>tmq_list_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><operator>(</operator><name>jlong</name><operator>)</operator><name>topics</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>JNIEXPORT</name> <name>jint</name> <name>JNICALL</name></type> <name>Java_com_taosdata_jdbc_tmq_TMQConnector_tmqTopicAppendImp</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>jobj</name></decl></parameter>,
                                                                                 <parameter><decl><type><name>jlong</name></type> <name>jtopic</name></decl></parameter>, <parameter><decl><type><name>jstring</name></type> <name>jname</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>tmq_list_t</name> <modifier>*</modifier></type><name>topic</name> <init>= <expr><operator>(</operator><name>tmq_list_t</name> <operator>*</operator><operator>)</operator><name>jtopic</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>topic</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniError</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, tmq topic list is null"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TMQ_TOPIC_NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>jname</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniDebug</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, tmq topic append jname is null"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TMQ_TOPIC_NAME_NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>res</name> <init>= <expr><call><name>tmq_list_append</name><argument_list>(<argument><expr><operator>(</operator><name>tmq_list_t</name> <operator>*</operator><operator>)</operator><name>topic</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ReleaseStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jname</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>jint</name><operator>)</operator><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>JNIEXPORT</name> <name>void</name> <name>JNICALL</name></type> <name>Java_com_taosdata_jdbc_tmq_TMQConnector_tmqTopicDestroyImp</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>jobj</name></decl></parameter>,
                                                                                  <parameter><decl><type><name>jlong</name></type> <name>jtopic</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>tmq_list_t</name> <modifier>*</modifier></type><name>topic</name> <init>= <expr><operator>(</operator><name>tmq_list_t</name> <operator>*</operator><operator>)</operator><name>jtopic</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>topic</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniDebug</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, tmq topic list is already destroyed"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>tmq_list_destroy</name><argument_list>(<argument><expr><operator>(</operator><name>tmq_list_t</name> <operator>*</operator><operator>)</operator><name>topic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>jniDebug</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, tmq successfully destroy topic list"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>JNIEXPORT</name> <name>jint</name> <name>JNICALL</name></type> <name>Java_com_taosdata_jdbc_tmq_TMQConnector_tmqSubscribeImp</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>jobj</name></decl></parameter>, <parameter><decl><type><name>jlong</name></type> <name>jtmq</name></decl></parameter>,
                                                                               <parameter><decl><type><name>jlong</name></type> <name>jtopic</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>tmq_t</name> <modifier>*</modifier></type><name>tmq</name> <init>= <expr><operator>(</operator><name>tmq_t</name> <operator>*</operator><operator>)</operator><name>jtmq</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tmq</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniError</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, tmq is closed"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TMQ_CONSUMER_NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>tmq_list_t</name> <modifier>*</modifier></type><name>topic</name> <init>= <expr><operator>(</operator><name>tmq_list_t</name> <operator>*</operator><operator>)</operator><name>jtopic</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>topic</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniDebug</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, tmq topic list is already destroyed"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TMQ_TOPIC_NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>res</name> <init>= <expr><call><name>tmq_subscribe</name><argument_list>(<argument><expr><name>tmq</name></expr></argument>, <argument><expr><name>topic</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><operator>(</operator><name>jint</name><operator>)</operator><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>JNIEXPORT</name> <name>jint</name> <name>JNICALL</name></type> <name>Java_com_taosdata_jdbc_tmq_TMQConnector_tmqSubscriptionImp</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>jobj</name></decl></parameter>, <parameter><decl><type><name>jlong</name></type> <name>jtmq</name></decl></parameter>,
                                                                                  <parameter><decl><type><name>jobject</name></type> <name>jconsumer</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>tmq_t</name> <modifier>*</modifier></type><name>tmq</name> <init>= <expr><operator>(</operator><name>tmq_t</name> <operator>*</operator><operator>)</operator><name>jtmq</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tmq</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniError</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, tmq is closed"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TMQ_CONSUMER_NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>tmq_list_t</name> <modifier>*</modifier></type><name>topicList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>res</name> <init>= <expr><call><name>tmq_subscription</name><argument_list>(<argument><expr><operator>(</operator><name>tmq_t</name> <operator>*</operator><operator>)</operator><name>tmq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>topicList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>JNI_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tmq_list_destroy</name><argument_list>(<argument><expr><name>topicList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>jniError</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, tmq:%p, tmq get subscription error: %s"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>, <argument><expr><name>tmq</name></expr></argument>, <argument><expr><call><name>tmq_err2str</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><name>jint</name><operator>)</operator><name>res</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name>  <modifier>*</modifier><modifier>*</modifier></type><name>topics</name> <init>= <expr><call><name>tmq_list_to_c_array</name><argument_list>(<argument><expr><name>topicList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>sz</name> <init>= <expr><call><name>tmq_list_get_size</name><argument_list>(<argument><expr><name>topicList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>jobjectArray</name></type> <name>arr</name> <init>= <expr><operator>(</operator><name>jobjectArray</name><operator>)</operator><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewObjectArray</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>FindClass</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="string">"java/lang/String"</literal></expr></argument>)</argument_list></call></expr></argument>,
                                                          <argument><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewStringUTF</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>SetObjectArrayElement</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>arr</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewStringUTF</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>topics</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallVoidMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jconsumer</name></expr></argument>, <argument><expr><name>g_topicListCallback</name></expr></argument>, <argument><expr><name>arr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tmq_list_destroy</name><argument_list>(<argument><expr><name>topicList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>JNI_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>JNIEXPORT</name> <name>jint</name> <name>JNICALL</name></type> <name>Java_com_taosdata_jdbc_tmq_TMQConnector_tmqCommitSync</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>jobj</name></decl></parameter>, <parameter><decl><type><name>jlong</name></type> <name>jtmq</name></decl></parameter>,
                                                                             <parameter><decl><type><name>jlong</name></type> <name>jres</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>tmq_t</name> <modifier>*</modifier></type><name>tmq</name> <init>= <expr><operator>(</operator><name>tmq_t</name> <operator>*</operator><operator>)</operator><name>jtmq</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tmq</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniError</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, tmq is closed"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TMQ_CONSUMER_NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><operator>(</operator><name>TAOS_RES</name> <operator>*</operator><operator>)</operator><name>jres</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>tmq_commit_sync</name><argument_list>(<argument><expr><name>tmq</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>JNIEXPORT</name> <name>void</name> <name>JNICALL</name></type> <name>Java_com_taosdata_jdbc_tmq_TMQConnector_tmqCommitAsync</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>jobj</name></decl></parameter>, <parameter><decl><type><name>jlong</name></type> <name>jtmq</name></decl></parameter>,
                                                                              <parameter><decl><type><name>jlong</name></type> <name>jres</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>consumer</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>tmq_t</name> <modifier>*</modifier></type><name>tmq</name> <init>= <expr><operator>(</operator><name>tmq_t</name> <operator>*</operator><operator>)</operator><name>jtmq</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tmq</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniError</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, tmq is closed"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><operator>(</operator><name>TAOS_RES</name> <operator>*</operator><operator>)</operator><name>jres</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>consumer</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewGlobalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>consumer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tmq_commit_async</name><argument_list>(<argument><expr><name>tmq</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>commit_cb</name></expr></argument>, <argument><expr><name>consumer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>JNIEXPORT</name> <name>jint</name> <name>JNICALL</name></type> <name>Java_com_taosdata_jdbc_tmq_TMQConnector_tmqUnsubscribeImp</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>jobj</name></decl></parameter>,
                                                                                 <parameter><decl><type><name>jlong</name></type> <name>jtmq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>tmq_t</name> <modifier>*</modifier></type><name>tmq</name> <init>= <expr><operator>(</operator><name>tmq_t</name> <operator>*</operator><operator>)</operator><name>jtmq</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tmq</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniError</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, tmq is closed"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TMQ_CONSUMER_NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>jniDebug</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, tmq:%p, successfully unsubscribe"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>, <argument><expr><name>tmq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>tmq_unsubscribe</name><argument_list>(<argument><expr><operator>(</operator><name>tmq_t</name> <operator>*</operator><operator>)</operator><name>tmq</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>JNIEXPORT</name> <name>jint</name> <name>JNICALL</name></type> <name>Java_com_taosdata_jdbc_tmq_TMQConnector_tmqConsumerCloseImp</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>jobj</name></decl></parameter>,
                                                                                   <parameter><decl><type><name>jlong</name></type> <name>jtmq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>tmq_t</name> <modifier>*</modifier></type><name>tmq</name> <init>= <expr><operator>(</operator><name>tmq_t</name> <operator>*</operator><operator>)</operator><name>jtmq</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tmq</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniDebug</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, tmq is closed"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TMQ_CONSUMER_NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>tmq_consumer_close</name><argument_list>(<argument><expr><operator>(</operator><name>tmq_t</name> <operator>*</operator><operator>)</operator><name>tmq</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>JNIEXPORT</name> <name>jstring</name> <name>JNICALL</name></type> <name>Java_com_taosdata_jdbc_tmq_TMQConnector_getErrMsgImp</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>jobj</name></decl></parameter>, <parameter><decl><type><name>jint</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewStringUTF</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>tmq_err2str</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>JNIEXPORT</name> <name>jlong</name> <name>JNICALL</name></type> <name>Java_com_taosdata_jdbc_tmq_TMQConnector_tmqConsumerPoll</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>jobj</name></decl></parameter>, <parameter><decl><type><name>jlong</name></type> <name>jtmq</name></decl></parameter>,
                                                                                <parameter><decl><type><name>jlong</name></type> <name>time</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>tmq_t</name> <modifier>*</modifier></type><name>tmq</name> <init>= <expr><operator>(</operator><name>tmq_t</name> <operator>*</operator><operator>)</operator><name>jtmq</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tmq</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniDebug</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, tmq is closed"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TMQ_CONSUMER_NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><operator>(</operator><name>jlong</name><operator>)</operator><call><name>tmq_consumer_poll</name><argument_list>(<argument><expr><operator>(</operator><name>tmq_t</name> <operator>*</operator><operator>)</operator><name>tmq</name></expr></argument>, <argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>JNIEXPORT</name> <name>jstring</name> <name>JNICALL</name></type> <name>Java_com_taosdata_jdbc_tmq_TMQConnector_tmqGetTopicName</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>jobj</name></decl></parameter>,
                                                                                  <parameter><decl><type><name>jlong</name></type> <name>jres</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><operator>(</operator><name>TAOS_RES</name> <operator>*</operator><operator>)</operator><name>jres</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniDebug</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, invalid res handle"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewStringUTF</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>tmq_get_topic_name</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>JNIEXPORT</name> <name>jstring</name> <name>JNICALL</name></type> <name>Java_com_taosdata_jdbc_tmq_TMQConnector_tmqGetDbName</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>jobj</name></decl></parameter>, <parameter><decl><type><name>jlong</name></type> <name>jres</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><operator>(</operator><name>TAOS_RES</name> <operator>*</operator><operator>)</operator><name>jres</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniDebug</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, invalid res handle"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewStringUTF</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>tmq_get_db_name</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>JNIEXPORT</name> <name>jint</name> <name>JNICALL</name></type> <name>Java_com_taosdata_jdbc_tmq_TMQConnector_tmqGetVgroupId</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>jobj</name></decl></parameter>, <parameter><decl><type><name>jlong</name></type> <name>jres</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><operator>(</operator><name>TAOS_RES</name> <operator>*</operator><operator>)</operator><name>jres</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniDebug</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, invalid res handle"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>tmq_get_vgroup_id</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>JNIEXPORT</name> <name>jstring</name> <name>JNICALL</name></type> <name>Java_com_taosdata_jdbc_tmq_TMQConnector_tmqGetTableName</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>jobj</name></decl></parameter>,
                                                                                  <parameter><decl><type><name>jlong</name></type> <name>jres</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><operator>(</operator><name>TAOS_RES</name> <operator>*</operator><operator>)</operator><name>jres</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniDebug</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, invalid res handle"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewStringUTF</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>tmq_get_table_name</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>JNIEXPORT</name> <name>jint</name> <name>JNICALL</name></type> <name>Java_com_taosdata_jdbc_tmq_TMQConnector_fetchRawBlockImp</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>jobj</name></decl></parameter>, <parameter><decl><type><name>jlong</name></type> <name>con</name></decl></parameter>,
                                                                                <parameter><decl><type><name>jlong</name></type> <name>res</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>rowobj</name></decl></parameter>,
                                                                                <parameter><decl><type><name>jobject</name></type> <name>arrayListObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TAOS</name>   <modifier>*</modifier></type><name>tscon</name> <init>= <expr><operator>(</operator><name>TAOS</name> <operator>*</operator><operator>)</operator><name>con</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>check_for_params</name><argument_list>(<argument><expr><name>jobj</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>JNI_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>tres</name> <init>= <expr><operator>(</operator><name>TAOS_RES</name> <operator>*</operator><operator>)</operator><name>res</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfRows</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>     <name>error_code</name> <init>= <expr><call><name>taos_fetch_raw_block</name><argument_list>(<argument><expr><name>tres</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numOfRows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>numOfRows</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>error_code</name> <operator>==</operator> <name>JNI_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>jniDebug</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, conn:%p, resultset:%p, no data to retrieve"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>, <argument><expr><name>tscon</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>JNI_FETCH_END</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>jniError</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, conn:%p, query interrupted, tmq fetch block error code:%d, msg:%s"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>, <argument><expr><name>tscon</name></expr></argument>, <argument><expr><name>error_code</name></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>tres</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>JNI_RESULT_SET_NULL</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfFields</name> <init>= <expr><call><name>taos_num_fields</name><argument_list>(<argument><expr><name>tres</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>numOfFields</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniError</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, conn:%p, resultset:%p, fields size is %d"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>, <argument><expr><name>tscon</name></expr></argument>, <argument><expr><name>tres</name></expr></argument>, <argument><expr><name>numOfFields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JNI_NUM_OF_FIELDS_0</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>TAOS_FIELD</name> <modifier>*</modifier></type><name>fields</name> <init>= <expr><call><name>taos_fetch_fields</name><argument_list>(<argument><expr><name>tres</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>jniDebug</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, conn:%p, resultset:%p, fields size is %d"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>, <argument><expr><name>tscon</name></expr></argument>, <argument><expr><name>tres</name></expr></argument>, <argument><expr><name>numOfFields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfFields</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>jobject</name></type> <name>metadataObj</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewObject</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>g_metadataClass</name></expr></argument>, <argument><expr><name>g_metadataConstructFp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>SetIntField</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>metadataObj</name></expr></argument>, <argument><expr><name>g_metadataColtypeField</name></expr></argument>, <argument><expr><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>SetIntField</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>metadataObj</name></expr></argument>, <argument><expr><name>g_metadataColsizeField</name></expr></argument>, <argument><expr><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>SetIntField</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>metadataObj</name></expr></argument>, <argument><expr><name>g_metadataColindexField</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>jstring</name></type> <name>metadataObjColname</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewStringUTF</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>SetObjectField</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>metadataObj</name></expr></argument>, <argument><expr><name>g_metadataColnameField</name></expr></argument>, <argument><expr><name>metadataObjColname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallBooleanMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>arrayListObj</name></expr></argument>, <argument><expr><name>g_arrayListAddFp</name></expr></argument>, <argument><expr><name>metadataObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallVoidMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rowobj</name></expr></argument>, <argument><expr><name>g_blockdataSetNumOfRowsFp</name></expr></argument>, <argument><expr><operator>(</operator><name>jint</name><operator>)</operator><name>numOfRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallVoidMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rowobj</name></expr></argument>, <argument><expr><name>g_blockdataSetNumOfColsFp</name></expr></argument>, <argument><expr><operator>(</operator><name>jint</name><operator>)</operator><name>numOfFields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>data</name><operator>)</operator> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallVoidMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rowobj</name></expr></argument>, <argument><expr><name>g_blockdataSetByteArrayFp</name></expr></argument>, <argument><expr><call><name>jniFromNCharToByteArray</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>JNI_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
</unit>
