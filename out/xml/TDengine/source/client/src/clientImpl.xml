<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/client/src/clientImpl.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cJSON.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clientInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clientLog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scheduler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdatablock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdataformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tglobal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tmsgtype.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tpagedbuf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tref.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsched.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>       <name>initEpSetFromCfg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>firstEp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>secondEp</name></decl></parameter>, <parameter><decl><type><name>SCorEpSet</name><modifier>*</modifier></type> <name>pEpSet</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>SMsgSendInfo</name><modifier>*</modifier></type> <name>buildConnectMsg</name><parameter_list>(<parameter><decl><type><name>SRequestObj</name><modifier>*</modifier></type> <name>pRequest</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>stringLengthCheck</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>maxsize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>len</name> <operator>&gt;</operator> <name>maxsize</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>validateUserName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>user</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>stringLengthCheck</name><argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><name>TSDB_USER_LEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>validatePassword</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>passwd</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>stringLengthCheck</name><argument_list>(<argument><expr><name>passwd</name></expr></argument>, <argument><expr><name>TSDB_PASSWORD_LEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>validateDbName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>db</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>stringLengthCheck</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>TSDB_DB_NAME_LEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>getClusterKey</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>auth</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>ip</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>port</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">512</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s:%s:%s:%d"</literal></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>auth</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>strdup</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>chkRequestKilled</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type>         <name>killed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRequestObj</name><modifier>*</modifier></type> <name>pRequest</name> <init>= <expr><call><name>acquireRequest</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>param</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pRequest</name> <operator>||</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>killed</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>killed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>releaseRequest</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>killed</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>STscObj</name><modifier>*</modifier></type> <name>taosConnectImpl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>auth</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>__taos_async_fn_t</name></type> <name>fp</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>,
                                <parameter><decl><type><name>SAppInstInfo</name><modifier>*</modifier></type> <name>pAppInfo</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>connType</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>STscObj</name><modifier>*</modifier></type> <name>taos_connect_internal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>ip</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pass</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>auth</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>db</name></decl></parameter>,
                               <parameter><decl><type><name>uint16_t</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>connType</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>taos_init</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>validateUserName</name><argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_TSC_INVALID_USER_LENGTH</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>localDb</name><index>[<expr><name>TSDB_DB_NAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>db</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>validateDbName</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_TSC_INVALID_DB_LENGTH</name></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name>localDb</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>localDb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strdequote</name><argument_list>(<argument><expr><name>localDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>secretEncrypt</name><index>[<expr><name>TSDB_PASSWORD_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>auth</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>validatePassword</name><argument_list>(<argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_TSC_INVALID_PASS_LENGTH</name></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>taosEncryptPass_c</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>pass</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>secretEncrypt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name>secretEncrypt</name></expr></argument>, <argument><expr><name>auth</name></expr></argument>, <argument><expr><call><name>tListLen</name><argument_list>(<argument><expr><name>secretEncrypt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>SCorEpSet</name></type> <name>epSet</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ip</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>initEpSetFromCfg</name><argument_list>(<argument><expr><name>ip</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>epSet</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>initEpSetFromCfg</name><argument_list>(<argument><expr><name>tsFirst</name></expr></argument>, <argument><expr><name>tsSecond</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>epSet</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>port</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>epSet</name><operator>.</operator><name>epSet</name><operator>.</operator><name>eps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>port</name> <operator>=</operator> <name>port</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>epSet</name><operator>.</operator><name>epSet</name><operator>.</operator><name>eps</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>port</name> <operator>=</operator> <name>port</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>key</name> <init>= <expr><call><name>getClusterKey</name><argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><name>secretEncrypt</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SAppInstInfo</name><modifier>*</modifier><modifier>*</modifier></type> <name>pInst</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>appInfo</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pInst</name> <operator>=</operator> <call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>appInfo</name><operator>.</operator><name>pInstMap</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SAppInstInfo</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pInst</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>SAppInstInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>mgmtEp</name></name> <operator>=</operator> <name>epSet</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosThreadMutexInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>qnodeMutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pTransporter</name></name> <operator>=</operator> <call><name>openTransporter</name><argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><name>secretEncrypt</name></expr></argument>, <argument><expr><name>tsNumOfCores</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pAppHbMgr</name></name> <operator>=</operator> <call><name>appHbMgrInit</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>p</name><operator>-&gt;</operator><name>pAppHbMgr</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>destroyAppInst</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>appInfo</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>appInfo</name><operator>.</operator><name>pInstMap</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>instKey</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>key</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"new app inst mgr %p, user:%s, ip:%s, port:%d"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pInst</name> <operator>=</operator> <operator>&amp;</operator><name>p</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>appInfo</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>taosConnectImpl</name><argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>secretEncrypt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>localDb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>*</operator><name>pInst</name></expr></argument>, <argument><expr><name>connType</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>buildRequest</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>connId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>sql</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sqlLen</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>validateSql</name></decl></parameter>,
                     <parameter><decl><type><name>SRequestObj</name><modifier>*</modifier><modifier>*</modifier></type> <name>pRequest</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>reqid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>pRequest</name> <operator>=</operator> <call><name>createRequest</name><argument_list>(<argument><expr><name>connId</name></expr></argument>, <argument><expr><name>TSDB_SQL_SELECT</name></expr></argument>, <argument><expr><name>reqid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>pRequest</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"failed to malloc sqlObj, %s"</literal></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pRequest</name><operator>)</operator><operator>-&gt;</operator><name>sqlstr</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>sqlLen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>pRequest</name><operator>)</operator><operator>-&gt;</operator><name>sqlstr</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"0x%"</literal> <name>PRIx64</name> <literal type="string">" failed to prepare sql string buffer, %s"</literal></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>pRequest</name><operator>)</operator><operator>-&gt;</operator><name>self</name></name></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>destroyRequest</name><argument_list>(<argument><expr><operator>*</operator><name>pRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pRequest</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>strntolower</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>pRequest</name><operator>)</operator><operator>-&gt;</operator><name>sqlstr</name></name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>sqlLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pRequest</name><operator>)</operator><operator>-&gt;</operator><name>sqlstr</name></name><index>[<expr><name>sqlLen</name></expr>]</index> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pRequest</name><operator>)</operator><operator>-&gt;</operator><name>sqlLen</name></name> <operator>=</operator> <name>sqlLen</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pRequest</name><operator>)</operator><operator>-&gt;</operator><name>validateOnly</name></name> <operator>=</operator> <name>validateSql</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>param</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSyncQueryParam</name><modifier>*</modifier></type> <name>pParam</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSyncQueryParam</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pParam</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>destroyRequest</name><argument_list>(<argument><expr><operator>*</operator><name>pRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>pRequest</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>tsem_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pParam</name><operator>-&gt;</operator><name>sem</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pParam</name><operator>-&gt;</operator><name>pRequest</name></name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>pRequest</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>param</name> <operator>=</operator> <name>pParam</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pRequest</name><operator>)</operator><operator>-&gt;</operator><name><name>body</name><operator>.</operator><name>param</name></name></name> <operator>=</operator> <name>param</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>STscObj</name><modifier>*</modifier></type> <name>pTscObj</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>pRequest</name><operator>)</operator><operator>-&gt;</operator><name>pTscObj</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>err</name> <init>= <expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>pRequests</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>pRequest</name><operator>)</operator><operator>-&gt;</operator><name>self</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>pRequest</name><operator>)</operator><operator>-&gt;</operator><name>self</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>pRequest</name><operator>)</operator><operator>-&gt;</operator><name>self</name></name></expr></argument>,
                  <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>pRequest</name><operator>)</operator><operator>-&gt;</operator><name>self</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"%"</literal> <name>PRId64</name> <literal type="string">" failed to add to request container, reqId:0x%"</literal> <name>PRIx64</name> <literal type="string">", conn:%"</literal> <name>PRId64</name> <literal type="string">", %s"</literal></expr></argument>,
             <argument><expr><name><operator>(</operator><operator>*</operator><name>pRequest</name><operator>)</operator><operator>-&gt;</operator><name>self</name></name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>pRequest</name><operator>)</operator><operator>-&gt;</operator><name>requestId</name></name></expr></argument>, <argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>destroyRequest</name><argument_list>(<argument><expr><operator>*</operator><name>pRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pRequest</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pRequest</name><operator>)</operator><operator>-&gt;</operator><name>allocatorRefId</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>tsQueryUseNodeAllocator</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>qIsInsertValuesSql</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>pRequest</name><operator>)</operator><operator>-&gt;</operator><name>sqlstr</name></name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>pRequest</name><operator>)</operator><operator>-&gt;</operator><name>sqlLen</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator>
        <call><name>nodesCreateAllocator</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>pRequest</name><operator>)</operator><operator>-&gt;</operator><name>requestId</name></name></expr></argument>, <argument><expr><name>tsQueryNodeChunkSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>pRequest</name><operator>)</operator><operator>-&gt;</operator><name>allocatorRefId</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"%"</literal> <name>PRId64</name> <literal type="string">" failed to create node allocator, reqId:0x%"</literal> <name>PRIx64</name> <literal type="string">", conn:%"</literal> <name>PRId64</name> <literal type="string">", %s"</literal></expr></argument>,
               <argument><expr><name><operator>(</operator><operator>*</operator><name>pRequest</name><operator>)</operator><operator>-&gt;</operator><name>self</name></name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>pRequest</name><operator>)</operator><operator>-&gt;</operator><name>requestId</name></name></expr></argument>, <argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>destroyRequest</name><argument_list>(<argument><expr><operator>*</operator><name>pRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>pRequest</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tscDebugL</name><argument_list>(<argument><expr><literal type="string">"0x%"</literal> <name>PRIx64</name> <literal type="string">" SQL: %s, reqId:0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>pRequest</name><operator>)</operator><operator>-&gt;</operator><name>self</name></name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>pRequest</name><operator>)</operator><operator>-&gt;</operator><name>sqlstr</name></name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>pRequest</name><operator>)</operator><operator>-&gt;</operator><name>requestId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>parseSql</name><parameter_list>(<parameter><decl><type><name>SRequestObj</name><modifier>*</modifier></type> <name>pRequest</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>topicQuery</name></decl></parameter>, <parameter><decl><type><name>SQuery</name><modifier>*</modifier><modifier>*</modifier></type> <name>pQuery</name></decl></parameter>, <parameter><decl><type><name>SStmtCallback</name><modifier>*</modifier></type> <name>pStmtCb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STscObj</name><modifier>*</modifier></type> <name>pTscObj</name> <init>= <expr><name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SParseContext</name></type> <name>cxt</name> <init>= <expr><block>{<expr><operator>.</operator><name>requestId</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr>,
                       <expr><operator>.</operator><name>requestRid</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>self</name></name></expr>,
                       <expr><operator>.</operator><name>acctId</name> <operator>=</operator> <name><name>pTscObj</name><operator>-&gt;</operator><name>acctId</name></name></expr>,
                       <expr><operator>.</operator><name>db</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>pDb</name></name></expr>,
                       <expr><operator>.</operator><name>topicQuery</name> <operator>=</operator> <name>topicQuery</name></expr>,
                       <expr><operator>.</operator><name>pSql</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>sqlstr</name></name></expr>,
                       <expr><operator>.</operator><name>sqlLen</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>sqlLen</name></name></expr>,
                       <expr><operator>.</operator><name>pMsg</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>msgBuf</name></name></expr>,
                       <expr><operator>.</operator><name>msgLen</name> <operator>=</operator> <name>ERROR_MSG_BUF_DEFAULT_SIZE</name></expr>,
                       <expr><operator>.</operator><name>pTransporter</name> <operator>=</operator> <name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>pTransporter</name></name></expr>,
                       <expr><operator>.</operator><name>pStmtCb</name> <operator>=</operator> <name>pStmtCb</name></expr>,
                       <expr><operator>.</operator><name>pUser</name> <operator>=</operator> <name><name>pTscObj</name><operator>-&gt;</operator><name>user</name></name></expr>,
                       <expr><operator>.</operator><name>schemalessType</name> <operator>=</operator> <name><name>pTscObj</name><operator>-&gt;</operator><name>schemalessType</name></name></expr>,
                       <expr><operator>.</operator><name>isSuperUser</name> <operator>=</operator> <operator>(</operator><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name>TSDB_DEFAULT_USER</name></expr></argument>)</argument_list></call><operator>)</operator></expr>,
                       <expr><operator>.</operator><name>enableSysInfo</name> <operator>=</operator> <name><name>pTscObj</name><operator>-&gt;</operator><name>sysInfo</name></name></expr>,
                       <expr><operator>.</operator><name>svrVer</name> <operator>=</operator> <name><name>pTscObj</name><operator>-&gt;</operator><name>sVer</name></name></expr>,
                       <expr><operator>.</operator><name>nodeOffline</name> <operator>=</operator> <operator>(</operator><name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>onlineDnodes</name></name> <operator>&lt;</operator> <name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>totalDnodes</name></name><operator>)</operator></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>cxt</name><operator>.</operator><name>mgmtEpSet</name></name> <operator>=</operator> <call><name>getEpSet_s</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>mgmtEp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>catalogGetHandle</name><argument_list>(<argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>clusterId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cxt</name><operator>.</operator><name>pCatalog</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>qParseSql</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cxt</name></expr></argument>, <argument><expr><name>pQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>pQuery</name><operator>)</operator><operator>-&gt;</operator><name>haveResultSet</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>setResSchemaInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>resInfo</name></name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>pQuery</name><operator>)</operator><operator>-&gt;</operator><name>pResSchema</name></name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>pQuery</name><operator>)</operator><operator>-&gt;</operator><name>numOfResCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>setResPrecision</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>resInfo</name></name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>pQuery</name><operator>)</operator><operator>-&gt;</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>||</operator> <call><name>NEED_CLIENT_HANDLE_ERROR</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>TSWAP</name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>dbList</name></name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>pQuery</name><operator>)</operator><operator>-&gt;</operator><name>pDbList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSWAP</name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>tableList</name></name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>pQuery</name><operator>)</operator><operator>-&gt;</operator><name>pTableList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSWAP</name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>targetTableList</name></name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>pQuery</name><operator>)</operator><operator>-&gt;</operator><name>pTargetTableList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>cxt</name><operator>.</operator><name>pTableMetaPos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>cxt</name><operator>.</operator><name>pTableVgroupPos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>execLocalCmd</name><parameter_list>(<parameter><decl><type><name>SRequestObj</name><modifier>*</modifier></type> <name>pRequest</name></decl></parameter>, <parameter><decl><type><name>SQuery</name><modifier>*</modifier></type> <name>pQuery</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SRetrieveTableRsp</name><modifier>*</modifier></type> <name>pRsp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>            <name>code</name> <init>= <expr><call><name>qExecCommand</name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name><operator>-&gt;</operator><name>sysInfo</name></name></expr></argument>, <argument><expr><name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pRsp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>!=</operator> <name>pRsp</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>setQueryResultFromRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>resInfo</name></name></expr></argument>, <argument><expr><name>pRsp</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>execDdlQuery</name><parameter_list>(<parameter><decl><type><name>SRequestObj</name><modifier>*</modifier></type> <name>pRequest</name></decl></parameter>, <parameter><decl><type><name>SQuery</name><modifier>*</modifier></type> <name>pQuery</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// drop table if exists not_exists_table</comment>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pQuery</name><operator>-&gt;</operator><name>pCmdMsg</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SCmdMsgInfo</name><modifier>*</modifier></type> <name>pMsgInfo</name> <init>= <expr><name><name>pQuery</name><operator>-&gt;</operator><name>pCmdMsg</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>pMsgInfo</name><operator>-&gt;</operator><name>msgType</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>requestMsg</name></name> <operator>=</operator> <operator>(</operator><name>SDataBuf</name><operator>)</operator><block>{<expr><operator>.</operator><name>pData</name> <operator>=</operator> <name><name>pMsgInfo</name><operator>-&gt;</operator><name>pMsg</name></name></expr>, <expr><operator>.</operator><name>len</name> <operator>=</operator> <name><name>pMsgInfo</name><operator>-&gt;</operator><name>msgLen</name></name></expr>, <expr><operator>.</operator><name>handle</name> <operator>=</operator> <name>NULL</name></expr>}</block></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsgInfo</name><operator>-&gt;</operator><name>pMsg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>  <comment type="line">// pMsg transferred to SMsgSendInfo management</comment>

  <decl_stmt><decl><type><name>STscObj</name><modifier>*</modifier></type>      <name>pTscObj</name> <init>= <expr><name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMsgSendInfo</name><modifier>*</modifier></type> <name>pSendMsg</name> <init>= <expr><call><name>buildMsgInfoImpl</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>transporterId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>asyncSendMsgToServer</name><argument_list>(<argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>pTransporter</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMsgInfo</name><operator>-&gt;</operator><name>epSet</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>transporterId</name></expr></argument>, <argument><expr><name>pSendMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tsem_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>rspSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SAppInstInfo</name><modifier>*</modifier></type> <name>getAppInfo</name><parameter_list>(<parameter><decl><type><name>SRequestObj</name><modifier>*</modifier></type> <name>pRequest</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name></name></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name></type> <name>asyncExecLocalCmd</name><parameter_list>(<parameter><decl><type><name>SRequestObj</name><modifier>*</modifier></type> <name>pRequest</name></decl></parameter>, <parameter><decl><type><name>SQuery</name><modifier>*</modifier></type> <name>pQuery</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SRetrieveTableRsp</name><modifier>*</modifier></type> <name>pRsp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pRequest</name><operator>-&gt;</operator><name>validateOnly</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>queryFp</name></name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>param</name></name></expr></argument>, <argument><expr><name>pRequest</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>qExecCommand</name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name><operator>-&gt;</operator><name>sysInfo</name></name></expr></argument>, <argument><expr><name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pRsp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>!=</operator> <name>pRsp</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>setQueryResultFromRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>resInfo</name></name></expr></argument>, <argument><expr><name>pRsp</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SReqResultInfo</name><modifier>*</modifier></type> <name>pResultInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>resInfo</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pRequest</name><operator>-&gt;</operator><name>code</name></name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"0x%"</literal> <name>PRIx64</name> <literal type="string">" fetch results failed, code:%s, reqId:0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>self</name></name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>,
             <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"0x%"</literal> <name>PRIx64</name> <literal type="string">" fetch results, numOfRows:%"</literal> <name>PRId64</name> <literal type="string">" total Rows:%"</literal> <name>PRId64</name> <literal type="string">", complete:%d, reqId:0x%"</literal> <name>PRIx64</name></expr></argument>,
             <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>self</name></name></expr></argument>, <argument><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></argument>, <argument><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>totalRows</name></name></expr></argument>, <argument><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>completed</name></name></expr></argument>,
             <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>queryFp</name></name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>param</name></name></expr></argument>, <argument><expr><name>pRequest</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>asyncExecDdlQuery</name><parameter_list>(<parameter><decl><type><name>SRequestObj</name><modifier>*</modifier></type> <name>pRequest</name></decl></parameter>, <parameter><decl><type><name>SQuery</name><modifier>*</modifier></type> <name>pQuery</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pRequest</name><operator>-&gt;</operator><name>validateOnly</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>queryFp</name></name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>param</name></name></expr></argument>, <argument><expr><name>pRequest</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// drop table if exists not_exists_table</comment>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pQuery</name><operator>-&gt;</operator><name>pCmdMsg</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>queryFp</name></name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>param</name></name></expr></argument>, <argument><expr><name>pRequest</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SCmdMsgInfo</name><modifier>*</modifier></type> <name>pMsgInfo</name> <init>= <expr><name><name>pQuery</name><operator>-&gt;</operator><name>pCmdMsg</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>pMsgInfo</name><operator>-&gt;</operator><name>msgType</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>requestMsg</name></name> <operator>=</operator> <operator>(</operator><name>SDataBuf</name><operator>)</operator><block>{<expr><operator>.</operator><name>pData</name> <operator>=</operator> <name><name>pMsgInfo</name><operator>-&gt;</operator><name>pMsg</name></name></expr>, <expr><operator>.</operator><name>len</name> <operator>=</operator> <name><name>pMsgInfo</name><operator>-&gt;</operator><name>msgLen</name></name></expr>, <expr><operator>.</operator><name>handle</name> <operator>=</operator> <name>NULL</name></expr>}</block></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsgInfo</name><operator>-&gt;</operator><name>pMsg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>  <comment type="line">// pMsg transferred to SMsgSendInfo management</comment>

  <decl_stmt><decl><type><name>SAppInstInfo</name><modifier>*</modifier></type> <name>pAppInfo</name> <init>= <expr><call><name>getAppInfo</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMsgSendInfo</name><modifier>*</modifier></type> <name>pSendMsg</name> <init>= <expr><call><name>buildMsgInfoImpl</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>transporterId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>asyncSendMsgToServer</name><argument_list>(<argument><expr><name><name>pAppInfo</name><operator>-&gt;</operator><name>pTransporter</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMsgInfo</name><operator>-&gt;</operator><name>epSet</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>transporterId</name></expr></argument>, <argument><expr><name>pSendMsg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>queryFp</name></name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>param</name></name></expr></argument>, <argument><expr><name>pRequest</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>compareQueryNodeLoad</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>elem1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>elem2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SQueryNodeLoad</name><modifier>*</modifier></type> <name>node1</name> <init>= <expr><operator>(</operator><name>SQueryNodeLoad</name><operator>*</operator><operator>)</operator><name>elem1</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQueryNodeLoad</name><modifier>*</modifier></type> <name>node2</name> <init>= <expr><operator>(</operator><name>SQueryNodeLoad</name><operator>*</operator><operator>)</operator><name>elem2</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>node1</name><operator>-&gt;</operator><name>load</name></name> <operator>&lt;</operator> <name><name>node2</name><operator>-&gt;</operator><name>load</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name><name>node1</name><operator>-&gt;</operator><name>load</name></name> <operator>&gt;</operator> <name><name>node2</name><operator>-&gt;</operator><name>load</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>updateQnodeList</name><parameter_list>(<parameter><decl><type><name>SAppInstInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pNodeList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>qnodeMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pQnodeList</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pQnodeList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pQnodeList</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"QnodeList cleared in cluster 0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>clusterId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>pNodeList</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pQnodeList</name></name> <operator>=</operator> <call><name>taosArrayDup</name><argument_list>(<argument><expr><name>pNodeList</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArraySort</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pQnodeList</name></name></expr></argument>, <argument><expr><name>compareQueryNodeLoad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"QnodeList updated in cluster 0x%"</literal> <name>PRIx64</name> <literal type="string">", num:%ld"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>clusterId</name></name></expr></argument>,
             <argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pQnodeList</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>qnodeMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>qnodeRequired</name><parameter_list>(<parameter><decl><type><name>SRequestObj</name><modifier>*</modifier></type> <name>pRequest</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>QUERY_POLICY_VNODE</name> <operator>==</operator> <name>tsQueryPolicy</name> <operator>||</operator> <name>QUERY_POLICY_CLIENT</name> <operator>==</operator> <name>tsQueryPolicy</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SAppInstInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>          <name>required</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>qnodeMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>required</name> <operator>=</operator> <operator>(</operator><name>NULL</name> <operator>==</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>pQnodeList</name></name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>qnodeMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>required</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>getQnodeList</name><parameter_list>(<parameter><decl><type><name>SRequestObj</name><modifier>*</modifier></type> <name>pRequest</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier><modifier>*</modifier></type> <name>pNodeList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SAppInstInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>qnodeMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pQnodeList</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pNodeList</name> <operator>=</operator> <call><name>taosArrayDup</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pQnodeList</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>qnodeMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <operator>*</operator><name>pNodeList</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCatalog</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogGetHandle</name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>clusterId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCatalog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pNodeList</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SQueryNodeLoad</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>SRequestConnInfo</name></type> <name>conn</name> <init>= <expr><block>{<expr><operator>.</operator><name>pTrans</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>pTransporter</name></name></expr>,
                               <expr><operator>.</operator><name>requestId</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr>,
                               <expr><operator>.</operator><name>requestObjRefId</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>self</name></name></expr>,
                               <expr><operator>.</operator><name>mgmtEps</name> <operator>=</operator> <macro><name>getEpSet_s</name><argument_list>(<argument>&amp;pRequest-&gt;pTscObj-&gt;pAppInfo-&gt;mgmtEp</argument>)</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogGetQnodeList</name><argument_list>(<argument><expr><name>pCatalog</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conn</name></expr></argument>, <argument><expr><operator>*</operator><name>pNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>pNodeList</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>updateQnodeList</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><operator>*</operator><name>pNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>getPlan</name><parameter_list>(<parameter><decl><type><name>SRequestObj</name><modifier>*</modifier></type> <name>pRequest</name></decl></parameter>, <parameter><decl><type><name>SQuery</name><modifier>*</modifier></type> <name>pQuery</name></decl></parameter>, <parameter><decl><type><name>SQueryPlan</name><modifier>*</modifier><modifier>*</modifier></type> <name>pPlan</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pNodeList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>pQuery</name><operator>-&gt;</operator><name>msgType</name></name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SAppInstInfo</name><modifier>*</modifier></type> <name>pAppInfo</name> <init>= <expr><call><name>getAppInfo</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SPlanContext</name></type> <name>cxt</name> <init>= <expr><block>{<expr><operator>.</operator><name>queryId</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr>,
                      <expr><operator>.</operator><name>acctId</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name><operator>-&gt;</operator><name>acctId</name></name></expr>,
                      <expr><operator>.</operator><name>mgmtEpSet</name> <operator>=</operator> <call><name>getEpSet_s</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pAppInfo</name><operator>-&gt;</operator><name>mgmtEp</name></name></expr></argument>)</argument_list></call></expr>,
                      <expr><operator>.</operator><name>pAstRoot</name> <operator>=</operator> <name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name></expr>,
                      <expr><operator>.</operator><name>showRewrite</name> <operator>=</operator> <name><name>pQuery</name><operator>-&gt;</operator><name>showRewrite</name></name></expr>,
                      <expr><operator>.</operator><name>pMsg</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>msgBuf</name></name></expr>,
                      <expr><operator>.</operator><name>msgLen</name> <operator>=</operator> <name>ERROR_MSG_BUF_DEFAULT_SIZE</name></expr>,
                      <expr><operator>.</operator><name>pUser</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name><operator>-&gt;</operator><name>user</name></name></expr>,
                      <expr><operator>.</operator><name>sysInfo</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name><operator>-&gt;</operator><name>sysInfo</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

  <return>return <expr><call><name>qCreateQueryPlan</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cxt</name></expr></argument>, <argument><expr><name>pPlan</name></expr></argument>, <argument><expr><name>pNodeList</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>setResSchemaInfo</name><parameter_list>(<parameter><decl><type><name>SReqResultInfo</name><modifier>*</modifier></type> <name>pResInfo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SSchema</name><modifier>*</modifier></type> <name>pSchema</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfCols</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pSchema</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>numOfCols</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pResInfo</name><operator>-&gt;</operator><name>numOfCols</name></name> <operator>=</operator> <name>numOfCols</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pResInfo</name><operator>-&gt;</operator><name>fields</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pResInfo</name><operator>-&gt;</operator><name>fields</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pResInfo</name><operator>-&gt;</operator><name>userFields</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pResInfo</name><operator>-&gt;</operator><name>userFields</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pResInfo</name><operator>-&gt;</operator><name>fields</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>numOfCols</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TAOS_FIELD</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pResInfo</name><operator>-&gt;</operator><name>userFields</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>numOfCols</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TAOS_FIELD</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>numOfCols</name> <operator>==</operator> <name><name>pResInfo</name><operator>-&gt;</operator><name>numOfCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pResInfo</name><operator>-&gt;</operator><name>numOfCols</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>pResInfo</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bytes</name> <operator>=</operator> <name><name>pSchema</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pResInfo</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>pSchema</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pResInfo</name><operator>-&gt;</operator><name>userFields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bytes</name> <operator>=</operator> <name><name>pSchema</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pResInfo</name><operator>-&gt;</operator><name>userFields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name><name>pSchema</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pSchema</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_VARCHAR</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pResInfo</name><operator>-&gt;</operator><name>userFields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bytes</name> <operator>-=</operator> <name>VARSTR_HEADER_SIZE</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pSchema</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_NCHAR</name> <operator>||</operator> <name><name>pSchema</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_JSON</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pResInfo</name><operator>-&gt;</operator><name>userFields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bytes</name> <operator>=</operator> <operator>(</operator><name><name>pResInfo</name><operator>-&gt;</operator><name>userFields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bytes</name> <operator>-</operator> <name>VARSTR_HEADER_SIZE</name><operator>)</operator> <operator>/</operator> <name>TSDB_NCHAR_SIZE</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>pResInfo</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>pSchema</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><call><name>tListLen</name><argument_list>(<argument><expr><name><name>pResInfo</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>pResInfo</name><operator>-&gt;</operator><name>userFields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>pSchema</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><call><name>tListLen</name><argument_list>(<argument><expr><name><name>pResInfo</name><operator>-&gt;</operator><name>userFields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>setResPrecision</name><parameter_list>(<parameter><decl><type><name>SReqResultInfo</name><modifier>*</modifier></type> <name>pResInfo</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>precision</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>precision</name> <operator>!=</operator> <name>TSDB_TIME_PRECISION_MILLI</name> <operator>&amp;&amp;</operator> <name>precision</name> <operator>!=</operator> <name>TSDB_TIME_PRECISION_MICRO</name> <operator>&amp;&amp;</operator>
      <name>precision</name> <operator>!=</operator> <name>TSDB_TIME_PRECISION_NANO</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pResInfo</name><operator>-&gt;</operator><name>precision</name></name> <operator>=</operator> <name>precision</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>buildVnodePolicyNodeList</name><parameter_list>(<parameter><decl><type><name>SRequestObj</name><modifier>*</modifier></type> <name>pRequest</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier><modifier>*</modifier></type> <name>pNodeList</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pMnodeList</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pDbVgList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>nodeList</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SQueryNodeLoad</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>policy</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>tsQueryPolicy</name> <operator>==</operator> <name>QUERY_POLICY_VNODE</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"vnode"</literal></expr> </then><else>: <expr><literal type="string">"client"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>dbNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pDbVgList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dbNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pVg</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>pDbVgList</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>vgNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pVg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>vgNum</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>vgNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SVgroupInfo</name><modifier>*</modifier></type>   <name>pInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pVg</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SQueryNodeLoad</name></type> <name>load</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>load</name><operator>.</operator><name>addr</name><operator>.</operator><name>nodeId</name></name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>vgId</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>load</name><operator>.</operator><name>addr</name><operator>.</operator><name>epSet</name></name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>epSet</name></name></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>vnodeNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>vnodeNum</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"0x%"</literal> <name>PRIx64</name> <literal type="string">" %s policy, use vnode list, num:%d"</literal></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr></argument>, <argument><expr><name>policy</name></expr></argument>, <argument><expr><name>vnodeNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>mnodeNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pMnodeList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>mnodeNum</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"0x%"</literal> <name>PRIx64</name> <literal type="string">" %s policy, empty node list"</literal></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr></argument>, <argument><expr><name>policy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pMnodeList</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosArrayAddBatch</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>mnodeNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"0x%"</literal> <name>PRIx64</name> <literal type="string">" %s policy, use mnode list, num:%d"</literal></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr></argument>, <argument><expr><name>policy</name></expr></argument>, <argument><expr><name>mnodeNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><operator>*</operator><name>pNodeList</name> <operator>=</operator> <name>nodeList</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>buildQnodePolicyNodeList</name><parameter_list>(<parameter><decl><type><name>SRequestObj</name><modifier>*</modifier></type> <name>pRequest</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier><modifier>*</modifier></type> <name>pNodeList</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pMnodeList</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pQnodeList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>nodeList</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SQueryNodeLoad</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>qNodeNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pQnodeList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>qNodeNum</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pQnodeList</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosArrayAddBatch</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>qNodeNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"0x%"</literal> <name>PRIx64</name> <literal type="string">" qnode policy, use qnode list, num:%d"</literal></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr></argument>, <argument><expr><name>qNodeNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>mnodeNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pMnodeList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>mnodeNum</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"0x%"</literal> <name>PRIx64</name> <literal type="string">" qnode policy, empty node list"</literal></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pMnodeList</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosArrayAddBatch</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>mnodeNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"0x%"</literal> <name>PRIx64</name> <literal type="string">" qnode policy, use mnode list, num:%d"</literal></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr></argument>, <argument><expr><name>mnodeNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><operator>*</operator><name>pNodeList</name> <operator>=</operator> <name>nodeList</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>buildAsyncExecNodeList</name><parameter_list>(<parameter><decl><type><name>SRequestObj</name><modifier>*</modifier></type> <name>pRequest</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier><modifier>*</modifier></type> <name>pNodeList</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pMnodeList</name></decl></parameter>, <parameter><decl><type><name>SMetaData</name><modifier>*</modifier></type> <name>pResultMeta</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pDbVgList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pQnodeList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <switch>switch <condition>(<expr><name>tsQueryPolicy</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>QUERY_POLICY_VNODE</name></expr>:</case>
    <case>case <expr><name>QUERY_POLICY_CLIENT</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>pResultMeta</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>pDbVgList</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>int32_t</name></type> <name>dbNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pResultMeta</name><operator>-&gt;</operator><name>pDbVgroup</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dbNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
          <decl_stmt><decl><type><name>SMetaRes</name><modifier>*</modifier></type> <name>pRes</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pResultMeta</name><operator>-&gt;</operator><name>pDbVgroup</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name><name>pRes</name><operator>-&gt;</operator><name>code</name></name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name><name>pRes</name><operator>-&gt;</operator><name>pRes</name></name></expr>)</condition> <block>{<block_content>
            <continue>continue;</continue>
          </block_content>}</block></if></if_stmt>

          <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pDbVgList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRes</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildVnodePolicyNodeList</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>, <argument><expr><name>pNodeList</name></expr></argument>, <argument><expr><name>pMnodeList</name></expr></argument>, <argument><expr><name>pDbVgList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>QUERY_POLICY_HYBRID</name></expr>:</case>
    <case>case <expr><name>QUERY_POLICY_QNODE</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>pResultMeta</name> <operator>&amp;&amp;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pResultMeta</name><operator>-&gt;</operator><name>pQnodeList</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SMetaRes</name><modifier>*</modifier></type> <name>pRes</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pResultMeta</name><operator>-&gt;</operator><name>pQnodeList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pRes</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>pQnodeList</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>pQnodeList</name> <operator>=</operator> <call><name>taosArrayDup</name><argument_list>(<argument><expr><operator>(</operator><name>SArray</name><operator>*</operator><operator>)</operator><name><name>pRes</name><operator>-&gt;</operator><name>pRes</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>SAppInstInfo</name><modifier>*</modifier></type> <name>pInst</name> <init>= <expr><name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInst</name><operator>-&gt;</operator><name>qnodeMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pInst</name><operator>-&gt;</operator><name>pQnodeList</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>pQnodeList</name> <operator>=</operator> <call><name>taosArrayDup</name><argument_list>(<argument><expr><name><name>pInst</name><operator>-&gt;</operator><name>pQnodeList</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInst</name><operator>-&gt;</operator><name>qnodeMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildQnodePolicyNodeList</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>, <argument><expr><name>pNodeList</name></expr></argument>, <argument><expr><name>pMnodeList</name></expr></argument>, <argument><expr><name>pQnodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <default>default:</default>
      <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"unknown query policy: %d"</literal></expr></argument>, <argument><expr><name>tsQueryPolicy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_APP_ERROR</name></expr>;</return>
  </block_content>}</block></switch>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pDbVgList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pQnodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>freeVgList</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pList</name> <init>= <expr><operator>*</operator><operator>(</operator><name>SArray</name><operator>*</operator><operator>*</operator><operator>)</operator><name>list</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>buildSyncExecNodeList</name><parameter_list>(<parameter><decl><type><name>SRequestObj</name><modifier>*</modifier></type> <name>pRequest</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier><modifier>*</modifier></type> <name>pNodeList</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pMnodeList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pDbVgList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pQnodeList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <switch>switch <condition>(<expr><name>tsQueryPolicy</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>QUERY_POLICY_VNODE</name></expr>:</case>
    <case>case <expr><name>QUERY_POLICY_CLIENT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>dbNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>dbList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>dbNum</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SCatalog</name><modifier>*</modifier></type>     <name>pCtg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SAppInstInfo</name><modifier>*</modifier></type> <name>pInst</name> <init>= <expr><name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogGetHandle</name><argument_list>(<argument><expr><name><name>pInst</name><operator>-&gt;</operator><name>clusterId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCtg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
          <goto>goto <name>_return</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>pDbVgList</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>dbNum</name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pVgList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dbNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
          <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>            <name>dbFName</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>dbList</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>SRequestConnInfo</name></type> <name>conn</name> <init>= <expr><block>{<expr><operator>.</operator><name>pTrans</name> <operator>=</operator> <name><name>pInst</name><operator>-&gt;</operator><name>pTransporter</name></name></expr>,
                                   <expr><operator>.</operator><name>requestId</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr>,
                                   <expr><operator>.</operator><name>requestObjRefId</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>self</name></name></expr>,
                                   <expr><operator>.</operator><name>mgmtEps</name> <operator>=</operator> <macro><name>getEpSet_s</name><argument_list>(<argument>&amp;pInst-&gt;mgmtEp</argument>)</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>

          <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogGetDBVgList</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conn</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pVgList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
            <goto>goto <name>_return</name>;</goto>
          </block_content>}</block></if></if_stmt>

          <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pDbVgList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pVgList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildVnodePolicyNodeList</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>, <argument><expr><name>pNodeList</name></expr></argument>, <argument><expr><name>pMnodeList</name></expr></argument>, <argument><expr><name>pDbVgList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>QUERY_POLICY_HYBRID</name></expr>:</case>
    <case>case <expr><name>QUERY_POLICY_QNODE</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>getQnodeList</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pQnodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildQnodePolicyNodeList</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>, <argument><expr><name>pNodeList</name></expr></argument>, <argument><expr><name>pMnodeList</name></expr></argument>, <argument><expr><name>pQnodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <default>default:</default>
      <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"unknown query policy: %d"</literal></expr></argument>, <argument><expr><name>tsQueryPolicy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_APP_ERROR</name></expr>;</return>
  </block_content>}</block></switch>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name>pDbVgList</name></expr></argument>, <argument><expr><name>freeVgList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pQnodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>scheduleQuery</name><parameter_list>(<parameter><decl><type><name>SRequestObj</name><modifier>*</modifier></type> <name>pRequest</name></decl></parameter>, <parameter><decl><type><name>SQueryPlan</name><modifier>*</modifier></type> <name>pDag</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pNodeList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pTransporter</name> <init>= <expr><name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>pTransporter</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SExecResult</name></type>      <name>res</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRequestConnInfo</name></type> <name>conn</name> <init>= <expr><block>{<expr><operator>.</operator><name>pTrans</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>pTransporter</name></name></expr>,
                           <expr><operator>.</operator><name>requestId</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr>,
                           <expr><operator>.</operator><name>requestObjRefId</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>self</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSchedulerReq</name></type>    <name>req</name> <init>= <expr><block>{
         <expr><operator>.</operator><name>syncReq</name> <operator>=</operator> <name>true</name></expr>,
         <expr><operator>.</operator><name>localReq</name> <operator>=</operator> <operator>(</operator><name>tsQueryPolicy</name> <operator>==</operator> <name>QUERY_POLICY_CLIENT</name><operator>)</operator></expr>,
         <expr><operator>.</operator><name>pConn</name> <operator>=</operator> <operator>&amp;</operator><name>conn</name></expr>,
         <expr><operator>.</operator><name>pNodeList</name> <operator>=</operator> <name>pNodeList</name></expr>,
         <expr><operator>.</operator><name>pDag</name> <operator>=</operator> <name>pDag</name></expr>,
         <expr><operator>.</operator><name>sql</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>sqlstr</name></name></expr>,
         <expr><operator>.</operator><name>startTs</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>metric</name><operator>.</operator><name>start</name></name></expr>,
         <expr><operator>.</operator><name>execFp</name> <operator>=</operator> <name>NULL</name></expr>,
         <expr><operator>.</operator><name>cbParam</name> <operator>=</operator> <name>NULL</name></expr>,
         <expr><operator>.</operator><name>chkKillFp</name> <operator>=</operator> <name>chkRequestKilled</name></expr>,
         <expr><operator>.</operator><name>chkKillParam</name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>pRequest</name><operator>-&gt;</operator><name>self</name></name></expr>,
         <expr><operator>.</operator><name>pExecRes</name> <operator>=</operator> <operator>&amp;</operator><name>res</name></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>schedulerExecJob</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>queryJob</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>destroyQueryExecRes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>resInfo</name><operator>.</operator><name>execRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>resInfo</name><operator>.</operator><name>execRes</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>schedulerFreeJob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>queryJob</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
    <return>return <expr><name><name>pRequest</name><operator>-&gt;</operator><name>code</name></name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TDMT_VND_SUBMIT</name> <operator>==</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>type</name></name> <operator>||</operator> <name>TDMT_VND_DELETE</name> <operator>==</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>type</name></name> <operator>||</operator>
      <name>TDMT_VND_CREATE_TABLE</name> <operator>==</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>resInfo</name><operator>.</operator><name>numOfRows</name></name> <operator>=</operator> <name><name>res</name><operator>.</operator><name>numOfRows</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>TDMT_VND_SUBMIT</name> <operator>==</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>STscObj</name><modifier>*</modifier></type>            <name>pTscObj</name> <init>= <expr><name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SAppClusterSummary</name><modifier>*</modifier></type> <name>pActivity</name> <init>= <expr><operator>&amp;</operator><name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>summary</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>atomic_add_fetch_64</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pActivity</name><operator>-&gt;</operator><name>numOfInsertRows</name></name></expr></argument>, <argument><expr><name><name>res</name><operator>.</operator><name>numOfRows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>schedulerFreeJob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>queryJob</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name><name>res</name><operator>.</operator><name>code</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name><name>res</name><operator>.</operator><name>code</name></name></expr>;</expr_stmt>
  <return>return <expr><name><name>pRequest</name><operator>-&gt;</operator><name>code</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>handleSubmitExecRes</name><parameter_list>(<parameter><decl><type><name>SRequestObj</name><modifier>*</modifier></type> <name>pRequest</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>res</name></decl></parameter>, <parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCatalog</name></decl></parameter>, <parameter><decl><type><name>SEpSet</name><modifier>*</modifier></type> <name>epset</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>     <name>pArray</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSubmitRsp</name><modifier>*</modifier></type> <name>pRsp</name> <init>= <expr><operator>(</operator><name>SSubmitRsp</name><operator>*</operator><operator>)</operator><name>res</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pRsp</name><operator>-&gt;</operator><name>nBlocks</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pArray</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>nBlocks</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STbSVersion</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pArray</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pRsp</name><operator>-&gt;</operator><name>nBlocks</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSubmitBlkRsp</name><modifier>*</modifier></type> <name>blk</name> <init>= <expr><name><name>pRsp</name><operator>-&gt;</operator><name>pBlocks</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>blk</name><operator>-&gt;</operator><name>pMeta</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>handleCreateTbExecRes</name><argument_list>(<argument><expr><name><name>blk</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><name>pCatalog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tFreeSTableMetaRsp</name><argument_list>(<argument><expr><name><name>blk</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>blk</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>blk</name><operator>-&gt;</operator><name>tblFName</name></name> <operator>||</operator> <literal type="number">0</literal> <operator>==</operator> <name><name>blk</name><operator>-&gt;</operator><name>tblFName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>STbSVersion</name></type> <name>tbSver</name> <init>= <expr><block>{<expr><operator>.</operator><name>tbFName</name> <operator>=</operator> <name><name>blk</name><operator>-&gt;</operator><name>tblFName</name></name></expr>, <expr><operator>.</operator><name>sver</name> <operator>=</operator> <name><name>blk</name><operator>-&gt;</operator><name>sver</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tbSver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>SRequestConnInfo</name></type> <name>conn</name> <init>= <expr><block>{<expr><operator>.</operator><name>pTrans</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>pTransporter</name></name></expr>,
                           <expr><operator>.</operator><name>requestId</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr>,
                           <expr><operator>.</operator><name>requestObjRefId</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>self</name></name></expr>,
                           <expr><operator>.</operator><name>mgmtEps</name> <operator>=</operator> <operator>*</operator><name>epset</name></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogChkTbMetaVersion</name><argument_list>(<argument><expr><name>pCatalog</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conn</name></expr></argument>, <argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>handleQueryExecRes</name><parameter_list>(<parameter><decl><type><name>SRequestObj</name><modifier>*</modifier></type> <name>pRequest</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>res</name></decl></parameter>, <parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCatalog</name></decl></parameter>, <parameter><decl><type><name>SEpSet</name><modifier>*</modifier></type> <name>epset</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pArray</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pTbArray</name> <init>= <expr><operator>(</operator><name>SArray</name><operator>*</operator><operator>)</operator><name>res</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>tbNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pTbArray</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tbNum</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pArray</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>tbNum</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STbSVersion</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pArray</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tbNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STbVerInfo</name><modifier>*</modifier></type> <name>tbInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pTbArray</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>STbSVersion</name></type> <name>tbSver</name> <init>= <expr><block>{<expr><operator>.</operator><name>tbFName</name> <operator>=</operator> <name><name>tbInfo</name><operator>-&gt;</operator><name>tbFName</name></name></expr>, <expr><operator>.</operator><name>sver</name> <operator>=</operator> <name><name>tbInfo</name><operator>-&gt;</operator><name>sversion</name></name></expr>, <expr><operator>.</operator><name>tver</name> <operator>=</operator> <name><name>tbInfo</name><operator>-&gt;</operator><name>tversion</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tbSver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>SRequestConnInfo</name></type> <name>conn</name> <init>= <expr><block>{<expr><operator>.</operator><name>pTrans</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>pTransporter</name></name></expr>,
                           <expr><operator>.</operator><name>requestId</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr>,
                           <expr><operator>.</operator><name>requestObjRefId</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>self</name></name></expr>,
                           <expr><operator>.</operator><name>mgmtEps</name> <operator>=</operator> <operator>*</operator><name>epset</name></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogChkTbMetaVersion</name><argument_list>(<argument><expr><name>pCatalog</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conn</name></expr></argument>, <argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>handleAlterTbExecRes</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>res</name></decl></parameter>, <parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCatalog</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>catalogUpdateTableMeta</name><argument_list>(<argument><expr><name>pCatalog</name></expr></argument>, <argument><expr><operator>(</operator><name>STableMetaRsp</name><operator>*</operator><operator>)</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>handleCreateTbExecRes</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>res</name></decl></parameter>, <parameter><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCatalog</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>catalogUpdateTableMeta</name><argument_list>(<argument><expr><name>pCatalog</name></expr></argument>, <argument><expr><operator>(</operator><name>STableMetaRsp</name><operator>*</operator><operator>)</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>handleQueryExecRsp</name><parameter_list>(<parameter><decl><type><name>SRequestObj</name><modifier>*</modifier></type> <name>pRequest</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>resInfo</name><operator>.</operator><name>execRes</name><operator>.</operator><name>res</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name><name>pRequest</name><operator>-&gt;</operator><name>code</name></name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SCatalog</name><modifier>*</modifier></type>     <name>pCatalog</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SAppInstInfo</name><modifier>*</modifier></type> <name>pAppInfo</name> <init>= <expr><call><name>getAppInfo</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>catalogGetHandle</name><argument_list>(<argument><expr><name><name>pAppInfo</name><operator>-&gt;</operator><name>clusterId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCatalog</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SEpSet</name></type>       <name>epset</name> <init>= <expr><call><name>getEpSet_s</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pAppInfo</name><operator>-&gt;</operator><name>mgmtEp</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SExecResult</name><modifier>*</modifier></type> <name>pRes</name> <init>= <expr><operator>&amp;</operator><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>resInfo</name><operator>.</operator><name>execRes</name></name></expr></init></decl>;</decl_stmt>

  <switch>switch <condition>(<expr><name><name>pRes</name><operator>-&gt;</operator><name>msgType</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TDMT_VND_ALTER_TABLE</name></expr>:</case>
    <case>case <expr><name>TDMT_MND_ALTER_STB</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>handleAlterTbExecRes</name><argument_list>(<argument><expr><name><name>pRes</name><operator>-&gt;</operator><name>res</name></name></expr></argument>, <argument><expr><name>pCatalog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TDMT_VND_CREATE_TABLE</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pList</name> <init>= <expr><operator>(</operator><name>SArray</name><operator>*</operator><operator>)</operator><name><name>pRes</name><operator>-&gt;</operator><name>res</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>num</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>res</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>pList</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>handleCreateTbExecRes</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>pCatalog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TDMT_MND_CREATE_STB</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>handleCreateTbExecRes</name><argument_list>(<argument><expr><name><name>pRes</name><operator>-&gt;</operator><name>res</name></name></expr></argument>, <argument><expr><name>pCatalog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TDMT_VND_SUBMIT</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>atomic_add_fetch_64</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pAppInfo</name><operator>-&gt;</operator><name>summary</name><operator>.</operator><name>insertBytes</name></name></expr></argument>, <argument><expr><name><name>pRes</name><operator>-&gt;</operator><name>numOfBytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>handleSubmitExecRes</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>, <argument><expr><name><name>pRes</name><operator>-&gt;</operator><name>res</name></name></expr></argument>, <argument><expr><name>pCatalog</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>epset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TDMT_SCH_QUERY</name></expr>:</case>
    <case>case <expr><name>TDMT_SCH_MERGE_QUERY</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>handleQueryExecRes</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>, <argument><expr><name><name>pRes</name><operator>-&gt;</operator><name>res</name></name></expr></argument>, <argument><expr><name>pCatalog</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>epset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <default>default:</default>
      <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"0x%"</literal> <name>PRIx64</name> <literal type="string">", invalid exec result for request type %d, reqId:0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>self</name></name></expr></argument>,
               <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_APP_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></switch>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>incompletaFileParsing</name><parameter_list>(<parameter><decl><type><name>SNode</name><modifier>*</modifier></type> <name>pStmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><ternary><condition><expr><name>QUERY_NODE_VNODE_MODIF_STMT</name> <operator>!=</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><operator>(</operator><operator>(</operator><name>SVnodeModifOpStmt</name><operator>*</operator><operator>)</operator><name>pStmt</name><operator>)</operator><operator>-&gt;</operator><name>fileProcessing</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="line">// todo refacto the error code  mgmt</comment>
<function><type><name>void</name></type> <name>schedulerExecCb</name><parameter_list>(<parameter><decl><type><name>SExecResult</name><modifier>*</modifier></type> <name>pResult</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSqlCallbackWrapper</name><modifier>*</modifier></type> <name>pWrapper</name> <init>= <expr><name>param</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRequestObj</name><modifier>*</modifier></type>         <name>pRequest</name> <init>= <expr><name><name>pWrapper</name><operator>-&gt;</operator><name>pRequest</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STscObj</name><modifier>*</modifier></type>             <name>pTscObj</name> <init>= <expr><name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pResult</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>destroyQueryExecRes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>resInfo</name><operator>.</operator><name>execRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>resInfo</name><operator>.</operator><name>execRes</name></name></expr></argument>, <argument><expr><name>pResult</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pResult</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>type</name> <init>= <expr><name><name>pRequest</name><operator>-&gt;</operator><name>type</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TDMT_VND_SUBMIT</name> <operator>==</operator> <name>type</name> <operator>||</operator> <name>TDMT_VND_DELETE</name> <operator>==</operator> <name>type</name> <operator>||</operator> <name>TDMT_VND_CREATE_TABLE</name> <operator>==</operator> <name>type</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>pResult</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>resInfo</name><operator>.</operator><name>numOfRows</name></name> <operator>+=</operator> <name><name>pResult</name><operator>-&gt;</operator><name>numOfRows</name></name></expr>;</expr_stmt>

      <comment type="line">// record the insert rows</comment>
      <if_stmt><if>if <condition>(<expr><name>TDMT_VND_SUBMIT</name> <operator>==</operator> <name>type</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SAppClusterSummary</name><modifier>*</modifier></type> <name>pActivity</name> <init>= <expr><operator>&amp;</operator><name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>summary</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>atomic_add_fetch_64</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pActivity</name><operator>-&gt;</operator><name>numOfInsertRows</name></name></expr></argument>, <argument><expr><name><name>pResult</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>schedulerFreeJob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>queryJob</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"0x%"</literal> <name>PRIx64</name> <literal type="string">" enter scheduler exec cb, code:%s, reqId:0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>self</name></name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>,
           <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name> <operator>&amp;&amp;</operator> <call><name>NEED_CLIENT_HANDLE_ERROR</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>sqlstr</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"0x%"</literal> <name>PRIx64</name> <literal type="string">" client retry to handle the error, code:%s, tryCount:%d, reqId:0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>self</name></name></expr></argument>,
             <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>retry</name></name></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>prevCode</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>schedulerFreeJob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>queryJob</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>qDestroyQuery</name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>pQuery</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>pQuery</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>destorySqlCallbackWrapper</name><argument_list>(<argument><expr><name>pWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>doAsyncQuery</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"schedulerExecCb request type %s"</literal></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>NEED_CLIENT_RM_TBLMETA_REQ</name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>==</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>resInfo</name><operator>.</operator><name>execRes</name><operator>.</operator><name>res</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>removeMeta</name><argument_list>(<argument><expr><name>pTscObj</name></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>targetTableList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>metric</name><operator>.</operator><name>execEnd</name></name> <operator>=</operator> <call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code1</name> <init>= <expr><call><name>handleQueryExecRsp</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pRequest</name><operator>-&gt;</operator><name>code</name></name> <operator>==</operator> <name>TSDB_CODE_SUCCESS</name> <operator>&amp;&amp;</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>code</name></name> <operator>!=</operator> <name>code1</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>code1</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pRequest</name><operator>-&gt;</operator><name>code</name></name> <operator>==</operator> <name>TSDB_CODE_SUCCESS</name> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>!=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>pQuery</name></name> <operator>&amp;&amp;</operator>
      <call><name>incompletaFileParsing</name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>continueInsertFromCsv</name><argument_list>(<argument><expr><name>pWrapper</name></expr></argument>, <argument><expr><name>pRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>destorySqlCallbackWrapper</name><argument_list>(<argument><expr><name>pWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// return to client</comment>
  <expr_stmt><expr><call><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>queryFp</name></name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>param</name></name></expr></argument>, <argument><expr><name>pRequest</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SRequestObj</name><modifier>*</modifier></type> <name>launchQueryImpl</name><parameter_list>(<parameter><decl><type><name>SRequestObj</name><modifier>*</modifier></type> <name>pRequest</name></decl></parameter>, <parameter><decl><type><name>SQuery</name><modifier>*</modifier></type> <name>pQuery</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>keepQuery</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>res</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>stmtType</name></name> <operator>=</operator> <name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pRequest</name><operator>-&gt;</operator><name>inRetry</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>STscObj</name><modifier>*</modifier></type>            <name>pTscObj</name> <init>= <expr><name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SAppClusterSummary</name><modifier>*</modifier></type> <name>pActivity</name> <init>= <expr><operator>&amp;</operator><name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>summary</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_VNODE_MODIF_STMT</name> <operator>==</operator> <name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>atomic_add_fetch_64</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pActivity</name><operator>-&gt;</operator><name>numOfInsertsReq</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>QUERY_NODE_SELECT_STMT</name> <operator>==</operator> <name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>atomic_add_fetch_64</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pActivity</name><operator>-&gt;</operator><name>numOfQueryReq</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <switch>switch <condition>(<expr><name><name>pQuery</name><operator>-&gt;</operator><name>execMode</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>QUERY_EXEC_MODE_LOCAL</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pRequest</name><operator>-&gt;</operator><name>validateOnly</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>code</name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>execLocalCmd</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>, <argument><expr><name>pQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_EXEC_MODE_RPC</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pRequest</name><operator>-&gt;</operator><name>validateOnly</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>execDdlQuery</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>, <argument><expr><name>pQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_EXEC_MODE_SCHEDULE</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>     <name>pMnodeList</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SQueryNodeLoad</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SQueryPlan</name><modifier>*</modifier></type> <name>pDag</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>getPlan</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>, <argument><expr><name>pQuery</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pDag</name></expr></argument>, <argument><expr><name>pMnodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>subplanNum</name></name> <operator>=</operator> <name><name>pDag</name><operator>-&gt;</operator><name>numOfSubplans</name></name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pRequest</name><operator>-&gt;</operator><name>validateOnly</name></name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pNodeList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>buildSyncExecNodeList</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pNodeList</name></expr></argument>, <argument><expr><name>pMnodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>scheduleQuery</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>, <argument><expr><name>pDag</name></expr></argument>, <argument><expr><name>pNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pMnodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>QUERY_EXEC_MODE_EMPTY_RESULT</name></expr>:</case>
      <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TSDB_SQL_RETRIEVE_EMPTY_RESULT</name></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>keepQuery</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qDestroyQuery</name><argument_list>(<argument><expr><name>pQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>NEED_CLIENT_RM_TBLMETA_REQ</name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>==</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>resInfo</name><operator>.</operator><name>execRes</name><operator>.</operator><name>res</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>removeMeta</name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name></name></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>targetTableList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>handleQueryExecRsp</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>resInfo</name><operator>.</operator><name>execRes</name><operator>.</operator><name>res</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>resInfo</name><operator>.</operator><name>execRes</name><operator>.</operator><name>res</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>pRequest</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>asyncExecSchQuery</name><parameter_list>(<parameter><decl><type><name>SRequestObj</name><modifier>*</modifier></type> <name>pRequest</name></decl></parameter>, <parameter><decl><type><name>SQuery</name><modifier>*</modifier></type> <name>pQuery</name></decl></parameter>, <parameter><decl><type><name>SMetaData</name><modifier>*</modifier></type> <name>pResultMeta</name></decl></parameter>,
                                 <parameter><decl><type><name>SSqlCallbackWrapper</name><modifier>*</modifier></type> <name>pWrapper</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>pQuery</name><operator>-&gt;</operator><name>msgType</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pMnodeList</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SQueryNodeLoad</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SPlanContext</name></type> <name>cxt</name> <init>= <expr><block>{<expr><operator>.</operator><name>queryId</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr>,
                      <expr><operator>.</operator><name>acctId</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name><operator>-&gt;</operator><name>acctId</name></name></expr>,
                      <expr><operator>.</operator><name>mgmtEpSet</name> <operator>=</operator> <call><name>getEpSet_s</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>mgmtEp</name></name></expr></argument>)</argument_list></call></expr>,
                      <expr><operator>.</operator><name>pAstRoot</name> <operator>=</operator> <name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name></expr>,
                      <expr><operator>.</operator><name>showRewrite</name> <operator>=</operator> <name><name>pQuery</name><operator>-&gt;</operator><name>showRewrite</name></name></expr>,
                      <expr><operator>.</operator><name>pMsg</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>msgBuf</name></name></expr>,
                      <expr><operator>.</operator><name>msgLen</name> <operator>=</operator> <name>ERROR_MSG_BUF_DEFAULT_SIZE</name></expr>,
                      <expr><operator>.</operator><name>pUser</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name><operator>-&gt;</operator><name>user</name></name></expr>,
                      <expr><operator>.</operator><name>sysInfo</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name><operator>-&gt;</operator><name>sysInfo</name></name></expr>,
                      <expr><operator>.</operator><name>allocatorId</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>allocatorRefId</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SAppInstInfo</name><modifier>*</modifier></type> <name>pAppInfo</name> <init>= <expr><call><name>getAppInfo</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQueryPlan</name><modifier>*</modifier></type>   <name>pDag</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>st</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>qCreateQueryPlan</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cxt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pDag</name></expr></argument>, <argument><expr><name>pMnodeList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"0x%"</literal> <name>PRIx64</name> <literal type="string">" failed to create query plan, code:%s 0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>self</name></name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>,
             <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>subplanNum</name></name> <operator>=</operator> <name><name>pDag</name><operator>-&gt;</operator><name>numOfSubplans</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>metric</name><operator>.</operator><name>planEnd</name></name> <operator>=</operator> <call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"0x%"</literal> <name>PRIx64</name> <literal type="string">" create query plan success, elapsed time:%.2f ms, 0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>self</name></name></expr></argument>,
             <argument><expr><operator>(</operator><name><name>pRequest</name><operator>-&gt;</operator><name>metric</name><operator>.</operator><name>planEnd</name></name> <operator>-</operator> <name>st</name><operator>)</operator> <operator>/</operator> <literal type="number">1000.0</literal></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pRequest</name><operator>-&gt;</operator><name>validateOnly</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pNodeList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_VNODE_MODIF_STMT</name> <operator>!=</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>buildAsyncExecNodeList</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pNodeList</name></expr></argument>, <argument><expr><name>pMnodeList</name></expr></argument>, <argument><expr><name>pResultMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SRequestConnInfo</name></type> <name>conn</name> <init>= <expr><block>{<expr><operator>.</operator><name>pTrans</name> <operator>=</operator> <call><name>getAppInfo</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>pTransporter</name></expr>,
                             <expr><operator>.</operator><name>requestId</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr>,
                             <expr><operator>.</operator><name>requestObjRefId</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>self</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SSchedulerReq</name></type>    <name>req</name> <init>= <expr><block>{
           <expr><operator>.</operator><name>syncReq</name> <operator>=</operator> <name>false</name></expr>,
           <expr><operator>.</operator><name>localReq</name> <operator>=</operator> <operator>(</operator><name>tsQueryPolicy</name> <operator>==</operator> <name>QUERY_POLICY_CLIENT</name><operator>)</operator></expr>,
           <expr><operator>.</operator><name>pConn</name> <operator>=</operator> <operator>&amp;</operator><name>conn</name></expr>,
           <expr><operator>.</operator><name>pNodeList</name> <operator>=</operator> <name>pNodeList</name></expr>,
           <expr><operator>.</operator><name>pDag</name> <operator>=</operator> <name>pDag</name></expr>,
           <expr><operator>.</operator><name>allocatorRefId</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>allocatorRefId</name></name></expr>,
           <expr><operator>.</operator><name>sql</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>sqlstr</name></name></expr>,
           <expr><operator>.</operator><name>startTs</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>metric</name><operator>.</operator><name>start</name></name></expr>,
           <expr><operator>.</operator><name>execFp</name> <operator>=</operator> <name>schedulerExecCb</name></expr>,
           <expr><operator>.</operator><name>cbParam</name> <operator>=</operator> <name>pWrapper</name></expr>,
           <expr><operator>.</operator><name>chkKillFp</name> <operator>=</operator> <name>chkRequestKilled</name></expr>,
           <expr><operator>.</operator><name>chkKillParam</name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>pRequest</name><operator>-&gt;</operator><name>self</name></name></expr>,
           <expr><operator>.</operator><name>pExecRes</name> <operator>=</operator> <name>NULL</name></expr>,
    }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>schedulerExecJob</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>queryJob</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"0x%"</literal> <name>PRIx64</name> <literal type="string">" plan not executed, code:%s 0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>self</name></name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>,
             <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>destorySqlCallbackWrapper</name><argument_list>(<argument><expr><name>pWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>queryFp</name></name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>param</name></name></expr></argument>, <argument><expr><name>pRequest</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="line">// todo not to be released here</comment>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pMnodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>launchAsyncQuery</name><parameter_list>(<parameter><decl><type><name>SRequestObj</name><modifier>*</modifier></type> <name>pRequest</name></decl></parameter>, <parameter><decl><type><name>SQuery</name><modifier>*</modifier></type> <name>pQuery</name></decl></parameter>, <parameter><decl><type><name>SMetaData</name><modifier>*</modifier></type> <name>pResultMeta</name></decl></parameter>, <parameter><decl><type><name>SSqlCallbackWrapper</name><modifier>*</modifier></type> <name>pWrapper</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>execMode</name></name> <operator>=</operator> <name><name>pQuery</name><operator>-&gt;</operator><name>execMode</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>QUERY_EXEC_MODE_SCHEDULE</name> <operator>!=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>execMode</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>destorySqlCallbackWrapper</name><argument_list>(<argument><expr><name>pWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <switch>switch <condition>(<expr><name><name>pQuery</name><operator>-&gt;</operator><name>execMode</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>QUERY_EXEC_MODE_LOCAL</name></expr>:</case>
      <expr_stmt><expr><call><name>asyncExecLocalCmd</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>, <argument><expr><name>pQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_EXEC_MODE_RPC</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>asyncExecDdlQuery</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>, <argument><expr><name>pQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>QUERY_EXEC_MODE_SCHEDULE</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>asyncExecSchQuery</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>, <argument><expr><name>pQuery</name></expr></argument>, <argument><expr><name>pResultMeta</name></expr></argument>, <argument><expr><name>pWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>QUERY_EXEC_MODE_EMPTY_RESULT</name></expr>:</case>
      <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TSDB_SQL_RETRIEVE_EMPTY_RESULT</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>queryFp</name></name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>param</name></name></expr></argument>, <argument><expr><name>pRequest</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><call><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>queryFp</name></name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>param</name></name></expr></argument>, <argument><expr><name>pRequest</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>

  <comment type="line">// TODO weired responding code?</comment>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>refreshMeta</name><parameter_list>(<parameter><decl><type><name>STscObj</name><modifier>*</modifier></type> <name>pTscObj</name></decl></parameter>, <parameter><decl><type><name>SRequestObj</name><modifier>*</modifier></type> <name>pRequest</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCatalog</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>dbNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>dbList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>tblNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>tableList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>dbNum</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>tblNum</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_APP_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogGetHandle</name><argument_list>(<argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>clusterId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCatalog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SRequestConnInfo</name></type> <name>conn</name> <init>= <expr><block>{<expr><operator>.</operator><name>pTrans</name> <operator>=</operator> <name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>pTransporter</name></name></expr>,
                           <expr><operator>.</operator><name>requestId</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr>,
                           <expr><operator>.</operator><name>requestObjRefId</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>self</name></name></expr>,
                           <expr><operator>.</operator><name>mgmtEps</name> <operator>=</operator> <macro><name>getEpSet_s</name><argument_list>(<argument>&amp;pTscObj-&gt;pAppInfo-&gt;mgmtEp</argument>)</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dbNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>dbFName</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>dbList</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogRefreshDBVgInfo</name><argument_list>(<argument><expr><name>pCatalog</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conn</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tblNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SName</name><modifier>*</modifier></type> <name>tableName</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>tableList</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogRefreshTableMeta</name><argument_list>(<argument><expr><name>pCatalog</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conn</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>removeMeta</name><parameter_list>(<parameter><decl><type><name>STscObj</name><modifier>*</modifier></type> <name>pTscObj</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>tbList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCatalog</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>tbNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>tbList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>code</name> <init>= <expr><call><name>catalogGetHandle</name><argument_list>(<argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>clusterId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCatalog</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tbNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SName</name><modifier>*</modifier></type> <name>pTbName</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>tbList</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>catalogRemoveTableMeta</name><argument_list>(<argument><expr><name>pCatalog</name></expr></argument>, <argument><expr><name>pTbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>initEpSetFromCfg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>firstEp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>secondEp</name></decl></parameter>, <parameter><decl><type><name>SCorEpSet</name><modifier>*</modifier></type> <name>pEpSet</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pEpSet</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <comment type="line">// init mnode ip set</comment>
  <decl_stmt><decl><type><name>SEpSet</name><modifier>*</modifier></type> <name>mgmtEpSet</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>pEpSet</name><operator>-&gt;</operator><name>epSet</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>mgmtEpSet</name><operator>-&gt;</operator><name>numOfEps</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mgmtEpSet</name><operator>-&gt;</operator><name>inUse</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>firstEp</name> <operator>&amp;&amp;</operator> <name><name>firstEp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>firstEp</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>TSDB_EP_LEN</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_TSC_INVALID_FQDN</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>taosGetFqdnPortFromEp</name><argument_list>(<argument><expr><name>firstEp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mgmtEpSet</name><operator>-&gt;</operator><name>eps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_TSC_INVALID_FQDN</name></expr>;</expr_stmt>
      <return>return <expr><name>terrno</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>mgmtEpSet</name><operator>-&gt;</operator><name>numOfEps</name></name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>secondEp</name> <operator>&amp;&amp;</operator> <name><name>secondEp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>secondEp</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>TSDB_EP_LEN</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_TSC_INVALID_FQDN</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>taosGetFqdnPortFromEp</name><argument_list>(<argument><expr><name>secondEp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mgmtEpSet</name><operator>-&gt;</operator><name>eps</name><index>[<expr><name><name>mgmtEpSet</name><operator>-&gt;</operator><name>numOfEps</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mgmtEpSet</name><operator>-&gt;</operator><name>numOfEps</name></name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>mgmtEpSet</name><operator>-&gt;</operator><name>numOfEps</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_TSC_INVALID_FQDN</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>STscObj</name><modifier>*</modifier></type> <name>taosConnectImpl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>auth</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>__taos_async_fn_t</name></type> <name>fp</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>,
                         <parameter><decl><type><name>SAppInstInfo</name><modifier>*</modifier></type> <name>pAppInfo</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>connType</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STscObj</name><modifier>*</modifier></type> <name>pTscObj</name> <init>= <expr><call><name>createTscObj</name><argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><name>auth</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>connType</name></expr></argument>, <argument><expr><name>pAppInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pTscObj</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>pTscObj</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SRequestObj</name><modifier>*</modifier></type> <name>pRequest</name> <init>= <expr><call><name>createRequest</name><argument_list>(<argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>TDMT_MND_CONNECT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRequest</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>destroyTscObj</name><argument_list>(<argument><expr><name>pTscObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SMsgSendInfo</name><modifier>*</modifier></type> <name>body</name> <init>= <expr><call><name>buildConnectMsg</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>transporterId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>asyncSendMsgToServer</name><argument_list>(<argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>pTransporter</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>mgmtEp</name><operator>.</operator><name>epSet</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>transporterId</name></expr></argument>, <argument><expr><name>body</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tsem_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>rspSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pRequest</name><operator>-&gt;</operator><name>code</name></name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>errorMsg</name> <init>=
        <expr><ternary><condition><expr><operator>(</operator><name><name>pRequest</name><operator>-&gt;</operator><name>code</name></name> <operator>==</operator> <name>TSDB_CODE_RPC_FQDN_ERROR</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>tstrerror</name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"failed to connect to server, reason: %s\n\n"</literal></expr></argument>, <argument><expr><name>errorMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>code</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>destroyRequest</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taos_close_internal</name><argument_list>(<argument><expr><name>pTscObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pTscObj</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"0x%"</literal> <name>PRIx64</name> <literal type="string">" connection is opening, connId:%u, dnodeConn:%p, reqId:0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,
             <argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>connId</name></name></expr></argument>, <argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>pTransporter</name></name></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>destroyRequest</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>pTscObj</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SMsgSendInfo</name><modifier>*</modifier></type> <name>buildConnectMsg</name><parameter_list>(<parameter><decl><type><name>SRequestObj</name><modifier>*</modifier></type> <name>pRequest</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMsgSendInfo</name><modifier>*</modifier></type> <name>pMsgSendInfo</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgSendInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pMsgSendInfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pMsgSendInfo</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_MND_CONNECT</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pMsgSendInfo</name><operator>-&gt;</operator><name>requestObjRefId</name></name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>self</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsgSendInfo</name><operator>-&gt;</operator><name>requestId</name></name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsgSendInfo</name><operator>-&gt;</operator><name>fp</name></name> <operator>=</operator> <call><name>getMsgRspHandle</name><argument_list>(<argument><expr><name><name>pMsgSendInfo</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsgSendInfo</name><operator>-&gt;</operator><name>param</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>self</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name><name>pMsgSendInfo</name><operator>-&gt;</operator><name>param</name></name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>self</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SConnectReq</name></type> <name>connectReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STscObj</name><modifier>*</modifier></type>    <name>pObj</name> <init>= <expr><name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>db</name> <init>= <expr><call><name>getDbOfConnection</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>db</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>connectReq</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>connectReq</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>connectReq</name><operator>.</operator><name>connType</name></name> <operator>=</operator> <name><name>pObj</name><operator>-&gt;</operator><name>connType</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>connectReq</name><operator>.</operator><name>pid</name></name> <operator>=</operator> <name><name>appInfo</name><operator>.</operator><name>pid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>connectReq</name><operator>.</operator><name>startTime</name></name> <operator>=</operator> <name><name>appInfo</name><operator>.</operator><name>startTime</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>connectReq</name><operator>.</operator><name>app</name></name></expr></argument>, <argument><expr><name><name>appInfo</name><operator>.</operator><name>appName</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>connectReq</name><operator>.</operator><name>app</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>connectReq</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>connectReq</name><operator>.</operator><name>user</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>connectReq</name><operator>.</operator><name>passwd</name></name></expr></argument>, <argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>pass</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>connectReq</name><operator>.</operator><name>passwd</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>contLen</name> <init>= <expr><call><name>tSerializeSConnectReq</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>connectReq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>pReq</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>contLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tSerializeSConnectReq</name><argument_list>(<argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>contLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>connectReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pMsgSendInfo</name><operator>-&gt;</operator><name>msgInfo</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>contLen</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsgSendInfo</name><operator>-&gt;</operator><name>msgInfo</name><operator>.</operator><name>pData</name></name> <operator>=</operator> <name>pReq</name></expr>;</expr_stmt>
  <return>return <expr><name>pMsgSendInfo</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>updateTargetEpSet</name><parameter_list>(<parameter><decl><type><name>SMsgSendInfo</name><modifier>*</modifier></type> <name>pSendInfo</name></decl></parameter>, <parameter><decl><type><name>STscObj</name><modifier>*</modifier></type> <name>pTscObj</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>SEpSet</name><modifier>*</modifier></type> <name>pEpSet</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pEpSet</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <switch>switch <condition>(<expr><name><name>pSendInfo</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TARGET_TYPE_MNODE</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pTscObj</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"mnode epset changed but not able to update it, msg:%s, reqObjRefId:%"</literal> <name>PRIx64</name></expr></argument>,
                 <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pSendInfo</name><operator>-&gt;</operator><name>requestObjRefId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>SEpSet</name><modifier>*</modifier></type> <name>pOrig</name> <init>= <expr><operator>&amp;</operator><name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>mgmtEp</name><operator>.</operator><name>epSet</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SEp</name><modifier>*</modifier></type>    <name>pOrigEp</name> <init>= <expr><operator>&amp;</operator><name><name>pOrig</name><operator>-&gt;</operator><name>eps</name><index>[<expr><name><name>pOrig</name><operator>-&gt;</operator><name>inUse</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SEp</name><modifier>*</modifier></type>    <name>pNewEp</name> <init>= <expr><operator>&amp;</operator><name><name>pEpSet</name><operator>-&gt;</operator><name>eps</name><index>[<expr><name><name>pEpSet</name><operator>-&gt;</operator><name>inUse</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"mnode epset updated from %d/%d=&gt;%s:%d to %d/%d=&gt;%s:%d in client"</literal></expr></argument>, <argument><expr><name><name>pOrig</name><operator>-&gt;</operator><name>inUse</name></name></expr></argument>, <argument><expr><name><name>pOrig</name><operator>-&gt;</operator><name>numOfEps</name></name></expr></argument>,
               <argument><expr><name><name>pOrigEp</name><operator>-&gt;</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name><name>pOrigEp</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name><name>pEpSet</name><operator>-&gt;</operator><name>inUse</name></name></expr></argument>, <argument><expr><name><name>pEpSet</name><operator>-&gt;</operator><name>numOfEps</name></name></expr></argument>, <argument><expr><name><name>pNewEp</name><operator>-&gt;</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name><name>pNewEp</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>updateEpSet_s</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>mgmtEp</name></name></expr></argument>, <argument><expr><name>pEpSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TARGET_TYPE_VNODE</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pTscObj</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"vnode epset changed but not able to update it, msg:%s, reqObjRefId:%"</literal> <name>PRIx64</name></expr></argument>,
                 <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pSendInfo</name><operator>-&gt;</operator><name>requestObjRefId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCatalog</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type>   <name>code</name> <init>= <expr><call><name>catalogGetHandle</name><argument_list>(<argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>clusterId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCatalog</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"fail to get catalog handle, clusterId:%"</literal> <name>PRIx64</name> <literal type="string">", error %s"</literal></expr></argument>, <argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>clusterId</name></name></expr></argument>,
                 <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>catalogUpdateVgEpSet</name><argument_list>(<argument><expr><name>pCatalog</name></expr></argument>, <argument><expr><name><name>pSendInfo</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>pSendInfo</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>pEpSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pSendInfo</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>dbFName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <default>default:</default>
      <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"epset changed, not updated, msgType %s"</literal></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>doProcessMsgFromServer</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>AsyncArg</name><modifier>*</modifier></type> <name>arg</name> <init>= <expr><operator>(</operator><name>AsyncArg</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRpcMsg</name><modifier>*</modifier></type>  <name>pMsg</name> <init>= <expr><operator>&amp;</operator><name><name>arg</name><operator>-&gt;</operator><name>msg</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SEpSet</name><modifier>*</modifier></type>   <name>pEpSet</name> <init>= <expr><name><name>arg</name><operator>-&gt;</operator><name>pEpset</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SMsgSendInfo</name><modifier>*</modifier></type> <name>pSendInfo</name> <init>= <expr><operator>(</operator><name>SMsgSendInfo</name><operator>*</operator><operator>)</operator><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>ahandle</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>ahandle</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>STscObj</name><modifier>*</modifier></type> <name>pTscObj</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>STraceId</name><modifier>*</modifier></type> <name>trace</name> <init>= <expr><operator>&amp;</operator><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>traceId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>      <name><name>tbuf</name><index>[<expr><literal type="number">40</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>TRACE_TO_STR</name><argument_list>(<argument><expr><name>trace</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"processMsgFromServer handle %p, message: %s, size:%d, code: %s, gtid: %s"</literal></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>handle</name></name></expr></argument>,
           <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pSendInfo</name><operator>-&gt;</operator><name>requestObjRefId</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SRequestObj</name><modifier>*</modifier></type> <name>pRequest</name> <init>= <expr><operator>(</operator><name>SRequestObj</name><operator>*</operator><operator>)</operator><call><name>taosAcquireRef</name><argument_list>(<argument><expr><name>clientReqRefPool</name></expr></argument>, <argument><expr><name><name>pSendInfo</name><operator>-&gt;</operator><name>requestObjRefId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pRequest</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>self</name></name> <operator>==</operator> <name><name>pSendInfo</name><operator>-&gt;</operator><name>requestObjRefId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>metric</name><operator>.</operator><name>rsp</name></name> <operator>=</operator> <call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pTscObj</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name></name></expr>;</expr_stmt>
      <comment type="block">/*
       * There is not response callback function for submit response.
       * The actual inserted number of points is the first number.
       */</comment>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>elapsed</name> <init>= <expr><name><name>pRequest</name><operator>-&gt;</operator><name>metric</name><operator>.</operator><name>rsp</name></name> <operator>-</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>metric</name><operator>.</operator><name>start</name></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>code</name></name> <operator>==</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"0x%"</literal> <name>PRIx64</name> <literal type="string">" rsp msg:%s, code:%s rspLen:%d, elapsed:%d ms, reqId:0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>self</name></name></expr></argument>,
                 <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>, <argument><expr><name>elapsed</name> <operator>/</operator> <literal type="number">1000</literal></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"0x%"</literal> <name>PRIx64</name> <literal type="string">" rsp msg:%s, code:%s rspLen:%d, elapsed time:%d ms, reqId:0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>self</name></name></expr></argument>,
                 <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>, <argument><expr><name>elapsed</name> <operator>/</operator> <literal type="number">1000</literal></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <expr_stmt><expr><call><name>taosReleaseRef</name><argument_list>(<argument><expr><name>clientReqRefPool</name></expr></argument>, <argument><expr><name><name>pSendInfo</name><operator>-&gt;</operator><name>requestObjRefId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>updateTargetEpSet</name><argument_list>(<argument><expr><name>pSendInfo</name></expr></argument>, <argument><expr><name>pTscObj</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>pEpSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SDataBuf</name></type> <name>buf</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>msgType</name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr>, <expr><operator>.</operator><name>len</name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr>, <expr><operator>.</operator><name>pData</name> <operator>=</operator> <name>NULL</name></expr>, <expr><operator>.</operator><name>handle</name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>handle</name></name></expr>, <expr><operator>.</operator><name>pEpSet</name> <operator>=</operator> <name>pEpSet</name></expr>}</block></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>buf</name><operator>.</operator><name>pData</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>.</operator><name>pData</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name><name>pSendInfo</name><operator>-&gt;</operator><name>fp</name></name><argument_list>(<argument><expr><name><name>pSendInfo</name><operator>-&gt;</operator><name>param</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>destroySendMsgInfo</name><argument_list>(<argument><expr><name>pSendInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>processMsgFromServer</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>SEpSet</name><modifier>*</modifier></type> <name>pEpSet</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SEpSet</name><modifier>*</modifier></type> <name>tEpSet</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pEpSet</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>tEpSet</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SEpSet</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>tEpSet</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>pEpSet</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SEpSet</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>AsyncArg</name><modifier>*</modifier></type> <name>arg</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AsyncArg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>msg</name></name> <operator>=</operator> <operator>*</operator><name>pMsg</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>pEpset</name></name> <operator>=</operator> <name>tEpSet</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>taosAsyncExec</name><argument_list>(<argument><expr><name>doProcessMsgFromServer</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"failed to sched msg to tsc, tsc ready to quit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>arg</name><operator>-&gt;</operator><name>pEpset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>TAOS</name><modifier>*</modifier></type> <name>taos_connect_auth</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>ip</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>auth</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>port</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"try to connect to %s:%u by auth, user:%s db:%s"</literal></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>user</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>user</name> <operator>=</operator> <name>TSDB_DEFAULT_USER</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>auth</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"No auth info is given, failed to connect to server"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STscObj</name><modifier>*</modifier></type> <name>pObj</name> <init>= <expr><call><name>taos_connect_internal</name><argument_list>(<argument><expr><name>ip</name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>auth</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>CONN_TYPE__QUERY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pObj</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>rid</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>*</operator><name>rid</name> <operator>=</operator> <name><name>pObj</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><name>TAOS</name><operator>*</operator><operator>)</operator><name>rid</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>TAOS</name><modifier>*</modifier></type> <name>taos_connect_l</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>ip</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ipLen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>user</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>userLen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pass</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>passLen</name></decl></parameter>,
                     <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dbLen</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>port</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>ipStr</name><index>[<expr><name>TSDB_EP_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>dbStr</name><index>[<expr><name>TSDB_DB_NAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>userStr</name><index>[<expr><name>TSDB_USER_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>passStr</name><index>[<expr><name>TSDB_PASSWORD_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>ipStr</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><call><name>TMIN</name><argument_list>(<argument><expr><name>TSDB_EP_LEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ipLen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>userStr</name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><call><name>TMIN</name><argument_list>(<argument><expr><name>TSDB_USER_LEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>userLen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>passStr</name></expr></argument>, <argument><expr><name>pass</name></expr></argument>, <argument><expr><call><name>TMIN</name><argument_list>(<argument><expr><name>TSDB_PASSWORD_LEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>passLen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>dbStr</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><call><name>TMIN</name><argument_list>(<argument><expr><name>TSDB_DB_NAME_LEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>dbLen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>taos_connect</name><argument_list>(<argument><expr><name>ipStr</name></expr></argument>, <argument><expr><name>userStr</name></expr></argument>, <argument><expr><name>passStr</name></expr></argument>, <argument><expr><name>dbStr</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>doSetOneRowPtr</name><parameter_list>(<parameter><decl><type><name>SReqResultInfo</name><modifier>*</modifier></type> <name>pResultInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pResultInfo</name><operator>-&gt;</operator><name>numOfCols</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SResultColumn</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><operator>&amp;</operator><name><name>pResultInfo</name><operator>-&gt;</operator><name>pCol</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>type</name> <init>= <expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>bytes</name> <init>= <expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_VAR_NULL_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>pCol</name><operator>-&gt;</operator><name>offset</name><index>[<expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>current</name></name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>pStart</name> <init>= <expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>pCol</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>offset</name><index>[<expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>current</name></name></expr>]</index></name> <operator>+</operator> <name><name>pResultInfo</name><operator>-&gt;</operator><name>pCol</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pData</name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>length</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>varDataLen</name><argument_list>(<argument><expr><name>pStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>row</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>varDataVal</name><argument_list>(<argument><expr><name>pStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>row</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>length</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>current</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>row</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pResultInfo</name><operator>-&gt;</operator><name>pCol</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pData</name> <operator>+</operator> <name>bytes</name> <operator>*</operator> <name><name>pResultInfo</name><operator>-&gt;</operator><name>current</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>length</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>row</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>length</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>doFetchRows</name><parameter_list>(<parameter><decl><type><name>SRequestObj</name><modifier>*</modifier></type> <name>pRequest</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>setupOneRowPtr</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>convertUcs4</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pRequest</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SReqResultInfo</name><modifier>*</modifier></type> <name>pResultInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>resInfo</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>pData</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pResultInfo</name><operator>-&gt;</operator><name>current</name></name> <operator>&gt;=</operator> <name><name>pResultInfo</name><operator>-&gt;</operator><name>numOfRows</name></name></expr>)</condition> <block>{<block_content>
    <comment type="line">// All data has returned to App already, no need to try again</comment>
    <if_stmt><if>if <condition>(<expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>completed</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SReqResultInfo</name><modifier>*</modifier></type> <name>pResInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>resInfo</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SSchedulerReq</name></type>   <name>req</name> <init>= <expr><block>{
          <expr><operator>.</operator><name>syncReq</name> <operator>=</operator> <name>true</name></expr>,
          <expr><operator>.</operator><name>pFetchRes</name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pResInfo</name><operator>-&gt;</operator><name>pData</name></name></expr>,
    }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <call><name>schedulerFetchRows</name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>queryJob</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pRequest</name><operator>-&gt;</operator><name>code</name></name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator>
        <call><name>setQueryResultFromRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>resInfo</name></name></expr></argument>, <argument><expr><operator>(</operator><name>SRetrieveTableRsp</name><operator>*</operator><operator>)</operator><name><name>pResInfo</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name>convertUcs4</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pRequest</name><operator>-&gt;</operator><name>code</name></name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"0x%"</literal> <name>PRIx64</name> <literal type="string">" fetch results, numOfRows:%"</literal> <name>PRId64</name> <literal type="string">" total Rows:%"</literal> <name>PRId64</name> <literal type="string">", complete:%d, reqId:0x%"</literal> <name>PRIx64</name></expr></argument>,
             <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>self</name></name></expr></argument>, <argument><expr><name><name>pResInfo</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></argument>, <argument><expr><name><name>pResInfo</name><operator>-&gt;</operator><name>totalRows</name></name></expr></argument>, <argument><expr><name><name>pResInfo</name><operator>-&gt;</operator><name>completed</name></name></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>STscObj</name><modifier>*</modifier></type>            <name>pTscObj</name> <init>= <expr><name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SAppClusterSummary</name><modifier>*</modifier></type> <name>pActivity</name> <init>= <expr><operator>&amp;</operator><name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>summary</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>atomic_add_fetch_64</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pActivity</name><operator>-&gt;</operator><name>fetchBytes</name></name></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>resInfo</name><operator>.</operator><name>payloadLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>setupOneRowPtr</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>doSetOneRowPtr</name><argument_list>(<argument><expr><name>pResultInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>current</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>row</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>syncFetchFn</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>TAOS_RES</name><modifier>*</modifier></type> <name>res</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfRows</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncQueryParam</name><modifier>*</modifier></type> <name>pParam</name> <init>= <expr><name>param</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tsem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pParam</name><operator>-&gt;</operator><name>sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>doAsyncFetchRows</name><parameter_list>(<parameter><decl><type><name>SRequestObj</name><modifier>*</modifier></type> <name>pRequest</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>setupOneRowPtr</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>convertUcs4</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pRequest</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SReqResultInfo</name><modifier>*</modifier></type> <name>pResultInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>resInfo</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>pData</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pResultInfo</name><operator>-&gt;</operator><name>current</name></name> <operator>&gt;=</operator> <name><name>pResultInfo</name><operator>-&gt;</operator><name>numOfRows</name></name></expr>)</condition> <block>{<block_content>
    <comment type="line">// All data has returned to App already, no need to try again</comment>
    <if_stmt><if>if <condition>(<expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>completed</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// convert ucs4 to native multi-bytes string</comment>
    <expr_stmt><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>convertUcs4</name></name> <operator>=</operator> <name>convertUcs4</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SSyncQueryParam</name><modifier>*</modifier></type> <name>pParam</name> <init>= <expr><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>param</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taos_fetch_rows_a</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>, <argument><expr><name>syncFetchFn</name></expr></argument>, <argument><expr><name>pParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tsem_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pParam</name><operator>-&gt;</operator><name>sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>code</name></name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>setupOneRowPtr</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>doSetOneRowPtr</name><argument_list>(<argument><expr><name>pResultInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>current</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>row</name></name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>doPrepareResPtr</name><parameter_list>(<parameter><decl><type><name>SReqResultInfo</name><modifier>*</modifier></type> <name>pResInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pResInfo</name><operator>-&gt;</operator><name>row</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pResInfo</name><operator>-&gt;</operator><name>row</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>pResInfo</name><operator>-&gt;</operator><name>numOfCols</name></name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pResInfo</name><operator>-&gt;</operator><name>pCol</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>pResInfo</name><operator>-&gt;</operator><name>numOfCols</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SResultColumn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pResInfo</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>pResInfo</name><operator>-&gt;</operator><name>numOfCols</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pResInfo</name><operator>-&gt;</operator><name>convertBuf</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>pResInfo</name><operator>-&gt;</operator><name>numOfCols</name></name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pResInfo</name><operator>-&gt;</operator><name>row</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pResInfo</name><operator>-&gt;</operator><name>pCol</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pResInfo</name><operator>-&gt;</operator><name>length</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pResInfo</name><operator>-&gt;</operator><name>convertBuf</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>doConvertUCS4</name><parameter_list>(<parameter><decl><type><name>SReqResultInfo</name><modifier>*</modifier></type> <name>pResultInfo</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfRows</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfCols</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>colLength</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>type</name> <init>= <expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>bytes</name> <init>= <expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_NCHAR</name> <operator>&amp;&amp;</operator> <name><name>colLength</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>taosMemoryRealloc</name><argument_list>(<argument><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>convertBuf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>colLength</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>convertBuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>SResultColumn</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><operator>&amp;</operator><name><name>pResultInfo</name><operator>-&gt;</operator><name>pCol</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>numOfRows</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pCol</name><operator>-&gt;</operator><name>offset</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>pStart</name> <init>= <expr><name><name>pCol</name><operator>-&gt;</operator><name>offset</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name><name>pCol</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>

          <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>taosUcs4ToMbs</name><argument_list>(<argument><expr><operator>(</operator><name>TdUcs4</name><operator>*</operator><operator>)</operator><call><name>varDataVal</name><argument_list>(<argument><expr><name>pStart</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>varDataLen</name><argument_list>(<argument><expr><name>pStart</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>len</name> <operator>&lt;=</operator> <name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name>p</name> <operator>+</operator> <name>len</name><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><name><name>pResultInfo</name><operator>-&gt;</operator><name>convertBuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>colLength</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pCol</name><operator>-&gt;</operator><name>offset</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name><name>pResultInfo</name><operator>-&gt;</operator><name>convertBuf</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
          <expr_stmt><expr><name>p</name> <operator>+=</operator> <operator>(</operator><name>len</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>

      <expr_stmt><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>pCol</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pData</name> <operator>=</operator> <name><name>pResultInfo</name><operator>-&gt;</operator><name>convertBuf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>row</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pResultInfo</name><operator>-&gt;</operator><name>pCol</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pData</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>getVersion1BlockMetaSize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfCols</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>cols</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">3</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>numOfCols</name> <operator>==</operator> <name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
         <name>numOfCols</name> <operator>*</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int8_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>estimateJsonLen</name><parameter_list>(<parameter><decl><type><name>SReqResultInfo</name><modifier>*</modifier></type> <name>pResultInfo</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfCols</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfRows</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>pResultInfo</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// | version | total length | total rows | total columns | flag seg| block group id | column schema | each column length |</comment>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>len</name> <init>= <expr><call><name>getVersion1BlockMetaSize</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>numOfCols</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>colLength</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>p</name> <operator>+</operator> <name>len</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>len</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>numOfCols</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>pStart</name> <init>= <expr><name>p</name> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>colLen</name> <init>= <expr><call><name>htonl</name><argument_list>(<argument><expr><name><name>colLength</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_JSON</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>offset</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>pStart</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type>  <name>lenTmp</name> <init>= <expr><name>numOfRows</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>len</name> <operator>+=</operator> <name>lenTmp</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>pStart</name> <operator>+=</operator> <name>lenTmp</name></expr>;</expr_stmt>

      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>numOfRows</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>offset</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><name><name>offset</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name>pStart</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int32_t</name></type> <name>jsonInnerType</name> <init>= <expr><operator>*</operator><name>data</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>jsonInnerData</name> <init>= <expr><name>data</name> <operator>+</operator> <name>CHAR_BYTES</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>jsonInnerType</name> <operator>==</operator> <name>TSDB_DATA_TYPE_NULL</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>len</name> <operator>+=</operator> <operator>(</operator><name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>TSDB_DATA_NULL_STR_L</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>tTagIsJson</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>len</name> <operator>+=</operator> <operator>(</operator><name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <operator>(</operator><operator>(</operator><specifier>const</specifier> <name>STag</name><operator>*</operator><operator>)</operator><operator>(</operator><name>data</name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>len</name><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>jsonInnerType</name> <operator>==</operator> <name>TSDB_DATA_TYPE_NCHAR</name></expr>)</condition> <block>{<block_content>  <comment type="line">// value -&gt; "value"</comment>
          <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>varDataTLen</name><argument_list>(<argument><expr><name>jsonInnerData</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>CHAR_BYTES</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>jsonInnerType</name> <operator>==</operator> <name>TSDB_DATA_TYPE_DOUBLE</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>len</name> <operator>+=</operator> <operator>(</operator><name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>jsonInnerType</name> <operator>==</operator> <name>TSDB_DATA_TYPE_BOOL</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>len</name> <operator>+=</operator> <operator>(</operator><name>VARSTR_HEADER_SIZE</name> <operator>+</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>lenTmp</name> <init>= <expr><name>numOfRows</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>len</name> <operator>+=</operator> <operator>(</operator><name>lenTmp</name> <operator>+</operator> <name>colLen</name><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>pStart</name> <operator>+=</operator> <name>lenTmp</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>lenTmp</name> <init>= <expr><call><name>BitmapLen</name><argument_list>(<argument><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>len</name> <operator>+=</operator> <operator>(</operator><name>lenTmp</name> <operator>+</operator> <name>colLen</name><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>pStart</name> <operator>+=</operator> <name>lenTmp</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>pStart</name> <operator>+=</operator> <name>colLen</name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>doConvertJson</name><parameter_list>(<parameter><decl><type><name>SReqResultInfo</name><modifier>*</modifier></type> <name>pResultInfo</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfCols</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfRows</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type> <name>needConvert</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_JSON</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>needConvert</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>needConvert</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"start to convert form json format string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>p</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>pResultInfo</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>dataLen</name> <init>= <expr><call><name>estimateJsonLen</name><argument_list>(<argument><expr><name>pResultInfo</name></expr></argument>, <argument><expr><name>numOfCols</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>convertJson</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dataLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>convertJson</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p1</name> <init>= <expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>convertJson</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>totalLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>getVersion1BlockMetaSize</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>numOfCols</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>p1</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>totalLen</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>numOfCols</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>colLength</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>colLength1</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>p1</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>p1</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>totalLen</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>pStart</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>pStart1</name> <init>= <expr><name>p1</name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>colLen</name> <init>= <expr><call><name>htonl</name><argument_list>(<argument><expr><name><name>colLength</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>colLen1</name> <init>= <expr><call><name>htonl</name><argument_list>(<argument><expr><name><name>colLength1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>colLen</name> <operator>&lt;</operator> <name>dataLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_JSON</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>offset</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>pStart</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>offset1</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>pStart1</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>len</name> <operator>=</operator> <name>numOfRows</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pStart1</name></expr></argument>, <argument><expr><name>pStart</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pStart</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>pStart1</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>totalLen</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

      <expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>numOfRows</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>offset</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><name><name>offset</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name>pStart</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int32_t</name></type> <name>jsonInnerType</name> <init>= <expr><operator>*</operator><name>data</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>jsonInnerData</name> <init>= <expr><name>data</name> <operator>+</operator> <name>CHAR_BYTES</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type>    <name><name>dst</name><index>[<expr><name>TSDB_MAX_JSON_TAG_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>jsonInnerType</name> <operator>==</operator> <name>TSDB_DATA_TYPE_NULL</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>TSDB_DATA_NULL_STR_L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>tTagIsJson</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>jsonString</name> <init>= <expr><call><name>parseTagDatatoJson</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>STR_TO_VARSTR</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>jsonString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>jsonString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>jsonInnerType</name> <operator>==</operator> <name>TSDB_DATA_TYPE_NCHAR</name></expr>)</condition> <block>{<block_content>  <comment type="line">// value -&gt; "value"</comment>
          <expr_stmt><expr><operator>*</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>varDataVal</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="char">'\"'</literal></expr>;</expr_stmt>
          <decl_stmt><decl><type><name>int32_t</name></type> <name>length</name> <init>= <expr><call><name>taosUcs4ToMbs</name><argument_list>(<argument><expr><operator>(</operator><name>TdUcs4</name><operator>*</operator><operator>)</operator><call><name>varDataVal</name><argument_list>(<argument><expr><name>jsonInnerData</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>varDataLen</name><argument_list>(<argument><expr><name>jsonInnerData</name></expr></argument>)</argument_list></call></expr></argument>,
                                         <argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>CHAR_BYTES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name>length</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"charset:%s to %s. convert failed."</literal></expr></argument>, <argument><expr><name>DEFAULT_UNICODE_ENCODEC</name></expr></argument>, <argument><expr><name>tsCharset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>length</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>length</name> <operator>+</operator> <name>CHAR_BYTES</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><operator>*</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>length</name> <operator>+</operator> <name>CHAR_BYTES</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="char">'\"'</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>jsonInnerType</name> <operator>==</operator> <name>TSDB_DATA_TYPE_DOUBLE</name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>double</name></type> <name>jsonVd</name> <init>= <expr><operator>*</operator><operator>(</operator><name>double</name><operator>*</operator><operator>)</operator><operator>(</operator><name>jsonInnerData</name><operator>)</operator></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%.9lf"</literal></expr></argument>, <argument><expr><name>jsonVd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>jsonInnerType</name> <operator>==</operator> <name>TSDB_DATA_TYPE_BOOL</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>jsonInnerData</name><operator>)</operator> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><name><name>offset1</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pStart1</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><call><name>varDataTLen</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>varDataTLen</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><name>colLen1</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>totalLen</name> <operator>+=</operator> <name>colLen1</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>colLength1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>len</name> <operator>=</operator> <name>numOfRows</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pStart1</name></expr></argument>, <argument><expr><name>pStart</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pStart</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>pStart1</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>totalLen</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>totalLen</name> <operator>+=</operator> <name>colLen</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pStart1</name></expr></argument>, <argument><expr><name>pStart</name></expr></argument>, <argument><expr><name>colLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>BitmapLen</name><argument_list>(<argument><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pStart1</name></expr></argument>, <argument><expr><name>pStart</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pStart</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>pStart1</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>totalLen</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>totalLen</name> <operator>+=</operator> <name>colLen</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pStart1</name></expr></argument>, <argument><expr><name>pStart</name></expr></argument>, <argument><expr><name>colLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>pStart</name> <operator>+=</operator> <name>colLen</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pStart1</name> <operator>+=</operator> <name>colLen1</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pResultInfo</name><operator>-&gt;</operator><name>convertJson</name></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>=</operator> <name>totalLen</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <name><name>pResultInfo</name><operator>-&gt;</operator><name>convertJson</name></name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>setResultDataPtr</name><parameter_list>(<parameter><decl><type><name>SReqResultInfo</name><modifier>*</modifier></type> <name>pResultInfo</name></decl></parameter>, <parameter><decl><type><name>TAOS_FIELD</name><modifier>*</modifier></type> <name>pFields</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfCols</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfRows</name></decl></parameter>,
                         <parameter><decl><type><name>bool</name></type> <name>convertUcs4</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>numOfCols</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>pFields</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>pResultInfo</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>numOfRows</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>doPrepareResPtr</name><argument_list>(<argument><expr><name>pResultInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>doConvertJson</name><argument_list>(<argument><expr><name>pResultInfo</name></expr></argument>, <argument><expr><name>numOfCols</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>pResultInfo</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// version:</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>blockVersion</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>dataLen</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>rows</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>cols</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>rows</name> <operator>==</operator> <name>numOfRows</name> <operator>&amp;&amp;</operator> <name>cols</name> <operator>==</operator> <name>numOfCols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>hasColumnSeg</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>uint64_t</name></type> <name>groupId</name> <init>= <expr><operator>*</operator><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

  <comment type="line">// check fields</comment>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>int8_t</name></type> <name>type</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int8_t</name><operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int8_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>bytes</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <comment type="block">/*ASSERT(type == pFields[i].type &amp;&amp; bytes == pFields[i].bytes);*/</comment>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>colLength</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>numOfCols</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>pStart</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>colLength</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>colLength</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>colLength</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <name>dataLen</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"invalid colLength %d, dataLen %d"</literal></expr></argument>, <argument><expr><name><name>colLength</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>dataLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>pCol</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>pStart</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>pStart</name> <operator>+=</operator> <name>numOfRows</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>pCol</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nullbitmap</name> <operator>=</operator> <name>pStart</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>pStart</name> <operator>+=</operator> <call><name>BitmapLen</name><argument_list>(<argument><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>pCol</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pData</name> <operator>=</operator> <name>pStart</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>length</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pResultInfo</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>row</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pResultInfo</name><operator>-&gt;</operator><name>pCol</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pData</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>pStart</name> <operator>+=</operator> <name><name>colLength</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name>convertUcs4</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>doConvertUCS4</name><argument_list>(<argument><expr><name>pResultInfo</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>numOfCols</name></expr></argument>, <argument><expr><name>colLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>getDbOfConnection</name><parameter_list>(<parameter><decl><type><name>STscObj</name><modifier>*</modifier></type> <name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strndup</name><argument_list>(<argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><call><name>tListLen</name><argument_list>(<argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>setConnectionDB</name><parameter_list>(<parameter><decl><type><name>STscObj</name><modifier>*</modifier></type> <name>pTscObj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>db</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>db</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>pTscObj</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTscObj</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><call><name>tListLen</name><argument_list>(<argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTscObj</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>resetConnectDB</name><parameter_list>(<parameter><decl><type><name>STscObj</name><modifier>*</modifier></type> <name>pTscObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pTscObj</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTscObj</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>db</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTscObj</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>setQueryResultFromRsp</name><parameter_list>(<parameter><decl><type><name>SReqResultInfo</name><modifier>*</modifier></type> <name>pResultInfo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SRetrieveTableRsp</name><modifier>*</modifier></type> <name>pRsp</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>convertUcs4</name></decl></parameter>,
                              <parameter><decl><type><name>bool</name></type> <name>freeAfterUse</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pResultInfo</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>pRsp</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>freeAfterUse</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>pRspMsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>pRspMsg</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>pRsp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>pRsp</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>=</operator> <call><name>htobe64</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>completed</name></name> <operator>=</operator> <operator>(</operator><name><name>pRsp</name><operator>-&gt;</operator><name>completed</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>payloadLen</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>compLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>precision</name></name> <operator>=</operator> <name><name>pRsp</name><operator>-&gt;</operator><name>precision</name></name></expr>;</expr_stmt>

  <comment type="line">// TODO handle the compressed case</comment>
  <expr_stmt><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>totalRows</name></name> <operator>+=</operator> <name><name>pResultInfo</name><operator>-&gt;</operator><name>numOfRows</name></name></expr>;</expr_stmt>
  <return>return <expr><call><name>setResultDataPtr</name><argument_list>(<argument><expr><name>pResultInfo</name></expr></argument>, <argument><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>fields</name></name></expr></argument>, <argument><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>numOfCols</name></name></expr></argument>, <argument><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></argument>,
                          <argument><expr><name>convertUcs4</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>TSDB_SERVER_STATUS</name></type> <name>taos_check_server_status</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>fqdn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>details</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxlen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TSDB_SERVER_STATUS</name></type> <name>code</name> <init>= <expr><name>TSDB_SRV_STATUS_UNAVAILABLE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>              <name>clientRpc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SServerStatusRsp</name></type>   <name>statusRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SEpSet</name></type>             <name>epSet</name> <init>= <expr><block>{<expr><operator>.</operator><name>inUse</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>numOfEps</name> <operator>=</operator> <literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRpcMsg</name></type>            <name>rpcMsg</name> <init>= <expr><block>{<expr><operator>.</operator><name><name>info</name><operator>.</operator><name>ahandle</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><literal type="number">0x9526</literal></expr>, <expr><operator>.</operator><name>msgType</name> <operator>=</operator> <name>TDMT_DND_SERVER_STATUS</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRpcMsg</name></type>            <name>rpcRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRpcInit</name></type>           <name>rpcInit</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>               <name><name>pass</name><index>[<expr><name>TSDB_PASSWORD_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>label</name></name> <operator>=</operator> <literal type="string">"CHK"</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>numOfThreads</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>cfp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>sessions</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>connType</name></name> <operator>=</operator> <name>TAOS_CONN_CLIENT</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>idleTime</name></name> <operator>=</operator> <name>tsShellActivityTimer</name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>compressSize</name></name> <operator>=</operator> <name>tsCompressMsgSize</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>user</name></name> <operator>=</operator> <literal type="string">"_dnd"</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>retryLimit</name></name> <operator>=</operator> <name>tsRpcRetryLimit</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>retryInterval</name></name> <operator>=</operator> <name>tsRpcRetryInterval</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>clientRpc</name> <operator>=</operator> <call><name>rpcOpen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rpcInit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>clientRpc</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"failed to init server status client"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>fqdn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>fqdn</name> <operator>=</operator> <name>tsLocalFqdn</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>port</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>port</name> <operator>=</operator> <name>tsServerPort</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>epSet</name><operator>.</operator><name>eps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fqdn</name></expr></argument>, <argument><expr><name>fqdn</name></expr></argument>, <argument><expr><name>TSDB_FQDN_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>epSet</name><operator>.</operator><name>eps</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>port</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><name>port</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>rpcSendRecv</name><argument_list>(<argument><expr><name>clientRpc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>epSet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>rpcRsp</name><operator>.</operator><name>code</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>rpcRsp</name><operator>.</operator><name>contLen</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>rpcRsp</name><operator>.</operator><name>pCont</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"failed to send server status req since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSServerStatusRsp</name><argument_list>(<argument><expr><name><name>rpcRsp</name><operator>.</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>rpcRsp</name><operator>.</operator><name>contLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>statusRsp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"failed to parse server status rsp since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>statusRsp</name><operator>.</operator><name>statusCode</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>details</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name>details</name></expr></argument>, <argument><expr><name><name>statusRsp</name><operator>.</operator><name>details</name></name></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>_OVER</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>clientRpc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>rpcClose</name><argument_list>(<argument><expr><name>clientRpc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>rpcRsp</name><operator>.</operator><name>pCont</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>rpcRsp</name><operator>.</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>appendTbToReq</name><parameter_list>(<parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pHash</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>pos1</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len1</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>pos2</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>str</name></decl></parameter>,
                      <parameter><decl><type><name>int32_t</name></type> <name>acctId</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>db</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SName</name></type> <name>name</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>len1</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>dbName</name> <init>= <expr><name>db</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>tbName</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>dbLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>tbLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>len2</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>dbName</name> <operator>=</operator> <name>str</name> <operator>+</operator> <name>pos1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>dbLen</name> <operator>=</operator> <name>len1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>tbName</name> <operator>=</operator> <name>str</name> <operator>+</operator> <name>pos2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>tbLen</name> <operator>=</operator> <name>len2</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>dbLen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>tbName</name> <operator>=</operator> <name>str</name> <operator>+</operator> <name>pos1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>tbLen</name> <operator>=</operator> <name>len1</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>dbLen</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>tbLen</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tNameSetDbName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name>acctId</name></expr></argument>, <argument><expr><name>dbName</name></expr></argument>, <argument><expr><name>dbLen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tNameAddTbName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name>tbName</name></expr></argument>, <argument><expr><name>tbLen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>dbFName</name><index>[<expr><name>TSDB_DB_FNAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>dbFName</name></expr></argument>, <argument><expr><literal type="string">"%d.%.*s"</literal></expr></argument>, <argument><expr><name>acctId</name></expr></argument>, <argument><expr><name>dbLen</name></expr></argument>, <argument><expr><name>dbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>STablesReq</name><modifier>*</modifier></type> <name>pDb</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name>pHash</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pDb</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pTables</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>STablesReq</name></type> <name>db</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>db</name><operator>.</operator><name>pTables</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SName</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>pTables</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name>pHash</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>dbFName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>transferTableNameList</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>tbList</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>acctId</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dbName</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier><modifier>*</modifier></type> <name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pHash</name> <init>= <expr><call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pHash</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>bool</name></type>    <name>inEscape</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>pIter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>vIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name><name>vPos</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name><name>vLen</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>vPos</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vPos</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>vLen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vLen</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <operator>*</operator><operator>(</operator><name>tbList</name> <operator>+</operator> <name>i</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>vPos</name><index>[<expr><name>vIdx</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>vLen</name><index>[<expr><name>vIdx</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>vLen</name><index>[<expr><name>vIdx</name></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>-</operator> <name><name>vPos</name><index>[<expr><name>vIdx</name></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>appendTbToReq</name><argument_list>(<argument><expr><name>pHash</name></expr></argument>, <argument><expr><name><name>vPos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>vLen</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>vPos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>vLen</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>tbList</name></expr></argument>, <argument><expr><name>acctId</name></expr></argument>, <argument><expr><name>dbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
        <goto>goto <name>_return</name>;</goto>
      </block_content>}</block></if></if_stmt>

      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><literal type="char">'`'</literal> <operator>==</operator> <operator>*</operator><operator>(</operator><name>tbList</name> <operator>+</operator> <name>i</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>inEscape</name> <operator>=</operator> <operator>!</operator><name>inEscape</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>inEscape</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>vPos</name><index>[<expr><name>vIdx</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>vLen</name><index>[<expr><name>vIdx</name></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>-</operator> <name><name>vPos</name><index>[<expr><name>vIdx</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <goto>goto <name>_return</name>;</goto>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>

      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>inEscape</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>vPos</name><index>[<expr><name>vIdx</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>vPos</name><index>[<expr><name>vIdx</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><literal type="char">'.'</literal> <operator>==</operator> <operator>*</operator><operator>(</operator><name>tbList</name> <operator>+</operator> <name>i</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>vPos</name><index>[<expr><name>vIdx</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <goto>goto <name>_return</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>vLen</name><index>[<expr><name>vIdx</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>vLen</name><index>[<expr><name>vIdx</name></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>-</operator> <name><name>vPos</name><index>[<expr><name>vIdx</name></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>vIdx</name><operator>++</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>vIdx</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
        <goto>goto <name>_return</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><literal type="char">','</literal> <operator>==</operator> <operator>*</operator><operator>(</operator><name>tbList</name> <operator>+</operator> <name>i</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>vPos</name><index>[<expr><name>vIdx</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <goto>goto <name>_return</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>vLen</name><index>[<expr><name>vIdx</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>vLen</name><index>[<expr><name>vIdx</name></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>-</operator> <name><name>vPos</name><index>[<expr><name>vIdx</name></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>appendTbToReq</name><argument_list>(<argument><expr><name>pHash</name></expr></argument>, <argument><expr><name><name>vPos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>vLen</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>vPos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>vLen</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>tbList</name></expr></argument>, <argument><expr><name>acctId</name></expr></argument>, <argument><expr><name>dbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
        <goto>goto <name>_return</name>;</goto>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>vPos</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vPos</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>vLen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vLen</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>vIdx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><literal type="char">' '</literal> <operator>==</operator> <operator>*</operator><operator>(</operator><name>tbList</name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>||</operator> <literal type="char">'\r'</literal> <operator>==</operator> <operator>*</operator><operator>(</operator><name>tbList</name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>||</operator> <literal type="char">'\t'</literal> <operator>==</operator> <operator>*</operator><operator>(</operator><name>tbList</name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>||</operator> <literal type="char">'\n'</literal> <operator>==</operator> <operator>*</operator><operator>(</operator><name>tbList</name> <operator>+</operator> <name>i</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>vPos</name><index>[<expr><name>vIdx</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>vLen</name><index>[<expr><name>vIdx</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>vLen</name><index>[<expr><name>vIdx</name></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>-</operator> <name><name>vPos</name><index>[<expr><name>vIdx</name></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="char">'a'</literal> <operator>&lt;=</operator> <operator>*</operator><operator>(</operator><name>tbList</name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>&amp;&amp;</operator> <literal type="char">'z'</literal> <operator>&gt;=</operator> <operator>*</operator><operator>(</operator><name>tbList</name> <operator>+</operator> <name>i</name><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>(</operator><literal type="char">'A'</literal> <operator>&lt;=</operator> <operator>*</operator><operator>(</operator><name>tbList</name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>&amp;&amp;</operator> <literal type="char">'Z'</literal> <operator>&gt;=</operator> <operator>*</operator><operator>(</operator><name>tbList</name> <operator>+</operator> <name>i</name><operator>)</operator><operator>)</operator> <operator>||</operator>
        <operator>(</operator><literal type="char">'0'</literal> <operator>&lt;=</operator> <operator>*</operator><operator>(</operator><name>tbList</name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>&amp;&amp;</operator> <literal type="char">'9'</literal> <operator>&gt;=</operator> <operator>*</operator><operator>(</operator><name>tbList</name> <operator>+</operator> <name>i</name><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>(</operator><literal type="char">'_'</literal> <operator>==</operator> <operator>*</operator><operator>(</operator><name>tbList</name> <operator>+</operator> <name>i</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>vLen</name><index>[<expr><name>vIdx</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <goto>goto <name>_return</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>vPos</name><index>[<expr><name>vIdx</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>vPos</name><index>[<expr><name>vIdx</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>dbNum</name> <init>= <expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name>pHash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>pReq</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>dbNum</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STablesReq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name>pHash</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>pIter</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>STablesReq</name><modifier>*</modifier></type> <name>pDb</name> <init>= <expr><operator>(</operator><name>STablesReq</name><operator>*</operator><operator>)</operator><name>pIter</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><operator>*</operator><name>pReq</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name>pHash</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name>pHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>

<label><name>_return</name>:</label>

  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_TSC_INVALID_OPERATION</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name>pHash</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>pIter</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>STablesReq</name><modifier>*</modifier></type> <name>pDb</name> <init>= <expr><operator>(</operator><name>STablesReq</name><operator>*</operator><operator>)</operator><name>pIter</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pTables</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name>pHash</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name>pHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>terrno</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncCatalogFn</name><parameter_list>(<parameter><decl><type><name>SMetaData</name><modifier>*</modifier></type> <name>pResult</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncQueryParam</name><modifier>*</modifier></type> <name>pParam</name> <init>= <expr><name>param</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pParam</name><operator>-&gt;</operator><name>pRequest</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tsem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pParam</name><operator>-&gt;</operator><name>sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>syncQueryFn</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>res</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncQueryParam</name><modifier>*</modifier></type> <name>pParam</name> <init>= <expr><name>param</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pParam</name><operator>-&gt;</operator><name>pRequest</name></name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pParam</name><operator>-&gt;</operator><name>pRequest</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pParam</name><operator>-&gt;</operator><name>pRequest</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tsem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pParam</name><operator>-&gt;</operator><name>sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosAsyncQueryImpl</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>connId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>sql</name></decl></parameter>, <parameter><decl><type><name>__taos_async_fn_t</name></type> <name>fp</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>validateOnly</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>sql</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>fp</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>fp</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>fp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>sqlLen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>sqlLen</name> <operator>&gt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>TSDB_MAX_ALLOWED_SQL_LEN</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"sql string exceeds max length:%d"</literal></expr></argument>, <argument><expr><name>TSDB_MAX_ALLOWED_SQL_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_TSC_EXCEED_SQL_LIMIT</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SRequestObj</name><modifier>*</modifier></type> <name>pRequest</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>code</name> <init>= <expr><call><name>buildRequest</name><argument_list>(<argument><expr><name>connId</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><name>sqlLen</name></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><name>validateOnly</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pRequest</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>queryFp</name></name> <operator>=</operator> <name>fp</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>doAsyncQuery</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>taosAsyncQueryImplWithReqid</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>connId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>sql</name></decl></parameter>, <parameter><decl><type><name>__taos_async_fn_t</name></type> <name>fp</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>validateOnly</name></decl></parameter>,
                                 <parameter><decl><type><name>int64_t</name></type> <name>reqid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>sql</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>fp</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>fp</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>fp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>sqlLen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>sqlLen</name> <operator>&gt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>TSDB_MAX_ALLOWED_SQL_LEN</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"sql string exceeds max length:%d"</literal></expr></argument>, <argument><expr><name>TSDB_MAX_ALLOWED_SQL_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_TSC_EXCEED_SQL_LIMIT</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SRequestObj</name><modifier>*</modifier></type> <name>pRequest</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>code</name> <init>= <expr><call><name>buildRequest</name><argument_list>(<argument><expr><name>connId</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><name>sqlLen</name></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><name>validateOnly</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pRequest</name></expr></argument>, <argument><expr><name>reqid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>queryFp</name></name> <operator>=</operator> <name>fp</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>doAsyncQuery</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>TAOS_RES</name><modifier>*</modifier></type> <name>taosQueryImpl</name><parameter_list>(<parameter><decl><type><name>TAOS</name><modifier>*</modifier></type> <name>taos</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>sql</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>validateOnly</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>taos</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_TSC_DISCONNECTED</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSyncQueryParam</name><modifier>*</modifier></type> <name>param</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSyncQueryParam</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tsem_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>param</name><operator>-&gt;</operator><name>sem</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosAsyncQueryImpl</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name>taos</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><name>syncQueryFn</name></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><name>validateOnly</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tsem_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>param</name><operator>-&gt;</operator><name>sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SRequestObj</name> <modifier>*</modifier></type><name>pRequest</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>param</name><operator>-&gt;</operator><name>pRequest</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>pRequest</name><operator>-&gt;</operator><name>syncQuery</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pRequest</name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>pRequest</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  
  <return>return <expr><name>pRequest</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>TAOS_RES</name><modifier>*</modifier></type> <name>taosQueryImplWithReqid</name><parameter_list>(<parameter><decl><type><name>TAOS</name><modifier>*</modifier></type> <name>taos</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>sql</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>validateOnly</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>reqid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>taos</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_TSC_DISCONNECTED</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSyncQueryParam</name><modifier>*</modifier></type> <name>param</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSyncQueryParam</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tsem_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>param</name><operator>-&gt;</operator><name>sem</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosAsyncQueryImplWithReqid</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name>taos</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><name>syncQueryFn</name></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><name>validateOnly</name></expr></argument>, <argument><expr><name>reqid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tsem_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>param</name><operator>-&gt;</operator><name>sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SRequestObj</name> <modifier>*</modifier></type><name>pRequest</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>param</name><operator>-&gt;</operator><name>pRequest</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>pRequest</name><operator>-&gt;</operator><name>syncQuery</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pRequest</name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>pRequest</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  
  <return>return <expr><name>pRequest</name></expr>;</return>
</block_content>}</block></function>
</unit>
