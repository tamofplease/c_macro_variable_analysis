<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/client/src/clientMain.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clientInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clientLog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clientStmt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"functionMgt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"query.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scheduler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdatablock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tglobal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tmsg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tref.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"trpc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"version.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TSC_VAR_NOT_RELEASE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TSC_VAR_RELEASED</name></cpp:macro>    <cpp:value>0</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>sentinel</name> <init>= <expr><name>TSC_VAR_NOT_RELEASE</name></expr></init></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>createParseContext</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SRequestObj</name> <modifier>*</modifier></type><name>pRequest</name></decl></parameter>, <parameter><decl><type><name>SParseContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>pCxt</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int</name></type> <name>taos_options</name><parameter_list>(<parameter><decl><type><name>TSDB_OPTION</name></type> <name>option</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>lock</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><call><name>atomic_val_compare_exchange_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">1000</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tscInfo</name><argument_list>(<argument><expr><literal type="string">"haven't acquire lock after spin %d times."</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sched_yield</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>taos_options_imp</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>atomic_store_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<comment type="line">// this function may be called by user or system, or by both simultaneously.</comment>
<function><type><name>void</name></type> <name>taos_cleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"start to cleanup client environment"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>atomic_val_compare_exchange_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sentinel</name></expr></argument>, <argument><expr><name>TSC_VAR_NOT_RELEASE</name></expr></argument>, <argument><expr><name>TSC_VAR_RELEASED</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TSC_VAR_NOT_RELEASE</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>id</name> <init>= <expr><name>clientReqRefPool</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>clientReqRefPool</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosCloseRef</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>hbMgrCleanUp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>catalogDestroy</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>schedulerDestroy</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>fmFuncMgtDestroy</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>qCleanupKeywordsTable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>nodesDestroyAllocatorSet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>id</name> <operator>=</operator> <name>clientConnRefPool</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>clientConnRefPool</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosCloseRef</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>rpcCleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"rpc cleanup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>cleanupTaskQueue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosConvDestroy</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tscInfo</name><argument_list>(<argument><expr><literal type="string">"all local resources released"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosCleanupCfg</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosCloseLog</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>setConfRet</name></type> <name>taos_set_config_imp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>config</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>setConfRet</name></type> <name>ret</name> <init>= <expr><block>{<expr><name>SET_CONF_RET_SUCC</name></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
  <comment type="line">// TODO: need re-implementation</comment>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>setConfRet</name></type> <name>taos_set_config</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>config</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// TODO  pthread_mutex_lock(&amp;setConfMutex);</comment>
  <decl_stmt><decl><type><name>setConfRet</name></type> <name>ret</name> <init>= <expr><call><name>taos_set_config_imp</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="line">//  pthread_mutex_unlock(&amp;setConfMutex);</comment>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>TAOS</name> <modifier>*</modifier></type><name>taos_connect</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pass</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>port</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"try to connect to %s:%u, user:%s db:%s"</literal></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>user</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>user</name> <operator>=</operator> <name>TSDB_DEFAULT_USER</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>pass</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pass</name> <operator>=</operator> <name>TSDB_DEFAULT_PASS</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STscObj</name> <modifier>*</modifier></type><name>pObj</name> <init>= <expr><call><name>taos_connect_internal</name><argument_list>(<argument><expr><name>ip</name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>pass</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>CONN_TYPE__QUERY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pObj</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>rid</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>*</operator><name>rid</name> <operator>=</operator> <name><name>pObj</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><name>TAOS</name> <operator>*</operator><operator>)</operator><name>rid</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taos_close_internal</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>taos</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STscObj</name> <modifier>*</modifier></type><name>pTscObj</name> <init>= <expr><operator>(</operator><name>STscObj</name> <operator>*</operator><operator>)</operator><name>taos</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"0x%"</literal> <name>PRIx64</name> <literal type="string">" try to close connection, numOfReq:%d"</literal></expr></argument>, <argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>numOfReqs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosRemoveRef</name><argument_list>(<argument><expr><name>clientConnRefPool</name></expr></argument>, <argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taos_close</name><parameter_list>(<parameter><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>taos</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STscObj</name> <modifier>*</modifier></type><name>pObj</name> <init>= <expr><call><name>acquireTscObj</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name>taos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pObj</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taos_close_internal</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>releaseTscObj</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>taos_errno</name><parameter_list>(<parameter><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>TD_RES_TMQ_META</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>TD_RES_TMQ</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>TD_RES_TMQ_METADATA</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><operator>(</operator><operator>(</operator><name>SRequestObj</name> <operator>*</operator><operator>)</operator><name>res</name><operator>)</operator><operator>-&gt;</operator><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>taos_errstr</name><parameter_list>(<parameter><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>TD_RES_TMQ_META</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>TD_RES_TMQ</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>TD_RES_TMQ_METADATA</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="string">"success"</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SRequestObj</name> <modifier>*</modifier></type><name>pRequest</name> <init>= <expr><operator>(</operator><name>SRequestObj</name> <operator>*</operator><operator>)</operator><name>res</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>msgBuf</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>code</name></name> <operator>==</operator> <name>TSDB_CODE_RPC_FQDN_ERROR</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name><name>pRequest</name><operator>-&gt;</operator><name>msgBuf</name></name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>tstrerror</name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taos_free_result</name><parameter_list>(<parameter><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>res</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"taos free res %p"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>TD_RES_QUERY</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SRequestObj</name> <modifier>*</modifier></type><name>pRequest</name> <init>= <expr><operator>(</operator><name>SRequestObj</name> <operator>*</operator><operator>)</operator><name>res</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"0x%"</literal> <name>PRIx64</name> <literal type="string">" taos_free_result start to free query"</literal></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>destroyRequest</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>TD_RES_TMQ_METADATA</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SMqTaosxRspObj</name> <modifier>*</modifier></type><name>pRsp</name> <init>= <expr><operator>(</operator><name>SMqTaosxRspObj</name> <operator>*</operator><operator>)</operator><name>res</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosArrayDestroyP</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>rsp</name><operator>.</operator><name>blockData</name></name></expr></argument>, <argument><expr><name>taosMemoryFree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>rsp</name><operator>.</operator><name>blockDataLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayDestroyP</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>rsp</name><operator>.</operator><name>blockTbName</name></name></expr></argument>, <argument><expr><name>taosMemoryFree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayDestroyP</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>rsp</name><operator>.</operator><name>blockSchema</name></name></expr></argument>, <argument><expr><operator>(</operator><name>FDelete</name><operator>)</operator><name>tDeleteSSchemaWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// taosx</comment>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>rsp</name><operator>.</operator><name>createTableLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayDestroyP</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>rsp</name><operator>.</operator><name>createTableReq</name></name></expr></argument>, <argument><expr><name>taosMemoryFree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>resInfo</name><operator>.</operator><name>pRspMsg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>doFreeReqResultInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRsp</name><operator>-&gt;</operator><name>resInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>TD_RES_TMQ</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SMqRspObj</name> <modifier>*</modifier></type><name>pRsp</name> <init>= <expr><operator>(</operator><name>SMqRspObj</name> <operator>*</operator><operator>)</operator><name>res</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosArrayDestroyP</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>rsp</name><operator>.</operator><name>blockData</name></name></expr></argument>, <argument><expr><name>taosMemoryFree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>rsp</name><operator>.</operator><name>blockDataLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayDestroyP</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>rsp</name><operator>.</operator><name>blockTbName</name></name></expr></argument>, <argument><expr><name>taosMemoryFree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayDestroyP</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>rsp</name><operator>.</operator><name>blockSchema</name></name></expr></argument>, <argument><expr><operator>(</operator><name>FDelete</name><operator>)</operator><name>tDeleteSSchemaWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>resInfo</name><operator>.</operator><name>pRspMsg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>doFreeReqResultInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRsp</name><operator>-&gt;</operator><name>resInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>TD_RES_TMQ_META</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SMqMetaRspObj</name> <modifier>*</modifier></type><name>pRspObj</name> <init>= <expr><operator>(</operator><name>SMqMetaRspObj</name> <operator>*</operator><operator>)</operator><name>res</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pRspObj</name><operator>-&gt;</operator><name>metaRsp</name><operator>.</operator><name>metaRsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pRspObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taos_kill_query</name><parameter_list>(<parameter><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>taos</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type>  <name>rid</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name>taos</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STscObj</name> <modifier>*</modifier></type><name>pTscObj</name> <init>= <expr><call><name>acquireTscObj</name><argument_list>(<argument><expr><name>rid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTscObj</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>stopAllRequests</name><argument_list>(<argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>pRequests</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>releaseTscObj</name><argument_list>(<argument><expr><name>rid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>taos_field_count</name><parameter_list>(<parameter><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>TD_RES_TMQ_META</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SReqResultInfo</name> <modifier>*</modifier></type><name>pResInfo</name> <init>= <expr><call><name>tscGetCurResInfo</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><name><name>pResInfo</name><operator>-&gt;</operator><name>numOfCols</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>taos_num_fields</name><parameter_list>(<parameter><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>taos_field_count</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>TAOS_FIELD</name> <modifier>*</modifier></type><name>taos_fetch_fields</name><parameter_list>(<parameter><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>taos_num_fields</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>TD_RES_TMQ_META</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SReqResultInfo</name> <modifier>*</modifier></type><name>pResInfo</name> <init>= <expr><call><name>tscGetCurResInfo</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><name><name>pResInfo</name><operator>-&gt;</operator><name>userFields</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>taos_query</name><parameter_list>(<parameter><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sql</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>taosQueryImpl</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>taos_query_with_reqid</name><parameter_list>(<parameter><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sql</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>reqid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>taosQueryImplWithReqid</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>reqid</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>TAOS_ROW</name></type> <name>taos_fetch_row</name><parameter_list>(<parameter><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>TD_RES_QUERY</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SRequestObj</name> <modifier>*</modifier></type><name>pRequest</name> <init>= <expr><operator>(</operator><name>SRequestObj</name> <operator>*</operator><operator>)</operator><name>res</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pRequest</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_SQL_RETRIEVE_EMPTY_RESULT</name> <operator>||</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_SQL_INSERT</name> <operator>||</operator>
        <name><name>pRequest</name><operator>-&gt;</operator><name>code</name></name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name> <operator>||</operator> <call><name>taos_num_fields</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>killed</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><call><name>doAsyncFetchRows</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>TD_RES_TMQ</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>TD_RES_TMQ_METADATA</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SMqRspObj</name>      <modifier>*</modifier></type><name>msg</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SMqRspObj</name> <operator>*</operator><operator>)</operator><name>res</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SReqResultInfo</name> <modifier>*</modifier></type><name>pResultInfo</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>resIter</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pResultInfo</name> <operator>=</operator> <call><name>tmqGetNextResInfo</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>pResultInfo</name> <operator>=</operator> <call><name>tmqGetCurResInfo</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>current</name></name> <operator>&lt;</operator> <name><name>pResultInfo</name><operator>-&gt;</operator><name>numOfRows</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>doSetOneRowPtr</name><argument_list>(<argument><expr><name>pResultInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>current</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <return>return <expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>row</name></name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>pResultInfo</name> <operator>=</operator> <call><name>tmqGetNextResInfo</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>pResultInfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>doSetOneRowPtr</name><argument_list>(<argument><expr><name>pResultInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>current</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <return>return <expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>row</name></name></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>TD_RES_TMQ_META</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="line">// assert to avoid un-initialization error</comment>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"invalid result passed to taos_fetch_row"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>taos_print_row</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>TAOS_ROW</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>TAOS_FIELD</name> <modifier>*</modifier></type><name>fields</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_fields</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_fields</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>str</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>TSDB_DATA_NULL_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <switch>switch <condition>(<expr><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>TSDB_DATA_TYPE_TINYINT</name></expr>:</case>
        <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int8_t</name> <operator>*</operator><operator>)</operator><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>TSDB_DATA_TYPE_UTINYINT</name></expr>:</case>
        <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>TSDB_DATA_TYPE_SMALLINT</name></expr>:</case>
        <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>TSDB_DATA_TYPE_USMALLINT</name></expr>:</case>
        <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>TSDB_DATA_TYPE_INT</name></expr>:</case>
        <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>TSDB_DATA_TYPE_UINT</name></expr>:</case>
        <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>:</case>
        <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>TSDB_DATA_TYPE_UBIGINT</name></expr>:</case>
        <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>TSDB_DATA_TYPE_FLOAT</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>float</name></type> <name>fv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>fv</name> <operator>=</operator> <call><name>GET_FLOAT_VAL</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><name>fv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <break>break;</break>

      <case>case <expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>double</name></type> <name>dv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>dv</name> <operator>=</operator> <call><name>GET_DOUBLE_VAL</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"%lf"</literal></expr></argument>, <argument><expr><name>dv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <break>break;</break>

      <case>case <expr><name>TSDB_DATA_TYPE_BINARY</name></expr>:</case>
      <case>case <expr><name>TSDB_DATA_TYPE_NCHAR</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>charLen</name> <init>= <expr><call><name>varDataLen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>charLen</name> <operator>&lt;=</operator> <name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bytes</name> <operator>&amp;&amp;</operator> <name>charLen</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>charLen</name> <operator>&lt;=</operator> <name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bytes</name> <operator>*</operator> <name>TSDB_NCHAR_SIZE</name> <operator>&amp;&amp;</operator> <name>charLen</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>charLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>len</name> <operator>+=</operator> <name>charLen</name></expr>;</expr_stmt>
      </block_content>}</block> <break>break;</break>

      <case>case <expr><name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>:</case>
        <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>TSDB_DATA_TYPE_BOOL</name></expr>:</case>
        <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int8_t</name> <operator>*</operator><operator>)</operator><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></for>
  <expr_stmt><expr><name><name>str</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name> <modifier>*</modifier></type><name>taos_fetch_lengths</name><parameter_list>(<parameter><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>TD_RES_TMQ_META</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SReqResultInfo</name> <modifier>*</modifier></type><name>pResInfo</name> <init>= <expr><call><name>tscGetCurResInfo</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><name><name>pResInfo</name><operator>-&gt;</operator><name>length</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>TAOS_ROW</name> <modifier>*</modifier></type><name>taos_result_block</name><parameter_list>(<parameter><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>TD_RES_TMQ_META</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taos_is_update_query</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SReqResultInfo</name> <modifier>*</modifier></type><name>pResInfo</name> <init>= <expr><call><name>tscGetCurResInfo</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><operator>&amp;</operator><name><name>pResInfo</name><operator>-&gt;</operator><name>row</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// todo intergrate with tDataTypes</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>taos_data_type</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_DATA_TYPE_NULL</name></expr>:</case>
      <return>return <expr><literal type="string">"TSDB_DATA_TYPE_NULL"</literal></expr>;</return>
    <case>case <expr><name>TSDB_DATA_TYPE_BOOL</name></expr>:</case>
      <return>return <expr><literal type="string">"TSDB_DATA_TYPE_BOOL"</literal></expr>;</return>
    <case>case <expr><name>TSDB_DATA_TYPE_TINYINT</name></expr>:</case>
      <return>return <expr><literal type="string">"TSDB_DATA_TYPE_TINYINT"</literal></expr>;</return>
    <case>case <expr><name>TSDB_DATA_TYPE_SMALLINT</name></expr>:</case>
      <return>return <expr><literal type="string">"TSDB_DATA_TYPE_SMALLINT"</literal></expr>;</return>
    <case>case <expr><name>TSDB_DATA_TYPE_INT</name></expr>:</case>
      <return>return <expr><literal type="string">"TSDB_DATA_TYPE_INT"</literal></expr>;</return>
    <case>case <expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>:</case>
      <return>return <expr><literal type="string">"TSDB_DATA_TYPE_BIGINT"</literal></expr>;</return>
    <case>case <expr><name>TSDB_DATA_TYPE_FLOAT</name></expr>:</case>
      <return>return <expr><literal type="string">"TSDB_DATA_TYPE_FLOAT"</literal></expr>;</return>
    <case>case <expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>:</case>
      <return>return <expr><literal type="string">"TSDB_DATA_TYPE_DOUBLE"</literal></expr>;</return>
    <case>case <expr><name>TSDB_DATA_TYPE_VARCHAR</name></expr>:</case>
      <return>return <expr><literal type="string">"TSDB_DATA_TYPE_VARCHAR"</literal></expr>;</return>
      <comment type="line">//    case TSDB_DATA_TYPE_BINARY:          return "TSDB_DATA_TYPE_VARCHAR";</comment>
    <case>case <expr><name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>:</case>
      <return>return <expr><literal type="string">"TSDB_DATA_TYPE_TIMESTAMP"</literal></expr>;</return>
    <case>case <expr><name>TSDB_DATA_TYPE_NCHAR</name></expr>:</case>
      <return>return <expr><literal type="string">"TSDB_DATA_TYPE_NCHAR"</literal></expr>;</return>
    <case>case <expr><name>TSDB_DATA_TYPE_JSON</name></expr>:</case>
      <return>return <expr><literal type="string">"TSDB_DATA_TYPE_JSON"</literal></expr>;</return>
    <default>default:</default>
      <return>return <expr><literal type="string">"UNKNOWN"</literal></expr>;</return>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>taos_get_client_info</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>version</name></expr>;</return> </block_content>}</block></function>

<comment type="line">// return int32_t</comment>
<function><type><name>int</name></type> <name>taos_affected_rows</name><parameter_list>(<parameter><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>TD_RES_TMQ</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>TD_RES_TMQ_META</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>TD_RES_TMQ_METADATA</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SRequestObj</name>    <modifier>*</modifier></type><name>pRequest</name> <init>= <expr><operator>(</operator><name>SRequestObj</name> <operator>*</operator><operator>)</operator><name>res</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SReqResultInfo</name> <modifier>*</modifier></type><name>pResInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>resInfo</name></name></expr></init></decl>;</decl_stmt>
  <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pResInfo</name><operator>-&gt;</operator><name>numOfRows</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// return int64_t</comment>
<function><type><name>int64_t</name></type> <name>taos_affected_rows64</name><parameter_list>(<parameter><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>TD_RES_TMQ</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>TD_RES_TMQ_META</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>TD_RES_TMQ_METADATA</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SRequestObj</name>    <modifier>*</modifier></type><name>pRequest</name> <init>= <expr><operator>(</operator><name>SRequestObj</name> <operator>*</operator><operator>)</operator><name>res</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SReqResultInfo</name> <modifier>*</modifier></type><name>pResInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>resInfo</name></name></expr></init></decl>;</decl_stmt>
  <return>return <expr><name><name>pResInfo</name><operator>-&gt;</operator><name>numOfRows</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>taos_result_precision</name><parameter_list>(<parameter><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>TD_RES_TMQ_META</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_TIME_PRECISION_MILLI</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>TD_RES_QUERY</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SRequestObj</name> <modifier>*</modifier></type><name>pRequest</name> <init>= <expr><operator>(</operator><name>SRequestObj</name> <operator>*</operator><operator>)</operator><name>res</name></expr></init></decl>;</decl_stmt>
    <return>return <expr><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>resInfo</name><operator>.</operator><name>precision</name></name></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>TD_RES_TMQ</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>TD_RES_TMQ_METADATA</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SReqResultInfo</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><call><name>tmqGetCurResInfo</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name><name>info</name><operator>-&gt;</operator><name>precision</name></name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_TIME_PRECISION_MILLI</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>taos_select_db</name><parameter_list>(<parameter><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STscObj</name> <modifier>*</modifier></type><name>pObj</name> <init>= <expr><call><name>acquireTscObj</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name>taos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pObj</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>releaseTscObj</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_TSC_DISCONNECTED</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_TSC_DISCONNECTED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>db</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>releaseTscObj</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_TSC_INVALID_INPUT</name></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>sql</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><call><name>tListLen</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"use %s"</literal></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>pRequest</name> <init>= <expr><call><name>taos_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>code</name> <init>= <expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>releaseTscObj</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taos_stop_query</name><parameter_list>(<parameter><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>TD_RES_TMQ</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>TD_RES_TMQ_META</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>TD_RES_TMQ_METADATA</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SRequestObj</name> <modifier>*</modifier></type><name>pRequest</name> <init>= <expr><operator>(</operator><name>SRequestObj</name> <operator>*</operator><operator>)</operator><name>res</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>killed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfFields</name> <init>= <expr><call><name>taos_num_fields</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="line">// It is not a query, no need to stop.</comment>
  <if_stmt><if>if <condition>(<expr><name>numOfFields</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"request 0x%"</literal> <name>PRIx64</name> <literal type="string">" no need to be killed since not query"</literal></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>schedulerFreeJob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>queryJob</name></name></expr></argument>, <argument><expr><name>TSDB_CODE_TSC_QUERY_KILLED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"request %"</literal> <name>PRIx64</name> <literal type="string">" killed"</literal></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>taos_is_null</name><parameter_list>(<parameter><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>col</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>TD_RES_TMQ_META</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SReqResultInfo</name> <modifier>*</modifier></type><name>pResultInfo</name> <init>= <expr><call><name>tscGetCurResInfo</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>col</name> <operator>&gt;=</operator> <name><name>pResultInfo</name><operator>-&gt;</operator><name>numOfCols</name></name> <operator>||</operator> <name>col</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>row</name> <operator>&gt;=</operator> <name><name>pResultInfo</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>||</operator> <name>row</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SResultColumn</name> <modifier>*</modifier></type><name>pCol</name> <init>= <expr><operator>&amp;</operator><name><name>pResultInfo</name><operator>-&gt;</operator><name>pCol</name><index>[<expr><name>col</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>col</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>(</operator><name><name>pCol</name><operator>-&gt;</operator><name>offset</name><index>[<expr><name>row</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>taos_is_update_query</name><parameter_list>(<parameter><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>taos_num_fields</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return> </block_content>}</block></function>

<function><type><name>int</name></type> <name>taos_fetch_block</name><parameter_list>(<parameter><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>TAOS_ROW</name> <modifier>*</modifier></type><name>rows</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfRows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <comment type="block">/*int32_t code = */</comment> <expr_stmt><expr><call><name>taos_fetch_block_s</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numOfRows</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>numOfRows</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>taos_fetch_block_s</name><parameter_list>(<parameter><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>numOfRows</name></decl></parameter>, <parameter><decl><type><name>TAOS_ROW</name> <modifier>*</modifier></type><name>rows</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>TD_RES_TMQ_META</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>TD_RES_QUERY</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SRequestObj</name> <modifier>*</modifier></type><name>pRequest</name> <init>= <expr><operator>(</operator><name>SRequestObj</name> <operator>*</operator><operator>)</operator><name>res</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>rows</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>numOfRows</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pRequest</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_SQL_RETRIEVE_EMPTY_RESULT</name> <operator>||</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_SQL_INSERT</name> <operator>||</operator>
        <name><name>pRequest</name><operator>-&gt;</operator><name>code</name></name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name> <operator>||</operator> <call><name>taos_num_fields</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>doAsyncFetchRows</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// TODO refactor</comment>
    <decl_stmt><decl><type><name>SReqResultInfo</name> <modifier>*</modifier></type><name>pResultInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>resInfo</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name><name>pResultInfo</name><operator>-&gt;</operator><name>numOfRows</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>rows</name><operator>)</operator> <operator>=</operator> <name><name>pResultInfo</name><operator>-&gt;</operator><name>row</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>numOfRows</name><operator>)</operator> <operator>=</operator> <name><name>pResultInfo</name><operator>-&gt;</operator><name>numOfRows</name></name></expr>;</expr_stmt>
    <return>return <expr><name><name>pRequest</name><operator>-&gt;</operator><name>code</name></name></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>TD_RES_TMQ</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>TD_RES_TMQ_METADATA</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SReqResultInfo</name> <modifier>*</modifier></type><name>pResultInfo</name> <init>= <expr><call><name>tmqGetNextResInfo</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pResultInfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name><name>pResultInfo</name><operator>-&gt;</operator><name>numOfRows</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>rows</name><operator>)</operator> <operator>=</operator> <name><name>pResultInfo</name><operator>-&gt;</operator><name>row</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>numOfRows</name><operator>)</operator> <operator>=</operator> <name><name>pResultInfo</name><operator>-&gt;</operator><name>numOfRows</name></name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>taos_fetch_raw_block</name><parameter_list>(<parameter><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>numOfRows</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>pData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>TD_RES_TMQ_META</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>TD_RES_TMQ</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>TD_RES_TMQ_METADATA</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SReqResultInfo</name> <modifier>*</modifier></type><name>pResultInfo</name> <init>= <expr><call><name>tmqGetNextResInfo</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pResultInfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>(</operator><operator>*</operator><name>numOfRows</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name><name>pResultInfo</name><operator>-&gt;</operator><name>numOfRows</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>numOfRows</name><operator>)</operator> <operator>=</operator> <name><name>pResultInfo</name><operator>-&gt;</operator><name>numOfRows</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>pData</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>pResultInfo</name><operator>-&gt;</operator><name>pData</name></name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SRequestObj</name> <modifier>*</modifier></type><name>pRequest</name> <init>= <expr><operator>(</operator><name>SRequestObj</name> <operator>*</operator><operator>)</operator><name>res</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pRequest</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_SQL_RETRIEVE_EMPTY_RESULT</name> <operator>||</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_SQL_INSERT</name> <operator>||</operator>
      <name><name>pRequest</name><operator>-&gt;</operator><name>code</name></name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name> <operator>||</operator> <call><name>taos_num_fields</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>doAsyncFetchRows</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SReqResultInfo</name> <modifier>*</modifier></type><name>pResultInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>resInfo</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name><name>pResultInfo</name><operator>-&gt;</operator><name>numOfRows</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><operator>*</operator><name>numOfRows</name><operator>)</operator> <operator>=</operator> <name><name>pResultInfo</name><operator>-&gt;</operator><name>numOfRows</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><operator>*</operator><name>pData</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>pResultInfo</name><operator>-&gt;</operator><name>pData</name></name></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name> <modifier>*</modifier></type><name>taos_get_column_data_offset</name><parameter_list>(<parameter><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>columnIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>TD_RES_TMQ_META</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfFields</name> <init>= <expr><call><name>taos_num_fields</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>columnIndex</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>columnIndex</name> <operator>&gt;=</operator> <name>numOfFields</name> <operator>||</operator> <name>numOfFields</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SReqResultInfo</name> <modifier>*</modifier></type><name>pResInfo</name> <init>= <expr><call><name>tscGetCurResInfo</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TAOS_FIELD</name>     <modifier>*</modifier></type><name>pField</name> <init>= <expr><operator>&amp;</operator><name><name>pResInfo</name><operator>-&gt;</operator><name>userFields</name><index>[<expr><name>columnIndex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pField</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name><name>pResInfo</name><operator>-&gt;</operator><name>pCol</name><index>[<expr><name>columnIndex</name></expr>]</index></name><operator>.</operator><name>offset</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>taos_validate_sql</name><parameter_list>(<parameter><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sql</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>pObj</name> <init>= <expr><call><name>taosQueryImpl</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taos_reset_current_db</name><parameter_list>(<parameter><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STscObj</name> <modifier>*</modifier></type><name>pTscObj</name> <init>= <expr><call><name>acquireTscObj</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name>taos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTscObj</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_TSC_DISCONNECTED</name></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>resetConnectDB</name><argument_list>(<argument><expr><name>pTscObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>releaseTscObj</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>taos_get_server_info</name><parameter_list>(<parameter><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STscObj</name> <modifier>*</modifier></type><name>pTscObj</name> <init>= <expr><call><name>acquireTscObj</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name>taos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTscObj</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_TSC_DISCONNECTED</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>releaseTscObj</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name><name>pTscObj</name><operator>-&gt;</operator><name>sDetailVer</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>destoryTablesReq</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STablesReq</name> <modifier>*</modifier></type><name>pRes</name> <init>= <expr><operator>(</operator><name>STablesReq</name> <operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pRes</name><operator>-&gt;</operator><name>pTables</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>destoryCatalogReq</name><parameter_list>(<parameter><decl><type><name>SCatalogReq</name> <modifier>*</modifier></type><name>pCatalogReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pCatalogReq</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pCatalogReq</name><operator>-&gt;</operator><name>pDbVgroup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pCatalogReq</name><operator>-&gt;</operator><name>pDbCfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pCatalogReq</name><operator>-&gt;</operator><name>pDbInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name><name>pCatalogReq</name><operator>-&gt;</operator><name>pTableMeta</name></name></expr></argument>, <argument><expr><name>destoryTablesReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name><name>pCatalogReq</name><operator>-&gt;</operator><name>pTableHash</name></name></expr></argument>, <argument><expr><name>destoryTablesReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pCatalogReq</name><operator>-&gt;</operator><name>pUdf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pCatalogReq</name><operator>-&gt;</operator><name>pIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pCatalogReq</name><operator>-&gt;</operator><name>pUser</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pCatalogReq</name><operator>-&gt;</operator><name>pTableIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pCatalogReq</name><operator>-&gt;</operator><name>pTableCfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pCatalogReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>destorySqlCallbackWrapper</name><parameter_list>(<parameter><decl><type><name>SSqlCallbackWrapper</name> <modifier>*</modifier></type><name>pWrapper</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pWrapper</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>destoryCatalogReq</name><argument_list>(<argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>pCatalogReq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>qDestroyParseContext</name><argument_list>(<argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>pParseCtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>doAsyncQueryFromAnalyse</name><parameter_list>(<parameter><decl><type><name>SMetaData</name> <modifier>*</modifier></type><name>pResultMeta</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSqlCallbackWrapper</name> <modifier>*</modifier></type><name>pWrapper</name> <init>= <expr><operator>(</operator><name>SSqlCallbackWrapper</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRequestObj</name>         <modifier>*</modifier></type><name>pRequest</name> <init>= <expr><name><name>pWrapper</name><operator>-&gt;</operator><name>pRequest</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQuery</name>              <modifier>*</modifier></type><name>pQuery</name> <init>= <expr><name><name>pRequest</name><operator>-&gt;</operator><name>pQuery</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>metric</name><operator>.</operator><name>ctgEnd</name></name> <operator>=</operator> <call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"0x%"</literal> <name>PRIx64</name> <literal type="string">" start to semantic analysis, reqId:0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>self</name></name></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>qAnalyseSqlSemantic</name><argument_list>(<argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>pParseCtx</name></name></expr></argument>, <argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>pCatalogReq</name></name></expr></argument>, <argument><expr><name>pResultMeta</name></expr></argument>, <argument><expr><name>pQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>stableQuery</name></name> <operator>=</operator> <name><name>pQuery</name><operator>-&gt;</operator><name>stableQuery</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>stmtType</name></name> <operator>=</operator> <name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>metric</name><operator>.</operator><name>semanticEnd</name></name> <operator>=</operator> <call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pQuery</name><operator>-&gt;</operator><name>haveResultSet</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>setResSchemaInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>resInfo</name></name></expr></argument>, <argument><expr><name><name>pQuery</name><operator>-&gt;</operator><name>pResSchema</name></name></expr></argument>, <argument><expr><name><name>pQuery</name><operator>-&gt;</operator><name>numOfResCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>setResPrecision</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>resInfo</name></name></expr></argument>, <argument><expr><name><name>pQuery</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>TSWAP</name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>dbList</name></name></expr></argument>, <argument><expr><operator>(</operator><name>pQuery</name><operator>)</operator><operator>-&gt;</operator><name>pDbList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSWAP</name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>tableList</name></name></expr></argument>, <argument><expr><operator>(</operator><name>pQuery</name><operator>)</operator><operator>-&gt;</operator><name>pTableList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSWAP</name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>targetTableList</name></name></expr></argument>, <argument><expr><operator>(</operator><name>pQuery</name><operator>)</operator><operator>-&gt;</operator><name>pTargetTableList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>double</name></type> <name>el</name> <init>= <expr><operator>(</operator><name><name>pRequest</name><operator>-&gt;</operator><name>metric</name><operator>.</operator><name>semanticEnd</name></name> <operator>-</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>metric</name><operator>.</operator><name>ctgEnd</name></name><operator>)</operator> <operator>/</operator> <literal type="number">1000.0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"0x%"</literal> <name>PRIx64</name> <literal type="string">" analysis semantics completed, start async query, elapsed time:%.2f ms, reqId:0x%"</literal> <name>PRIx64</name></expr></argument>,
             <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>self</name></name></expr></argument>, <argument><expr><name>el</name></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>launchAsyncQuery</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>, <argument><expr><name>pQuery</name></expr></argument>, <argument><expr><name>pResultMeta</name></expr></argument>, <argument><expr><name>pWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>destorySqlCallbackWrapper</name><argument_list>(<argument><expr><name>pWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>qDestroyQuery</name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>pQuery</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>pQuery</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>NEED_CLIENT_HANDLE_ERROR</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"0x%"</literal> <name>PRIx64</name> <literal type="string">" client retry to handle the error, code:%d - %s, tryCount:%d, reqId:0x%"</literal> <name>PRIx64</name></expr></argument>,
               <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>self</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>retry</name></name></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>prevCode</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>doAsyncQuery</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// return to app directly</comment>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"0x%"</literal> <name>PRIx64</name> <literal type="string">" error occurs, code:%s, return to user app, reqId:0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>self</name></name></expr></argument>,
             <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>queryFp</name></name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>param</name></name></expr></argument>, <argument><expr><name>pRequest</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getAllMetaAsync</name><parameter_list>(<parameter><decl><type><name>SSqlCallbackWrapper</name> <modifier>*</modifier></type><name>pWrapper</name></decl></parameter>, <parameter><decl><type><name>catalogCallback</name></type> <name>fp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SRequestConnInfo</name></type> <name>conn</name> <init>= <expr><block>{<expr><operator>.</operator><name>pTrans</name> <operator>=</operator> <name><name>pWrapper</name><operator>-&gt;</operator><name>pParseCtx</name><operator>-&gt;</operator><name>pTransporter</name></name></expr>,
                           <expr><operator>.</operator><name>requestId</name> <operator>=</operator> <name><name>pWrapper</name><operator>-&gt;</operator><name>pParseCtx</name><operator>-&gt;</operator><name>requestId</name></name></expr>,
                           <expr><operator>.</operator><name>requestObjRefId</name> <operator>=</operator> <name><name>pWrapper</name><operator>-&gt;</operator><name>pParseCtx</name><operator>-&gt;</operator><name>requestRid</name></name></expr>,
                           <expr><operator>.</operator><name>mgmtEps</name> <operator>=</operator> <name><name>pWrapper</name><operator>-&gt;</operator><name>pParseCtx</name><operator>-&gt;</operator><name>mgmtEpSet</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>pRequest</name><operator>-&gt;</operator><name>metric</name><operator>.</operator><name>ctgStart</name></name> <operator>=</operator> <call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>catalogAsyncGetAllMeta</name><argument_list>(<argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>pParseCtx</name><operator>-&gt;</operator><name>pCatalog</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conn</name></expr></argument>, <argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>pCatalogReq</name></name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>pWrapper</name></expr></argument>,
                                <argument><expr><operator>&amp;</operator><name><name>pWrapper</name><operator>-&gt;</operator><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>queryJob</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>doAsyncQueryFromParse</name><parameter_list>(<parameter><decl><type><name>SMetaData</name> <modifier>*</modifier></type><name>pResultMeta</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>code</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>phaseAsyncQuery</name><parameter_list>(<parameter><decl><type><name>SSqlCallbackWrapper</name> <modifier>*</modifier></type><name>pWrapper</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name><name>pWrapper</name><operator>-&gt;</operator><name>pRequest</name><operator>-&gt;</operator><name>pQuery</name><operator>-&gt;</operator><name>execStage</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>QUERY_EXEC_STAGE_PARSE</name></expr>:</case> <block>{<block_content>
      <comment type="line">// continue parse after get metadata</comment>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>getAllMetaAsync</name><argument_list>(<argument><expr><name>pWrapper</name></expr></argument>, <argument><expr><name>doAsyncQueryFromParse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>QUERY_EXEC_STAGE_ANALYSE</name></expr>:</case> <block>{<block_content>
      <comment type="line">// analysis after get metadata</comment>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>getAllMetaAsync</name><argument_list>(<argument><expr><name>pWrapper</name></expr></argument>, <argument><expr><name>doAsyncQueryFromAnalyse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>QUERY_EXEC_STAGE_SCHEDULE</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>launchAsyncQuery</name><argument_list>(<argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>pRequest</name></name></expr></argument>, <argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>pRequest</name><operator>-&gt;</operator><name>pQuery</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>doAsyncQueryFromParse</name><parameter_list>(<parameter><decl><type><name>SMetaData</name> <modifier>*</modifier></type><name>pResultMeta</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSqlCallbackWrapper</name> <modifier>*</modifier></type><name>pWrapper</name> <init>= <expr><operator>(</operator><name>SSqlCallbackWrapper</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRequestObj</name>         <modifier>*</modifier></type><name>pRequest</name> <init>= <expr><name><name>pWrapper</name><operator>-&gt;</operator><name>pRequest</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQuery</name>              <modifier>*</modifier></type><name>pQuery</name> <init>= <expr><name><name>pRequest</name><operator>-&gt;</operator><name>pQuery</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>metric</name><operator>.</operator><name>ctgEnd</name></name> <operator>=</operator> <call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>qDebug</name><argument_list>(<argument><expr><literal type="string">"0x%"</literal> <name>PRIx64</name> <literal type="string">" start to continue parse, reqId:0x%"</literal> <name>PRIx64</name> <literal type="string">", code:%s"</literal></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>self</name></name></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr></argument>,
         <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <comment type="line">//pWrapper-&gt;pCatalogReq-&gt;forceUpdate = false;</comment>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>qContinueParseSql</name><argument_list>(<argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>pParseCtx</name></name></expr></argument>, <argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>pCatalogReq</name></name></expr></argument>, <argument><expr><name>pResultMeta</name></expr></argument>, <argument><expr><name>pQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>phaseAsyncQuery</name><argument_list>(<argument><expr><name>pWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"0x%"</literal> <name>PRIx64</name> <literal type="string">" error happens, code:%d - %s, reqId:0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>pRequest</name><operator>-&gt;</operator><name>self</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>,
             <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>destorySqlCallbackWrapper</name><argument_list>(<argument><expr><name>pWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>queryFp</name></name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>param</name></name></expr></argument>, <argument><expr><name>pRequest</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>continueInsertFromCsv</name><parameter_list>(<parameter><decl><type><name>SSqlCallbackWrapper</name> <modifier>*</modifier></type><name>pWrapper</name></decl></parameter>, <parameter><decl><type><name>SRequestObj</name> <modifier>*</modifier></type><name>pRequest</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>qParseSqlSyntax</name><argument_list>(<argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>pParseCtx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRequest</name><operator>-&gt;</operator><name>pQuery</name></name></expr></argument>, <argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>pCatalogReq</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>phaseAsyncQuery</name><argument_list>(<argument><expr><name>pWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"0x%"</literal> <name>PRIx64</name> <literal type="string">" error happens, code:%d - %s, reqId:0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>pRequest</name><operator>-&gt;</operator><name>self</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>,
             <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>destorySqlCallbackWrapper</name><argument_list>(<argument><expr><name>pWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>pRequest</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pWrapper</name><operator>-&gt;</operator><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>queryFp</name></name><argument_list>(<argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>param</name></name></expr></argument>, <argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>pRequest</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taos_query_a</name><parameter_list>(<parameter><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sql</name></decl></parameter>, <parameter><decl><type><name>__taos_async_fn_t</name></type> <name>fp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>connId</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name>taos</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosAsyncQueryImpl</name><argument_list>(<argument><expr><name>connId</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taos_query_a_with_reqid</name><parameter_list>(<parameter><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sql</name></decl></parameter>, <parameter><decl><type><name>__taos_async_fn_t</name></type> <name>fp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>reqid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>connId</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name>taos</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosAsyncQueryImplWithReqid</name><argument_list>(<argument><expr><name>connId</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>reqid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>createParseContext</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SRequestObj</name> <modifier>*</modifier></type><name>pRequest</name></decl></parameter>, <parameter><decl><type><name>SParseContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>pCxt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>STscObj</name> <modifier>*</modifier></type><name>pTscObj</name> <init>= <expr><name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><operator>*</operator><name>pCxt</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SParseContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>pCxt</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><operator>*</operator><name>pCxt</name> <operator>=</operator> <operator>(</operator><name>SParseContext</name><operator>)</operator><block>{<expr><operator>.</operator><name>requestId</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr>,
                           <expr><operator>.</operator><name>requestRid</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>self</name></name></expr>,
                           <expr><operator>.</operator><name>acctId</name> <operator>=</operator> <name><name>pTscObj</name><operator>-&gt;</operator><name>acctId</name></name></expr>,
                           <expr><operator>.</operator><name>db</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>pDb</name></name></expr>,
                           <expr><operator>.</operator><name>topicQuery</name> <operator>=</operator> <name>false</name></expr>,
                           <expr><operator>.</operator><name>pSql</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>sqlstr</name></name></expr>,
                           <expr><operator>.</operator><name>sqlLen</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>sqlLen</name></name></expr>,
                           <expr><operator>.</operator><name>pMsg</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>msgBuf</name></name></expr>,
                           <expr><operator>.</operator><name>msgLen</name> <operator>=</operator> <name>ERROR_MSG_BUF_DEFAULT_SIZE</name></expr>,
                           <expr><operator>.</operator><name>pTransporter</name> <operator>=</operator> <name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>pTransporter</name></name></expr>,
                           <expr><operator>.</operator><name>pStmtCb</name> <operator>=</operator> <name>NULL</name></expr>,
                           <expr><operator>.</operator><name>pUser</name> <operator>=</operator> <name><name>pTscObj</name><operator>-&gt;</operator><name>user</name></name></expr>,
                           <expr><operator>.</operator><name>schemalessType</name> <operator>=</operator> <name><name>pTscObj</name><operator>-&gt;</operator><name>schemalessType</name></name></expr>,
                           <expr><operator>.</operator><name>isSuperUser</name> <operator>=</operator> <operator>(</operator><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name>TSDB_DEFAULT_USER</name></expr></argument>)</argument_list></call><operator>)</operator></expr>,
                           <expr><operator>.</operator><name>enableSysInfo</name> <operator>=</operator> <name><name>pTscObj</name><operator>-&gt;</operator><name>sysInfo</name></name></expr>,
                           <expr><operator>.</operator><name>async</name> <operator>=</operator> <name>true</name></expr>,
                           <expr><operator>.</operator><name>svrVer</name> <operator>=</operator> <name><name>pTscObj</name><operator>-&gt;</operator><name>sVer</name></name></expr>,
                           <expr><operator>.</operator><name>nodeOffline</name> <operator>=</operator> <operator>(</operator><name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>onlineDnodes</name></name> <operator>&lt;</operator> <name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>totalDnodes</name></name><operator>)</operator></expr>,
                           <expr><operator>.</operator><name>allocatorId</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>allocatorRefId</name></name></expr>}</block></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>doAsyncQuery</name><parameter_list>(<parameter><decl><type><name>SRequestObj</name> <modifier>*</modifier></type><name>pRequest</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>updateMetaForce</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STscObj</name>             <modifier>*</modifier></type><name>pTscObj</name> <init>= <expr><name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSqlCallbackWrapper</name> <modifier>*</modifier></type><name>pWrapper</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>              <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pRequest</name><operator>-&gt;</operator><name>retry</name></name><operator>++</operator> <operator>&gt;</operator> <name>REQUEST_TOTAL_EXEC_TIMES</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>prevCode</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"call sync query cb with code: %s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>queryFp</name></name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>param</name></name></expr></argument>, <argument><expr><name>pRequest</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pWrapper</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSqlCallbackWrapper</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pWrapper</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>pRequest</name></name> <operator>=</operator> <name>pRequest</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>createParseContext</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWrapper</name><operator>-&gt;</operator><name>pParseCtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>pParseCtx</name><operator>-&gt;</operator><name>mgmtEpSet</name></name> <operator>=</operator> <call><name>getEpSet_s</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>mgmtEp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogGetHandle</name><argument_list>(<argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>clusterId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWrapper</name><operator>-&gt;</operator><name>pParseCtx</name><operator>-&gt;</operator><name>pCatalog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>metric</name><operator>.</operator><name>syntaxStart</name></name> <operator>=</operator> <call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>pCatalogReq</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCatalogReq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pWrapper</name><operator>-&gt;</operator><name>pCatalogReq</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>pCatalogReq</name><operator>-&gt;</operator><name>forceUpdate</name></name> <operator>=</operator> <name>updateMetaForce</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>pCatalogReq</name><operator>-&gt;</operator><name>qNodeRequired</name></name> <operator>=</operator> <call><name>qnodeRequired</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>qParseSqlSyntax</name><argument_list>(<argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>pParseCtx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRequest</name><operator>-&gt;</operator><name>pQuery</name></name></expr></argument>, <argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>pCatalogReq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>metric</name><operator>.</operator><name>syntaxEnd</name></name> <operator>=</operator> <call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>updateMetaForce</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SAppClusterSummary</name> <modifier>*</modifier></type><name>pActivity</name> <init>= <expr><operator>&amp;</operator><name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>summary</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_INSERT_STMT</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>atomic_add_fetch_64</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pActivity</name><operator>-&gt;</operator><name>numOfInsertsReq</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>QUERY_NODE_SELECT_STMT</name> <operator>==</operator> <call><name>nodeType</name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>atomic_add_fetch_64</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pActivity</name><operator>-&gt;</operator><name>numOfQueryReq</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>phaseAsyncQuery</name><argument_list>(<argument><expr><name>pWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"0x%"</literal> <name>PRIx64</name> <literal type="string">" error happens, code:%d - %s, reqId:0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>self</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>,
             <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>destorySqlCallbackWrapper</name><argument_list>(<argument><expr><name>pWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>qDestroyQuery</name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>pQuery</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>pQuery</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>NEED_CLIENT_HANDLE_ERROR</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"0x%"</literal> <name>PRIx64</name> <literal type="string">" client retry to handle the error, code:%d - %s, tryCount:%d, reqId:0x%"</literal> <name>PRIx64</name></expr></argument>,
               <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>self</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>retry</name></name></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>prevCode</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>doAsyncQuery</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>queryFp</name></name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>param</name></name></expr></argument>, <argument><expr><name>pRequest</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fetchCallback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pResult</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SRequestObj</name> <modifier>*</modifier></type><name>pRequest</name> <init>= <expr><operator>(</operator><name>SRequestObj</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SReqResultInfo</name> <modifier>*</modifier></type><name>pResultInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>resInfo</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>metric</name><operator>.</operator><name>resultReady</name></name> <operator>=</operator> <call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"0x%"</literal> <name>PRIx64</name> <literal type="string">" enter scheduler fetch cb, code:%d - %s, reqId:0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>self</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>,
           <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <name>pResult</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>fetchFp</name></name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>param</name></name></expr></argument>, <argument><expr><name>pRequest</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pRequest</name><operator>-&gt;</operator><name>code</name></name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>fetchFp</name></name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>param</name></name></expr></argument>, <argument><expr><name>pRequest</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator>
      <call><name>setQueryResultFromRsp</name><argument_list>(<argument><expr><name>pResultInfo</name></expr></argument>, <argument><expr><operator>(</operator><name>SRetrieveTableRsp</name> <operator>*</operator><operator>)</operator><name><name>pResultInfo</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>convertUcs4</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pRequest</name><operator>-&gt;</operator><name>code</name></name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"0x%"</literal> <name>PRIx64</name> <literal type="string">" fetch results failed, code:%s, reqId:0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>self</name></name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>,
             <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"0x%"</literal> <name>PRIx64</name> <literal type="string">" fetch results, numOfRows:%"</literal> <name>PRId64</name> <literal type="string">" total Rows:%"</literal> <name>PRId64</name> <literal type="string">", complete:%d, reqId:0x%"</literal> <name>PRIx64</name></expr></argument>,
             <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>self</name></name></expr></argument>, <argument><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></argument>, <argument><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>totalRows</name></name></expr></argument>, <argument><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>completed</name></name></expr></argument>,
             <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>STscObj</name>            <modifier>*</modifier></type><name>pTscObj</name> <init>= <expr><name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SAppClusterSummary</name> <modifier>*</modifier></type><name>pActivity</name> <init>= <expr><operator>&amp;</operator><name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>summary</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>atomic_add_fetch_64</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pActivity</name><operator>-&gt;</operator><name>fetchBytes</name></name></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>resInfo</name><operator>.</operator><name>payloadLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>fetchFp</name></name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>param</name></name></expr></argument>, <argument><expr><name>pRequest</name></expr></argument>, <argument><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taos_fetch_rows_a</name><parameter_list>(<parameter><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>__taos_async_fn_t</name></type> <name>fp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>res</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>fp</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>TD_RES_QUERY</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SRequestObj</name> <modifier>*</modifier></type><name>pRequest</name> <init>= <expr><name>res</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>fetchFp</name></name> <operator>=</operator> <name>fp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>param</name></name> <operator>=</operator> <name>param</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SReqResultInfo</name> <modifier>*</modifier></type><name>pResultInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>resInfo</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// this query has no results or error exists, return directly</comment>
  <if_stmt><if>if <condition>(<expr><call><name>taos_num_fields</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>code</name></name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>fetchFp</name></name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>pRequest</name></expr></argument>, <argument><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// all data has returned to App already, no need to try again</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>completed</name></name></expr>)</condition> <block>{<block_content>
    <comment type="line">// it is a local executed query, no need to do async fetch</comment>
    <if_stmt><if>if <condition>(<expr><name>QUERY_EXEC_MODE_SCHEDULE</name> <operator>!=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>execMode</name></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>localResultFetched</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>localResultFetched</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>fetchFp</name></name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>pRequest</name></expr></argument>, <argument><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>numOfRows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSchedulerReq</name></type> <name>req</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>syncReq</name> <operator>=</operator> <name>false</name></expr>,
      <expr><operator>.</operator><name>fetchFp</name> <operator>=</operator> <name>fetchCallback</name></expr>,
      <expr><operator>.</operator><name>cbParam</name> <operator>=</operator> <name>pRequest</name></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>schedulerFetchRows</name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>queryJob</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taos_fetch_raw_block_a</name><parameter_list>(<parameter><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>__taos_async_fn_t</name></type> <name>fp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>res</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>fp</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>TD_RES_QUERY</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SRequestObj</name>    <modifier>*</modifier></type><name>pRequest</name> <init>= <expr><name>res</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SReqResultInfo</name> <modifier>*</modifier></type><name>pResultInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>resInfo</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// set the current block is all consumed</comment>
  <expr_stmt><expr><name><name>pResultInfo</name><operator>-&gt;</operator><name>convertUcs4</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

  <comment type="line">// it is a local executed query, no need to do async fetch</comment>
  <expr_stmt><expr><call><name>taos_fetch_rows_a</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>taos_get_raw_block</name><parameter_list>(<parameter><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>res</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>TD_RES_QUERY</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SRequestObj</name> <modifier>*</modifier></type><name>pRequest</name> <init>= <expr><name>res</name></expr></init></decl>;</decl_stmt>

  <return>return <expr><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>resInfo</name><operator>.</operator><name>pData</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>taos_get_db_route_info</name><parameter_list>(<parameter><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>TAOS_DB_ROUTE_INFO</name> <modifier>*</modifier></type><name>dbInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>taos</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_TSC_DISCONNECTED</name></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>db</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>dbInfo</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"invalid input param, db:%p, dbInfo:%p"</literal></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>dbInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_TSC_INVALID_INPUT</name></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type>      <name>connId</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name>taos</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRequestObj</name> <modifier>*</modifier></type><name>pRequest</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>        <modifier>*</modifier></type><name>sql</name> <init>= <expr><literal type="string">"taos_get_db_route_info"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>code</name> <init>= <expr><call><name>buildRequest</name><argument_list>(<argument><expr><name>connId</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pRequest</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STscObj</name>  <modifier>*</modifier></type><name>pTscObj</name> <init>= <expr><name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCatalog</name> <modifier>*</modifier></type><name>pCtg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogGetHandle</name><argument_list>(<argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>clusterId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCtg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SRequestConnInfo</name></type> <name>conn</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>pTrans</name> <operator>=</operator> <name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>pTransporter</name></name></expr>, <expr><operator>.</operator><name>requestId</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr>, <expr><operator>.</operator><name>requestObjRefId</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>self</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>conn</name><operator>.</operator><name>mgmtEps</name></name> <operator>=</operator> <call><name>getEpSet_s</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>mgmtEp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>dbFName</name><index>[<expr><name>TSDB_DB_FNAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>dbFName</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dbFName</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d.%s"</literal></expr></argument>, <argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>acctId</name></name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogGetDBVgInfo</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conn</name></expr></argument>, <argument><expr><name>dbFName</name></expr></argument>, <argument><expr><name>dbInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>destroyRequest</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>taos_get_table_vgId</name><parameter_list>(<parameter><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>vgId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>taos</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_TSC_DISCONNECTED</name></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>db</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>table</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>vgId</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"invalid input param, db:%p, table:%p, vgId:%p"</literal></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>vgId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_TSC_INVALID_INPUT</name></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type>      <name>connId</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name>taos</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRequestObj</name> <modifier>*</modifier></type><name>pRequest</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>        <modifier>*</modifier></type><name>sql</name> <init>= <expr><literal type="string">"taos_get_table_vgId"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>code</name> <init>= <expr><call><name>buildRequest</name><argument_list>(<argument><expr><name>connId</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pRequest</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>syncQuery</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>STscObj</name>  <modifier>*</modifier></type><name>pTscObj</name> <init>= <expr><name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCatalog</name> <modifier>*</modifier></type><name>pCtg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogGetHandle</name><argument_list>(<argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>clusterId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCtg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SRequestConnInfo</name></type> <name>conn</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>pTrans</name> <operator>=</operator> <name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>pTransporter</name></name></expr>, <expr><operator>.</operator><name>requestId</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr>, <expr><operator>.</operator><name>requestObjRefId</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>self</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>conn</name><operator>.</operator><name>mgmtEps</name></name> <operator>=</operator> <call><name>getEpSet_s</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>mgmtEp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SName</name></type> <name>tableName</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>toName</name><argument_list>(<argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>acctId</name></name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SVgroupInfo</name></type> <name>vgInfo</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogGetTableHashVgroup</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tableName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vgInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>vgId</name> <operator>=</operator> <name><name>vgInfo</name><operator>.</operator><name>vgId</name></name></expr>;</expr_stmt>

<label><name>_return</name>:</label>

  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>destroyRequest</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>taos_load_table_info</name><parameter_list>(<parameter><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tableNameList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>taos</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_TSC_DISCONNECTED</name></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type>       <name>connId</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name>taos</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>MAX_TABLE_NAME_LENGTH</name> <init>= <expr><literal type="number">12</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></init></decl>;</decl_stmt>  <comment type="line">// 12MB list</comment>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRequestObj</name>  <modifier>*</modifier></type><name>pRequest</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCatalogReq</name></type>   <name>catalogReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>tableNameList</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>length</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>tableNameList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>length</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>length</name> <operator>&gt;</operator> <name>MAX_TABLE_NAME_LENGTH</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"tableNameList too long, length:%d, maximum allowed:%d"</literal></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>MAX_TABLE_NAME_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_TSC_INVALID_OPERATION</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sql</name> <init>= <expr><literal type="string">"taos_load_table_info"</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildRequest</name><argument_list>(<argument><expr><name>connId</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pRequest</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STscObj</name> <modifier>*</modifier></type><name>pTscObj</name> <init>= <expr><name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>transferTableNameList</name><argument_list>(<argument><expr><name>tableNameList</name></expr></argument>, <argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>acctId</name></name></expr></argument>, <argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>catalogReq</name><operator>.</operator><name>pTableMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SCatalog</name> <modifier>*</modifier></type><name>pCtg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogGetHandle</name><argument_list>(<argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>clusterId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCtg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SRequestConnInfo</name></type> <name>conn</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>pTrans</name> <operator>=</operator> <name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>pTransporter</name></name></expr>, <expr><operator>.</operator><name>requestId</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr>, <expr><operator>.</operator><name>requestObjRefId</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>self</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>conn</name><operator>.</operator><name>mgmtEps</name></name> <operator>=</operator> <call><name>getEpSet_s</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>mgmtEp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogAsyncGetAllMeta</name><argument_list>(<argument><expr><name>pCtg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>catalogReq</name></expr></argument>, <argument><expr><name>syncCatalogFn</name></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>param</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_return</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSyncQueryParam</name> <modifier>*</modifier></type><name>pParam</name> <init>= <expr><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>param</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tsem_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pParam</name><operator>-&gt;</operator><name>sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_return</name>:</label>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>catalogReq</name><operator>.</operator><name>pTableMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>destroyRequest</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>taos_stmt_init</name><parameter_list>(<parameter><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STscObj</name> <modifier>*</modifier></type><name>pObj</name> <init>= <expr><call><name>acquireTscObj</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name>taos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pObj</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"invalid parameter for %s"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_TSC_DISCONNECTED</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>pStmt</name> <init>= <expr><call><name>stmtInit</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>releaseTscObj</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>taos_stmt_init_with_reqid</name><parameter_list>(<parameter><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>reqid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STscObj</name> <modifier>*</modifier></type><name>pObj</name> <init>= <expr><call><name>acquireTscObj</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name>taos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pObj</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"invalid parameter for %s"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_TSC_DISCONNECTED</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>pStmt</name> <init>= <expr><call><name>stmtInit</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>reqid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>releaseTscObj</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>taos_stmt_prepare</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sql</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>stmt</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>sql</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"NULL parameter for %s"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>stmtPrepare</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>taos_stmt_set_tbname_tags</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>TAOS_MULTI_BIND</name> <modifier>*</modifier></type><name>tags</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>stmt</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"NULL parameter for %s"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>stmtSetTbName</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>tags</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>stmtSetTbTags</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>tags</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>taos_stmt_set_tbname</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>stmt</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"NULL parameter for %s"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>stmtSetTbName</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>taos_stmt_set_tags</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>TAOS_MULTI_BIND</name> <modifier>*</modifier></type><name>tags</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>stmt</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>tags</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"NULL parameter for %s"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>stmtSetTbTags</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>tags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>taos_stmt_set_sub_tbname</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>taos_stmt_set_tbname</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int</name></type> <name>taos_stmt_get_tag_fields</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>fieldNum</name></decl></parameter>, <parameter><decl><type><name>TAOS_FIELD_E</name> <modifier>*</modifier><modifier>*</modifier></type><name>fields</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>stmt</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>fieldNum</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"NULL parameter for %s"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>stmtGetTagFields</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>fieldNum</name></expr></argument>, <argument><expr><name>fields</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>taos_stmt_get_col_fields</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>fieldNum</name></decl></parameter>, <parameter><decl><type><name>TAOS_FIELD_E</name> <modifier>*</modifier><modifier>*</modifier></type><name>fields</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>stmt</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>fieldNum</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"NULL parameter for %s"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>stmtGetColFields</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>fieldNum</name></expr></argument>, <argument><expr><name>fields</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>taos_stmt_bind_param</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>TAOS_MULTI_BIND</name> <modifier>*</modifier></type><name>bind</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>stmt</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>bind</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"NULL parameter for %s"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>bind</name><operator>-&gt;</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"invalid bind number %d for %s"</literal></expr></argument>, <argument><expr><name><name>bind</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>stmtBindBatch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>bind</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>taos_stmt_bind_param_batch</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>TAOS_MULTI_BIND</name> <modifier>*</modifier></type><name>bind</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>stmt</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>bind</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"NULL parameter for %s"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>bind</name><operator>-&gt;</operator><name>num</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>bind</name><operator>-&gt;</operator><name>num</name></name> <operator>&gt;</operator> <name>INT16_MAX</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"invalid bind num %d"</literal></expr></argument>, <argument><expr><name><name>bind</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>insert</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>stmtIsInsert</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>insert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>insert</name> <operator>&amp;&amp;</operator> <name><name>bind</name><operator>-&gt;</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"only one row data allowed for query"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>stmtBindBatch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>bind</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>taos_stmt_bind_single_param_batch</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>TAOS_MULTI_BIND</name> <modifier>*</modifier></type><name>bind</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>colIdx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>stmt</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>bind</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"NULL parameter for %s"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>colIdx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"invalid bind column idx %d"</literal></expr></argument>, <argument><expr><name>colIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>insert</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>stmtIsInsert</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>insert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>insert</name> <operator>&amp;&amp;</operator> <name><name>bind</name><operator>-&gt;</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"only one row data allowed for query"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>stmtBindBatch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>bind</name></expr></argument>, <argument><expr><name>colIdx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>taos_stmt_add_batch</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>stmt</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"NULL parameter for %s"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>stmtAddBatch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>taos_stmt_execute</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>stmt</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"NULL parameter for %s"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>stmtExec</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>taos_stmt_is_insert</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>insert</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>stmt</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>insert</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"NULL parameter for %s"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>stmtIsInsert</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>insert</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>taos_stmt_num_params</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nums</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>stmt</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>nums</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"NULL parameter for %s"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>stmtGetParamNum</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>nums</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>taos_stmt_get_param</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>stmt</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name>bytes</name> <operator>||</operator> <name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"invalid parameter for %s"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>stmtGetParam</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>taos_stmt_use_result</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>stmt</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"NULL parameter for %s"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>stmtUseResult</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>taos_stmt_errstr</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>stmtErrstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int</name></type> <name>taos_stmt_affected_rows</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>stmt</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"NULL parameter for %s"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>stmtAffectedRows</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>taos_stmt_affected_rows_once</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>stmt</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"NULL parameter for %s"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>stmtAffectedRowsOnce</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>taos_stmt_close</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>stmt</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"NULL parameter for %s"</literal></expr></argument>, <argument><expr><name>__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>stmtClose</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
