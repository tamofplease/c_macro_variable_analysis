<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/client/src/clientJniConnector.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"taos.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"com_taosdata_jdbc_TSDBJNIConnector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jniCommon.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>int</name></type> <name>__init</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>JavaVM</name> <modifier>*</modifier></type><name>g_vm</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jclass</name></type>    <name>g_arrayListClass</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>g_arrayListConstructFp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>g_arrayListAddFp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jclass</name></type>    <name>g_metadataClass</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>g_metadataConstructFp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jfieldID</name></type>  <name>g_metadataColtypeField</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jfieldID</name></type>  <name>g_metadataColnameField</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jfieldID</name></type>  <name>g_metadataColsizeField</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jfieldID</name></type>  <name>g_metadataColindexField</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jclass</name></type>    <name>g_rowdataClass</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>g_rowdataConstructor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>g_rowdataClearFp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>g_rowdataSetBooleanFp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>g_rowdataSetByteFp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>g_rowdataSetShortFp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>g_rowdataSetIntFp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>g_rowdataSetLongFp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>g_rowdataSetFloatFp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>g_rowdataSetDoubleFp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>g_rowdataSetStringFp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>g_rowdataSetTimestampFp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>g_rowdataSetByteArrayFp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jmethodID</name></type> <name>g_blockdataSetByteArrayFp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>g_blockdataSetNumOfRowsFp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>g_blockdataSetNumOfColsFp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jclass</name></type>    <name>g_tmqClass</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>g_createConsumerErrorCallback</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>g_topicListCallback</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>jclass</name></type>    <name>g_consumerClass</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>jmethodID</name></type> <name>g_commitCallback</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>jniGetGlobalMethod</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// make sure init function executed once</comment>
  <switch>switch <condition>(<expr><call><name>atomic_val_compare_exchange_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__init</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="number">0</literal></expr>:</case>
      <break>break;</break>
    <case>case <expr><literal type="number">1</literal></expr>:</case>
      <do>do <block>{<block_content>
        <expr_stmt><expr><call><name>taosMsleep</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> while <condition>(<expr><call><name>atomic_load_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__init</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>;</do>
    <case>case <expr><literal type="number">2</literal></expr>:</case>
      <return>return;</return>
  </block_content>}</block></switch>

  <if_stmt><if>if <condition>(<expr><name>g_vm</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetJavaVM</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g_vm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>jclass</name></type> <name>arrayListClass</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>FindClass</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="string">"java/util/ArrayList"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>g_arrayListClass</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewGlobalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>arrayListClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>g_arrayListConstructFp</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetMethodID</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>g_arrayListClass</name></expr></argument>, <argument><expr><literal type="string">"&lt;init&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"()V"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>g_arrayListAddFp</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetMethodID</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>g_arrayListClass</name></expr></argument>, <argument><expr><literal type="string">"add"</literal></expr></argument>, <argument><expr><literal type="string">"(Ljava/lang/Object;)Z"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>arrayListClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>jclass</name></type> <name>metadataClass</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>FindClass</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="string">"com/taosdata/jdbc/ColumnMetaData"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>g_metadataClass</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewGlobalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>metadataClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>g_metadataConstructFp</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetMethodID</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>g_metadataClass</name></expr></argument>, <argument><expr><literal type="string">"&lt;init&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"()V"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>g_metadataColtypeField</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetFieldID</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>g_metadataClass</name></expr></argument>, <argument><expr><literal type="string">"colType"</literal></expr></argument>, <argument><expr><literal type="string">"I"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>g_metadataColnameField</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetFieldID</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>g_metadataClass</name></expr></argument>, <argument><expr><literal type="string">"colName"</literal></expr></argument>, <argument><expr><literal type="string">"Ljava/lang/String;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>g_metadataColsizeField</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetFieldID</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>g_metadataClass</name></expr></argument>, <argument><expr><literal type="string">"colSize"</literal></expr></argument>, <argument><expr><literal type="string">"I"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>g_metadataColindexField</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetFieldID</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>g_metadataClass</name></expr></argument>, <argument><expr><literal type="string">"colIndex"</literal></expr></argument>, <argument><expr><literal type="string">"I"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>metadataClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>jclass</name></type> <name>rowdataClass</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>FindClass</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="string">"com/taosdata/jdbc/TSDBResultSetRowData"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>g_rowdataClass</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewGlobalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rowdataClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>g_rowdataConstructor</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetMethodID</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>g_rowdataClass</name></expr></argument>, <argument><expr><literal type="string">"&lt;init&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"(I)V"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>g_rowdataClearFp</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetMethodID</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>g_rowdataClass</name></expr></argument>, <argument><expr><literal type="string">"clear"</literal></expr></argument>, <argument><expr><literal type="string">"()V"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>g_rowdataSetBooleanFp</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetMethodID</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>g_rowdataClass</name></expr></argument>, <argument><expr><literal type="string">"setBoolean"</literal></expr></argument>, <argument><expr><literal type="string">"(IZ)V"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>g_rowdataSetByteFp</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetMethodID</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>g_rowdataClass</name></expr></argument>, <argument><expr><literal type="string">"setByte"</literal></expr></argument>, <argument><expr><literal type="string">"(IB)V"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>g_rowdataSetShortFp</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetMethodID</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>g_rowdataClass</name></expr></argument>, <argument><expr><literal type="string">"setShort"</literal></expr></argument>, <argument><expr><literal type="string">"(IS)V"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>g_rowdataSetIntFp</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetMethodID</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>g_rowdataClass</name></expr></argument>, <argument><expr><literal type="string">"setInt"</literal></expr></argument>, <argument><expr><literal type="string">"(II)V"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>g_rowdataSetLongFp</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetMethodID</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>g_rowdataClass</name></expr></argument>, <argument><expr><literal type="string">"setLong"</literal></expr></argument>, <argument><expr><literal type="string">"(IJ)V"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>g_rowdataSetFloatFp</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetMethodID</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>g_rowdataClass</name></expr></argument>, <argument><expr><literal type="string">"setFloat"</literal></expr></argument>, <argument><expr><literal type="string">"(IF)V"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>g_rowdataSetDoubleFp</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetMethodID</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>g_rowdataClass</name></expr></argument>, <argument><expr><literal type="string">"setDouble"</literal></expr></argument>, <argument><expr><literal type="string">"(ID)V"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>g_rowdataSetStringFp</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetMethodID</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>g_rowdataClass</name></expr></argument>, <argument><expr><literal type="string">"setString"</literal></expr></argument>, <argument><expr><literal type="string">"(ILjava/lang/String;)V"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>g_rowdataSetTimestampFp</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetMethodID</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>g_rowdataClass</name></expr></argument>, <argument><expr><literal type="string">"setTimestamp"</literal></expr></argument>, <argument><expr><literal type="string">"(IJI)V"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>g_rowdataSetByteArrayFp</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetMethodID</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>g_rowdataClass</name></expr></argument>, <argument><expr><literal type="string">"setByteArray"</literal></expr></argument>, <argument><expr><literal type="string">"(I[B)V"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rowdataClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>jclass</name></type> <name>blockdataClass</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>FindClass</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="string">"com/taosdata/jdbc/TSDBResultSetBlockData"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>jclass</name></type> <name>g_blockdataClass</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewGlobalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>blockdataClass</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>g_blockdataSetByteArrayFp</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetMethodID</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>g_blockdataClass</name></expr></argument>, <argument><expr><literal type="string">"setByteArray"</literal></expr></argument>, <argument><expr><literal type="string">"([B)V"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>g_blockdataSetNumOfRowsFp</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetMethodID</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>g_blockdataClass</name></expr></argument>, <argument><expr><literal type="string">"setNumOfRows"</literal></expr></argument>, <argument><expr><literal type="string">"(I)V"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>g_blockdataSetNumOfColsFp</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetMethodID</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>g_blockdataClass</name></expr></argument>, <argument><expr><literal type="string">"setNumOfCols"</literal></expr></argument>, <argument><expr><literal type="string">"(I)V"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>blockdataClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>jclass</name></type> <name>tmqClass</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>FindClass</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="string">"com/taosdata/jdbc/tmq/TMQConnector"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>jclass</name></type> <name>g_tmqClass</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewGlobalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>tmqClass</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>g_createConsumerErrorCallback</name> <operator>=</operator>
      <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetMethodID</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>g_tmqClass</name></expr></argument>, <argument><expr><literal type="string">"setCreateConsumerErrorMsg"</literal></expr></argument>, <argument><expr><literal type="string">"(Ljava/lang/String;)V"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>g_topicListCallback</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetMethodID</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>g_tmqClass</name></expr></argument>, <argument><expr><literal type="string">"setTopicList"</literal></expr></argument>, <argument><expr><literal type="string">"([Ljava/lang/String;)V"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>tmqClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>jclass</name></type> <name>consumerClass</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>FindClass</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="string">"com/taosdata/jdbc/tmq/TaosConsumer"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>jclass</name></type> <name>g_consumerClass</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewGlobalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>consumerClass</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>g_commitCallback</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetMethodID</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>g_consumerClass</name></expr></argument>, <argument><expr><literal type="string">"commitCallbackHandler"</literal></expr></argument>, <argument><expr><literal type="string">"(I)V"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>DeleteLocalRef</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>consumerClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>atomic_store_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>__init</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>jniDebug</name><argument_list>(<argument><expr><literal type="string">"native method register finished"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>check_for_params</name><parameter_list>(<parameter><decl><type><name>jobject</name></type> <name>jobj</name></decl></parameter>, <parameter><decl><type><name>jlong</name></type> <name>conn</name></decl></parameter>, <parameter><decl><type><name>jlong</name></type> <name>res</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>TAOS</name> <operator>*</operator><operator>)</operator><name>conn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniError</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, connection is closed"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JNI_CONNECTION_NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>TAOS_RES</name> <operator>*</operator><operator>)</operator><name>res</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniError</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, conn:%p, param res is null"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>, <argument><expr><operator>(</operator><name>TAOS</name> <operator>*</operator><operator>)</operator><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JNI_RESULT_SET_NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>JNI_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>JNIEXPORT</name> <name>void</name> <name>JNICALL</name></type> <name>Java_com_taosdata_jdbc_TSDBJNIConnector_initImp</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>jobj</name></decl></parameter>, <parameter><decl><type><name>jstring</name></type> <name>jconfigDir</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>jconfigDir</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>confDir</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jconfigDir</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>confDir</name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>confDir</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name>configDir</name></expr></argument>, <argument><expr><name>confDir</name></expr></argument>, <argument><expr><name>TSDB_FILENAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ReleaseStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jconfigDir</name></expr></argument>, <argument><expr><name>confDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>jniGetGlobalMethod</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>jniDebug</name><argument_list>(<argument><expr><literal type="string">"jni initialized successfully, config directory: %s"</literal></expr></argument>, <argument><expr><name>configDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>JNIEXPORT</name> <name>jobject</name></type> <name>createTSDBException</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// find class</comment>
  <decl_stmt><decl><type><name>jclass</name></type> <name>exception_clazz</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>FindClass</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><literal type="string">"com/taosdata/jdbc/TSDBException"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="line">// find methods</comment>
  <decl_stmt><decl><type><name>jmethodID</name></type> <name>init_method</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetMethodID</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>exception_clazz</name></expr></argument>, <argument><expr><literal type="string">"&lt;init&gt;"</literal></expr></argument>, <argument><expr><literal type="string">"()V"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>jmethodID</name></type> <name>setCode_method</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetMethodID</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>exception_clazz</name></expr></argument>, <argument><expr><literal type="string">"setCode"</literal></expr></argument>, <argument><expr><literal type="string">"(I)V"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>jmethodID</name></type> <name>setMessage_method</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetMethodID</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>exception_clazz</name></expr></argument>, <argument><expr><literal type="string">"setMessage"</literal></expr></argument>, <argument><expr><literal type="string">"(Ljava/lang/String;)V"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="line">// new exception</comment>
  <decl_stmt><decl><type><name>jobject</name></type> <name>exception_obj</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewObject</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>exception_clazz</name></expr></argument>, <argument><expr><name>init_method</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="line">// set code</comment>
  <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallVoidMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>exception_obj</name></expr></argument>, <argument><expr><name>setCode_method</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// set message</comment>
  <decl_stmt><decl><type><name>jstring</name></type> <name>message</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewStringUTF</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallVoidMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>exception_obj</name></expr></argument>, <argument><expr><name>setMessage_method</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>exception_obj</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>JNIEXPORT</name> <name>jobject</name> <name>JNICALL</name></type> <name>Java_com_taosdata_jdbc_TSDBJNIConnector_setConfigImp</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jclass</name></type> <name>jobj</name></decl></parameter>,
                                                                               <parameter><decl><type><name>jstring</name></type> <name>config</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>config</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><literal type="string">"config value is null"</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>jniDebug</name><argument_list>(<argument><expr><literal type="string">"config value is null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>createTSDBException</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cfg</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>config</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>cfg</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><literal type="string">"config value is null"</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>jniDebug</name><argument_list>(<argument><expr><literal type="string">"config value is null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>createTSDBException</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>setConfRet</name></type> <name>result</name> <init>= <expr><call><name>taos_set_config</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>        <name>code</name> <init>= <expr><name><name>result</name><operator>.</operator><name>retCode</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>      <modifier>*</modifier></type><name>msg</name> <init>= <expr><name><name>result</name><operator>.</operator><name>retMsg</name></name></expr></init></decl>;</decl_stmt>

  <return>return <expr><call><name>createTSDBException</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>JNIEXPORT</name> <name>jint</name> <name>JNICALL</name></type> <name>Java_com_taosdata_jdbc_TSDBJNIConnector_setOptions</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>jobj</name></decl></parameter>, <parameter><decl><type><name>jint</name></type> <name>optionIndex</name></decl></parameter>,
                                                                          <parameter><decl><type><name>jstring</name></type> <name>optionValue</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>optionValue</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniDebug</name><argument_list>(<argument><expr><literal type="string">"option index:%d value is null"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>optionIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>optionIndex</name> <operator>==</operator> <name>TSDB_OPTION_LOCALE</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>locale</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>optionValue</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>locale</name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>locale</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>taos_options</name><argument_list>(<argument><expr><name>TSDB_OPTION_LOCALE</name></expr></argument>, <argument><expr><name>locale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>jniDebug</name><argument_list>(<argument><expr><literal type="string">"set locale to %s, result:%d"</literal></expr></argument>, <argument><expr><name>locale</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>jniDebug</name><argument_list>(<argument><expr><literal type="string">"input locale is empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ReleaseStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>optionValue</name></expr></argument>, <argument><expr><name>locale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>optionIndex</name> <operator>==</operator> <name>TSDB_OPTION_CHARSET</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>charset</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>optionValue</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>charset</name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>charset</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>taos_options</name><argument_list>(<argument><expr><name>TSDB_OPTION_CHARSET</name></expr></argument>, <argument><expr><name>charset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>jniDebug</name><argument_list>(<argument><expr><literal type="string">"set character encoding to %s, result:%d"</literal></expr></argument>, <argument><expr><name>charset</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>jniDebug</name><argument_list>(<argument><expr><literal type="string">"input character encoding is empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ReleaseStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>optionValue</name></expr></argument>, <argument><expr><name>charset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>optionIndex</name> <operator>==</operator> <name>TSDB_OPTION_TIMEZONE</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tz1</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>optionValue</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>tz1</name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>tz1</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>taos_options</name><argument_list>(<argument><expr><name>TSDB_OPTION_TIMEZONE</name></expr></argument>, <argument><expr><name>tz1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>jniDebug</name><argument_list>(<argument><expr><literal type="string">"set timezone to %s, result:%d"</literal></expr></argument>, <argument><expr><name>tz1</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>jniDebug</name><argument_list>(<argument><expr><literal type="string">"input timezone is empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ReleaseStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>optionValue</name></expr></argument>, <argument><expr><name>tz1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>jniError</name><argument_list>(<argument><expr><literal type="string">"option index:%d is not found"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>optionIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>JNIEXPORT</name> <name>jlong</name> <name>JNICALL</name></type> <name>Java_com_taosdata_jdbc_TSDBJNIConnector_connectImp</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>jobj</name></decl></parameter>, <parameter><decl><type><name>jstring</name></type> <name>jhost</name></decl></parameter>,
                                                                           <parameter><decl><type><name>jint</name></type> <name>jport</name></decl></parameter>, <parameter><decl><type><name>jstring</name></type> <name>jdbName</name></decl></parameter>, <parameter><decl><type><name>jstring</name></type> <name>juser</name></decl></parameter>,
                                                                           <parameter><decl><type><name>jstring</name></type> <name>jpass</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>jlong</name></type>       <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>user</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pass</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dbname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>jhost</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>host</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jhost</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>jdbName</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>dbname</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jdbName</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>juser</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>user</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>juser</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>jpass</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pass</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jpass</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>user</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniDebug</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, user not specified, use default user %s"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>, <argument><expr><name>TSDB_DEFAULT_USER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>pass</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniDebug</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, pass not specified, use default password"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>jlong</name><operator>)</operator><call><name>taos_connect</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>host</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>user</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>pass</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dbname</name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator><name>jport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniError</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, conn:%p, connect to database failed, host=%s, user=%s, dbname=%s, port=%d"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>ret</name></expr></argument>,
             <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>host</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>user</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dbname</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>jport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>jniDebug</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, conn:%p, connect to database succeed, host=%s, user=%s, dbname=%s, port=%d"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>ret</name></expr></argument>,
             <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>host</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>user</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dbname</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>jport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>host</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ReleaseStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jhost</name></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>dbname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ReleaseStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jdbName</name></expr></argument>, <argument><expr><name>dbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>user</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ReleaseStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>juser</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>pass</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ReleaseStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jpass</name></expr></argument>, <argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>JNIEXPORT</name> <name>jlong</name> <name>JNICALL</name></type> <name>Java_com_taosdata_jdbc_TSDBJNIConnector_executeQueryImp</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>jobj</name></decl></parameter>,
                                                                                <parameter><decl><type><name>jbyteArray</name></type> <name>jsql</name></decl></parameter>, <parameter><decl><type><name>jlong</name></type> <name>con</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>tscon</name> <init>= <expr><operator>(</operator><name>TAOS</name> <operator>*</operator><operator>)</operator><name>con</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tscon</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniError</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, connection already closed"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JNI_CONNECTION_NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>jsql</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniError</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, conn:%p, empty sql string"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>, <argument><expr><name>tscon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JNI_SQL_NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>jsize</name></type> <name>len</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetArrayLength</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jsql</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>len</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniError</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, conn:%p, alloc memory failed"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>, <argument><expr><name>tscon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JNI_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetByteArrayRegion</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jsql</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>(</operator><name>jbyte</name> <operator>*</operator><operator>)</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ExceptionCheck</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <comment type="line">// todo handle error</comment>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>tres</name> <init>= <expr><call><name>taos_query</name><argument_list>(<argument><expr><name>tscon</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>code</name> <init>= <expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>tres</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniError</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, conn:%p, code:%s, msg:%s"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>, <argument><expr><name>tscon</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>tres</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>taos_is_update_query</name><argument_list>(<argument><expr><name>tres</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>affectRows</name> <init>= <expr><call><name>taos_affected_rows</name><argument_list>(<argument><expr><name>tres</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>jniDebug</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, conn:%p, code:%s, affect rows:%d"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>, <argument><expr><name>tscon</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>affectRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>jniDebug</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, conn:%p, code:%s"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>, <argument><expr><name>tscon</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>jlong</name><operator>)</operator><name>tres</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>JNIEXPORT</name> <name>jint</name> <name>JNICALL</name></type> <name>Java_com_taosdata_jdbc_TSDBJNIConnector_getErrCodeImp</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>jobj</name></decl></parameter>, <parameter><decl><type><name>jlong</name></type> <name>con</name></decl></parameter>,
                                                                             <parameter><decl><type><name>jlong</name></type> <name>tres</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>check_for_params</name><argument_list>(<argument><expr><name>jobj</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name>tres</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>JNI_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><operator>(</operator><name>jint</name><operator>)</operator><call><name>taos_errno</name><argument_list>(<argument><expr><operator>(</operator><name>TAOS_RES</name> <operator>*</operator><operator>)</operator><name>tres</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>JNIEXPORT</name> <name>jstring</name> <name>JNICALL</name></type> <name>Java_com_taosdata_jdbc_TSDBJNIConnector_getErrMsgImp</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>jobj</name></decl></parameter>, <parameter><decl><type><name>jlong</name></type> <name>tres</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>pSql</name> <init>= <expr><operator>(</operator><name>TAOS_RES</name> <operator>*</operator><operator>)</operator><name>tres</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewStringUTF</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pSql</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>JNIEXPORT</name> <name>jlong</name> <name>JNICALL</name></type> <name>Java_com_taosdata_jdbc_TSDBJNIConnector_getResultSetImp</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>jobj</name></decl></parameter>, <parameter><decl><type><name>jlong</name></type> <name>con</name></decl></parameter>,
                                                                                <parameter><decl><type><name>jlong</name></type> <name>tres</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TAOS</name>   <modifier>*</modifier></type><name>tscon</name> <init>= <expr><operator>(</operator><name>TAOS</name> <operator>*</operator><operator>)</operator><name>con</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>check_for_params</name><argument_list>(<argument><expr><name>jobj</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name>tres</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>JNI_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taos_is_update_query</name><argument_list>(<argument><expr><operator>(</operator><name>TAOS_RES</name> <operator>*</operator><operator>)</operator><name>tres</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniDebug</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, conn:%p, update query, no resultset, %p"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>, <argument><expr><name>tscon</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>tres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>jniDebug</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, conn:%p, get resultset, %p"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>, <argument><expr><name>tscon</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>tres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>tres</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>JNIEXPORT</name> <name>jint</name> <name>JNICALL</name></type> <name>Java_com_taosdata_jdbc_TSDBJNIConnector_isUpdateQueryImp</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>jobj</name></decl></parameter>, <parameter><decl><type><name>jlong</name></type> <name>con</name></decl></parameter>,
                                                                                <parameter><decl><type><name>jlong</name></type> <name>tres</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>check_for_params</name><argument_list>(<argument><expr><name>jobj</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name>tres</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>JNI_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><operator>(</operator><ternary><condition><expr><call><name>taos_is_update_query</name><argument_list>(<argument><expr><operator>(</operator><name>TAOS_RES</name> <operator>*</operator><operator>)</operator><name>tres</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>JNIEXPORT</name> <name>jint</name> <name>JNICALL</name></type> <name>Java_com_taosdata_jdbc_TSDBJNIConnector_freeResultSetImp</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>jobj</name></decl></parameter>, <parameter><decl><type><name>jlong</name></type> <name>con</name></decl></parameter>,
                                                                                <parameter><decl><type><name>jlong</name></type> <name>res</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>check_for_params</name><argument_list>(<argument><expr><name>jobj</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>JNI_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>jniDebug</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, conn:%p, free resultset:%p"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>, <argument><expr><operator>(</operator><name>TAOS</name> <operator>*</operator><operator>)</operator><name>con</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>JNI_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>JNIEXPORT</name> <name>jint</name> <name>JNICALL</name></type> <name>Java_com_taosdata_jdbc_TSDBJNIConnector_getAffectedRowsImp</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>jobj</name></decl></parameter>, <parameter><decl><type><name>jlong</name></type> <name>con</name></decl></parameter>,
                                                                                  <parameter><decl><type><name>jlong</name></type> <name>res</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TAOS</name>   <modifier>*</modifier></type><name>tscon</name> <init>= <expr><operator>(</operator><name>TAOS</name> <operator>*</operator><operator>)</operator><name>con</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>check_for_params</name><argument_list>(<argument><expr><name>jobj</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>JNI_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>jint</name></type> <name>ret</name> <init>= <expr><call><name>taos_affected_rows</name><argument_list>(<argument><expr><operator>(</operator><name>TAOS_RES</name> <operator>*</operator><operator>)</operator><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>jniDebug</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, conn:%p, sql:%p, res: %p, affect rows:%d"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>, <argument><expr><name>tscon</name></expr></argument>, <argument><expr><operator>(</operator><name>TAOS</name> <operator>*</operator><operator>)</operator><name>con</name></expr></argument>, <argument><expr><operator>(</operator><name>TAOS_RES</name> <operator>*</operator><operator>)</operator><name>res</name></expr></argument>,
           <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>JNIEXPORT</name> <name>jint</name> <name>JNICALL</name></type> <name>Java_com_taosdata_jdbc_TSDBJNIConnector_getSchemaMetaDataImp</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>jobj</name></decl></parameter>,
                                                                                    <parameter><decl><type><name>jlong</name></type> <name>con</name></decl></parameter>, <parameter><decl><type><name>jlong</name></type> <name>res</name></decl></parameter>,
                                                                                    <parameter><decl><type><name>jobject</name></type> <name>arrayListObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TAOS</name>   <modifier>*</modifier></type><name>tscon</name> <init>= <expr><operator>(</operator><name>TAOS</name> <operator>*</operator><operator>)</operator><name>con</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>check_for_params</name><argument_list>(<argument><expr><name>jobj</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>JNI_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>TAOS_RES</name>   <modifier>*</modifier></type><name>tres</name> <init>= <expr><operator>(</operator><name>TAOS_RES</name> <operator>*</operator><operator>)</operator><name>res</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TAOS_FIELD</name> <modifier>*</modifier></type><name>fields</name> <init>= <expr><call><name>taos_fetch_fields</name><argument_list>(<argument><expr><name>tres</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>num_fields</name> <init>= <expr><call><name>taos_num_fields</name><argument_list>(<argument><expr><name>tres</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>num_fields</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniError</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, conn:%p, resultset:%p, fields size is %d"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>, <argument><expr><name>tscon</name></expr></argument>, <argument><expr><name>tres</name></expr></argument>, <argument><expr><name>num_fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JNI_NUM_OF_FIELDS_0</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>jniDebug</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, conn:%p, resultset:%p, fields size is %d"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>, <argument><expr><name>tscon</name></expr></argument>, <argument><expr><name>tres</name></expr></argument>, <argument><expr><name>num_fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_fields</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>jobject</name></type> <name>metadataObj</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewObject</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>g_metadataClass</name></expr></argument>, <argument><expr><name>g_metadataConstructFp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>SetIntField</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>metadataObj</name></expr></argument>, <argument><expr><name>g_metadataColtypeField</name></expr></argument>, <argument><expr><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>SetIntField</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>metadataObj</name></expr></argument>, <argument><expr><name>g_metadataColsizeField</name></expr></argument>, <argument><expr><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>SetIntField</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>metadataObj</name></expr></argument>, <argument><expr><name>g_metadataColindexField</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>jstring</name></type> <name>metadataObjColname</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewStringUTF</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>SetObjectField</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>metadataObj</name></expr></argument>, <argument><expr><name>g_metadataColnameField</name></expr></argument>, <argument><expr><name>metadataObjColname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallBooleanMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>arrayListObj</name></expr></argument>, <argument><expr><name>g_arrayListAddFp</name></expr></argument>, <argument><expr><name>metadataObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>JNI_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 *
 * @param env      vm
 * @param nchar    true multibytes data
 * @param maxBytes the maximum allowable field length
 * @return
 */</comment>
<function><type><name>jstring</name></type> <name>jniFromNCharToByteArray</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nchar</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>maxBytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>jbyteArray</name></type> <name>bytes</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewByteArray</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>maxBytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>SetByteArrayRegion</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>maxBytes</name></expr></argument>, <argument><expr><operator>(</operator><name>jbyte</name> <operator>*</operator><operator>)</operator><name>nchar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>bytes</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>JNIEXPORT</name> <name>jint</name> <name>JNICALL</name></type> <name>Java_com_taosdata_jdbc_TSDBJNIConnector_fetchRowImp</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>jobj</name></decl></parameter>, <parameter><decl><type><name>jlong</name></type> <name>con</name></decl></parameter>,
                                                                           <parameter><decl><type><name>jlong</name></type> <name>res</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>rowobj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>tscon</name> <init>= <expr><operator>(</operator><name>TAOS</name> <operator>*</operator><operator>)</operator><name>con</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tscon</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniError</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, connection is closed"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JNI_CONNECTION_NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><operator>(</operator><name>TAOS_RES</name> <operator>*</operator><operator>)</operator><name>res</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniError</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, conn:%p, resultset is null"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>, <argument><expr><name>tscon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JNI_RESULT_SET_NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>TAOS_FIELD</name> <modifier>*</modifier></type><name>fields</name> <init>= <expr><call><name>taos_fetch_fields</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfFields</name> <init>= <expr><call><name>taos_num_fields</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>numOfFields</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniError</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, conn:%p, resultset:%p, fields size %d"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>, <argument><expr><name>tscon</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>res</name></expr></argument>, <argument><expr><name>numOfFields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JNI_NUM_OF_FIELDS_0</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>TAOS_ROW</name></type> <name>row</name> <init>= <expr><call><name>taos_fetch_row</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>row</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>jniDebug</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, conn:%p, resultset:%p, fields size is %d, fetch row to the end"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>, <argument><expr><name>tscon</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>res</name></expr></argument>,
               <argument><expr><name>numOfFields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>JNI_FETCH_END</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>jniDebug</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, conn:%p, interrupted query. fetch row error code: %d, msg:%s"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>, <argument><expr><name>tscon</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>JNI_RESULT_SET_NULL</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>length</name> <init>= <expr><call><name>taos_fetch_lengths</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>tmp</name><index>[<expr><name>TSDB_MAX_BYTES_PER_ROW</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfFields</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <switch>switch <condition>(<expr><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>TSDB_DATA_TYPE_BOOL</name></expr>:</case>
        <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallVoidMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rowobj</name></expr></argument>, <argument><expr><name>g_rowdataSetBooleanFp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>jboolean</name><operator>)</operator><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>TSDB_DATA_TYPE_UTINYINT</name></expr>:</case>
      <case>case <expr><name>TSDB_DATA_TYPE_TINYINT</name></expr>:</case>
        <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallVoidMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rowobj</name></expr></argument>, <argument><expr><name>g_rowdataSetByteFp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>jbyte</name><operator>)</operator> <operator>*</operator> <operator>(</operator><operator>(</operator><name>int8_t</name> <operator>*</operator><operator>)</operator><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>TSDB_DATA_TYPE_USMALLINT</name></expr>:</case>
      <case>case <expr><name>TSDB_DATA_TYPE_SMALLINT</name></expr>:</case>
        <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallVoidMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rowobj</name></expr></argument>, <argument><expr><name>g_rowdataSetShortFp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>jshort</name><operator>)</operator> <operator>*</operator> <operator>(</operator><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>TSDB_DATA_TYPE_UINT</name></expr>:</case>
      <case>case <expr><name>TSDB_DATA_TYPE_INT</name></expr>:</case>
        <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallVoidMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rowobj</name></expr></argument>, <argument><expr><name>g_rowdataSetIntFp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>jint</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>TSDB_DATA_TYPE_UBIGINT</name></expr>:</case>
      <case>case <expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>:</case>
        <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallVoidMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rowobj</name></expr></argument>, <argument><expr><name>g_rowdataSetLongFp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>jlong</name><operator>)</operator> <operator>*</operator> <operator>(</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>TSDB_DATA_TYPE_FLOAT</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>float</name></type> <name>fv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>fv</name> <operator>=</operator> <call><name>GET_FLOAT_VAL</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallVoidMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rowobj</name></expr></argument>, <argument><expr><name>g_rowdataSetFloatFp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>jfloat</name><operator>)</operator><name>fv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <break>break;</break>
      <case>case <expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>double</name></type> <name>dv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>dv</name> <operator>=</operator> <call><name>GET_DOUBLE_VAL</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallVoidMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rowobj</name></expr></argument>, <argument><expr><name>g_rowdataSetDoubleFp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>jdouble</name><operator>)</operator><name>dv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block> <break>break;</break>
      <case>case <expr><name>TSDB_DATA_TYPE_BINARY</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>length</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// handle the case that terminated does not exist</comment>
        <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallVoidMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rowobj</name></expr></argument>, <argument><expr><name>g_rowdataSetStringFp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewStringUTF</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>length</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>TSDB_DATA_TYPE_NCHAR</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallVoidMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rowobj</name></expr></argument>, <argument><expr><name>g_rowdataSetByteArrayFp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
                               <argument><expr><call><name>jniFromNCharToByteArray</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>length</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>TSDB_DATA_TYPE_JSON</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallVoidMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rowobj</name></expr></argument>, <argument><expr><name>g_rowdataSetByteArrayFp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
                               <argument><expr><call><name>jniFromNCharToByteArray</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>length</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>precision</name> <init>= <expr><call><name>taos_result_precision</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallVoidMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rowobj</name></expr></argument>, <argument><expr><name>g_rowdataSetTimestampFp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>jlong</name><operator>)</operator> <operator>*</operator> <operator>(</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></for>

  <return>return <expr><name>JNI_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>JNIEXPORT</name> <name>jint</name> <name>JNICALL</name></type> <name>Java_com_taosdata_jdbc_TSDBJNIConnector_fetchBlockImp</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>jobj</name></decl></parameter>, <parameter><decl><type><name>jlong</name></type> <name>con</name></decl></parameter>,
                                                                             <parameter><decl><type><name>jlong</name></type> <name>res</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>rowobj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TAOS</name>   <modifier>*</modifier></type><name>tscon</name> <init>= <expr><operator>(</operator><name>TAOS</name> <operator>*</operator><operator>)</operator><name>con</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>check_for_params</name><argument_list>(<argument><expr><name>jobj</name></expr></argument>, <argument><expr><name>con</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>JNI_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>tres</name> <init>= <expr><operator>(</operator><name>TAOS_RES</name> <operator>*</operator><operator>)</operator><name>res</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfFields</name> <init>= <expr><call><name>taos_num_fields</name><argument_list>(<argument><expr><name>tres</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>numOfFields</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfRows</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>     <name>error_code</name> <init>= <expr><call><name>taos_fetch_raw_block</name><argument_list>(<argument><expr><name>tres</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numOfRows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>numOfRows</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>error_code</name> <operator>==</operator> <name>JNI_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>jniDebug</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, conn:%p, resultset:%p, no data to retrieve"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>, <argument><expr><name>tscon</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>JNI_FETCH_END</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>jniError</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, conn:%p, query interrupted. fetch block error code:%d, msg:%s"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>, <argument><expr><name>tscon</name></expr></argument>, <argument><expr><name>error_code</name></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>tres</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>JNI_RESULT_SET_NULL</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallVoidMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rowobj</name></expr></argument>, <argument><expr><name>g_blockdataSetNumOfRowsFp</name></expr></argument>, <argument><expr><operator>(</operator><name>jint</name><operator>)</operator><name>numOfRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallVoidMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rowobj</name></expr></argument>, <argument><expr><name>g_blockdataSetNumOfColsFp</name></expr></argument>, <argument><expr><operator>(</operator><name>jint</name><operator>)</operator><name>numOfFields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>data</name><operator>)</operator> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>CallVoidMethod</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>rowobj</name></expr></argument>, <argument><expr><name>g_blockdataSetByteArrayFp</name></expr></argument>, <argument><expr><call><name>jniFromNCharToByteArray</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>JNI_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>JNIEXPORT</name> <name>jint</name> <name>JNICALL</name></type> <name>Java_com_taosdata_jdbc_TSDBJNIConnector_closeConnectionImp</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>jobj</name></decl></parameter>,
                                                                                  <parameter><decl><type><name>jlong</name></type> <name>con</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>tscon</name> <init>= <expr><operator>(</operator><name>TAOS</name> <operator>*</operator><operator>)</operator><name>con</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tscon</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniError</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, connection is already closed"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JNI_CONNECTION_NULL</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>jniDebug</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, conn:%p, close connection success"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>, <argument><expr><name>tscon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taos_close</name><argument_list>(<argument><expr><name>tscon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JNI_SUCCESS</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>JNIEXPORT</name> <name>jint</name> <name>JNICALL</name></type> <name>Java_com_taosdata_jdbc_TSDBJNIConnector_validateCreateTableSqlImp</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>jobj</name></decl></parameter>,
                                                                                         <parameter><decl><type><name>jlong</name></type> <name>con</name></decl></parameter>, <parameter><decl><type><name>jbyteArray</name></type> <name>jsql</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>tscon</name> <init>= <expr><operator>(</operator><name>TAOS</name> <operator>*</operator><operator>)</operator><name>con</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tscon</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniError</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, connection is closed"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JNI_CONNECTION_NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>jsql</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniError</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, conn:%p, sql is null"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>, <argument><expr><name>tscon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JNI_SQL_NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>jsize</name></type> <name>len</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetArrayLength</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jsql</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>len</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetByteArrayRegion</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jsql</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>(</operator><name>jbyte</name> <operator>*</operator><operator>)</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ExceptionCheck</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <comment type="line">// todo handle error</comment>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><call><name>taos_validate_sql</name><argument_list>(<argument><expr><name>tscon</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>jniDebug</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, conn:%p, code is %d"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>, <argument><expr><name>tscon</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>JNIEXPORT</name> <name>jstring</name> <name>JNICALL</name></type> <name>Java_com_taosdata_jdbc_TSDBJNIConnector_getTsCharset</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>jobj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewStringUTF</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>tsCharset</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Get Result Time Precision
 * @param env           vm
 * @param jobj          the TSDBJNIConnector java object
 * @param con           the c connection pointer
 * @param res           the TAOS_RES object, i.e. the SSqlObject
 * @return precision    0:ms 1:us 2:ns
 */</comment>
<function><type><name>JNIEXPORT</name> <name>jint</name> <name>JNICALL</name></type> <name>Java_com_taosdata_jdbc_TSDBJNIConnector_getResultTimePrecisionImp</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>jobj</name></decl></parameter>,
                                                                                         <parameter><decl><type><name>jlong</name></type> <name>con</name></decl></parameter>, <parameter><decl><type><name>jlong</name></type> <name>res</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>tscon</name> <init>= <expr><operator>(</operator><name>TAOS</name> <operator>*</operator><operator>)</operator><name>con</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tscon</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniError</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, connection is closed"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JNI_CONNECTION_NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><operator>(</operator><name>TAOS_RES</name> <operator>*</operator><operator>)</operator><name>res</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniError</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, conn:%p, resultset is null"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>, <argument><expr><name>tscon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JNI_RESULT_SET_NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>taos_result_precision</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>JNIEXPORT</name> <name>jlong</name> <name>JNICALL</name></type> <name>Java_com_taosdata_jdbc_TSDBJNIConnector_prepareStmtImp</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>jobj</name></decl></parameter>,
                                                                               <parameter><decl><type><name>jbyteArray</name></type> <name>jsql</name></decl></parameter>, <parameter><decl><type><name>jlong</name></type> <name>con</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>tscon</name> <init>= <expr><operator>(</operator><name>TAOS</name> <operator>*</operator><operator>)</operator><name>con</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tscon</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniError</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, connection already closed"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JNI_CONNECTION_NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>jsql</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniError</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, conn:%p, empty sql string"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>, <argument><expr><name>tscon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JNI_SQL_NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>jsize</name></type> <name>len</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetArrayLength</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jsql</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>len</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniError</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, conn:%p, alloc memory failed"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>, <argument><expr><name>tscon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JNI_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetByteArrayRegion</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jsql</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>(</operator><name>jbyte</name> <operator>*</operator><operator>)</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ExceptionCheck</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <comment type="line">// todo handle error</comment>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>pStmt</name> <init>= <expr><call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>tscon</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>code</name> <init>= <expr><call><name>taos_stmt_prepare</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniError</name><argument_list>(<argument><expr><literal type="string">"prepareStmt jobj:%p, conn:%p, code:%s"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>, <argument><expr><name>tscon</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JNI_TDENGINE_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><operator>(</operator><name>jlong</name><operator>)</operator><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>JNIEXPORT</name> <name>jint</name> <name>JNICALL</name></type> <name>Java_com_taosdata_jdbc_TSDBJNIConnector_setBindTableNameImp</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>jobj</name></decl></parameter>,
                                                                                   <parameter><decl><type><name>jlong</name></type> <name>stmt</name></decl></parameter>, <parameter><decl><type><name>jstring</name></type> <name>jname</name></decl></parameter>,
                                                                                   <parameter><decl><type><name>jlong</name></type> <name>conn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>tsconn</name> <init>= <expr><operator>(</operator><name>TAOS</name> <operator>*</operator><operator>)</operator><name>conn</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tsconn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniError</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, connection already closed"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JNI_CONNECTION_NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>pStmt</name> <init>= <expr><operator>(</operator><name>TAOS_STMT</name> <operator>*</operator><operator>)</operator><name>stmt</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pStmt</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniError</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, conn:%p, invalid stmt handle"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>, <argument><expr><name>tsconn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JNI_SQL_NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>taos_stmt_set_tbname</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>stmt</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ReleaseStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jname</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>jniError</name><argument_list>(<argument><expr><literal type="string">"bindTableName jobj:%p, conn:%p, code:%s"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>, <argument><expr><name>tsconn</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JNI_TDENGINE_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>jniDebug</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, conn:%p, set stmt bind table name:%s"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>, <argument><expr><name>tsconn</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ReleaseStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jname</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>JNI_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>JNIEXPORT</name> <name>jint</name> <name>JNICALL</name></type> <name>Java_com_taosdata_jdbc_TSDBJNIConnector_setTableNameTagsImp</name><parameter_list>(
    <parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>jobj</name></decl></parameter>, <parameter><decl><type><name>jlong</name></type> <name>stmt</name></decl></parameter>, <parameter><decl><type><name>jstring</name></type> <name>tableName</name></decl></parameter>, <parameter><decl><type><name>jint</name></type> <name>numOfTags</name></decl></parameter>, <parameter><decl><type><name>jbyteArray</name></type> <name>tags</name></decl></parameter>, <parameter><decl><type><name>jbyteArray</name></type> <name>typeList</name></decl></parameter>,
    <parameter><decl><type><name>jbyteArray</name></type> <name>lengthList</name></decl></parameter>, <parameter><decl><type><name>jbyteArray</name></type> <name>nullList</name></decl></parameter>, <parameter><decl><type><name>jlong</name></type> <name>conn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>tsconn</name> <init>= <expr><operator>(</operator><name>TAOS</name> <operator>*</operator><operator>)</operator><name>conn</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tsconn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniError</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, connection already closed"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JNI_CONNECTION_NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>pStmt</name> <init>= <expr><operator>(</operator><name>TAOS_STMT</name> <operator>*</operator><operator>)</operator><name>stmt</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pStmt</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniError</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, conn:%p, invalid stmt handle"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>, <argument><expr><name>tsconn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JNI_SQL_NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>jsize</name></type> <name>len</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetArrayLength</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>tags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tagsData</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetByteArrayRegion</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>tags</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>(</operator><name>jbyte</name> <operator>*</operator><operator>)</operator><name>tagsData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ExceptionCheck</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <comment type="line">// todo handle error</comment>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetArrayLength</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>lengthList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>lengthArray</name> <init>= <expr><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetByteArrayRegion</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>lengthList</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>(</operator><name>jbyte</name> <operator>*</operator><operator>)</operator><name>lengthArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ExceptionCheck</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetArrayLength</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>typeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>typeArray</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetByteArrayRegion</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>typeList</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>(</operator><name>jbyte</name> <operator>*</operator><operator>)</operator><name>typeArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ExceptionCheck</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetArrayLength</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>nullList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>nullArray</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetByteArrayRegion</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>nullList</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>(</operator><name>jbyte</name> <operator>*</operator><operator>)</operator><name>nullArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ExceptionCheck</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>curTags</name> <init>= <expr><name>tagsData</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>TAOS_MULTI_BIND</name> <modifier>*</modifier></type><name>tagsBind</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>numOfTags</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TAOS_MULTI_BIND</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfTags</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>tagsBind</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name><name>typeArray</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tagsBind</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name>curTags</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tagsBind</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <operator>&amp;</operator><name><name>nullArray</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tagsBind</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <operator>&amp;</operator><name><name>lengthArray</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>curTags</name> <operator>+=</operator> <name><name>lengthArray</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>taos_stmt_set_tbname_tags</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>stmt</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>tagsBind</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>nTags</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>numOfTags</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>jniDebug</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, conn:%p, set table name:%s, numOfTags:%d"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>, <argument><expr><name>tsconn</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>nTags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>tagsData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>lengthArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>typeArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>nullArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>tagsBind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ReleaseStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniError</name><argument_list>(<argument><expr><literal type="string">"tableNameTags jobj:%p, conn:%p, code:%s"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>, <argument><expr><name>tsconn</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JNI_TDENGINE_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>JNI_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>JNIEXPORT</name> <name>jlong</name> <name>JNICALL</name></type> <name>Java_com_taosdata_jdbc_TSDBJNIConnector_bindColDataImp</name><parameter_list>(
    <parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>jobj</name></decl></parameter>, <parameter><decl><type><name>jlong</name></type> <name>stmt</name></decl></parameter>, <parameter><decl><type><name>jbyteArray</name></type> <name>colDataList</name></decl></parameter>, <parameter><decl><type><name>jbyteArray</name></type> <name>lengthList</name></decl></parameter>, <parameter><decl><type><name>jbyteArray</name></type> <name>nullList</name></decl></parameter>,
    <parameter><decl><type><name>jint</name></type> <name>dataType</name></decl></parameter>, <parameter><decl><type><name>jint</name></type> <name>dataBytes</name></decl></parameter>, <parameter><decl><type><name>jint</name></type> <name>numOfRows</name></decl></parameter>, <parameter><decl><type><name>jint</name></type> <name>colIndex</name></decl></parameter>, <parameter><decl><type><name>jlong</name></type> <name>con</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>tscon</name> <init>= <expr><operator>(</operator><name>TAOS</name> <operator>*</operator><operator>)</operator><name>con</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tscon</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniError</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, connection already closed"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JNI_CONNECTION_NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>pStmt</name> <init>= <expr><operator>(</operator><name>TAOS_STMT</name> <operator>*</operator><operator>)</operator><name>stmt</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pStmt</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniError</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, conn:%p, invalid stmt"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>, <argument><expr><name>tscon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JNI_SQL_NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// todo refactor</comment>
  <decl_stmt><decl><type><name>jsize</name></type> <name>len</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetArrayLength</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>colDataList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>colBuf</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetByteArrayRegion</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>colDataList</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>(</operator><name>jbyte</name> <operator>*</operator><operator>)</operator><name>colBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ExceptionCheck</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <comment type="line">// todo handle error</comment>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetArrayLength</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>lengthList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>lengthArray</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetByteArrayRegion</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>lengthList</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>(</operator><name>jbyte</name> <operator>*</operator><operator>)</operator><name>lengthArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ExceptionCheck</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetArrayLength</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>nullList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>nullArray</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetByteArrayRegion</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>nullList</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>(</operator><name>jbyte</name> <operator>*</operator><operator>)</operator><name>nullArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ExceptionCheck</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// bind multi-rows with only one invoke.</comment>
  <decl_stmt><decl><type><name>TAOS_MULTI_BIND</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TAOS_MULTI_BIND</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>num</name></name> <operator>=</operator> <name>numOfRows</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>buffer_type</name></name> <operator>=</operator> <name>dataType</name></expr>;</expr_stmt>  <comment type="line">// todo check data type</comment>
  <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>buffer_length</name></name> <operator>=</operator> <ternary><condition><expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name>dataType</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>dataBytes</name></expr> </then><else>: <expr><name><name>tDataTypes</name><index>[<expr><name>dataType</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>is_null</name></name> <operator>=</operator> <name>nullArray</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>colBuf</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><name>lengthArray</name></expr>;</expr_stmt>

  <comment type="line">// set the length and is_null array</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name>dataType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>bytes</name> <init>= <expr><name><name>tDataTypes</name><index>[<expr><name>dataType</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfRows</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>length</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>taos_stmt_bind_single_param_batch</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>colIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>is_null</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniError</name><argument_list>(<argument><expr><literal type="string">"bindColData jobj:%p, conn:%p, code:%s"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>, <argument><expr><name>tscon</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JNI_TDENGINE_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>JNI_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>JNIEXPORT</name> <name>jint</name> <name>JNICALL</name></type> <name>Java_com_taosdata_jdbc_TSDBJNIConnector_addBatchImp</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>jobj</name></decl></parameter>, <parameter><decl><type><name>jlong</name></type> <name>stmt</name></decl></parameter>,
                                                                           <parameter><decl><type><name>jlong</name></type> <name>con</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>tscon</name> <init>= <expr><operator>(</operator><name>TAOS</name> <operator>*</operator><operator>)</operator><name>con</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tscon</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniError</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, connection already closed"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JNI_CONNECTION_NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>pStmt</name> <init>= <expr><operator>(</operator><name>TAOS_STMT</name> <operator>*</operator><operator>)</operator><name>stmt</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pStmt</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniError</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, conn:%p, invalid stmt"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>, <argument><expr><name>tscon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JNI_SQL_NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>taos_stmt_add_batch</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniError</name><argument_list>(<argument><expr><literal type="string">"add batch jobj:%p, conn:%p, code:%s"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>, <argument><expr><name>tscon</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JNI_TDENGINE_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>jniDebug</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, conn:%p, stmt closed"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>, <argument><expr><name>tscon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>JNI_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>JNIEXPORT</name> <name>jint</name> <name>JNICALL</name></type> <name>Java_com_taosdata_jdbc_TSDBJNIConnector_executeBatchImp</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>jobj</name></decl></parameter>, <parameter><decl><type><name>jlong</name></type> <name>stmt</name></decl></parameter>,
                                                                               <parameter><decl><type><name>jlong</name></type> <name>con</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>tscon</name> <init>= <expr><operator>(</operator><name>TAOS</name> <operator>*</operator><operator>)</operator><name>con</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tscon</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniError</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, connection already closed"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JNI_CONNECTION_NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>pStmt</name> <init>= <expr><operator>(</operator><name>TAOS_STMT</name> <operator>*</operator><operator>)</operator><name>stmt</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pStmt</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniError</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, conn:%p, invalid stmt"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>, <argument><expr><name>tscon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JNI_SQL_NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>taos_stmt_execute</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniError</name><argument_list>(<argument><expr><literal type="string">"excute batch jobj:%p, conn:%p, code:%s"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>, <argument><expr><name>tscon</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JNI_TDENGINE_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>jniDebug</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, conn:%p, batch execute"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>, <argument><expr><name>tscon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>JNI_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>JNIEXPORT</name> <name>jint</name> <name>JNICALL</name></type> <name>Java_com_taosdata_jdbc_TSDBJNIConnector_closeStmt</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>jobj</name></decl></parameter>, <parameter><decl><type><name>jlong</name></type> <name>stmt</name></decl></parameter>,
                                                                         <parameter><decl><type><name>jlong</name></type> <name>con</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>tscon</name> <init>= <expr><operator>(</operator><name>TAOS</name> <operator>*</operator><operator>)</operator><name>con</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tscon</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniError</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, connection already closed"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JNI_CONNECTION_NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>pStmt</name> <init>= <expr><operator>(</operator><name>TAOS_STMT</name> <operator>*</operator><operator>)</operator><name>stmt</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pStmt</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniError</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, conn:%p, invalid stmt"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>, <argument><expr><name>tscon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JNI_SQL_NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniError</name><argument_list>(<argument><expr><literal type="string">"close stmt jobj:%p, conn:%p, code:%s"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>, <argument><expr><name>tscon</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JNI_TDENGINE_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>jniDebug</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, conn:%p, stmt closed"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>, <argument><expr><name>tscon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>JNI_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>JNIEXPORT</name> <name>jstring</name> <name>JNICALL</name></type> <name>Java_com_taosdata_jdbc_TSDBJNIConnector_stmtErrorMsgImp</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>jobj</name></decl></parameter>, <parameter><decl><type><name>jlong</name></type> <name>stmt</name></decl></parameter>,
                                                                                  <parameter><decl><type><name>jlong</name></type> <name>con</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type>  <name><name>errMsg</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>tscon</name> <init>= <expr><operator>(</operator><name>TAOS</name> <operator>*</operator><operator>)</operator><name>con</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tscon</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniError</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, connection already closed"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>errMsg</name></expr></argument>, <argument><expr><literal type="string">"jobj:%p, connection already closed"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewStringUTF</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>errMsg</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>pStmt</name> <init>= <expr><operator>(</operator><name>TAOS_STMT</name> <operator>*</operator><operator>)</operator><name>stmt</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pStmt</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniError</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, conn:%p, invalid stmt"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>, <argument><expr><name>tscon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>errMsg</name></expr></argument>, <argument><expr><literal type="string">"jobj:%p, conn:%p, invalid stmt"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>, <argument><expr><name>tscon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewStringUTF</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>errMsg</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>NewStringUTF</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><operator>(</operator><name>TAOS_STMT</name> <operator>*</operator><operator>)</operator><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>schemalessInsert</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>jobj</name></decl></parameter>, <parameter><decl><type><name>jobjectArray</name></type> <name>lines</name></decl></parameter>, <parameter><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>, <parameter><decl><type><name>jint</name></type> <name>protocol</name></decl></parameter>, <parameter><decl><type><name>jint</name></type> <name>precision</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type>    <name>numLines</name> <init>= <expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetArrayLength</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>lines</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>c_lines</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>numLines</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>c_lines</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniError</name><argument_list>(<argument><expr><literal type="string">"c_lines:%p, alloc memory failed"</literal></expr></argument>, <argument><expr><name>c_lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numLines</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>jstring</name></type> <name>line</name> <init>= <expr><operator>(</operator><name>jstring</name><operator>)</operator><operator>(</operator><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetObjectArrayElement</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>lines</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>c_lines</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>tres</name> <init>= <expr><call><name>taos_schemaless_insert</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name>c_lines</name></expr></argument>, <argument><expr><name>numLines</name></expr></argument>, <argument><expr><name>protocol</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numLines</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>jstring</name></type> <name>line</name> <init>= <expr><operator>(</operator><name>jstring</name><operator>)</operator><operator>(</operator><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>GetObjectArrayElement</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>lines</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><operator>(</operator><operator>*</operator><name>env</name><operator>)</operator><operator>-&gt;</operator><name>ReleaseStringUTFChars</name></name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name><name>c_lines</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>c_lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>tres</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>JNIEXPORT</name> <name>jint</name> <name>JNICALL</name></type> <name>Java_com_taosdata_jdbc_TSDBJNIConnector_insertLinesImp</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>jobj</name></decl></parameter>,
                                                                              <parameter><decl><type><name>jobjectArray</name></type> <name>lines</name></decl></parameter>, <parameter><decl><type><name>jlong</name></type> <name>conn</name></decl></parameter>,
                                                                              <parameter><decl><type><name>jint</name></type> <name>protocol</name></decl></parameter>, <parameter><decl><type><name>jint</name></type> <name>precision</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>taos</name> <init>= <expr><operator>(</operator><name>TAOS</name> <operator>*</operator><operator>)</operator><name>conn</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>taos</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniError</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, connection already closed"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JNI_CONNECTION_NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>tres</name> <init>= <expr><call><name>schemalessInsert</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jobj</name></expr></argument>, <argument><expr><name>lines</name></expr></argument>, <argument><expr><name>taos</name></expr></argument>, <argument><expr><name>protocol</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>tres</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>JNI_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>tres</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniError</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, conn:%p, code:%s, msg:%s"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>, <argument><expr><name>taos</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>tres</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>tres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JNI_TDENGINE_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>tres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>JNI_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>JNIEXPORT</name> <name>jlong</name> <name>JNICALL</name></type> <name>Java_com_taosdata_jdbc_TSDBJNIConnector_schemalessInsertImp</name><parameter_list>(<parameter><decl><type><name>JNIEnv</name> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><name>jobject</name></type> <name>jobj</name></decl></parameter>,
                                                                                    <parameter><decl><type><name>jobjectArray</name></type> <name>lines</name></decl></parameter>, <parameter><decl><type><name>jlong</name></type> <name>conn</name></decl></parameter>,
                                                                                    <parameter><decl><type><name>jint</name></type> <name>protocol</name></decl></parameter>, <parameter><decl><type><name>jint</name></type> <name>precision</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>taos</name> <init>= <expr><operator>(</operator><name>TAOS</name> <operator>*</operator><operator>)</operator><name>conn</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>taos</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>jniError</name><argument_list>(<argument><expr><literal type="string">"jobj:%p, connection already closed"</literal></expr></argument>, <argument><expr><name>jobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>JNI_CONNECTION_NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>tres</name> <init>= <expr><call><name>schemalessInsert</name><argument_list>(<argument><expr><name>env</name></expr></argument>, <argument><expr><name>jobj</name></expr></argument>, <argument><expr><name>lines</name></expr></argument>, <argument><expr><name>taos</name></expr></argument>, <argument><expr><name>protocol</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tres</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>JNI_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><operator>(</operator><name>jlong</name><operator>)</operator><name>tres</name></expr>;</return>
</block_content>}</block></function>
</unit>
