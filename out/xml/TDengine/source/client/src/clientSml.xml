<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/client/src/clientSml.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cJSON.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clientInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"osSemaphore.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"osThread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"query.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"taos.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"taoserror.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcommon.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tglobal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tmsg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tname.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ttime.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ttypes.h"</cpp:file></cpp:include>

<comment type="line">//=================================================================================================</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPACE</name></cpp:macro> <cpp:value>' '</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMMA</name></cpp:macro> <cpp:value>','</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EQUAL</name></cpp:macro> <cpp:value>'='</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUOTE</name></cpp:macro> <cpp:value>'"'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLASH</name></cpp:macro> <cpp:value>'\\'</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JUMP_SPACE</name><parameter_list>(<parameter><type><name>sql</name></type></parameter>, <parameter><type><name>sqlEnd</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>while (sql &lt; sqlEnd) {        \
    if (*sql == SPACE)          \
      sql++;                    \
    else                        \
      break;                    \
  }</cpp:value></cpp:define>
<comment type="line">// comma ,</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_SLASH_COMMA</name><parameter_list>(<parameter><type><name>sql</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(sql) == COMMA &amp;&amp; *((sql)-1) == SLASH)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_COMMA</name><parameter_list>(<parameter><type><name>sql</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>(*(sql) == COMMA &amp;&amp; *((sql)-1) != SLASH)</cpp:value></cpp:define>
<comment type="line">// space</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_SLASH_SPACE</name><parameter_list>(<parameter><type><name>sql</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(sql) == SPACE &amp;&amp; *((sql)-1) == SLASH)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_SPACE</name><parameter_list>(<parameter><type><name>sql</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>(*(sql) == SPACE &amp;&amp; *((sql)-1) != SLASH)</cpp:value></cpp:define>
<comment type="line">// equal =</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_SLASH_EQUAL</name><parameter_list>(<parameter><type><name>sql</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(sql) == EQUAL &amp;&amp; *((sql)-1) == SLASH)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_EQUAL</name><parameter_list>(<parameter><type><name>sql</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>(*(sql) == EQUAL &amp;&amp; *((sql)-1) != SLASH)</cpp:value></cpp:define>
<comment type="line">// quote "</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_SLASH_QUOTE</name><parameter_list>(<parameter><type><name>sql</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(sql) == QUOTE &amp;&amp; *((sql)-1) == SLASH)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_QUOTE</name><parameter_list>(<parameter><type><name>sql</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>(*(sql) == QUOTE &amp;&amp; *((sql)-1) != SLASH)</cpp:value></cpp:define>
<comment type="line">// SLASH</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_SLASH_SLASH</name><parameter_list>(<parameter><type><name>sql</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(sql) == SLASH &amp;&amp; *((sql)-1) == SLASH)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_SLASH_LETTER</name><parameter_list>(<parameter><type><name>sql</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>(IS_SLASH_COMMA(sql) || IS_SLASH_SPACE(sql) || IS_SLASH_EQUAL(sql) || IS_SLASH_QUOTE(sql) || IS_SLASH_SLASH(sql))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOVE_FORWARD_ONE</name><parameter_list>(<parameter><type><name>sql</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(memmove((void *)((sql)-1), (sql), len))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROCESS_SLASH</name><parameter_list>(<parameter><type><name>key</name></type></parameter>, <parameter><type><name>keyLen</name></type></parameter>)</parameter_list></cpp:macro>           \
  <cpp:value>for (int i = 1; i &lt; keyLen; ++i) {         \
    if (IS_SLASH_LETTER(key + i)) {          \
      MOVE_FORWARD_ONE(key + i, keyLen - i); \
      i--;                                   \
      keyLen--;                              \
    }                                        \
  }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_INVALID_COL_LEN</name><parameter_list>(<parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>((len) &lt;= 0 || (len) &gt;= TSDB_COL_NAME_LEN)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_INVALID_TABLE_LEN</name><parameter_list>(<parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((len) &lt;= 0 || (len) &gt;= TSDB_TABLE_NAME_LEN)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OTD_JSON_SUB_FIELDS_NUM</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OTD_JSON_FIELDS_NUM</name></cpp:macro>     <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TS</name></cpp:macro>        <cpp:value>"_ts"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TS_LEN</name></cpp:macro>    <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VALUE</name></cpp:macro>     <cpp:value>"_value"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VALUE_LEN</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BINARY_ADD_LEN</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>  <comment type="line">// "binary"   2 means " "</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NCHAR_ADD_LEN</name></cpp:macro>  <cpp:value>3</cpp:value></cpp:define>  <comment type="line">// L"nchar"   3 means L" "</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_RETRY_TIMES</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<comment type="line">//=================================================================================================</comment>
<typedef>typedef <type><name>TSDB_SML_PROTOCOL_TYPE</name></type> <name>SMLProtocolType</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{
  <decl><name>SCHEMA_ACTION_NULL</name></decl>,
  <decl><name>SCHEMA_ACTION_CREATE_STABLE</name></decl>,
  <decl><name>SCHEMA_ACTION_ADD_COLUMN</name></decl>,
  <decl><name>SCHEMA_ACTION_ADD_TAG</name></decl>,
  <decl><name>SCHEMA_ACTION_CHANGE_COLUMN_SIZE</name></decl>,
  <decl><name>SCHEMA_ACTION_CHANGE_TAG_SIZE</name></decl>,
}</block></enum></type> <name>ESchemaAction</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>measure</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tags</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cols</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>timestamp</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>measureLen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>measureTagsLen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>tagsLen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>colsLen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>timestampLen</name></decl>;</decl_stmt>
}</block></struct></type> <name>SSmlLineInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sTableName</name></decl>;</decl_stmt>  <comment type="line">// super table name</comment>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>sTableNameLen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>        <name><name>childTableName</name><index>[<expr><name>TSDB_TABLE_NAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type>    <name>uid</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>tags</name></decl>;</decl_stmt>

  <comment type="line">// if info-&gt;formatData is true, elements are SArray&lt;SSmlKv*&gt;.</comment>
  <comment type="line">// if info-&gt;formatData is false, elements are SHashObj&lt;cols key string, SSmlKv*&gt; for find by key quickly</comment>
  <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>cols</name></decl>;</decl_stmt>
}</block></struct></type> <name>SSmlTableInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>SArray</name>   <modifier>*</modifier></type><name>tags</name></decl>;</decl_stmt>     <comment type="line">// save the origin order to create table</comment>
  <decl_stmt><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>tagHash</name></decl>;</decl_stmt>  <comment type="line">// elements are &lt;key, index in tags&gt;</comment>

  <decl_stmt><decl><type><name>SArray</name>   <modifier>*</modifier></type><name>cols</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>colHash</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>STableMeta</name> <modifier>*</modifier></type><name>tableMeta</name></decl>;</decl_stmt>
}</block></struct></type> <name>SSmlSTableMeta</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
}</block></struct></type> <name>SSmlMsgBuf</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>lineNum</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfSTables</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfCTables</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfCreateSTables</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfAlterColSTables</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfAlterTagSTables</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>parseTime</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>schemaTime</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>insertBindTime</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>insertRpcTime</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>endTime</name></decl>;</decl_stmt>
}</block></struct></type> <name>SSmlCostInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>SRequestObj</name>     <modifier>*</modifier></type><name>request</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tsem_t</name></type>           <name>sem</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>cnt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>total</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TdThreadSpinlock</name></type> <name>lock</name></decl>;</decl_stmt>
}</block></struct></type> <name>Params</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>int64_t</name></type> <name>id</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Params</name> <modifier>*</modifier></type><name>params</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SMLProtocolType</name></type> <name>protocol</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type>          <name>precision</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>            <name>dataFormat</name></decl>;</decl_stmt>  <comment type="line">// true means that the name and order of keys in each line are the same(only for influx protocol)</comment>
  <decl_stmt><decl><type><name>bool</name></type>            <name>isRawLine</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>         <name>ttl</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>childTables</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>superTables</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>pVgHash</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>     <modifier>*</modifier></type><name>exec</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>STscObj</name>     <modifier>*</modifier></type><name>taos</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCatalog</name>    <modifier>*</modifier></type><name>pCatalog</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRequestObj</name> <modifier>*</modifier></type><name>pRequest</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQuery</name>      <modifier>*</modifier></type><name>pQuery</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SSmlCostInfo</name></type> <name>cost</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>affectedRows</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSmlMsgBuf</name></type>   <name>msgBuf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHashObj</name>    <modifier>*</modifier></type><name>dumplicateKey</name></decl>;</decl_stmt>  <comment type="line">// for dumplicate key</comment>
  <decl_stmt><decl><type><name>SArray</name>      <modifier>*</modifier></type><name>colsContainer</name></decl>;</decl_stmt>  <comment type="line">// for cols parse, if dataFormat == false</comment>

  <decl_stmt><decl><type><name>cJSON</name>       <modifier>*</modifier></type><name>root</name></decl>;</decl_stmt>  <comment type="line">// for parse json</comment>
}</block></struct></type> <name>SSmlHandle</name>;</typedef>
<comment type="line">//=================================================================================================</comment>

<comment type="line">//=================================================================================================</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>int64_t</name></type> <name>linesSmlHandleId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>int64_t</name></type>          <name>smlGenId</name><parameter_list>()</parameter_list> <block>{<block_content>
           <decl_stmt><decl><type><name>int64_t</name></type> <name>id</name></decl>;</decl_stmt>

           <do>do <block>{<block_content>
             <expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>atomic_add_fetch_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>linesSmlHandleId</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block> while <condition>(<expr><name>id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>;</do>

           <return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>smlDoubleToInt64OverFlow</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>num</name> <operator>&gt;=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>INT64_MAX</name> <operator>||</operator> <name>num</name> <operator>&lt;=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>INT64_MIN</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>smlCheckDuplicateKey</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>keyLen</name></decl></parameter>, <parameter><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>pHash</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name>pHash</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name>pHash</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>smlBuildInvalidDataMsg</name><parameter_list>(<parameter><decl><type><name>SSmlMsgBuf</name> <modifier>*</modifier></type><name>pBuf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pBuf</name><operator>-&gt;</operator><name>buf</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>msg1</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>msg1</name></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>left</name> <init>= <expr><name><name>pBuf</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>left</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>msg2</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>, <argument><expr><name>left</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>msg2</name></expr></argument>, <argument><expr><name>left</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SML_INVALID_DATA</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>smlGenerateSchemaAction</name><parameter_list>(<parameter><decl><type><name>SSchema</name> <modifier>*</modifier></type><name>colField</name></decl></parameter>, <parameter><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>colHash</name></decl></parameter>, <parameter><decl><type><name>SSmlKv</name> <modifier>*</modifier></type><name>kv</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isTag</name></decl></parameter>,
                                       <parameter><decl><type><name>ESchemaAction</name> <modifier>*</modifier></type><name>action</name></decl></parameter>, <parameter><decl><type><name>SSmlHandle</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>index</name> <init>= <expr><ternary><condition><expr><name>colHash</name></expr> ?</condition><then> <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><call><name>taosHashGet</name><argument_list>(<argument><expr><name>colHash</name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>keyLen</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>index</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>colField</name><index>[<expr><operator>*</operator><name>index</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>!=</operator> <name><name>kv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"SML:0x%"</literal> <name>PRIx64</name> <literal type="string">" point type and db type mismatch. key: %s. point type: %d, db type: %d"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,
             <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>colField</name><index>[<expr><operator>*</operator><name>index</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_TSC_INVALID_VALUE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>colField</name><index>[<expr><operator>*</operator><name>index</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_VARCHAR</name> <operator>&amp;&amp;</operator>
         <operator>(</operator><name><name>colField</name><index>[<expr><operator>*</operator><name>index</name></expr>]</index></name><operator>.</operator><name>bytes</name> <operator>-</operator> <name>VARSTR_HEADER_SIZE</name><operator>)</operator> <operator>&lt;</operator> <name><name>kv</name><operator>-&gt;</operator><name>length</name></name><operator>)</operator> <operator>||</operator>
        <operator>(</operator><name><name>colField</name><index>[<expr><operator>*</operator><name>index</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_NCHAR</name> <operator>&amp;&amp;</operator>
         <operator>(</operator><operator>(</operator><name><name>colField</name><index>[<expr><operator>*</operator><name>index</name></expr>]</index></name><operator>.</operator><name>bytes</name> <operator>-</operator> <name>VARSTR_HEADER_SIZE</name><operator>)</operator> <operator>/</operator> <name>TSDB_NCHAR_SIZE</name> <operator>&lt;</operator> <name><name>kv</name><operator>-&gt;</operator><name>length</name></name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>isTag</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>action</name> <operator>=</operator> <name>SCHEMA_ACTION_CHANGE_TAG_SIZE</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>action</name> <operator>=</operator> <name>SCHEMA_ACTION_CHANGE_COLUMN_SIZE</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>isTag</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>action</name> <operator>=</operator> <name>SCHEMA_ACTION_ADD_TAG</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>action</name> <operator>=</operator> <name>SCHEMA_ACTION_ADD_COLUMN</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>smlFindNearestPowerOf2</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>result</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>result</name> <operator>&lt;=</operator> <name>length</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>result</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_BINARY</name> <operator>&amp;&amp;</operator> <name>result</name> <operator>&gt;</operator> <name>TSDB_MAX_BINARY_LEN</name> <operator>-</operator> <name>VARSTR_HEADER_SIZE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <name>TSDB_MAX_BINARY_LEN</name> <operator>-</operator> <name>VARSTR_HEADER_SIZE</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_NCHAR</name> <operator>&amp;&amp;</operator> <name>result</name> <operator>&gt;</operator> <operator>(</operator><name>TSDB_MAX_BINARY_LEN</name> <operator>-</operator> <name>VARSTR_HEADER_SIZE</name><operator>)</operator> <operator>/</operator> <name>TSDB_NCHAR_SIZE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>TSDB_MAX_BINARY_LEN</name> <operator>-</operator> <name>VARSTR_HEADER_SIZE</name><operator>)</operator> <operator>/</operator> <name>TSDB_NCHAR_SIZE</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_NCHAR</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <name>result</name> <operator>*</operator> <name>TSDB_NCHAR_SIZE</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <name>result</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>smlProcessSchemaAction</name><parameter_list>(<parameter><decl><type><name>SSmlHandle</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>SSchema</name> <modifier>*</modifier></type><name>schemaField</name></decl></parameter>, <parameter><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>schemaHash</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>cols</name></decl></parameter>,
                                      <parameter><decl><type><name>ESchemaAction</name> <modifier>*</modifier></type><name>action</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isTag</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>isTag</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>SSmlKv</name> <modifier>*</modifier></type><name>kv</name> <init>= <expr><operator>(</operator><name>SSmlKv</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>cols</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>smlGenerateSchemaAction</name><argument_list>(<argument><expr><name>schemaField</name></expr></argument>, <argument><expr><name>schemaHash</name></expr></argument>, <argument><expr><name>kv</name></expr></argument>, <argument><expr><name>isTag</name></expr></argument>, <argument><expr><name>action</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>smlCheckMeta</name><parameter_list>(<parameter><decl><type><name>SSchema</name> <modifier>*</modifier></type><name>schema</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>cols</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isTag</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>hashTmp</name> <init>= <expr><call><name>taosHashInit</name><argument_list>(<argument><expr><name>length</name></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name>hashTmp</name></expr></argument>, <argument><expr><name><name>schema</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>schema</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><name>SHORT_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name>isTag</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSmlKv</name> <modifier>*</modifier></type><name>kv</name> <init>= <expr><operator>(</operator><name>SSmlKv</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>cols</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name>hashTmp</name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>keyLen</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name>hashTmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name>hashTmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getBytes</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_BINARY</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_NCHAR</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>smlFindNearestPowerOf2</name><argument_list>(<argument><expr><name>length</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name><name>tDataTypes</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>smlBuildFieldsList</name><parameter_list>(<parameter><decl><type><name>SSmlHandle</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>SSchema</name> <modifier>*</modifier></type><name>schemaField</name></decl></parameter>, <parameter><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>schemaHash</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>cols</name></decl></parameter>,
                                  <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>results</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfCols</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isTag</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSmlKv</name>       <modifier>*</modifier></type><name>kv</name> <init>= <expr><operator>(</operator><name>SSmlKv</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>cols</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ESchemaAction</name></type> <name>action</name> <init>= <expr><name>SCHEMA_ACTION_NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>smlGenerateSchemaAction</name><argument_list>(<argument><expr><name>schemaField</name></expr></argument>, <argument><expr><name>schemaHash</name></expr></argument>, <argument><expr><name>kv</name></expr></argument>, <argument><expr><name>isTag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>action</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>action</name> <operator>==</operator> <name>SCHEMA_ACTION_ADD_COLUMN</name> <operator>||</operator> <name>action</name> <operator>==</operator> <name>SCHEMA_ACTION_ADD_TAG</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SField</name></type> <name>field</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>field</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>kv</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>field</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <call><name>getBytes</name><argument_list>(<argument><expr><name><name>kv</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>field</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>keyLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>results</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>action</name> <operator>==</operator> <name>SCHEMA_ACTION_CHANGE_COLUMN_SIZE</name> <operator>||</operator> <name>action</name> <operator>==</operator> <name>SCHEMA_ACTION_CHANGE_TAG_SIZE</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>index</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><call><name>taosHashGet</name><argument_list>(<argument><expr><name>schemaHash</name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>keyLen</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>uint16_t</name></type>  <name>newIndex</name> <init>= <expr><operator>*</operator><name>index</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>isTag</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>newIndex</name> <operator>-=</operator> <name>numOfCols</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <decl_stmt><decl><type><name>SField</name> <modifier>*</modifier></type><name>field</name> <init>= <expr><operator>(</operator><name>SField</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>results</name></expr></argument>, <argument><expr><name>newIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>field</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <call><name>getBytes</name><argument_list>(<argument><expr><name><name>kv</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// static int32_t smlSendMetaMsg(SSmlHandle *info, SName *pName, SSmlSTableMeta *sTableData,</comment>
<comment type="line">//                               int32_t colVer, int32_t tagVer, int8_t source, uint64_t suid){</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>smlSendMetaMsg</name><parameter_list>(<parameter><decl><type><name>SSmlHandle</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>SName</name> <modifier>*</modifier></type><name>pName</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pColumns</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pTags</name></decl></parameter>, <parameter><decl><type><name>STableMeta</name> <modifier>*</modifier></type><name>pTableMeta</name></decl></parameter>,
                              <parameter><decl><type><name>ESchemaAction</name></type> <name>action</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SRequestObj</name>   <modifier>*</modifier></type><name>pRequest</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMCreateStbReq</name></type> <name>pReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCmdMsgInfo</name></type>    <name>pCmdMsg</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <comment type="line">// put front for free</comment>
  <expr_stmt><expr><name><name>pReq</name><operator>.</operator><name>numOfColumns</name></name> <operator>=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pColumns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>.</operator><name>pColumns</name></name> <operator>=</operator> <name>pColumns</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>.</operator><name>numOfTags</name></name> <operator>=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pTags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>.</operator><name>pTags</name></name> <operator>=</operator> <name>pTags</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildRequest</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>taos</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pRequest</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>syncQuery</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pRequest</name><operator>-&gt;</operator><name>pDb</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_PAR_DB_NOT_SPECIFIED</name></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>action</name> <operator>==</operator> <name>SCHEMA_ACTION_CREATE_STABLE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pReq</name><operator>.</operator><name>colVer</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pReq</name><operator>.</operator><name>tagVer</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pReq</name><operator>.</operator><name>suid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pReq</name><operator>.</operator><name>source</name></name> <operator>=</operator> <name>TD_REQ_FROM_APP</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>action</name> <operator>==</operator> <name>SCHEMA_ACTION_ADD_TAG</name> <operator>||</operator> <name>action</name> <operator>==</operator> <name>SCHEMA_ACTION_CHANGE_TAG_SIZE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pReq</name><operator>.</operator><name>colVer</name></name> <operator>=</operator> <name><name>pTableMeta</name><operator>-&gt;</operator><name>sversion</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pReq</name><operator>.</operator><name>tagVer</name></name> <operator>=</operator> <name><name>pTableMeta</name><operator>-&gt;</operator><name>tversion</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pReq</name><operator>.</operator><name>suid</name></name> <operator>=</operator> <name><name>pTableMeta</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pReq</name><operator>.</operator><name>source</name></name> <operator>=</operator> <name>TD_REQ_FROM_TAOX</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>action</name> <operator>==</operator> <name>SCHEMA_ACTION_ADD_COLUMN</name> <operator>||</operator> <name>action</name> <operator>==</operator> <name>SCHEMA_ACTION_CHANGE_COLUMN_SIZE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pReq</name><operator>.</operator><name>colVer</name></name> <operator>=</operator> <name><name>pTableMeta</name><operator>-&gt;</operator><name>sversion</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pReq</name><operator>.</operator><name>tagVer</name></name> <operator>=</operator> <name><name>pTableMeta</name><operator>-&gt;</operator><name>tversion</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pReq</name><operator>.</operator><name>suid</name></name> <operator>=</operator> <name><name>pTableMeta</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pReq</name><operator>.</operator><name>source</name></name> <operator>=</operator> <name>TD_REQ_FROM_TAOX</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pReq</name><operator>.</operator><name>numOfTags</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pReq</name><operator>.</operator><name>numOfTags</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SField</name></type> <name>field</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>field</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_NCHAR</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>field</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>field</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>tsSmlTagName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pReq</name><operator>.</operator><name>pTags</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pReq</name><operator>.</operator><name>commentLen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>.</operator><name>igExists</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tNameExtractFullName</name><argument_list>(<argument><expr><name>pName</name></expr></argument>, <argument><expr><name><name>pReq</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pCmdMsg</name><operator>.</operator><name>epSet</name></name> <operator>=</operator> <call><name>getEpSet_s</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>taos</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>mgmtEp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCmdMsg</name><operator>.</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_MND_CREATE_STB</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCmdMsg</name><operator>.</operator><name>msgLen</name></name> <operator>=</operator> <call><name>tSerializeSMCreateStbReq</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCmdMsg</name><operator>.</operator><name>pMsg</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name><name>pCmdMsg</name><operator>.</operator><name>msgLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pCmdMsg</name><operator>.</operator><name>pMsg</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tSerializeSMCreateStbReq</name><argument_list>(<argument><expr><name><name>pCmdMsg</name><operator>.</operator><name>pMsg</name></name></expr></argument>, <argument><expr><name><name>pCmdMsg</name><operator>.</operator><name>msgLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SQuery</name></type> <name>pQuery</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pQuery</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pQuery</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pQuery</name><operator>.</operator><name>execMode</name></name> <operator>=</operator> <name>QUERY_EXEC_MODE_RPC</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pQuery</name><operator>.</operator><name>pCmdMsg</name></name> <operator>=</operator> <operator>&amp;</operator><name>pCmdMsg</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pQuery</name><operator>.</operator><name>msgType</name></name> <operator>=</operator> <name><name>pQuery</name><operator>.</operator><name>pCmdMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pQuery</name><operator>.</operator><name>stableQuery</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>launchQueryImpl</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pQuery</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pRequest</name><operator>-&gt;</operator><name>code</name></name> <operator>==</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>catalogRemoveTableMeta</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>pCatalog</name></name></expr></argument>, <argument><expr><name>pName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>code</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pCmdMsg</name><operator>.</operator><name>pMsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
  <expr_stmt><expr><call><name>destroyRequest</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tFreeSMCreateStbReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>smlModifyDBSchemas</name><parameter_list>(<parameter><decl><type><name>SSmlHandle</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHashObj</name>   <modifier>*</modifier></type><name>hashTmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STableMeta</name> <modifier>*</modifier></type><name>pTableMeta</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SName</name></type> <name>pName</name> <init>= <expr><block>{<expr><name>TSDB_TABLE_NAME_T</name></expr>, <expr><name><name>info</name><operator>-&gt;</operator><name>taos</name><operator>-&gt;</operator><name>acctId</name></name></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>pName</name><operator>.</operator><name>dbname</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>pRequest</name><operator>-&gt;</operator><name>pDb</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pName</name><operator>.</operator><name>dbname</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SRequestConnInfo</name></type> <name>conn</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>conn</name><operator>.</operator><name>pTrans</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>taos</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>pTransporter</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conn</name><operator>.</operator><name>requestId</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conn</name><operator>.</operator><name>requestObjRefId</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>pRequest</name><operator>-&gt;</operator><name>self</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conn</name><operator>.</operator><name>mgmtEps</name></name> <operator>=</operator> <call><name>getEpSet_s</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>taos</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>mgmtEp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSmlSTableMeta</name> <modifier>*</modifier><modifier>*</modifier></type><name>tableMetaSml</name> <init>= <expr><operator>(</operator><name>SSmlSTableMeta</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>superTables</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>tableMetaSml</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSmlSTableMeta</name> <modifier>*</modifier></type><name>sTableData</name> <init>= <expr><operator>*</operator><name>tableMetaSml</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>            <name>needCheckMeta</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>  <comment type="line">// for multi thread</comment>

    <decl_stmt><decl><type><name>size_t</name></type> <name>superTableLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name>  <modifier>*</modifier></type><name>superTable</name> <init>= <expr><call><name>taosHashGetKey</name><argument_list>(<argument><expr><name>tableMetaSml</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>superTableLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pName</name><operator>.</operator><name>tname</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TSDB_TABLE_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pName</name><operator>.</operator><name>tname</name></name></expr></argument>, <argument><expr><name>superTable</name></expr></argument>, <argument><expr><name>superTableLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogGetSTableMeta</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>pCatalog</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTableMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>TSDB_CODE_PAR_TABLE_NOT_EXIST</name> <operator>||</operator> <name>code</name> <operator>==</operator> <name>TSDB_CODE_MND_STB_NOT_EXIST</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pColumns</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>sTableData</name><operator>-&gt;</operator><name>cols</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SField</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pTags</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>sTableData</name><operator>-&gt;</operator><name>tags</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SField</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>smlBuildFieldsList</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>sTableData</name><operator>-&gt;</operator><name>tags</name></name></expr></argument>, <argument><expr><name>pTags</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>smlBuildFieldsList</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>sTableData</name><operator>-&gt;</operator><name>cols</name></name></expr></argument>, <argument><expr><name>pColumns</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>smlSendMetaMsg</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pName</name></expr></argument>, <argument><expr><name>pColumns</name></expr></argument>, <argument><expr><name>pTags</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SCHEMA_ACTION_CREATE_STABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"SML:0x%"</literal> <name>PRIx64</name> <literal type="string">" smlSendMetaMsg failed. can not create %s"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>pName</name><operator>.</operator><name>tname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>end</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>numOfCreateSTables</name></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pTableMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogGetSTableMeta</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>pCatalog</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTableMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"SML:0x%"</literal> <name>PRIx64</name> <literal type="string">" catalogGetSTableMeta failed. super table name %s"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>pName</name><operator>.</operator><name>tname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>end</name>;</goto>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>code</name> <operator>==</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>hashTmp</name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>numOfTags</name></name></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>,
                             <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>uint16_t</name></type> <name>i</name> <init>= <expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>numOfColumns</name></name></expr></init></decl>;</init>
           <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pTableMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>numOfColumns</name></name> <operator>+</operator> <name><name>pTableMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>numOfTags</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name>hashTmp</name></expr></argument>, <argument><expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>schema</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>schema</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><name>SHORT_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>

      <decl_stmt><decl><type><name>ESchemaAction</name></type> <name>action</name> <init>= <expr><name>SCHEMA_ACTION_NULL</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>smlProcessSchemaAction</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>schema</name></name></expr></argument>, <argument><expr><name>hashTmp</name></expr></argument>, <argument><expr><name><name>sTableData</name><operator>-&gt;</operator><name>tags</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>action</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <goto>goto <name>end</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>action</name> <operator>!=</operator> <name>SCHEMA_ACTION_NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pColumns</name> <init>=
            <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>sTableData</name><operator>-&gt;</operator><name>cols</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>pTableMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>numOfColumns</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SField</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pTags</name> <init>=
            <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>sTableData</name><operator>-&gt;</operator><name>tags</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>pTableMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>numOfTags</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SField</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>uint16_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pTableMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>numOfColumns</name></name> <operator>+</operator> <name><name>pTableMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>numOfTags</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
          <decl_stmt><decl><type><name>SField</name></type> <name>field</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name><name>field</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>pTableMeta</name><operator>-&gt;</operator><name>schema</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>field</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name><name>pTableMeta</name><operator>-&gt;</operator><name>schema</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>field</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>schema</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>pTableMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>numOfColumns</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pColumns</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pTags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>smlBuildFieldsList</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>schema</name></name></expr></argument>, <argument><expr><name>hashTmp</name></expr></argument>, <argument><expr><name><name>sTableData</name><operator>-&gt;</operator><name>tags</name></name></expr></argument>, <argument><expr><name>pTags</name></expr></argument>,
                           <argument><expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>numOfColumns</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>smlSendMetaMsg</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pName</name></expr></argument>, <argument><expr><name>pColumns</name></expr></argument>, <argument><expr><name>pTags</name></expr></argument>, <argument><expr><name>pTableMeta</name></expr></argument>, <argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"SML:0x%"</literal> <name>PRIx64</name> <literal type="string">" smlSendMetaMsg failed. can not create %s"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>pName</name><operator>.</operator><name>tname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <goto>goto <name>end</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>numOfAlterTagSTables</name></name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pTableMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogRefreshTableMeta</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>pCatalog</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pName</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
          <goto>goto <name>end</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogGetSTableMeta</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>pCatalog</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTableMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
          <goto>goto <name>end</name>;</goto>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>taosHashClear</name><argument_list>(<argument><expr><name>hashTmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>uint16_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pTableMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>numOfColumns</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name>hashTmp</name></expr></argument>, <argument><expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>schema</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>schema</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><name>SHORT_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><name>action</name> <operator>=</operator> <name>SCHEMA_ACTION_NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>smlProcessSchemaAction</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>schema</name></name></expr></argument>, <argument><expr><name>hashTmp</name></expr></argument>, <argument><expr><name><name>sTableData</name><operator>-&gt;</operator><name>cols</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>action</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <goto>goto <name>end</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>action</name> <operator>!=</operator> <name>SCHEMA_ACTION_NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pColumns</name> <init>=
            <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>sTableData</name><operator>-&gt;</operator><name>cols</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>pTableMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>numOfColumns</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SField</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pTags</name> <init>=
            <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>sTableData</name><operator>-&gt;</operator><name>tags</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>pTableMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>numOfTags</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SField</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>uint16_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pTableMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>numOfColumns</name></name> <operator>+</operator> <name><name>pTableMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>numOfTags</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
          <decl_stmt><decl><type><name>SField</name></type> <name>field</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name><name>field</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>pTableMeta</name><operator>-&gt;</operator><name>schema</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>field</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name><name>pTableMeta</name><operator>-&gt;</operator><name>schema</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>field</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>schema</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>pTableMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>numOfColumns</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pColumns</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pTags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><call><name>smlBuildFieldsList</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>schema</name></name></expr></argument>, <argument><expr><name>hashTmp</name></expr></argument>, <argument><expr><name><name>sTableData</name><operator>-&gt;</operator><name>cols</name></name></expr></argument>, <argument><expr><name>pColumns</name></expr></argument>,
                           <argument><expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>numOfColumns</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>smlSendMetaMsg</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pName</name></expr></argument>, <argument><expr><name>pColumns</name></expr></argument>, <argument><expr><name>pTags</name></expr></argument>, <argument><expr><name>pTableMeta</name></expr></argument>, <argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"SML:0x%"</literal> <name>PRIx64</name> <literal type="string">" smlSendMetaMsg failed. can not create %s"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>pName</name><operator>.</operator><name>tname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <goto>goto <name>end</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>numOfAlterColSTables</name></name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pTableMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogRefreshTableMeta</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>pCatalog</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pName</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
          <goto>goto <name>end</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogGetSTableMeta</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>pCatalog</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTableMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"SML:0x%"</literal> <name>PRIx64</name> <literal type="string">" catalogGetSTableMeta failed. super table name %s"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>pName</name><operator>.</operator><name>tname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <goto>goto <name>end</name>;</goto>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>needCheckMeta</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name>hashTmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>hashTmp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"SML:0x%"</literal> <name>PRIx64</name> <literal type="string">" load table meta error: %s"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>end</name>;</goto>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>needCheckMeta</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>smlCheckMeta</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pTableMeta</name><operator>-&gt;</operator><name>schema</name><index>[<expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>numOfColumns</name></name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>numOfTags</name></name></expr></argument>,
                          <argument><expr><name><name>sTableData</name><operator>-&gt;</operator><name>tags</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"SML:0x%"</literal> <name>PRIx64</name> <literal type="string">" check tag failed. super table name %s"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>pName</name><operator>.</operator><name>tname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>end</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>smlCheckMeta</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pTableMeta</name><operator>-&gt;</operator><name>schema</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>numOfColumns</name></name></expr></argument>, <argument><expr><name><name>sTableData</name><operator>-&gt;</operator><name>cols</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"SML:0x%"</literal> <name>PRIx64</name> <literal type="string">" check cols failed. super table name %s"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>pName</name><operator>.</operator><name>tname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>end</name>;</goto>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>sTableData</name><operator>-&gt;</operator><name>tableMeta</name></name> <operator>=</operator> <name>pTableMeta</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>tableMetaSml</name> <operator>=</operator> <operator>(</operator><name>SSmlSTableMeta</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>superTables</name></name></expr></argument>, <argument><expr><name>tableMetaSml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>end</name>:</label>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name>hashTmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pTableMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//  catalogRefreshTableMeta(info-&gt;pCatalog, &amp;conn, &amp;pName, 1);</comment>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>smlParseNumber</name><parameter_list>(<parameter><decl><type><name>SSmlKv</name> <modifier>*</modifier></type><name>kvVal</name></decl></parameter>, <parameter><decl><type><name>SSmlMsgBuf</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pVal</name> <init>= <expr><name><name>kvVal</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>len</name> <init>= <expr><name><name>kvVal</name><operator>-&gt;</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>endptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type>      <name>result</name> <init>= <expr><call><name>taosStr2Double</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pVal</name> <operator>==</operator> <name>endptr</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>smlBuildInvalidDataMsg</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"invalid data"</literal></expr></argument>, <argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>left</name> <init>= <expr><name>len</name> <operator>-</operator> <operator>(</operator><name>endptr</name> <operator>-</operator> <name>pVal</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>left</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>left</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <call><name>strncasecmp</name><argument_list>(<argument><expr><name>endptr</name></expr></argument>, <argument><expr><literal type="string">"f64"</literal></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>kvVal</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_DOUBLE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>kvVal</name><operator>-&gt;</operator><name>d</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>left</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <call><name>strncasecmp</name><argument_list>(<argument><expr><name>endptr</name></expr></argument>, <argument><expr><literal type="string">"f32"</literal></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_VALID_FLOAT</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>smlBuildInvalidDataMsg</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"float out of range[-3.402823466e+38,3.402823466e+38]"</literal></expr></argument>, <argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>kvVal</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_FLOAT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>kvVal</name><operator>-&gt;</operator><name>f</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>result</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>left</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>endptr</name> <operator>==</operator> <literal type="char">'i'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>left</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <call><name>strncasecmp</name><argument_list>(<argument><expr><name>endptr</name></expr></argument>, <argument><expr><literal type="string">"i64"</literal></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>smlDoubleToInt64OverFlow</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>tmp</name> <init>= <expr><call><name>taosStr2Int64</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endptr</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ERANGE</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>smlBuildInvalidDataMsg</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"big int out of range[-9223372036854775808,9223372036854775807]"</literal></expr></argument>, <argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>false</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>kvVal</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_BIGINT</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>kvVal</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
      <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>kvVal</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_BIGINT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>kvVal</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>result</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>left</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>endptr</name> <operator>==</operator> <literal type="char">'u'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>left</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <call><name>strncasecmp</name><argument_list>(<argument><expr><name>endptr</name></expr></argument>, <argument><expr><literal type="string">"u64"</literal></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>&gt;=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>UINT64_MAX</name> <operator>||</operator> <name>result</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>uint64_t</name></type> <name>tmp</name> <init>= <expr><call><name>taosStr2UInt64</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endptr</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ERANGE</name> <operator>||</operator> <name>result</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>smlBuildInvalidDataMsg</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"unsigned big int out of range[0,18446744073709551615]"</literal></expr></argument>, <argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>false</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>kvVal</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_UBIGINT</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>kvVal</name><operator>-&gt;</operator><name>u</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
      <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>kvVal</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_UBIGINT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>kvVal</name><operator>-&gt;</operator><name>u</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>left</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <call><name>strncasecmp</name><argument_list>(<argument><expr><name>endptr</name></expr></argument>, <argument><expr><literal type="string">"i32"</literal></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_VALID_INT</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>smlBuildInvalidDataMsg</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"int out of range[-2147483648,2147483647]"</literal></expr></argument>, <argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>kvVal</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_INT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>kvVal</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>left</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <call><name>strncasecmp</name><argument_list>(<argument><expr><name>endptr</name></expr></argument>, <argument><expr><literal type="string">"u32"</literal></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_VALID_UINT</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>smlBuildInvalidDataMsg</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"unsigned int out of range[0,4294967295]"</literal></expr></argument>, <argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>kvVal</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_UINT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>kvVal</name><operator>-&gt;</operator><name>u</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>left</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <call><name>strncasecmp</name><argument_list>(<argument><expr><name>endptr</name></expr></argument>, <argument><expr><literal type="string">"i16"</literal></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_VALID_SMALLINT</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>smlBuildInvalidDataMsg</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"small int our of range[-32768,32767]"</literal></expr></argument>, <argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>kvVal</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_SMALLINT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>kvVal</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>left</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <call><name>strncasecmp</name><argument_list>(<argument><expr><name>endptr</name></expr></argument>, <argument><expr><literal type="string">"u16"</literal></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_VALID_USMALLINT</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>smlBuildInvalidDataMsg</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"unsigned small int out of rang[0,65535]"</literal></expr></argument>, <argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>kvVal</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_USMALLINT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>kvVal</name><operator>-&gt;</operator><name>u</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>left</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>strncasecmp</name><argument_list>(<argument><expr><name>endptr</name></expr></argument>, <argument><expr><literal type="string">"i8"</literal></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_VALID_TINYINT</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>smlBuildInvalidDataMsg</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"tiny int out of range[-128,127]"</literal></expr></argument>, <argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>kvVal</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_TINYINT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>kvVal</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>left</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>strncasecmp</name><argument_list>(<argument><expr><name>endptr</name></expr></argument>, <argument><expr><literal type="string">"u8"</literal></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_VALID_UTINYINT</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>smlBuildInvalidDataMsg</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"unsigned tiny int out of range[0,255]"</literal></expr></argument>, <argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>kvVal</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_UTINYINT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>kvVal</name><operator>-&gt;</operator><name>u</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>smlBuildInvalidDataMsg</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"invalid data"</literal></expr></argument>, <argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>smlParseBool</name><parameter_list>(<parameter><decl><type><name>SSmlKv</name> <modifier>*</modifier></type><name>kvVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pVal</name> <init>= <expr><name><name>kvVal</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>len</name> <init>= <expr><name><name>kvVal</name><operator>-&gt;</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pVal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'t'</literal> <operator>||</operator> <name><name>pVal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'T'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>kvVal</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pVal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'f'</literal> <operator>||</operator> <name><name>pVal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'F'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>kvVal</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>==</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncasecmp</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>kvVal</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>==</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncasecmp</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>kvVal</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>smlIsBinary</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// binary: "abc"</comment>
  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pVal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'"'</literal> <operator>&amp;&amp;</operator> <name><name>pVal</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>smlIsNchar</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// nchar: L"abc"</comment>
  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pVal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'l'</literal> <operator>||</operator> <name><name>pVal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'L'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>pVal</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'"'</literal> <operator>&amp;&amp;</operator> <name><name>pVal</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>smlGetTimeValue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>endPtr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>tsInt64</name> <init>= <expr><call><name>taosStr2Int64</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endPtr</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>value</name> <operator>+</operator> <name>len</name> <operator>!=</operator> <name>endPtr</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>ts</name> <init>= <expr><name>tsInt64</name></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_TIME_PRECISION_HOURS</name></expr>:</case>
      <expr_stmt><expr><name>ts</name> <operator>*=</operator> <name>NANOSECOND_PER_HOUR</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>tsInt64</name> <operator>*=</operator> <name>NANOSECOND_PER_HOUR</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_TIME_PRECISION_MINUTES</name></expr>:</case>
      <expr_stmt><expr><name>ts</name> <operator>*=</operator> <name>NANOSECOND_PER_MINUTE</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>tsInt64</name> <operator>*=</operator> <name>NANOSECOND_PER_MINUTE</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_TIME_PRECISION_SECONDS</name></expr>:</case>
      <expr_stmt><expr><name>ts</name> <operator>*=</operator> <name>NANOSECOND_PER_SEC</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>tsInt64</name> <operator>*=</operator> <name>NANOSECOND_PER_SEC</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_TIME_PRECISION_MILLI</name></expr>:</case>
      <expr_stmt><expr><name>ts</name> <operator>*=</operator> <name>NANOSECOND_PER_MSEC</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>tsInt64</name> <operator>*=</operator> <name>NANOSECOND_PER_MSEC</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_TIME_PRECISION_MICRO</name></expr>:</case>
      <expr_stmt><expr><name>ts</name> <operator>*=</operator> <name>NANOSECOND_PER_USEC</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>tsInt64</name> <operator>*=</operator> <name>NANOSECOND_PER_USEC</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_TIME_PRECISION_NANO</name></expr>:</case>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></switch>
  <if_stmt><if>if <condition>(<expr><name>ts</name> <operator>&gt;=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>INT64_MAX</name> <operator>||</operator> <name>ts</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>tsInt64</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int8_t</name></type> <name>smlGetTsTypeByLen</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <name>TSDB_TIME_PRECISION_SEC_DIGITS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_TIME_PRECISION_SECONDS</name></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>==</operator> <name>TSDB_TIME_PRECISION_MILLI_DIGITS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_TIME_PRECISION_MILLI</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int8_t</name></type> <name>smlGetTsTypeByPrecision</name><parameter_list>(<parameter><decl><type><name>int8_t</name></type> <name>precision</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>precision</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_SML_TIMESTAMP_HOURS</name></expr>:</case>
      <return>return <expr><name>TSDB_TIME_PRECISION_HOURS</name></expr>;</return>
    <case>case <expr><name>TSDB_SML_TIMESTAMP_MILLI_SECONDS</name></expr>:</case>
      <return>return <expr><name>TSDB_TIME_PRECISION_MILLI</name></expr>;</return>
    <case>case <expr><name>TSDB_SML_TIMESTAMP_NANO_SECONDS</name></expr>:</case>
    <case>case <expr><name>TSDB_SML_TIMESTAMP_NOT_CONFIGURED</name></expr>:</case>
      <return>return <expr><name>TSDB_TIME_PRECISION_NANO</name></expr>;</return>
    <case>case <expr><name>TSDB_SML_TIMESTAMP_MICRO_SECONDS</name></expr>:</case>
      <return>return <expr><name>TSDB_TIME_PRECISION_MICRO</name></expr>;</return>
    <case>case <expr><name>TSDB_SML_TIMESTAMP_SECONDS</name></expr>:</case>
      <return>return <expr><name>TSDB_TIME_PRECISION_SECONDS</name></expr>;</return>
    <case>case <expr><name>TSDB_SML_TIMESTAMP_MINUTES</name></expr>:</case>
      <return>return <expr><name>TSDB_TIME_PRECISION_MINUTES</name></expr>;</return>
    <default>default:</default>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>smlParseInfluxTime</name><parameter_list>(<parameter><decl><type><name>SSmlHandle</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>len</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>taosGetTimestampNs</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int8_t</name></type> <name>tsType</name> <init>= <expr><call><name>smlGetTsTypeByPrecision</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tsType</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>smlBuildInvalidDataMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><literal type="string">"invalid timestamp precision"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>ts</name> <init>= <expr><call><name>smlGetTimeValue</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>tsType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ts</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>smlBuildInvalidDataMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><literal type="string">"invalid timestamp"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>ts</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>smlParseOpenTsdbTime</name><parameter_list>(<parameter><decl><type><name>SSmlHandle</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>smlBuildInvalidDataMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><literal type="string">"timestamp can not be null"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>taosGetTimestampNs</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type> <name>tsType</name> <init>= <expr><call><name>smlGetTsTypeByLen</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tsType</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>smlBuildInvalidDataMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>,
                           <argument><expr><literal type="string">"timestamp precision can only be seconds(10 digits) or milli seconds(13 digits)"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>ts</name> <init>= <expr><call><name>smlGetTimeValue</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>tsType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ts</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>smlBuildInvalidDataMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><literal type="string">"invalid timestamp"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>ts</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>smlParseTS</name><parameter_list>(<parameter><decl><type><name>SSmlHandle</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>cols</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>ts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>protocol</name></name> <operator>==</operator> <name>TSDB_SML_LINE_PROTOCOL</name></expr>)</condition> <block>{<block_content>
    <comment type="line">//    uError("SML:data:%s,len:%d", data, len);</comment>
    <expr_stmt><expr><name>ts</name> <operator>=</operator> <call><name>smlParseInfluxTime</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>protocol</name></name> <operator>==</operator> <name>TSDB_SML_TELNET_PROTOCOL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ts</name> <operator>=</operator> <call><name>smlParseOpenTsdbTime</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"SML:0x%"</literal> <name>PRIx64</name> <literal type="string">" smlParseTS:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>ts</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"SML:0x%"</literal> <name>PRIx64</name> <literal type="string">" smlParseTS error:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_INVALID_TIMESTAMP</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// add ts to</comment>
  <decl_stmt><decl><type><name>SSmlKv</name> <modifier>*</modifier></type><name>kv</name> <init>= <expr><operator>(</operator><name>SSmlKv</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSmlKv</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>kv</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>TS</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>keyLen</name></name> <operator>=</operator> <name>TS_LEN</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <name>ts</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><name><name>tDataTypes</name><index>[<expr><name><name>kv</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>cols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>smlParseValue</name><parameter_list>(<parameter><decl><type><name>SSmlKv</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>, <parameter><decl><type><name>SSmlMsgBuf</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// binary</comment>
  <if_stmt><if>if <condition>(<expr><call><name>smlIsBinary</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>length</name></name> <operator>-=</operator> <name>BINARY_ADD_LEN</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pVal</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;</operator> <name>TSDB_MAX_BINARY_LEN</name> <operator>-</operator> <name>VARSTR_HEADER_SIZE</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_PAR_INVALID_VAR_COLUMN_LEN</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>value</name></name> <operator>+=</operator> <operator>(</operator><name>BINARY_ADD_LEN</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// nchar</comment>
  <if_stmt><if>if <condition>(<expr><call><name>smlIsNchar</name><argument_list>(<argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_NCHAR</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>length</name></name> <operator>-=</operator> <name>NCHAR_ADD_LEN</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pVal</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;</operator> <operator>(</operator><name>TSDB_MAX_NCHAR_LEN</name> <operator>-</operator> <name>VARSTR_HEADER_SIZE</name><operator>)</operator> <operator>/</operator> <name>TSDB_NCHAR_SIZE</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_PAR_INVALID_VAR_COLUMN_LEN</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>value</name></name> <operator>+=</operator> <operator>(</operator><name>NCHAR_ADD_LEN</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// bool</comment>
  <if_stmt><if>if <condition>(<expr><call><name>smlParseBool</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_BOOL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><name><name>tDataTypes</name><index>[<expr><name><name>pVal</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// number</comment>
  <if_stmt><if>if <condition>(<expr><call><name>smlParseNumber</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><name><name>tDataTypes</name><index>[<expr><name><name>pVal</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_TSC_INVALID_VALUE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>smlParseInfluxString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sql</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sqlEnd</name></decl></parameter>, <parameter><decl><type><name>SSmlLineInfo</name> <modifier>*</modifier></type><name>elements</name></decl></parameter>, <parameter><decl><type><name>SSmlMsgBuf</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>sql</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>TSDB_CODE_SML_INVALID_DATA</name></expr>;</return></block_content></block></if></if_stmt>
  <macro><name>JUMP_SPACE</name><argument_list>(<argument>sql</argument>, <argument>sqlEnd</argument>)</argument_list></macro>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>sql</name> <operator>==</operator> <name>COMMA</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>TSDB_CODE_SML_INVALID_DATA</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>elements</name><operator>-&gt;</operator><name>measure</name></name> <operator>=</operator> <name>sql</name></expr>;</expr_stmt>

  <comment type="line">// parse measure</comment>
  <while>while <condition>(<expr><name>sql</name> <operator>&lt;</operator> <name>sqlEnd</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>sql</name> <operator>!=</operator> <name><name>elements</name><operator>-&gt;</operator><name>measure</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>IS_SLASH_LETTER</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>MOVE_FORWARD_ONE</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><name>sqlEnd</name> <operator>-</operator> <name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>sqlEnd</name><operator>--</operator></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IS_COMMA</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>IS_SPACE</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>sql</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><name><name>elements</name><operator>-&gt;</operator><name>measureLen</name></name> <operator>=</operator> <name>sql</name> <operator>-</operator> <name><name>elements</name><operator>-&gt;</operator><name>measure</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>IS_INVALID_TABLE_LEN</name><argument_list>(<argument><expr><name><name>elements</name><operator>-&gt;</operator><name>measureLen</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>smlBuildInvalidDataMsg</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"measure is empty or too large than 192"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_TSC_INVALID_TABLE_ID_LENGTH</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// parse tag</comment>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>sql</name> <operator>==</operator> <name>SPACE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>elements</name><operator>-&gt;</operator><name>tagsLen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>sql</name> <operator>==</operator> <name>COMMA</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>sql</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>elements</name><operator>-&gt;</operator><name>tags</name></name> <operator>=</operator> <name>sql</name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>sql</name> <operator>&lt;</operator> <name>sqlEnd</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>IS_SPACE</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>sql</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><name><name>elements</name><operator>-&gt;</operator><name>tagsLen</name></name> <operator>=</operator> <name>sql</name> <operator>-</operator> <name><name>elements</name><operator>-&gt;</operator><name>tags</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>elements</name><operator>-&gt;</operator><name>measureTagsLen</name></name> <operator>=</operator> <name>sql</name> <operator>-</operator> <name><name>elements</name><operator>-&gt;</operator><name>measure</name></name></expr>;</expr_stmt>

  <comment type="line">// parse cols</comment>
  <macro><name>JUMP_SPACE</name><argument_list>(<argument>sql</argument>, <argument>sqlEnd</argument>)</argument_list></macro>
  <expr_stmt><expr><name><name>elements</name><operator>-&gt;</operator><name>cols</name></name> <operator>=</operator> <name>sql</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>isInQuote</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>sql</name> <operator>&lt;</operator> <name>sqlEnd</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>IS_QUOTE</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>isInQuote</name> <operator>=</operator> <operator>!</operator><name>isInQuote</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isInQuote</name> <operator>&amp;&amp;</operator> <call><name>IS_SPACE</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>sql</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if <condition>(<expr><name>isInQuote</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>smlBuildInvalidDataMsg</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"only one quote"</literal></expr></argument>, <argument><expr><name><name>elements</name><operator>-&gt;</operator><name>cols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SML_INVALID_DATA</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>elements</name><operator>-&gt;</operator><name>colsLen</name></name> <operator>=</operator> <name>sql</name> <operator>-</operator> <name><name>elements</name><operator>-&gt;</operator><name>cols</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>elements</name><operator>-&gt;</operator><name>colsLen</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>smlBuildInvalidDataMsg</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"cols is empty"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SML_INVALID_DATA</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// parse timestamp</comment>
  <macro><name>JUMP_SPACE</name><argument_list>(<argument>sql</argument>, <argument>sqlEnd</argument>)</argument_list></macro>
  <expr_stmt><expr><name><name>elements</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>=</operator> <name>sql</name></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>sql</name> <operator>&lt;</operator> <name>sqlEnd</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>sql</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>sql</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><name><name>elements</name><operator>-&gt;</operator><name>timestampLen</name></name> <operator>=</operator> <name>sql</name> <operator>-</operator> <name><name>elements</name><operator>-&gt;</operator><name>timestamp</name></name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>smlParseTelnetElement</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>sql</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sqlEnd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <while>while <condition>(<expr><operator>*</operator><name>sql</name> <operator>&lt;</operator> <name>sqlEnd</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>sql</name> <operator>!=</operator> <name>SPACE</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><operator>*</operator><name>data</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <operator>*</operator><name>sql</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><operator>*</operator><name>sql</name> <operator>==</operator> <name>SPACE</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>data</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <operator>*</operator><name>sql</name> <operator>-</operator> <operator>*</operator><name>data</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>sql</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>smlParseTelnetTags</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sqlEnd</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>cols</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>childTableName</name></decl></parameter>,
                                  <parameter><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>dumplicateKey</name></decl></parameter>, <parameter><decl><type><name>SSmlMsgBuf</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>cols</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sql</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>      <name>childTableNameLen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>tsSmlChildTableName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>sql</name> <operator>&lt;</operator> <name>sqlEnd</name></expr>)</condition> <block>{<block_content>
    <macro><name>JUMP_SPACE</name><argument_list>(<argument>sql</argument>, <argument>sqlEnd</argument>)</argument_list></macro>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>sql</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><name>sql</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>     <name>keyLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// parse key</comment>
    <while>while <condition>(<expr><name>sql</name> <operator>&lt;</operator> <name>sqlEnd</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>sql</name> <operator>==</operator> <name>SPACE</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>smlBuildInvalidDataMsg</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"invalid data"</literal></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>TSDB_CODE_SML_INVALID_DATA</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>sql</name> <operator>==</operator> <name>EQUAL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>keyLen</name> <operator>=</operator> <name>sql</name> <operator>-</operator> <name>key</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>sql</name><operator>++</operator></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>sql</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if <condition>(<expr><call><name>IS_INVALID_COL_LEN</name><argument_list>(<argument><expr><name>keyLen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>smlBuildInvalidDataMsg</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"invalid key or key is too long than 64"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_TSC_INVALID_COLUMN_LENGTH</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>smlCheckDuplicateKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>, <argument><expr><name>dumplicateKey</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>smlBuildInvalidDataMsg</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"dumplicate key"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_TSC_DUP_NAMES</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// parse value</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><name>sql</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>     <name>valueLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>sql</name> <operator>&lt;</operator> <name>sqlEnd</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// parse value</comment>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>sql</name> <operator>==</operator> <name>SPACE</name></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>sql</name> <operator>==</operator> <name>EQUAL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>smlBuildInvalidDataMsg</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"invalid data"</literal></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>TSDB_CODE_SML_INVALID_DATA</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>sql</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><name>valueLen</name> <operator>=</operator> <name>sql</name> <operator>-</operator> <name>value</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>valueLen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>smlBuildInvalidDataMsg</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"invalid value"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_TSC_INVALID_VALUE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// handle child table name</comment>
    <if_stmt><if>if <condition>(<expr><name>childTableNameLen</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>tsSmlChildTableName</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>childTableName</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TSDB_TABLE_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>childTableName</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>valueLen</name> <operator>&lt;</operator> <name>TSDB_TABLE_NAME_LEN</name></expr> ?</condition><then> <expr><name>valueLen</name></expr> </then><else>: <expr><name>TSDB_TABLE_NAME_LEN</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>valueLen</name> <operator>&gt;</operator> <operator>(</operator><name>TSDB_MAX_NCHAR_LEN</name> <operator>-</operator> <name>VARSTR_HEADER_SIZE</name><operator>)</operator> <operator>/</operator> <name>TSDB_NCHAR_SIZE</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_PAR_INVALID_VAR_COLUMN_LEN</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// add kv to SSmlKv</comment>
    <decl_stmt><decl><type><name>SSmlKv</name> <modifier>*</modifier></type><name>kv</name> <init>= <expr><operator>(</operator><name>SSmlKv</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSmlKv</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>kv</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>keyLen</name></name> <operator>=</operator> <name>keyLen</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name>valueLen</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_NCHAR</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>cols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// format: &lt;metric&gt; &lt;timestamp&gt; &lt;value&gt; &lt;tagk_1&gt;=&lt;tagv_1&gt;[ &lt;tagk_n&gt;=&lt;tagv_n&gt;]</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>smlParseTelnetString</name><parameter_list>(<parameter><decl><type><name>SSmlHandle</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sql</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sqlEnd</name></decl></parameter>, <parameter><decl><type><name>SSmlTableInfo</name> <modifier>*</modifier></type><name>tinfo</name></decl></parameter>,
                                    <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>cols</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>sql</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>TSDB_CODE_SML_INVALID_DATA</name></expr>;</return></block_content></block></if></if_stmt>

  <comment type="line">// parse metric</comment>
  <expr_stmt><expr><call><name>smlParseTelnetElement</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sql</name></expr></argument>, <argument><expr><name>sqlEnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tinfo</name><operator>-&gt;</operator><name>sTableName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tinfo</name><operator>-&gt;</operator><name>sTableNameLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>tinfo</name><operator>-&gt;</operator><name>sTableName</name></name><operator>)</operator> <operator>||</operator> <call><name>IS_INVALID_TABLE_LEN</name><argument_list>(<argument><expr><name><name>tinfo</name><operator>-&gt;</operator><name>sTableNameLen</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>smlBuildInvalidDataMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><literal type="string">"invalid data"</literal></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_TSC_INVALID_TABLE_ID_LENGTH</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// parse timestamp</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>timestamp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>tLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>smlParseTelnetElement</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sql</name></expr></argument>, <argument><expr><name>sqlEnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timestamp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>timestamp</name> <operator>||</operator> <name>tLen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>smlBuildInvalidDataMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><literal type="string">"invalid timestamp"</literal></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SML_INVALID_DATA</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>smlParseTS</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>tLen</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>smlBuildInvalidDataMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><literal type="string">"invalid timestamp"</literal></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// parse value</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>valueLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>smlParseTelnetElement</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sql</name></expr></argument>, <argument><expr><name>sqlEnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>valueLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name> <operator>||</operator> <name>valueLen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>smlBuildInvalidDataMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><literal type="string">"invalid value"</literal></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_TSC_INVALID_VALUE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSmlKv</name> <modifier>*</modifier></type><name>kv</name> <init>= <expr><operator>(</operator><name>SSmlKv</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSmlKv</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>kv</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>cols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>VALUE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>keyLen</name></name> <operator>=</operator> <name>VALUE_LEN</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name>valueLen</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>smlParseValue</name><argument_list>(<argument><expr><name>kv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>ret</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// parse tags</comment>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>smlParseTelnetTags</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><name>sqlEnd</name></expr></argument>, <argument><expr><name><name>tinfo</name><operator>-&gt;</operator><name>tags</name></name></expr></argument>, <argument><expr><name><name>tinfo</name><operator>-&gt;</operator><name>childTableName</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>dumplicateKey</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>smlBuildInvalidDataMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><literal type="string">"invalid data"</literal></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>smlParseCols</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>cols</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>childTableName</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isTag</name></decl></parameter>,
                            <parameter><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>dumplicateKey</name></decl></parameter>, <parameter><decl><type><name>SSmlMsgBuf</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>size_t</name></type>      <name>childTableNameLen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>tsSmlChildTableName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sql</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>sql</name> <operator>&lt;</operator> <name>data</name> <operator>+</operator> <name>len</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><name>sql</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>     <name>keyLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><name>sql</name> <operator>&lt;</operator> <name>data</name> <operator>+</operator> <name>len</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// parse key</comment>
      <if_stmt><if>if <condition>(<expr><call><name>IS_COMMA</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>smlBuildInvalidDataMsg</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"invalid data"</literal></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>TSDB_CODE_SML_INVALID_DATA</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>IS_EQUAL</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>keyLen</name> <operator>=</operator> <name>sql</name> <operator>-</operator> <name>key</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>sql</name><operator>++</operator></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>sql</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if <condition>(<expr><call><name>IS_INVALID_COL_LEN</name><argument_list>(<argument><expr><name>keyLen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>smlBuildInvalidDataMsg</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"invalid key or key is too long than 64"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_TSC_INVALID_COLUMN_LENGTH</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>smlCheckDuplicateKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>, <argument><expr><name>dumplicateKey</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>smlBuildInvalidDataMsg</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"dumplicate key"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_TSC_DUP_NAMES</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// parse value</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><name>sql</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>     <name>valueLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>        <name>isInQuote</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>sql</name> <operator>&lt;</operator> <name>data</name> <operator>+</operator> <name>len</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// parse value</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isTag</name> <operator>&amp;&amp;</operator> <call><name>IS_QUOTE</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>isInQuote</name> <operator>=</operator> <operator>!</operator><name>isInQuote</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>sql</name><operator>++</operator></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isInQuote</name> <operator>&amp;&amp;</operator> <call><name>IS_COMMA</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isInQuote</name> <operator>&amp;&amp;</operator> <call><name>IS_EQUAL</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>smlBuildInvalidDataMsg</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"invalid data"</literal></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>TSDB_CODE_SML_INVALID_DATA</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>sql</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><name>valueLen</name> <operator>=</operator> <name>sql</name> <operator>-</operator> <name>value</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>sql</name><operator>++</operator></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>isInQuote</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>smlBuildInvalidDataMsg</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"only one quote"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_SML_INVALID_DATA</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>valueLen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>smlBuildInvalidDataMsg</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"invalid value"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_SML_INVALID_DATA</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <macro><name>PROCESS_SLASH</name><argument_list>(<argument>key</argument>, <argument>keyLen</argument>)</argument_list></macro>
    <macro><name>PROCESS_SLASH</name><argument_list>(<argument>value</argument>, <argument>valueLen</argument>)</argument_list></macro>

    <comment type="line">// handle child table name</comment>
    <if_stmt><if>if <condition>(<expr><name>childTableName</name> <operator>&amp;&amp;</operator> <name>childTableNameLen</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>tsSmlChildTableName</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>childTableName</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TSDB_TABLE_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>childTableName</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>valueLen</name> <operator>&lt;</operator> <name>TSDB_TABLE_NAME_LEN</name></expr> ?</condition><then> <expr><name>valueLen</name></expr> </then><else>: <expr><name>TSDB_TABLE_NAME_LEN</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// add kv to SSmlKv</comment>
    <decl_stmt><decl><type><name>SSmlKv</name> <modifier>*</modifier></type><name>kv</name> <init>= <expr><operator>(</operator><name>SSmlKv</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSmlKv</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>kv</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>cols</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>cols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>keyLen</name></name> <operator>=</operator> <name>keyLen</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name>valueLen</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>isTag</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>valueLen</name> <operator>&gt;</operator> <operator>(</operator><name>TSDB_MAX_NCHAR_LEN</name> <operator>-</operator> <name>VARSTR_HEADER_SIZE</name><operator>)</operator> <operator>/</operator> <name>TSDB_NCHAR_SIZE</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>TSDB_CODE_PAR_INVALID_VAR_COLUMN_LEN</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_NCHAR</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>smlParseValue</name><argument_list>(<argument><expr><name>kv</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>ret</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>smlUpdateMeta</name><parameter_list>(<parameter><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>metaHash</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>metaArray</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>cols</name></decl></parameter>, <parameter><decl><type><name>SSmlMsgBuf</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSmlKv</name> <modifier>*</modifier></type><name>kv</name> <init>= <expr><operator>(</operator><name>SSmlKv</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>cols</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>index</name> <init>= <expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><call><name>taosHashGet</name><argument_list>(<argument><expr><name>metaHash</name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>keyLen</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>index</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SSmlKv</name> <modifier>*</modifier><modifier>*</modifier></type><name>value</name> <init>= <expr><operator>(</operator><name>SSmlKv</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>metaArray</name></expr></argument>, <argument><expr><operator>*</operator><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>kv</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name><operator>(</operator><operator>*</operator><name>value</name><operator>)</operator><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>smlBuildInvalidDataMsg</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"the type is not the same like before"</literal></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>TSDB_CODE_SML_NOT_SAME_TYPE</name></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>kv</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="line">// update string len, if bigger</comment>
          <if_stmt><if>if <condition>(<expr><name><name>kv</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;</operator> <name><operator>(</operator><operator>*</operator><name>value</name><operator>)</operator><operator>-&gt;</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name>kv</name></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>size_t</name></type> <name>tmp</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>metaArray</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>tmp</name> <operator>&lt;=</operator> <name>INT16_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int16_t</name></type> <name>size</name> <init>= <expr><name>tmp</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>metaArray</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name>metaHash</name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>keyLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><name>SHORT_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>smlInsertMeta</name><parameter_list>(<parameter><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>metaHash</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>metaArray</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>cols</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int16_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSmlKv</name> <modifier>*</modifier></type><name>kv</name> <init>= <expr><operator>(</operator><name>SSmlKv</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>cols</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>metaArray</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name>metaHash</name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>keyLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><name>SHORT_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSmlTableInfo</name> <modifier>*</modifier></type><name>smlBuildTableInfo</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSmlTableInfo</name> <modifier>*</modifier></type><name>tag</name> <init>= <expr><operator>(</operator><name>SSmlTableInfo</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSmlTableInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>tag</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>tag</name><operator>-&gt;</operator><name>cols</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>tag</name><operator>-&gt;</operator><name>cols</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"SML:smlBuildTableInfo failed to allocate memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>cleanup</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>tag</name><operator>-&gt;</operator><name>tags</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>tag</name><operator>-&gt;</operator><name>tags</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"SML:smlBuildTableInfo failed to allocate memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>cleanup</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>tag</name></expr>;</return>

<label><name>cleanup</name>:</label>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>smlDestroyTableInfo</name><parameter_list>(<parameter><decl><type><name>SSmlHandle</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>SSmlTableInfo</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>dataFormat</name></name></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>tag</name><operator>-&gt;</operator><name>cols</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>kvArray</name> <init>= <expr><operator>(</operator><name>SArray</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>tag</name><operator>-&gt;</operator><name>cols</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>kvArray</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>SSmlKv</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>SSmlKv</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>kvArray</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>kvArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>tag</name><operator>-&gt;</operator><name>cols</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>kvHash</name> <init>= <expr><operator>(</operator><name>SHashObj</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>tag</name><operator>-&gt;</operator><name>cols</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>void</name>    <modifier>*</modifier><modifier>*</modifier></type><name>p1</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosHashIterate</name><argument_list>(<argument><expr><name>kvHash</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <while>while <condition>(<expr><name>p1</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><operator>*</operator><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>p1</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosHashIterate</name><argument_list>(<argument><expr><name>kvHash</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></while>
      <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name>kvHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></else></if_stmt>
  <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>tag</name><operator>-&gt;</operator><name>tags</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSmlKv</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>SSmlKv</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>tag</name><operator>-&gt;</operator><name>tags</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>tag</name><operator>-&gt;</operator><name>cols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>tag</name><operator>-&gt;</operator><name>tags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>smlKvTimeArrayCompare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>s1</name> <init>= <expr><operator>*</operator><operator>(</operator><name>SArray</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>key1</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>s2</name> <init>= <expr><operator>*</operator><operator>(</operator><name>SArray</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>key2</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSmlKv</name> <modifier>*</modifier></type><name>kv1</name> <init>= <expr><operator>(</operator><name>SSmlKv</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSmlKv</name> <modifier>*</modifier></type><name>kv2</name> <init>= <expr><operator>(</operator><name>SSmlKv</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>kv1</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>kv2</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>kv1</name><operator>-&gt;</operator><name>i</name></name> <operator>&lt;</operator> <name><name>kv2</name><operator>-&gt;</operator><name>i</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>kv1</name><operator>-&gt;</operator><name>i</name></name> <operator>&gt;</operator> <name><name>kv2</name><operator>-&gt;</operator><name>i</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>smlKvTimeHashCompare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>s1</name> <init>= <expr><operator>*</operator><operator>(</operator><name>SHashObj</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>key1</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>s2</name> <init>= <expr><operator>*</operator><operator>(</operator><name>SHashObj</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>key2</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSmlKv</name>  <modifier>*</modifier><modifier>*</modifier></type><name>kv1pp</name> <init>= <expr><operator>(</operator><name>SSmlKv</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosHashGet</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>TS</name></expr></argument>, <argument><expr><name>TS_LEN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSmlKv</name>  <modifier>*</modifier><modifier>*</modifier></type><name>kv2pp</name> <init>= <expr><operator>(</operator><name>SSmlKv</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosHashGet</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><name>TS</name></expr></argument>, <argument><expr><name>TS_LEN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>kv1pp</name> <operator>||</operator> <operator>!</operator><name>kv2pp</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"smlKvTimeHashCompare kv is null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SSmlKv</name> <modifier>*</modifier></type><name>kv1</name> <init>= <expr><operator>*</operator><name>kv1pp</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSmlKv</name> <modifier>*</modifier></type><name>kv2</name> <init>= <expr><operator>*</operator><name>kv2pp</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>kv1</name> <operator>||</operator> <name><name>kv1</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"smlKvTimeHashCompare kv1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>kv2</name> <operator>||</operator> <name><name>kv2</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"smlKvTimeHashCompare kv2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>kv1</name><operator>-&gt;</operator><name>i</name></name> <operator>&lt;</operator> <name><name>kv2</name><operator>-&gt;</operator><name>i</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>kv1</name><operator>-&gt;</operator><name>i</name></name> <operator>&gt;</operator> <name><name>kv2</name><operator>-&gt;</operator><name>i</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>smlDealCols</name><parameter_list>(<parameter><decl><type><name>SSmlTableInfo</name> <modifier>*</modifier></type><name>oneTable</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dataFormat</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>cols</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>dataFormat</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>taosArraySearch</name><argument_list>(<argument><expr><name><name>oneTable</name><operator>-&gt;</operator><name>cols</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cols</name></expr></argument>, <argument><expr><name>smlKvTimeArrayCompare</name></expr></argument>, <argument><expr><name>TD_GT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>oneTable</name><operator>-&gt;</operator><name>cols</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayInsert</name><argument_list>(<argument><expr><name><name>oneTable</name><operator>-&gt;</operator><name>cols</name></name></expr></argument>, <argument><expr><call><name>TARRAY_ELEM_IDX</name><argument_list>(<argument><expr><name><name>oneTable</name><operator>-&gt;</operator><name>cols</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>kvHash</name> <init>= <expr><call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>kvHash</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"SML:smlDealCols failed to allocate memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSmlKv</name> <modifier>*</modifier></type><name>kv</name> <init>= <expr><operator>(</operator><name>SSmlKv</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>cols</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name>kvHash</name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>keyLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kv</name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>taosArraySearch</name><argument_list>(<argument><expr><name><name>oneTable</name><operator>-&gt;</operator><name>cols</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kvHash</name></expr></argument>, <argument><expr><name>smlKvTimeHashCompare</name></expr></argument>, <argument><expr><name>TD_GT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>oneTable</name><operator>-&gt;</operator><name>cols</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kvHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayInsert</name><argument_list>(<argument><expr><name><name>oneTable</name><operator>-&gt;</operator><name>cols</name></name></expr></argument>, <argument><expr><call><name>TARRAY_ELEM_IDX</name><argument_list>(<argument><expr><name><name>oneTable</name><operator>-&gt;</operator><name>cols</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>kvHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSmlSTableMeta</name> <modifier>*</modifier></type><name>smlBuildSTableMeta</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSmlSTableMeta</name> <modifier>*</modifier></type><name>meta</name> <init>= <expr><operator>(</operator><name>SSmlSTableMeta</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSmlSTableMeta</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>meta</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>meta</name><operator>-&gt;</operator><name>tagHash</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>meta</name><operator>-&gt;</operator><name>tagHash</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"SML:smlBuildSTableMeta failed to allocate memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>cleanup</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>meta</name><operator>-&gt;</operator><name>colHash</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>meta</name><operator>-&gt;</operator><name>colHash</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"SML:smlBuildSTableMeta failed to allocate memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>cleanup</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>meta</name><operator>-&gt;</operator><name>tags</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>meta</name><operator>-&gt;</operator><name>tags</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"SML:smlBuildSTableMeta failed to allocate memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>cleanup</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>meta</name><operator>-&gt;</operator><name>cols</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>meta</name><operator>-&gt;</operator><name>cols</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"SML:smlBuildSTableMeta failed to allocate memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>cleanup</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>meta</name></expr>;</return>

<label><name>cleanup</name>:</label>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>smlDestroySTableMeta</name><parameter_list>(<parameter><decl><type><name>SSmlSTableMeta</name> <modifier>*</modifier></type><name>meta</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>meta</name><operator>-&gt;</operator><name>tagHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>meta</name><operator>-&gt;</operator><name>colHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>meta</name><operator>-&gt;</operator><name>tags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>meta</name><operator>-&gt;</operator><name>cols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>meta</name><operator>-&gt;</operator><name>tableMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>smlDestroyCols</name><parameter_list>(<parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>cols</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>cols</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>kv</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>cols</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>smlDestroyInfo</name><parameter_list>(<parameter><decl><type><name>SSmlHandle</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>info</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>qDestroyQuery</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>pQuery</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>smlDestroyHandle</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>exec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// destroy info-&gt;childTables</comment>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>p1</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>childTables</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>p1</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>smlDestroyTableInfo</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><operator>(</operator><name>SSmlTableInfo</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>*</operator><name>p1</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>p1</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>childTables</name></name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>childTables</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// destroy info-&gt;superTables</comment>
  <expr_stmt><expr><name>p1</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>superTables</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>p1</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>smlDestroySTableMeta</name><argument_list>(<argument><expr><operator>(</operator><name>SSmlSTableMeta</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>*</operator><name>p1</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>p1</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>superTables</name></name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>superTables</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// destroy info-&gt;pVgHash</comment>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>pVgHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>dumplicateKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>info</name><operator>-&gt;</operator><name>dataFormat</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>colsContainer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>destroyRequest</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>pRequest</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSmlHandle</name> <modifier>*</modifier></type><name>smlBuildSmlInfo</name><parameter_list>(<parameter><decl><type><name>STscObj</name> <modifier>*</modifier></type><name>pTscObj</name></decl></parameter>, <parameter><decl><type><name>SRequestObj</name> <modifier>*</modifier></type><name>request</name></decl></parameter>, <parameter><decl><type><name>SMLProtocolType</name></type> <name>protocol</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>precision</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSmlHandle</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><operator>(</operator><name>SSmlHandle</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSmlHandle</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>info</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>smlGenId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>pQuery</name></name> <operator>=</operator> <operator>(</operator><name>SQuery</name> <operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_QUERY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>info</name><operator>-&gt;</operator><name>pQuery</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"SML:0x%"</literal> <name>PRIx64</name> <literal type="string">" create info-&gt;pQuery error"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>cleanup</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>pQuery</name><operator>-&gt;</operator><name>execMode</name></name> <operator>=</operator> <name>QUERY_EXEC_MODE_SCHEDULE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>pQuery</name><operator>-&gt;</operator><name>haveResultSet</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>pQuery</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_VND_SUBMIT</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name> <operator>=</operator> <operator>(</operator><name>SNode</name> <operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_VNODE_MODIF_STMT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>info</name><operator>-&gt;</operator><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"SML:0x%"</literal> <name>PRIx64</name> <literal type="string">" create info-&gt;pQuery-&gt;pRoot error"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>cleanup</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>pTscObj</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>taos</name></name> <operator>=</operator> <name>pTscObj</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogGetHandle</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>taos</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>clusterId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>pCatalog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"SML:0x%"</literal> <name>PRIx64</name> <literal type="string">" get catalog error %d"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>cleanup</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>precision</name></name> <operator>=</operator> <name>precision</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>protocol</name></name> <operator>=</operator> <name>protocol</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>protocol</name> <operator>==</operator> <name>TSDB_SML_LINE_PROTOCOL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>dataFormat</name></name> <operator>=</operator> <name>tsSmlDataFormat</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>dataFormat</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>request</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>pRequest</name></name> <operator>=</operator> <name>request</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>msgBuf</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>pRequest</name><operator>-&gt;</operator><name>msgBuf</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>msgBuf</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>ERROR_MSG_BUF_DEFAULT_SIZE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>pRequest</name><operator>-&gt;</operator><name>stmtType</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>exec</name></name> <operator>=</operator> <call><name>smlInitHandle</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>pQuery</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>childTables</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>superTables</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>pVgHash</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_INT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>dumplicateKey</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>info</name><operator>-&gt;</operator><name>dataFormat</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>colsContainer</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>info</name><operator>-&gt;</operator><name>colsContainer</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"SML:0x%"</literal> <name>PRIx64</name> <literal type="string">" create info failed"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>cleanup</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>info</name><operator>-&gt;</operator><name>exec</name></name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name><name>info</name><operator>-&gt;</operator><name>childTables</name></name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name><name>info</name><operator>-&gt;</operator><name>superTables</name></name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name><name>info</name><operator>-&gt;</operator><name>pVgHash</name></name> <operator>||</operator>
      <name>NULL</name> <operator>==</operator> <name><name>info</name><operator>-&gt;</operator><name>dumplicateKey</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"SML:0x%"</literal> <name>PRIx64</name> <literal type="string">" create info failed"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>cleanup</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>info</name></expr>;</return>
<label><name>cleanup</name>:</label>
  <expr_stmt><expr><call><name>smlDestroyInfo</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/************* TSDB_SML_JSON_PROTOCOL function start **************/</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>smlParseMetricFromJSON</name><parameter_list>(<parameter><decl><type><name>SSmlHandle</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>SSmlTableInfo</name> <modifier>*</modifier></type><name>tinfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>metric</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"metric"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cJSON_IsString</name><argument_list>(<argument><expr><name>metric</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_TSC_INVALID_JSON</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>tinfo</name><operator>-&gt;</operator><name>sTableNameLen</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>metric</name><operator>-&gt;</operator><name>valuestring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>IS_INVALID_TABLE_LEN</name><argument_list>(<argument><expr><name><name>tinfo</name><operator>-&gt;</operator><name>sTableNameLen</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"OTD:0x%"</literal> <name>PRIx64</name> <literal type="string">" Metric lenght is 0 or large than 192"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_TSC_INVALID_TABLE_ID_LENGTH</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>tinfo</name><operator>-&gt;</operator><name>sTableName</name></name> <operator>=</operator> <name><name>metric</name><operator>-&gt;</operator><name>valuestring</name></name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>smlParseTSFromJSONObj</name><parameter_list>(<parameter><decl><type><name>SSmlHandle</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>tsVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><call><name>cJSON_GetArraySize</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>!=</operator> <name>OTD_JSON_SUB_FIELDS_NUM</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_TSC_INVALID_JSON</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"value"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cJSON_IsNumber</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_TSC_INVALID_JSON</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>type</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cJSON_IsString</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_TSC_INVALID_JSON</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>double</name></type> <name>timeDouble</name> <init>= <expr><name><name>value</name><operator>-&gt;</operator><name>valuedouble</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>smlDoubleToInt64OverFlow</name><argument_list>(<argument><expr><name>timeDouble</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>smlBuildInvalidDataMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><literal type="string">"timestamp is too large"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_INVALID_TIMESTAMP</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>timeDouble</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>tsVal</name> <operator>=</operator> <call><name>taosGetTimestampNs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>timeDouble</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_INVALID_TIMESTAMP</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>tsVal</name> <operator>=</operator> <name>timeDouble</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>typeLen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>type</name><operator>-&gt;</operator><name>valuestring</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>typeLen</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>type</name><operator>-&gt;</operator><name>valuestring</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'s'</literal> <operator>||</operator> <name><name>type</name><operator>-&gt;</operator><name>valuestring</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <comment type="line">// seconds</comment>
    <expr_stmt><expr><operator>*</operator><name>tsVal</name> <operator>=</operator> <operator>*</operator><name>tsVal</name> <operator>*</operator> <name>NANOSECOND_PER_SEC</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>timeDouble</name> <operator>=</operator> <name>timeDouble</name> <operator>*</operator> <name>NANOSECOND_PER_SEC</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>smlDoubleToInt64OverFlow</name><argument_list>(<argument><expr><name>timeDouble</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>smlBuildInvalidDataMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><literal type="string">"timestamp is too large"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_INVALID_TIMESTAMP</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>typeLen</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>type</name><operator>-&gt;</operator><name>valuestring</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'s'</literal> <operator>||</operator> <name><name>type</name><operator>-&gt;</operator><name>valuestring</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <switch>switch <condition>(<expr><name><name>type</name><operator>-&gt;</operator><name>valuestring</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><literal type="char">'m'</literal></expr>:</case>
      <case>case <expr><literal type="char">'M'</literal></expr>:</case>
        <comment type="line">// milliseconds</comment>
        <expr_stmt><expr><operator>*</operator><name>tsVal</name> <operator>=</operator> <operator>*</operator><name>tsVal</name> <operator>*</operator> <name>NANOSECOND_PER_MSEC</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>timeDouble</name> <operator>=</operator> <name>timeDouble</name> <operator>*</operator> <name>NANOSECOND_PER_MSEC</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>smlDoubleToInt64OverFlow</name><argument_list>(<argument><expr><name>timeDouble</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>smlBuildInvalidDataMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><literal type="string">"timestamp is too large"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>TSDB_CODE_INVALID_TIMESTAMP</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
      <case>case <expr><literal type="char">'u'</literal></expr>:</case>
      <case>case <expr><literal type="char">'U'</literal></expr>:</case>
        <comment type="line">// microseconds</comment>
        <expr_stmt><expr><operator>*</operator><name>tsVal</name> <operator>=</operator> <operator>*</operator><name>tsVal</name> <operator>*</operator> <name>NANOSECOND_PER_USEC</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>timeDouble</name> <operator>=</operator> <name>timeDouble</name> <operator>*</operator> <name>NANOSECOND_PER_USEC</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>smlDoubleToInt64OverFlow</name><argument_list>(<argument><expr><name>timeDouble</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>smlBuildInvalidDataMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><literal type="string">"timestamp is too large"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>TSDB_CODE_INVALID_TIMESTAMP</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
      <case>case <expr><literal type="char">'n'</literal></expr>:</case>
      <case>case <expr><literal type="char">'N'</literal></expr>:</case>
        <break>break;</break>
      <default>default:</default>
        <return>return <expr><name>TSDB_CODE_TSC_INVALID_JSON</name></expr>;</return>
    </block_content>}</block></switch>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_TSC_INVALID_JSON</name></expr>;</return>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint8_t</name></type> <name>smlGetTimestampLen</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>num</name> <operator>/=</operator> <literal type="number">10</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>
  <return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>smlParseTSFromJSON</name><parameter_list>(<parameter><decl><type><name>SSmlHandle</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>cols</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// Timestamp must be the first KV to parse</comment>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>tsVal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>timestamp</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"timestamp"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>cJSON_IsNumber</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <comment type="line">// timestamp value 0 indicates current system time</comment>
    <decl_stmt><decl><type><name>double</name></type> <name>timeDouble</name> <init>= <expr><name><name>timestamp</name><operator>-&gt;</operator><name>valuedouble</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>smlDoubleToInt64OverFlow</name><argument_list>(<argument><expr><name>timeDouble</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>smlBuildInvalidDataMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><literal type="string">"timestamp is too large"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_INVALID_TIMESTAMP</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>timeDouble</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_INVALID_TIMESTAMP</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>uint8_t</name></type> <name>tsLen</name> <init>= <expr><call><name>smlGetTimestampLen</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>timeDouble</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>tsVal</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>timeDouble</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>tsLen</name> <operator>==</operator> <name>TSDB_TIME_PRECISION_SEC_DIGITS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>tsVal</name> <operator>=</operator> <name>tsVal</name> <operator>*</operator> <name>NANOSECOND_PER_SEC</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>timeDouble</name> <operator>=</operator> <name>timeDouble</name> <operator>*</operator> <name>NANOSECOND_PER_SEC</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>smlDoubleToInt64OverFlow</name><argument_list>(<argument><expr><name>timeDouble</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>smlBuildInvalidDataMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><literal type="string">"timestamp is too large"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>TSDB_CODE_INVALID_TIMESTAMP</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tsLen</name> <operator>==</operator> <name>TSDB_TIME_PRECISION_MILLI_DIGITS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>tsVal</name> <operator>=</operator> <name>tsVal</name> <operator>*</operator> <name>NANOSECOND_PER_MSEC</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>timeDouble</name> <operator>=</operator> <name>timeDouble</name> <operator>*</operator> <name>NANOSECOND_PER_MSEC</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>smlDoubleToInt64OverFlow</name><argument_list>(<argument><expr><name>timeDouble</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>smlBuildInvalidDataMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><literal type="string">"timestamp is too large"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>TSDB_CODE_INVALID_TIMESTAMP</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>timeDouble</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>tsVal</name> <operator>=</operator> <call><name>taosGetTimestampNs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_INVALID_TIMESTAMP</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>cJSON_IsObject</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>smlParseTSFromJSONObj</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tsVal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"SML:0x%"</literal> <name>PRIx64</name> <literal type="string">" Failed to parse timestamp from JSON Obj"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>ret</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_TSC_INVALID_JSON</name></expr>;</return>
  </block_content>}</block></else></if_stmt>

  <comment type="line">// add ts to</comment>
  <decl_stmt><decl><type><name>SSmlKv</name> <modifier>*</modifier></type><name>kv</name> <init>= <expr><operator>(</operator><name>SSmlKv</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSmlKv</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>kv</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>TS</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>keyLen</name></name> <operator>=</operator> <name>TS_LEN</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <name>tsVal</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><name><name>tDataTypes</name><index>[<expr><name><name>kv</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>cols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>smlConvertJSONBool</name><parameter_list>(<parameter><decl><type><name>SSmlKv</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>typeStr</name></decl></parameter>, <parameter><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>typeStr</name></expr></argument>, <argument><expr><literal type="string">"bool"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"OTD:invalid type(%s) for JSON Bool"</literal></expr></argument>, <argument><expr><name>typeStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_TSC_INVALID_JSON_TYPE</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_BOOL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><name><name>tDataTypes</name><index>[<expr><name><name>pVal</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <name><name>value</name><operator>-&gt;</operator><name>valueint</name></name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>smlConvertJSONNumber</name><parameter_list>(<parameter><decl><type><name>SSmlKv</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>typeStr</name></decl></parameter>, <parameter><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// tinyint</comment>
  <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>typeStr</name></expr></argument>, <argument><expr><literal type="string">"i8"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name>typeStr</name></expr></argument>, <argument><expr><literal type="string">"tinyint"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_VALID_TINYINT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>valuedouble</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"OTD:JSON value(%f) cannot fit in type(tinyint)"</literal></expr></argument>, <argument><expr><name><name>value</name><operator>-&gt;</operator><name>valuedouble</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_TSC_VALUE_OUT_OF_RANGE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_TINYINT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><name><name>tDataTypes</name><index>[<expr><name><name>pVal</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <name><name>value</name><operator>-&gt;</operator><name>valuedouble</name></name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// smallint</comment>
  <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>typeStr</name></expr></argument>, <argument><expr><literal type="string">"i16"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name>typeStr</name></expr></argument>, <argument><expr><literal type="string">"smallint"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_VALID_SMALLINT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>valuedouble</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"OTD:JSON value(%f) cannot fit in type(smallint)"</literal></expr></argument>, <argument><expr><name><name>value</name><operator>-&gt;</operator><name>valuedouble</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_TSC_VALUE_OUT_OF_RANGE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_SMALLINT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><name><name>tDataTypes</name><index>[<expr><name><name>pVal</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <name><name>value</name><operator>-&gt;</operator><name>valuedouble</name></name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// int</comment>
  <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>typeStr</name></expr></argument>, <argument><expr><literal type="string">"i32"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name>typeStr</name></expr></argument>, <argument><expr><literal type="string">"int"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_VALID_INT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>valuedouble</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"OTD:JSON value(%f) cannot fit in type(int)"</literal></expr></argument>, <argument><expr><name><name>value</name><operator>-&gt;</operator><name>valuedouble</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_TSC_VALUE_OUT_OF_RANGE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_INT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><name><name>tDataTypes</name><index>[<expr><name><name>pVal</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <name><name>value</name><operator>-&gt;</operator><name>valuedouble</name></name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// bigint</comment>
  <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>typeStr</name></expr></argument>, <argument><expr><literal type="string">"i64"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name>typeStr</name></expr></argument>, <argument><expr><literal type="string">"bigint"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_BIGINT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><name><name>tDataTypes</name><index>[<expr><name><name>pVal</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>valuedouble</name></name> <operator>&gt;=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>INT64_MAX</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <name>INT64_MAX</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>valuedouble</name></name> <operator>&lt;=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>INT64_MIN</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <name><name>value</name><operator>-&gt;</operator><name>valuedouble</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// float</comment>
  <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>typeStr</name></expr></argument>, <argument><expr><literal type="string">"f32"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name>typeStr</name></expr></argument>, <argument><expr><literal type="string">"float"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_VALID_FLOAT</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>valuedouble</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"OTD:JSON value(%f) cannot fit in type(float)"</literal></expr></argument>, <argument><expr><name><name>value</name><operator>-&gt;</operator><name>valuedouble</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_TSC_VALUE_OUT_OF_RANGE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_FLOAT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><name><name>tDataTypes</name><index>[<expr><name><name>pVal</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>f</name></name> <operator>=</operator> <name><name>value</name><operator>-&gt;</operator><name>valuedouble</name></name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// double</comment>
  <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>typeStr</name></expr></argument>, <argument><expr><literal type="string">"f64"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name>typeStr</name></expr></argument>, <argument><expr><literal type="string">"double"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_DOUBLE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><name><name>tDataTypes</name><index>[<expr><name><name>pVal</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>d</name></name> <operator>=</operator> <name><name>value</name><operator>-&gt;</operator><name>valuedouble</name></name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// if reach here means type is unsupported</comment>
  <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"OTD:invalid type(%s) for JSON Number"</literal></expr></argument>, <argument><expr><name>typeStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_TSC_INVALID_JSON_TYPE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>smlConvertJSONString</name><parameter_list>(<parameter><decl><type><name>SSmlKv</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>typeStr</name></decl></parameter>, <parameter><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>typeStr</name></expr></argument>, <argument><expr><literal type="string">"binary"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>typeStr</name></expr></argument>, <argument><expr><literal type="string">"nchar"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_NCHAR</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"OTD:invalid type(%s) for JSON String"</literal></expr></argument>, <argument><expr><name>typeStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_TSC_INVALID_JSON_TYPE</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>valuestring</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pVal</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_BINARY</name> <operator>&amp;&amp;</operator> <name><name>pVal</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;</operator> <name>TSDB_MAX_BINARY_LEN</name> <operator>-</operator> <name>VARSTR_HEADER_SIZE</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_PAR_INVALID_VAR_COLUMN_LEN</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pVal</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_NCHAR</name> <operator>&amp;&amp;</operator>
      <name><name>pVal</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;</operator> <operator>(</operator><name>TSDB_MAX_NCHAR_LEN</name> <operator>-</operator> <name>VARSTR_HEADER_SIZE</name><operator>)</operator> <operator>/</operator> <name>TSDB_NCHAR_SIZE</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_PAR_INVALID_VAR_COLUMN_LEN</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pVal</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name><name>value</name><operator>-&gt;</operator><name>valuestring</name></name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>smlParseValueFromJSONObj</name><parameter_list>(<parameter><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>SSmlKv</name> <modifier>*</modifier></type><name>kv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><call><name>cJSON_GetArraySize</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>!=</operator> <name>OTD_JSON_SUB_FIELDS_NUM</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_TSC_INVALID_JSON</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"value"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_TSC_INVALID_JSON</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>type</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cJSON_IsString</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_TSC_INVALID_JSON</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <switch>switch <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>cJSON_True</name></expr>:</case>
    <case>case <expr><name>cJSON_False</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>smlConvertJSONBool</name><argument_list>(<argument><expr><name>kv</name></expr></argument>, <argument><expr><name><name>type</name><operator>-&gt;</operator><name>valuestring</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>ret</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>cJSON_Number</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>smlConvertJSONNumber</name><argument_list>(<argument><expr><name>kv</name></expr></argument>, <argument><expr><name><name>type</name><operator>-&gt;</operator><name>valuestring</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>ret</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>cJSON_String</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>smlConvertJSONString</name><argument_list>(<argument><expr><name>kv</name></expr></argument>, <argument><expr><name><name>type</name><operator>-&gt;</operator><name>valuestring</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>ret</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <default>default:</default>
      <return>return <expr><name>TSDB_CODE_TSC_INVALID_JSON_TYPE</name></expr>;</return>
  </block_content>}</block></switch>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>smlParseValueFromJSON</name><parameter_list>(<parameter><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>SSmlKv</name> <modifier>*</modifier></type><name>kv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name><name>root</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>cJSON_True</name></expr>:</case>
    <case>case <expr><name>cJSON_False</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_BOOL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><name><name>tDataTypes</name><index>[<expr><name><name>kv</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <name><name>root</name><operator>-&gt;</operator><name>valueint</name></name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>cJSON_Number</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_DOUBLE</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><name><name>tDataTypes</name><index>[<expr><name><name>kv</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>d</name></name> <operator>=</operator> <name><name>root</name><operator>-&gt;</operator><name>valuedouble</name></name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>cJSON_String</name></expr>:</case> <block>{<block_content>
      <comment type="block">/* set default JSON type to binary/nchar according to
       * user configured parameter tsDefaultJSONStrType
       */</comment>

      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tsDefaultJSONStrType</name> <init>= <expr><literal type="string">"nchar"</literal></expr></init></decl>;</decl_stmt>  <comment type="line">// todo</comment>
      <expr_stmt><expr><call><name>smlConvertJSONString</name><argument_list>(<argument><expr><name>kv</name></expr></argument>, <argument><expr><name>tsDefaultJSONStrType</name></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>cJSON_Object</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>smlParseValueFromJSONObj</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"OTD:Failed to parse value from JSON Obj"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>ret</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <default>default:</default>
      <return>return <expr><name>TSDB_CODE_TSC_INVALID_JSON</name></expr>;</return>
  </block_content>}</block></switch>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>smlParseColsFromJSON</name><parameter_list>(<parameter><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>cols</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>cols</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>metricVal</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"value"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>metricVal</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_TSC_INVALID_JSON</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSmlKv</name> <modifier>*</modifier></type><name>kv</name> <init>= <expr><operator>(</operator><name>SSmlKv</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSmlKv</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>kv</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>cols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>VALUE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>keyLen</name></name> <operator>=</operator> <name>VALUE_LEN</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>smlParseValueFromJSON</name><argument_list>(<argument><expr><name>metricVal</name></expr></argument>, <argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>ret</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>smlParseTagsFromJSON</name><parameter_list>(<parameter><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pKVs</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>childTableName</name></decl></parameter>, <parameter><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>dumplicateKey</name></decl></parameter>,
                                    <parameter><decl><type><name>SSmlMsgBuf</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pKVs</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>tags</name> <init>= <expr><call><name>cJSON_GetObjectItem</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"tags"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tags</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>tags</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>cJSON_Object</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_TSC_INVALID_JSON</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>size_t</name></type>  <name>childTableNameLen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>tsSmlChildTableName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>tagNum</name> <init>= <expr><call><name>cJSON_GetArraySize</name><argument_list>(<argument><expr><name>tags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tagNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>tag</name> <init>= <expr><call><name>cJSON_GetArrayItem</name><argument_list>(<argument><expr><name>tags</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>tag</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_TSC_INVALID_JSON</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>keyLen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>tag</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IS_INVALID_COL_LEN</name><argument_list>(<argument><expr><name>keyLen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"OTD:Tag key length is 0 or too large than 64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_TSC_INVALID_COLUMN_LENGTH</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="line">// check duplicate keys</comment>
    <if_stmt><if>if <condition>(<expr><call><name>smlCheckDuplicateKey</name><argument_list>(<argument><expr><name><name>tag</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>, <argument><expr><name>dumplicateKey</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_TSC_DUP_NAMES</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// handle child table name</comment>
    <if_stmt><if>if <condition>(<expr><name>childTableNameLen</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>tag</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><name>tsSmlChildTableName</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cJSON_IsString</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"OTD:ID must be JSON string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>TSDB_CODE_TSC_INVALID_JSON</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>childTableName</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TSDB_TABLE_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name>childTableName</name></expr></argument>, <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>valuestring</name></name></expr></argument>, <argument><expr><name>TSDB_TABLE_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// add kv to SSmlKv</comment>
    <decl_stmt><decl><type><name>SSmlKv</name> <modifier>*</modifier></type><name>kv</name> <init>= <expr><operator>(</operator><name>SSmlKv</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSmlKv</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>kv</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pKVs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// key</comment>
    <expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>keyLen</name></name> <operator>=</operator> <name>keyLen</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>kv</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name><name>tag</name><operator>-&gt;</operator><name>string</name></name></expr>;</expr_stmt>

    <comment type="line">// value</comment>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>smlParseValueFromJSON</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name>kv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>ret</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>smlParseJSONString</name><parameter_list>(<parameter><decl><type><name>SSmlHandle</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>SSmlTableInfo</name> <modifier>*</modifier></type><name>tinfo</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>cols</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cJSON_IsObject</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"OTD:0x%"</literal> <name>PRIx64</name> <literal type="string">" data point needs to be JSON object"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_TSC_INVALID_JSON</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><call><name>cJSON_GetArraySize</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="line">// outmost json fields has to be exactly 4</comment>
  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>!=</operator> <name>OTD_JSON_FIELDS_NUM</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"OTD:0x%"</literal> <name>PRIx64</name> <literal type="string">" Invalid number of JSON fields in data point %d"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_TSC_INVALID_JSON</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// Parse metric</comment>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>smlParseMetricFromJSON</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>tinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"OTD:0x%"</literal> <name>PRIx64</name> <literal type="string">" Unable to parse metric from JSON payload"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"OTD:0x%"</literal> <name>PRIx64</name> <literal type="string">" Parse metric from JSON payload finished"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Parse timestamp</comment>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>smlParseTSFromJSON</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"OTD:0x%"</literal> <name>PRIx64</name> <literal type="string">" Unable to parse timestamp from JSON payload"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"OTD:0x%"</literal> <name>PRIx64</name> <literal type="string">" Parse timestamp from JSON payload finished"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Parse metric value</comment>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>smlParseColsFromJSON</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"OTD:0x%"</literal> <name>PRIx64</name> <literal type="string">" Unable to parse metric value from JSON payload"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"OTD:0x%"</literal> <name>PRIx64</name> <literal type="string">" Parse metric value from JSON payload finished"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Parse tags</comment>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>smlParseTagsFromJSON</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>tinfo</name><operator>-&gt;</operator><name>tags</name></name></expr></argument>, <argument><expr><name><name>tinfo</name><operator>-&gt;</operator><name>childTableName</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>dumplicateKey</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"OTD:0x%"</literal> <name>PRIx64</name> <literal type="string">" Unable to parse tags from JSON payload"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"OTD:0x%"</literal> <name>PRIx64</name> <literal type="string">" Parse tags from JSON payload finished"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
<comment type="block" format="doxygen">/************* TSDB_SML_JSON_PROTOCOL function end **************/</comment>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>smlParseInfluxLine</name><parameter_list>(<parameter><decl><type><name>SSmlHandle</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sql</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSmlLineInfo</name></type> <name>elements</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"SML:0x%"</literal> <name>PRIx64</name> <literal type="string">" smlParseInfluxLine raw:%d, len:%d, sql:%s"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>isRawLine</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name><name>info</name><operator>-&gt;</operator><name>isRawLine</name></name></expr> ?</condition><then> <expr><literal type="string">"rawdata"</literal></expr> </then><else>: <expr><name>sql</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>smlParseInfluxString</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><name>sql</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elements</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"SML:0x%"</literal> <name>PRIx64</name> <literal type="string">" smlParseInfluxLine failed"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>cols</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>dataFormat</name></name></expr>)</condition> <block>{<block_content>  <comment type="line">// if dataFormat, cols need new memory to save data</comment>
    <expr_stmt><expr><name>cols</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>cols</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"SML:0x%"</literal> <name>PRIx64</name> <literal type="string">" smlParseInfluxLine failed to allocate memory"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// if dataFormat is false, cols do not need to save data, there is another new memory to save data</comment>
    <expr_stmt><expr><name>cols</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>colsContainer</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>smlParseTS</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name><name>elements</name><operator>.</operator><name>timestamp</name></name></expr></argument>, <argument><expr><name><name>elements</name><operator>.</operator><name>timestampLen</name></name></expr></argument>, <argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"SML:0x%"</literal> <name>PRIx64</name> <literal type="string">" smlParseTS failed"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>dataFormat</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>smlParseCols</name><argument_list>(<argument><expr><name><name>elements</name><operator>.</operator><name>cols</name></name></expr></argument>, <argument><expr><name><name>elements</name><operator>.</operator><name>colsLen</name></name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>dumplicateKey</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"SML:0x%"</literal> <name>PRIx64</name> <literal type="string">" smlParseCols parse cloums fields failed"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>smlDestroyCols</name><argument_list>(<argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>dataFormat</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>bool</name></type>            <name>hasTable</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSmlTableInfo</name>  <modifier>*</modifier></type><name>tinfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSmlTableInfo</name> <modifier>*</modifier><modifier>*</modifier></type><name>oneTable</name> <init>=
      <expr><operator>(</operator><name>SSmlTableInfo</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>childTables</name></name></expr></argument>, <argument><expr><name><name>elements</name><operator>.</operator><name>measure</name></name></expr></argument>, <argument><expr><name><name>elements</name><operator>.</operator><name>measureTagsLen</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>oneTable</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>tinfo</name> <operator>=</operator> <call><name>smlBuildTableInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>tinfo</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>smlDestroyCols</name><argument_list>(<argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>dataFormat</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>childTables</name></name></expr></argument>, <argument><expr><name><name>elements</name><operator>.</operator><name>measure</name></name></expr></argument>, <argument><expr><name><name>elements</name><operator>.</operator><name>measureTagsLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tinfo</name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>oneTable</name> <operator>=</operator> <operator>&amp;</operator><name>tinfo</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>hasTable</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>smlDealCols</name><argument_list>(<argument><expr><operator>*</operator><name>oneTable</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>dataFormat</name></name></expr></argument>, <argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>ret</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>hasTable</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>smlParseCols</name><argument_list>(<argument><expr><name><name>elements</name><operator>.</operator><name>tags</name></name></expr></argument>, <argument><expr><name><name>elements</name><operator>.</operator><name>tagsLen</name></name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>oneTable</name><operator>)</operator><operator>-&gt;</operator><name>tags</name></name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>oneTable</name><operator>)</operator><operator>-&gt;</operator><name>childTableName</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
                       <argument><expr><name><name>info</name><operator>-&gt;</operator><name>dumplicateKey</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"SML:0x%"</literal> <name>PRIx64</name> <literal type="string">" smlParseCols parse tag fields failed"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>ret</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>oneTable</name><operator>)</operator><operator>-&gt;</operator><name>tags</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>TSDB_MAX_TAGS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>smlBuildInvalidDataMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><literal type="string">"too many tags than 128"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_PAR_INVALID_TAGS_NUM</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>cols</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>oneTable</name><operator>)</operator><operator>-&gt;</operator><name>tags</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>TSDB_MAX_COLUMNS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>smlBuildInvalidDataMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><literal type="string">"too many columns than 4096"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_PAR_TOO_MANY_COLUMNS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>oneTable</name><operator>)</operator><operator>-&gt;</operator><name>sTableName</name></name> <operator>=</operator> <name><name>elements</name><operator>.</operator><name>measure</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>oneTable</name><operator>)</operator><operator>-&gt;</operator><name>sTableNameLen</name></name> <operator>=</operator> <name><name>elements</name><operator>.</operator><name>measureLen</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>oneTable</name><operator>)</operator><operator>-&gt;</operator><name>childTableName</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>RandTableName</name></type> <name>rName</name> <init>= <expr><block>{<expr><name><operator>(</operator><operator>*</operator><name>oneTable</name><operator>)</operator><operator>-&gt;</operator><name>tags</name></name></expr>, <expr><name><operator>(</operator><operator>*</operator><name>oneTable</name><operator>)</operator><operator>-&gt;</operator><name>sTableName</name></name></expr>, <expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><operator>(</operator><operator>*</operator><name>oneTable</name><operator>)</operator><operator>-&gt;</operator><name>sTableNameLen</name></name></expr>,
                             <expr><name><operator>(</operator><operator>*</operator><name>oneTable</name><operator>)</operator><operator>-&gt;</operator><name>childTableName</name></name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>buildChildTableName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>oneTable</name><operator>)</operator><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <name><name>rName</name><operator>.</operator><name>uid</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>oneTable</name><operator>)</operator><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>oneTable</name><operator>)</operator><operator>-&gt;</operator><name>childTableName</name></name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSmlSTableMeta</name> <modifier>*</modifier><modifier>*</modifier></type><name>tableMeta</name> <init>= <expr><operator>(</operator><name>SSmlSTableMeta</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>superTables</name></name></expr></argument>, <argument><expr><name><name>elements</name><operator>.</operator><name>measure</name></name></expr></argument>, <argument><expr><name><name>elements</name><operator>.</operator><name>measureLen</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tableMeta</name></expr>)</condition> <block>{<block_content>  <comment type="line">// update meta</comment>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>smlUpdateMeta</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>tableMeta</name><operator>)</operator><operator>-&gt;</operator><name>colHash</name></name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>tableMeta</name><operator>)</operator><operator>-&gt;</operator><name>cols</name></name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>hasTable</name> <operator>&amp;&amp;</operator> <name>ret</name> <operator>==</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>smlUpdateMeta</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>tableMeta</name><operator>)</operator><operator>-&gt;</operator><name>tagHash</name></name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>tableMeta</name><operator>)</operator><operator>-&gt;</operator><name>tags</name></name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>oneTable</name><operator>)</operator><operator>-&gt;</operator><name>tags</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"SML:0x%"</literal> <name>PRIx64</name> <literal type="string">" smlUpdateMeta failed"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>ret</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>SSmlSTableMeta</name> <modifier>*</modifier></type><name>meta</name> <init>= <expr><call><name>smlBuildSTableMeta</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>smlInsertMeta</name><argument_list>(<argument><expr><name><name>meta</name><operator>-&gt;</operator><name>tagHash</name></name></expr></argument>, <argument><expr><name><name>meta</name><operator>-&gt;</operator><name>tags</name></name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>oneTable</name><operator>)</operator><operator>-&gt;</operator><name>tags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>smlInsertMeta</name><argument_list>(<argument><expr><name><name>meta</name><operator>-&gt;</operator><name>colHash</name></name></expr></argument>, <argument><expr><name><name>meta</name><operator>-&gt;</operator><name>cols</name></name></expr></argument>, <argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>superTables</name></name></expr></argument>, <argument><expr><name><name>elements</name><operator>.</operator><name>measure</name></name></expr></argument>, <argument><expr><name><name>elements</name><operator>.</operator><name>measureLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>meta</name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>info</name><operator>-&gt;</operator><name>dataFormat</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayClear</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>colsContainer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosHashClear</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>dumplicateKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>smlParseTelnetLine</name><parameter_list>(<parameter><decl><type><name>SSmlHandle</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type>            <name>ret</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSmlTableInfo</name> <modifier>*</modifier></type><name>tinfo</name> <init>= <expr><call><name>smlBuildTableInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>tinfo</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>cols</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>cols</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"SML:0x%"</literal> <name>PRIx64</name> <literal type="string">" smlParseTelnetLine failed to allocate memory"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>protocol</name></name> <operator>==</operator> <name>TSDB_SML_TELNET_PROTOCOL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>smlParseTelnetString</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>data</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>tinfo</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>protocol</name></name> <operator>==</operator> <name>TSDB_SML_JSON_PROTOCOL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>smlParseJSONString</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><operator>(</operator><name>cJSON</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>, <argument><expr><name>tinfo</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"SML:0x%"</literal> <name>PRIx64</name> <literal type="string">" smlParseTelnetLine failed"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>smlDestroyTableInfo</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>tinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>smlDestroyCols</name><argument_list>(<argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>tinfo</name><operator>-&gt;</operator><name>tags</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>tinfo</name><operator>-&gt;</operator><name>tags</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>TSDB_MAX_TAGS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>smlBuildInvalidDataMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>, <argument><expr><literal type="string">"invalidate tags length:[1,128]"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>smlDestroyTableInfo</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>tinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>smlDestroyCols</name><argument_list>(<argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_PAR_INVALID_TAGS_NUM</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosHashClear</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>dumplicateKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>tinfo</name><operator>-&gt;</operator><name>childTableName</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>RandTableName</name></type> <name>rName</name> <init>= <expr><block>{<expr><name><name>tinfo</name><operator>-&gt;</operator><name>tags</name></name></expr>, <expr><name><name>tinfo</name><operator>-&gt;</operator><name>sTableName</name></name></expr>, <expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>tinfo</name><operator>-&gt;</operator><name>sTableNameLen</name></name></expr>, <expr><name><name>tinfo</name><operator>-&gt;</operator><name>childTableName</name></name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>buildChildTableName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tinfo</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <name><name>rName</name><operator>.</operator><name>uid</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>tinfo</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>tinfo</name><operator>-&gt;</operator><name>childTableName</name></name><operator>)</operator></expr>;</expr_stmt>  <comment type="line">// generate uid by name simple</comment>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>bool</name></type>            <name>hasTable</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSmlTableInfo</name> <modifier>*</modifier><modifier>*</modifier></type><name>oneTable</name> <init>=
      <expr><operator>(</operator><name>SSmlTableInfo</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>childTables</name></name></expr></argument>, <argument><expr><name><name>tinfo</name><operator>-&gt;</operator><name>childTableName</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>tinfo</name><operator>-&gt;</operator><name>childTableName</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>oneTable</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>childTables</name></name></expr></argument>, <argument><expr><name><name>tinfo</name><operator>-&gt;</operator><name>childTableName</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>tinfo</name><operator>-&gt;</operator><name>childTableName</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>tinfo</name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>oneTable</name> <operator>=</operator> <operator>&amp;</operator><name>tinfo</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>hasTable</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>smlDestroyTableInfo</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>tinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>oneTable</name><operator>)</operator><operator>-&gt;</operator><name>cols</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SSmlSTableMeta</name> <modifier>*</modifier><modifier>*</modifier></type><name>tableMeta</name> <init>=
      <expr><operator>(</operator><name>SSmlSTableMeta</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>superTables</name></name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>oneTable</name><operator>)</operator><operator>-&gt;</operator><name>sTableName</name></name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>oneTable</name><operator>)</operator><operator>-&gt;</operator><name>sTableNameLen</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tableMeta</name></expr>)</condition> <block>{<block_content>  <comment type="line">// update meta</comment>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>smlUpdateMeta</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>tableMeta</name><operator>)</operator><operator>-&gt;</operator><name>colHash</name></name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>tableMeta</name><operator>)</operator><operator>-&gt;</operator><name>cols</name></name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>hasTable</name> <operator>&amp;&amp;</operator> <name>ret</name> <operator>==</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>smlUpdateMeta</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>tableMeta</name><operator>)</operator><operator>-&gt;</operator><name>tagHash</name></name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>tableMeta</name><operator>)</operator><operator>-&gt;</operator><name>tags</name></name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>oneTable</name><operator>)</operator><operator>-&gt;</operator><name>tags</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"SML:0x%"</literal> <name>PRIx64</name> <literal type="string">" smlUpdateMeta failed"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>ret</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>SSmlSTableMeta</name> <modifier>*</modifier></type><name>meta</name> <init>= <expr><call><name>smlBuildSTableMeta</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>smlInsertMeta</name><argument_list>(<argument><expr><name><name>meta</name><operator>-&gt;</operator><name>tagHash</name></name></expr></argument>, <argument><expr><name><name>meta</name><operator>-&gt;</operator><name>tags</name></name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>oneTable</name><operator>)</operator><operator>-&gt;</operator><name>tags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>smlInsertMeta</name><argument_list>(<argument><expr><name><name>meta</name><operator>-&gt;</operator><name>colHash</name></name></expr></argument>, <argument><expr><name><name>meta</name><operator>-&gt;</operator><name>cols</name></name></expr></argument>, <argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>superTables</name></name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>oneTable</name><operator>)</operator><operator>-&gt;</operator><name>sTableName</name></name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>oneTable</name><operator>)</operator><operator>-&gt;</operator><name>sTableNameLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>meta</name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>smlParseJSON</name><parameter_list>(<parameter><decl><type><name>SSmlHandle</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>payload</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>payloadNum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>payload</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"SML:0x%"</literal> <name>PRIx64</name> <literal type="string">" empty JSON Payload"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_TSC_INVALID_JSON</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <call><name>cJSON_Parse</name><argument_list>(<argument><expr><name>payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>root</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"SML:0x%"</literal> <name>PRIx64</name> <literal type="string">" parse json failed:%s"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_TSC_INVALID_JSON</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// multiple data points must be sent in JSON array</comment>
  <if_stmt><if>if <condition>(<expr><call><name>cJSON_IsObject</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>payloadNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>cJSON_IsArray</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>payloadNum</name> <operator>=</operator> <call><name>cJSON_GetArraySize</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"SML:0x%"</literal> <name>PRIx64</name> <literal type="string">" Invalid JSON Payload"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TSDB_CODE_TSC_INVALID_JSON</name></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></else></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>payloadNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>cJSON</name> <modifier>*</modifier></type><name>dataPoint</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>payloadNum</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>cJSON_IsObject</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name><name>info</name><operator>-&gt;</operator><name>root</name></name></expr> </then><else>: <expr><call><name>cJSON_GetArrayItem</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>smlParseTelnetLine</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>dataPoint</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"SML:0x%"</literal> <name>PRIx64</name> <literal type="string">" Invalid JSON Payload"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>end</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

<label><name>end</name>:</label>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>smlInsertData</name><parameter_list>(<parameter><decl><type><name>SSmlHandle</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SSmlTableInfo</name> <modifier>*</modifier><modifier>*</modifier></type><name>oneTable</name> <init>= <expr><operator>(</operator><name>SSmlTableInfo</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>childTables</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>oneTable</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSmlTableInfo</name> <modifier>*</modifier></type><name>tableData</name> <init>= <expr><operator>*</operator><name>oneTable</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SName</name></type> <name>pName</name> <init>= <expr><block>{<expr><name>TSDB_TABLE_NAME_T</name></expr>, <expr><name><name>info</name><operator>-&gt;</operator><name>taos</name><operator>-&gt;</operator><name>acctId</name></name></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>pName</name><operator>.</operator><name>dbname</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>pRequest</name><operator>-&gt;</operator><name>pDb</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pName</name><operator>.</operator><name>dbname</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pName</name><operator>.</operator><name>tname</name></name></expr></argument>, <argument><expr><name><name>tableData</name><operator>-&gt;</operator><name>childTableName</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>tableData</name><operator>-&gt;</operator><name>childTableName</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SRequestConnInfo</name></type> <name>conn</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>.</operator><name>pTrans</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>taos</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>pTransporter</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>.</operator><name>requestId</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>.</operator><name>requestObjRefId</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>pRequest</name><operator>-&gt;</operator><name>self</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn</name><operator>.</operator><name>mgmtEps</name></name> <operator>=</operator> <call><name>getEpSet_s</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>taos</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>mgmtEp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SVgroupInfo</name></type> <name>vg</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogGetTableHashVgroup</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>pCatalog</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"SML:0x%"</literal> <name>PRIx64</name> <literal type="string">" catalogGetTableHashVgroup failed. table name: %s"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>tableData</name><operator>-&gt;</operator><name>childTableName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>pVgHash</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>vg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>vg</name><operator>.</operator><name>vgId</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>vg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SSmlSTableMeta</name> <modifier>*</modifier><modifier>*</modifier></type><name>pMeta</name> <init>=
        <expr><operator>(</operator><name>SSmlSTableMeta</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>superTables</name></name></expr></argument>, <argument><expr><name><name>tableData</name><operator>-&gt;</operator><name>sTableName</name></name></expr></argument>, <argument><expr><name><name>tableData</name><operator>-&gt;</operator><name>sTableNameLen</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <name>pMeta</name> <operator>&amp;&amp;</operator> <name>NULL</name> <operator>!=</operator> <operator>*</operator><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// use tablemeta of stable to save vgid and uid of child table</comment>
    <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pMeta</name><operator>)</operator><operator>-&gt;</operator><name><name>tableMeta</name><operator>-&gt;</operator><name>vgId</name></name></name> <operator>=</operator> <name><name>vg</name><operator>.</operator><name>vgId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pMeta</name><operator>)</operator><operator>-&gt;</operator><name><name>tableMeta</name><operator>-&gt;</operator><name>uid</name></name></name> <operator>=</operator> <name><name>tableData</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>  <comment type="line">// one table merge data block together according uid</comment>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>smlBindData</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>exec</name></name></expr></argument>, <argument><expr><name><name>tableData</name><operator>-&gt;</operator><name>tags</name></name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>pMeta</name><operator>)</operator><operator>-&gt;</operator><name>cols</name></name></expr></argument>, <argument><expr><name><name>tableData</name><operator>-&gt;</operator><name>cols</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>dataFormat</name></name></expr></argument>,
                       <argument><expr><name><operator>(</operator><operator>*</operator><name>pMeta</name><operator>)</operator><operator>-&gt;</operator><name>tableMeta</name></name></expr></argument>, <argument><expr><name><name>tableData</name><operator>-&gt;</operator><name>childTableName</name></name></expr></argument>, <argument><expr><name><name>tableData</name><operator>-&gt;</operator><name>sTableName</name></name></expr></argument>, <argument><expr><name><name>tableData</name><operator>-&gt;</operator><name>sTableNameLen</name></name></expr></argument>,
                       <argument><expr><name><name>info</name><operator>-&gt;</operator><name>ttl</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>msgBuf</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>msgBuf</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"SML:0x%"</literal> <name>PRIx64</name> <literal type="string">" smlBindData failed"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>oneTable</name> <operator>=</operator> <operator>(</operator><name>SSmlTableInfo</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>childTables</name></name></expr></argument>, <argument><expr><name>oneTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>smlBuildOutput</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>exec</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>pVgHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"SML:0x%"</literal> <name>PRIx64</name> <literal type="string">" smlBuildOutput failed"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>insertRpcTime</name></name> <operator>=</operator> <call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// launchQueryImpl(info-&gt;pRequest, info-&gt;pQuery, false, NULL);</comment>
  <comment type="line">//  info-&gt;affectedRows = taos_affected_rows(info-&gt;pRequest);</comment>
  <comment type="line">//  return info-&gt;pRequest-&gt;code;</comment>

  <decl_stmt><decl><type><name>SAppClusterSummary</name> <modifier>*</modifier></type><name>pActivity</name> <init>= <expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>taos</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>summary</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>atomic_add_fetch_64</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pActivity</name><operator>-&gt;</operator><name>numOfInsertsReq</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSqlCallbackWrapper</name> <modifier>*</modifier></type><name>pWrapper</name> <init>= <expr><operator>(</operator><name>SSqlCallbackWrapper</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSqlCallbackWrapper</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pWrapper</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>pRequest</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>pRequest</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>launchAsyncQuery</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>pRequest</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>pQuery</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>smlPrintStatisticInfo</name><parameter_list>(<parameter><decl><type><name>SSmlHandle</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"SML:0x%"</literal> <name>PRIx64</name>
         <literal type="string">" smlInsertLines result, code:%d,lineNum:%d,stable num:%d,ctable num:%d,create stable num:%d,alter stable tag num:%d,alter stable col num:%d \
        parse cost:%"</literal> <name>PRId64</name> <literal type="string">",schema cost:%"</literal> <name>PRId64</name> <literal type="string">",bind cost:%"</literal> <name>PRId64</name> <literal type="string">",rpc cost:%"</literal> <name>PRId64</name> <literal type="string">",total cost:%"</literal> <name>PRId64</name>
         <literal type="string">""</literal></expr></argument>,
         <argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>code</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>lineNum</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>numOfSTables</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>numOfCTables</name></name></expr></argument>,
         <argument><expr><name><name>info</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>numOfCreateSTables</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>numOfAlterTagSTables</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>numOfAlterColSTables</name></name></expr></argument>,
         <argument><expr><name><name>info</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>schemaTime</name></name> <operator>-</operator> <name><name>info</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>parseTime</name></name></expr></argument>,
         <argument><expr><name><name>info</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>insertBindTime</name></name> <operator>-</operator> <name><name>info</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>schemaTime</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>insertRpcTime</name></name> <operator>-</operator> <name><name>info</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>insertBindTime</name></name></expr></argument>,
         <argument><expr><name><name>info</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>endTime</name></name> <operator>-</operator> <name><name>info</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>insertRpcTime</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>endTime</name></name> <operator>-</operator> <name><name>info</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>parseTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>smlParseLine</name><parameter_list>(<parameter><decl><type><name>SSmlHandle</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>lines</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>rawLine</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>rawLineEnd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numLines</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>protocol</name></name> <operator>==</operator> <name>TSDB_SML_JSON_PROTOCOL</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>lines</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>smlParseJSON</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><operator>*</operator><name>lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rawLine</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>smlParseJSON</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>rawLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"SML:0x%"</literal> <name>PRIx64</name> <literal type="string">" smlParseJSON failed:%s"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>lines</name></expr> ?</condition><then> <expr><operator>*</operator><name>lines</name></expr> </then><else>: <expr><name>rawLine</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numLines</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>   <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>lines</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>lines</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rawLine</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>rawLine</name></expr>;</expr_stmt>
      <while>while <condition>(<expr><name>rawLine</name> <operator>&lt;</operator> <name>rawLineEnd</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>rawLine</name><operator>++</operator><operator>)</operator> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></while>
      <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>protocol</name></name> <operator>==</operator> <name>TSDB_SML_LINE_PROTOCOL</name> <operator>&amp;&amp;</operator> <name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>  <comment type="line">// this line is comment</comment>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>protocol</name></name> <operator>==</operator> <name>TSDB_SML_LINE_PROTOCOL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>smlParseInfluxLine</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>protocol</name></name> <operator>==</operator> <name>TSDB_SML_TELNET_PROTOCOL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>smlParseTelnetLine</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"SML:0x%"</literal> <name>PRIx64</name> <literal type="string">" smlParseLine failed. line %d : %s"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>smlProcess</name><parameter_list>(<parameter><decl><type><name>SSmlHandle</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>lines</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>rawLine</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>rawLineEnd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numLines</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>retryNum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>parseTime</name></name> <operator>=</operator> <call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>smlParseLine</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>lines</name></expr></argument>, <argument><expr><name>rawLine</name></expr></argument>, <argument><expr><name>rawLineEnd</name></expr></argument>, <argument><expr><name>numLines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"SML:0x%"</literal> <name>PRIx64</name> <literal type="string">" smlParseLine error : %s"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>lineNum</name></name> <operator>=</operator> <name>numLines</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>numOfSTables</name></name> <operator>=</operator> <call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>superTables</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>numOfCTables</name></name> <operator>=</operator> <call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>childTables</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>schemaTime</name></name> <operator>=</operator> <call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <do>do <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>smlModifyDBSchemas</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
  </block_content>}</block> while <condition>(<expr><name>retryNum</name><operator>++</operator> <operator>&lt;</operator> <call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>superTables</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>MAX_RETRY_TIMES</name></expr>)</condition>;</do>

  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"SML:0x%"</literal> <name>PRIx64</name> <literal type="string">" smlModifyDBSchemas error : %s"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>insertBindTime</name></name> <operator>=</operator> <call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>smlInsertData</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"SML:0x%"</literal> <name>PRIx64</name> <literal type="string">" smlInsertData error : %s"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>isSchemalessDb</name><parameter_list>(<parameter><decl><type><name>STscObj</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>, <parameter><decl><type><name>SRequestObj</name> <modifier>*</modifier></type><name>request</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">//  SCatalog *catalog = NULL;</comment>
  <comment type="line">//  int32_t   code = catalogGetHandle(((STscObj *)taos)-&gt;pAppInfo-&gt;clusterId, &amp;catalog);</comment>
  <comment type="line">//  if (code != TSDB_CODE_SUCCESS) {</comment>
  <comment type="line">//    uError("SML get catalog error %d", code);</comment>
  <comment type="line">//    return code;</comment>
  <comment type="line">//  }</comment>
  <comment type="line">//</comment>
  <comment type="line">//  SName name;</comment>
  <comment type="line">//  tNameSetDbName(&amp;name, taos-&gt;acctId, taos-&gt;db, strlen(taos-&gt;db));</comment>
  <comment type="line">//  char dbFname[TSDB_DB_FNAME_LEN] = {0};</comment>
  <comment type="line">//  tNameGetFullDbName(&amp;name, dbFname);</comment>
  <comment type="line">//  SDbCfgInfo pInfo = {0};</comment>
  <comment type="line">//</comment>
  <comment type="line">//  SRequestConnInfo conn = {0};</comment>
  <comment type="line">//  conn.pTrans = taos-&gt;pAppInfo-&gt;pTransporter;</comment>
  <comment type="line">//  conn.requestId = request-&gt;requestId;</comment>
  <comment type="line">//  conn.requestObjRefId = request-&gt;self;</comment>
  <comment type="line">//  conn.mgmtEps = getEpSet_s(&amp;taos-&gt;pAppInfo-&gt;mgmtEp);</comment>
  <comment type="line">//</comment>
  <comment type="line">//  code = catalogGetDBCfg(catalog, &amp;conn, dbFname, &amp;pInfo);</comment>
  <comment type="line">//  if (code != TSDB_CODE_SUCCESS) {</comment>
  <comment type="line">//    return code;</comment>
  <comment type="line">//  }</comment>
  <comment type="line">//  taosArrayDestroy(pInfo.pRetensions);</comment>
  <comment type="line">//</comment>
  <comment type="line">//  if (!pInfo.schemaless) {</comment>
  <comment type="line">//    return TSDB_CODE_SML_INVALID_DB_CONF;</comment>
  <comment type="line">//  }</comment>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>smlInsertCallback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SRequestObj</name> <modifier>*</modifier></type><name>pRequest</name> <init>= <expr><operator>(</operator><name>SRequestObj</name> <operator>*</operator><operator>)</operator><name>res</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSmlHandle</name>  <modifier>*</modifier></type><name>info</name> <init>= <expr><operator>(</operator><name>SSmlHandle</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>rows</name> <init>= <expr><call><name>taos_affected_rows</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"SML:0x%"</literal> <name>PRIx64</name> <literal type="string">" result. code:%d, msg:%s"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>Params</name> <modifier>*</modifier></type><name>pParam</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>params</name></name></expr></init></decl>;</decl_stmt>
  <comment type="line">// lock</comment>
  <expr_stmt><expr><call><name>taosThreadSpinLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pParam</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pParam</name><operator>-&gt;</operator><name>cnt</name></name><operator>++</operator></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pParam</name><operator>-&gt;</operator><name>request</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pParam</name><operator>-&gt;</operator><name>request</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>resInfo</name><operator>.</operator><name>numOfRows</name></name> <operator>+=</operator> <name>rows</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pParam</name><operator>-&gt;</operator><name>request</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>resInfo</name><operator>.</operator><name>numOfRows</name></name> <operator>+=</operator> <name><name>info</name><operator>-&gt;</operator><name>affectedRows</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <comment type="line">// unlock</comment>
  <expr_stmt><expr><call><name>taosThreadSpinUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pParam</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pParam</name><operator>-&gt;</operator><name>cnt</name></name> <operator>==</operator> <name><name>pParam</name><operator>-&gt;</operator><name>total</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pParam</name><operator>-&gt;</operator><name>sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"SML:0x%"</literal> <name>PRIx64</name> <literal type="string">" insert finished, code: %d, rows: %d, total: %d"</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>affectedRows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>endTime</name></name> <operator>=</operator> <call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>smlPrintStatisticInfo</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>smlDestroyInfo</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>taos_schemaless_insert_inner</name><parameter_list>(<parameter><decl><type><name>SRequestObj</name> <modifier>*</modifier></type><name>request</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>lines</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>rawLine</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>rawLineEnd</name></decl></parameter>,
                                       <parameter><decl><type><name>int</name></type> <name>numLines</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>protocol</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>precision</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>ttl</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type>      <name>batchs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STscObj</name> <modifier>*</modifier></type><name>pTscObj</name> <init>= <expr><name><name>request</name><operator>-&gt;</operator><name>pTscObj</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>schemalessType</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SSmlMsgBuf</name></type> <name>msg</name> <init>= <expr><block>{<expr><name>ERROR_MSG_BUF_DEFAULT_SIZE</name></expr>, <expr><name><name>request</name><operator>-&gt;</operator><name>msgBuf</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>Params</name></type> <name>params</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>params</name><operator>.</operator><name>request</name></name> <operator>=</operator> <name>request</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tsem_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>params</name><operator>.</operator><name>sem</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadSpinInit</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>params</name><operator>.</operator><name>lock</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>request</name><operator>-&gt;</operator><name>pDb</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>request</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_PAR_DB_NOT_SPECIFIED</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>smlBuildInvalidDataMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><literal type="string">"Database not specified"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>isSchemalessDb</name><argument_list>(<argument><expr><name>pTscObj</name></expr></argument>, <argument><expr><name>request</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>request</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_SML_INVALID_DB_CONF</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>smlBuildInvalidDataMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><literal type="string">"Cannot write data to a non schemaless database"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>protocol</name> <argument_list type="generic">&lt; <argument><expr><name>TSDB_SML_LINE_PROTOCOL</name> <operator>||</operator> <name>protocol</name></expr></argument> &gt;</argument_list></name> <name>TSDB_SML_JSON_PROTOCOL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>request</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_SML_INVALID_PROTOCOL_TYPE</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>smlBuildInvalidDataMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><literal type="string">"protocol invalidate"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>protocol</name> <operator>==</operator> <name>TSDB_SML_LINE_PROTOCOL</name> <operator>&amp;&amp;</operator>
      <operator>(</operator><name><name>precision</name> <argument_list type="generic">&lt; <argument><expr><name>TSDB_SML_TIMESTAMP_NOT_CONFIGURED</name> <operator>||</operator> <name>precision</name></expr></argument> &gt;</argument_list></name> <name>TSDB_SML_TIMESTAMP_NANO_SECONDS</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>request</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_SML_INVALID_PRECISION_TYPE</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>smlBuildInvalidDataMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><literal type="string">"precision invalidate for line protocol"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>protocol</name> <operator>==</operator> <name>TSDB_SML_JSON_PROTOCOL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>numLines</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>numLines</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>request</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_SML_INVALID_DATA</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>smlBuildInvalidDataMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><literal type="string">"line num is invalid"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>batchs</name> <operator>=</operator> <call><name>ceil</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name>numLines</name><operator>)</operator> <operator>/</operator> <name>tsSmlBatchSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><operator>.</operator><name>total</name></name> <operator>=</operator> <name>batchs</name></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>batchs</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SRequestObj</name> <modifier>*</modifier></type><name>req</name> <init>= <expr><operator>(</operator><name>SRequestObj</name> <operator>*</operator><operator>)</operator><call><name>createRequest</name><argument_list>(<argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>TSDB_SQL_INSERT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>req</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>request</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"SML:taos_schemaless_insert error request is null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>end</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>SSmlHandle</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><call><name>smlBuildSmlInfo</name><argument_list>(<argument><expr><name>pTscObj</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><operator>(</operator><name>SMLProtocolType</name><operator>)</operator><name>protocol</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>info</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>request</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"SML:taos_schemaless_insert error SSmlHandle is null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>end</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>isRawLine</name></name> <operator>=</operator> <operator>(</operator><name>rawLine</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>ttl</name></name>       <operator>=</operator> <name>ttl</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>perBatch</name> <init>= <expr><name>tsSmlBatchSize</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>numLines</name> <operator>&gt;</operator> <name>perBatch</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>numLines</name> <operator>-=</operator> <name>perBatch</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>perBatch</name> <operator>=</operator> <name>numLines</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>numLines</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>params</name></name> <operator>=</operator> <operator>&amp;</operator><name>params</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>affectedRows</name></name> <operator>=</operator> <name>perBatch</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>queryFp</name></name> <operator>=</operator> <name>smlInsertCallback</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>param</name></name> <operator>=</operator> <name>info</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>smlProcess</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>lines</name></expr></argument>, <argument><expr><name>rawLine</name></expr></argument>, <argument><expr><name>rawLineEnd</name></expr></argument>, <argument><expr><name>perBatch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>lines</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>lines</name> <operator>+=</operator> <name>perBatch</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>rawLine</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <while>while <condition>(<expr><name>rawLine</name> <operator>&lt;</operator> <name>rawLineEnd</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>rawLine</name><operator>++</operator><operator>)</operator> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>num</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>num</name> <operator>==</operator> <name>perBatch</name></expr>)</condition> <block>{<block_content>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></while>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>info</name><operator>-&gt;</operator><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>queryFp</name></name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>tsem_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>params</name><operator>.</operator><name>sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
  <expr_stmt><expr><call><name>taosThreadSpinDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>params</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tsem_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>params</name><operator>.</operator><name>sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//  ((STscObj *)taos)-&gt;schemalessType = 0;</comment>
  <expr_stmt><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>schemalessType</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>uDebug</name><argument_list>(<argument><expr><literal type="string">"resultend:%s"</literal></expr></argument>, <argument><expr><name><name>request</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>TAOS_RES</name> <operator>*</operator><operator>)</operator><name>request</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * taos_schemaless_insert() parse and insert data points into database according to
 * different protocol.
 *
 * @param $lines input array may contain multiple lines, each line indicates a data point.
 *               If protocol=2 is used input array should contain single JSON
 *               string(e.g. char *lines[] = {"$JSON_string"}). If need to insert
 *               multiple data points in JSON format, should include them in $JSON_string
 *               as a JSON array.
 * @param $numLines indicates how many data points in $lines.
 *                  If protocol = 2 is used this param will be ignored as $lines should
 *                  contain single JSON string.
 * @param $protocol indicates which protocol to use for parsing:
 *                  0 - influxDB line protocol
 *                  1 - OpenTSDB telnet line protocol
 *                  2 - OpenTSDB JSON format protocol
 * @return TAOS_RES
 */</comment>

<function><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>taos_schemaless_insert_ttl_with_reqid</name><parameter_list>(<parameter><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>lines</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numLines</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>protocol</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>precision</name></decl></parameter>,
                                                <parameter><decl><type><name>int32_t</name></type> <name>ttl</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>reqid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>taos</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_TSC_DISCONNECTED</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SRequestObj</name> <modifier>*</modifier></type><name>request</name> <init>= <expr><operator>(</operator><name>SRequestObj</name> <operator>*</operator><operator>)</operator><call><name>createRequest</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name>taos</name></expr></argument>, <argument><expr><name>TSDB_SQL_INSERT</name></expr></argument>, <argument><expr><name>reqid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>request</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"SML:taos_schemaless_insert error request is null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>lines</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSmlMsgBuf</name></type> <name>msg</name> <init>= <expr><block>{<expr><name>ERROR_MSG_BUF_DEFAULT_SIZE</name></expr>, <expr><name><name>request</name><operator>-&gt;</operator><name>msgBuf</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>request</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_SML_INVALID_DATA</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>smlBuildInvalidDataMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><literal type="string">"lines is null"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><name>TAOS_RES</name> <operator>*</operator><operator>)</operator><name>request</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>taos_schemaless_insert_inner</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>lines</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>numLines</name></expr></argument>, <argument><expr><name>protocol</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>, <argument><expr><name>ttl</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>taos_schemaless_insert</name><parameter_list>(<parameter><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>lines</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numLines</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>protocol</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>precision</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>taos_schemaless_insert_ttl_with_reqid</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name>lines</name></expr></argument>, <argument><expr><name>numLines</name></expr></argument>, <argument><expr><name>protocol</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>, <argument><expr><name>TSDB_DEFAULT_TABLE_TTL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>taos_schemaless_insert_ttl</name><parameter_list>(<parameter><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>lines</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numLines</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>protocol</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>precision</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>ttl</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>taos_schemaless_insert_ttl_with_reqid</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name>lines</name></expr></argument>, <argument><expr><name>numLines</name></expr></argument>, <argument><expr><name>protocol</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>, <argument><expr><name>ttl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>taos_schemaless_insert_with_reqid</name><parameter_list>(<parameter><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>lines</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numLines</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>protocol</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>precision</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>reqid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>taos_schemaless_insert_ttl_with_reqid</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name>lines</name></expr></argument>, <argument><expr><name>numLines</name></expr></argument>, <argument><expr><name>protocol</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>, <argument><expr><name>TSDB_DEFAULT_TABLE_TTL</name></expr></argument>, <argument><expr><name>reqid</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>taos_schemaless_insert_raw_ttl_with_reqid</name><parameter_list>(<parameter><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>lines</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>totalRows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>protocol</name></decl></parameter>,
                                                <parameter><decl><type><name>int</name></type> <name>precision</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>ttl</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>reqid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>taos</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_TSC_DISCONNECTED</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SRequestObj</name> <modifier>*</modifier></type><name>request</name> <init>= <expr><operator>(</operator><name>SRequestObj</name> <operator>*</operator><operator>)</operator><call><name>createRequest</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name>taos</name></expr></argument>, <argument><expr><name>TSDB_SQL_INSERT</name></expr></argument>, <argument><expr><name>reqid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>request</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"SML:taos_schemaless_insert error request is null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>lines</name> <operator>||</operator> <name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSmlMsgBuf</name></type> <name>msg</name> <init>= <expr><block>{<expr><name>ERROR_MSG_BUF_DEFAULT_SIZE</name></expr>, <expr><name><name>request</name><operator>-&gt;</operator><name>msgBuf</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>request</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_SML_INVALID_DATA</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>smlBuildInvalidDataMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><literal type="string">"lines is null"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><name>TAOS_RES</name> <operator>*</operator><operator>)</operator><name>request</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>numLines</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>totalRows</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>lines</name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>lines</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>numLines</name><operator>++</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'#'</literal> <operator>||</operator> <name>protocol</name> <operator>!=</operator> <name>TSDB_SML_LINE_PROTOCOL</name></expr>)</condition> <block>{<block_content>  <comment type="line">// ignore comment</comment>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>totalRows</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>lines</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><call><name>taos_schemaless_insert_inner</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>lines</name></expr></argument>, <argument><expr><name>lines</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>numLines</name></expr></argument>, <argument><expr><name>protocol</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>, <argument><expr><name>ttl</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>taos_schemaless_insert_raw_with_reqid</name><parameter_list>(<parameter><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>lines</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>totalRows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>protocol</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>precision</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>reqid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>taos_schemaless_insert_raw_ttl_with_reqid</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name>lines</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>totalRows</name></expr></argument>, <argument><expr><name>protocol</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>, <argument><expr><name>TSDB_DEFAULT_TABLE_TTL</name></expr></argument>, <argument><expr><name>reqid</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>taos_schemaless_insert_raw_ttl</name><parameter_list>(<parameter><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>lines</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>totalRows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>protocol</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>precision</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>ttl</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>taos_schemaless_insert_raw_ttl_with_reqid</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name>lines</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>totalRows</name></expr></argument>, <argument><expr><name>protocol</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>, <argument><expr><name>ttl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>taos_schemaless_insert_raw</name><parameter_list>(<parameter><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>lines</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>totalRows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>protocol</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>precision</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>taos_schemaless_insert_raw_ttl_with_reqid</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name>lines</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>totalRows</name></expr></argument>, <argument><expr><name>protocol</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>, <argument><expr><name>TSDB_DEFAULT_TABLE_TTL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
