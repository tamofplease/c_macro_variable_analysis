<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/client/src/clientEnv.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clientInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clientLog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"functionMgt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"query.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qworker.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scheduler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tglobal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tmsg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tref.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"trpc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsched.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ttime.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TSC_VAR_NOT_RELEASE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TSC_VAR_RELEASED</name></cpp:macro>    <cpp:value>0</cpp:value></cpp:define>

<decl_stmt><decl><type><name>SAppInfo</name></type> <name>appInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type>  <name>clientReqRefPool</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type>  <name>clientConnRefPool</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>timestampDeltaLimit</name> <init>= <expr><literal type="number">900</literal></expr></init></decl>;</decl_stmt>  <comment type="line">// s</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>TdThreadOnce</name></type> <name>tscinit</name> <init>= <expr><name>PTHREAD_ONCE_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>int32_t</name></type>    <name>tscInitRes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>registerRequest</name><parameter_list>(<parameter><decl><type><name>SRequestObj</name> <modifier>*</modifier></type><name>pRequest</name></decl></parameter>, <parameter><decl><type><name>STscObj</name> <modifier>*</modifier></type><name>pTscObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// connection has been released already, abort creating request.</comment>
  <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>self</name></name> <operator>=</operator> <call><name>taosAddRef</name><argument_list>(<argument><expr><name>clientReqRefPool</name></expr></argument>, <argument><expr><name>pRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>num</name> <init>= <expr><call><name>atomic_add_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTscObj</name><operator>-&gt;</operator><name>numOfReqs</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SAppClusterSummary</name> <modifier>*</modifier></type><name>pSummary</name> <init>= <expr><operator>&amp;</operator><name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>summary</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>total</name> <init>= <expr><call><name>atomic_add_fetch_64</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pSummary</name><operator>-&gt;</operator><name>totalRequests</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>currentInst</name> <init>= <expr><call><name>atomic_add_fetch_64</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pSummary</name><operator>-&gt;</operator><name>currentRequests</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"0x%"</literal> <name>PRIx64</name> <literal type="string">" new Request from connObj:0x%"</literal> <name>PRIx64</name>
             <literal type="string">", current:%d, app current:%d, total:%d, reqId:0x%"</literal> <name>PRIx64</name></expr></argument>,
             <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>self</name></name></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>currentInst</name></expr></argument>, <argument><expr><name>total</name></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>deregisterRequest</name><parameter_list>(<parameter><decl><type><name>SRequestObj</name> <modifier>*</modifier></type><name>pRequest</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <specifier>static</specifier> <name>int64_t</name></type> <name>SLOW_QUERY_INTERVAL</name> <init>= <expr><literal type="number">3000000L</literal></expr></init></decl>;</decl_stmt>  <comment type="line">// todo configurable</comment>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pRequest</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>STscObj</name>            <modifier>*</modifier></type><name>pTscObj</name> <init>= <expr><name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SAppClusterSummary</name> <modifier>*</modifier></type><name>pActivity</name> <init>= <expr><operator>&amp;</operator><name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>summary</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>currentInst</name> <init>= <expr><call><name>atomic_sub_fetch_64</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pActivity</name><operator>-&gt;</operator><name>currentRequests</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>num</name> <init>= <expr><call><name>atomic_sub_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTscObj</name><operator>-&gt;</operator><name>numOfReqs</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>duration</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>metric</name><operator>.</operator><name>start</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"0x%"</literal> <name>PRIx64</name> <literal type="string">" free Request from connObj: 0x%"</literal> <name>PRIx64</name> <literal type="string">", reqId:0x%"</literal> <name>PRIx64</name>
           <literal type="string">" elapsed:%.2f ms, "</literal>
           <literal type="string">"current:%d, app current:%d"</literal></expr></argument>,
           <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>self</name></name></expr></argument>, <argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr></argument>, <argument><expr><name>duration</name> <operator>/</operator> <literal type="number">1000.0</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>currentInst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>QUERY_NODE_VNODE_MODIF_STMT</name> <operator>==</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>stmtType</name></name></expr>)</condition> <block>{<block_content>
    <comment type="line">//    tscPerf("insert duration %" PRId64 "us: syntax:%" PRId64 "us, ctg:%" PRId64 "us, semantic:%" PRId64</comment>
    <comment type="line">//            "us, exec:%" PRId64 "us",</comment>
    <comment type="line">//            duration, pRequest-&gt;metric.syntaxEnd - pRequest-&gt;metric.syntaxStart,</comment>
    <comment type="line">//            pRequest-&gt;metric.ctgEnd - pRequest-&gt;metric.ctgStart, pRequest-&gt;metric.semanticEnd -</comment>
    <comment type="line">//            pRequest-&gt;metric.ctgEnd, pRequest-&gt;metric.execEnd - pRequest-&gt;metric.semanticEnd);</comment>
    <expr_stmt><expr><call><name>atomic_add_fetch_64</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pActivity</name><operator>-&gt;</operator><name>insertElapsedTime</name></name></expr></argument>, <argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>QUERY_NODE_SELECT_STMT</name> <operator>==</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>stmtType</name></name></expr>)</condition> <block>{<block_content>
    <comment type="line">//    tscPerf("select duration %" PRId64 "us: syntax:%" PRId64 "us, ctg:%" PRId64 "us, semantic:%" PRId64</comment>
    <comment type="line">//            "us, planner:%" PRId64 "us, exec:%" PRId64 "us, reqId:0x%" PRIx64,</comment>
    <comment type="line">//            duration, pRequest-&gt;metric.syntaxEnd - pRequest-&gt;metric.syntaxStart,</comment>
    <comment type="line">//            pRequest-&gt;metric.ctgEnd - pRequest-&gt;metric.ctgStart, pRequest-&gt;metric.semanticEnd -</comment>
    <comment type="line">//            pRequest-&gt;metric.ctgEnd, pRequest-&gt;metric.planEnd - pRequest-&gt;metric.semanticEnd,</comment>
    <comment type="line">//            pRequest-&gt;metric.resultReady - pRequest-&gt;metric.planEnd, pRequest-&gt;requestId);</comment>

    <expr_stmt><expr><call><name>atomic_add_fetch_64</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pActivity</name><operator>-&gt;</operator><name>queryElapsedTime</name></name></expr></argument>, <argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>duration</name> <operator>&gt;=</operator> <name>SLOW_QUERY_INTERVAL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>atomic_add_fetch_64</name><argument_list>(<argument><expr><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pActivity</name><operator>-&gt;</operator><name>numOfSlowQueries</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>releaseTscObj</name><argument_list>(<argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// todo close the transporter properly</comment>
<function><type><name>void</name></type> <name>closeTransporter</name><parameter_list>(<parameter><decl><type><name>SAppInstInfo</name> <modifier>*</modifier></type><name>pAppInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pAppInfo</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pAppInfo</name><operator>-&gt;</operator><name>pTransporter</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"free transporter:%p in app inst %p"</literal></expr></argument>, <argument><expr><name><name>pAppInfo</name><operator>-&gt;</operator><name>pTransporter</name></name></expr></argument>, <argument><expr><name>pAppInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>rpcClose</name><argument_list>(<argument><expr><name><name>pAppInfo</name><operator>-&gt;</operator><name>pTransporter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>clientRpcRfp</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>tmsg_t</name></type> <name>msgType</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>NEED_REDIRECT_ERROR</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>msgType</name> <operator>==</operator> <name>TDMT_SCH_QUERY</name> <operator>||</operator> <name>msgType</name> <operator>==</operator> <name>TDMT_SCH_MERGE_QUERY</name> <operator>||</operator> <name>msgType</name> <operator>==</operator> <name>TDMT_SCH_FETCH</name> <operator>||</operator>
        <name>msgType</name> <operator>==</operator> <name>TDMT_SCH_MERGE_FETCH</name> <operator>||</operator> <name>msgType</name> <operator>==</operator> <name>TDMT_SCH_QUERY_HEARTBEAT</name> <operator>||</operator> <name>msgType</name> <operator>==</operator> <name>TDMT_SCH_DROP_TASK</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="line">// start timer for particular msgType</comment>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>clientRpcTfp</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>tmsg_t</name></type> <name>msgType</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>msgType</name> <operator>==</operator> <name>TDMT_VND_SUBMIT</name> <operator>||</operator> <name>msgType</name> <operator>==</operator> <name>TDMT_VND_CREATE_TABLE</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// TODO refactor</comment>
<function><type><name>void</name> <modifier>*</modifier></type><name>openTransporter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>auth</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfThread</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SRpcInit</name></type> <name>rpcInit</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rpcInit</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rpcInit</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>localPort</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>label</name></name> <operator>=</operator> <literal type="string">"TSC"</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>numOfThreads</name></name> <operator>=</operator> <name>numOfThread</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>cfp</name></name> <operator>=</operator> <name>processMsgFromServer</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>rfp</name></name> <operator>=</operator> <name>clientRpcRfp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>sessions</name></name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>connType</name></name> <operator>=</operator> <name>TAOS_CONN_CLIENT</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>user</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>user</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>idleTime</name></name> <operator>=</operator> <name>tsShellActivityTimer</name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>compressSize</name></name> <operator>=</operator> <name>tsCompressMsgSize</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>dfp</name></name> <operator>=</operator> <name>destroyAhandle</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>retryLimit</name></name> <operator>=</operator> <name>tsRpcRetryLimit</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>retryInterval</name></name> <operator>=</operator> <name>tsRpcRetryInterval</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>retryMinInterval</name></name> <operator>=</operator> <name>tsRedirectPeriod</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>retryStepFactor</name></name> <operator>=</operator> <name>tsRedirectFactor</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>retryMaxInterval</name></name> <operator>=</operator> <name>tsRedirectMaxPeriod</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcInit</name><operator>.</operator><name>retryMaxTimouet</name></name> <operator>=</operator> <name>tsMaxRetryWaitTime</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pDnodeConn</name> <init>= <expr><call><name>rpcOpen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rpcInit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pDnodeConn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"failed to init connection to server"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>pDnodeConn</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>destroyAllRequests</name><parameter_list>(<parameter><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>pRequests</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name>pRequests</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>pIter</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>rid</name> <init>= <expr><name>pIter</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SRequestObj</name> <modifier>*</modifier></type><name>pRequest</name> <init>= <expr><call><name>acquireRequest</name><argument_list>(<argument><expr><operator>*</operator><name>rid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pRequest</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>destroyRequest</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>releaseRequest</name><argument_list>(<argument><expr><operator>*</operator><name>rid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name>pRequests</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>stopAllRequests</name><parameter_list>(<parameter><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>pRequests</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name>pRequests</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>pIter</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>rid</name> <init>= <expr><name>pIter</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SRequestObj</name> <modifier>*</modifier></type><name>pRequest</name> <init>= <expr><call><name>acquireRequest</name><argument_list>(<argument><expr><operator>*</operator><name>rid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pRequest</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taos_stop_query</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>releaseRequest</name><argument_list>(<argument><expr><operator>*</operator><name>rid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name>pRequests</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>destroyAppInst</name><parameter_list>(<parameter><decl><type><name>SAppInstInfo</name> <modifier>*</modifier></type><name>pAppInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"destroy app inst mgr %p"</literal></expr></argument>, <argument><expr><name>pAppInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>appInfo</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>hbRemoveAppHbMrg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pAppInfo</name><operator>-&gt;</operator><name>pAppHbMgr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashRemove</name><argument_list>(<argument><expr><name><name>appInfo</name><operator>.</operator><name>pInstMap</name></name></expr></argument>, <argument><expr><name><name>pAppInfo</name><operator>-&gt;</operator><name>instKey</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pAppInfo</name><operator>-&gt;</operator><name>instKey</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>appInfo</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pAppInfo</name><operator>-&gt;</operator><name>instKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>closeTransporter</name><argument_list>(<argument><expr><name>pAppInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pAppInfo</name><operator>-&gt;</operator><name>qnodeMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pAppInfo</name><operator>-&gt;</operator><name>pQnodeList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pAppInfo</name><operator>-&gt;</operator><name>qnodeMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pAppInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>destroyTscObj</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pObj</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STscObj</name> <modifier>*</modifier></type><name>pTscObj</name> <init>= <expr><name>pObj</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>  <name>tscId</name> <init>= <expr><name><name>pTscObj</name><operator>-&gt;</operator><name>id</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tscTrace</name><argument_list>(<argument><expr><literal type="string">"begin to destroy tscObj %"</literal> <name>PRIx64</name> <literal type="string">" p:%p"</literal></expr></argument>, <argument><expr><name>tscId</name></expr></argument>, <argument><expr><name>pTscObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SClientHbKey</name></type> <name>connKey</name> <init>= <expr><block>{<expr><operator>.</operator><name>tscRid</name> <operator>=</operator> <name><name>pTscObj</name><operator>-&gt;</operator><name>id</name></name></expr>, <expr><operator>.</operator><name>connType</name> <operator>=</operator> <name><name>pTscObj</name><operator>-&gt;</operator><name>connType</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>hbDeregisterConn</name><argument_list>(<argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>pAppHbMgr</name></name></expr></argument>, <argument><expr><name>connKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>destroyAllRequests</name><argument_list>(<argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>pRequests</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>pRequests</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>schedulerStopQueryHb</name><argument_list>(<argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>pTransporter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"connObj 0x%"</literal> <name>PRIx64</name> <literal type="string">" p:%p destroyed, remain inst totalConn:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>pTscObj</name></expr></argument>,
           <argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>numOfConns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// In any cases, we should not free app inst here. Or an race condition rises.</comment>
  <comment type="block">/*int64_t connNum = */</comment><expr_stmt><expr><call><name>atomic_sub_fetch_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>numOfConns</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTscObj</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pTscObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tscTrace</name><argument_list>(<argument><expr><literal type="string">"end to destroy tscObj %"</literal> <name>PRIx64</name> <literal type="string">" p:%p"</literal></expr></argument>, <argument><expr><name>tscId</name></expr></argument>, <argument><expr><name>pTscObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>createTscObj</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>auth</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>connType</name></decl></parameter>, <parameter><decl><type><name>SAppInstInfo</name> <modifier>*</modifier></type><name>pAppInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STscObj</name> <modifier>*</modifier></type><name>pObj</name> <init>= <expr><operator>(</operator><name>STscObj</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STscObj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pObj</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pObj</name><operator>-&gt;</operator><name>pRequests</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BIGINT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_ENTRY_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pObj</name><operator>-&gt;</operator><name>pRequests</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pObj</name><operator>-&gt;</operator><name>connType</name></name> <operator>=</operator> <name>connType</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pObj</name><operator>-&gt;</operator><name>pAppInfo</name></name> <operator>=</operator> <name>pAppInfo</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>pass</name></name></expr></argument>, <argument><expr><name>auth</name></expr></argument>, <argument><expr><name>TSDB_PASSWORD_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>db</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><call><name>tListLen</name><argument_list>(<argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pObj</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>taosAddRef</name><argument_list>(<argument><expr><name>clientConnRefPool</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pObj</name><operator>-&gt;</operator><name>schemalessType</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>atomic_add_fetch_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>numOfConns</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"connObj created, 0x%"</literal> <name>PRIx64</name> <literal type="string">",p:%p"</literal></expr></argument>, <argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pObj</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>STscObj</name> <modifier>*</modifier></type><name>acquireTscObj</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>rid</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><name>STscObj</name> <operator>*</operator><operator>)</operator><call><name>taosAcquireRef</name><argument_list>(<argument><expr><name>clientConnRefPool</name></expr></argument>, <argument><expr><name>rid</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>releaseTscObj</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>rid</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>taosReleaseRef</name><argument_list>(<argument><expr><name>clientConnRefPool</name></expr></argument>, <argument><expr><name>rid</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>createRequest</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>connId</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>reqid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SRequestObj</name> <modifier>*</modifier></type><name>pRequest</name> <init>= <expr><operator>(</operator><name>SRequestObj</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SRequestObj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pRequest</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STscObj</name> <modifier>*</modifier></type><name>pTscObj</name> <init>= <expr><call><name>acquireTscObj</name><argument_list>(<argument><expr><name>connId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTscObj</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_TSC_DISCONNECTED</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>resType</name></name> <operator>=</operator> <name>RES_TYPE__QUERY</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name> <operator>=</operator> <ternary><condition><expr><name>reqid</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>generateRequestId</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><name>reqid</name></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>metric</name><operator>.</operator><name>start</name></name> <operator>=</operator> <call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>resInfo</name><operator>.</operator><name>convertUcs4</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>  <comment type="line">// convert ucs4 by default</comment>
  <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>allocatorRefId</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>pDb</name></name> <operator>=</operator> <call><name>getDbOfConnection</name><argument_list>(<argument><expr><name>pTscObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name></name> <operator>=</operator> <name>pTscObj</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>msgBuf</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ERROR_MSG_BUF_DEFAULT_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>msgBufLen</name></name> <operator>=</operator> <name>ERROR_MSG_BUF_DEFAULT_SIZE</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tsem_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>rspSem</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>registerRequest</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>, <argument><expr><name>pTscObj</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>doDestroyRequest</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>pRequest</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>doFreeReqResultInfo</name><parameter_list>(<parameter><decl><type><name>SReqResultInfo</name> <modifier>*</modifier></type><name>pResInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pResInfo</name><operator>-&gt;</operator><name>pRspMsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pResInfo</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pResInfo</name><operator>-&gt;</operator><name>row</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pResInfo</name><operator>-&gt;</operator><name>pCol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pResInfo</name><operator>-&gt;</operator><name>fields</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pResInfo</name><operator>-&gt;</operator><name>userFields</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pResInfo</name><operator>-&gt;</operator><name>convertJson</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pResInfo</name><operator>-&gt;</operator><name>convertBuf</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pResInfo</name><operator>-&gt;</operator><name>numOfCols</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pResInfo</name><operator>-&gt;</operator><name>convertBuf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pResInfo</name><operator>-&gt;</operator><name>convertBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>SRequestObj</name> <modifier>*</modifier></type><name>acquireRequest</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>rid</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><name>SRequestObj</name> <operator>*</operator><operator>)</operator><call><name>taosAcquireRef</name><argument_list>(<argument><expr><name>clientReqRefPool</name></expr></argument>, <argument><expr><name>rid</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>releaseRequest</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>rid</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>taosReleaseRef</name><argument_list>(<argument><expr><name>clientReqRefPool</name></expr></argument>, <argument><expr><name>rid</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>removeRequest</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>rid</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>taosRemoveRef</name><argument_list>(<argument><expr><name>clientReqRefPool</name></expr></argument>, <argument><expr><name>rid</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name></type> <name>doDestroyRequest</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>p</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SRequestObj</name> <modifier>*</modifier></type><name>pRequest</name> <init>= <expr><operator>(</operator><name>SRequestObj</name> <operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>uint64_t</name></type> <name>reqId</name> <init>= <expr><name><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tscTrace</name><argument_list>(<argument><expr><literal type="string">"begin to destroy request %"</literal> <name>PRIx64</name> <literal type="string">" p:%p"</literal></expr></argument>, <argument><expr><name>reqId</name></expr></argument>, <argument><expr><name>pRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosHashRemove</name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name><operator>-&gt;</operator><name>pRequests</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRequest</name><operator>-&gt;</operator><name>self</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>self</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>schedulerFreeJob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>queryJob</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>msgBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>pDb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>doFreeReqResultInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>resInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>tableList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>dbList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>targetTableList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>qDestroyQuery</name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>pQuery</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>nodesDestroyAllocator</name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>allocatorRefId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>destroyQueryExecRes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>resInfo</name><operator>.</operator><name>execRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pRequest</name><operator>-&gt;</operator><name>self</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>deregisterRequest</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pRequest</name><operator>-&gt;</operator><name>syncQuery</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>sqlstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tscTrace</name><argument_list>(<argument><expr><literal type="string">"end to destroy request %"</literal> <name>PRIx64</name> <literal type="string">" p:%p"</literal></expr></argument>, <argument><expr><name>reqId</name></expr></argument>, <argument><expr><name>pRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>destroyRequest</name><parameter_list>(<parameter><decl><type><name>SRequestObj</name> <modifier>*</modifier></type><name>pRequest</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pRequest</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taos_stop_query</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>removeRequest</name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>self</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taos_init_imp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// In the APIs of other program language, taos_cleanup is not available yet.</comment>
  <comment type="line">// So, to make sure taos_cleanup will be invoked to clean up the allocated resource to suppress the valgrind warning.</comment>
  <expr_stmt><expr><call><name>atexit</name><argument_list>(<argument><expr><name>taos_cleanup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>TSDB_CODE_SUCCESS</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosSeedRand</name><argument_list>(<argument><expr><call><name>taosGetTimestampSec</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>deltaToUtcInitOnce</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosCreateLog</name><argument_list>(<argument><expr><literal type="string">"taoslog"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>configDir</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">// ignore create log failed, only print</comment>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" WARING: Create taoslog failed. configDir=%s\n"</literal></expr></argument>, <argument><expr><name>configDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosInitCfg</name><argument_list>(<argument><expr><name>configDir</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>tscInitRes</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>initQueryModuleMsgHandle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosConvInit</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERTS</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"failed to init conv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>rpcInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SCatalogCfg</name></type> <name>cfg</name> <init>= <expr><block>{<expr><operator>.</operator><name>maxDBCacheNum</name> <operator>=</operator> <literal type="number">100</literal></expr>, <expr><operator>.</operator><name>maxTblCacheNum</name> <operator>=</operator> <literal type="number">100</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>catalogInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>schedulerInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"starting to initialize TAOS driver"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WINDOWS</name></cpp:ifndef>
  <expr_stmt><expr><call><name>taosSetCoreDump</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><call><name>initTaskQueue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fmFuncMgtInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>nodesInitAllocatorSet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>clientConnRefPool</name> <operator>=</operator> <call><name>taosOpenRef</name><argument_list>(<argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><name>destroyTscObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>clientReqRefPool</name> <operator>=</operator> <call><name>taosOpenRef</name><argument_list>(<argument><expr><literal type="number">40960</literal></expr></argument>, <argument><expr><name>doDestroyRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// transDestroyBuffer(&amp;conn-&gt;readBuf);</comment>
  <expr_stmt><expr><call><name>taosGetAppName</name><argument_list>(<argument><expr><name><name>appInfo</name><operator>.</operator><name>appName</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>appInfo</name><operator>.</operator><name>mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>appInfo</name><operator>.</operator><name>pid</name></name> <operator>=</operator> <call><name>taosGetPId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>appInfo</name><operator>.</operator><name>startTime</name></name> <operator>=</operator> <call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>appInfo</name><operator>.</operator><name>pInstMap</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>HASH_ENTRY_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"client is initialized successfully"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>taos_init</name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosThreadOnce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tscinit</name></expr></argument>, <argument><expr><name>taos_init_imp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>tscInitRes</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>taos_options_imp</name><parameter_list>(<parameter><decl><type><name>TSDB_OPTION</name></type> <name>option</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>option</name> <operator>==</operator> <name>TSDB_OPTION_CONFIGDIR</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name>configDir</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>PATH_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tscInfo</name><argument_list>(<argument><expr><literal type="string">"set cfg:%s to %s"</literal></expr></argument>, <argument><expr><name>configDir</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>taos_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>  <comment type="line">// initialize global config</comment>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>SConfig</name>     <modifier>*</modifier></type><name>pCfg</name> <init>= <expr><call><name>taosGetCfg</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SConfigItem</name> <modifier>*</modifier></type><name>pItem</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <switch>switch <condition>(<expr><name>option</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_OPTION_SHELL_ACTIVITY_TIMER</name></expr>:</case>
      <expr_stmt><expr><name>pItem</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"shellActivityTimer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_OPTION_LOCALE</name></expr>:</case>
      <expr_stmt><expr><name>pItem</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"locale"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_OPTION_CHARSET</name></expr>:</case>
      <expr_stmt><expr><name>pItem</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"charset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_OPTION_TIMEZONE</name></expr>:</case>
      <expr_stmt><expr><name>pItem</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"timezone"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>

  <if_stmt><if>if <condition>(<expr><name>pItem</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"Invalid option %d"</literal></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><call><name>cfgSetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>CFG_STYPE_TAOS_OPTIONS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"failed to set cfg:%s to %s since %s"</literal></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>tscInfo</name><argument_list>(<argument><expr><literal type="string">"set cfg:%s to %s"</literal></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * The request id is an unsigned integer format of 64bit.
 *+------------+-----+-----------+---------------+
 *| uid|localIp| PId | timestamp | serial number |
 *+------------+-----+-----------+---------------+
 *| 12bit      |12bit|24bit      |16bit          |
 *+------------+-----+-----------+---------------+
 * @return
 */</comment>
<function><type><name>uint64_t</name></type> <name>generateRequestId</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <name>uint64_t</name></type> <name>hashId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>requestSerialId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>hashId</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type>    <name><name>uid</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>taosGetSystemUUID</name><argument_list>(<argument><expr><name>uid</name></expr></argument>, <argument><expr><call><name>tListLen</name><argument_list>(<argument><expr><name>uid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"Failed to get the system uid to generated request id, reason:%s. use ip address instead"</literal></expr></argument>,
               <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>hashId</name> <operator>=</operator> <call><name>MurmurHash3_32</name><argument_list>(<argument><expr><name>uid</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>uid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint64_t</name></type> <name>id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type>  <name>ts</name> <init>= <expr><call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>pid</name> <init>= <expr><call><name>taosGetPId</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>val</name> <init>= <expr><call><name>atomic_add_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>requestSerialId</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>val</name> <operator>&gt;=</operator> <literal type="number">0xFFFF</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>atomic_store_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>requestSerialId</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>id</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>hashId</name> <operator>&amp;</operator> <literal type="number">0x0FFF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">52</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>pid</name> <operator>&amp;</operator> <literal type="number">0x0FFF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">40</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>ts</name> <operator>&amp;</operator> <literal type="number">0xFFFFFF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>val</name> <operator>&amp;</operator> <literal type="number">0xFFFF</literal><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>id</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cJSON.h"</cpp:file></cpp:include>
static setConfRet taos_set_config_imp(const char *config){
  setConfRet ret = {SET_CONF_RET_SUCC, {0}};
  static bool setConfFlag = false;
  if (setConfFlag) {
    ret.retCode = SET_CONF_RET_ERR_ONLY_ONCE;
    strcpy(ret.retMsg, "configuration can only set once");
    return ret;
  }
  taosInitGlobalCfg();
  cJSON *root = cJSON_Parse(config);
  if (root == NULL){
    ret.retCode = SET_CONF_RET_ERR_JSON_PARSE;
    strcpy(ret.retMsg, "parse json error");
    return ret;
  }

  int size = cJSON_GetArraySize(root);
  if(!cJSON_IsObject(root) || size == 0) {
    ret.retCode = SET_CONF_RET_ERR_JSON_INVALID;
    strcpy(ret.retMsg, "json content is invalid, must be not empty object");
    return ret;
  }

  if(size &gt;= 1000) {
    ret.retCode = SET_CONF_RET_ERR_TOO_LONG;
    strcpy(ret.retMsg, "json object size is too long");
    return ret;
  }

  for(int i = 0; i &lt; size; i++){
    cJSON *item = cJSON_GetArrayItem(root, i);
    if(!item) {
      ret.retCode = SET_CONF_RET_ERR_INNER;
      strcpy(ret.retMsg, "inner error");
      return ret;
    }
    if(!taosReadConfigOption(item-&gt;string, item-&gt;valuestring, NULL, NULL, TAOS_CFG_CSTATUS_OPTION, TSDB_CFG_CTYPE_B_CLIENT)){
      ret.retCode = SET_CONF_RET_ERR_PART;
      if (strlen(ret.retMsg) == 0){
        snprintf(ret.retMsg, RET_MSG_LENGTH, "part error|%s", item-&gt;string);
      }else{
        int tmp = RET_MSG_LENGTH - 1 - (int)strlen(ret.retMsg);
        size_t leftSize = tmp &gt;= 0 ? tmp : 0;
        strncat(ret.retMsg, "|",  leftSize);
        tmp = RET_MSG_LENGTH - 1 - (int)strlen(ret.retMsg);
        leftSize = tmp &gt;= 0 ? tmp : 0;
        strncat(ret.retMsg, item-&gt;string, leftSize);
      }
    }
  }
  cJSON_Delete(root);
  setConfFlag = true;
  return ret;
}

setConfRet taos_set_config(const char *config){
  taosThreadMutexLock(&amp;setConfMutex);
  setConfRet ret = taos_set_config_imp(config);
  taosThreadMutexUnlock(&amp;setConfMutex);
  return ret;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
