<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/client/src/clientHb.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clientInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clientLog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scheduler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"trpc.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>SClientHbMgr</name></type> <name>clientHbMgr</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>hbCreateThread</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>hbStopThread</name><parameter_list>()</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>hbMqHbReqHandle</name><parameter_list>(<parameter><decl><type><name>SClientHbKey</name> <modifier>*</modifier></type><name>connKey</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>SClientHbReq</name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>hbMqHbRspHandle</name><parameter_list>(<parameter><decl><type><name>SAppHbMgr</name> <modifier>*</modifier></type><name>pAppHbMgr</name></decl></parameter>, <parameter><decl><type><name>SClientHbRsp</name> <modifier>*</modifier></type><name>pRsp</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>hbProcessUserAuthInfoRsp</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>valueLen</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>SCatalog</name></name> <modifier>*</modifier></type><name>pCatalog</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SUserAuthBatchRsp</name></type> <name>batchRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSUserAuthBatchRsp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>valueLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>batchRsp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfBatchs</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>batchRsp</name><operator>.</operator><name>pArray</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfBatchs</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SGetUserAuthRsp</name> <modifier>*</modifier></type><name>rsp</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>batchRsp</name><operator>.</operator><name>pArray</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"hb user auth rsp, user:%s, version:%d"</literal></expr></argument>, <argument><expr><name><name>rsp</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name><name>rsp</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>catalogUpdateUserAuthInfo</name><argument_list>(<argument><expr><name>pCatalog</name></expr></argument>, <argument><expr><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>batchRsp</name><operator>.</operator><name>pArray</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>hbProcessDBInfoRsp</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>valueLen</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>SCatalog</name></name> <modifier>*</modifier></type><name>pCatalog</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SUseDbBatchRsp</name></type> <name>batchUseRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSUseDbBatchRsp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>valueLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>batchUseRsp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfBatchs</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>batchUseRsp</name><operator>.</operator><name>pArray</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfBatchs</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SUseDbRsp</name> <modifier>*</modifier></type><name>rsp</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>batchUseRsp</name><operator>.</operator><name>pArray</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"hb db rsp, db:%s, vgVersion:%d, stateTs:%"</literal> <name>PRId64</name> <literal type="string">", uid:%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name><name>rsp</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>rsp</name><operator>-&gt;</operator><name>vgVersion</name></name></expr></argument>, <argument><expr><name><name>rsp</name><operator>-&gt;</operator><name>stateTs</name></name></expr></argument>,
             <argument><expr><name><name>rsp</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>rsp</name><operator>-&gt;</operator><name>vgVersion</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogRemoveDB</name><argument_list>(<argument><expr><name>pCatalog</name></expr></argument>, <argument><expr><name><name>rsp</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>rsp</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>SDBVgInfo</name> <modifier>*</modifier></type><name>vgInfo</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDBVgInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>vgInfo</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
        <goto>goto <name>_return</name>;</goto>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name><name>vgInfo</name><operator>-&gt;</operator><name>vgVersion</name></name> <operator>=</operator> <name><name>rsp</name><operator>-&gt;</operator><name>vgVersion</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>vgInfo</name><operator>-&gt;</operator><name>stateTs</name></name> <operator>=</operator> <name><name>rsp</name><operator>-&gt;</operator><name>stateTs</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>vgInfo</name><operator>-&gt;</operator><name>hashMethod</name></name> <operator>=</operator> <name><name>rsp</name><operator>-&gt;</operator><name>hashMethod</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>vgInfo</name><operator>-&gt;</operator><name>hashPrefix</name></name> <operator>=</operator> <name><name>rsp</name><operator>-&gt;</operator><name>hashPrefix</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>vgInfo</name><operator>-&gt;</operator><name>hashSuffix</name></name> <operator>=</operator> <name><name>rsp</name><operator>-&gt;</operator><name>hashSuffix</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>vgInfo</name><operator>-&gt;</operator><name>vgHash</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><name><name>rsp</name><operator>-&gt;</operator><name>vgNum</name></name></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_INT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>HASH_ENTRY_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>vgInfo</name><operator>-&gt;</operator><name>vgHash</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>vgInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"hash init[%d] failed"</literal></expr></argument>, <argument><expr><name><name>rsp</name><operator>-&gt;</operator><name>vgNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
        <goto>goto <name>_return</name>;</goto>
      </block_content>}</block></if></if_stmt>

      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>rsp</name><operator>-&gt;</operator><name>vgNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>SVgroupInfo</name> <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>rsp</name><operator>-&gt;</operator><name>pVgroupInfos</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>vgInfo</name><operator>-&gt;</operator><name>vgHash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVgroupInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"hash push failed, errno:%d"</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>vgInfo</name><operator>-&gt;</operator><name>vgHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>vgInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
          <goto>goto <name>_return</name>;</goto>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>

      <expr_stmt><expr><call><name>catalogUpdateDBVgInfo</name><argument_list>(<argument><expr><name>pCatalog</name></expr></argument>, <argument><expr><name><name>rsp</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>rsp</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><name>vgInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
      <goto>goto <name>_return</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

<label><name>_return</name>:</label>

  <expr_stmt><expr><call><name>tFreeSUseDbBatchRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>batchUseRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>hbProcessStbInfoRsp</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>valueLen</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>SCatalog</name></name> <modifier>*</modifier></type><name>pCatalog</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SSTbHbRsp</name></type> <name>hbRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSSTbHbRsp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>valueLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hbRsp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfMeta</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>hbRsp</name><operator>.</operator><name>pMetaRsp</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfMeta</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STableMetaRsp</name> <modifier>*</modifier></type><name>rsp</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>hbRsp</name><operator>.</operator><name>pMetaRsp</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>rsp</name><operator>-&gt;</operator><name>numOfColumns</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"hb remove stb, db:%s, stb:%s"</literal></expr></argument>, <argument><expr><name><name>rsp</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>rsp</name><operator>-&gt;</operator><name>stbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>catalogRemoveStbMeta</name><argument_list>(<argument><expr><name>pCatalog</name></expr></argument>, <argument><expr><name><name>rsp</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>rsp</name><operator>-&gt;</operator><name>dbId</name></name></expr></argument>, <argument><expr><name><name>rsp</name><operator>-&gt;</operator><name>stbName</name></name></expr></argument>, <argument><expr><name><name>rsp</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"hb update stb, db:%s, stb:%s"</literal></expr></argument>, <argument><expr><name><name>rsp</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>rsp</name><operator>-&gt;</operator><name>stbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>rsp</name><operator>-&gt;</operator><name>pSchemas</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>colId</name> <operator>!=</operator> <name>PRIMARYKEY_TIMESTAMP_COL_ID</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"invalid colId[%"</literal> <name>PRIi16</name> <literal type="string">"] for the first column in table meta rsp msg"</literal></expr></argument>, <argument><expr><name><name>rsp</name><operator>-&gt;</operator><name>pSchemas</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>colId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>tFreeSSTbHbRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hbRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>TSDB_CODE_TSC_INVALID_VALUE</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>catalogUpdateTableMeta</name><argument_list>(<argument><expr><name>pCatalog</name></expr></argument>, <argument><expr><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfIndex</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>hbRsp</name><operator>.</operator><name>pIndexRsp</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfIndex</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STableIndexRsp</name> <modifier>*</modifier></type><name>rsp</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>hbRsp</name><operator>.</operator><name>pIndexRsp</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>catalogUpdateTableIndex</name><argument_list>(<argument><expr><name>pCatalog</name></expr></argument>, <argument><expr><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>hbRsp</name><operator>.</operator><name>pIndexRsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hbRsp</name><operator>.</operator><name>pIndexRsp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tFreeSSTbHbRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hbRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>hbQueryHbRspHandle</name><parameter_list>(<parameter><decl><type><name>SAppHbMgr</name> <modifier>*</modifier></type><name>pAppHbMgr</name></decl></parameter>, <parameter><decl><type><name>SClientHbRsp</name> <modifier>*</modifier></type><name>pRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SClientHbReq</name> <modifier>*</modifier></type><name>pReq</name> <init>= <expr><call><name>taosHashAcquire</name><argument_list>(<argument><expr><name><name>pAppHbMgr</name><operator>-&gt;</operator><name>activeInfo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRsp</name><operator>-&gt;</operator><name>connKey</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SClientHbKey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pReq</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscWarn</name><argument_list>(<argument><expr><literal type="string">"pReq to get activeInfo, may be dropped, refId:%"</literal> <name>PRIx64</name> <literal type="string">", type:%d"</literal></expr></argument>, <argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>connKey</name><operator>.</operator><name>tscRid</name></name></expr></argument>,
            <argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>connKey</name><operator>.</operator><name>connType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pRsp</name><operator>-&gt;</operator><name>query</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>STscObj</name> <modifier>*</modifier></type><name>pTscObj</name> <init>= <expr><operator>(</operator><name>STscObj</name> <operator>*</operator><operator>)</operator><call><name>acquireTscObj</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>connKey</name><operator>.</operator><name>tscRid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pTscObj</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"tscObj rid %"</literal> <name>PRIx64</name> <literal type="string">" not exist"</literal></expr></argument>, <argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>connKey</name><operator>.</operator><name>tscRid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pRsp</name><operator>-&gt;</operator><name>query</name><operator>-&gt;</operator><name>totalDnodes</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isEpsetEqual</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>mgmtEp</name><operator>.</operator><name>epSet</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRsp</name><operator>-&gt;</operator><name>query</name><operator>-&gt;</operator><name>epSet</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SEpSet</name> <modifier>*</modifier></type><name>pOrig</name> <init>= <expr><operator>&amp;</operator><name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>mgmtEp</name><operator>.</operator><name>epSet</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SEp</name>    <modifier>*</modifier></type><name>pOrigEp</name> <init>= <expr><operator>&amp;</operator><name><name>pOrig</name><operator>-&gt;</operator><name>eps</name><index>[<expr><name><name>pOrig</name><operator>-&gt;</operator><name>inUse</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SEp</name>    <modifier>*</modifier></type><name>pNewEp</name> <init>= <expr><operator>&amp;</operator><name><name>pRsp</name><operator>-&gt;</operator><name>query</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>eps</name><index>[<expr><name><name>pRsp</name><operator>-&gt;</operator><name>query</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>inUse</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"mnode epset updated from %d/%d=&gt;%s:%d to %d/%d=&gt;%s:%d in hb"</literal></expr></argument>, <argument><expr><name><name>pOrig</name><operator>-&gt;</operator><name>inUse</name></name></expr></argument>, <argument><expr><name><name>pOrig</name><operator>-&gt;</operator><name>numOfEps</name></name></expr></argument>,
                 <argument><expr><name><name>pOrigEp</name><operator>-&gt;</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name><name>pOrigEp</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>query</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>inUse</name></name></expr></argument>, <argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>query</name><operator>-&gt;</operator><name>epSet</name><operator>.</operator><name>numOfEps</name></name></expr></argument>, <argument><expr><name><name>pNewEp</name><operator>-&gt;</operator><name>fqdn</name></name></expr></argument>,
                 <argument><expr><name><name>pNewEp</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>updateEpSet_s</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>mgmtEp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRsp</name><operator>-&gt;</operator><name>query</name><operator>-&gt;</operator><name>epSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>totalDnodes</name></name> <operator>=</operator> <name><name>pRsp</name><operator>-&gt;</operator><name>query</name><operator>-&gt;</operator><name>totalDnodes</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>onlineDnodes</name></name> <operator>=</operator> <name><name>pRsp</name><operator>-&gt;</operator><name>query</name><operator>-&gt;</operator><name>onlineDnodes</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>connId</name></name> <operator>=</operator> <name><name>pRsp</name><operator>-&gt;</operator><name>query</name><operator>-&gt;</operator><name>connId</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tscTrace</name><argument_list>(<argument><expr><literal type="string">"conn %u hb rsp, dnodes %d/%d"</literal></expr></argument>, <argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>connId</name></name></expr></argument>, <argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>onlineDnodes</name></name></expr></argument>,
               <argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>totalDnodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pRsp</name><operator>-&gt;</operator><name>query</name><operator>-&gt;</operator><name>killRid</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"request rid %"</literal> <name>PRIx64</name> <literal type="string">" need to be killed now"</literal></expr></argument>, <argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>query</name><operator>-&gt;</operator><name>killRid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>SRequestObj</name> <modifier>*</modifier></type><name>pRequest</name> <init>= <expr><call><name>acquireRequest</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>query</name><operator>-&gt;</operator><name>killRid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pRequest</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"request 0x%"</literal> <name>PRIx64</name> <literal type="string">" not exist to kill"</literal></expr></argument>, <argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>query</name><operator>-&gt;</operator><name>killRid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>taos_stop_query</name><argument_list>(<argument><expr><operator>(</operator><name>TAOS_RES</name> <operator>*</operator><operator>)</operator><name>pRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>releaseRequest</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>query</name><operator>-&gt;</operator><name>killRid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pRsp</name><operator>-&gt;</operator><name>query</name><operator>-&gt;</operator><name>killConnection</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taos_close_internal</name><argument_list>(<argument><expr><name>pTscObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pRsp</name><operator>-&gt;</operator><name>query</name><operator>-&gt;</operator><name>pQnodeList</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>updateQnodeList</name><argument_list>(<argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name></name></expr></argument>, <argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>query</name><operator>-&gt;</operator><name>pQnodeList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>releaseTscObj</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>connKey</name><operator>.</operator><name>tscRid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>kvNum</name> <init>= <expr><ternary><condition><expr><name><name>pRsp</name><operator>-&gt;</operator><name>info</name></name></expr> ?</condition><then> <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"hb got %d rsp kv"</literal></expr></argument>, <argument><expr><name>kvNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>kvNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SKv</name> <modifier>*</modifier></type><name>kv</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>info</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><name><name>kv</name><operator>-&gt;</operator><name>key</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>HEARTBEAT_KEY_USER_AUTHINFO</name></expr>:</case> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>kv</name><operator>-&gt;</operator><name>valueLen</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name><name>kv</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"invalid hb user auth info, len:%d, value:%p"</literal></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>valueLen</name></name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name><name>struct</name> <name>SCatalog</name></name> <modifier>*</modifier></type><name>pCatalog</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>catalogGetHandle</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>clusterId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCatalog</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>tscWarn</name><argument_list>(<argument><expr><literal type="string">"catalogGetHandle failed, clusterId:%"</literal> <name>PRIx64</name> <literal type="string">", error:%s"</literal></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>clusterId</name></name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>hbProcessUserAuthInfoRsp</name><argument_list>(<argument><expr><name><name>kv</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>valueLen</name></name></expr></argument>, <argument><expr><name>pCatalog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>HEARTBEAT_KEY_DBINFO</name></expr>:</case> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>kv</name><operator>-&gt;</operator><name>valueLen</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name><name>kv</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"invalid hb db info, len:%d, value:%p"</literal></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>valueLen</name></name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name><name>struct</name> <name>SCatalog</name></name> <modifier>*</modifier></type><name>pCatalog</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>catalogGetHandle</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>clusterId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCatalog</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>tscWarn</name><argument_list>(<argument><expr><literal type="string">"catalogGetHandle failed, clusterId:%"</literal> <name>PRIx64</name> <literal type="string">", error:%s"</literal></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>clusterId</name></name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>hbProcessDBInfoRsp</name><argument_list>(<argument><expr><name><name>kv</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>valueLen</name></name></expr></argument>, <argument><expr><name>pCatalog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>HEARTBEAT_KEY_STBINFO</name></expr>:</case> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>kv</name><operator>-&gt;</operator><name>valueLen</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>NULL</name> <operator>==</operator> <name><name>kv</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"invalid hb stb info, len:%d, value:%p"</literal></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>valueLen</name></name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name><name>struct</name> <name>SCatalog</name></name> <modifier>*</modifier></type><name>pCatalog</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>catalogGetHandle</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>clusterId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCatalog</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>tscWarn</name><argument_list>(<argument><expr><literal type="string">"catalogGetHandle failed, clusterId:%"</literal> <name>PRIx64</name> <literal type="string">", error:%s"</literal></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>clusterId</name></name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>hbProcessStbInfoRsp</name><argument_list>(<argument><expr><name><name>kv</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>valueLen</name></name></expr></argument>, <argument><expr><name>pCatalog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <default>default:</default>
        <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"invalid hb key type:%d"</literal></expr></argument>, <argument><expr><name><name>kv</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosHashRelease</name><argument_list>(<argument><expr><name><name>pAppHbMgr</name><operator>-&gt;</operator><name>activeInfo</name></name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>hbAsyncCallBack</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>SDataBuf</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <name>int32_t</name></type>    <name>emptyRspNum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>             <modifier>*</modifier></type><name>key</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SClientHbBatchRsp</name></type> <name>pRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>==</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tDeserializeSClientHbBatchRsp</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>now</name> <init>= <expr><call><name>taosGetTimestampSec</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>delta</name> <init>= <expr><call><name>abs</name><argument_list>(<argument><expr><name>now</name> <operator>-</operator> <name><name>pRsp</name><operator>.</operator><name>svrTimestamp</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>delta</name> <operator>&gt;</operator> <name>timestampDeltaLimit</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_TIME_UNSYNCED</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"time diff: %ds is too big"</literal></expr></argument>, <argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>rspNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>.</operator><name>rsps</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>appInfo</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SAppInstInfo</name> <modifier>*</modifier><modifier>*</modifier></type><name>pInst</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>appInfo</name><operator>.</operator><name>pInstMap</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pInst</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>NULL</name> <operator>==</operator> <operator>*</operator><name>pInst</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>appInfo</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"cluster not exist, key:%s"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pEpSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tFreeClientHbBatchRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pInst</name><operator>)</operator><operator>-&gt;</operator><name>onlineDnodes</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><operator>*</operator><name>pInst</name><operator>)</operator><operator>-&gt;</operator><name>totalDnodes</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"hb rsp error %s, update server status %d/%d"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>pInst</name><operator>)</operator><operator>-&gt;</operator><name>onlineDnodes</name></name></expr></argument>,
             <argument><expr><name><operator>(</operator><operator>*</operator><name>pInst</name><operator>)</operator><operator>-&gt;</operator><name>totalDnodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>rspNum</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"hb got %d rsp, %d empty rsp received before"</literal></expr></argument>, <argument><expr><name>rspNum</name></expr></argument>,
             <argument><expr><call><name>atomic_val_compare_exchange_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>emptyRspNum</name></expr></argument>, <argument><expr><name>emptyRspNum</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>atomic_add_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>emptyRspNum</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rspNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SClientHbRsp</name> <modifier>*</modifier></type><name>rsp</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>.</operator><name>rsps</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call>(<modifier>*</modifier><name><name>clientHbMgr</name><operator>.</operator><name>rspHandle</name></name><index>[<expr><name><name>rsp</name><operator>-&gt;</operator><name>connKey</name><operator>.</operator><name>connType</name></name></expr>]</index>)<argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>pInst</name><operator>)</operator><operator>-&gt;</operator><name>pAppHbMgr</name></name></expr></argument>, <argument><expr><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>appInfo</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tFreeClientHbBatchRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pEpSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>hbBuildQueryDesc</name><parameter_list>(<parameter><decl><type><name>SQueryHbReqBasic</name> <modifier>*</modifier></type><name>hbBasic</name></decl></parameter>, <parameter><decl><type><name>STscObj</name> <modifier>*</modifier></type><name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type>    <name>now</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQueryDesc</name></type> <name>desc</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>pRequests</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>pIter</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name>     <modifier>*</modifier></type><name>rid</name> <init>= <expr><name>pIter</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SRequestObj</name> <modifier>*</modifier></type><name>pRequest</name> <init>= <expr><call><name>acquireRequest</name><argument_list>(<argument><expr><operator>*</operator><name>rid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pRequest</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>pRequests</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pRequest</name><operator>-&gt;</operator><name>killed</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>releaseRequest</name><argument_list>(<argument><expr><operator>*</operator><name>rid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>pRequests</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>desc</name><operator>.</operator><name>sql</name></name></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>sqlstr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>desc</name><operator>.</operator><name>sql</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>desc</name><operator>.</operator><name>stime</name></name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>metric</name><operator>.</operator><name>start</name></name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>desc</name><operator>.</operator><name>queryId</name></name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>desc</name><operator>.</operator><name>useconds</name></name> <operator>=</operator> <name>now</name> <operator>-</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>metric</name><operator>.</operator><name>start</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>desc</name><operator>.</operator><name>reqRid</name></name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>self</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>desc</name><operator>.</operator><name>stableQuery</name></name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>stableQuery</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosGetFqdn</name><argument_list>(<argument><expr><name><name>desc</name><operator>.</operator><name>fqdn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>desc</name><operator>.</operator><name>subPlanNum</name></name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>subplanNum</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>.</operator><name>subPlanNum</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>desc</name><operator>.</operator><name>subDesc</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name><name>desc</name><operator>.</operator><name>subPlanNum</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SQuerySubDesc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>desc</name><operator>.</operator><name>subDesc</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>releaseRequest</name><argument_list>(<argument><expr><operator>*</operator><name>rid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>schedulerGetTasksStatus</name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>queryJob</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>.</operator><name>subDesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>desc</name><operator>.</operator><name>subDesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>desc</name><operator>.</operator><name>subDesc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>desc</name><operator>.</operator><name>subPlanNum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>desc</name><operator>.</operator><name>subPlanNum</name></name> <operator>=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>desc</name><operator>.</operator><name>subDesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>desc</name><operator>.</operator><name>subPlanNum</name></name> <operator>==</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>desc</name><operator>.</operator><name>subDesc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>desc</name><operator>.</operator><name>subDesc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>releaseRequest</name><argument_list>(<argument><expr><operator>*</operator><name>rid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>hbBasic</name><operator>-&gt;</operator><name>queryDesc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pObj</name><operator>-&gt;</operator><name>pRequests</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>hbGetQueryBasicInfo</name><parameter_list>(<parameter><decl><type><name>SClientHbKey</name> <modifier>*</modifier></type><name>connKey</name></decl></parameter>, <parameter><decl><type><name>SClientHbReq</name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STscObj</name> <modifier>*</modifier></type><name>pTscObj</name> <init>= <expr><operator>(</operator><name>STscObj</name> <operator>*</operator><operator>)</operator><call><name>acquireTscObj</name><argument_list>(<argument><expr><name><name>connKey</name><operator>-&gt;</operator><name>tscRid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pTscObj</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscWarn</name><argument_list>(<argument><expr><literal type="string">"tscObj rid %"</literal> <name>PRIx64</name> <literal type="string">" not exist"</literal></expr></argument>, <argument><expr><name><name>connKey</name><operator>-&gt;</operator><name>tscRid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_APP_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SQueryHbReqBasic</name> <modifier>*</modifier></type><name>hbBasic</name> <init>= <expr><operator>(</operator><name>SQueryHbReqBasic</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SQueryHbReqBasic</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>hbBasic</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"calloc %d failed"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>SQueryHbReqBasic</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>releaseTscObj</name><argument_list>(<argument><expr><name><name>connKey</name><operator>-&gt;</operator><name>tscRid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>hbBasic</name><operator>-&gt;</operator><name>connId</name></name> <operator>=</operator> <name><name>pTscObj</name><operator>-&gt;</operator><name>connId</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfQueries</name> <init>= <expr><ternary><condition><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>pRequests</name></name></expr> ?</condition><then> <expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>pRequests</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>numOfQueries</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>query</name></name> <operator>=</operator> <name>hbBasic</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>releaseTscObj</name><argument_list>(<argument><expr><name><name>connKey</name><operator>-&gt;</operator><name>tscRid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"no queries on connection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>hbBasic</name><operator>-&gt;</operator><name>queryDesc</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>numOfQueries</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SQueryDesc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>hbBasic</name><operator>-&gt;</operator><name>queryDesc</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscWarn</name><argument_list>(<argument><expr><literal type="string">"taosArrayInit %d queryDesc failed"</literal></expr></argument>, <argument><expr><name>numOfQueries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>releaseTscObj</name><argument_list>(<argument><expr><name><name>connKey</name><operator>-&gt;</operator><name>tscRid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>hbBasic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>hbBuildQueryDesc</name><argument_list>(<argument><expr><name>hbBasic</name></expr></argument>, <argument><expr><name>pTscObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>releaseTscObj</name><argument_list>(<argument><expr><name><name>connKey</name><operator>-&gt;</operator><name>tscRid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>hbBasic</name><operator>-&gt;</operator><name>queryDesc</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name><name>hbBasic</name><operator>-&gt;</operator><name>queryDesc</name></name></expr></argument>, <argument><expr><name>tFreeClientHbQueryDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>hbBasic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>query</name></name> <operator>=</operator> <name>hbBasic</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>releaseTscObj</name><argument_list>(<argument><expr><name><name>connKey</name><operator>-&gt;</operator><name>tscRid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>hbGetExpiredUserInfo</name><parameter_list>(<parameter><decl><type><name>SClientHbKey</name> <modifier>*</modifier></type><name>connKey</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>SCatalog</name></name> <modifier>*</modifier></type><name>pCatalog</name></decl></parameter>, <parameter><decl><type><name>SClientHbReq</name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SUserAuthVersion</name> <modifier>*</modifier></type><name>users</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type>          <name>userNum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>           <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogGetExpiredUsers</name><argument_list>(<argument><expr><name>pCatalog</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>users</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>userNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>userNum</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>users</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>userNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SUserAuthVersion</name> <modifier>*</modifier></type><name>user</name> <init>= <expr><operator>&amp;</operator><name><name>users</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>user</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>user</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>SKv</name></type> <name>kv</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>key</name> <operator>=</operator> <name>HEARTBEAT_KEY_USER_AUTHINFO</name></expr>,
      <expr><operator>.</operator><name>valueLen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SUserAuthVersion</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>userNum</name></expr>,
      <expr><operator>.</operator><name>value</name> <operator>=</operator> <name>users</name></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"hb got %d expired users, valueLen:%d"</literal></expr></argument>, <argument><expr><name>userNum</name></expr></argument>, <argument><expr><name><name>kv</name><operator>.</operator><name>valueLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>req</name><operator>-&gt;</operator><name>info</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>info</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>hbKeyHashFunc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>HASH_ENTRY_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>info</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>kv</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>kv</name><operator>.</operator><name>key</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>kv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>hbGetExpiredDBInfo</name><parameter_list>(<parameter><decl><type><name>SClientHbKey</name> <modifier>*</modifier></type><name>connKey</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>SCatalog</name></name> <modifier>*</modifier></type><name>pCatalog</name></decl></parameter>, <parameter><decl><type><name>SClientHbReq</name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDbVgVersion</name> <modifier>*</modifier></type><name>dbs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type>      <name>dbNum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogGetExpiredDBs</name><argument_list>(<argument><expr><name>pCatalog</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>dbNum</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>dbs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dbNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SDbVgVersion</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><operator>&amp;</operator><name><name>dbs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>dbId</name></name> <operator>=</operator> <call><name>htobe64</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>dbId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>vgVersion</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>vgVersion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>numOfTable</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>numOfTable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>stateTs</name></name> <operator>=</operator> <call><name>htobe64</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>stateTs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>SKv</name></type> <name>kv</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>key</name> <operator>=</operator> <name>HEARTBEAT_KEY_DBINFO</name></expr>,
      <expr><operator>.</operator><name>valueLen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SDbVgVersion</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>dbNum</name></expr>,
      <expr><operator>.</operator><name>value</name> <operator>=</operator> <name>dbs</name></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"hb got %d expired db, valueLen:%d"</literal></expr></argument>, <argument><expr><name>dbNum</name></expr></argument>, <argument><expr><name><name>kv</name><operator>.</operator><name>valueLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>req</name><operator>-&gt;</operator><name>info</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>info</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>hbKeyHashFunc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>HASH_ENTRY_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>info</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>kv</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>kv</name><operator>.</operator><name>key</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>kv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>hbGetExpiredStbInfo</name><parameter_list>(<parameter><decl><type><name>SClientHbKey</name> <modifier>*</modifier></type><name>connKey</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>SCatalog</name></name> <modifier>*</modifier></type><name>pCatalog</name></decl></parameter>, <parameter><decl><type><name>SClientHbReq</name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSTableVersion</name> <modifier>*</modifier></type><name>stbs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type>        <name>stbNum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>         <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogGetExpiredSTables</name><argument_list>(<argument><expr><name>pCatalog</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stbs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stbNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>stbNum</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>stbs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>stbNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSTableVersion</name> <modifier>*</modifier></type><name>stb</name> <init>= <expr><operator>&amp;</operator><name><name>stbs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>stb</name><operator>-&gt;</operator><name>suid</name></name> <operator>=</operator> <call><name>htobe64</name><argument_list>(<argument><expr><name><name>stb</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>stb</name><operator>-&gt;</operator><name>sversion</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>stb</name><operator>-&gt;</operator><name>sversion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>stb</name><operator>-&gt;</operator><name>tversion</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>stb</name><operator>-&gt;</operator><name>tversion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>stb</name><operator>-&gt;</operator><name>smaVer</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>stb</name><operator>-&gt;</operator><name>smaVer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>SKv</name></type> <name>kv</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>key</name> <operator>=</operator> <name>HEARTBEAT_KEY_STBINFO</name></expr>,
      <expr><operator>.</operator><name>valueLen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSTableVersion</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>stbNum</name></expr>,
      <expr><operator>.</operator><name>value</name> <operator>=</operator> <name>stbs</name></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"hb got %d expired stb, valueLen:%d"</literal></expr></argument>, <argument><expr><name>stbNum</name></expr></argument>, <argument><expr><name><name>kv</name><operator>.</operator><name>valueLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>req</name><operator>-&gt;</operator><name>info</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>info</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>hbKeyHashFunc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>HASH_ENTRY_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>info</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>kv</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>kv</name><operator>.</operator><name>key</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>kv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>kv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>hbGetAppInfo</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>clusterId</name></decl></parameter>, <parameter><decl><type><name>SClientHbReq</name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SAppHbReq</name> <modifier>*</modifier></type><name>pApp</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>clientHbMgr</name><operator>.</operator><name>appSummary</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>clusterId</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>clusterId</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>pApp</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>app</name></name></expr></argument>, <argument><expr><name>pApp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pApp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>app</name><operator>.</operator><name>summary</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>app</name><operator>.</operator><name>summary</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>app</name><operator>.</operator><name>pid</name></name> <operator>=</operator> <call><name>taosGetPId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>app</name><operator>.</operator><name>appId</name></name> <operator>=</operator> <name><name>clientHbMgr</name><operator>.</operator><name>appId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosGetAppName</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>app</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>hbQueryHbReqHandle</name><parameter_list>(<parameter><decl><type><name>SClientHbKey</name> <modifier>*</modifier></type><name>connKey</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>SClientHbReq</name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name>         <modifier>*</modifier></type><name>clusterId</name> <init>= <expr><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>SCatalog</name></name> <modifier>*</modifier></type><name>pCatalog</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>catalogGetHandle</name><argument_list>(<argument><expr><operator>*</operator><name>clusterId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCatalog</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscWarn</name><argument_list>(<argument><expr><literal type="string">"catalogGetHandle failed, clusterId:%"</literal> <name>PRIx64</name> <literal type="string">", error:%s"</literal></expr></argument>, <argument><expr><operator>*</operator><name>clusterId</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>hbGetAppInfo</name><argument_list>(<argument><expr><operator>*</operator><name>clusterId</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>hbGetQueryBasicInfo</name><argument_list>(<argument><expr><name>connKey</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>hbGetExpiredUserInfo</name><argument_list>(<argument><expr><name>connKey</name></expr></argument>, <argument><expr><name>pCatalog</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>hbGetExpiredDBInfo</name><argument_list>(<argument><expr><name>connKey</name></expr></argument>, <argument><expr><name>pCatalog</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>hbGetExpiredStbInfo</name><argument_list>(<argument><expr><name>connKey</name></expr></argument>, <argument><expr><name>pCatalog</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>TSDB_CODE_SUCCESS</name> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>hbMgrInitHandle</name><parameter_list>()</parameter_list> <block>{<block_content>
  <comment type="line">// init all handle</comment>
  <expr_stmt><expr><name><name>clientHbMgr</name><operator>.</operator><name>reqHandle</name><index>[<expr><name>CONN_TYPE__QUERY</name></expr>]</index></name> <operator>=</operator> <name>hbQueryHbReqHandle</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>clientHbMgr</name><operator>.</operator><name>reqHandle</name><index>[<expr><name>CONN_TYPE__TMQ</name></expr>]</index></name> <operator>=</operator> <name>hbMqHbReqHandle</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>clientHbMgr</name><operator>.</operator><name>rspHandle</name><index>[<expr><name>CONN_TYPE__QUERY</name></expr>]</index></name> <operator>=</operator> <name>hbQueryHbRspHandle</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>clientHbMgr</name><operator>.</operator><name>rspHandle</name><index>[<expr><name>CONN_TYPE__TMQ</name></expr>]</index></name> <operator>=</operator> <name>hbMqHbRspHandle</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SClientHbBatchReq</name> <modifier>*</modifier></type><name>hbGatherAllInfo</name><parameter_list>(<parameter><decl><type><name>SAppHbMgr</name> <modifier>*</modifier></type><name>pAppHbMgr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SClientHbBatchReq</name> <modifier>*</modifier></type><name>pBatchReq</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SClientHbBatchReq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pBatchReq</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>connKeyCnt</name> <init>= <expr><call><name>atomic_load_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pAppHbMgr</name><operator>-&gt;</operator><name>connKeyCnt</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pBatchReq</name><operator>-&gt;</operator><name>reqs</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>connKeyCnt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SClientHbReq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>rid</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pAppHbMgr</name><operator>-&gt;</operator><name>activeInfo</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SClientHbReq</name> <modifier>*</modifier></type><name>pOneReq</name> <init>= <expr><name>pIter</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SClientHbKey</name> <modifier>*</modifier></type><name>connKey</name> <init>= <expr><ternary><condition><expr><name>pOneReq</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>pOneReq</name><operator>-&gt;</operator><name>connKey</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>connKey</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rid</name> <operator>=</operator> <name><name>connKey</name><operator>-&gt;</operator><name>tscRid</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>STscObj</name> <modifier>*</modifier></type><name>pTscObj</name> <init>= <expr><operator>(</operator><name>STscObj</name> <operator>*</operator><operator>)</operator><call><name>acquireTscObj</name><argument_list>(<argument><expr><name>rid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTscObj</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tFreeClientHbBatchReq</name><argument_list>(<argument><expr><name>pBatchReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <while>while <condition>(<expr><name>pIter</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pOneReq</name> <operator>=</operator> <call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pBatchReq</name><operator>-&gt;</operator><name>reqs</name></name></expr></argument>, <argument><expr><name>pOneReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call>(<modifier>*</modifier><name><name>clientHbMgr</name><operator>.</operator><name>reqHandle</name></name><index>[<expr><name><name>pOneReq</name><operator>-&gt;</operator><name>connKey</name><operator>.</operator><name>connType</name></name></expr>]</index>)<argument_list>(<argument><expr><operator>&amp;</operator><name><name>pOneReq</name><operator>-&gt;</operator><name>connKey</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pOneReq</name><operator>-&gt;</operator><name>clusterId</name></name></expr></argument>, <argument><expr><name>pOneReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pAppHbMgr</name><operator>-&gt;</operator><name>activeInfo</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pOneReq</name> <operator>=</operator> <name>pIter</name></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pAppHbMgr</name><operator>-&gt;</operator><name>activeInfo</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pOneReq</name> <operator>=</operator> <name>pIter</name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>releaseTscObj</name><argument_list>(<argument><expr><name>rid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>pBatchReq</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>hbThreadFuncUnexpectedStopped</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>clientHbMgr</name><operator>.</operator><name>threadStop</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>hbMergeSummary</name><parameter_list>(<parameter><decl><type><name>SAppClusterSummary</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>SAppClusterSummary</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>numOfInsertsReq</name></name> <operator>+=</operator> <name><name>src</name><operator>-&gt;</operator><name>numOfInsertsReq</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>numOfInsertRows</name></name> <operator>+=</operator> <name><name>src</name><operator>-&gt;</operator><name>numOfInsertRows</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>insertElapsedTime</name></name> <operator>+=</operator> <name><name>src</name><operator>-&gt;</operator><name>insertElapsedTime</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>insertBytes</name></name> <operator>+=</operator> <name><name>src</name><operator>-&gt;</operator><name>insertBytes</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>fetchBytes</name></name> <operator>+=</operator> <name><name>src</name><operator>-&gt;</operator><name>fetchBytes</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>queryElapsedTime</name></name> <operator>+=</operator> <name><name>src</name><operator>-&gt;</operator><name>queryElapsedTime</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>numOfSlowQueries</name></name> <operator>+=</operator> <name><name>src</name><operator>-&gt;</operator><name>numOfSlowQueries</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>totalRequests</name></name> <operator>+=</operator> <name><name>src</name><operator>-&gt;</operator><name>totalRequests</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>currentRequests</name></name> <operator>+=</operator> <name><name>src</name><operator>-&gt;</operator><name>currentRequests</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>hbGatherAppInfo</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SAppHbReq</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>       <name>sz</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>clientHbMgr</name><operator>.</operator><name>appHbMgrs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>req</name><operator>.</operator><name>pid</name></name> <operator>=</operator> <call><name>taosGetPId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>req</name><operator>.</operator><name>appId</name></name> <operator>=</operator> <name><name>clientHbMgr</name><operator>.</operator><name>appId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosGetAppName</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosHashClear</name><argument_list>(<argument><expr><name><name>clientHbMgr</name><operator>.</operator><name>appSummary</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SAppHbMgr</name> <modifier>*</modifier></type><name>pAppHbMgr</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>clientHbMgr</name><operator>.</operator><name>appHbMgrs</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pAppHbMgr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>uint64_t</name></type>   <name>clusterId</name> <init>= <expr><name><name>pAppHbMgr</name><operator>-&gt;</operator><name>pAppInstInfo</name><operator>-&gt;</operator><name>clusterId</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SAppHbReq</name> <modifier>*</modifier></type><name>pApp</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>clientHbMgr</name><operator>.</operator><name>appSummary</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>clusterId</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>clusterId</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pApp</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>.</operator><name>summary</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pAppHbMgr</name><operator>-&gt;</operator><name>pAppInstInfo</name><operator>-&gt;</operator><name>summary</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>summary</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>req</name><operator>.</operator><name>startTime</name></name> <operator>=</operator> <name><name>pAppHbMgr</name><operator>-&gt;</operator><name>startTime</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>clientHbMgr</name><operator>.</operator><name>appSummary</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>clusterId</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>clusterId</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pAppHbMgr</name><operator>-&gt;</operator><name>startTime</name></name> <operator>&lt;</operator> <name><name>pApp</name><operator>-&gt;</operator><name>startTime</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pApp</name><operator>-&gt;</operator><name>startTime</name></name> <operator>=</operator> <name><name>pAppHbMgr</name><operator>-&gt;</operator><name>startTime</name></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>hbMergeSummary</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pApp</name><operator>-&gt;</operator><name>summary</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pAppHbMgr</name><operator>-&gt;</operator><name>pAppInstInfo</name><operator>-&gt;</operator><name>summary</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>hbThreadFunc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>setThreadName</name><argument_list>(<argument><expr><literal type="string">"hb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><call><name>taosCheckCurrentInDll</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>atexit</name><argument_list>(<argument><expr><name>hbThreadFuncUnexpectedStopped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>==</operator> <name><name>clientHbMgr</name><operator>.</operator><name>threadStop</name></name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>clientHbMgr</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>sz</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>clientHbMgr</name><operator>.</operator><name>appHbMgrs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>hbGatherAppInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>mgr</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><name>sz</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SAppHbMgr</name> <modifier>*</modifier></type><name>pAppHbMgr</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>clientHbMgr</name><operator>.</operator><name>appHbMgrs</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>pAppHbMgr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>int32_t</name></type> <name>connCnt</name> <init>= <expr><call><name>atomic_load_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pAppHbMgr</name><operator>-&gt;</operator><name>connKeyCnt</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>connCnt</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>mgr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pAppHbMgr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>SClientHbBatchReq</name> <modifier>*</modifier></type><name>pReq</name> <init>= <expr><call><name>hbGatherAllInfo</name><argument_list>(<argument><expr><name>pAppHbMgr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>pReq</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>clientHbMgr</name><operator>.</operator><name>appHbMgrs</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tFreeClientHbBatchReq</name><argument_list>(<argument><expr><name>pReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>int</name></type>   <name>tlen</name> <init>= <expr><call><name>tSerializeSClientHbBatchReq</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pReq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>tlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>tFreeClientHbBatchReq</name><argument_list>(<argument><expr><name>pReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// hbClearReqInfo(pAppHbMgr);</comment>
        <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>mgr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pAppHbMgr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>tSerializeSClientHbBatchReq</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>SMsgSendInfo</name> <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgSendInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name>pInfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>tFreeClientHbBatchReq</name><argument_list>(<argument><expr><name>pReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// hbClearReqInfo(pAppHbMgr);</comment>
        <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>mgr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pAppHbMgr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>fp</name></name> <operator>=</operator> <name>hbAsyncCallBack</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>msgInfo</name><operator>.</operator><name>pData</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>msgInfo</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>tlen</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_MND_HEARTBEAT</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>param</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>pAppHbMgr</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>paramFreeFp</name></name> <operator>=</operator> <name>taosMemoryFree</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>requestId</name></name> <operator>=</operator> <call><name>generateRequestId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>requestObjRefId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>SAppInstInfo</name> <modifier>*</modifier></type><name>pAppInstInfo</name> <init>= <expr><name><name>pAppHbMgr</name><operator>-&gt;</operator><name>pAppInstInfo</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int64_t</name></type>       <name>transporterId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SEpSet</name></type>        <name>epSet</name> <init>= <expr><call><name>getEpSet_s</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pAppInstInfo</name><operator>-&gt;</operator><name>mgmtEp</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>asyncSendMsgToServer</name><argument_list>(<argument><expr><name><name>pAppInstInfo</name><operator>-&gt;</operator><name>pTransporter</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>epSet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>transporterId</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tFreeClientHbBatchReq</name><argument_list>(<argument><expr><name>pReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">// hbClearReqInfo(pAppHbMgr);</comment>

      <expr_stmt><expr><call><name>atomic_add_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pAppHbMgr</name><operator>-&gt;</operator><name>reportCnt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>mgr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pAppHbMgr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>clientHbMgr</name><operator>.</operator><name>appHbMgrs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>clientHbMgr</name><operator>.</operator><name>appHbMgrs</name></name> <operator>=</operator> <name>mgr</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>clientHbMgr</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taosMsleep</name><argument_list>(<argument><expr><name>HEARTBEAT_INTERVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>hbCreateThread</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TdThreadAttr</name></type> <name>thAttr</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosThreadAttrInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadAttrSetDetachState</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thAttr</name></expr></argument>, <argument><expr><name>PTHREAD_CREATE_JOINABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosThreadCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>clientHbMgr</name><operator>.</operator><name>thread</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>thAttr</name></expr></argument>, <argument><expr><name>hbThreadFunc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosThreadAttrDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hbStopThread</name><parameter_list>()</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>atomic_load_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>clientHbMgr</name><operator>.</operator><name>inited</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>atomic_val_compare_exchange_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>clientHbMgr</name><operator>.</operator><name>threadStop</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"hb thread already stopped"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosThreadJoin</name><argument_list>(<argument><expr><name><name>clientHbMgr</name><operator>.</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"hb thread stopped"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SAppHbMgr</name> <modifier>*</modifier></type><name>appHbMgrInit</name><parameter_list>(<parameter><decl><type><name>SAppInstInfo</name> <modifier>*</modifier></type><name>pAppInstInfo</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>hbMgrInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SAppHbMgr</name> <modifier>*</modifier></type><name>pAppHbMgr</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SAppHbMgr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pAppHbMgr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// init stat</comment>
  <expr_stmt><expr><name><name>pAppHbMgr</name><operator>-&gt;</operator><name>startTime</name></name> <operator>=</operator> <call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pAppHbMgr</name><operator>-&gt;</operator><name>connKeyCnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pAppHbMgr</name><operator>-&gt;</operator><name>reportCnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pAppHbMgr</name><operator>-&gt;</operator><name>reportBytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pAppHbMgr</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// init app info</comment>
  <expr_stmt><expr><name><name>pAppHbMgr</name><operator>-&gt;</operator><name>pAppInstInfo</name></name> <operator>=</operator> <name>pAppInstInfo</name></expr>;</expr_stmt>

  <comment type="line">// init hash info</comment>
  <expr_stmt><expr><name><name>pAppHbMgr</name><operator>-&gt;</operator><name>activeInfo</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>hbKeyHashFunc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>HASH_ENTRY_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pAppHbMgr</name><operator>-&gt;</operator><name>activeInfo</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pAppHbMgr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// taosHashSetFreeFp(pAppHbMgr-&gt;activeInfo, tFreeClientHbReq);</comment>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>clientHbMgr</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>clientHbMgr</name><operator>.</operator><name>appHbMgrs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pAppHbMgr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>clientHbMgr</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>pAppHbMgr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>hbFreeAppHbMgr</name><parameter_list>(<parameter><decl><type><name>SAppHbMgr</name> <modifier>*</modifier></type><name>pTarget</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pTarget</name><operator>-&gt;</operator><name>activeInfo</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>pIter</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SClientHbReq</name> <modifier>*</modifier></type><name>pOneReq</name> <init>= <expr><name>pIter</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tFreeClientHbReq</name><argument_list>(<argument><expr><name>pOneReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pTarget</name><operator>-&gt;</operator><name>activeInfo</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pTarget</name><operator>-&gt;</operator><name>activeInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTarget</name><operator>-&gt;</operator><name>activeInfo</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pTarget</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pTarget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>hbRemoveAppHbMrg</name><parameter_list>(<parameter><decl><type><name>SAppHbMgr</name> <modifier>*</modifier><modifier>*</modifier></type><name>pAppHbMgr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>clientHbMgr</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>mgrSize</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>clientHbMgr</name><operator>.</operator><name>appHbMgrs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>mgrSize</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SAppHbMgr</name> <modifier>*</modifier></type><name>pItem</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>clientHbMgr</name><operator>.</operator><name>appHbMgrs</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pItem</name> <operator>==</operator> <operator>*</operator><name>pAppHbMgr</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>hbFreeAppHbMgr</name><argument_list>(<argument><expr><operator>*</operator><name>pAppHbMgr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>pAppHbMgr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArraySet</name><argument_list>(<argument><expr><name><name>clientHbMgr</name><operator>.</operator><name>appHbMgrs</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>pAppHbMgr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>clientHbMgr</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>appHbMgrCleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>sz</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>clientHbMgr</name><operator>.</operator><name>appHbMgrs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SAppHbMgr</name> <modifier>*</modifier></type><name>pTarget</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>clientHbMgr</name><operator>.</operator><name>appHbMgrs</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pTarget</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>hbFreeAppHbMgr</name><argument_list>(<argument><expr><name>pTarget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>hbMgrInit</name><parameter_list>()</parameter_list> <block>{<block_content>
  <comment type="line">// init once</comment>
  <decl_stmt><decl><type><name>int8_t</name></type> <name>old</name> <init>= <expr><call><name>atomic_val_compare_exchange_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>clientHbMgr</name><operator>.</operator><name>inited</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>old</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>clientHbMgr</name><operator>.</operator><name>appId</name></name> <operator>=</operator> <call><name>tGenIdPI64</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"app %"</literal> <name>PRIx64</name> <literal type="string">" initialized"</literal></expr></argument>, <argument><expr><name><name>clientHbMgr</name><operator>.</operator><name>appId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>clientHbMgr</name><operator>.</operator><name>appSummary</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BIGINT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>clientHbMgr</name><operator>.</operator><name>appHbMgrs</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>TdThreadMutexAttr</name></type> <name>attr</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>taosThreadMutexAttrInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>taosThreadMutexAttrSetType</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>PTHREAD_MUTEX_RECURSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>taosThreadMutexInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>clientHbMgr</name><operator>.</operator><name>lock</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>taosThreadMutexAttrDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// init handle funcs</comment>
  <expr_stmt><expr><call><name>hbMgrInitHandle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// init backgroud thread</comment>
  <expr_stmt><expr><call><name>hbCreateThread</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>hbMgrCleanUp</name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>hbStopThread</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// destroy all appHbMgr</comment>
  <decl_stmt><decl><type><name>int8_t</name></type> <name>old</name> <init>= <expr><call><name>atomic_val_compare_exchange_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>clientHbMgr</name><operator>.</operator><name>inited</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>old</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>clientHbMgr</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>appHbMgrCleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>clientHbMgr</name><operator>.</operator><name>appHbMgrs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>clientHbMgr</name><operator>.</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>clientHbMgr</name><operator>.</operator><name>appHbMgrs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>hbRegisterConnImpl</name><parameter_list>(<parameter><decl><type><name>SAppHbMgr</name> <modifier>*</modifier></type><name>pAppHbMgr</name></decl></parameter>, <parameter><decl><type><name>SClientHbKey</name></type> <name>connKey</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>clusterId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// init hash in activeinfo</comment>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pAppHbMgr</name><operator>-&gt;</operator><name>activeInfo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>connKey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SClientHbKey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>data</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SClientHbReq</name></type> <name>hbReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>hbReq</name><operator>.</operator><name>connKey</name></name> <operator>=</operator> <name>connKey</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hbReq</name><operator>.</operator><name>clusterId</name></name> <operator>=</operator> <name>clusterId</name></expr>;</expr_stmt>
  <comment type="line">// hbReq.info = taosHashInit(64, hbKeyHashFunc, 1, HASH_ENTRY_LOCK);</comment>

  <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>pAppHbMgr</name><operator>-&gt;</operator><name>activeInfo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>connKey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SClientHbKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>hbReq</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SClientHbReq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>atomic_add_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pAppHbMgr</name><operator>-&gt;</operator><name>connKeyCnt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>hbRegisterConn</name><parameter_list>(<parameter><decl><type><name>SAppHbMgr</name> <modifier>*</modifier></type><name>pAppHbMgr</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>tscRefId</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>clusterId</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>connType</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SClientHbKey</name></type> <name>connKey</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>tscRid</name> <operator>=</operator> <name>tscRefId</name></expr>,
      <expr><operator>.</operator><name>connType</name> <operator>=</operator> <name>connType</name></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <switch>switch <condition>(<expr><name>connType</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>CONN_TYPE__QUERY</name></expr>:</case> <block>{<block_content>
      <return>return <expr><call><name>hbRegisterConnImpl</name><argument_list>(<argument><expr><name>pAppHbMgr</name></expr></argument>, <argument><expr><name>connKey</name></expr></argument>, <argument><expr><name>clusterId</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>CONN_TYPE__TMQ</name></expr>:</case> <block>{<block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block>
    <default>default:</default>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>hbDeregisterConn</name><parameter_list>(<parameter><decl><type><name>SAppHbMgr</name> <modifier>*</modifier></type><name>pAppHbMgr</name></decl></parameter>, <parameter><decl><type><name>SClientHbKey</name></type> <name>connKey</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SClientHbReq</name> <modifier>*</modifier></type><name>pReq</name> <init>= <expr><call><name>taosHashAcquire</name><argument_list>(<argument><expr><name><name>pAppHbMgr</name><operator>-&gt;</operator><name>activeInfo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>connKey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SClientHbKey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pReq</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tFreeClientHbReq</name><argument_list>(<argument><expr><name>pReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosHashRemove</name><argument_list>(<argument><expr><name><name>pAppHbMgr</name><operator>-&gt;</operator><name>activeInfo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>connKey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SClientHbKey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosHashRelease</name><argument_list>(<argument><expr><name><name>pAppHbMgr</name><operator>-&gt;</operator><name>activeInfo</name></name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pReq</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>atomic_sub_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pAppHbMgr</name><operator>-&gt;</operator><name>connKeyCnt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
