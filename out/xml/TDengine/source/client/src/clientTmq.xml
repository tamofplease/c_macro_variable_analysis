<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/client/src/clientTmq.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cJSON.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clientInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clientLog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdatablock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tglobal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tmsgtype.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tqueue.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tref.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ttimer.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>tsem_post</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tsem_post</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>                                         \
  <cpp:value>tscInfo("call sem post at %s %d", __FUNCTION__, __LINE__); \
  sem_post(x)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>int32_t</name></type> <name>tmqAskEp</name><parameter_list>(<parameter><decl><type><name>tmq_t</name><modifier>*</modifier></type> <name>tmq</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>async</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>int8_t</name></type>  <name>inited</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tmr_h</name></type>   <name>timer</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>rsetId</name></decl>;</decl_stmt>
}</block></struct></type> <name>SMqMgmt</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>SMqMgmt</name></type> <name>tmqMgmt</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>int8_t</name></type>  <name>tmqRspType</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>epoch</name></decl>;</decl_stmt>
}</block></struct></type> <name>SMqRspWrapper</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>int8_t</name></type>      <name>tmqRspType</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>epoch</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMqAskEpRsp</name></type> <name>msg</name></decl>;</decl_stmt>
}</block></struct></type> <name>SMqAskEpRspWrapper</name>;</typedef>

<struct>struct <name>tmq_list_t</name> <block>{
  <decl_stmt><decl><type><name>SArray</name></type> <name>container</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>tmq_conf_t</name> <block>{
  <decl_stmt><decl><type><name>char</name></type>    <name><name>clientId</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>groupId</name><index>[<expr><name>TSDB_CGROUP_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type>  <name>autoCommit</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type>  <name>resetOffset</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type>  <name>withTbName</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type>  <name>snapEnable</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>snapBatchSize</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>hbBgEnable</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>uint16_t</name></type>       <name>port</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>autoCommitInterval</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>          <name>ip</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>          <name>user</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>          <name>pass</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tmq_commit_cb</name><modifier>*</modifier></type> <name>commitCb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>          <name>commitCbUserParam</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>tmq_t</name> <block>{
  <decl_stmt><decl><type><name>int64_t</name></type> <name>refId</name></decl>;</decl_stmt>
  <comment type="line">// conf</comment>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>groupId</name><index>[<expr><name>TSDB_CGROUP_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>clientId</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type>  <name>withTbName</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type>  <name>useSnapshot</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type>  <name>autoCommit</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>autoCommitInterval</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>resetOffsetCfg</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>consumerId</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>hbBgEnable</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>tmq_commit_cb</name><modifier>*</modifier></type> <name>commitCb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>          <name>commitCbUserParam</name></decl>;</decl_stmt>

  <comment type="line">// status</comment>
  <decl_stmt><decl><type><name>int8_t</name></type>  <name>status</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>epoch</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  int8_t  epStatus;
  int32_t epSkipCnt;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>pollCnt</name></decl>;</decl_stmt>

  <comment type="line">// timer</comment>
  <decl_stmt><decl><type><name>tmr_h</name></type> <name>hbLiveTimer</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tmr_h</name></type> <name>epTimer</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tmr_h</name></type> <name>reportTimer</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tmr_h</name></type> <name>commitTimer</name></decl>;</decl_stmt>

  <comment type="line">// connection</comment>
  <decl_stmt><decl><type><name>STscObj</name><modifier>*</modifier></type> <name>pTscObj</name></decl>;</decl_stmt>

  <comment type="line">// container</comment>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>     <name>clientTopics</name></decl>;</decl_stmt>  <comment type="line">// SArray&lt;SMqClientTopic&gt;</comment>
  <decl_stmt><decl><type><name>STaosQueue</name><modifier>*</modifier></type> <name>mqueue</name></decl>;</decl_stmt>        <comment type="line">// queue of rsp</comment>
  <decl_stmt><decl><type><name>STaosQall</name><modifier>*</modifier></type>  <name>qall</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STaosQueue</name><modifier>*</modifier></type> <name>delayedTask</name></decl>;</decl_stmt>  <comment type="line">// delayed task queue for heartbeat and auto commit</comment>

  <comment type="line">// ctl</comment>
  <decl_stmt><decl><type><name>tsem_t</name></type> <name>rspSem</name></decl>;</decl_stmt>
}</block>;</struct>

<enum>enum <block>{
  <decl><name>TMQ_VG_STATUS__IDLE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
  <decl><name>TMQ_VG_STATUS__WAIT</name></decl>,
}</block>;</enum>

<enum>enum <block>{
  <decl><name>TMQ_CONSUMER_STATUS__INIT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
  <decl><name>TMQ_CONSUMER_STATUS__READY</name></decl>,
  <decl><name>TMQ_CONSUMER_STATUS__NO_TOPIC</name></decl>,
  <decl><name>TMQ_CONSUMER_STATUS__RECOVER</name></decl>,
}</block>;</enum>

<enum>enum <block>{
  <decl><name>TMQ_DELAYED_TASK__ASK_EP</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
  <decl><name>TMQ_DELAYED_TASK__REPORT</name></decl>,
  <decl><name>TMQ_DELAYED_TASK__COMMIT</name></decl>,
}</block>;</enum>

<typedef>typedef <type><struct>struct <block>{
  <comment type="line">// statistics</comment>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>pollCnt</name></decl>;</decl_stmt>
  <comment type="line">// offset</comment>
  <decl_stmt><decl><type><name>STqOffsetVal</name></type> <name>committedOffset</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STqOffsetVal</name></type> <name>currentOffset</name></decl>;</decl_stmt>
  <comment type="line">// connection info</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>vgId</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>vgStatus</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>vgSkipCnt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SEpSet</name></type>  <name>epSet</name></decl>;</decl_stmt>
}</block></struct></type> <name>SMqClientVg</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
  <comment type="line">// subscribe info</comment>
  <decl_stmt><decl><type><name>char</name></type> <name><name>topicName</name><index>[<expr><name>TSDB_TOPIC_FNAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>db</name><index>[<expr><name>TSDB_DB_FNAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>vgs</name></decl>;</decl_stmt>  <comment type="line">// SArray&lt;SMqClientVg&gt;</comment>

  <decl_stmt><decl><type><name>SSchemaWrapper</name></type> <name>schema</name></decl>;</decl_stmt>
}</block></struct></type> <name>SMqClientTopic</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>int8_t</name></type>          <name>tmqRspType</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>         <name>epoch</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMqClientVg</name><modifier>*</modifier></type>    <name>vgHandle</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMqClientTopic</name><modifier>*</modifier></type> <name>topicHandle</name></decl>;</decl_stmt>
  <union>union <block>{
    <decl_stmt><decl><type><name>SMqDataRsp</name></type> <name>dataRsp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SMqMetaRsp</name></type> <name>metaRsp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>STaosxRsp</name></type>  <name>taosxRsp</name></decl>;</decl_stmt>
  }</block>;</union>
}</block></struct></type> <name>SMqPollRspWrapper</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>int64_t</name></type> <name>refId</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>epoch</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tsem_t</name></type>  <name>rspSem</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>rspErr</name></decl>;</decl_stmt>
}</block></struct></type> <name>SMqSubscribeCbParam</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>int64_t</name></type> <name>refId</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>epoch</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>async</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tsem_t</name></type>  <name>rspSem</name></decl>;</decl_stmt>
}</block></struct></type> <name>SMqAskEpCbParam</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>int64_t</name></type>         <name>refId</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>         <name>epoch</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMqClientVg</name><modifier>*</modifier></type>    <name>pVg</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMqClientTopic</name><modifier>*</modifier></type> <name>pTopic</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>         <name>vgId</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tsem_t</name></type>          <name>rspSem</name></decl>;</decl_stmt>
}</block></struct></type> <name>SMqPollCbParam</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>int64_t</name></type>        <name>refId</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>epoch</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type>         <name>automatic</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type>         <name>async</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>waitingRspNum</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>totalRspNum</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>rspErr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tmq_commit_cb</name><modifier>*</modifier></type> <name>userCb</name></decl>;</decl_stmt>
  <comment type="block">/*SArray*        successfulOffsets;*/</comment>
  <comment type="block">/*SArray*        failedOffsets;*/</comment>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>  <name>userParam</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tsem_t</name></type> <name>rspSem</name></decl>;</decl_stmt>
}</block></struct></type> <name>SMqCommitCbParamSet</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>SMqCommitCbParamSet</name><modifier>*</modifier></type> <name>params</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STqOffset</name><modifier>*</modifier></type>           <name>pOffset</name></decl>;</decl_stmt>
  <comment type="block">/*char                 topicName[TSDB_TOPIC_FNAME_LEN];*/</comment>
  <comment type="block">/*int32_t              vgId;*/</comment>
}</block></struct></type> <name>SMqCommitCbParam</name>;</typedef>

<function><type><name>tmq_conf_t</name><modifier>*</modifier></type> <name>tmq_conf_new</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>tmq_conf_t</name><modifier>*</modifier></type> <name>conf</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmq_conf_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>withTbName</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>autoCommit</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>autoCommitInterval</name></name> <operator>=</operator> <literal type="number">5000</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>resetOffset</name></name> <operator>=</operator> <name>TMQ_CONF__RESET_OFFSET__EARLIEAST</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>hbBgEnable</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <return>return <expr><name>conf</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tmq_conf_destroy</name><parameter_list>(<parameter><decl><type><name>tmq_conf_t</name><modifier>*</modifier></type> <name>conf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>conf</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>ip</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>user</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>pass</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>pass</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>tmq_conf_res_t</name></type> <name>tmq_conf_set</name><parameter_list>(<parameter><decl><type><name>tmq_conf_t</name><modifier>*</modifier></type> <name>conf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"group.id"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>groupId</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>TSDB_CGROUP_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TMQ_CONF_OK</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"client.id"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>clientId</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TMQ_CONF_OK</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"enable.auto.commit"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>autoCommit</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <return>return <expr><name>TMQ_CONF_OK</name></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>autoCommit</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
      <return>return <expr><name>TMQ_CONF_OK</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><name>TMQ_CONF_INVALID</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"auto.commit.interval.ms"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>autoCommitInterval</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TMQ_CONF_OK</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"auto.offset.reset"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>resetOffset</name></name> <operator>=</operator> <name>TMQ_CONF__RESET_OFFSET__NONE</name></expr>;</expr_stmt>
      <return>return <expr><name>TMQ_CONF_OK</name></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"earliest"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>resetOffset</name></name> <operator>=</operator> <name>TMQ_CONF__RESET_OFFSET__EARLIEAST</name></expr>;</expr_stmt>
      <return>return <expr><name>TMQ_CONF_OK</name></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"latest"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>resetOffset</name></name> <operator>=</operator> <name>TMQ_CONF__RESET_OFFSET__LATEST</name></expr>;</expr_stmt>
      <return>return <expr><name>TMQ_CONF_OK</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><name>TMQ_CONF_INVALID</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"msg.with.table.name"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>withTbName</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <return>return <expr><name>TMQ_CONF_OK</name></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>withTbName</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
      <return>return <expr><name>TMQ_CONF_OK</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><name>TMQ_CONF_INVALID</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"experimental.snapshot.enable"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>snapEnable</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <return>return <expr><name>TMQ_CONF_OK</name></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>snapEnable</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
      <return>return <expr><name>TMQ_CONF_OK</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><name>TMQ_CONF_INVALID</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"experimental.snapshot.batch.size"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>snapBatchSize</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TMQ_CONF_OK</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"enable.heartbeat.background"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>hbBgEnable</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <return>return <expr><name>TMQ_CONF_OK</name></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>hbBgEnable</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
      <return>return <expr><name>TMQ_CONF_OK</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><name>TMQ_CONF_INVALID</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><name>TMQ_CONF_OK</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"td.connect.ip"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>ip</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TMQ_CONF_OK</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"td.connect.user"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>user</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TMQ_CONF_OK</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"td.connect.pass"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>pass</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TMQ_CONF_OK</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"td.connect.port"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TMQ_CONF_OK</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"td.connect.db"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <comment type="block">/*conf-&gt;db = strdup(value);*/</comment>
    <return>return <expr><name>TMQ_CONF_OK</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TMQ_CONF_UNKNOWN</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>tmq_list_t</name><modifier>*</modifier></type> <name>tmq_list_new</name><parameter_list>()</parameter_list> <block>{<block_content>
  <comment type="line">//</comment>
  <return>return <expr><operator>(</operator><name>tmq_list_t</name><operator>*</operator><operator>)</operator><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tmq_list_append</name><parameter_list>(<parameter><decl><type><name>tmq_list_t</name><modifier>*</modifier></type> <name>list</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>src</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>container</name> <init>= <expr><operator>&amp;</operator><name><name>list</name><operator>-&gt;</operator><name>container</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>src</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>topic</name> <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>topic</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'`'</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>strtolower</name><argument_list>(<argument><expr><name>topic</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>container</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>topic</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tmq_list_destroy</name><parameter_list>(<parameter><decl><type><name>tmq_list_t</name><modifier>*</modifier></type> <name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>container</name> <init>= <expr><operator>&amp;</operator><name><name>list</name><operator>-&gt;</operator><name>container</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroyP</name><argument_list>(<argument><expr><name>container</name></expr></argument>, <argument><expr><name>taosMemoryFree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tmq_list_get_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>tmq_list_t</name><modifier>*</modifier></type> <name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SArray</name><modifier>*</modifier></type> <name>container</name> <init>= <expr><operator>&amp;</operator><name><name>list</name><operator>-&gt;</operator><name>container</name></name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>container</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>tmq_list_to_c_array</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>tmq_list_t</name><modifier>*</modifier></type> <name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SArray</name><modifier>*</modifier></type> <name>container</name> <init>= <expr><operator>&amp;</operator><name><name>list</name><operator>-&gt;</operator><name>container</name></name></expr></init></decl>;</decl_stmt>
  <return>return <expr><name><name>container</name><operator>-&gt;</operator><name>pData</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tmqMakeTopicVgKey</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>topicName</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>vg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>sprintf</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="string">"%s:%d"</literal></expr></argument>, <argument><expr><name>topicName</name></expr></argument>, <argument><expr><name>vg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tmqCommitDone</name><parameter_list>(<parameter><decl><type><name>SMqCommitCbParamSet</name><modifier>*</modifier></type> <name>pParamSet</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>tmq_t</name><modifier>*</modifier></type> <name>tmq</name> <init>= <expr><call><name>taosAcquireRef</name><argument_list>(<argument><expr><name><name>tmqMgmt</name><operator>.</operator><name>rsetId</name></name></expr></argument>, <argument><expr><name><name>pParamSet</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tmq</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pParamSet</name><operator>-&gt;</operator><name>async</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tsem_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pParamSet</name><operator>-&gt;</operator><name>rspSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pParamSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_TMQ_CONSUMER_CLOSED</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// if no more waiting rsp</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pParamSet</name><operator>-&gt;</operator><name>async</name></name></expr>)</condition> <block>{<block_content>
    <comment type="line">// call async cb func</comment>
    <if_stmt><if>if <condition>(<expr><name><name>pParamSet</name><operator>-&gt;</operator><name>automatic</name></name> <operator>&amp;&amp;</operator> <name><name>tmq</name><operator>-&gt;</operator><name>commitCb</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>tmq</name><operator>-&gt;</operator><name>commitCb</name></name><argument_list>(<argument><expr><name>tmq</name></expr></argument>, <argument><expr><name><name>pParamSet</name><operator>-&gt;</operator><name>rspErr</name></name></expr></argument>, <argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>commitCbUserParam</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>pParamSet</name><operator>-&gt;</operator><name>automatic</name></name> <operator>&amp;&amp;</operator> <name><name>pParamSet</name><operator>-&gt;</operator><name>userCb</name></name></expr>)</condition> <block>{<block_content>
      <comment type="line">// sem post</comment>
      <expr_stmt><expr><call><name><name>pParamSet</name><operator>-&gt;</operator><name>userCb</name></name><argument_list>(<argument><expr><name>tmq</name></expr></argument>, <argument><expr><name><name>pParamSet</name><operator>-&gt;</operator><name>rspErr</name></name></expr></argument>, <argument><expr><name><name>pParamSet</name><operator>-&gt;</operator><name>userParam</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pParamSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>tsem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pParamSet</name><operator>-&gt;</operator><name>rspSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
    taosArrayDestroyP(pParamSet-&gt;successfulOffsets, taosMemoryFree);
    taosArrayDestroyP(pParamSet-&gt;failedOffsets, taosMemoryFree);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tmqCommitRspCountDown</name><parameter_list>(<parameter><decl><type><name>SMqCommitCbParamSet</name><modifier>*</modifier></type> <name>pParamSet</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>waitingRspNum</name> <init>= <expr><call><name>atomic_sub_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pParamSet</name><operator>-&gt;</operator><name>waitingRspNum</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>waitingRspNum</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>waitingRspNum</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tmqCommitDone</name><argument_list>(<argument><expr><name>pParamSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tmqCommitCb</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>SDataBuf</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMqCommitCbParam</name><modifier>*</modifier></type>    <name>pParam</name> <init>= <expr><operator>(</operator><name>SMqCommitCbParam</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMqCommitCbParamSet</name><modifier>*</modifier></type> <name>pParamSet</name> <init>= <expr><operator>(</operator><name>SMqCommitCbParamSet</name><operator>*</operator><operator>)</operator><name><name>pParam</name><operator>-&gt;</operator><name>params</name></name></expr></init></decl>;</decl_stmt>
  <comment type="line">// push into array</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  if (code == 0) {
    taosArrayPush(pParamSet-&gt;failedOffsets, &amp;pParam-&gt;pOffset);
  } else {
    taosArrayPush(pParamSet-&gt;successfulOffsets, &amp;pParam-&gt;pOffset);
  }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pParam</name><operator>-&gt;</operator><name>pOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/*tscDebug("receive offset commit cb of %s on vgId:%d, offset is %" PRId64, pParam-&gt;pOffset-&gt;subKey, pParam-&gt;-&gt;vgId,
   * pOffset-&gt;version);*/</comment>

  <expr_stmt><expr><call><name>tmqCommitRspCountDown</name><argument_list>(<argument><expr><name>pParamSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tmqSendCommitReq</name><parameter_list>(<parameter><decl><type><name>tmq_t</name><modifier>*</modifier></type> <name>tmq</name></decl></parameter>, <parameter><decl><type><name>SMqClientVg</name><modifier>*</modifier></type> <name>pVg</name></decl></parameter>, <parameter><decl><type><name>SMqClientTopic</name><modifier>*</modifier></type> <name>pTopic</name></decl></parameter>, <parameter><decl><type><name>SMqCommitCbParamSet</name><modifier>*</modifier></type> <name>pParamSet</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STqOffset</name><modifier>*</modifier></type> <name>pOffset</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STqOffset</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pOffset</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pOffset</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name><name>pVg</name><operator>-&gt;</operator><name>currentOffset</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>groupLen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>groupId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pOffset</name><operator>-&gt;</operator><name>subKey</name></name></expr></argument>, <argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>groupId</name></name></expr></argument>, <argument><expr><name>groupLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pOffset</name><operator>-&gt;</operator><name>subKey</name><index>[<expr><name>groupLen</name></expr>]</index></name> <operator>=</operator> <name>TMQ_SEPARATOR</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pOffset</name><operator>-&gt;</operator><name>subKey</name></name> <operator>+</operator> <name>groupLen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>topicName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tEncodeSize</name><argument_list>(<argument><expr><name>tEncodeSTqOffset</name></expr></argument>, <argument><expr><name>pOffset</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>buf</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SMsgHead</name><operator>*</operator><operator>)</operator><name>buf</name><operator>)</operator><operator>-&gt;</operator><name>vgId</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>pVg</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>abuf</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SEncoder</name></type> <name>encoder</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tEncoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><name>abuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tEncodeSTqOffset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><name>pOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tEncoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// build param</comment>
  <decl_stmt><decl><type><name>SMqCommitCbParam</name><modifier>*</modifier></type> <name>pParam</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMqCommitCbParam</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pParam</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pParam</name><operator>-&gt;</operator><name>params</name></name> <operator>=</operator> <name>pParamSet</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pParam</name><operator>-&gt;</operator><name>pOffset</name></name> <operator>=</operator> <name>pOffset</name></expr>;</expr_stmt>

  <comment type="line">// build send info</comment>
  <decl_stmt><decl><type><name>SMsgSendInfo</name><modifier>*</modifier></type> <name>pMsgSendInfo</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgSendInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pMsgSendInfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pMsgSendInfo</name><operator>-&gt;</operator><name>msgInfo</name></name> <operator>=</operator> <operator>(</operator><name>SDataBuf</name><operator>)</operator><block>{
      <expr><operator>.</operator><name>pData</name> <operator>=</operator> <name>buf</name></expr>,
      <expr><operator>.</operator><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>len</name></expr>,
      <expr><operator>.</operator><name>handle</name> <operator>=</operator> <name>NULL</name></expr>,
  }</block></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"consumer:%"</literal> <name>PRId64</name> <literal type="string">", commit offset of %s on vgId:%d, offset is %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>, <argument><expr><name><name>pOffset</name><operator>-&gt;</operator><name>subKey</name></name></expr></argument>,
           <argument><expr><name><name>pVg</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pOffset</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// TODO: put into cb</comment>
  <expr_stmt><expr><name><name>pVg</name><operator>-&gt;</operator><name>committedOffset</name></name> <operator>=</operator> <name><name>pVg</name><operator>-&gt;</operator><name>currentOffset</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pMsgSendInfo</name><operator>-&gt;</operator><name>requestId</name></name> <operator>=</operator> <call><name>generateRequestId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsgSendInfo</name><operator>-&gt;</operator><name>requestObjRefId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsgSendInfo</name><operator>-&gt;</operator><name>param</name></name> <operator>=</operator> <name>pParam</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsgSendInfo</name><operator>-&gt;</operator><name>paramFreeFp</name></name> <operator>=</operator> <name>taosMemoryFree</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsgSendInfo</name><operator>-&gt;</operator><name>fp</name></name> <operator>=</operator> <name>tmqCommitCb</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsgSendInfo</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_VND_TMQ_COMMIT_OFFSET</name></expr>;</expr_stmt>
  <comment type="line">// send msg</comment>

  <expr_stmt><expr><call><name>atomic_add_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pParamSet</name><operator>-&gt;</operator><name>waitingRspNum</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>atomic_add_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pParamSet</name><operator>-&gt;</operator><name>totalRspNum</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>transporterId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>asyncSendMsgToServer</name><argument_list>(<argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>pTransporter</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVg</name><operator>-&gt;</operator><name>epSet</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>transporterId</name></expr></argument>, <argument><expr><name>pMsgSendInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tmqCommitMsgImpl</name><parameter_list>(<parameter><decl><type><name>tmq_t</name><modifier>*</modifier></type> <name>tmq</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TAOS_RES</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>async</name></decl></parameter>, <parameter><decl><type><name>tmq_commit_cb</name><modifier>*</modifier></type> <name>userCb</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>userParam</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>topic</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>vgId</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>msg</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>TD_RES_TMQ</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SMqRspObj</name><modifier>*</modifier></type> <name>pRspObj</name> <init>= <expr><operator>(</operator><name>SMqRspObj</name><operator>*</operator><operator>)</operator><name>msg</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>topic</name> <operator>=</operator> <name><name>pRspObj</name><operator>-&gt;</operator><name>topic</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>vgId</name> <operator>=</operator> <name><name>pRspObj</name><operator>-&gt;</operator><name>vgId</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>TD_RES_TMQ_META</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SMqMetaRspObj</name><modifier>*</modifier></type> <name>pMetaRspObj</name> <init>= <expr><operator>(</operator><name>SMqMetaRspObj</name><operator>*</operator><operator>)</operator><name>msg</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>topic</name> <operator>=</operator> <name><name>pMetaRspObj</name><operator>-&gt;</operator><name>topic</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>vgId</name> <operator>=</operator> <name><name>pMetaRspObj</name><operator>-&gt;</operator><name>vgId</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>TD_RES_TMQ_METADATA</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SMqTaosxRspObj</name><modifier>*</modifier></type> <name>pRspObj</name> <init>= <expr><operator>(</operator><name>SMqTaosxRspObj</name><operator>*</operator><operator>)</operator><name>msg</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>topic</name> <operator>=</operator> <name><name>pRspObj</name><operator>-&gt;</operator><name>topic</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>vgId</name> <operator>=</operator> <name><name>pRspObj</name><operator>-&gt;</operator><name>vgId</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_TMQ_INVALID_MSG</name></expr>;</return>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>SMqCommitCbParamSet</name><modifier>*</modifier></type> <name>pParamSet</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMqCommitCbParamSet</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pParamSet</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pParamSet</name><operator>-&gt;</operator><name>refId</name></name> <operator>=</operator> <name><name>tmq</name><operator>-&gt;</operator><name>refId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pParamSet</name><operator>-&gt;</operator><name>epoch</name></name> <operator>=</operator> <name><name>tmq</name><operator>-&gt;</operator><name>epoch</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pParamSet</name><operator>-&gt;</operator><name>automatic</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pParamSet</name><operator>-&gt;</operator><name>async</name></name> <operator>=</operator> <name>async</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pParamSet</name><operator>-&gt;</operator><name>userCb</name></name> <operator>=</operator> <name>userCb</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pParamSet</name><operator>-&gt;</operator><name>userParam</name></name> <operator>=</operator> <name>userParam</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tsem_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pParamSet</name><operator>-&gt;</operator><name>rspSem</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>clientTopics</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SMqClientTopic</name><modifier>*</modifier></type> <name>pTopic</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>clientTopics</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>topicName</name></name></expr></argument>, <argument><expr><name>topic</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>vgs</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SMqClientVg</name><modifier>*</modifier></type> <name>pVg</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>vgs</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pVg</name><operator>-&gt;</operator><name>vgId</name></name> <operator>!=</operator> <name>vgId</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pVg</name><operator>-&gt;</operator><name>currentOffset</name><operator>.</operator><name>type</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>tOffsetEqual</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVg</name><operator>-&gt;</operator><name>currentOffset</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVg</name><operator>-&gt;</operator><name>committedOffset</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>tmqSendCommitReq</name><argument_list>(<argument><expr><name>tmq</name></expr></argument>, <argument><expr><name>pVg</name></expr></argument>, <argument><expr><name>pTopic</name></expr></argument>, <argument><expr><name>pParamSet</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>tsem_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pParamSet</name><operator>-&gt;</operator><name>rspSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pParamSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <goto>goto <name>FAIL</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <goto>goto <name>HANDLE_RSP</name>;</goto>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>

<label><name>HANDLE_RSP</name>:</label>
  <if_stmt><if>if <condition>(<expr><name><name>pParamSet</name><operator>-&gt;</operator><name>totalRspNum</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsem_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pParamSet</name><operator>-&gt;</operator><name>rspSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pParamSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>async</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsem_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pParamSet</name><operator>-&gt;</operator><name>rspSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>pParamSet</name><operator>-&gt;</operator><name>rspErr</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tsem_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pParamSet</name><operator>-&gt;</operator><name>rspSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pParamSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>FAIL</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>async</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>userCb</name><argument_list>(<argument><expr><name>tmq</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>userParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tmqCommitConsumerImpl</name><parameter_list>(<parameter><decl><type><name>tmq_t</name><modifier>*</modifier></type> <name>tmq</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>automatic</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>async</name></decl></parameter>, <parameter><decl><type><name>tmq_commit_cb</name><modifier>*</modifier></type> <name>userCb</name></decl></parameter>,
                                     <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>userParam</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SMqCommitCbParamSet</name><modifier>*</modifier></type> <name>pParamSet</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMqCommitCbParamSet</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pParamSet</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>async</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>automatic</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>tmq</name><operator>-&gt;</operator><name>commitCb</name></name><argument_list>(<argument><expr><name>tmq</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>commitCbUserParam</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>userCb</name><argument_list>(<argument><expr><name>tmq</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>userParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pParamSet</name><operator>-&gt;</operator><name>refId</name></name> <operator>=</operator> <name><name>tmq</name><operator>-&gt;</operator><name>refId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pParamSet</name><operator>-&gt;</operator><name>epoch</name></name> <operator>=</operator> <name><name>tmq</name><operator>-&gt;</operator><name>epoch</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pParamSet</name><operator>-&gt;</operator><name>automatic</name></name> <operator>=</operator> <name>automatic</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pParamSet</name><operator>-&gt;</operator><name>async</name></name> <operator>=</operator> <name>async</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pParamSet</name><operator>-&gt;</operator><name>userCb</name></name> <operator>=</operator> <name>userCb</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pParamSet</name><operator>-&gt;</operator><name>userParam</name></name> <operator>=</operator> <name>userParam</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tsem_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pParamSet</name><operator>-&gt;</operator><name>rspSem</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// init as 1 to prevent concurrency issue</comment>
  <expr_stmt><expr><name><name>pParamSet</name><operator>-&gt;</operator><name>waitingRspNum</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>clientTopics</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SMqClientTopic</name><modifier>*</modifier></type> <name>pTopic</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>clientTopics</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"consumer:%"</literal> <name>PRId64</name> <literal type="string">", begin commit for topic %s, vgNum %d"</literal></expr></argument>, <argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>, <argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>topicName</name></name></expr></argument>,
             <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>vgs</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>vgs</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SMqClientVg</name><modifier>*</modifier></type> <name>pVg</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>vgs</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"consumer:%"</literal> <name>PRId64</name> <literal type="string">", begin commit for topic %s, vgId:%d"</literal></expr></argument>, <argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>, <argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>topicName</name></name></expr></argument>,
               <argument><expr><name><name>pVg</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pVg</name><operator>-&gt;</operator><name>currentOffset</name><operator>.</operator><name>type</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>tOffsetEqual</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVg</name><operator>-&gt;</operator><name>currentOffset</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVg</name><operator>-&gt;</operator><name>committedOffset</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"consumer: %"</literal> <name>PRId64</name> <literal type="string">", vg:%d, current %"</literal> <name>PRId64</name> <literal type="string">", committed %"</literal> <name>PRId64</name> <literal type="string">""</literal></expr></argument>, <argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>, <argument><expr><name><name>pVg</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>,
                 <argument><expr><name><name>pVg</name><operator>-&gt;</operator><name>currentOffset</name><operator>.</operator><name>version</name></name></expr></argument>, <argument><expr><name><name>pVg</name><operator>-&gt;</operator><name>committedOffset</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>tmqSendCommitReq</name><argument_list>(<argument><expr><name>tmq</name></expr></argument>, <argument><expr><name>pVg</name></expr></argument>, <argument><expr><name>pTopic</name></expr></argument>, <argument><expr><name>pParamSet</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>

  <comment type="line">// no request is sent</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pParamSet</name><operator>-&gt;</operator><name>totalRspNum</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsem_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pParamSet</name><operator>-&gt;</operator><name>rspSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pParamSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// count down since waiting rsp num init as 1</comment>
  <expr_stmt><expr><call><name>tmqCommitRspCountDown</name><argument_list>(<argument><expr><name>pParamSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>async</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsem_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pParamSet</name><operator>-&gt;</operator><name>rspSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>pParamSet</name><operator>-&gt;</operator><name>rspErr</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tsem_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pParamSet</name><operator>-&gt;</operator><name>rspSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pParamSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
    taosArrayDestroyP(pParamSet-&gt;successfulOffsets, taosMemoryFree);
    taosArrayDestroyP(pParamSet-&gt;failedOffsets, taosMemoryFree);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tmqCommitInner</name><parameter_list>(<parameter><decl><type><name>tmq_t</name><modifier>*</modifier></type> <name>tmq</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TAOS_RES</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>automatic</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>async</name></decl></parameter>, <parameter><decl><type><name>tmq_commit_cb</name><modifier>*</modifier></type> <name>userCb</name></decl></parameter>,
                       <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>userParam</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>msg</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>tmqCommitMsgImpl</name><argument_list>(<argument><expr><name>tmq</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>async</name></expr></argument>, <argument><expr><name>userCb</name></expr></argument>, <argument><expr><name>userParam</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><call><name>tmqCommitConsumerImpl</name><argument_list>(<argument><expr><name>tmq</name></expr></argument>, <argument><expr><name>automatic</name></expr></argument>, <argument><expr><name>async</name></expr></argument>, <argument><expr><name>userCb</name></expr></argument>, <argument><expr><name>userParam</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tmqAssignAskEpTask</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>tmrId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>refId</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tmq_t</name><modifier>*</modifier></type>  <name>tmq</name> <init>= <expr><call><name>taosAcquireRef</name><argument_list>(<argument><expr><name><name>tmqMgmt</name><operator>.</operator><name>rsetId</name></name></expr></argument>, <argument><expr><name>refId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tmq</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int8_t</name><modifier>*</modifier></type> <name>pTaskType</name> <init>= <expr><call><name>taosAllocateQitem</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>DEF_QITEM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>*</operator><name>pTaskType</name> <operator>=</operator> <name>TMQ_DELAYED_TASK__ASK_EP</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosWriteQitem</name><argument_list>(<argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>delayedTask</name></name></expr></argument>, <argument><expr><name>pTaskType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tsem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmq</name><operator>-&gt;</operator><name>rspSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tmqAssignDelayedCommitTask</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>tmrId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>refId</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tmq_t</name><modifier>*</modifier></type>  <name>tmq</name> <init>= <expr><call><name>taosAcquireRef</name><argument_list>(<argument><expr><name><name>tmqMgmt</name><operator>.</operator><name>rsetId</name></name></expr></argument>, <argument><expr><name>refId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tmq</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int8_t</name><modifier>*</modifier></type> <name>pTaskType</name> <init>= <expr><call><name>taosAllocateQitem</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>DEF_QITEM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>*</operator><name>pTaskType</name> <operator>=</operator> <name>TMQ_DELAYED_TASK__COMMIT</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosWriteQitem</name><argument_list>(<argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>delayedTask</name></name></expr></argument>, <argument><expr><name>pTaskType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tsem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmq</name><operator>-&gt;</operator><name>rspSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tmqAssignDelayedReportTask</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>tmrId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>refId</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tmq_t</name><modifier>*</modifier></type>  <name>tmq</name> <init>= <expr><call><name>taosAcquireRef</name><argument_list>(<argument><expr><name><name>tmqMgmt</name><operator>.</operator><name>rsetId</name></name></expr></argument>, <argument><expr><name>refId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tmq</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int8_t</name><modifier>*</modifier></type> <name>pTaskType</name> <init>= <expr><call><name>taosAllocateQitem</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>DEF_QITEM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>*</operator><name>pTaskType</name> <operator>=</operator> <name>TMQ_DELAYED_TASK__REPORT</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosWriteQitem</name><argument_list>(<argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>delayedTask</name></name></expr></argument>, <argument><expr><name>pTaskType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tsem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmq</name><operator>-&gt;</operator><name>rspSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tmqHbCb</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>SDataBuf</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pMsg</name> <operator>&amp;&amp;</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tmqSendHbReq</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>tmrId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>refId</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tmq_t</name><modifier>*</modifier></type>  <name>tmq</name> <init>= <expr><call><name>taosAcquireRef</name><argument_list>(<argument><expr><name><name>tmqMgmt</name><operator>.</operator><name>rsetId</name></name></expr></argument>, <argument><expr><name>refId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tmq</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SMqHbReq</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>consumerId</name></name> <operator>=</operator> <name><name>tmq</name><operator>-&gt;</operator><name>consumerId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>epoch</name></name> <operator>=</operator> <name><name>tmq</name><operator>-&gt;</operator><name>epoch</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>tlen</name> <init>= <expr><call><name>tSerializeSMqHbReq</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tlen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"tSerializeSMqHbReq failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pReq</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tlen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"failed to malloc MqHbReq msg, size:%d"</literal></expr></argument>, <argument><expr><name>tlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tSerializeSMqHbReq</name><argument_list>(<argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"tSerializeSMqHbReq %d failed"</literal></expr></argument>, <argument><expr><name>tlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SMsgSendInfo</name><modifier>*</modifier></type> <name>sendInfo</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgSendInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>sendInfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>OVER</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>sendInfo</name><operator>-&gt;</operator><name>msgInfo</name></name> <operator>=</operator> <operator>(</operator><name>SDataBuf</name><operator>)</operator><block>{
      <expr><operator>.</operator><name>pData</name> <operator>=</operator> <name>pReq</name></expr>,
      <expr><operator>.</operator><name>len</name> <operator>=</operator> <name>tlen</name></expr>,
      <expr><operator>.</operator><name>handle</name> <operator>=</operator> <name>NULL</name></expr>,
  }</block></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>sendInfo</name><operator>-&gt;</operator><name>requestId</name></name> <operator>=</operator> <call><name>generateRequestId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sendInfo</name><operator>-&gt;</operator><name>requestObjRefId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sendInfo</name><operator>-&gt;</operator><name>param</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sendInfo</name><operator>-&gt;</operator><name>fp</name></name> <operator>=</operator> <name>tmqHbCb</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sendInfo</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_MND_TMQ_HB</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SEpSet</name></type> <name>epSet</name> <init>= <expr><call><name>getEpSet_s</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmq</name><operator>-&gt;</operator><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>mgmtEp</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>transporterId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>asyncSendMsgToServer</name><argument_list>(<argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>pTransporter</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>epSet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>transporterId</name></expr></argument>, <argument><expr><name>sendInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>OVER</name>:</label>
  <expr_stmt><expr><call><name>taosTmrReset</name><argument_list>(<argument><expr><name>tmqSendHbReq</name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><name><name>tmqMgmt</name><operator>.</operator><name>timer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmq</name><operator>-&gt;</operator><name>hbLiveTimer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tmqHandleAllDelayedTask</name><parameter_list>(<parameter><decl><type><name>tmq_t</name><modifier>*</modifier></type> <name>tmq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STaosQall</name><modifier>*</modifier></type> <name>qall</name> <init>= <expr><call><name>taosAllocateQall</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosReadAllQitems</name><argument_list>(<argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>delayedTask</name></name></expr></argument>, <argument><expr><name>qall</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int8_t</name><modifier>*</modifier></type> <name>pTaskType</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosGetQitem</name><argument_list>(<argument><expr><name>qall</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pTaskType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pTaskType</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>pTaskType</name> <operator>==</operator> <name>TMQ_DELAYED_TASK__ASK_EP</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tmqAskEp</name><argument_list>(<argument><expr><name>tmq</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>pRefId</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><operator>*</operator><name>pRefId</name> <operator>=</operator> <name><name>tmq</name><operator>-&gt;</operator><name>refId</name></name></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>taosTmrReset</name><argument_list>(<argument><expr><name>tmqAssignAskEpTask</name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><name>pRefId</name></expr></argument>, <argument><expr><name><name>tmqMgmt</name><operator>.</operator><name>timer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmq</name><operator>-&gt;</operator><name>epTimer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>pTaskType</name> <operator>==</operator> <name>TMQ_DELAYED_TASK__COMMIT</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tmqCommitInner</name><argument_list>(<argument><expr><name>tmq</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>commitCb</name></name></expr></argument>, <argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>commitCbUserParam</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>pRefId</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><operator>*</operator><name>pRefId</name> <operator>=</operator> <name><name>tmq</name><operator>-&gt;</operator><name>refId</name></name></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>taosTmrReset</name><argument_list>(<argument><expr><name>tmqAssignDelayedCommitTask</name></expr></argument>, <argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>autoCommitInterval</name></name></expr></argument>, <argument><expr><name>pRefId</name></expr></argument>, <argument><expr><name><name>tmqMgmt</name><operator>.</operator><name>timer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmq</name><operator>-&gt;</operator><name>commitTimer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>pTaskType</name> <operator>==</operator> <name>TMQ_DELAYED_TASK__REPORT</name></expr>)</condition> <block>{<block_content>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>taosFreeQitem</name><argument_list>(<argument><expr><name>pTaskType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>taosFreeQall</name><argument_list>(<argument><expr><name>qall</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tmqFreeRspWrapper</name><parameter_list>(<parameter><decl><type><name>SMqRspWrapper</name><modifier>*</modifier></type> <name>rspWrapper</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>rspWrapper</name><operator>-&gt;</operator><name>tmqRspType</name></name> <operator>==</operator> <name>TMQ_MSG_TYPE__END_RSP</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// do nothing</comment>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>rspWrapper</name><operator>-&gt;</operator><name>tmqRspType</name></name> <operator>==</operator> <name>TMQ_MSG_TYPE__EP_RSP</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SMqAskEpRspWrapper</name><modifier>*</modifier></type> <name>pEpRspWrapper</name> <init>= <expr><operator>(</operator><name>SMqAskEpRspWrapper</name><operator>*</operator><operator>)</operator><name>rspWrapper</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tDeleteSMqAskEpRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pEpRspWrapper</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>rspWrapper</name><operator>-&gt;</operator><name>tmqRspType</name></name> <operator>==</operator> <name>TMQ_MSG_TYPE__POLL_RSP</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SMqPollRspWrapper</name><modifier>*</modifier></type> <name>pRsp</name> <init>= <expr><operator>(</operator><name>SMqPollRspWrapper</name><operator>*</operator><operator>)</operator><name>rspWrapper</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosArrayDestroyP</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>dataRsp</name><operator>.</operator><name>blockData</name></name></expr></argument>, <argument><expr><name>taosMemoryFree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>dataRsp</name><operator>.</operator><name>blockDataLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayDestroyP</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>dataRsp</name><operator>.</operator><name>blockTbName</name></name></expr></argument>, <argument><expr><name>taosMemoryFree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayDestroyP</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>dataRsp</name><operator>.</operator><name>blockSchema</name></name></expr></argument>, <argument><expr><operator>(</operator><name>FDelete</name><operator>)</operator><name>tDeleteSSchemaWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>rspWrapper</name><operator>-&gt;</operator><name>tmqRspType</name></name> <operator>==</operator> <name>TMQ_MSG_TYPE__POLL_META_RSP</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SMqPollRspWrapper</name><modifier>*</modifier></type> <name>pRsp</name> <init>= <expr><operator>(</operator><name>SMqPollRspWrapper</name><operator>*</operator><operator>)</operator><name>rspWrapper</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>metaRsp</name><operator>.</operator><name>metaRsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>rspWrapper</name><operator>-&gt;</operator><name>tmqRspType</name></name> <operator>==</operator> <name>TMQ_MSG_TYPE__TAOSX_RSP</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SMqPollRspWrapper</name><modifier>*</modifier></type> <name>pRsp</name> <init>= <expr><operator>(</operator><name>SMqPollRspWrapper</name><operator>*</operator><operator>)</operator><name>rspWrapper</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosArrayDestroyP</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>taosxRsp</name><operator>.</operator><name>blockData</name></name></expr></argument>, <argument><expr><name>taosMemoryFree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>taosxRsp</name><operator>.</operator><name>blockDataLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayDestroyP</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>taosxRsp</name><operator>.</operator><name>blockTbName</name></name></expr></argument>, <argument><expr><name>taosMemoryFree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayDestroyP</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>taosxRsp</name><operator>.</operator><name>blockSchema</name></name></expr></argument>, <argument><expr><operator>(</operator><name>FDelete</name><operator>)</operator><name>tDeleteSSchemaWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// taosx</comment>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>taosxRsp</name><operator>.</operator><name>createTableLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayDestroyP</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>taosxRsp</name><operator>.</operator><name>createTableReq</name></name></expr></argument>, <argument><expr><name>taosMemoryFree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tmqClearUnhandleMsg</name><parameter_list>(<parameter><decl><type><name>tmq_t</name><modifier>*</modifier></type> <name>tmq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMqRspWrapper</name><modifier>*</modifier></type> <name>rspWrapper</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosGetQitem</name><argument_list>(<argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>qall</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>rspWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rspWrapper</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tmqFreeRspWrapper</name><argument_list>(<argument><expr><name>rspWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosFreeQitem</name><argument_list>(<argument><expr><name>rspWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><name>rspWrapper</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosReadAllQitems</name><argument_list>(<argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>mqueue</name></name></expr></argument>, <argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>qall</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosGetQitem</name><argument_list>(<argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>qall</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>rspWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rspWrapper</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tmqFreeRspWrapper</name><argument_list>(<argument><expr><name>rspWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosFreeQitem</name><argument_list>(<argument><expr><name>rspWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tmqSubscribeCb</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>SDataBuf</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMqSubscribeCbParam</name><modifier>*</modifier></type> <name>pParam</name> <init>= <expr><operator>(</operator><name>SMqSubscribeCbParam</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pParam</name><operator>-&gt;</operator><name>rspErr</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tsem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pParam</name><operator>-&gt;</operator><name>rspSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tmq_subscription</name><parameter_list>(<parameter><decl><type><name>tmq_t</name><modifier>*</modifier></type> <name>tmq</name></decl></parameter>, <parameter><decl><type><name>tmq_list_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>topics</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>topics</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>topics</name> <operator>=</operator> <call><name>tmq_list_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>clientTopics</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SMqClientTopic</name><modifier>*</modifier></type> <name>topic</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>clientTopics</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tmq_list_append</name><argument_list>(<argument><expr><operator>*</operator><name>topics</name></expr></argument>, <argument><expr><call><name>strchr</name><argument_list>(<argument><expr><name><name>topic</name><operator>-&gt;</operator><name>topicName</name></name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tmq_unsubscribe</name><parameter_list>(<parameter><decl><type><name>tmq_t</name><modifier>*</modifier></type> <name>tmq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>rsp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>retryCnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tmq_list_t</name><modifier>*</modifier></type> <name>lst</name> <init>= <expr><call><name>tmq_list_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rsp</name> <operator>=</operator> <call><name>tmq_subscribe</name><argument_list>(<argument><expr><name>tmq</name></expr></argument>, <argument><expr><name>lst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rsp</name> <operator>!=</operator> <name>TSDB_CODE_MND_CONSUMER_NOT_READY</name> <operator>||</operator> <name>retryCnt</name> <operator>&gt;</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>retryCnt</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMsleep</name><argument_list>(<argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>tmq_list_destroy</name><argument_list>(<argument><expr><name>lst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rsp</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tmqFreeImpl</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>tmq_t</name><modifier>*</modifier></type> <name>tmq</name> <init>= <expr><operator>(</operator><name>tmq_t</name><operator>*</operator><operator>)</operator><name>handle</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// TODO stop timer</comment>
  <expr_stmt><expr><call><name>tmqClearUnhandleMsg</name><argument_list>(<argument><expr><name>tmq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>tmq</name><operator>-&gt;</operator><name>mqueue</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosCloseQueue</name><argument_list>(<argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>mqueue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>tmq</name><operator>-&gt;</operator><name>delayedTask</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosCloseQueue</name><argument_list>(<argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>delayedTask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>tmq</name><operator>-&gt;</operator><name>qall</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosFreeQall</name><argument_list>(<argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>qall</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>tsem_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmq</name><operator>-&gt;</operator><name>rspSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>sz</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>clientTopics</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SMqClientTopic</name><modifier>*</modifier></type> <name>pTopic</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>clientTopics</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>schema</name><operator>.</operator><name>pSchema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>vgs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>clientTopics</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taos_close_internal</name><argument_list>(<argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>pTscObj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>tmq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>tmq_t</name><modifier>*</modifier></type> <name>tmq_consumer_new</name><parameter_list>(<parameter><decl><type><name>tmq_conf_t</name><modifier>*</modifier></type> <name>conf</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>errstr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>errstrLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// init timer</comment>
  <decl_stmt><decl><type><name>int8_t</name></type> <name>inited</name> <init>= <expr><call><name>atomic_val_compare_exchange_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmqMgmt</name><operator>.</operator><name>inited</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>inited</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>tmqMgmt</name><operator>.</operator><name>timer</name></name> <operator>=</operator> <call><name>taosTmrInit</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">360000</literal></expr></argument>, <argument><expr><literal type="string">"TMQ"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>tmqMgmt</name><operator>.</operator><name>timer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmqMgmt</name><operator>.</operator><name>inited</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>tmqMgmt</name><operator>.</operator><name>rsetId</name></name> <operator>=</operator> <call><name>taosOpenRef</name><argument_list>(<argument><expr><literal type="number">10000</literal></expr></argument>, <argument><expr><name>tmqFreeImpl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>tmq_t</name><modifier>*</modifier></type> <name>pTmq</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmq_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTmq</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"setting up new consumer failed since %s, consumer group %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>groupId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>user</name> <init>= <expr><ternary><condition><expr><name><name>conf</name><operator>-&gt;</operator><name>user</name></name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>TSDB_DEFAULT_USER</name></expr> </then><else>: <expr><name><name>conf</name><operator>-&gt;</operator><name>user</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>pass</name> <init>= <expr><ternary><condition><expr><name><name>conf</name><operator>-&gt;</operator><name>pass</name></name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>TSDB_DEFAULT_PASS</name></expr> </then><else>: <expr><name><name>conf</name><operator>-&gt;</operator><name>pass</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>groupId</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pTmq</name><operator>-&gt;</operator><name>clientTopics</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMqClientTopic</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTmq</name><operator>-&gt;</operator><name>mqueue</name></name> <operator>=</operator> <call><name>taosOpenQueue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTmq</name><operator>-&gt;</operator><name>qall</name></name> <operator>=</operator> <call><name>taosAllocateQall</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTmq</name><operator>-&gt;</operator><name>delayedTask</name></name> <operator>=</operator> <call><name>taosOpenQueue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pTmq</name><operator>-&gt;</operator><name>clientTopics</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pTmq</name><operator>-&gt;</operator><name>mqueue</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pTmq</name><operator>-&gt;</operator><name>qall</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pTmq</name><operator>-&gt;</operator><name>delayedTask</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"consumer %"</literal> <name>PRId64</name> <literal type="string">" setup failed since %s, consumer group %s"</literal></expr></argument>, <argument><expr><name><name>pTmq</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>,
             <argument><expr><name><name>pTmq</name><operator>-&gt;</operator><name>groupId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>FAIL</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// init status</comment>
  <expr_stmt><expr><name><name>pTmq</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>TMQ_CONSUMER_STATUS__INIT</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTmq</name><operator>-&gt;</operator><name>pollCnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTmq</name><operator>-&gt;</operator><name>epoch</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <comment type="block">/*pTmq-&gt;epStatus = 0;*/</comment>
  <comment type="block">/*pTmq-&gt;epSkipCnt = 0;*/</comment>

  <comment type="line">// set conf</comment>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pTmq</name><operator>-&gt;</operator><name>clientId</name></name></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>clientId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pTmq</name><operator>-&gt;</operator><name>groupId</name></name></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>groupId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTmq</name><operator>-&gt;</operator><name>withTbName</name></name> <operator>=</operator> <name><name>conf</name><operator>-&gt;</operator><name>withTbName</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTmq</name><operator>-&gt;</operator><name>useSnapshot</name></name> <operator>=</operator> <name><name>conf</name><operator>-&gt;</operator><name>snapEnable</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTmq</name><operator>-&gt;</operator><name>autoCommit</name></name> <operator>=</operator> <name><name>conf</name><operator>-&gt;</operator><name>autoCommit</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTmq</name><operator>-&gt;</operator><name>autoCommitInterval</name></name> <operator>=</operator> <name><name>conf</name><operator>-&gt;</operator><name>autoCommitInterval</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTmq</name><operator>-&gt;</operator><name>commitCb</name></name> <operator>=</operator> <name><name>conf</name><operator>-&gt;</operator><name>commitCb</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTmq</name><operator>-&gt;</operator><name>commitCbUserParam</name></name> <operator>=</operator> <name><name>conf</name><operator>-&gt;</operator><name>commitCbUserParam</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTmq</name><operator>-&gt;</operator><name>resetOffsetCfg</name></name> <operator>=</operator> <name><name>conf</name><operator>-&gt;</operator><name>resetOffset</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pTmq</name><operator>-&gt;</operator><name>hbBgEnable</name></name> <operator>=</operator> <name><name>conf</name><operator>-&gt;</operator><name>hbBgEnable</name></name></expr>;</expr_stmt>

  <comment type="line">// assign consumerId</comment>
  <expr_stmt><expr><name><name>pTmq</name><operator>-&gt;</operator><name>consumerId</name></name> <operator>=</operator> <call><name>tGenIdPI64</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// init semaphore</comment>
  <if_stmt><if>if <condition>(<expr><call><name>tsem_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTmq</name><operator>-&gt;</operator><name>rspSem</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"consumer %"</literal> <name>PRId64</name> <literal type="string">" setup failed since %s, consumer group %s"</literal></expr></argument>, <argument><expr><name><name>pTmq</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>,
             <argument><expr><name><name>pTmq</name><operator>-&gt;</operator><name>groupId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>FAIL</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// init connection</comment>
  <expr_stmt><expr><name><name>pTmq</name><operator>-&gt;</operator><name>pTscObj</name></name> <operator>=</operator> <call><name>taos_connect_internal</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>ip</name></name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>pass</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>CONN_TYPE__TMQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pTmq</name><operator>-&gt;</operator><name>pTscObj</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"consumer %"</literal> <name>PRId64</name> <literal type="string">" setup failed since %s, consumer group %s"</literal></expr></argument>, <argument><expr><name><name>pTmq</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>,
             <argument><expr><name><name>pTmq</name><operator>-&gt;</operator><name>groupId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tsem_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTmq</name><operator>-&gt;</operator><name>rspSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>FAIL</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pTmq</name><operator>-&gt;</operator><name>refId</name></name> <operator>=</operator> <call><name>taosAddRef</name><argument_list>(<argument><expr><name><name>tmqMgmt</name><operator>.</operator><name>rsetId</name></name></expr></argument>, <argument><expr><name>pTmq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pTmq</name><operator>-&gt;</operator><name>refId</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tmqFreeImpl</name><argument_list>(<argument><expr><name>pTmq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pTmq</name><operator>-&gt;</operator><name>hbBgEnable</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>pRefId</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>*</operator><name>pRefId</name> <operator>=</operator> <name><name>pTmq</name><operator>-&gt;</operator><name>refId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTmq</name><operator>-&gt;</operator><name>hbLiveTimer</name></name> <operator>=</operator> <call><name>taosTmrStart</name><argument_list>(<argument><expr><name>tmqSendHbReq</name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><name>pRefId</name></expr></argument>, <argument><expr><name><name>tmqMgmt</name><operator>.</operator><name>timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tscInfo</name><argument_list>(<argument><expr><literal type="string">"consumer %"</literal> <name>PRId64</name> <literal type="string">" is setup, consumer group %s"</literal></expr></argument>, <argument><expr><name><name>pTmq</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>, <argument><expr><name><name>pTmq</name><operator>-&gt;</operator><name>groupId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>pTmq</name></expr>;</return>

<label><name>FAIL</name>:</label>
  <if_stmt><if>if <condition>(<expr><name><name>pTmq</name><operator>-&gt;</operator><name>clientTopics</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pTmq</name><operator>-&gt;</operator><name>clientTopics</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pTmq</name><operator>-&gt;</operator><name>mqueue</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosCloseQueue</name><argument_list>(<argument><expr><name><name>pTmq</name><operator>-&gt;</operator><name>mqueue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pTmq</name><operator>-&gt;</operator><name>delayedTask</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosCloseQueue</name><argument_list>(<argument><expr><name><name>pTmq</name><operator>-&gt;</operator><name>delayedTask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pTmq</name><operator>-&gt;</operator><name>qall</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosFreeQall</name><argument_list>(<argument><expr><name><name>pTmq</name><operator>-&gt;</operator><name>qall</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pTmq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tmq_subscribe</name><parameter_list>(<parameter><decl><type><name>tmq_t</name><modifier>*</modifier></type> <name>tmq</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>tmq_list_t</name><modifier>*</modifier></type> <name>topic_list</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SArray</name><modifier>*</modifier></type>   <name>container</name> <init>= <expr><operator>&amp;</operator><name><name>topic_list</name><operator>-&gt;</operator><name>container</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>         <name>sz</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>container</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>           <name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMsgSendInfo</name><modifier>*</modifier></type>   <name>sendInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCMSubscribeReq</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>         <name>code</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"call tmq subscribe, consumer: %"</literal> <name>PRId64</name> <literal type="string">", topic num %d"</literal></expr></argument>, <argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>consumerId</name></name> <operator>=</operator> <name><name>tmq</name><operator>-&gt;</operator><name>consumerId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>clientId</name></name></expr></argument>, <argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>clientId</name></name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>cgroup</name></name></expr></argument>, <argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>groupId</name></name></expr></argument>, <argument><expr><name>TSDB_CGROUP_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>topicNames</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>sz</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>req</name><operator>.</operator><name>topicNames</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>FAIL</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"call tmq subscribe, consumer: %"</literal> <name>PRId64</name> <literal type="string">", topic num %d"</literal></expr></argument>, <argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>topic</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>container</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SName</name></type> <name>name</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tNameSetDbName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>pTscObj</name><operator>-&gt;</operator><name>acctId</name></name></expr></argument>, <argument><expr><name>topic</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>topic</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>topicFName</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TSDB_TOPIC_FNAME_LEN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>topicFName</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <goto>goto <name>FAIL</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>tNameExtractFullName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name>topicFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"subscribe topic: %s"</literal></expr></argument>, <argument><expr><name>topicFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>topicNames</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>topicFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>tlen</name> <init>= <expr><call><name>tSerializeSCMSubscribeReq</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>tlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>FAIL</name>;</goto></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>abuf</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tSerializeSCMSubscribeReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>abuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>sendInfo</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgSendInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>sendInfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>FAIL</name>;</goto></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>SMqSubscribeCbParam</name></type> <name>param</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>rspErr</name> <operator>=</operator> <literal type="number">0</literal></expr>,
      <expr><operator>.</operator><name>refId</name> <operator>=</operator> <name><name>tmq</name><operator>-&gt;</operator><name>refId</name></name></expr>,
      <expr><operator>.</operator><name>epoch</name> <operator>=</operator> <name><name>tmq</name><operator>-&gt;</operator><name>epoch</name></name></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tsem_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>param</name><operator>.</operator><name>rspSem</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>FAIL</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>sendInfo</name><operator>-&gt;</operator><name>msgInfo</name></name> <operator>=</operator> <operator>(</operator><name>SDataBuf</name><operator>)</operator><block>{
      <expr><operator>.</operator><name>pData</name> <operator>=</operator> <name>buf</name></expr>,
      <expr><operator>.</operator><name>len</name> <operator>=</operator> <name>tlen</name></expr>,
      <expr><operator>.</operator><name>handle</name> <operator>=</operator> <name>NULL</name></expr>,
  }</block></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>sendInfo</name><operator>-&gt;</operator><name>requestId</name></name> <operator>=</operator> <call><name>generateRequestId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sendInfo</name><operator>-&gt;</operator><name>requestObjRefId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sendInfo</name><operator>-&gt;</operator><name>param</name></name> <operator>=</operator> <operator>&amp;</operator><name>param</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sendInfo</name><operator>-&gt;</operator><name>fp</name></name> <operator>=</operator> <name>tmqSubscribeCb</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sendInfo</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_MND_TMQ_SUBSCRIBE</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SEpSet</name></type> <name>epSet</name> <init>= <expr><call><name>getEpSet_s</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmq</name><operator>-&gt;</operator><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>mgmtEp</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>transporterId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>asyncSendMsgToServer</name><argument_list>(<argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>pTransporter</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>epSet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>transporterId</name></expr></argument>, <argument><expr><name>sendInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// avoid double free if msg is sent</comment>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>sendInfo</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tsem_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>param</name><operator>.</operator><name>rspSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tsem_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>param</name><operator>.</operator><name>rspSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>param</name><operator>.</operator><name>rspErr</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>FAIL</name>;</goto></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>retryCnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>TSDB_CODE_MND_CONSUMER_NOT_READY</name> <operator>==</operator> <call><name>tmqAskEp</name><argument_list>(<argument><expr><name>tmq</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>retryCnt</name><operator>++</operator> <operator>&gt;</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
      <goto>goto <name>FAIL</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"consumer not ready, retry"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMsleep</name><argument_list>(<argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <comment type="line">// init ep timer</comment>
  <if_stmt><if>if <condition>(<expr><name><name>tmq</name><operator>-&gt;</operator><name>epTimer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>pRefId1</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>*</operator><name>pRefId1</name> <operator>=</operator> <name><name>tmq</name><operator>-&gt;</operator><name>refId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tmq</name><operator>-&gt;</operator><name>epTimer</name></name> <operator>=</operator> <call><name>taosTmrStart</name><argument_list>(<argument><expr><name>tmqAssignAskEpTask</name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><name>pRefId1</name></expr></argument>, <argument><expr><name><name>tmqMgmt</name><operator>.</operator><name>timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// init auto commit timer</comment>
  <if_stmt><if>if <condition>(<expr><name><name>tmq</name><operator>-&gt;</operator><name>autoCommit</name></name> <operator>&amp;&amp;</operator> <name><name>tmq</name><operator>-&gt;</operator><name>commitTimer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>pRefId2</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>*</operator><name>pRefId2</name> <operator>=</operator> <name><name>tmq</name><operator>-&gt;</operator><name>refId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tmq</name><operator>-&gt;</operator><name>commitTimer</name></name> <operator>=</operator> <call><name>taosTmrStart</name><argument_list>(<argument><expr><name>tmqAssignDelayedCommitTask</name></expr></argument>, <argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>autoCommitInterval</name></name></expr></argument>, <argument><expr><name>pRefId2</name></expr></argument>, <argument><expr><name><name>tmqMgmt</name><operator>.</operator><name>timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<label><name>FAIL</name>:</label>
  <expr_stmt><expr><call><name>taosArrayDestroyP</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>topicNames</name></name></expr></argument>, <argument><expr><name>taosMemoryFree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>sendInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tmq_conf_set_auto_commit_cb</name><parameter_list>(<parameter><decl><type><name>tmq_conf_t</name><modifier>*</modifier></type> <name>conf</name></decl></parameter>, <parameter><decl><type><name>tmq_commit_cb</name><modifier>*</modifier></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">//</comment>
  <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>commitCb</name></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>commitCbUserParam</name></name> <operator>=</operator> <name>param</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tmqPollCb</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>SDataBuf</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMqPollCbParam</name><modifier>*</modifier></type> <name>pParam</name> <init>= <expr><operator>(</operator><name>SMqPollCbParam</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMqClientVg</name><modifier>*</modifier></type>    <name>pVg</name> <init>= <expr><name><name>pParam</name><operator>-&gt;</operator><name>pVg</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMqClientTopic</name><modifier>*</modifier></type> <name>pTopic</name> <init>= <expr><name><name>pParam</name><operator>-&gt;</operator><name>pTopic</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>tmq_t</name><modifier>*</modifier></type> <name>tmq</name> <init>= <expr><call><name>taosAcquireRef</name><argument_list>(<argument><expr><name><name>tmqMgmt</name><operator>.</operator><name>rsetId</name></name></expr></argument>, <argument><expr><name><name>pParam</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tmq</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsem_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pParam</name><operator>-&gt;</operator><name>rspSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pEpSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_TMQ_CONSUMER_CLOSED</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>epoch</name> <init>= <expr><name><name>pParam</name><operator>-&gt;</operator><name>epoch</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>vgId</name> <init>= <expr><name><name>pParam</name><operator>-&gt;</operator><name>vgId</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscWarn</name><argument_list>(<argument><expr><literal type="string">"msg discard from vgId:%d, epoch %d, since %s"</literal></expr></argument>, <argument><expr><name>vgId</name></expr></argument>, <argument><expr><name>epoch</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>TSDB_CODE_TMQ_CONSUMER_MISMATCH</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmq</name><operator>-&gt;</operator><name>status</name></name></expr></argument>, <argument><expr><name>TMQ_CONSUMER_STATUS__RECOVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>CREATE_MSG_FAIL</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>TSDB_CODE_TQ_NO_COMMITTED_OFFSET</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SMqPollRspWrapper</name><modifier>*</modifier></type> <name>pRspWrapper</name> <init>= <expr><call><name>taosAllocateQitem</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMqPollRspWrapper</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>DEF_QITEM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>pRspWrapper</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tscWarn</name><argument_list>(<argument><expr><literal type="string">"msg discard from vgId:%d, epoch %d since out of memory"</literal></expr></argument>, <argument><expr><name>vgId</name></expr></argument>, <argument><expr><name>epoch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>CREATE_MSG_FAIL</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>pRspWrapper</name><operator>-&gt;</operator><name>tmqRspType</name></name> <operator>=</operator> <name>TMQ_MSG_TYPE__END_RSP</name></expr>;</expr_stmt>
      <comment type="block">/*pRspWrapper-&gt;vgHandle = pVg;*/</comment>
      <comment type="block">/*pRspWrapper-&gt;topicHandle = pTopic;*/</comment>
      <expr_stmt><expr><call><name>taosWriteQitem</name><argument_list>(<argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>mqueue</name></name></expr></argument>, <argument><expr><name>pRspWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tsem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmq</name><operator>-&gt;</operator><name>rspSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <goto>goto <name>CREATE_MSG_FAIL</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>msgEpoch</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SMqRspHead</name><operator>*</operator><operator>)</operator><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator><operator>-&gt;</operator><name>epoch</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>tmqEpoch</name> <init>= <expr><call><name>atomic_load_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmq</name><operator>-&gt;</operator><name>epoch</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>msgEpoch</name> <operator>&lt;</operator> <name>tmqEpoch</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// do not write into queue since updating epoch reset</comment>
    <expr_stmt><expr><call><name>tscWarn</name><argument_list>(<argument><expr><literal type="string">"msg discard from vgId:%d since from earlier epoch, rsp epoch %d, current epoch %d"</literal></expr></argument>, <argument><expr><name>vgId</name></expr></argument>, <argument><expr><name>msgEpoch</name></expr></argument>,
            <argument><expr><name>tmqEpoch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tsem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmq</name><operator>-&gt;</operator><name>rspSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pEpSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>msgEpoch</name> <operator>!=</operator> <name>tmqEpoch</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscWarn</name><argument_list>(<argument><expr><literal type="string">"mismatch rsp from vgId:%d, epoch %d, current epoch %d"</literal></expr></argument>, <argument><expr><name>vgId</name></expr></argument>, <argument><expr><name>msgEpoch</name></expr></argument>, <argument><expr><name>tmqEpoch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// handle meta rsp</comment>
  <decl_stmt><decl><type><name>int8_t</name></type> <name>rspType</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SMqRspHead</name><operator>*</operator><operator>)</operator><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator><operator>-&gt;</operator><name>mqMsgType</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SMqPollRspWrapper</name><modifier>*</modifier></type> <name>pRspWrapper</name> <init>= <expr><call><name>taosAllocateQitem</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMqPollRspWrapper</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>DEF_QITEM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRspWrapper</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pEpSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tscWarn</name><argument_list>(<argument><expr><literal type="string">"msg discard from vgId:%d, epoch %d since out of memory"</literal></expr></argument>, <argument><expr><name>vgId</name></expr></argument>, <argument><expr><name>epoch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>CREATE_MSG_FAIL</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pRspWrapper</name><operator>-&gt;</operator><name>tmqRspType</name></name> <operator>=</operator> <name>rspType</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRspWrapper</name><operator>-&gt;</operator><name>vgHandle</name></name> <operator>=</operator> <name>pVg</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRspWrapper</name><operator>-&gt;</operator><name>topicHandle</name></name> <operator>=</operator> <name>pTopic</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>rspType</name> <operator>==</operator> <name>TMQ_MSG_TYPE__POLL_RSP</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SDecoder</name></type> <name>decoder</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMqRspHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMqRspHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tDecodeSMqDataRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRspWrapper</name><operator>-&gt;</operator><name>dataRsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRspWrapper</name><operator>-&gt;</operator><name>dataRsp</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMqRspHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"consumer:%"</literal> <name>PRId64</name> <literal type="string">", recv poll: vgId:%d, req offset %"</literal> <name>PRId64</name> <literal type="string">", rsp offset %"</literal> <name>PRId64</name> <literal type="string">" type %d"</literal></expr></argument>,
             <argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>, <argument><expr><name><name>pVg</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pRspWrapper</name><operator>-&gt;</operator><name>dataRsp</name><operator>.</operator><name>reqOffset</name><operator>.</operator><name>version</name></name></expr></argument>, <argument><expr><name><name>pRspWrapper</name><operator>-&gt;</operator><name>dataRsp</name><operator>.</operator><name>rspOffset</name><operator>.</operator><name>version</name></name></expr></argument>,
             <argument><expr><name>rspType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rspType</name> <operator>==</operator> <name>TMQ_MSG_TYPE__POLL_META_RSP</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SDecoder</name></type> <name>decoder</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMqRspHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMqRspHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tDecodeSMqMetaRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRspWrapper</name><operator>-&gt;</operator><name>metaRsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRspWrapper</name><operator>-&gt;</operator><name>metaRsp</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMqRspHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rspType</name> <operator>==</operator> <name>TMQ_MSG_TYPE__TAOSX_RSP</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SDecoder</name></type> <name>decoder</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMqRspHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMqRspHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tDecodeSTaosxRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRspWrapper</name><operator>-&gt;</operator><name>taosxRsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRspWrapper</name><operator>-&gt;</operator><name>taosxRsp</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMqRspHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pEpSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"consumer:%"</literal> <name>PRId64</name> <literal type="string">", put poll res into mqueue %p"</literal></expr></argument>, <argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>, <argument><expr><name>pRspWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosWriteQitem</name><argument_list>(<argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>mqueue</name></name></expr></argument>, <argument><expr><name>pRspWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tsem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmq</name><operator>-&gt;</operator><name>rspSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>CREATE_MSG_FAIL</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>epoch</name> <operator>==</operator> <name><name>tmq</name><operator>-&gt;</operator><name>epoch</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>atomic_store_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVg</name><operator>-&gt;</operator><name>vgStatus</name></name></expr></argument>, <argument><expr><name>TMQ_VG_STATUS__IDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tsem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmq</name><operator>-&gt;</operator><name>rspSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>tmqUpdateEp</name><parameter_list>(<parameter><decl><type><name>tmq_t</name><modifier>*</modifier></type> <name>tmq</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>epoch</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SMqAskEpRsp</name><modifier>*</modifier></type> <name>pRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type> <name>set</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>topicNumGet</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>topics</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>vgKey</name><index>[<expr><name>TSDB_TOPIC_FNAME_LEN</name> <operator>+</operator> <literal type="number">22</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"consumer:%"</literal> <name>PRId64</name> <literal type="string">", update ep epoch %d to epoch %d, topic num:%d"</literal></expr></argument>, <argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>, <argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>epoch</name></name></expr></argument>, <argument><expr><name>epoch</name></expr></argument>,
           <argument><expr><name>topicNumGet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>newTopics</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><name>topicNumGet</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMqClientTopic</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>newTopics</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pHash</name> <init>= <expr><call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>MurmurHash3_32</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pHash</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>newTopics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>topicNumCur</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>clientTopics</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>topicNumCur</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <comment type="line">// find old topic</comment>
    <decl_stmt><decl><type><name>SMqClientTopic</name><modifier>*</modifier></type> <name>pTopicCur</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>clientTopics</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pTopicCur</name><operator>-&gt;</operator><name>vgs</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>vgNumCur</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pTopicCur</name><operator>-&gt;</operator><name>vgs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"consumer:%"</literal> <name>PRId64</name> <literal type="string">", new vg num: %d"</literal></expr></argument>, <argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>, <argument><expr><name>vgNumCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>vgNumCur</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>SMqClientVg</name><modifier>*</modifier></type> <name>pVgCur</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pTopicCur</name><operator>-&gt;</operator><name>vgs</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>vgKey</name></expr></argument>, <argument><expr><literal type="string">"%s:%d"</literal></expr></argument>, <argument><expr><name><name>pTopicCur</name><operator>-&gt;</operator><name>topicName</name></name></expr></argument>, <argument><expr><name><name>pVgCur</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>tFormatOffset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVgCur</name><operator>-&gt;</operator><name>currentOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"consumer:%"</literal> <name>PRId64</name> <literal type="string">", epoch %d vgId:%d vgKey is %s, offset is %s"</literal></expr></argument>, <argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>, <argument><expr><name>epoch</name></expr></argument>,
                 <argument><expr><name><name>pVgCur</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>vgKey</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name>pHash</name></expr></argument>, <argument><expr><name>vgKey</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>vgKey</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVgCur</name><operator>-&gt;</operator><name>currentOffset</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STqOffsetVal</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>topicNumGet</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SMqClientTopic</name></type> <name>topic</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SMqSubTopicEp</name><modifier>*</modifier></type> <name>pTopicEp</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>topics</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>topic</name><operator>.</operator><name>schema</name></name> <operator>=</operator> <name><name>pTopicEp</name><operator>-&gt;</operator><name>schema</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTopicEp</name><operator>-&gt;</operator><name>schema</name><operator>.</operator><name>nCols</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTopicEp</name><operator>-&gt;</operator><name>schema</name><operator>.</operator><name>pSchema</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>topic</name><operator>.</operator><name>topicName</name></name></expr></argument>, <argument><expr><name><name>pTopicEp</name><operator>-&gt;</operator><name>topic</name></name></expr></argument>, <argument><expr><name>TSDB_TOPIC_FNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>topic</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>pTopicEp</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>TSDB_DB_FNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"consumer:%"</literal> <name>PRId64</name> <literal type="string">", update topic: %s"</literal></expr></argument>, <argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>, <argument><expr><name><name>topic</name><operator>.</operator><name>topicName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>vgNumGet</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pTopicEp</name><operator>-&gt;</operator><name>vgs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>topic</name><operator>.</operator><name>vgs</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>vgNumGet</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMqClientVg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>vgNumGet</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SMqSubVgEp</name><modifier>*</modifier></type> <name>pVgEp</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pTopicEp</name><operator>-&gt;</operator><name>vgs</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>vgKey</name></expr></argument>, <argument><expr><literal type="string">"%s:%d"</literal></expr></argument>, <argument><expr><name><name>topic</name><operator>.</operator><name>topicName</name></name></expr></argument>, <argument><expr><name><name>pVgEp</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>STqOffsetVal</name><modifier>*</modifier></type> <name>pOffset</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name>pHash</name></expr></argument>, <argument><expr><name>vgKey</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>vgKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>STqOffsetVal</name></type>  <name>offsetNew</name> <init>= <expr><block>{<expr><operator>.</operator><name>type</name> <operator>=</operator> <name><name>tmq</name><operator>-&gt;</operator><name>resetOffsetCfg</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>pOffset</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>offsetNew</name> <operator>=</operator> <operator>*</operator><name>pOffset</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>SMqClientVg</name></type> <name>clientVg</name> <init>= <expr><block>{
          <expr><operator>.</operator><name>pollCnt</name> <operator>=</operator> <literal type="number">0</literal></expr>,
          <expr><operator>.</operator><name>currentOffset</name> <operator>=</operator> <name>offsetNew</name></expr>,
          <expr><operator>.</operator><name>vgId</name> <operator>=</operator> <name><name>pVgEp</name><operator>-&gt;</operator><name>vgId</name></name></expr>,
          <expr><operator>.</operator><name>epSet</name> <operator>=</operator> <name><name>pVgEp</name><operator>-&gt;</operator><name>epSet</name></name></expr>,
          <expr><operator>.</operator><name>vgStatus</name> <operator>=</operator> <name>TMQ_VG_STATUS__IDLE</name></expr>,
          <expr><operator>.</operator><name>vgSkipCnt</name> <operator>=</operator> <literal type="number">0</literal></expr>,
      }</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>topic</name><operator>.</operator><name>vgs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>clientVg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>set</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>newTopics</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>topic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if <condition>(<expr><name><name>tmq</name><operator>-&gt;</operator><name>clientTopics</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>sz</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>clientTopics</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SMqClientTopic</name><modifier>*</modifier></type> <name>pTopic</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>clientTopics</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pTopic</name><operator>-&gt;</operator><name>schema</name><operator>.</operator><name>nCols</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>schema</name><operator>.</operator><name>pSchema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>vgs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>clientTopics</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name>pHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tmq</name><operator>-&gt;</operator><name>clientTopics</name></name> <operator>=</operator> <name>newTopics</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>clientTopics</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmq</name><operator>-&gt;</operator><name>status</name></name></expr></argument>, <argument><expr><name>TMQ_CONSUMER_STATUS__NO_TOPIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmq</name><operator>-&gt;</operator><name>status</name></name></expr></argument>, <argument><expr><name>TMQ_CONSUMER_STATUS__READY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

  <expr_stmt><expr><call><name>atomic_store_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmq</name><operator>-&gt;</operator><name>epoch</name></name></expr></argument>, <argument><expr><name>epoch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>set</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tmqAskEpCb</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>SDataBuf</name><modifier>*</modifier></type> <name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMqAskEpCbParam</name><modifier>*</modifier></type> <name>pParam</name> <init>= <expr><operator>(</operator><name>SMqAskEpCbParam</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type>           <name>async</name> <init>= <expr><name><name>pParam</name><operator>-&gt;</operator><name>async</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tmq_t</name><modifier>*</modifier></type>           <name>tmq</name> <init>= <expr><call><name>taosAcquireRef</name><argument_list>(<argument><expr><name><name>tmqMgmt</name><operator>.</operator><name>rsetId</name></name></expr></argument>, <argument><expr><name><name>pParam</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>tmq</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>async</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tsem_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pParam</name><operator>-&gt;</operator><name>rspSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_TMQ_CONSUMER_CLOSED</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pParam</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"consumer:%"</literal> <name>PRId64</name> <literal type="string">", get topic endpoint error, not ready, wait:%d, code %x"</literal></expr></argument>, <argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>,
             <argument><expr><name><name>pParam</name><operator>-&gt;</operator><name>async</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>END</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// tmq's epoch is monotonically increase,</comment>
  <comment type="line">// so it's safe to discard any old epoch msg.</comment>
  <comment type="line">// Epoch will only increase when received newer epoch ep msg</comment>
  <decl_stmt><decl><type><name>SMqRspHead</name><modifier>*</modifier></type> <name>head</name> <init>= <expr><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>epoch</name> <init>= <expr><call><name>atomic_load_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmq</name><operator>-&gt;</operator><name>epoch</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"consumer:%"</literal> <name>PRId64</name> <literal type="string">", recv ep, msg epoch %d, current epoch %d"</literal></expr></argument>, <argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>, <argument><expr><name><name>head</name><operator>-&gt;</operator><name>epoch</name></name></expr></argument>, <argument><expr><name>epoch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>head</name><operator>-&gt;</operator><name>epoch</name></name> <operator>&lt;=</operator> <name>epoch</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>END</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>async</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SMqAskEpRsp</name></type> <name>rsp</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tDecodeSMqAskEpRsp</name><argument_list>(<argument><expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMqRspHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/*printf("rsp epoch %" PRId64 " sz %" PRId64 "\n", rsp.epoch, rsp.topics-&gt;size);*/</comment>
    <comment type="block">/*printf("tmq epoch %" PRId64 " sz %" PRId64 "\n", tmq-&gt;epoch, tmq-&gt;clientTopics-&gt;size);*/</comment>
    <expr_stmt><expr><call><name>tmqUpdateEp</name><argument_list>(<argument><expr><name>tmq</name></expr></argument>, <argument><expr><name><name>head</name><operator>-&gt;</operator><name>epoch</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tDeleteSMqAskEpRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>SMqAskEpRspWrapper</name><modifier>*</modifier></type> <name>pWrapper</name> <init>= <expr><call><name>taosAllocateQitem</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMqAskEpRspWrapper</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>DEF_QITEM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pWrapper</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      <goto>goto <name>END</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>tmqRspType</name></name> <operator>=</operator> <name>TMQ_MSG_TYPE__EP_RSP</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>epoch</name></name> <operator>=</operator> <name><name>head</name><operator>-&gt;</operator><name>epoch</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWrapper</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMqRspHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tDecodeSMqAskEpRsp</name><argument_list>(<argument><expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMqRspHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWrapper</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taosWriteQitem</name><argument_list>(<argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>mqueue</name></name></expr></argument>, <argument><expr><name>pWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tsem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmq</name><operator>-&gt;</operator><name>rspSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>END</name>:</label>
  <comment type="block">/*atomic_store_8(&amp;tmq-&gt;epStatus, 0);*/</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>async</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pParam</name><operator>-&gt;</operator><name>rspSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tmqAskEp</name><parameter_list>(<parameter><decl><type><name>tmq_t</name><modifier>*</modifier></type> <name>tmq</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>async</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  int8_t  epStatus = atomic_val_compare_exchange_8(&amp;tmq-&gt;epStatus, 0, 1);
  if (epStatus == 1) {
    int32_t epSkipCnt = atomic_add_fetch_32(&amp;tmq-&gt;epSkipCnt, 1);
    tscTrace("consumer:%" PRId64 ", skip ask ep cnt %d", tmq-&gt;consumerId, epSkipCnt);
    if (epSkipCnt &lt; 5000) return 0;
  }
  atomic_store_32(&amp;tmq-&gt;epSkipCnt, 0);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name>SMqAskEpReq</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>consumerId</name></name> <operator>=</operator> <name><name>tmq</name><operator>-&gt;</operator><name>consumerId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>req</name><operator>.</operator><name>epoch</name></name> <operator>=</operator> <name><name>tmq</name><operator>-&gt;</operator><name>epoch</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>cgroup</name></name></expr></argument>, <argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>groupId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>tlen</name> <init>= <expr><call><name>tSerializeSMqAskEpReq</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tlen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"tSerializeSMqAskEpReq failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pReq</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pReq</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"failed to malloc askEpReq msg, size:%d"</literal></expr></argument>, <argument><expr><name>tlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tSerializeSMqAskEpReq</name><argument_list>(<argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"tSerializeSMqAskEpReq %d failed"</literal></expr></argument>, <argument><expr><name>tlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SMqAskEpCbParam</name><modifier>*</modifier></type> <name>pParam</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMqAskEpCbParam</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pParam</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscError</name><argument_list>(<argument><expr><literal type="string">"failed to malloc subscribe param"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/*atomic_store_8(&amp;tmq-&gt;epStatus, 0);*/</comment>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pParam</name><operator>-&gt;</operator><name>refId</name></name> <operator>=</operator> <name><name>tmq</name><operator>-&gt;</operator><name>refId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pParam</name><operator>-&gt;</operator><name>epoch</name></name> <operator>=</operator> <name><name>tmq</name><operator>-&gt;</operator><name>epoch</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pParam</name><operator>-&gt;</operator><name>async</name></name> <operator>=</operator> <name>async</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tsem_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pParam</name><operator>-&gt;</operator><name>rspSem</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SMsgSendInfo</name><modifier>*</modifier></type> <name>sendInfo</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgSendInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>sendInfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsem_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pParam</name><operator>-&gt;</operator><name>rspSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/*atomic_store_8(&amp;tmq-&gt;epStatus, 0);*/</comment>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>sendInfo</name><operator>-&gt;</operator><name>msgInfo</name></name> <operator>=</operator> <operator>(</operator><name>SDataBuf</name><operator>)</operator><block>{
      <expr><operator>.</operator><name>pData</name> <operator>=</operator> <name>pReq</name></expr>,
      <expr><operator>.</operator><name>len</name> <operator>=</operator> <name>tlen</name></expr>,
      <expr><operator>.</operator><name>handle</name> <operator>=</operator> <name>NULL</name></expr>,
  }</block></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>sendInfo</name><operator>-&gt;</operator><name>requestId</name></name> <operator>=</operator> <call><name>generateRequestId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sendInfo</name><operator>-&gt;</operator><name>requestObjRefId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sendInfo</name><operator>-&gt;</operator><name>param</name></name> <operator>=</operator> <name>pParam</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sendInfo</name><operator>-&gt;</operator><name>fp</name></name> <operator>=</operator> <name>tmqAskEpCb</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sendInfo</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_MND_TMQ_ASK_EP</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SEpSet</name></type> <name>epSet</name> <init>= <expr><call><name>getEpSet_s</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmq</name><operator>-&gt;</operator><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>mgmtEp</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"consumer:%"</literal> <name>PRId64</name> <literal type="string">", ask ep"</literal></expr></argument>, <argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>transporterId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>asyncSendMsgToServer</name><argument_list>(<argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>pTransporter</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>epSet</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>transporterId</name></expr></argument>, <argument><expr><name>sendInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>async</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsem_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pParam</name><operator>-&gt;</operator><name>rspSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>pParam</name><operator>-&gt;</operator><name>code</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tmqBuildConsumeReqImpl</name><parameter_list>(<parameter><decl><type><name>SMqPollReq</name><modifier>*</modifier></type> <name>pReq</name></decl></parameter>, <parameter><decl><type><name>tmq_t</name><modifier>*</modifier></type> <name>tmq</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><name>SMqClientTopic</name><modifier>*</modifier></type> <name>pTopic</name></decl></parameter>, <parameter><decl><type><name>SMqClientVg</name><modifier>*</modifier></type> <name>pVg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="block">/*strcpy(pReq-&gt;topic, pTopic-&gt;topicName);*/</comment>
  <comment type="block">/*strcpy(pReq-&gt;cgroup, tmq-&gt;groupId);*/</comment>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>groupLen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>groupId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>subKey</name></name></expr></argument>, <argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>groupId</name></name></expr></argument>, <argument><expr><name>groupLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>subKey</name><index>[<expr><name>groupLen</name></expr>]</index></name> <operator>=</operator> <name>TMQ_SEPARATOR</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>subKey</name></name> <operator>+</operator> <name>groupLen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>topicName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>withTbName</name></name> <operator>=</operator> <name><name>tmq</name><operator>-&gt;</operator><name>withTbName</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>timeout</name></name> <operator>=</operator> <name>timeout</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>consumerId</name></name> <operator>=</operator> <name><name>tmq</name><operator>-&gt;</operator><name>consumerId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>epoch</name></name> <operator>=</operator> <name><name>tmq</name><operator>-&gt;</operator><name>epoch</name></name></expr>;</expr_stmt>
  <comment type="block">/*pReq-&gt;currentOffset = reqOffset;*/</comment>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>reqOffset</name></name> <operator>=</operator> <name><name>pVg</name><operator>-&gt;</operator><name>currentOffset</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>reqId</name></name> <operator>=</operator> <call><name>generateRequestId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>useSnapshot</name></name> <operator>=</operator> <name><name>tmq</name><operator>-&gt;</operator><name>useSnapshot</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pReq</name><operator>-&gt;</operator><name>head</name><operator>.</operator><name>vgId</name></name> <operator>=</operator> <name><name>pVg</name><operator>-&gt;</operator><name>vgId</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SMqMetaRspObj</name><modifier>*</modifier></type> <name>tmqBuildMetaRspFromWrapper</name><parameter_list>(<parameter><decl><type><name>SMqPollRspWrapper</name><modifier>*</modifier></type> <name>pWrapper</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMqMetaRspObj</name><modifier>*</modifier></type> <name>pRspObj</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMqMetaRspObj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pRspObj</name><operator>-&gt;</operator><name>resType</name></name> <operator>=</operator> <name>RES_TYPE__TMQ_META</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>pRspObj</name><operator>-&gt;</operator><name>topic</name></name></expr></argument>, <argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>topicHandle</name><operator>-&gt;</operator><name>topicName</name></name></expr></argument>, <argument><expr><name>TSDB_TOPIC_FNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>pRspObj</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>topicHandle</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>TSDB_DB_FNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRspObj</name><operator>-&gt;</operator><name>vgId</name></name> <operator>=</operator> <name><name>pWrapper</name><operator>-&gt;</operator><name>vgHandle</name><operator>-&gt;</operator><name>vgId</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRspObj</name><operator>-&gt;</operator><name>metaRsp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWrapper</name><operator>-&gt;</operator><name>metaRsp</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMqMetaRsp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pRspObj</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SMqRspObj</name><modifier>*</modifier></type> <name>tmqBuildRspFromWrapper</name><parameter_list>(<parameter><decl><type><name>SMqPollRspWrapper</name><modifier>*</modifier></type> <name>pWrapper</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMqRspObj</name><modifier>*</modifier></type> <name>pRspObj</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMqRspObj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pRspObj</name><operator>-&gt;</operator><name>resType</name></name> <operator>=</operator> <name>RES_TYPE__TMQ</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>pRspObj</name><operator>-&gt;</operator><name>topic</name></name></expr></argument>, <argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>topicHandle</name><operator>-&gt;</operator><name>topicName</name></name></expr></argument>, <argument><expr><name>TSDB_TOPIC_FNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>pRspObj</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>topicHandle</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>TSDB_DB_FNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRspObj</name><operator>-&gt;</operator><name>vgId</name></name> <operator>=</operator> <name><name>pWrapper</name><operator>-&gt;</operator><name>vgHandle</name><operator>-&gt;</operator><name>vgId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRspObj</name><operator>-&gt;</operator><name>resIter</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRspObj</name><operator>-&gt;</operator><name>rsp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWrapper</name><operator>-&gt;</operator><name>dataRsp</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMqDataRsp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pRspObj</name><operator>-&gt;</operator><name>resInfo</name><operator>.</operator><name>totalRows</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRspObj</name><operator>-&gt;</operator><name>resInfo</name><operator>.</operator><name>precision</name></name> <operator>=</operator> <name>TSDB_TIME_PRECISION_MILLI</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pWrapper</name><operator>-&gt;</operator><name>dataRsp</name><operator>.</operator><name>withSchema</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>setResSchemaInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRspObj</name><operator>-&gt;</operator><name>resInfo</name></name></expr></argument>, <argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>topicHandle</name><operator>-&gt;</operator><name>schema</name><operator>.</operator><name>pSchema</name></name></expr></argument>, <argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>topicHandle</name><operator>-&gt;</operator><name>schema</name><operator>.</operator><name>nCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>pRspObj</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SMqTaosxRspObj</name><modifier>*</modifier></type> <name>tmqBuildTaosxRspFromWrapper</name><parameter_list>(<parameter><decl><type><name>SMqPollRspWrapper</name><modifier>*</modifier></type> <name>pWrapper</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMqTaosxRspObj</name><modifier>*</modifier></type> <name>pRspObj</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMqTaosxRspObj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pRspObj</name><operator>-&gt;</operator><name>resType</name></name> <operator>=</operator> <name>RES_TYPE__TMQ_METADATA</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>pRspObj</name><operator>-&gt;</operator><name>topic</name></name></expr></argument>, <argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>topicHandle</name><operator>-&gt;</operator><name>topicName</name></name></expr></argument>, <argument><expr><name>TSDB_TOPIC_FNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>pRspObj</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>topicHandle</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>TSDB_DB_FNAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRspObj</name><operator>-&gt;</operator><name>vgId</name></name> <operator>=</operator> <name><name>pWrapper</name><operator>-&gt;</operator><name>vgHandle</name><operator>-&gt;</operator><name>vgId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRspObj</name><operator>-&gt;</operator><name>resIter</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRspObj</name><operator>-&gt;</operator><name>rsp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWrapper</name><operator>-&gt;</operator><name>taosxRsp</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STaosxRsp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pRspObj</name><operator>-&gt;</operator><name>resInfo</name><operator>.</operator><name>totalRows</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRspObj</name><operator>-&gt;</operator><name>resInfo</name><operator>.</operator><name>precision</name></name> <operator>=</operator> <name>TSDB_TIME_PRECISION_MILLI</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pWrapper</name><operator>-&gt;</operator><name>taosxRsp</name><operator>.</operator><name>withSchema</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>setResSchemaInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRspObj</name><operator>-&gt;</operator><name>resInfo</name></name></expr></argument>, <argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>topicHandle</name><operator>-&gt;</operator><name>schema</name><operator>.</operator><name>pSchema</name></name></expr></argument>, <argument><expr><name><name>pWrapper</name><operator>-&gt;</operator><name>topicHandle</name><operator>-&gt;</operator><name>schema</name><operator>.</operator><name>nCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>pRspObj</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tmqPollImpl</name><parameter_list>(<parameter><decl><type><name>tmq_t</name><modifier>*</modifier></type> <name>tmq</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>timeout</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="block">/*tscDebug("call poll");*/</comment>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>clientTopics</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SMqClientTopic</name><modifier>*</modifier></type> <name>pTopic</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>clientTopics</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>vgs</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SMqClientVg</name><modifier>*</modifier></type> <name>pVg</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>vgs</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type>      <name>vgStatus</name> <init>= <expr><call><name>atomic_val_compare_exchange_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVg</name><operator>-&gt;</operator><name>vgStatus</name></name></expr></argument>, <argument><expr><name>TMQ_VG_STATUS__IDLE</name></expr></argument>, <argument><expr><name>TMQ_VG_STATUS__WAIT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>vgStatus</name> <operator>!=</operator> <name>TMQ_VG_STATUS__IDLE</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>vgSkipCnt</name> <init>= <expr><call><name>atomic_add_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVg</name><operator>-&gt;</operator><name>vgSkipCnt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>tscTrace</name><argument_list>(<argument><expr><literal type="string">"consumer:%"</literal> <name>PRId64</name> <literal type="string">", epoch %d skip vgId:%d skip cnt %d"</literal></expr></argument>, <argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>, <argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>epoch</name></name></expr></argument>, <argument><expr><name><name>pVg</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>,
                 <argument><expr><name>vgSkipCnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
        <comment type="block">/*if (vgSkipCnt &lt; 10000) continue;*/</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
        if (skipCnt &lt; 30000) {
          continue;
        } else {
        tscDebug("consumer:%" PRId64 ",skip vgId:%d skip too much reset", tmq-&gt;consumerId, pVg-&gt;vgId);
        }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>atomic_store_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVg</name><operator>-&gt;</operator><name>vgSkipCnt</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>SMqPollReq</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tmqBuildConsumeReqImpl</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><name>tmq</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>pTopic</name></expr></argument>, <argument><expr><name>pVg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>msgSize</name> <init>= <expr><call><name>tSerializeSMqPollReq</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>msgSize</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>atomic_store_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVg</name><operator>-&gt;</operator><name>vgStatus</name></name></expr></argument>, <argument><expr><name>TMQ_VG_STATUS__IDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>tsem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmq</name><operator>-&gt;</operator><name>rspSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>msg</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>msg</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>atomic_store_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVg</name><operator>-&gt;</operator><name>vgStatus</name></name></expr></argument>, <argument><expr><name>TMQ_VG_STATUS__IDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>tsem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmq</name><operator>-&gt;</operator><name>rspSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>tSerializeSMqPollReq</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>atomic_store_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVg</name><operator>-&gt;</operator><name>vgStatus</name></name></expr></argument>, <argument><expr><name>TMQ_VG_STATUS__IDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>tsem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmq</name><operator>-&gt;</operator><name>rspSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>SMqPollCbParam</name><modifier>*</modifier></type> <name>pParam</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMqPollCbParam</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>pParam</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>atomic_store_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVg</name><operator>-&gt;</operator><name>vgStatus</name></name></expr></argument>, <argument><expr><name>TMQ_VG_STATUS__IDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>tsem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmq</name><operator>-&gt;</operator><name>rspSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>pParam</name><operator>-&gt;</operator><name>refId</name></name> <operator>=</operator> <name><name>tmq</name><operator>-&gt;</operator><name>refId</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pParam</name><operator>-&gt;</operator><name>epoch</name></name> <operator>=</operator> <name><name>tmq</name><operator>-&gt;</operator><name>epoch</name></name></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>pParam</name><operator>-&gt;</operator><name>pVg</name></name> <operator>=</operator> <name>pVg</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pParam</name><operator>-&gt;</operator><name>pTopic</name></name> <operator>=</operator> <name>pTopic</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pParam</name><operator>-&gt;</operator><name>vgId</name></name> <operator>=</operator> <name><name>pVg</name><operator>-&gt;</operator><name>vgId</name></name></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>SMsgSendInfo</name><modifier>*</modifier></type> <name>sendInfo</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgSendInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>sendInfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>atomic_store_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVg</name><operator>-&gt;</operator><name>vgStatus</name></name></expr></argument>, <argument><expr><name>TMQ_VG_STATUS__IDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>tsem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmq</name><operator>-&gt;</operator><name>rspSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name><name>sendInfo</name><operator>-&gt;</operator><name>msgInfo</name></name> <operator>=</operator> <operator>(</operator><name>SDataBuf</name><operator>)</operator><block>{
          <expr><operator>.</operator><name>pData</name> <operator>=</operator> <name>msg</name></expr>,
          <expr><operator>.</operator><name>len</name> <operator>=</operator> <name>msgSize</name></expr>,
          <expr><operator>.</operator><name>handle</name> <operator>=</operator> <name>NULL</name></expr>,
      }</block></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>sendInfo</name><operator>-&gt;</operator><name>requestId</name></name> <operator>=</operator> <name><name>req</name><operator>.</operator><name>reqId</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>sendInfo</name><operator>-&gt;</operator><name>requestObjRefId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>sendInfo</name><operator>-&gt;</operator><name>param</name></name> <operator>=</operator> <name>pParam</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>sendInfo</name><operator>-&gt;</operator><name>fp</name></name> <operator>=</operator> <name>tmqPollCb</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>sendInfo</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_VND_TMQ_CONSUME</name></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>int64_t</name></type> <name>transporterId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <comment type="block">/*printf("send poll\n");*/</comment>

      <decl_stmt><decl><type><name>char</name></type> <name><name>offsetFormatBuf</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tFormatOffset</name><argument_list>(<argument><expr><name>offsetFormatBuf</name></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVg</name><operator>-&gt;</operator><name>currentOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"consumer:%"</literal> <name>PRId64</name> <literal type="string">", send poll to %s vgId:%d, epoch %d, req offset:%s, reqId:%"</literal> <name>PRIu64</name></expr></argument>,
               <argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>, <argument><expr><name><name>pTopic</name><operator>-&gt;</operator><name>topicName</name></name></expr></argument>, <argument><expr><name><name>pVg</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>epoch</name></name></expr></argument>, <argument><expr><name>offsetFormatBuf</name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>reqId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/*printf("send vgId:%d %" PRId64 "\n", pVg-&gt;vgId, pVg-&gt;currentOffset);*/</comment>
      <expr_stmt><expr><call><name>asyncSendMsgToServer</name><argument_list>(<argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>pTransporter</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVg</name><operator>-&gt;</operator><name>epSet</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>transporterId</name></expr></argument>, <argument><expr><name>sendInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pVg</name><operator>-&gt;</operator><name>pollCnt</name></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>tmq</name><operator>-&gt;</operator><name>pollCnt</name></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tmqHandleNoPollRsp</name><parameter_list>(<parameter><decl><type><name>tmq_t</name><modifier>*</modifier></type> <name>tmq</name></decl></parameter>, <parameter><decl><type><name>SMqRspWrapper</name><modifier>*</modifier></type> <name>rspWrapper</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>pReset</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>rspWrapper</name><operator>-&gt;</operator><name>tmqRspType</name></name> <operator>==</operator> <name>TMQ_MSG_TYPE__EP_RSP</name></expr>)</condition> <block>{<block_content>
    <comment type="block">/*printf("ep %d %d\n", rspMsg-&gt;head.epoch, tmq-&gt;epoch);*/</comment>
    <if_stmt><if>if <condition>(<expr><name><name>rspWrapper</name><operator>-&gt;</operator><name>epoch</name></name> <operator>&gt;</operator> <call><name>atomic_load_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmq</name><operator>-&gt;</operator><name>epoch</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SMqAskEpRspWrapper</name><modifier>*</modifier></type> <name>pEpRspWrapper</name> <init>= <expr><operator>(</operator><name>SMqAskEpRspWrapper</name><operator>*</operator><operator>)</operator><name>rspWrapper</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SMqAskEpRsp</name><modifier>*</modifier></type>        <name>rspMsg</name> <init>= <expr><operator>&amp;</operator><name><name>pEpRspWrapper</name><operator>-&gt;</operator><name>msg</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tmqUpdateEp</name><argument_list>(<argument><expr><name>tmq</name></expr></argument>, <argument><expr><name><name>rspWrapper</name><operator>-&gt;</operator><name>epoch</name></name></expr></argument>, <argument><expr><name>rspMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/*tmqClearUnhandleMsg(tmq);*/</comment>
      <expr_stmt><expr><call><name>tDeleteSMqAskEpRsp</name><argument_list>(<argument><expr><name>rspMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>pReset</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>tmqFreeRspWrapper</name><argument_list>(<argument><expr><name>rspWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>pReset</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>tmqHandleAllRsp</name><parameter_list>(<parameter><decl><type><name>tmq_t</name><modifier>*</modifier></type> <name>tmq</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>pollIfReset</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SMqRspWrapper</name><modifier>*</modifier></type> <name>rspWrapper</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosGetQitem</name><argument_list>(<argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>qall</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>rspWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rspWrapper</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosReadAllQitems</name><argument_list>(<argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>mqueue</name></name></expr></argument>, <argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>qall</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosGetQitem</name><argument_list>(<argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>qall</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>rspWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>rspWrapper</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/*tscDebug("consumer %" PRId64 " mqueue empty", tmq-&gt;consumerId);*/</comment>
        <return>return <expr><name>NULL</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"consumer:%"</literal> <name>PRId64</name> <literal type="string">" handle rsp %p"</literal></expr></argument>, <argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>, <argument><expr><name>rspWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>rspWrapper</name><operator>-&gt;</operator><name>tmqRspType</name></name> <operator>==</operator> <name>TMQ_MSG_TYPE__END_RSP</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosFreeQitem</name><argument_list>(<argument><expr><name>rspWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_TQ_NO_COMMITTED_OFFSET</name></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>rspWrapper</name><operator>-&gt;</operator><name>tmqRspType</name></name> <operator>==</operator> <name>TMQ_MSG_TYPE__POLL_RSP</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SMqPollRspWrapper</name><modifier>*</modifier></type> <name>pollRspWrapper</name> <init>= <expr><operator>(</operator><name>SMqPollRspWrapper</name><operator>*</operator><operator>)</operator><name>rspWrapper</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"consumer %"</literal> <name>PRId64</name> <literal type="string">" actual process poll rsp"</literal></expr></argument>, <argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/*atomic_sub_fetch_32(&amp;tmq-&gt;readyRequest, 1);*/</comment>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>consumerEpoch</name> <init>= <expr><call><name>atomic_load_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmq</name><operator>-&gt;</operator><name>epoch</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pollRspWrapper</name><operator>-&gt;</operator><name>dataRsp</name><operator>.</operator><name>head</name><operator>.</operator><name>epoch</name></name> <operator>==</operator> <name>consumerEpoch</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SMqClientVg</name><modifier>*</modifier></type> <name>pVg</name> <init>= <expr><name><name>pollRspWrapper</name><operator>-&gt;</operator><name>vgHandle</name></name></expr></init></decl>;</decl_stmt>
        <comment type="block">/*printf("vgId:%d, offset %" PRId64 " up to %" PRId64 "\n", pVg-&gt;vgId, pVg-&gt;currentOffset,
         * rspMsg-&gt;msg.rspOffset);*/</comment>
        <expr_stmt><expr><name><name>pVg</name><operator>-&gt;</operator><name>currentOffset</name></name> <operator>=</operator> <name><name>pollRspWrapper</name><operator>-&gt;</operator><name>dataRsp</name><operator>.</operator><name>rspOffset</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>atomic_store_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVg</name><operator>-&gt;</operator><name>vgStatus</name></name></expr></argument>, <argument><expr><name>TMQ_VG_STATUS__IDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pollRspWrapper</name><operator>-&gt;</operator><name>dataRsp</name><operator>.</operator><name>blockNum</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>taosFreeQitem</name><argument_list>(<argument><expr><name>pollRspWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>rspWrapper</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// build rsp</comment>
        <decl_stmt><decl><type><name>SMqRspObj</name><modifier>*</modifier></type> <name>pRsp</name> <init>= <expr><call><name>tmqBuildRspFromWrapper</name><argument_list>(<argument><expr><name>pollRspWrapper</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>taosFreeQitem</name><argument_list>(<argument><expr><name>pollRspWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>pRsp</name></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"msg discard since epoch mismatch: msg epoch %d, consumer epoch %d"</literal></expr></argument>,
                 <argument><expr><name><name>pollRspWrapper</name><operator>-&gt;</operator><name>dataRsp</name><operator>.</operator><name>head</name><operator>.</operator><name>epoch</name></name></expr></argument>, <argument><expr><name>consumerEpoch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>tmqFreeRspWrapper</name><argument_list>(<argument><expr><name>rspWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosFreeQitem</name><argument_list>(<argument><expr><name>pollRspWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>rspWrapper</name><operator>-&gt;</operator><name>tmqRspType</name></name> <operator>==</operator> <name>TMQ_MSG_TYPE__POLL_META_RSP</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SMqPollRspWrapper</name><modifier>*</modifier></type> <name>pollRspWrapper</name> <init>= <expr><operator>(</operator><name>SMqPollRspWrapper</name><operator>*</operator><operator>)</operator><name>rspWrapper</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type>            <name>consumerEpoch</name> <init>= <expr><call><name>atomic_load_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmq</name><operator>-&gt;</operator><name>epoch</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pollRspWrapper</name><operator>-&gt;</operator><name>metaRsp</name><operator>.</operator><name>head</name><operator>.</operator><name>epoch</name></name> <operator>==</operator> <name>consumerEpoch</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SMqClientVg</name><modifier>*</modifier></type> <name>pVg</name> <init>= <expr><name><name>pollRspWrapper</name><operator>-&gt;</operator><name>vgHandle</name></name></expr></init></decl>;</decl_stmt>
        <comment type="block">/*printf("vgId:%d, offset %" PRId64 " up to %" PRId64 "\n", pVg-&gt;vgId, pVg-&gt;currentOffset,
         * rspMsg-&gt;msg.rspOffset);*/</comment>
        <expr_stmt><expr><name><name>pVg</name><operator>-&gt;</operator><name>currentOffset</name></name> <operator>=</operator> <name><name>pollRspWrapper</name><operator>-&gt;</operator><name>metaRsp</name><operator>.</operator><name>rspOffset</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>atomic_store_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVg</name><operator>-&gt;</operator><name>vgStatus</name></name></expr></argument>, <argument><expr><name>TMQ_VG_STATUS__IDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// build rsp</comment>
        <decl_stmt><decl><type><name>SMqMetaRspObj</name><modifier>*</modifier></type> <name>pRsp</name> <init>= <expr><call><name>tmqBuildMetaRspFromWrapper</name><argument_list>(<argument><expr><name>pollRspWrapper</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>taosFreeQitem</name><argument_list>(<argument><expr><name>pollRspWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>pRsp</name></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"msg discard since epoch mismatch: msg epoch %d, consumer epoch %d"</literal></expr></argument>,
                 <argument><expr><name><name>pollRspWrapper</name><operator>-&gt;</operator><name>metaRsp</name><operator>.</operator><name>head</name><operator>.</operator><name>epoch</name></name></expr></argument>, <argument><expr><name>consumerEpoch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>tmqFreeRspWrapper</name><argument_list>(<argument><expr><name>rspWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosFreeQitem</name><argument_list>(<argument><expr><name>pollRspWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>rspWrapper</name><operator>-&gt;</operator><name>tmqRspType</name></name> <operator>==</operator> <name>TMQ_MSG_TYPE__TAOSX_RSP</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SMqPollRspWrapper</name><modifier>*</modifier></type> <name>pollRspWrapper</name> <init>= <expr><operator>(</operator><name>SMqPollRspWrapper</name><operator>*</operator><operator>)</operator><name>rspWrapper</name></expr></init></decl>;</decl_stmt>
      <comment type="block">/*atomic_sub_fetch_32(&amp;tmq-&gt;readyRequest, 1);*/</comment>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>consumerEpoch</name> <init>= <expr><call><name>atomic_load_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmq</name><operator>-&gt;</operator><name>epoch</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pollRspWrapper</name><operator>-&gt;</operator><name>taosxRsp</name><operator>.</operator><name>head</name><operator>.</operator><name>epoch</name></name> <operator>==</operator> <name>consumerEpoch</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SMqClientVg</name><modifier>*</modifier></type> <name>pVg</name> <init>= <expr><name><name>pollRspWrapper</name><operator>-&gt;</operator><name>vgHandle</name></name></expr></init></decl>;</decl_stmt>
        <comment type="block">/*printf("vgId:%d, offset %" PRId64 " up to %" PRId64 "\n", pVg-&gt;vgId, pVg-&gt;currentOffset,
         * rspMsg-&gt;msg.rspOffset);*/</comment>
        <expr_stmt><expr><name><name>pVg</name><operator>-&gt;</operator><name>currentOffset</name></name> <operator>=</operator> <name><name>pollRspWrapper</name><operator>-&gt;</operator><name>taosxRsp</name><operator>.</operator><name>rspOffset</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>atomic_store_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVg</name><operator>-&gt;</operator><name>vgStatus</name></name></expr></argument>, <argument><expr><name>TMQ_VG_STATUS__IDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pollRspWrapper</name><operator>-&gt;</operator><name>taosxRsp</name><operator>.</operator><name>blockNum</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>taosFreeQitem</name><argument_list>(<argument><expr><name>pollRspWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>rspWrapper</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// build rsp</comment>
        <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pRsp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pollRspWrapper</name><operator>-&gt;</operator><name>taosxRsp</name><operator>.</operator><name>createTableNum</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>pRsp</name> <operator>=</operator> <call><name>tmqBuildRspFromWrapper</name><argument_list>(<argument><expr><name>pollRspWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>pRsp</name> <operator>=</operator> <call><name>tmqBuildTaosxRspFromWrapper</name><argument_list>(<argument><expr><name>pollRspWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>taosFreeQitem</name><argument_list>(<argument><expr><name>pollRspWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>pRsp</name></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"msg discard since epoch mismatch: msg epoch %d, consumer epoch %d"</literal></expr></argument>,
                 <argument><expr><name><name>pollRspWrapper</name><operator>-&gt;</operator><name>taosxRsp</name><operator>.</operator><name>head</name><operator>.</operator><name>epoch</name></name></expr></argument>, <argument><expr><name>consumerEpoch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>tmqFreeRspWrapper</name><argument_list>(<argument><expr><name>rspWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosFreeQitem</name><argument_list>(<argument><expr><name>pollRspWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="block">/*printf("handle ep rsp %d\n", rspMsg-&gt;head.mqMsgType);*/</comment>
      <decl_stmt><decl><type><name>bool</name></type> <name>reset</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tmqHandleNoPollRsp</name><argument_list>(<argument><expr><name>tmq</name></expr></argument>, <argument><expr><name>rspWrapper</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosFreeQitem</name><argument_list>(<argument><expr><name>rspWrapper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>pollIfReset</name> <operator>&amp;&amp;</operator> <name>reset</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"consumer:%"</literal> <name>PRId64</name> <literal type="string">", reset and repoll"</literal></expr></argument>, <argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>tmqPollImpl</name><argument_list>(<argument><expr><name>tmq</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>TAOS_RES</name><modifier>*</modifier></type> <name>tmq_consumer_poll</name><parameter_list>(<parameter><decl><type><name>tmq_t</name><modifier>*</modifier></type> <name>tmq</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>timeout</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="block">/*tscDebug("call poll1");*/</comment>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>rspObj</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>startTime</name> <init>= <expr><call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"consumer:%"</literal> <name>PRId64</name> <literal type="string">", start poll at %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>, <argument><expr><name>startTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  tmqHandleAllDelayedTask(tmq);
  tmqPollImpl(tmq, timeout);
  rspObj = tmqHandleAllRsp(tmq, timeout, false);
  if (rspObj) {
    return (TAOS_RES*)rspObj;
  }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="line">// in no topic status, delayed task also need to be processed</comment>
  <if_stmt><if>if <condition>(<expr><call><name>atomic_load_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmq</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TMQ_CONSUMER_STATUS__INIT</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"consumer:%"</literal> <name>PRId64</name> <literal type="string">", poll return since consumer status is init"</literal></expr></argument>, <argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>atomic_load_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmq</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TMQ_CONSUMER_STATUS__RECOVER</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>retryCnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>TSDB_CODE_MND_CONSUMER_NOT_READY</name> <operator>==</operator> <call><name>tmqAskEp</name><argument_list>(<argument><expr><name>tmq</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>retryCnt</name><operator>++</operator> <operator>&gt;</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"consumer not ready, retry"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMsleep</name><argument_list>(<argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tmqHandleAllDelayedTask</name><argument_list>(<argument><expr><name>tmq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>tmqPollImpl</name><argument_list>(<argument><expr><name>tmq</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"consumer:%"</literal> <name>PRId64</name> <literal type="string">" return since poll err"</literal></expr></argument>, <argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/*return NULL;*/</comment>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>rspObj</name> <operator>=</operator> <call><name>tmqHandleAllRsp</name><argument_list>(<argument><expr><name>tmq</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rspObj</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"consumer:%"</literal> <name>PRId64</name> <literal type="string">", return rsp %p"</literal></expr></argument>, <argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>, <argument><expr><name>rspObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>(</operator><name>TAOS_RES</name><operator>*</operator><operator>)</operator><name>rspObj</name></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>terrno</name> <operator>==</operator> <name>TSDB_CODE_TQ_NO_COMMITTED_OFFSET</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"consumer:%"</literal> <name>PRId64</name> <literal type="string">", return null since no committed offset"</literal></expr></argument>, <argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>currentTime</name> <init>= <expr><call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>passedTime</name> <init>= <expr><name>currentTime</name> <operator>-</operator> <name>startTime</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>passedTime</name> <operator>&gt;</operator> <name>timeout</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tscDebug</name><argument_list>(<argument><expr><literal type="string">"consumer:%"</literal> <name>PRId64</name> <literal type="string">", (epoch %d) timeout, no rsp, start time %"</literal> <name>PRId64</name> <literal type="string">", current time %"</literal> <name>PRId64</name></expr></argument>,
                 <argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>, <argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>epoch</name></name></expr></argument>, <argument><expr><name>startTime</name></expr></argument>, <argument><expr><name>currentTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <comment type="block">/*tscInfo("consumer:%" PRId64 ", (epoch %d) wait, start time %" PRId64 ", current time %" PRId64*/</comment>
      <comment type="block">/*", left time %" PRId64,*/</comment>
      <comment type="block">/*tmq-&gt;consumerId, tmq-&gt;epoch, startTime, currentTime, (timeout - passedTime));*/</comment>
      <expr_stmt><expr><call><name>tsem_timewait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmq</name><operator>-&gt;</operator><name>rspSem</name></name></expr></argument>, <argument><expr><operator>(</operator><name>timeout</name> <operator>-</operator> <name>passedTime</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="line">// use tsem_timewait instead of tsem_wait to avoid unexpected stuck</comment>
      <expr_stmt><expr><call><name>tsem_timewait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmq</name><operator>-&gt;</operator><name>rspSem</name></name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tmq_consumer_close</name><parameter_list>(<parameter><decl><type><name>tmq_t</name><modifier>*</modifier></type> <name>tmq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>tmq</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>TMQ_CONSUMER_STATUS__READY</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>rsp</name> <init>= <expr><call><name>tmq_commit_sync</name><argument_list>(<argument><expr><name>tmq</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>rsp</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>rsp</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type>     <name>retryCnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>tmq_list_t</name><modifier>*</modifier></type> <name>lst</name> <init>= <expr><call><name>tmq_list_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rsp</name> <operator>=</operator> <call><name>tmq_subscribe</name><argument_list>(<argument><expr><name>tmq</name></expr></argument>, <argument><expr><name>lst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>rsp</name> <operator>!=</operator> <name>TSDB_CODE_MND_CONSUMER_NOT_READY</name> <operator>||</operator> <name>retryCnt</name> <operator>&gt;</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>retryCnt</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosMsleep</name><argument_list>(<argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>tmq_list_destroy</name><argument_list>(<argument><expr><name>lst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*return rsp;*/</comment>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosRemoveRef</name><argument_list>(<argument><expr><name><name>tmqMgmt</name><operator>.</operator><name>rsetId</name></name></expr></argument>, <argument><expr><name><name>tmq</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>tmq_err2str</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>err</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="string">"success"</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>err</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="string">"fail"</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>tmq_res_t</name></type> <name>tmq_get_res_type</name><parameter_list>(<parameter><decl><type><name>TAOS_RES</name><modifier>*</modifier></type> <name>res</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>TD_RES_TMQ</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TMQ_RES_DATA</name></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>TD_RES_TMQ_META</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SMqMetaRspObj</name><modifier>*</modifier></type> <name>pMetaRspObj</name> <init>= <expr><operator>(</operator><name>SMqMetaRspObj</name><operator>*</operator><operator>)</operator><name>res</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pMetaRspObj</name><operator>-&gt;</operator><name>metaRsp</name><operator>.</operator><name>resMsgType</name></name> <operator>==</operator> <name>TDMT_VND_DELETE</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TMQ_RES_DATA</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>TMQ_RES_TABLE_META</name></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>TD_RES_TMQ_METADATA</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TMQ_RES_METADATA</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name>TMQ_RES_INVALID</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>tmq_get_topic_name</name><parameter_list>(<parameter><decl><type><name>TAOS_RES</name><modifier>*</modifier></type> <name>res</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>TD_RES_TMQ</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SMqRspObj</name><modifier>*</modifier></type> <name>pRspObj</name> <init>= <expr><operator>(</operator><name>SMqRspObj</name><operator>*</operator><operator>)</operator><name>res</name></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>strchr</name><argument_list>(<argument><expr><name><name>pRspObj</name><operator>-&gt;</operator><name>topic</name></name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>TD_RES_TMQ_META</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SMqMetaRspObj</name><modifier>*</modifier></type> <name>pMetaRspObj</name> <init>= <expr><operator>(</operator><name>SMqMetaRspObj</name><operator>*</operator><operator>)</operator><name>res</name></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>strchr</name><argument_list>(<argument><expr><name><name>pMetaRspObj</name><operator>-&gt;</operator><name>topic</name></name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>TD_RES_TMQ_METADATA</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SMqTaosxRspObj</name><modifier>*</modifier></type> <name>pRspObj</name> <init>= <expr><operator>(</operator><name>SMqTaosxRspObj</name><operator>*</operator><operator>)</operator><name>res</name></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>strchr</name><argument_list>(<argument><expr><name><name>pRspObj</name><operator>-&gt;</operator><name>topic</name></name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>tmq_get_db_name</name><parameter_list>(<parameter><decl><type><name>TAOS_RES</name><modifier>*</modifier></type> <name>res</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>TD_RES_TMQ</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SMqRspObj</name><modifier>*</modifier></type> <name>pRspObj</name> <init>= <expr><operator>(</operator><name>SMqRspObj</name><operator>*</operator><operator>)</operator><name>res</name></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>strchr</name><argument_list>(<argument><expr><name><name>pRspObj</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>TD_RES_TMQ_META</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SMqMetaRspObj</name><modifier>*</modifier></type> <name>pMetaRspObj</name> <init>= <expr><operator>(</operator><name>SMqMetaRspObj</name><operator>*</operator><operator>)</operator><name>res</name></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>strchr</name><argument_list>(<argument><expr><name><name>pMetaRspObj</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>TD_RES_TMQ_METADATA</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SMqTaosxRspObj</name><modifier>*</modifier></type> <name>pRspObj</name> <init>= <expr><operator>(</operator><name>SMqTaosxRspObj</name><operator>*</operator><operator>)</operator><name>res</name></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>strchr</name><argument_list>(<argument><expr><name><name>pRspObj</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tmq_get_vgroup_id</name><parameter_list>(<parameter><decl><type><name>TAOS_RES</name><modifier>*</modifier></type> <name>res</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>TD_RES_TMQ</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SMqRspObj</name><modifier>*</modifier></type> <name>pRspObj</name> <init>= <expr><operator>(</operator><name>SMqRspObj</name><operator>*</operator><operator>)</operator><name>res</name></expr></init></decl>;</decl_stmt>
    <return>return <expr><name><name>pRspObj</name><operator>-&gt;</operator><name>vgId</name></name></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>TD_RES_TMQ_META</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SMqMetaRspObj</name><modifier>*</modifier></type> <name>pMetaRspObj</name> <init>= <expr><operator>(</operator><name>SMqMetaRspObj</name><operator>*</operator><operator>)</operator><name>res</name></expr></init></decl>;</decl_stmt>
    <return>return <expr><name><name>pMetaRspObj</name><operator>-&gt;</operator><name>vgId</name></name></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>TD_RES_TMQ_METADATA</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SMqTaosxRspObj</name><modifier>*</modifier></type> <name>pRspObj</name> <init>= <expr><operator>(</operator><name>SMqTaosxRspObj</name><operator>*</operator><operator>)</operator><name>res</name></expr></init></decl>;</decl_stmt>
    <return>return <expr><name><name>pRspObj</name><operator>-&gt;</operator><name>vgId</name></name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>tmq_get_table_name</name><parameter_list>(<parameter><decl><type><name>TAOS_RES</name><modifier>*</modifier></type> <name>res</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>TD_RES_TMQ</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SMqRspObj</name><modifier>*</modifier></type> <name>pRspObj</name> <init>= <expr><operator>(</operator><name>SMqRspObj</name><operator>*</operator><operator>)</operator><name>res</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pRspObj</name><operator>-&gt;</operator><name>rsp</name><operator>.</operator><name>withTbName</name></name> <operator>||</operator> <name><name>pRspObj</name><operator>-&gt;</operator><name>rsp</name><operator>.</operator><name>blockTbName</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pRspObj</name><operator>-&gt;</operator><name>resIter</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
        <name><name>pRspObj</name><operator>-&gt;</operator><name>resIter</name></name> <operator>&gt;=</operator> <name><name>pRspObj</name><operator>-&gt;</operator><name>rsp</name><operator>.</operator><name>blockNum</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pRspObj</name><operator>-&gt;</operator><name>rsp</name><operator>.</operator><name>blockTbName</name></name></expr></argument>, <argument><expr><name><name>pRspObj</name><operator>-&gt;</operator><name>resIter</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>TD_RES_TMQ_METADATA</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SMqTaosxRspObj</name><modifier>*</modifier></type> <name>pRspObj</name> <init>= <expr><operator>(</operator><name>SMqTaosxRspObj</name><operator>*</operator><operator>)</operator><name>res</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pRspObj</name><operator>-&gt;</operator><name>rsp</name><operator>.</operator><name>withTbName</name></name> <operator>||</operator> <name><name>pRspObj</name><operator>-&gt;</operator><name>rsp</name><operator>.</operator><name>blockTbName</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pRspObj</name><operator>-&gt;</operator><name>resIter</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
        <name><name>pRspObj</name><operator>-&gt;</operator><name>resIter</name></name> <operator>&gt;=</operator> <name><name>pRspObj</name><operator>-&gt;</operator><name>rsp</name><operator>.</operator><name>blockNum</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pRspObj</name><operator>-&gt;</operator><name>rsp</name><operator>.</operator><name>blockTbName</name></name></expr></argument>, <argument><expr><name><name>pRspObj</name><operator>-&gt;</operator><name>resIter</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tmq_commit_async</name><parameter_list>(<parameter><decl><type><name>tmq_t</name><modifier>*</modifier></type> <name>tmq</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TAOS_RES</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>tmq_commit_cb</name><modifier>*</modifier></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">//</comment>
  <expr_stmt><expr><call><name>tmqCommitInner</name><argument_list>(<argument><expr><name>tmq</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tmq_commit_sync</name><parameter_list>(<parameter><decl><type><name>tmq_t</name><modifier>*</modifier></type> <name>tmq</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TAOS_RES</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">//</comment>
  <return>return <expr><call><name>tmqCommitInner</name><argument_list>(<argument><expr><name>tmq</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
