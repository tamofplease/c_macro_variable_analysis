<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/client/src/clientRawBlockWrite.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cJSON.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clientInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"clientLog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdatablock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tglobal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tmsgtype.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tqueue.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tref.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ttimer.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>buildCreateTableJson</name><parameter_list>(<parameter><decl><type><name>SSchemaWrapper</name><modifier>*</modifier></type> <name>schemaRow</name></decl></parameter>, <parameter><decl><type><name>SSchemaWrapper</name><modifier>*</modifier></type> <name>schemaTag</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>id</name></decl></parameter>,
                                  <parameter><decl><type><name>int8_t</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>  <name>string</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>json</name> <init>= <expr><call><name>cJSON_CreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>json</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>type</name> <init>= <expr><call><name>cJSON_CreateString</name><argument_list>(<argument><expr><literal type="string">"create"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">//  char uid[32] = {0};</comment>
  <comment type="line">//  sprintf(uid, "%"PRIi64, id);</comment>
  <comment type="line">//  cJSON* id_ = cJSON_CreateString(uid);</comment>
  <comment type="line">//  cJSON_AddItemToObject(json, "id", id_);</comment>
  <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>tableType</name> <init>= <expr><call><name>cJSON_CreateString</name><argument_list>(<argument><expr><ternary><condition><expr><name>t</name> <operator>==</operator> <name>TSDB_NORMAL_TABLE</name></expr> ?</condition><then> <expr><literal type="string">"normal"</literal></expr> </then><else>: <expr><literal type="string">"super"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><literal type="string">"tableType"</literal></expr></argument>, <argument><expr><name>tableType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>tableName</name> <init>= <expr><call><name>cJSON_CreateString</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><literal type="string">"tableName"</literal></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//  cJSON* version = cJSON_CreateNumber(1);</comment>
  <comment type="line">//  cJSON_AddItemToObject(json, "version", version);</comment>

  <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>columns</name> <init>= <expr><call><name>cJSON_CreateArray</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>schemaRow</name><operator>-&gt;</operator><name>nCols</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type>   <name>column</name> <init>= <expr><call><name>cJSON_CreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SSchema</name><modifier>*</modifier></type> <name>s</name> <init>= <expr><name><name>schemaRow</name><operator>-&gt;</operator><name>pSchema</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type>   <name>cname</name> <init>= <expr><call><name>cJSON_CreateString</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><name>cname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>ctype</name> <init>= <expr><call><name>cJSON_CreateNumber</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>, <argument><expr><name>ctype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>length</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>bytes</name></name> <operator>-</operator> <name>VARSTR_HEADER_SIZE</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type>  <name>cbytes</name> <init>= <expr><call><name>cJSON_CreateNumber</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><literal type="string">"length"</literal></expr></argument>, <argument><expr><name>cbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_NCHAR</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>length</name> <init>= <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>bytes</name></name> <operator>-</operator> <name>VARSTR_HEADER_SIZE</name><operator>)</operator> <operator>/</operator> <name>TSDB_NCHAR_SIZE</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type>  <name>cbytes</name> <init>= <expr><call><name>cJSON_CreateNumber</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><literal type="string">"length"</literal></expr></argument>, <argument><expr><name>cbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>cJSON_AddItemToArray</name><argument_list>(<argument><expr><name>columns</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><literal type="string">"columns"</literal></expr></argument>, <argument><expr><name>columns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>tags</name> <init>= <expr><call><name>cJSON_CreateArray</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>schemaTag</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>schemaTag</name><operator>-&gt;</operator><name>nCols</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type>   <name>tag</name> <init>= <expr><call><name>cJSON_CreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SSchema</name><modifier>*</modifier></type> <name>s</name> <init>= <expr><name><name>schemaTag</name><operator>-&gt;</operator><name>pSchema</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type>   <name>tname</name> <init>= <expr><call><name>cJSON_CreateString</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><name>tname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>ttype</name> <init>= <expr><call><name>cJSON_CreateNumber</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>, <argument><expr><name>ttype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>length</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>bytes</name></name> <operator>-</operator> <name>VARSTR_HEADER_SIZE</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type>  <name>cbytes</name> <init>= <expr><call><name>cJSON_CreateNumber</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><literal type="string">"length"</literal></expr></argument>, <argument><expr><name>cbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_NCHAR</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>length</name> <init>= <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>bytes</name></name> <operator>-</operator> <name>VARSTR_HEADER_SIZE</name><operator>)</operator> <operator>/</operator> <name>TSDB_NCHAR_SIZE</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type>  <name>cbytes</name> <init>= <expr><call><name>cJSON_CreateNumber</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><literal type="string">"length"</literal></expr></argument>, <argument><expr><name>cbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>cJSON_AddItemToArray</name><argument_list>(<argument><expr><name>tags</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><literal type="string">"tags"</literal></expr></argument>, <argument><expr><name>tags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>string</name> <operator>=</operator> <call><name>cJSON_PrintUnformatted</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>string</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>buildAlterSTableJson</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>alterData</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>alterDataLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMAlterStbReq</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type>        <name>json</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>         <name>string</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSMAlterStbReq</name><argument_list>(<argument><expr><name>alterData</name></expr></argument>, <argument><expr><name>alterDataLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>json</name> <operator>=</operator> <call><name>cJSON_CreateObject</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>json</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>type</name> <init>= <expr><call><name>cJSON_CreateString</name><argument_list>(<argument><expr><literal type="string">"alter"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//  cJSON* uid = cJSON_CreateNumber(id);</comment>
  <comment type="line">//  cJSON_AddItemToObject(json, "uid", uid);</comment>
  <decl_stmt><decl><type><name>SName</name></type> <name>name</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameFromString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>T_NAME_ACCT</name> <operator>|</operator> <name>T_NAME_DB</name> <operator>|</operator> <name>T_NAME_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>tableType</name> <init>= <expr><call><name>cJSON_CreateString</name><argument_list>(<argument><expr><literal type="string">"super"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><literal type="string">"tableType"</literal></expr></argument>, <argument><expr><name>tableType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>tableName</name> <init>= <expr><call><name>cJSON_CreateString</name><argument_list>(<argument><expr><name><name>name</name><operator>.</operator><name>tname</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><literal type="string">"tableName"</literal></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>alterType</name> <init>= <expr><call><name>cJSON_CreateNumber</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>alterType</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><literal type="string">"alterType"</literal></expr></argument>, <argument><expr><name>alterType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <switch>switch <condition>(<expr><name><name>req</name><operator>.</operator><name>alterType</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_ALTER_TABLE_ADD_TAG</name></expr>:</case>
    <case>case <expr><name>TSDB_ALTER_TABLE_ADD_COLUMN</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>TAOS_FIELD</name><modifier>*</modifier></type> <name>field</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>pFields</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type>      <name>colName</name> <init>= <expr><call><name>cJSON_CreateString</name><argument_list>(<argument><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><literal type="string">"colName"</literal></expr></argument>, <argument><expr><name>colName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>colType</name> <init>= <expr><call><name>cJSON_CreateNumber</name><argument_list>(<argument><expr><name><name>field</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><literal type="string">"colType"</literal></expr></argument>, <argument><expr><name>colType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>field</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>length</name> <init>= <expr><name><name>field</name><operator>-&gt;</operator><name>bytes</name></name> <operator>-</operator> <name>VARSTR_HEADER_SIZE</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type>  <name>cbytes</name> <init>= <expr><call><name>cJSON_CreateNumber</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><literal type="string">"colLength"</literal></expr></argument>, <argument><expr><name>cbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>field</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_NCHAR</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>length</name> <init>= <expr><operator>(</operator><name><name>field</name><operator>-&gt;</operator><name>bytes</name></name> <operator>-</operator> <name>VARSTR_HEADER_SIZE</name><operator>)</operator> <operator>/</operator> <name>TSDB_NCHAR_SIZE</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type>  <name>cbytes</name> <init>= <expr><call><name>cJSON_CreateNumber</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><literal type="string">"colLength"</literal></expr></argument>, <argument><expr><name>cbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_ALTER_TABLE_DROP_TAG</name></expr>:</case>
    <case>case <expr><name>TSDB_ALTER_TABLE_DROP_COLUMN</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>TAOS_FIELD</name><modifier>*</modifier></type> <name>field</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>pFields</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type>      <name>colName</name> <init>= <expr><call><name>cJSON_CreateString</name><argument_list>(<argument><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><literal type="string">"colName"</literal></expr></argument>, <argument><expr><name>colName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_ALTER_TABLE_UPDATE_TAG_BYTES</name></expr>:</case>
    <case>case <expr><name>TSDB_ALTER_TABLE_UPDATE_COLUMN_BYTES</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>TAOS_FIELD</name><modifier>*</modifier></type> <name>field</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>pFields</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type>      <name>colName</name> <init>= <expr><call><name>cJSON_CreateString</name><argument_list>(<argument><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><literal type="string">"colName"</literal></expr></argument>, <argument><expr><name>colName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>colType</name> <init>= <expr><call><name>cJSON_CreateNumber</name><argument_list>(<argument><expr><name><name>field</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><literal type="string">"colType"</literal></expr></argument>, <argument><expr><name>colType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>field</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>length</name> <init>= <expr><name><name>field</name><operator>-&gt;</operator><name>bytes</name></name> <operator>-</operator> <name>VARSTR_HEADER_SIZE</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type>  <name>cbytes</name> <init>= <expr><call><name>cJSON_CreateNumber</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><literal type="string">"colLength"</literal></expr></argument>, <argument><expr><name>cbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>field</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_NCHAR</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>length</name> <init>= <expr><operator>(</operator><name><name>field</name><operator>-&gt;</operator><name>bytes</name></name> <operator>-</operator> <name>VARSTR_HEADER_SIZE</name><operator>)</operator> <operator>/</operator> <name>TSDB_NCHAR_SIZE</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type>  <name>cbytes</name> <init>= <expr><call><name>cJSON_CreateNumber</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><literal type="string">"colLength"</literal></expr></argument>, <argument><expr><name>cbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_ALTER_TABLE_UPDATE_TAG_NAME</name></expr>:</case>
    <case>case <expr><name>TSDB_ALTER_TABLE_UPDATE_COLUMN_NAME</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>TAOS_FIELD</name><modifier>*</modifier></type> <name>oldField</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>pFields</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>TAOS_FIELD</name><modifier>*</modifier></type> <name>newField</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>pFields</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type>      <name>colName</name> <init>= <expr><call><name>cJSON_CreateString</name><argument_list>(<argument><expr><name><name>oldField</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><literal type="string">"colName"</literal></expr></argument>, <argument><expr><name>colName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>colNewName</name> <init>= <expr><call><name>cJSON_CreateString</name><argument_list>(<argument><expr><name><name>newField</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><literal type="string">"colNewName"</literal></expr></argument>, <argument><expr><name>colNewName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
  <expr_stmt><expr><name>string</name> <operator>=</operator> <call><name>cJSON_PrintUnformatted</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
  <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tFreeSMAltertbReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>string</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>processCreateStb</name><parameter_list>(<parameter><decl><type><name>SMqMetaRsp</name><modifier>*</modifier></type> <name>metaRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVCreateStbReq</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDecoder</name></type>       <name>coder</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>          <name>string</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// decode and process req</comment>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>data</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name><name>metaRsp</name><operator>-&gt;</operator><name>metaRsp</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><name><name>metaRsp</name><operator>-&gt;</operator><name>metaRspLen</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tDecodeSVCreateStbReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>string</name> <operator>=</operator> <call><name>buildCreateTableJson</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>.</operator><name>schemaRow</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>.</operator><name>schemaTag</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>suid</name></name></expr></argument>, <argument><expr><name>TSDB_SUPER_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>string</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>processAlterStb</name><parameter_list>(<parameter><decl><type><name>SMqMetaRsp</name><modifier>*</modifier></type> <name>metaRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVCreateStbReq</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDecoder</name></type>       <name>coder</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>          <name>string</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// decode and process req</comment>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>data</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name><name>metaRsp</name><operator>-&gt;</operator><name>metaRsp</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><name><name>metaRsp</name><operator>-&gt;</operator><name>metaRspLen</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tDecodeSVCreateStbReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>string</name> <operator>=</operator> <call><name>buildAlterSTableJson</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>alterOriData</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>alterOriDataLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>string</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>buildChildElement</name><parameter_list>(<parameter><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>json</name></decl></parameter>, <parameter><decl><type><name>SVCreateTbReq</name><modifier>*</modifier></type> <name>pCreateReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STag</name><modifier>*</modifier></type>   <name>pTag</name> <init>= <expr><operator>(</operator><name>STag</name><operator>*</operator><operator>)</operator><name><name>pCreateReq</name><operator>-&gt;</operator><name>ctb</name><operator>.</operator><name>pTag</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>sname</name> <init>= <expr><name><name>pCreateReq</name><operator>-&gt;</operator><name>ctb</name><operator>.</operator><name>stbName</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>name</name> <init>= <expr><name><name>pCreateReq</name><operator>-&gt;</operator><name>name</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>tagName</name> <init>= <expr><name><name>pCreateReq</name><operator>-&gt;</operator><name>ctb</name><operator>.</operator><name>tagName</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>id</name> <init>= <expr><name><name>pCreateReq</name><operator>-&gt;</operator><name>uid</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>tagNum</name> <init>= <expr><name><name>pCreateReq</name><operator>-&gt;</operator><name>ctb</name><operator>.</operator><name>tagNum</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>tableName</name> <init>= <expr><call><name>cJSON_CreateString</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><literal type="string">"tableName"</literal></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>using</name> <init>= <expr><call><name>cJSON_CreateString</name><argument_list>(<argument><expr><name>sname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><literal type="string">"using"</literal></expr></argument>, <argument><expr><name>using</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>tagNumJson</name> <init>= <expr><call><name>cJSON_CreateNumber</name><argument_list>(<argument><expr><name>tagNum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><literal type="string">"tagNum"</literal></expr></argument>, <argument><expr><name>tagNumJson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//  cJSON* version = cJSON_CreateNumber(1);</comment>
  <comment type="line">//  cJSON_AddItemToObject(json, "version", version);</comment>

  <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type>  <name>tags</name> <init>= <expr><call><name>cJSON_CreateArray</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pTagVals</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tTagToValArray</name><argument_list>(<argument><expr><name>pTag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTagVals</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tTagIsJson</name><argument_list>(<argument><expr><name>pTag</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>STag</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>(</operator><name>STag</name><operator>*</operator><operator>)</operator><name>pTag</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>nTag</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <goto>goto <name>end</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>    <name>pJson</name> <init>= <expr><call><name>parseTagDatatoJson</name><argument_list>(<argument><expr><name>pTag</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type>   <name>tag</name> <init>= <expr><call><name>cJSON_CreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>STagVal</name><modifier>*</modifier></type> <name>pTagVal</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pTagVals</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>  <name>ptname</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>tagName</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>tname</name> <init>= <expr><call><name>cJSON_CreateString</name><argument_list>(<argument><expr><name>ptname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><name>tname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//    cJSON* cid_ = cJSON_CreateString("");</comment>
    <comment type="line">//    cJSON_AddItemToObject(tag, "cid", cid_);</comment>
    <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>ttype</name> <init>= <expr><call><name>cJSON_CreateNumber</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_JSON</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>, <argument><expr><name>ttype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>tvalue</name> <init>= <expr><call><name>cJSON_CreateString</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><literal type="string">"value"</literal></expr></argument>, <argument><expr><name>tvalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddItemToArray</name><argument_list>(<argument><expr><name>tags</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pTagVals</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STagVal</name><modifier>*</modifier></type> <name>pTagVal</name> <init>= <expr><operator>(</operator><name>STagVal</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pTagVals</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>tag</name> <init>= <expr><call><name>cJSON_CreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>  <name>ptname</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>tagName</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>tname</name> <init>= <expr><call><name>cJSON_CreateString</name><argument_list>(<argument><expr><name>ptname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><name>tname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//    cJSON* cid = cJSON_CreateNumber(pTagVal-&gt;cid);</comment>
    <comment type="line">//    cJSON_AddItemToObject(tag, "cid", cid);</comment>
    <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>ttype</name> <init>= <expr><call><name>cJSON_CreateNumber</name><argument_list>(<argument><expr><name><name>pTagVal</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>, <argument><expr><name>ttype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>tvalue</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pTagVal</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>buf</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>pTagVal</name><operator>-&gt;</operator><name>nData</name></name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>dataConverToStr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>pTagVal</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>pTagVal</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pTagVal</name><operator>-&gt;</operator><name>nData</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>tvalue</name> <operator>=</operator> <call><name>cJSON_CreateString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>double</name></type> <name>val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>GET_TYPED_DATA</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>double</name></expr></argument>, <argument><expr><name><name>pTagVal</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTagVal</name><operator>-&gt;</operator><name>i64</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>tvalue</name> <operator>=</operator> <call><name>cJSON_CreateNumber</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><literal type="string">"value"</literal></expr></argument>, <argument><expr><name>tvalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddItemToArray</name><argument_list>(<argument><expr><name>tags</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

<label><name>end</name>:</label>
  <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><literal type="string">"tags"</literal></expr></argument>, <argument><expr><name>tags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pTagVals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>buildCreateCTableJson</name><parameter_list>(<parameter><decl><type><name>SVCreateTbReq</name><modifier>*</modifier></type> <name>pCreateReq</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>nReqs</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>  <name>string</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>json</name> <init>= <expr><call><name>cJSON_CreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>json</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>type</name> <init>= <expr><call><name>cJSON_CreateString</name><argument_list>(<argument><expr><literal type="string">"create"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//  char cid[32] = {0};</comment>
  <comment type="line">//  sprintf(cid, "%"PRIi64, id);</comment>
  <comment type="line">//  cJSON* cid_ = cJSON_CreateString(cid);</comment>
  <comment type="line">//  cJSON_AddItemToObject(json, "id", cid_);</comment>

  <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>tableType</name> <init>= <expr><call><name>cJSON_CreateString</name><argument_list>(<argument><expr><literal type="string">"child"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><literal type="string">"tableType"</literal></expr></argument>, <argument><expr><name>tableType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>buildChildElement</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>pCreateReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>createList</name> <init>= <expr><call><name>cJSON_CreateArray</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>nReqs</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>nReqs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>create</name> <init>= <expr><call><name>cJSON_CreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>buildChildElement</name><argument_list>(<argument><expr><name>create</name></expr></argument>, <argument><expr><name>pCreateReq</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cJSON_AddItemToArray</name><argument_list>(<argument><expr><name>createList</name></expr></argument>, <argument><expr><name>create</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><literal type="string">"createList"</literal></expr></argument>, <argument><expr><name>createList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>string</name> <operator>=</operator> <call><name>cJSON_PrintUnformatted</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>string</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>processCreateTable</name><parameter_list>(<parameter><decl><type><name>SMqMetaRsp</name><modifier>*</modifier></type> <name>metaRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDecoder</name></type>           <name>decoder</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVCreateTbBatchReq</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVCreateTbReq</name><modifier>*</modifier></type>     <name>pCreateReq</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>              <name>string</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <comment type="line">// decode</comment>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>data</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name><name>metaRsp</name><operator>-&gt;</operator><name>metaRsp</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><name><name>metaRsp</name><operator>-&gt;</operator><name>metaRspLen</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeSVCreateTbBatchReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// loop to create table</comment>
  <if_stmt><if>if <condition>(<expr><name><name>req</name><operator>.</operator><name>nReqs</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pCreateReq</name> <operator>=</operator> <name><name>req</name><operator>.</operator><name>pReqs</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pCreateReq</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_CHILD_TABLE</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>string</name> <operator>=</operator> <call><name>buildCreateCTableJson</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>pReqs</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>nReqs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pCreateReq</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_NORMAL_TABLE</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>string</name> <operator>=</operator>
          <call><name>buildCreateTableJson</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCreateReq</name><operator>-&gt;</operator><name>ntb</name><operator>.</operator><name>schemaRow</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>pCreateReq</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pCreateReq</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><name>TSDB_NORMAL_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>_exit</name>:</label>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iReq</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iReq</name> <operator>&lt;</operator> <name><name>req</name><operator>.</operator><name>nReqs</name></name></expr>;</condition> <incr><expr><name>iReq</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>pCreateReq</name> <operator>=</operator> <name><name>req</name><operator>.</operator><name>pReqs</name></name> <operator>+</operator> <name>iReq</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pCreateReq</name><operator>-&gt;</operator><name>comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pCreateReq</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_CHILD_TABLE</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pCreateReq</name><operator>-&gt;</operator><name>ctb</name><operator>.</operator><name>tagName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>string</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>processAutoCreateTable</name><parameter_list>(<parameter><decl><type><name>STaosxRsp</name><modifier>*</modifier></type> <name>rsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>rsp</name><operator>-&gt;</operator><name>createTableNum</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SDecoder</name><modifier>*</modifier></type>      <name>decoder</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>rsp</name><operator>-&gt;</operator><name>createTableNum</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDecoder</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVCreateTbReq</name><modifier>*</modifier></type> <name>pCreateReq</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>rsp</name><operator>-&gt;</operator><name>createTableNum</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVCreateTbReq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>          <name>string</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// loop to create table</comment>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iReq</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iReq</name> <operator>&lt;</operator> <name><name>rsp</name><operator>-&gt;</operator><name>createTableNum</name></name></expr>;</condition> <incr><expr><name>iReq</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <comment type="line">// decode</comment>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type>   <name>data</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>rsp</name><operator>-&gt;</operator><name>createTableReq</name></name></expr></argument>, <argument><expr><name>iReq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>len</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>rsp</name><operator>-&gt;</operator><name>createTableLen</name></name></expr></argument>, <argument><expr><name>iReq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>decoder</name><index>[<expr><name>iReq</name></expr>]</index></name></expr></argument>, <argument><expr><operator>*</operator><name>data</name></expr></argument>, <argument><expr><operator>*</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>tDecodeSVCreateTbReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>decoder</name><index>[<expr><name>iReq</name></expr>]</index></name></expr></argument>, <argument><expr><name>pCreateReq</name> <operator>+</operator> <name>iReq</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <goto>goto <name>_exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pCreateReq</name><index>[<expr><name>iReq</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>TSDB_CHILD_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name>string</name> <operator>=</operator> <call><name>buildCreateCTableJson</name><argument_list>(<argument><expr><name>pCreateReq</name></expr></argument>, <argument><expr><name><name>rsp</name><operator>-&gt;</operator><name>createTableNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rsp</name><operator>-&gt;</operator><name>createTableNum</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>decoder</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pCreateReq</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pCreateReq</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>TSDB_CHILD_TABLE</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pCreateReq</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>ctb</name><operator>.</operator><name>tagName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>decoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pCreateReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>string</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>processAlterTable</name><parameter_list>(<parameter><decl><type><name>SMqMetaRsp</name><modifier>*</modifier></type> <name>metaRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDecoder</name></type>     <name>decoder</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVAlterTbReq</name></type> <name>vAlterTbReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>        <name>string</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type>       <name>json</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// decode</comment>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>data</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name><name>metaRsp</name><operator>-&gt;</operator><name>metaRsp</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><name><name>metaRsp</name><operator>-&gt;</operator><name>metaRspLen</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeSVAlterTbReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vAlterTbReq</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>json</name> <operator>=</operator> <call><name>cJSON_CreateObject</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>json</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>type</name> <init>= <expr><call><name>cJSON_CreateString</name><argument_list>(<argument><expr><literal type="string">"alter"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//  cJSON* uid = cJSON_CreateNumber(id);</comment>
  <comment type="line">//  cJSON_AddItemToObject(json, "uid", uid);</comment>
  <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>tableType</name> <init>= <expr><call><name>cJSON_CreateString</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>vAlterTbReq</name><operator>.</operator><name>action</name></name> <operator>==</operator> <name>TSDB_ALTER_TABLE_UPDATE_TAG_VAL</name></expr> ?</condition><then> <expr><literal type="string">"child"</literal></expr> </then><else>: <expr><literal type="string">"normal"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><literal type="string">"tableType"</literal></expr></argument>, <argument><expr><name>tableType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>tableName</name> <init>= <expr><call><name>cJSON_CreateString</name><argument_list>(<argument><expr><name><name>vAlterTbReq</name><operator>.</operator><name>tbName</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><literal type="string">"tableName"</literal></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>alterType</name> <init>= <expr><call><name>cJSON_CreateNumber</name><argument_list>(<argument><expr><name><name>vAlterTbReq</name><operator>.</operator><name>action</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><literal type="string">"alterType"</literal></expr></argument>, <argument><expr><name>alterType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <switch>switch <condition>(<expr><name><name>vAlterTbReq</name><operator>.</operator><name>action</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_ALTER_TABLE_ADD_COLUMN</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>colName</name> <init>= <expr><call><name>cJSON_CreateString</name><argument_list>(<argument><expr><name><name>vAlterTbReq</name><operator>.</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><literal type="string">"colName"</literal></expr></argument>, <argument><expr><name>colName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>colType</name> <init>= <expr><call><name>cJSON_CreateNumber</name><argument_list>(<argument><expr><name><name>vAlterTbReq</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><literal type="string">"colType"</literal></expr></argument>, <argument><expr><name>colType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>vAlterTbReq</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>length</name> <init>= <expr><name><name>vAlterTbReq</name><operator>.</operator><name>bytes</name></name> <operator>-</operator> <name>VARSTR_HEADER_SIZE</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type>  <name>cbytes</name> <init>= <expr><call><name>cJSON_CreateNumber</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><literal type="string">"colLength"</literal></expr></argument>, <argument><expr><name>cbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>vAlterTbReq</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_NCHAR</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>length</name> <init>= <expr><operator>(</operator><name><name>vAlterTbReq</name><operator>.</operator><name>bytes</name></name> <operator>-</operator> <name>VARSTR_HEADER_SIZE</name><operator>)</operator> <operator>/</operator> <name>TSDB_NCHAR_SIZE</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type>  <name>cbytes</name> <init>= <expr><call><name>cJSON_CreateNumber</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><literal type="string">"colLength"</literal></expr></argument>, <argument><expr><name>cbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_ALTER_TABLE_DROP_COLUMN</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>colName</name> <init>= <expr><call><name>cJSON_CreateString</name><argument_list>(<argument><expr><name><name>vAlterTbReq</name><operator>.</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><literal type="string">"colName"</literal></expr></argument>, <argument><expr><name>colName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_ALTER_TABLE_UPDATE_COLUMN_BYTES</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>colName</name> <init>= <expr><call><name>cJSON_CreateString</name><argument_list>(<argument><expr><name><name>vAlterTbReq</name><operator>.</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><literal type="string">"colName"</literal></expr></argument>, <argument><expr><name>colName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>colType</name> <init>= <expr><call><name>cJSON_CreateNumber</name><argument_list>(<argument><expr><name><name>vAlterTbReq</name><operator>.</operator><name>colModType</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><literal type="string">"colType"</literal></expr></argument>, <argument><expr><name>colType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>vAlterTbReq</name><operator>.</operator><name>colModType</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>length</name> <init>= <expr><name><name>vAlterTbReq</name><operator>.</operator><name>colModBytes</name></name> <operator>-</operator> <name>VARSTR_HEADER_SIZE</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type>  <name>cbytes</name> <init>= <expr><call><name>cJSON_CreateNumber</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><literal type="string">"colLength"</literal></expr></argument>, <argument><expr><name>cbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>vAlterTbReq</name><operator>.</operator><name>colModType</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_NCHAR</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>length</name> <init>= <expr><operator>(</operator><name><name>vAlterTbReq</name><operator>.</operator><name>colModBytes</name></name> <operator>-</operator> <name>VARSTR_HEADER_SIZE</name><operator>)</operator> <operator>/</operator> <name>TSDB_NCHAR_SIZE</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type>  <name>cbytes</name> <init>= <expr><call><name>cJSON_CreateNumber</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><literal type="string">"colLength"</literal></expr></argument>, <argument><expr><name>cbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_ALTER_TABLE_UPDATE_COLUMN_NAME</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>colName</name> <init>= <expr><call><name>cJSON_CreateString</name><argument_list>(<argument><expr><name><name>vAlterTbReq</name><operator>.</operator><name>colName</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><literal type="string">"colName"</literal></expr></argument>, <argument><expr><name>colName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>colNewName</name> <init>= <expr><call><name>cJSON_CreateString</name><argument_list>(<argument><expr><name><name>vAlterTbReq</name><operator>.</operator><name>colNewName</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><literal type="string">"colNewName"</literal></expr></argument>, <argument><expr><name>colNewName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TSDB_ALTER_TABLE_UPDATE_TAG_VAL</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>tagName</name> <init>= <expr><call><name>cJSON_CreateString</name><argument_list>(<argument><expr><name><name>vAlterTbReq</name><operator>.</operator><name>tagName</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><literal type="string">"colName"</literal></expr></argument>, <argument><expr><name>tagName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>bool</name></type> <name>isNull</name> <init>= <expr><name><name>vAlterTbReq</name><operator>.</operator><name>isNull</name></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>vAlterTbReq</name><operator>.</operator><name>tagType</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_JSON</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>STag</name><modifier>*</modifier></type> <name>jsonTag</name> <init>= <expr><operator>(</operator><name>STag</name><operator>*</operator><operator>)</operator><name><name>vAlterTbReq</name><operator>.</operator><name>pTagVal</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>jsonTag</name><operator>-&gt;</operator><name>nTag</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>isNull</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isNull</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>vAlterTbReq</name><operator>.</operator><name>tagType</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_JSON</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>tTagIsJson</name><argument_list>(<argument><expr><name><name>vAlterTbReq</name><operator>.</operator><name>pTagVal</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>parseTagDatatoJson</name><argument_list>(<argument><expr><name><name>vAlterTbReq</name><operator>.</operator><name>pTagVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>vAlterTbReq</name><operator>.</operator><name>nTagVal</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>dataConverToStr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>vAlterTbReq</name><operator>.</operator><name>tagType</name></name></expr></argument>, <argument><expr><name><name>vAlterTbReq</name><operator>.</operator><name>pTagVal</name></name></expr></argument>, <argument><expr><name><name>vAlterTbReq</name><operator>.</operator><name>nTagVal</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>colValue</name> <init>= <expr><call><name>cJSON_CreateString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><literal type="string">"colValue"</literal></expr></argument>, <argument><expr><name>colValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>isNullCJson</name> <init>= <expr><call><name>cJSON_CreateBool</name><argument_list>(<argument><expr><name>isNull</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><literal type="string">"colValueNull"</literal></expr></argument>, <argument><expr><name>isNullCJson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
  <expr_stmt><expr><name>string</name> <operator>=</operator> <call><name>cJSON_PrintUnformatted</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>string</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>processDropSTable</name><parameter_list>(<parameter><decl><type><name>SMqMetaRsp</name><modifier>*</modifier></type> <name>metaRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDecoder</name></type>     <name>decoder</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVDropStbReq</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>        <name>string</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type>       <name>json</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// decode</comment>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>data</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name><name>metaRsp</name><operator>-&gt;</operator><name>metaRsp</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><name><name>metaRsp</name><operator>-&gt;</operator><name>metaRspLen</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeSVDropStbReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>json</name> <operator>=</operator> <call><name>cJSON_CreateObject</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>json</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>type</name> <init>= <expr><call><name>cJSON_CreateString</name><argument_list>(<argument><expr><literal type="string">"drop"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>tableType</name> <init>= <expr><call><name>cJSON_CreateString</name><argument_list>(<argument><expr><literal type="string">"super"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><literal type="string">"tableType"</literal></expr></argument>, <argument><expr><name>tableType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>tableName</name> <init>= <expr><call><name>cJSON_CreateString</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><literal type="string">"tableName"</literal></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>string</name> <operator>=</operator> <call><name>cJSON_PrintUnformatted</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>string</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>processDropTable</name><parameter_list>(<parameter><decl><type><name>SMqMetaRsp</name><modifier>*</modifier></type> <name>metaRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDecoder</name></type>         <name>decoder</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVDropTbBatchReq</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>            <name>string</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type>           <name>json</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// decode</comment>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>data</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name><name>metaRsp</name><operator>-&gt;</operator><name>metaRsp</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><name><name>metaRsp</name><operator>-&gt;</operator><name>metaRspLen</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeSVDropTbBatchReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>json</name> <operator>=</operator> <call><name>cJSON_CreateObject</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>json</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>type</name> <init>= <expr><call><name>cJSON_CreateString</name><argument_list>(<argument><expr><literal type="string">"drop"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//  cJSON* uid = cJSON_CreateNumber(id);</comment>
  <comment type="line">//  cJSON_AddItemToObject(json, "uid", uid);</comment>
  <comment type="line">//  cJSON* tableType = cJSON_CreateString("normal");</comment>
  <comment type="line">//  cJSON_AddItemToObject(json, "tableType", tableType);</comment>

  <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>tableNameList</name> <init>= <expr><call><name>cJSON_CreateArray</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iReq</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iReq</name> <operator>&lt;</operator> <name><name>req</name><operator>.</operator><name>nReqs</name></name></expr>;</condition> <incr><expr><name>iReq</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SVDropTbReq</name><modifier>*</modifier></type> <name>pDropTbReq</name> <init>= <expr><name><name>req</name><operator>.</operator><name>pReqs</name></name> <operator>+</operator> <name>iReq</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>cJSON</name><modifier>*</modifier></type> <name>tableName</name> <init>= <expr><call><name>cJSON_CreateString</name><argument_list>(<argument><expr><name><name>pDropTbReq</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>cJSON_AddItemToArray</name><argument_list>(<argument><expr><name>tableNameList</name></expr></argument>, <argument><expr><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>cJSON_AddItemToObject</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><literal type="string">"tableNameList"</literal></expr></argument>, <argument><expr><name>tableNameList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>string</name> <operator>=</operator> <call><name>cJSON_PrintUnformatted</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <expr_stmt><expr><call><name>cJSON_Delete</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>string</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>taosCreateStb</name><parameter_list>(<parameter><decl><type><name>TAOS</name><modifier>*</modifier></type> <name>taos</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>meta</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>metaLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVCreateStbReq</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDecoder</name></type>       <name>coder</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMCreateStbReq</name></type> <name>pReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRequestObj</name><modifier>*</modifier></type>   <name>pRequest</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildRequest</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name>taos</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pRequest</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>syncQuery</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pRequest</name><operator>-&gt;</operator><name>pDb</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_PAR_DB_NOT_SPECIFIED</name></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// decode and process req</comment>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>data</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>meta</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><name>metaLen</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeSVCreateStbReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// build create stable</comment>
  <expr_stmt><expr><name><name>pReq</name><operator>.</operator><name>pColumns</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>schemaRow</name><operator>.</operator><name>nCols</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SField</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>req</name><operator>.</operator><name>schemaRow</name><operator>.</operator><name>nCols</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSchema</name><modifier>*</modifier></type> <name>pSchema</name> <init>= <expr><name><name>req</name><operator>.</operator><name>schemaRow</name><operator>.</operator><name>pSchema</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SField</name></type>   <name>field</name> <init>= <expr><block>{<expr><operator>.</operator><name>type</name> <operator>=</operator> <name><name>pSchema</name><operator>-&gt;</operator><name>type</name></name></expr>, <expr><operator>.</operator><name>bytes</name> <operator>=</operator> <name><name>pSchema</name><operator>-&gt;</operator><name>bytes</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>field</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pReq</name><operator>.</operator><name>pColumns</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name><name>pReq</name><operator>.</operator><name>pTags</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>schemaTag</name><operator>.</operator><name>nCols</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SField</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>req</name><operator>.</operator><name>schemaTag</name><operator>.</operator><name>nCols</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSchema</name><modifier>*</modifier></type> <name>pSchema</name> <init>= <expr><name><name>req</name><operator>.</operator><name>schemaTag</name><operator>.</operator><name>pSchema</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SField</name></type>   <name>field</name> <init>= <expr><block>{<expr><operator>.</operator><name>type</name> <operator>=</operator> <name><name>pSchema</name><operator>-&gt;</operator><name>type</name></name></expr>, <expr><operator>.</operator><name>bytes</name> <operator>=</operator> <name><name>pSchema</name><operator>-&gt;</operator><name>bytes</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>field</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>pSchema</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pReq</name><operator>.</operator><name>pTags</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pReq</name><operator>.</operator><name>colVer</name></name> <operator>=</operator> <name><name>req</name><operator>.</operator><name>schemaRow</name><operator>.</operator><name>version</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>.</operator><name>tagVer</name></name> <operator>=</operator> <name><name>req</name><operator>.</operator><name>schemaTag</name><operator>.</operator><name>version</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>.</operator><name>numOfColumns</name></name> <operator>=</operator> <name><name>req</name><operator>.</operator><name>schemaRow</name><operator>.</operator><name>nCols</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>.</operator><name>numOfTags</name></name> <operator>=</operator> <name><name>req</name><operator>.</operator><name>schemaTag</name><operator>.</operator><name>nCols</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>.</operator><name>commentLen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>.</operator><name>suid</name></name> <operator>=</operator> <name><name>req</name><operator>.</operator><name>suid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>.</operator><name>source</name></name> <operator>=</operator> <name>TD_REQ_FROM_TAOX</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>.</operator><name>igExists</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>STscObj</name><modifier>*</modifier></type> <name>pTscObj</name> <init>= <expr><name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SName</name></type>    <name>tableName</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameExtractFullName</name><argument_list>(<argument><expr><call><name>toName</name><argument_list>(<argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>acctId</name></name></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>pDb</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tableName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pReq</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SCmdMsgInfo</name></type> <name>pCmdMsg</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pCmdMsg</name><operator>.</operator><name>epSet</name></name> <operator>=</operator> <call><name>getEpSet_s</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>mgmtEp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCmdMsg</name><operator>.</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_MND_CREATE_STB</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCmdMsg</name><operator>.</operator><name>msgLen</name></name> <operator>=</operator> <call><name>tSerializeSMCreateStbReq</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCmdMsg</name><operator>.</operator><name>pMsg</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name><name>pCmdMsg</name><operator>.</operator><name>msgLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pCmdMsg</name><operator>.</operator><name>pMsg</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tSerializeSMCreateStbReq</name><argument_list>(<argument><expr><name><name>pCmdMsg</name><operator>.</operator><name>pMsg</name></name></expr></argument>, <argument><expr><name><name>pCmdMsg</name><operator>.</operator><name>msgLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SQuery</name></type> <name>pQuery</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pQuery</name><operator>.</operator><name>execMode</name></name> <operator>=</operator> <name>QUERY_EXEC_MODE_RPC</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pQuery</name><operator>.</operator><name>pCmdMsg</name></name> <operator>=</operator> <operator>&amp;</operator><name>pCmdMsg</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pQuery</name><operator>.</operator><name>msgType</name></name> <operator>=</operator> <name><name>pQuery</name><operator>.</operator><name>pCmdMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pQuery</name><operator>.</operator><name>stableQuery</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>launchQueryImpl</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pQuery</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pRequest</name><operator>-&gt;</operator><name>code</name></name> <operator>==</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCatalog</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>catalogGetHandle</name><argument_list>(<argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>clusterId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCatalog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>catalogRemoveTableMeta</name><argument_list>(<argument><expr><name>pCatalog</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>code</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pCmdMsg</name><operator>.</operator><name>pMsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
  <expr_stmt><expr><call><name>destroyRequest</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tFreeSMCreateStbReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>taosDropStb</name><parameter_list>(<parameter><decl><type><name>TAOS</name><modifier>*</modifier></type> <name>taos</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>meta</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>metaLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVDropStbReq</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDecoder</name></type>     <name>coder</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMDropStbReq</name></type> <name>pReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRequestObj</name><modifier>*</modifier></type> <name>pRequest</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildRequest</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name>taos</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pRequest</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>syncQuery</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pRequest</name><operator>-&gt;</operator><name>pDb</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_PAR_DB_NOT_SPECIFIED</name></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// decode and process req</comment>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>data</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>meta</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><name>metaLen</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeSVDropStbReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// build drop stable</comment>
  <expr_stmt><expr><name><name>pReq</name><operator>.</operator><name>igNotExists</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>.</operator><name>source</name></name> <operator>=</operator> <name>TD_REQ_FROM_TAOX</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReq</name><operator>.</operator><name>suid</name></name> <operator>=</operator> <name><name>req</name><operator>.</operator><name>suid</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>STscObj</name><modifier>*</modifier></type> <name>pTscObj</name> <init>= <expr><name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SName</name></type>    <name>tableName</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tNameExtractFullName</name><argument_list>(<argument><expr><call><name>toName</name><argument_list>(<argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>acctId</name></name></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>pDb</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tableName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pReq</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SCmdMsgInfo</name></type> <name>pCmdMsg</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pCmdMsg</name><operator>.</operator><name>epSet</name></name> <operator>=</operator> <call><name>getEpSet_s</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>mgmtEp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCmdMsg</name><operator>.</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_MND_DROP_STB</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCmdMsg</name><operator>.</operator><name>msgLen</name></name> <operator>=</operator> <call><name>tSerializeSMDropStbReq</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCmdMsg</name><operator>.</operator><name>pMsg</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name><name>pCmdMsg</name><operator>.</operator><name>msgLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pCmdMsg</name><operator>.</operator><name>pMsg</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tSerializeSMDropStbReq</name><argument_list>(<argument><expr><name><name>pCmdMsg</name><operator>.</operator><name>pMsg</name></name></expr></argument>, <argument><expr><name><name>pCmdMsg</name><operator>.</operator><name>msgLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SQuery</name></type> <name>pQuery</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pQuery</name><operator>.</operator><name>execMode</name></name> <operator>=</operator> <name>QUERY_EXEC_MODE_RPC</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pQuery</name><operator>.</operator><name>pCmdMsg</name></name> <operator>=</operator> <operator>&amp;</operator><name>pCmdMsg</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pQuery</name><operator>.</operator><name>msgType</name></name> <operator>=</operator> <name><name>pQuery</name><operator>.</operator><name>pCmdMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pQuery</name><operator>.</operator><name>stableQuery</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>launchQueryImpl</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pQuery</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pRequest</name><operator>-&gt;</operator><name>code</name></name> <operator>==</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCatalog</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>catalogGetHandle</name><argument_list>(<argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>clusterId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCatalog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>catalogRemoveTableMeta</name><argument_list>(<argument><expr><name>pCatalog</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>code</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pCmdMsg</name><operator>.</operator><name>pMsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
  <expr_stmt><expr><call><name>destroyRequest</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>SVgroupCreateTableBatch</name> <block>{
  <decl_stmt><decl><type><name>SVCreateTbBatchReq</name></type> <name>req</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVgroupInfo</name></type>        <name>info</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>               <name><name>dbName</name><index>[<expr><name>TSDB_DB_NAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>SVgroupCreateTableBatch</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>destroyCreateTbReqBatch</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVgroupCreateTableBatch</name><modifier>*</modifier></type> <name>pTbBatch</name> <init>= <expr><operator>(</operator><name>SVgroupCreateTableBatch</name><operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pTbBatch</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>pArray</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>taosCreateTable</name><parameter_list>(<parameter><decl><type><name>TAOS</name><modifier>*</modifier></type> <name>taos</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>meta</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>metaLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVCreateTbBatchReq</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDecoder</name></type>           <name>coder</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>            <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRequestObj</name><modifier>*</modifier></type>       <name>pRequest</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQuery</name><modifier>*</modifier></type>            <name>pQuery</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHashObj</name><modifier>*</modifier></type>          <name>pVgroupHashmap</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildRequest</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name>taos</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pRequest</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>syncQuery</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pRequest</name><operator>-&gt;</operator><name>pDb</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_PAR_DB_NOT_SPECIFIED</name></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// decode and process req</comment>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>data</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>meta</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><name>metaLen</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeSVCreateTbBatchReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STscObj</name><modifier>*</modifier></type> <name>pTscObj</name> <init>= <expr><name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SVCreateTbReq</name><modifier>*</modifier></type> <name>pCreateReq</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCatalog</name><modifier>*</modifier></type>      <name>pCatalog</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogGetHandle</name><argument_list>(<argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>clusterId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCatalog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pVgroupHashmap</name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_INT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pVgroupHashmap</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosHashSetFreeFp</name><argument_list>(<argument><expr><name>pVgroupHashmap</name></expr></argument>, <argument><expr><name>destroyCreateTbReqBatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SRequestConnInfo</name></type> <name>conn</name> <init>= <expr><block>{<expr><operator>.</operator><name>pTrans</name> <operator>=</operator> <name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>pTransporter</name></name></expr>,
                           <expr><operator>.</operator><name>requestId</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr>,
                           <expr><operator>.</operator><name>requestObjRefId</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>self</name></name></expr>,
                           <expr><operator>.</operator><name>mgmtEps</name> <operator>=</operator> <macro><name>getEpSet_s</name><argument_list>(<argument>&amp;pTscObj-&gt;pAppInfo-&gt;mgmtEp</argument>)</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>tableList</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>nReqs</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SName</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// loop to create table</comment>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iReq</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iReq</name> <operator>&lt;</operator> <name><name>req</name><operator>.</operator><name>nReqs</name></name></expr>;</condition> <incr><expr><name>iReq</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>pCreateReq</name> <operator>=</operator> <name><name>req</name><operator>.</operator><name>pReqs</name></name> <operator>+</operator> <name>iReq</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SVgroupInfo</name></type> <name>pInfo</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SName</name></type>       <name>pName</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>toName</name><argument_list>(<argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>acctId</name></name></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>pDb</name></name></expr></argument>, <argument><expr><name><name>pCreateReq</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogGetTableHashVgroup</name><argument_list>(<argument><expr><name>pCatalog</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <goto>goto <name>end</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>tableList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pCreateReq</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>TD_CREATE_IF_NOT_EXISTS</name></expr>;</expr_stmt>
    <comment type="line">// change tag cid to new cid</comment>
    <if_stmt><if>if <condition>(<expr><name><name>pCreateReq</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_CHILD_TABLE</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>STableMeta</name><modifier>*</modifier></type> <name>pTableMeta</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SName</name></type>       <name>sName</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>toName</name><argument_list>(<argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>acctId</name></name></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>pDb</name></name></expr></argument>, <argument><expr><name><name>pCreateReq</name><operator>-&gt;</operator><name>ctb</name><operator>.</operator><name>stbName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogGetTableMeta</name><argument_list>(<argument><expr><name>pCatalog</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTableMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"taosCreateTable:catalogGetTableMeta failed. table name: %s"</literal></expr></argument>, <argument><expr><name><name>pCreateReq</name><operator>-&gt;</operator><name>ctb</name><operator>.</operator><name>stbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>end</name>;</goto>
      </block_content>}</block></if></if_stmt>

      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pCreateReq</name><operator>-&gt;</operator><name>ctb</name><operator>.</operator><name>tagName</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>tName</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pCreateReq</name><operator>-&gt;</operator><name>ctb</name><operator>.</operator><name>tagName</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>numOfColumns</name></name></expr></init></decl>;</init>
             <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>pTableMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>numOfColumns</name></name> <operator>+</operator> <name><name>pTableMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>numOfTags</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
          <decl_stmt><decl><type><name>SSchema</name><modifier>*</modifier></type> <name>tag</name> <init>= <expr><operator>&amp;</operator><name><name>pTableMeta</name><operator>-&gt;</operator><name>schema</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>tag</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>tName</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>tag</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>TSDB_DATA_TYPE_JSON</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>tTagSetCid</name><argument_list>(<argument><expr><operator>(</operator><name>STag</name><operator>*</operator><operator>)</operator><name><name>pCreateReq</name><operator>-&gt;</operator><name>ctb</name><operator>.</operator><name>pTag</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pTableMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SVgroupCreateTableBatch</name><modifier>*</modifier></type> <name>pTableBatch</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name>pVgroupHashmap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pInfo</name><operator>.</operator><name>vgId</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pTableBatch</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SVgroupCreateTableBatch</name></type> <name>tBatch</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>tBatch</name><operator>.</operator><name>info</name></name> <operator>=</operator> <name>pInfo</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>tBatch</name><operator>.</operator><name>dbName</name></name></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>pDb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>tBatch</name><operator>.</operator><name>req</name><operator>.</operator><name>pArray</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>SVCreateTbReq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>tBatch</name><operator>.</operator><name>req</name><operator>.</operator><name>pArray</name></name></expr></argument>, <argument><expr><name>pCreateReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name>pVgroupHashmap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pInfo</name><operator>.</operator><name>vgId</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>tBatch</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tBatch</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// add to the correct vgroup</comment>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pTableBatch</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>pArray</name></name></expr></argument>, <argument><expr><name>pCreateReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pBufArray</name> <init>= <expr><call><name>serializeVgroupsCreateTableBatch</name><argument_list>(<argument><expr><name>pVgroupHashmap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pBufArray</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pQuery</name> <operator>=</operator> <operator>(</operator><name>SQuery</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_QUERY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>execMode</name></name> <operator>=</operator> <name>QUERY_EXEC_MODE_SCHEDULE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_VND_CREATE_TABLE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>stableQuery</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name> <operator>=</operator> <call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_CREATE_TABLE_STMT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>rewriteToVnodeModifyOpStmt</name><argument_list>(<argument><expr><name>pQuery</name></expr></argument>, <argument><expr><name>pBufArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>launchQueryImpl</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>, <argument><expr><name>pQuery</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pRequest</name><operator>-&gt;</operator><name>code</name></name> <operator>==</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>removeMeta</name><argument_list>(<argument><expr><name>pTscObj</name></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>tableList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>code</name></name></expr>;</expr_stmt>

<label><name>end</name>:</label>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iReq</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iReq</name> <operator>&lt;</operator> <name><name>req</name><operator>.</operator><name>nReqs</name></name></expr>;</condition> <incr><expr><name>iReq</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>pCreateReq</name> <operator>=</operator> <name><name>req</name><operator>.</operator><name>pReqs</name></name> <operator>+</operator> <name>iReq</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pCreateReq</name><operator>-&gt;</operator><name>comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pCreateReq</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_CHILD_TABLE</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pCreateReq</name><operator>-&gt;</operator><name>ctb</name><operator>.</operator><name>tagName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name>pVgroupHashmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>destroyRequest</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>qDestroyQuery</name><argument_list>(<argument><expr><name>pQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>SVgroupDropTableBatch</name> <block>{
  <decl_stmt><decl><type><name>SVDropTbBatchReq</name></type> <name>req</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVgroupInfo</name></type>      <name>info</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>             <name><name>dbName</name><index>[<expr><name>TSDB_DB_NAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>SVgroupDropTableBatch</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>destroyDropTbReqBatch</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVgroupDropTableBatch</name><modifier>*</modifier></type> <name>pTbBatch</name> <init>= <expr><operator>(</operator><name>SVgroupDropTableBatch</name><operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pTbBatch</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>pArray</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>taosDropTable</name><parameter_list>(<parameter><decl><type><name>TAOS</name><modifier>*</modifier></type> <name>taos</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>meta</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>metaLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVDropTbBatchReq</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDecoder</name></type>         <name>coder</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRequestObj</name><modifier>*</modifier></type>     <name>pRequest</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQuery</name><modifier>*</modifier></type>          <name>pQuery</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHashObj</name><modifier>*</modifier></type>        <name>pVgroupHashmap</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildRequest</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name>taos</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pRequest</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>syncQuery</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pRequest</name><operator>-&gt;</operator><name>pDb</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_PAR_DB_NOT_SPECIFIED</name></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// decode and process req</comment>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>data</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>meta</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><name>metaLen</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeSVDropTbBatchReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STscObj</name><modifier>*</modifier></type> <name>pTscObj</name> <init>= <expr><name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SVDropTbReq</name><modifier>*</modifier></type> <name>pDropReq</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCatalog</name><modifier>*</modifier></type>    <name>pCatalog</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogGetHandle</name><argument_list>(<argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>clusterId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCatalog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pVgroupHashmap</name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_INT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pVgroupHashmap</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosHashSetFreeFp</name><argument_list>(<argument><expr><name>pVgroupHashmap</name></expr></argument>, <argument><expr><name>destroyDropTbReqBatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SRequestConnInfo</name></type> <name>conn</name> <init>= <expr><block>{<expr><operator>.</operator><name>pTrans</name> <operator>=</operator> <name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>pTransporter</name></name></expr>,
                           <expr><operator>.</operator><name>requestId</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr>,
                           <expr><operator>.</operator><name>requestObjRefId</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>self</name></name></expr>,
                           <expr><operator>.</operator><name>mgmtEps</name> <operator>=</operator> <macro><name>getEpSet_s</name><argument_list>(<argument>&amp;pTscObj-&gt;pAppInfo-&gt;mgmtEp</argument>)</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>tableList</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>nReqs</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SName</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// loop to create table</comment>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iReq</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iReq</name> <operator>&lt;</operator> <name><name>req</name><operator>.</operator><name>nReqs</name></name></expr>;</condition> <incr><expr><name>iReq</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>pDropReq</name> <operator>=</operator> <name><name>req</name><operator>.</operator><name>pReqs</name></name> <operator>+</operator> <name>iReq</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pDropReq</name><operator>-&gt;</operator><name>igNotExists</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SVgroupInfo</name></type> <name>pInfo</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SName</name></type>       <name>pName</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>toName</name><argument_list>(<argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>acctId</name></name></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>pDb</name></name></expr></argument>, <argument><expr><name><name>pDropReq</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogGetTableHashVgroup</name><argument_list>(<argument><expr><name>pCatalog</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <goto>goto <name>end</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>tableList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SVgroupDropTableBatch</name><modifier>*</modifier></type> <name>pTableBatch</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name>pVgroupHashmap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pInfo</name><operator>.</operator><name>vgId</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pTableBatch</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SVgroupDropTableBatch</name></type> <name>tBatch</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>tBatch</name><operator>.</operator><name>info</name></name> <operator>=</operator> <name>pInfo</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>tBatch</name><operator>.</operator><name>req</name><operator>.</operator><name>pArray</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>TARRAY_MIN_SIZE</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVDropTbReq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>tBatch</name><operator>.</operator><name>req</name><operator>.</operator><name>pArray</name></name></expr></argument>, <argument><expr><name>pDropReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name>pVgroupHashmap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pInfo</name><operator>.</operator><name>vgId</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>tBatch</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tBatch</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// add to the correct vgroup</comment>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pTableBatch</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>pArray</name></name></expr></argument>, <argument><expr><name>pDropReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pBufArray</name> <init>= <expr><call><name>serializeVgroupsDropTableBatch</name><argument_list>(<argument><expr><name>pVgroupHashmap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pBufArray</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pQuery</name> <operator>=</operator> <operator>(</operator><name>SQuery</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_QUERY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>execMode</name></name> <operator>=</operator> <name>QUERY_EXEC_MODE_SCHEDULE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_VND_DROP_TABLE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>stableQuery</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name> <operator>=</operator> <call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_DROP_TABLE_STMT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>rewriteToVnodeModifyOpStmt</name><argument_list>(<argument><expr><name>pQuery</name></expr></argument>, <argument><expr><name>pBufArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>launchQueryImpl</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>, <argument><expr><name>pQuery</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pRequest</name><operator>-&gt;</operator><name>code</name></name> <operator>==</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>removeMeta</name><argument_list>(<argument><expr><name>pTscObj</name></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>tableList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>code</name></name></expr>;</expr_stmt>

<label><name>end</name>:</label>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name>pVgroupHashmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>destroyRequest</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>qDestroyQuery</name><argument_list>(<argument><expr><name>pQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// delete from db.tabl where ..       -&gt; delete from tabl where ..</comment>
<comment type="line">// delete from db    .tabl where ..   -&gt; delete from tabl where ..</comment>
<comment type="line">// static void getTbName(char *sql){</comment>
<comment type="line">//  char *ch = sql;</comment>
<comment type="line">//</comment>
<comment type="line">//  bool inBackQuote = false;</comment>
<comment type="line">//  int8_t dotIndex = 0;</comment>
<comment type="line">//  while(*ch != '\0'){</comment>
<comment type="line">//    if(!inBackQuote &amp;&amp; *ch == '`'){</comment>
<comment type="line">//      inBackQuote = true;</comment>
<comment type="line">//      ch++;</comment>
<comment type="line">//      continue;</comment>
<comment type="line">//    }</comment>
<comment type="line">//</comment>
<comment type="line">//    if(inBackQuote &amp;&amp; *ch == '`'){</comment>
<comment type="line">//      inBackQuote = false;</comment>
<comment type="line">//      ch++;</comment>
<comment type="line">//</comment>
<comment type="line">//      continue;</comment>
<comment type="line">//    }</comment>
<comment type="line">//</comment>
<comment type="line">//    if(!inBackQuote &amp;&amp; *ch == '.'){</comment>
<comment type="line">//      dotIndex ++;</comment>
<comment type="line">//      if(dotIndex == 2){</comment>
<comment type="line">//        memmove(sql, ch + 1, strlen(ch + 1) + 1);</comment>
<comment type="line">//        break;</comment>
<comment type="line">//      }</comment>
<comment type="line">//    }</comment>
<comment type="line">//    ch++;</comment>
<comment type="line">//  }</comment>
<comment type="line">//}</comment>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>taosDeleteData</name><parameter_list>(<parameter><decl><type><name>TAOS</name><modifier>*</modifier></type> <name>taos</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>meta</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>metaLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDeleteRes</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDecoder</name></type>   <name>coder</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// decode and process req</comment>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>data</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>meta</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><name>metaLen</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeDeleteRes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">//  getTbName(req.tableFName);</comment>
  <decl_stmt><decl><type><name>char</name></type> <name><name>sql</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"delete from `%s` where `%s` &gt;= %"</literal> <name>PRId64</name> <literal type="string">" and `%s` &lt;= %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>tableFName</name></name></expr></argument>,
           <argument><expr><name><name>req</name><operator>.</operator><name>tsColName</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>skey</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>tsColName</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>ekey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"delete sql:%s\n"</literal></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>TAOS_RES</name><modifier>*</modifier></type>    <name>res</name> <init>= <expr><call><name>taos_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRequestObj</name><modifier>*</modifier></type> <name>pRequest</name> <init>= <expr><operator>(</operator><name>SRequestObj</name><operator>*</operator><operator>)</operator><name>res</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>code</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>TSDB_CODE_PAR_TABLE_NOT_EXIST</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_SUCCESS</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>end</name>:</label>
  <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>taosAlterTable</name><parameter_list>(<parameter><decl><type><name>TAOS</name><modifier>*</modifier></type> <name>taos</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>meta</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>metaLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVAlterTbReq</name></type>   <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDecoder</name></type>       <name>coder</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRequestObj</name><modifier>*</modifier></type>   <name>pRequest</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQuery</name><modifier>*</modifier></type>        <name>pQuery</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>        <name>pArray</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVgDataBlocks</name><modifier>*</modifier></type> <name>pVgData</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildRequest</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name>taos</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pRequest</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>syncQuery</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pRequest</name><operator>-&gt;</operator><name>pDb</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_PAR_DB_NOT_SPECIFIED</name></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// decode and process req</comment>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>data</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>meta</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><name>metaLen</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeSVAlterTbReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// do not deal TSDB_ALTER_TABLE_UPDATE_OPTIONS</comment>
  <if_stmt><if>if <condition>(<expr><name><name>req</name><operator>.</operator><name>action</name></name> <operator>==</operator> <name>TSDB_ALTER_TABLE_UPDATE_OPTIONS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STscObj</name><modifier>*</modifier></type>  <name>pTscObj</name> <init>= <expr><name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCatalog</name><modifier>*</modifier></type> <name>pCatalog</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogGetHandle</name><argument_list>(<argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>clusterId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCatalog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SRequestConnInfo</name></type> <name>conn</name> <init>= <expr><block>{<expr><operator>.</operator><name>pTrans</name> <operator>=</operator> <name><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>pTransporter</name></name></expr>,
                           <expr><operator>.</operator><name>requestId</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr>,
                           <expr><operator>.</operator><name>requestObjRefId</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>self</name></name></expr>,
                           <expr><operator>.</operator><name>mgmtEps</name> <operator>=</operator> <macro><name>getEpSet_s</name><argument_list>(<argument>&amp;pTscObj-&gt;pAppInfo-&gt;mgmtEp</argument>)</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SVgroupInfo</name></type> <name>pInfo</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SName</name></type>       <name>pName</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>toName</name><argument_list>(<argument><expr><name><name>pTscObj</name><operator>-&gt;</operator><name>acctId</name></name></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>pDb</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>tbName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogGetTableHashVgroup</name><argument_list>(<argument><expr><name>pCatalog</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pArray</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pArray</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pVgData</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVgDataBlocks</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pVgData</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pVgData</name><operator>-&gt;</operator><name>vg</name></name> <operator>=</operator> <name>pInfo</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVgData</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>metaLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pVgData</name><operator>-&gt;</operator><name>pData</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pVgData</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name>meta</name></expr></argument>, <argument><expr><name>metaLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SMsgHead</name><operator>*</operator><operator>)</operator><name><name>pVgData</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator><operator>-&gt;</operator><name>vgId</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>.</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVgData</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>metaLen</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVgData</name><operator>-&gt;</operator><name>numOfTables</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pVgData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pQuery</name> <operator>=</operator> <operator>(</operator><name>SQuery</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_QUERY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>execMode</name></name> <operator>=</operator> <name>QUERY_EXEC_MODE_SCHEDULE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_VND_ALTER_TABLE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>stableQuery</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name> <operator>=</operator> <call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_ALTER_TABLE_STMT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>rewriteToVnodeModifyOpStmt</name><argument_list>(<argument><expr><name>pQuery</name></expr></argument>, <argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>launchQueryImpl</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>, <argument><expr><name>pQuery</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pVgData</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>pArray</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>code</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>TSDB_CODE_TDB_TABLE_NOT_EXIST</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_SUCCESS</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pRequest</name><operator>-&gt;</operator><name>code</name></name> <operator>==</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SExecResult</name><modifier>*</modifier></type> <name>pRes</name> <init>= <expr><operator>&amp;</operator><name><name>pRequest</name><operator>-&gt;</operator><name>body</name><operator>.</operator><name>resInfo</name><operator>.</operator><name>execRes</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pRes</name><operator>-&gt;</operator><name>res</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>handleAlterTbExecRes</name><argument_list>(<argument><expr><name><name>pRes</name><operator>-&gt;</operator><name>res</name></name></expr></argument>, <argument><expr><name>pCatalog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
<label><name>end</name>:</label>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pVgData</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pVgData</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pVgData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>destroyRequest</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>qDestroyQuery</name><argument_list>(<argument><expr><name>pQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>SVgroupInfo</name></type> <name>vg</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>       <name>data</name></decl>;</decl_stmt>
}</block></struct></type> <name>VgData</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>destroyVgHash</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>VgData</name><modifier>*</modifier></type> <name>vgData</name> <init>= <expr><operator>(</operator><name>VgData</name><operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>vgData</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>taos_write_raw_block_with_fields</name><parameter_list>(<parameter><decl><type><name>TAOS</name><modifier>*</modifier></type> <name>taos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pData</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>tbname</name></decl></parameter>, <parameter><decl><type><name>TAOS_FIELD</name> <modifier>*</modifier></type><name>fields</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numFields</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STableMeta</name><modifier>*</modifier></type> <name>pTableMeta</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQuery</name><modifier>*</modifier></type>     <name>pQuery</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSubmitReq</name><modifier>*</modifier></type> <name>subReq</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SRequestObj</name><modifier>*</modifier></type> <name>pRequest</name> <init>= <expr><operator>(</operator><name>SRequestObj</name><operator>*</operator><operator>)</operator><call><name>createRequest</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name>taos</name></expr></argument>, <argument><expr><name>TSDB_SQL_INSERT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pRequest</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"WriteRaw:createRequest error request is null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>syncQuery</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pRequest</name><operator>-&gt;</operator><name>pDb</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"WriteRaw:not use db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_PAR_DB_NOT_SPECIFIED</name></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SName</name></type> <name>pName</name> <init>= <expr><block>{<expr><name>TSDB_TABLE_NAME_T</name></expr>, <expr><name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name><operator>-&gt;</operator><name>acctId</name></name></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>pName</name><operator>.</operator><name>dbname</name></name></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>pDb</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pName</name><operator>.</operator><name>dbname</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>pName</name><operator>.</operator><name>tname</name></name></expr></argument>, <argument><expr><name>tbname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pName</name><operator>.</operator><name>tname</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>struct</name> <name>SCatalog</name></name><modifier>*</modifier></type> <name>pCatalog</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogGetHandle</name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>clusterId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCatalog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"WriteRaw: get gatlog error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SRequestConnInfo</name></type> <name>conn</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>conn</name><operator>.</operator><name>pTrans</name></name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>pTransporter</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conn</name><operator>.</operator><name>requestId</name></name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conn</name><operator>.</operator><name>requestObjRefId</name></name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>self</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conn</name><operator>.</operator><name>mgmtEps</name></name> <operator>=</operator> <call><name>getEpSet_s</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>mgmtEp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SVgroupInfo</name></type> <name>vgData</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogGetTableHashVgroup</name><argument_list>(<argument><expr><name>pCatalog</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vgData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"WriteRaw:catalogGetTableHashVgroup failed. table name: %s"</literal></expr></argument>, <argument><expr><name>tbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogGetTableMeta</name><argument_list>(<argument><expr><name>pCatalog</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTableMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"WriteRaw:catalogGetTableMeta failed. table name: %s"</literal></expr></argument>, <argument><expr><name>tbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>suid</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>TSDB_NORMAL_TABLE</name> <operator>==</operator> <name><name>pTableMeta</name><operator>-&gt;</operator><name>tableType</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>suid</name></name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>uid</name> <init>= <expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>uid</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>numOfCols</name> <init>= <expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>numOfColumns</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>uint16_t</name></type> <name>fLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>rowSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int16_t</name></type>  <name>nVar</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pTableMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>numOfColumns</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SSchema</name><modifier>*</modifier></type> <name>schema</name> <init>= <expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>schema</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>fLen</name> <operator>+=</operator> <name><name>TYPE_BYTES</name><index>[<expr><name><name>schema</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>rowSize</name> <operator>+=</operator> <name><name>schema</name><operator>-&gt;</operator><name>bytes</name></name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>schema</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>nVar</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

  <expr_stmt><expr><name>fLen</name> <operator>-=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TSKEY</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>extendedRowSize</name> <init>= <expr><name>rowSize</name> <operator>+</operator> <name>TD_ROW_HEAD_LEN</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TSKEY</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>nVar</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VarDataOffsetT</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
                            <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>TD_BITMAP_BYTES</name><argument_list>(<argument><expr><name>numOfCols</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>schemaLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>submitLen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSubmitBlk</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>schemaLen</name> <operator>+</operator> <name>rows</name> <operator>*</operator> <name>extendedRowSize</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>totalLen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSubmitReq</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>submitLen</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>subReq</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>totalLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SSubmitBlk</name><modifier>*</modifier></type> <name>blk</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>subReq</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSubmitReq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>       <name>blkSchema</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>blk</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSubmitBlk</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STSRow</name><modifier>*</modifier></type>     <name>rowData</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>blkSchema</name></expr></argument>, <argument><expr><name>schemaLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SRowBuilder</name></type> <name>rb</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tdSRowInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>, <argument><expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>sversion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdSRowSetTpInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>, <argument><expr><name>numOfCols</name></expr></argument>, <argument><expr><name>fLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>dataLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// | version | total length | total rows | total columns | flag seg| block group id | column schema | each column length |</comment>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>    <name>pStart</name> <init>= <expr><name>pData</name> <operator>+</operator> <call><name>getVersion1BlockMetaSize</name><argument_list>(<argument><expr><name>pData</name></expr></argument>, <argument><expr><name>numFields</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>colLength</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>pStart</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>pStart</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>numFields</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SResultColumn</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>numFields</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SResultColumn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numFields</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pCol</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>pStart</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>pStart</name> <operator>+=</operator> <name>rows</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pCol</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nullbitmap</name> <operator>=</operator> <name>pStart</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>pStart</name> <operator>+=</operator> <call><name>BitmapLen</name><argument_list>(<argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name><name>pCol</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pData</name> <operator>=</operator> <name>pStart</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pStart</name> <operator>+=</operator> <name><name>colLength</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>schemaHash</name> <init>= <expr><call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numFields</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>TAOS_FIELD</name><modifier>*</modifier></type> <name>schema</name> <init>= <expr><operator>&amp;</operator><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name>schemaHash</name></expr></argument>, <argument><expr><name><name>schema</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>schema</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>rows</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>tdSRowResetBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>, <argument><expr><name>rowData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>SSchema</name><modifier>*</modifier></type> <name>pColumn</name> <init>= <expr><operator>&amp;</operator><name><name>pTableMeta</name><operator>-&gt;</operator><name>schema</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type>       <name>index</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name>schemaHash</name></expr></argument>, <argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>index</name></expr>)</condition> <block>{<block_content>   <comment type="line">// add none</comment>
        <expr_stmt><expr><call><name>tdAppendColValToRow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>, <argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>TD_VTYPE_NONE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name><name>pCol</name><index>[<expr><operator>*</operator><name>index</name></expr>]</index></name><operator>.</operator><name><name>offset</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><name><name>pCol</name><index>[<expr><operator>*</operator><name>index</name></expr>]</index></name><operator>.</operator><name>pData</name> <operator>+</operator> <name><name>pCol</name><index>[<expr><operator>*</operator><name>index</name></expr>]</index></name><operator>.</operator><name><name>offset</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>tdAppendColValToRow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>, <argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>TD_VTYPE_NORM</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>tdAppendColValToRow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>, <argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>TD_VTYPE_NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pCol</name><index>[<expr><operator>*</operator><name>index</name></expr>]</index></name><operator>.</operator><name>nullbitmap</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><name><name>pCol</name><index>[<expr><operator>*</operator><name>index</name></expr>]</index></name><operator>.</operator><name>pData</name> <operator>+</operator> <name><name>pColumn</name><operator>-&gt;</operator><name>bytes</name></name> <operator>*</operator> <name>j</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>tdAppendColValToRow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>, <argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>TD_VTYPE_NORM</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>tdAppendColValToRow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>, <argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>TD_VTYPE_NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></else></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pColumn</name><operator>-&gt;</operator><name>colId</name></name> <operator>!=</operator> <name>PRIMARYKEY_TIMESTAMP_COL_ID</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>TYPE_BYTES</name><index>[<expr><name><name>pColumn</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>tdSRowEnd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>rowLen</name> <init>= <expr><call><name>TD_ROW_LEN</name><argument_list>(<argument><expr><name>rowData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>rowData</name> <operator>=</operator> <call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>rowData</name></expr></argument>, <argument><expr><name>rowLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>dataLen</name> <operator>+=</operator> <name>rowLen</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name>schemaHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <call><name>htobe64</name><argument_list>(<argument><expr><name>uid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>suid</name></name> <operator>=</operator> <call><name>htobe64</name><argument_list>(<argument><expr><name>suid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>sversion</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>sversion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>schemaLen</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>schemaLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>dataLen</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>dataLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>subReq</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSubmitReq</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSubmitBlk</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>schemaLen</name> <operator>+</operator> <name>dataLen</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>subReq</name><operator>-&gt;</operator><name>numOfBlocks</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name>pQuery</name> <operator>=</operator> <operator>(</operator><name>SQuery</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_QUERY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pQuery</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"create SQuery error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>execMode</name></name> <operator>=</operator> <name>QUERY_EXEC_MODE_SCHEDULE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>haveResultSet</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_VND_SUBMIT</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name> <operator>=</operator> <operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_VNODE_MODIF_STMT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"create pQuery-&gt;pRoot error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SVnodeModifOpStmt</name><modifier>*</modifier></type> <name>nodeStmt</name> <init>= <expr><operator>(</operator><name>SVnodeModifOpStmt</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>nodeStmt</name><operator>-&gt;</operator><name>pDataBlocks</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SVgDataBlocks</name><modifier>*</modifier></type> <name>dst</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVgDataBlocks</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>dst</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>vg</name></name> <operator>=</operator> <name>vgData</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>numOfTables</name></name> <operator>=</operator> <name><name>subReq</name><operator>-&gt;</operator><name>numOfBlocks</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>subReq</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>subReq</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>subReq</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>vgId</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>vg</name><operator>.</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>subReq</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>subReq</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>contLen</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>subReq</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>subReq</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>subReq</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>subReq</name><operator>-&gt;</operator><name>numOfBlocks</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>subReq</name><operator>-&gt;</operator><name>numOfBlocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>subReq</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>  <comment type="line">// no need free</comment>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>nodeStmt</name><operator>-&gt;</operator><name>pDataBlocks</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>launchQueryImpl</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>, <argument><expr><name>pQuery</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>code</name></name></expr>;</expr_stmt>

  <label><name>end</name>:</label>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pTableMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>qDestroyQuery</name><argument_list>(<argument><expr><name>pQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>subReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>taos_write_raw_block</name><parameter_list>(<parameter><decl><type><name>TAOS</name><modifier>*</modifier></type> <name>taos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pData</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>tbname</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STableMeta</name><modifier>*</modifier></type> <name>pTableMeta</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQuery</name><modifier>*</modifier></type>     <name>pQuery</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSubmitReq</name><modifier>*</modifier></type> <name>subReq</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SRequestObj</name><modifier>*</modifier></type> <name>pRequest</name> <init>= <expr><operator>(</operator><name>SRequestObj</name><operator>*</operator><operator>)</operator><call><name>createRequest</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name>taos</name></expr></argument>, <argument><expr><name>TSDB_SQL_INSERT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pRequest</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"WriteRaw:createRequest error request is null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>syncQuery</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pRequest</name><operator>-&gt;</operator><name>pDb</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"WriteRaw:not use db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_PAR_DB_NOT_SPECIFIED</name></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SName</name></type> <name>pName</name> <init>= <expr><block>{<expr><name>TSDB_TABLE_NAME_T</name></expr>, <expr><name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name><operator>-&gt;</operator><name>acctId</name></name></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>pName</name><operator>.</operator><name>dbname</name></name></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>pDb</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pName</name><operator>.</operator><name>dbname</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>pName</name><operator>.</operator><name>tname</name></name></expr></argument>, <argument><expr><name>tbname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pName</name><operator>.</operator><name>tname</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>struct</name> <name>SCatalog</name></name><modifier>*</modifier></type> <name>pCatalog</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogGetHandle</name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>clusterId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCatalog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"WriteRaw: get gatlog error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SRequestConnInfo</name></type> <name>conn</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>conn</name><operator>.</operator><name>pTrans</name></name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>pTransporter</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conn</name><operator>.</operator><name>requestId</name></name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conn</name><operator>.</operator><name>requestObjRefId</name></name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>self</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conn</name><operator>.</operator><name>mgmtEps</name></name> <operator>=</operator> <call><name>getEpSet_s</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>mgmtEp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SVgroupInfo</name></type> <name>vgData</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogGetTableHashVgroup</name><argument_list>(<argument><expr><name>pCatalog</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vgData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"WriteRaw:catalogGetTableHashVgroup failed. table name: %s"</literal></expr></argument>, <argument><expr><name>tbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogGetTableMeta</name><argument_list>(<argument><expr><name>pCatalog</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTableMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"WriteRaw:catalogGetTableMeta failed. table name: %s"</literal></expr></argument>, <argument><expr><name>tbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>suid</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>TSDB_NORMAL_TABLE</name> <operator>==</operator> <name><name>pTableMeta</name><operator>-&gt;</operator><name>tableType</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>suid</name></name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>uid</name> <init>= <expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>uid</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>numOfCols</name> <init>= <expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>numOfColumns</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>uint16_t</name></type> <name>fLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>rowSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int16_t</name></type>  <name>nVar</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSchema</name><modifier>*</modifier></type> <name>schema</name> <init>= <expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>schema</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>fLen</name> <operator>+=</operator> <name><name>TYPE_BYTES</name><index>[<expr><name><name>schema</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>rowSize</name> <operator>+=</operator> <name><name>schema</name><operator>-&gt;</operator><name>bytes</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>schema</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>nVar</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name>fLen</name> <operator>-=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TSKEY</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>extendedRowSize</name> <init>= <expr><name>rowSize</name> <operator>+</operator> <name>TD_ROW_HEAD_LEN</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TSKEY</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>nVar</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VarDataOffsetT</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
                            <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>TD_BITMAP_BYTES</name><argument_list>(<argument><expr><name>numOfCols</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>schemaLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>submitLen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSubmitBlk</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>schemaLen</name> <operator>+</operator> <name>rows</name> <operator>*</operator> <name>extendedRowSize</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>totalLen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSubmitReq</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>submitLen</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>subReq</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>totalLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SSubmitBlk</name><modifier>*</modifier></type> <name>blk</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>subReq</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSubmitReq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>       <name>blkSchema</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>blk</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSubmitBlk</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STSRow</name><modifier>*</modifier></type>     <name>rowData</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>blkSchema</name></expr></argument>, <argument><expr><name>schemaLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SRowBuilder</name></type> <name>rb</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tdSRowInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>, <argument><expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>sversion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdSRowSetTpInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>, <argument><expr><name>numOfCols</name></expr></argument>, <argument><expr><name>fLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>dataLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// | version | total length | total rows | total columns | flag seg| block group id | column schema | each column length |</comment>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>    <name>pStart</name> <init>= <expr><name>pData</name> <operator>+</operator> <call><name>getVersion1BlockMetaSize</name><argument_list>(<argument><expr><name>pData</name></expr></argument>, <argument><expr><name>numOfCols</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>colLength</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>pStart</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>pStart</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>numOfCols</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SResultColumn</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>numOfCols</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SResultColumn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>schema</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pCol</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>pStart</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>pStart</name> <operator>+=</operator> <name>rows</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pCol</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nullbitmap</name> <operator>=</operator> <name>pStart</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>pStart</name> <operator>+=</operator> <call><name>BitmapLen</name><argument_list>(<argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name><name>pCol</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pData</name> <operator>=</operator> <name>pStart</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pStart</name> <operator>+=</operator> <name><name>colLength</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>rows</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>tdSRowResetBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>, <argument><expr><name>rowData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>SSchema</name><modifier>*</modifier></type> <name>pColumn</name> <init>= <expr><operator>&amp;</operator><name><name>pTableMeta</name><operator>-&gt;</operator><name>schema</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pCol</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name><name>offset</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><name><name>pCol</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>pData</name> <operator>+</operator> <name><name>pCol</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name><name>offset</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>tdAppendColValToRow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>, <argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>TD_VTYPE_NORM</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>tdAppendColValToRow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>, <argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>TD_VTYPE_NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>colDataIsNull_f</name><argument_list>(<argument><expr><name><name>pCol</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>nullbitmap</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><name><name>pCol</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>pData</name> <operator>+</operator> <name><name>pColumn</name><operator>-&gt;</operator><name>bytes</name></name> <operator>*</operator> <name>j</name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>tdAppendColValToRow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>, <argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>TD_VTYPE_NORM</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>tdAppendColValToRow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>, <argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>TD_VTYPE_NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></else></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pColumn</name><operator>-&gt;</operator><name>colId</name></name> <operator>!=</operator> <name>PRIMARYKEY_TIMESTAMP_COL_ID</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>TYPE_BYTES</name><index>[<expr><name><name>pColumn</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>tdSRowEnd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>rowLen</name> <init>= <expr><call><name>TD_ROW_LEN</name><argument_list>(<argument><expr><name>rowData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>rowData</name> <operator>=</operator> <call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>rowData</name></expr></argument>, <argument><expr><name>rowLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>dataLen</name> <operator>+=</operator> <name>rowLen</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <call><name>htobe64</name><argument_list>(<argument><expr><name>uid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>suid</name></name> <operator>=</operator> <call><name>htobe64</name><argument_list>(<argument><expr><name>suid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>sversion</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>sversion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>schemaLen</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>schemaLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>dataLen</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>dataLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>subReq</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSubmitReq</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSubmitBlk</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>schemaLen</name> <operator>+</operator> <name>dataLen</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>subReq</name><operator>-&gt;</operator><name>numOfBlocks</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name>pQuery</name> <operator>=</operator> <operator>(</operator><name>SQuery</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_QUERY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pQuery</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"create SQuery error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>subReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>execMode</name></name> <operator>=</operator> <name>QUERY_EXEC_MODE_SCHEDULE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>haveResultSet</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_VND_SUBMIT</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name> <operator>=</operator> <operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_VNODE_MODIF_STMT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"create pQuery-&gt;pRoot error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SVnodeModifOpStmt</name><modifier>*</modifier></type> <name>nodeStmt</name> <init>= <expr><operator>(</operator><name>SVnodeModifOpStmt</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>nodeStmt</name><operator>-&gt;</operator><name>pDataBlocks</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SVgDataBlocks</name><modifier>*</modifier></type> <name>dst</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVgDataBlocks</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>dst</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>vg</name></name> <operator>=</operator> <name>vgData</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>numOfTables</name></name> <operator>=</operator> <name><name>subReq</name><operator>-&gt;</operator><name>numOfBlocks</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>subReq</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>subReq</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>subReq</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>vgId</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>vg</name><operator>.</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>subReq</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>subReq</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>contLen</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>subReq</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>subReq</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>subReq</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>subReq</name><operator>-&gt;</operator><name>numOfBlocks</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>subReq</name><operator>-&gt;</operator><name>numOfBlocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>subReq</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>  <comment type="line">// no need free</comment>
  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>nodeStmt</name><operator>-&gt;</operator><name>pDataBlocks</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>launchQueryImpl</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>, <argument><expr><name>pQuery</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>code</name></name></expr>;</expr_stmt>

<label><name>end</name>:</label>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pTableMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>qDestroyQuery</name><argument_list>(<argument><expr><name>pQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>subReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tmqWriteRawDataImpl</name><parameter_list>(<parameter><decl><type><name>TAOS</name><modifier>*</modifier></type> <name>taos</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dataLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHashObj</name><modifier>*</modifier></type>   <name>pVgHash</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQuery</name><modifier>*</modifier></type>     <name>pQuery</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMqRspObj</name></type>   <name>rspObj</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDecoder</name></type>    <name>decoder</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STableMeta</name><modifier>*</modifier></type> <name>pTableMeta</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_SUCCESS</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SRequestObj</name><modifier>*</modifier></type> <name>pRequest</name> <init>= <expr><operator>(</operator><name>SRequestObj</name><operator>*</operator><operator>)</operator><call><name>createRequest</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name>taos</name></expr></argument>, <argument><expr><name>TSDB_SQL_INSERT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pRequest</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"WriteRaw:createRequest error request is null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>syncQuery</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rspObj</name><operator>.</operator><name>resIter</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rspObj</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <name>RES_TYPE__TMQ</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dataLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tDecodeSMqDataRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rspObj</name><operator>.</operator><name>rsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"WriteRaw:decode smqDataRsp error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pRequest</name><operator>-&gt;</operator><name>pDb</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"WriteRaw:not use db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_PAR_DB_NOT_SPECIFIED</name></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pVgHash</name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_INT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashSetFreeFp</name><argument_list>(<argument><expr><name>pVgHash</name></expr></argument>, <argument><expr><name>destroyVgHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>SCatalog</name></name><modifier>*</modifier></type> <name>pCatalog</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogGetHandle</name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>clusterId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCatalog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"WriteRaw: get gatlog error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SRequestConnInfo</name></type> <name>conn</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>conn</name><operator>.</operator><name>pTrans</name></name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>pTransporter</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conn</name><operator>.</operator><name>requestId</name></name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conn</name><operator>.</operator><name>requestObjRefId</name></name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>self</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conn</name><operator>.</operator><name>mgmtEps</name></name> <operator>=</operator> <call><name>getEpSet_s</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>mgmtEp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"raw data block num:%d\n"</literal></expr></argument>, <argument><expr><name><name>rspObj</name><operator>.</operator><name>rsp</name><operator>.</operator><name>blockNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><operator>++</operator><name><name>rspObj</name><operator>.</operator><name>resIter</name></name> <operator>&lt;</operator> <name><name>rspObj</name><operator>.</operator><name>rsp</name><operator>.</operator><name>blockNum</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SRetrieveTableRsp</name><modifier>*</modifier></type> <name>pRetrieve</name> <init>= <expr><operator>(</operator><name>SRetrieveTableRsp</name><operator>*</operator><operator>)</operator><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>rspObj</name><operator>.</operator><name>rsp</name><operator>.</operator><name>blockData</name></name></expr></argument>, <argument><expr><name><name>rspObj</name><operator>.</operator><name>resIter</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rspObj</name><operator>.</operator><name>rsp</name><operator>.</operator><name>withSchema</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"WriteRaw:no schema, iter:%d"</literal></expr></argument>, <argument><expr><name><name>rspObj</name><operator>.</operator><name>resIter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>end</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>SSchemaWrapper</name><modifier>*</modifier></type> <name>pSW</name> <init>= <expr><operator>(</operator><name>SSchemaWrapper</name><operator>*</operator><operator>)</operator><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>rspObj</name><operator>.</operator><name>rsp</name><operator>.</operator><name>blockSchema</name></name></expr></argument>, <argument><expr><name><name>rspObj</name><operator>.</operator><name>resIter</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>setResSchemaInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rspObj</name><operator>.</operator><name>resInfo</name></name></expr></argument>, <argument><expr><name><name>pSW</name><operator>-&gt;</operator><name>pSchema</name></name></expr></argument>, <argument><expr><name><name>pSW</name><operator>-&gt;</operator><name>nCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>setQueryResultFromRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rspObj</name><operator>.</operator><name>resInfo</name></name></expr></argument>, <argument><expr><name>pRetrieve</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"WriteRaw: setQueryResultFromRsp error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>end</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>tbName</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>rspObj</name><operator>.</operator><name>rsp</name><operator>.</operator><name>blockTbName</name></name></expr></argument>, <argument><expr><name><name>rspObj</name><operator>.</operator><name>resIter</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>tbName</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"WriteRaw: tbname is null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_TMQ_INVALID_MSG</name></expr>;</expr_stmt>
      <goto>goto <name>end</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"raw data tbname:%s\n"</literal></expr></argument>, <argument><expr><name>tbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SName</name></type> <name>pName</name> <init>= <expr><block>{<expr><name>TSDB_TABLE_NAME_T</name></expr>, <expr><name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name><operator>-&gt;</operator><name>acctId</name></name></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pName</name><operator>.</operator><name>dbname</name></name></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>pDb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pName</name><operator>.</operator><name>tname</name></name></expr></argument>, <argument><expr><name>tbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>VgData</name></type> <name>vgData</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogGetTableHashVgroup</name><argument_list>(<argument><expr><name>pCatalog</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pName</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>vgData</name><operator>.</operator><name>vg</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"WriteRaw:catalogGetTableHashVgroup failed. table name: %s"</literal></expr></argument>, <argument><expr><name>tbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>end</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogGetTableMeta</name><argument_list>(<argument><expr><name>pCatalog</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTableMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>TSDB_CODE_PAR_TABLE_NOT_EXIST</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"WriteRaw:catalogGetTableMeta table not exist. table name: %s"</literal></expr></argument>, <argument><expr><name>tbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_SUCCESS</name></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"WriteRaw:catalogGetTableMeta failed. table name: %s"</literal></expr></argument>, <argument><expr><name>tbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>end</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>uint16_t</name></type> <name>fLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>  <name>rowSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int16_t</name></type>  <name>nVar</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pTableMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>numOfColumns</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SSchema</name><modifier>*</modifier></type> <name>schema</name> <init>= <expr><operator>&amp;</operator><name><name>pTableMeta</name><operator>-&gt;</operator><name>schema</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>fLen</name> <operator>+=</operator> <name><name>TYPE_BYTES</name><index>[<expr><name><name>schema</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>rowSize</name> <operator>+=</operator> <name><name>schema</name><operator>-&gt;</operator><name>bytes</name></name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>schema</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>nVar</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>fLen</name> <operator>-=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TSKEY</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>rows</name> <init>= <expr><name><name>rspObj</name><operator>.</operator><name>resInfo</name><operator>.</operator><name>numOfRows</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>extendedRowSize</name> <init>= <expr><name>rowSize</name> <operator>+</operator> <name>TD_ROW_HEAD_LEN</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TSKEY</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>nVar</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VarDataOffsetT</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
                              <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>TD_BITMAP_BYTES</name><argument_list>(<argument><expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>numOfColumns</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>schemaLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>submitLen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSubmitBlk</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>schemaLen</name> <operator>+</operator> <name>rows</name> <operator>*</operator> <name>extendedRowSize</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SSubmitReq</name><modifier>*</modifier></type> <name>subReq</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SSubmitBlk</name><modifier>*</modifier></type> <name>blk</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>       <name>hData</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name>pVgHash</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vgData</name><operator>.</operator><name>vg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>vgData</name><operator>.</operator><name>vg</name><operator>.</operator><name>vgId</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>hData</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>vgData</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>VgData</name><operator>*</operator><operator>)</operator><name>hData</name></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>int32_t</name></type> <name>totalLen</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SSubmitReq</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>vgData</name><operator>.</operator><name>data</name></name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>length</name> <operator>+</operator> <name>submitLen</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>tmp</name> <init>= <expr><call><name>taosMemoryRealloc</name><argument_list>(<argument><expr><name><name>vgData</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>totalLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
        <goto>goto <name>end</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>vgData</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>(</operator><operator>(</operator><name>VgData</name><operator>*</operator><operator>)</operator><name>hData</name><operator>)</operator><operator>-&gt;</operator><name>data</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>subReq</name> <operator>=</operator> <operator>(</operator><name>SSubmitReq</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>vgData</name><operator>.</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>blk</name> <operator>=</operator> <call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name><name>vgData</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>subReq</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>totalLen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSubmitReq</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>submitLen</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>tmp</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>totalLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
        <goto>goto <name>end</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>vgData</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name>pVgHash</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>vgData</name><operator>.</operator><name>vg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>vgData</name><operator>.</operator><name>vg</name><operator>.</operator><name>vgId</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>vgData</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vgData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>subReq</name> <operator>=</operator> <operator>(</operator><name>SSubmitReq</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>vgData</name><operator>.</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>subReq</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSubmitReq</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>subReq</name><operator>-&gt;</operator><name>numOfBlocks</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

      <expr_stmt><expr><name>blk</name> <operator>=</operator> <call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name><name>vgData</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSubmitReq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// pSW-&gt;pSchema should be same as pTableMeta-&gt;schema</comment>
    <comment type="line">//    ASSERT(pSW-&gt;nCols == pTableMeta-&gt;tableInfo.numOfColumns);</comment>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>suid</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>TSDB_NORMAL_TABLE</name> <operator>==</operator> <name><name>pTableMeta</name><operator>-&gt;</operator><name>tableType</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>suid</name></name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>uid</name> <init>= <expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>uid</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int16_t</name></type>  <name>sver</name> <init>= <expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>sversion</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>blkSchema</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>blk</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSubmitBlk</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>STSRow</name><modifier>*</modifier></type> <name>rowData</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>blkSchema</name></expr></argument>, <argument><expr><name>schemaLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SRowBuilder</name></type> <name>rb</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tdSRowInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>, <argument><expr><name>sver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tdSRowSetTpInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>, <argument><expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>numOfColumns</name></name></expr></argument>, <argument><expr><name>fLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>totalLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>schemaHash</name> <init>= <expr><call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pSW</name><operator>-&gt;</operator><name>nCols</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SSchema</name><modifier>*</modifier></type> <name>schema</name> <init>= <expr><operator>&amp;</operator><name><name>pSW</name><operator>-&gt;</operator><name>pSchema</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name>schemaHash</name></expr></argument>, <argument><expr><name><name>schema</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>schema</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>rows</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>tdSRowResetBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>, <argument><expr><name>rowData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>doSetOneRowPtr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rspObj</name><operator>.</operator><name>resInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>rspObj</name><operator>.</operator><name>resInfo</name><operator>.</operator><name>current</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>int32_t</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>pTableMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>numOfColumns</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>SSchema</name><modifier>*</modifier></type> <name>pColumn</name> <init>= <expr><operator>&amp;</operator><name><name>pTableMeta</name><operator>-&gt;</operator><name>schema</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type>       <name>index</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name>schemaHash</name></expr></argument>, <argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>index</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>tdAppendColValToRow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>, <argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>TD_VTYPE_NONE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>colData</name> <init>= <expr><name><name>rspObj</name><operator>.</operator><name>resInfo</name><operator>.</operator><name>row</name><index>[<expr><operator>*</operator><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><operator>!</operator><name>colData</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>tdAppendColValToRow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>, <argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>TD_VTYPE_NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name>colData</name> <operator>-=</operator> <name>VARSTR_HEADER_SIZE</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>tdAppendColValToRow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>, <argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>TD_VTYPE_NORM</name></expr></argument>, <argument><expr><name>colData</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pColumn</name><operator>-&gt;</operator><name>colId</name></name> <operator>!=</operator> <name>PRIMARYKEY_TIMESTAMP_COL_ID</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>TYPE_BYTES</name><index>[<expr><name><name>pColumn</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name>tdSRowEnd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>rowLen</name> <init>= <expr><call><name>TD_ROW_LEN</name><argument_list>(<argument><expr><name>rowData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>rowData</name> <operator>=</operator> <call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>rowData</name></expr></argument>, <argument><expr><name>rowLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>totalLen</name> <operator>+=</operator> <name>rowLen</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name>schemaHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <call><name>htobe64</name><argument_list>(<argument><expr><name>uid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>suid</name></name> <operator>=</operator> <call><name>htobe64</name><argument_list>(<argument><expr><name>suid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>sversion</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>sver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>schemaLen</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>schemaLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>dataLen</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>totalLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>subReq</name><operator>-&gt;</operator><name>length</name></name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSubmitBlk</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>schemaLen</name> <operator>+</operator> <name>totalLen</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>subReq</name><operator>-&gt;</operator><name>numOfBlocks</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pTableMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rspObj</name><operator>.</operator><name>resInfo</name><operator>.</operator><name>pRspMsg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>doFreeReqResultInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rspObj</name><operator>.</operator><name>resInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><name>pQuery</name> <operator>=</operator> <operator>(</operator><name>SQuery</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_QUERY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pQuery</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"create SQuery error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>execMode</name></name> <operator>=</operator> <name>QUERY_EXEC_MODE_SCHEDULE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>haveResultSet</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_VND_SUBMIT</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name> <operator>=</operator> <operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_VNODE_MODIF_STMT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"create pQuery-&gt;pRoot error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SVnodeModifOpStmt</name><modifier>*</modifier></type> <name>nodeStmt</name> <init>= <expr><operator>(</operator><name>SVnodeModifOpStmt</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfVg</name> <init>= <expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name>pVgHash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>nodeStmt</name><operator>-&gt;</operator><name>pDataBlocks</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>numOfVg</name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>VgData</name><modifier>*</modifier></type> <name>vData</name> <init>= <expr><operator>(</operator><name>VgData</name><operator>*</operator><operator>)</operator><call><name>taosHashIterate</name><argument_list>(<argument><expr><name>pVgHash</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>vData</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SVgDataBlocks</name><modifier>*</modifier></type> <name>dst</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVgDataBlocks</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>dst</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <goto>goto <name>end</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>vg</name></name> <operator>=</operator> <name><name>vData</name><operator>-&gt;</operator><name>vg</name></name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SSubmitReq</name><modifier>*</modifier></type> <name>subReq</name> <init>= <expr><operator>(</operator><name>SSubmitReq</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>vData</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>numOfTables</name></name> <operator>=</operator> <name><name>subReq</name><operator>-&gt;</operator><name>numOfBlocks</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>subReq</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>subReq</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>vData</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>  <comment type="line">// no need free</comment>
    <expr_stmt><expr><name><name>subReq</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>vgId</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>vg</name><operator>.</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>subReq</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>subReq</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>contLen</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>subReq</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>subReq</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>subReq</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>subReq</name><operator>-&gt;</operator><name>numOfBlocks</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>subReq</name><operator>-&gt;</operator><name>numOfBlocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>nodeStmt</name><operator>-&gt;</operator><name>pDataBlocks</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>vData</name> <operator>=</operator> <operator>(</operator><name>VgData</name><operator>*</operator><operator>)</operator><call><name>taosHashIterate</name><argument_list>(<argument><expr><name>pVgHash</name></expr></argument>, <argument><expr><name>vData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>launchQueryImpl</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>, <argument><expr><name>pQuery</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>code</name></name></expr>;</expr_stmt>

<label><name>end</name>:</label>
  <expr_stmt><expr><call><name>tDeleteSMqDataRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rspObj</name><operator>.</operator><name>rsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rspObj</name><operator>.</operator><name>resInfo</name><operator>.</operator><name>pRspMsg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>doFreeReqResultInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rspObj</name><operator>.</operator><name>resInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>qDestroyQuery</name><argument_list>(<argument><expr><name>pQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>destroyRequest</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name>pVgHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pTableMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tmqWriteRawMetaDataImpl</name><parameter_list>(<parameter><decl><type><name>TAOS</name><modifier>*</modifier></type> <name>taos</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dataLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHashObj</name><modifier>*</modifier></type>      <name>pVgHash</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SQuery</name><modifier>*</modifier></type>        <name>pQuery</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMqTaosxRspObj</name></type> <name>rspObj</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDecoder</name></type>       <name>decoder</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STableMeta</name><modifier>*</modifier></type>    <name>pTableMeta</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_SUCCESS</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SRequestObj</name><modifier>*</modifier></type> <name>pRequest</name> <init>= <expr><operator>(</operator><name>SRequestObj</name><operator>*</operator><operator>)</operator><call><name>createRequest</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name>taos</name></expr></argument>, <argument><expr><name>TSDB_SQL_INSERT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pRequest</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"WriteRaw:createRequest error request is null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pRequest</name><operator>-&gt;</operator><name>syncQuery</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rspObj</name><operator>.</operator><name>resIter</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rspObj</name><operator>.</operator><name>resType</name></name> <operator>=</operator> <name>RES_TYPE__TMQ_METADATA</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dataLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tDecodeSTaosxRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rspObj</name><operator>.</operator><name>rsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"WriteRaw:decode smqDataRsp error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pRequest</name><operator>-&gt;</operator><name>pDb</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"WriteRaw:not use db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_PAR_DB_NOT_SPECIFIED</name></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pVgHash</name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_INT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashSetFreeFp</name><argument_list>(<argument><expr><name>pVgHash</name></expr></argument>, <argument><expr><name>destroyVgHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>SCatalog</name></name><modifier>*</modifier></type> <name>pCatalog</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogGetHandle</name><argument_list>(<argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>clusterId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCatalog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"WriteRaw: get gatlog error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SRequestConnInfo</name></type> <name>conn</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>conn</name><operator>.</operator><name>pTrans</name></name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>pTransporter</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conn</name><operator>.</operator><name>requestId</name></name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>requestId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conn</name><operator>.</operator><name>requestObjRefId</name></name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>self</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conn</name><operator>.</operator><name>mgmtEps</name></name> <operator>=</operator> <call><name>getEpSet_s</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name><operator>-&gt;</operator><name>pAppInfo</name><operator>-&gt;</operator><name>mgmtEp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"raw data block num:%d\n"</literal></expr></argument>, <argument><expr><name><name>rspObj</name><operator>.</operator><name>rsp</name><operator>.</operator><name>blockNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><operator>++</operator><name><name>rspObj</name><operator>.</operator><name>resIter</name></name> <operator>&lt;</operator> <name><name>rspObj</name><operator>.</operator><name>rsp</name><operator>.</operator><name>blockNum</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SRetrieveTableRsp</name><modifier>*</modifier></type> <name>pRetrieve</name> <init>= <expr><operator>(</operator><name>SRetrieveTableRsp</name><operator>*</operator><operator>)</operator><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>rspObj</name><operator>.</operator><name>rsp</name><operator>.</operator><name>blockData</name></name></expr></argument>, <argument><expr><name><name>rspObj</name><operator>.</operator><name>resIter</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rspObj</name><operator>.</operator><name>rsp</name><operator>.</operator><name>withSchema</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"WriteRaw:no schema, iter:%d"</literal></expr></argument>, <argument><expr><name><name>rspObj</name><operator>.</operator><name>resIter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>end</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>SSchemaWrapper</name><modifier>*</modifier></type> <name>pSW</name> <init>= <expr><operator>(</operator><name>SSchemaWrapper</name><operator>*</operator><operator>)</operator><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>rspObj</name><operator>.</operator><name>rsp</name><operator>.</operator><name>blockSchema</name></name></expr></argument>, <argument><expr><name><name>rspObj</name><operator>.</operator><name>resIter</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>setResSchemaInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rspObj</name><operator>.</operator><name>resInfo</name></name></expr></argument>, <argument><expr><name><name>pSW</name><operator>-&gt;</operator><name>pSchema</name></name></expr></argument>, <argument><expr><name><name>pSW</name><operator>-&gt;</operator><name>nCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>setQueryResultFromRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rspObj</name><operator>.</operator><name>resInfo</name></name></expr></argument>, <argument><expr><name>pRetrieve</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"WriteRaw: setQueryResultFromRsp error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>end</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>tbName</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>rspObj</name><operator>.</operator><name>rsp</name><operator>.</operator><name>blockTbName</name></name></expr></argument>, <argument><expr><name><name>rspObj</name><operator>.</operator><name>resIter</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>tbName</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"WriteRaw: tbname is null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_TMQ_INVALID_MSG</name></expr>;</expr_stmt>
      <goto>goto <name>end</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"raw data tbname:%s\n"</literal></expr></argument>, <argument><expr><name>tbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SName</name></type> <name>pName</name> <init>= <expr><block>{<expr><name>TSDB_TABLE_NAME_T</name></expr>, <expr><name><name>pRequest</name><operator>-&gt;</operator><name>pTscObj</name><operator>-&gt;</operator><name>acctId</name></name></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pName</name><operator>.</operator><name>dbname</name></name></expr></argument>, <argument><expr><name><name>pRequest</name><operator>-&gt;</operator><name>pDb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pName</name><operator>.</operator><name>tname</name></name></expr></argument>, <argument><expr><name>tbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>VgData</name></type> <name>vgData</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogGetTableHashVgroup</name><argument_list>(<argument><expr><name>pCatalog</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pName</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>vgData</name><operator>.</operator><name>vg</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"WriteRaw:catalogGetTableHashVgroup failed. table name: %s"</literal></expr></argument>, <argument><expr><name>tbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>end</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// find schema data info</comment>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>schemaLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>schemaData</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>rspObj</name><operator>.</operator><name>rsp</name><operator>.</operator><name>createTableNum</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type>   <name>dataTmp</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>rspObj</name><operator>.</operator><name>rsp</name><operator>.</operator><name>createTableReq</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>lenTmp</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>rspObj</name><operator>.</operator><name>rsp</name><operator>.</operator><name>createTableLen</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>SDecoder</name></type>      <name>decoderTmp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SVCreateTbReq</name></type> <name>pCreateReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoderTmp</name></expr></argument>, <argument><expr><operator>*</operator><name>dataTmp</name></expr></argument>, <argument><expr><operator>*</operator><name>lenTmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>tDecodeSVCreateTbReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoderTmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCreateReq</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoderTmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pCreateReq</name><operator>.</operator><name>comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pCreateReq</name><operator>.</operator><name>ctb</name><operator>.</operator><name>tagName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>end</name>;</goto>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pCreateReq</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_CHILD_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>tbName</name></expr></argument>, <argument><expr><name><name>pCreateReq</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>schemaLen</name> <operator>=</operator> <operator>*</operator><name>lenTmp</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>schemaData</name> <operator>=</operator> <operator>*</operator><name>dataTmp</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pName</name><operator>.</operator><name>tname</name></name></expr></argument>, <argument><expr><name><name>pCreateReq</name><operator>.</operator><name>ctb</name><operator>.</operator><name>stbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoderTmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pCreateReq</name><operator>.</operator><name>comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pCreateReq</name><operator>.</operator><name>ctb</name><operator>.</operator><name>tagName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoderTmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pCreateReq</name><operator>.</operator><name>comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pCreateReq</name><operator>.</operator><name>ctb</name><operator>.</operator><name>tagName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>catalogGetTableMeta</name><argument_list>(<argument><expr><name>pCatalog</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTableMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>TSDB_CODE_PAR_TABLE_NOT_EXIST</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"WriteRaw:catalogGetTableMeta table not exist. table name: %s"</literal></expr></argument>, <argument><expr><name>tbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_SUCCESS</name></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"WriteRaw:catalogGetTableMeta failed. table name: %s"</literal></expr></argument>, <argument><expr><name>tbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>end</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>uint16_t</name></type> <name>fLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>  <name>rowSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int16_t</name></type>  <name>nVar</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pTableMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>numOfColumns</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SSchema</name><modifier>*</modifier></type> <name>schema</name> <init>= <expr><operator>&amp;</operator><name><name>pTableMeta</name><operator>-&gt;</operator><name>schema</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>fLen</name> <operator>+=</operator> <name><name>TYPE_BYTES</name><index>[<expr><name><name>schema</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>rowSize</name> <operator>+=</operator> <name><name>schema</name><operator>-&gt;</operator><name>bytes</name></name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>schema</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>nVar</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>fLen</name> <operator>-=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TSKEY</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>rows</name> <init>= <expr><name><name>rspObj</name><operator>.</operator><name>resInfo</name><operator>.</operator><name>numOfRows</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>extendedRowSize</name> <init>= <expr><name>rowSize</name> <operator>+</operator> <name>TD_ROW_HEAD_LEN</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TSKEY</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>nVar</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VarDataOffsetT</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
                              <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>TD_BITMAP_BYTES</name><argument_list>(<argument><expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>numOfColumns</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>submitLen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSubmitBlk</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>schemaLen</name> <operator>+</operator> <name>rows</name> <operator>*</operator> <name>extendedRowSize</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SSubmitReq</name><modifier>*</modifier></type> <name>subReq</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SSubmitBlk</name><modifier>*</modifier></type> <name>blk</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>       <name>hData</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name>pVgHash</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vgData</name><operator>.</operator><name>vg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>vgData</name><operator>.</operator><name>vg</name><operator>.</operator><name>vgId</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>hData</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>vgData</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>VgData</name><operator>*</operator><operator>)</operator><name>hData</name></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>int32_t</name></type> <name>totalLen</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SSubmitReq</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>vgData</name><operator>.</operator><name>data</name></name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>length</name> <operator>+</operator> <name>submitLen</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>tmp</name> <init>= <expr><call><name>taosMemoryRealloc</name><argument_list>(<argument><expr><name><name>vgData</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>totalLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
        <goto>goto <name>end</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>vgData</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>(</operator><operator>(</operator><name>VgData</name><operator>*</operator><operator>)</operator><name>hData</name><operator>)</operator><operator>-&gt;</operator><name>data</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>subReq</name> <operator>=</operator> <operator>(</operator><name>SSubmitReq</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>vgData</name><operator>.</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>blk</name> <operator>=</operator> <call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name><name>vgData</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>subReq</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>totalLen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSubmitReq</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>submitLen</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>tmp</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>totalLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
        <goto>goto <name>end</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>vgData</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name>pVgHash</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>vgData</name><operator>.</operator><name>vg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>vgData</name><operator>.</operator><name>vg</name><operator>.</operator><name>vgId</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>vgData</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vgData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>subReq</name> <operator>=</operator> <operator>(</operator><name>SSubmitReq</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>vgData</name><operator>.</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>subReq</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSubmitReq</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>subReq</name><operator>-&gt;</operator><name>numOfBlocks</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

      <expr_stmt><expr><name>blk</name> <operator>=</operator> <call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name><name>vgData</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSubmitReq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// pSW-&gt;pSchema should be same as pTableMeta-&gt;schema</comment>
    <comment type="line">//    ASSERT(pSW-&gt;nCols == pTableMeta-&gt;tableInfo.numOfColumns);</comment>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>suid</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>TSDB_NORMAL_TABLE</name> <operator>==</operator> <name><name>pTableMeta</name><operator>-&gt;</operator><name>tableType</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>suid</name></name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>uid</name> <init>= <expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>uid</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int16_t</name></type>  <name>sver</name> <init>= <expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>sversion</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>blkSchema</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>blk</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSubmitBlk</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>schemaData</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>blkSchema</name></expr></argument>, <argument><expr><name>schemaData</name></expr></argument>, <argument><expr><name>schemaLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>STSRow</name><modifier>*</modifier></type> <name>rowData</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>blkSchema</name></expr></argument>, <argument><expr><name>schemaLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SRowBuilder</name></type> <name>rb</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tdSRowInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>, <argument><expr><name>sver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tdSRowSetTpInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>, <argument><expr><name><name>pTableMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>numOfColumns</name></name></expr></argument>, <argument><expr><name>fLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>totalLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>schemaHash</name> <init>= <expr><call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pSW</name><operator>-&gt;</operator><name>nCols</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SSchema</name><modifier>*</modifier></type> <name>schema</name> <init>= <expr><operator>&amp;</operator><name><name>pSW</name><operator>-&gt;</operator><name>pSchema</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name>schemaHash</name></expr></argument>, <argument><expr><name><name>schema</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>schema</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>rows</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>tdSRowResetBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>, <argument><expr><name>rowData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>doSetOneRowPtr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rspObj</name><operator>.</operator><name>resInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>rspObj</name><operator>.</operator><name>resInfo</name><operator>.</operator><name>current</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>int32_t</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>pTableMeta</name><operator>-&gt;</operator><name>tableInfo</name><operator>.</operator><name>numOfColumns</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>SSchema</name><modifier>*</modifier></type> <name>pColumn</name> <init>= <expr><operator>&amp;</operator><name><name>pTableMeta</name><operator>-&gt;</operator><name>schema</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type>       <name>index</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name>schemaHash</name></expr></argument>, <argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>index</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>tdAppendColValToRow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>, <argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>TD_VTYPE_NONE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>colData</name> <init>= <expr><name><name>rspObj</name><operator>.</operator><name>resInfo</name><operator>.</operator><name>row</name><index>[<expr><operator>*</operator><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><operator>!</operator><name>colData</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>tdAppendColValToRow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>, <argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>TD_VTYPE_NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name>colData</name> <operator>-=</operator> <name>VARSTR_HEADER_SIZE</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>tdAppendColValToRow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>, <argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><name><name>pColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>TD_VTYPE_NORM</name></expr></argument>, <argument><expr><name>colData</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pColumn</name><operator>-&gt;</operator><name>colId</name></name> <operator>!=</operator> <name>PRIMARYKEY_TIMESTAMP_COL_ID</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>TYPE_BYTES</name><index>[<expr><name><name>pColumn</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name>tdSRowEnd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>rowLen</name> <init>= <expr><call><name>TD_ROW_LEN</name><argument_list>(<argument><expr><name>rowData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>rowData</name> <operator>=</operator> <call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>rowData</name></expr></argument>, <argument><expr><name>rowLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>totalLen</name> <operator>+=</operator> <name>rowLen</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name>schemaHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <call><name>htobe64</name><argument_list>(<argument><expr><name>uid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>suid</name></name> <operator>=</operator> <call><name>htobe64</name><argument_list>(<argument><expr><name>suid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>sversion</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>sver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>schemaLen</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>schemaLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>blk</name><operator>-&gt;</operator><name>dataLen</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>totalLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>subReq</name><operator>-&gt;</operator><name>length</name></name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSubmitBlk</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>schemaLen</name> <operator>+</operator> <name>totalLen</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>subReq</name><operator>-&gt;</operator><name>numOfBlocks</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pTableMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rspObj</name><operator>.</operator><name>resInfo</name><operator>.</operator><name>pRspMsg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>doFreeReqResultInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rspObj</name><operator>.</operator><name>resInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><name>pQuery</name> <operator>=</operator> <operator>(</operator><name>SQuery</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_QUERY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pQuery</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"create SQuery error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>execMode</name></name> <operator>=</operator> <name>QUERY_EXEC_MODE_SCHEDULE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>haveResultSet</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_VND_SUBMIT</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name> <operator>=</operator> <operator>(</operator><name>SNode</name><operator>*</operator><operator>)</operator><call><name>nodesMakeNode</name><argument_list>(<argument><expr><name>QUERY_NODE_VNODE_MODIF_STMT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>uError</name><argument_list>(<argument><expr><literal type="string">"create pQuery-&gt;pRoot error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SVnodeModifOpStmt</name><modifier>*</modifier></type> <name>nodeStmt</name> <init>= <expr><operator>(</operator><name>SVnodeModifOpStmt</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pQuery</name><operator>-&gt;</operator><name>pRoot</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfVg</name> <init>= <expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name>pVgHash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>nodeStmt</name><operator>-&gt;</operator><name>pDataBlocks</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>numOfVg</name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>VgData</name><modifier>*</modifier></type> <name>vData</name> <init>= <expr><operator>(</operator><name>VgData</name><operator>*</operator><operator>)</operator><call><name>taosHashIterate</name><argument_list>(<argument><expr><name>pVgHash</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>vData</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SVgDataBlocks</name><modifier>*</modifier></type> <name>dst</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVgDataBlocks</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>dst</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <goto>goto <name>end</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>vg</name></name> <operator>=</operator> <name><name>vData</name><operator>-&gt;</operator><name>vg</name></name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SSubmitReq</name><modifier>*</modifier></type> <name>subReq</name> <init>= <expr><operator>(</operator><name>SSubmitReq</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>vData</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>numOfTables</name></name> <operator>=</operator> <name><name>subReq</name><operator>-&gt;</operator><name>numOfBlocks</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>subReq</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>subReq</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>vData</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>  <comment type="line">// no need free</comment>
    <expr_stmt><expr><name><name>subReq</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>vgId</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>vg</name><operator>.</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>subReq</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>subReq</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>contLen</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>subReq</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>subReq</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>subReq</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>subReq</name><operator>-&gt;</operator><name>numOfBlocks</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>subReq</name><operator>-&gt;</operator><name>numOfBlocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>nodeStmt</name><operator>-&gt;</operator><name>pDataBlocks</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>vData</name> <operator>=</operator> <operator>(</operator><name>VgData</name><operator>*</operator><operator>)</operator><call><name>taosHashIterate</name><argument_list>(<argument><expr><name>pVgHash</name></expr></argument>, <argument><expr><name>vData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>launchQueryImpl</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>, <argument><expr><name>pQuery</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>pRequest</name><operator>-&gt;</operator><name>code</name></name></expr>;</expr_stmt>

  <label><name>end</name>:</label>
  <expr_stmt><expr><call><name>tDeleteSTaosxRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rspObj</name><operator>.</operator><name>rsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rspObj</name><operator>.</operator><name>resInfo</name><operator>.</operator><name>pRspMsg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>doFreeReqResultInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rspObj</name><operator>.</operator><name>resInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>qDestroyQuery</name><argument_list>(<argument><expr><name>pQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>destroyRequest</name><argument_list>(<argument><expr><name>pRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name>pVgHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pTableMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>tmq_get_json_meta</name><parameter_list>(<parameter><decl><type><name>TAOS_RES</name><modifier>*</modifier></type> <name>res</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TD_RES_TMQ_META</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>TD_RES_TMQ_METADATA</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>TD_RES_TMQ_METADATA</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SMqTaosxRspObj</name><modifier>*</modifier></type> <name>pMetaDataRspObj</name> <init>= <expr><operator>(</operator><name>SMqTaosxRspObj</name><operator>*</operator><operator>)</operator><name>res</name></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>processAutoCreateTable</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMetaDataRspObj</name><operator>-&gt;</operator><name>rsp</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SMqMetaRspObj</name><modifier>*</modifier></type> <name>pMetaRspObj</name> <init>= <expr><operator>(</operator><name>SMqMetaRspObj</name><operator>*</operator><operator>)</operator><name>res</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMetaRspObj</name><operator>-&gt;</operator><name>metaRsp</name><operator>.</operator><name>resMsgType</name></name> <operator>==</operator> <name>TDMT_VND_CREATE_STB</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>processCreateStb</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMetaRspObj</name><operator>-&gt;</operator><name>metaRsp</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pMetaRspObj</name><operator>-&gt;</operator><name>metaRsp</name><operator>.</operator><name>resMsgType</name></name> <operator>==</operator> <name>TDMT_VND_ALTER_STB</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>processAlterStb</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMetaRspObj</name><operator>-&gt;</operator><name>metaRsp</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pMetaRspObj</name><operator>-&gt;</operator><name>metaRsp</name><operator>.</operator><name>resMsgType</name></name> <operator>==</operator> <name>TDMT_VND_DROP_STB</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>processDropSTable</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMetaRspObj</name><operator>-&gt;</operator><name>metaRsp</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pMetaRspObj</name><operator>-&gt;</operator><name>metaRsp</name><operator>.</operator><name>resMsgType</name></name> <operator>==</operator> <name>TDMT_VND_CREATE_TABLE</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>processCreateTable</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMetaRspObj</name><operator>-&gt;</operator><name>metaRsp</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pMetaRspObj</name><operator>-&gt;</operator><name>metaRsp</name><operator>.</operator><name>resMsgType</name></name> <operator>==</operator> <name>TDMT_VND_ALTER_TABLE</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>processAlterTable</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMetaRspObj</name><operator>-&gt;</operator><name>metaRsp</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pMetaRspObj</name><operator>-&gt;</operator><name>metaRsp</name><operator>.</operator><name>resMsgType</name></name> <operator>==</operator> <name>TDMT_VND_DROP_TABLE</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>processDropTable</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMetaRspObj</name><operator>-&gt;</operator><name>metaRsp</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tmq_free_json_meta</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>jsonMeta</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>jsonMeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tmq_get_raw</name><parameter_list>(<parameter><decl><type><name>TAOS_RES</name><modifier>*</modifier></type> <name>res</name></decl></parameter>, <parameter><decl><type><name>tmq_raw_data</name><modifier>*</modifier></type> <name>raw</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>raw</name> <operator>||</operator> <operator>!</operator><name>res</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_INVALID_PARA</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>TD_RES_TMQ_META</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SMqMetaRspObj</name><modifier>*</modifier></type> <name>pMetaRspObj</name> <init>= <expr><operator>(</operator><name>SMqMetaRspObj</name><operator>*</operator><operator>)</operator><name>res</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>raw</name><operator>-&gt;</operator><name>raw</name></name> <operator>=</operator> <name><name>pMetaRspObj</name><operator>-&gt;</operator><name>metaRsp</name><operator>.</operator><name>metaRsp</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>raw</name><operator>-&gt;</operator><name>raw_len</name></name> <operator>=</operator> <name><name>pMetaRspObj</name><operator>-&gt;</operator><name>metaRsp</name><operator>.</operator><name>metaRspLen</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>raw</name><operator>-&gt;</operator><name>raw_type</name></name> <operator>=</operator> <name><name>pMetaRspObj</name><operator>-&gt;</operator><name>metaRsp</name><operator>.</operator><name>resMsgType</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>TD_RES_TMQ</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SMqRspObj</name><modifier>*</modifier></type> <name>rspObj</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SMqRspObj</name><operator>*</operator><operator>)</operator><name>res</name><operator>)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tEncodeSize</name><argument_list>(<argument><expr><name>tEncodeSMqDataRsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rspObj</name><operator>-&gt;</operator><name>rsp</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>    <name>buf</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SEncoder</name></type> <name>encoder</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tEncoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tEncodeSMqDataRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rspObj</name><operator>-&gt;</operator><name>rsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tEncoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>raw</name><operator>-&gt;</operator><name>raw</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>raw</name><operator>-&gt;</operator><name>raw_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>raw</name><operator>-&gt;</operator><name>raw_type</name></name> <operator>=</operator> <name>RES_TYPE__TMQ</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>TD_RES_TMQ_METADATA</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SMqTaosxRspObj</name><modifier>*</modifier></type> <name>rspObj</name> <init>= <expr><operator>(</operator><operator>(</operator><name>SMqTaosxRspObj</name><operator>*</operator><operator>)</operator><name>res</name><operator>)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tEncodeSize</name><argument_list>(<argument><expr><name>tEncodeSTaosxRsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rspObj</name><operator>-&gt;</operator><name>rsp</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>    <name>buf</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SEncoder</name></type> <name>encoder</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tEncoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tEncodeSTaosxRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rspObj</name><operator>-&gt;</operator><name>rsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tEncoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>raw</name><operator>-&gt;</operator><name>raw</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>raw</name><operator>-&gt;</operator><name>raw_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>raw</name><operator>-&gt;</operator><name>raw_type</name></name> <operator>=</operator> <name>RES_TYPE__TMQ_METADATA</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_TMQ_INVALID_MSG</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tmq_free_raw</name><parameter_list>(<parameter><decl><type><name>tmq_raw_data</name></type> <name>raw</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>raw</name><operator>.</operator><name>raw_type</name></name> <operator>==</operator> <name>RES_TYPE__TMQ</name> <operator>||</operator> <name><name>raw</name><operator>.</operator><name>raw_type</name></name> <operator>==</operator> <name>RES_TYPE__TMQ_METADATA</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>raw</name><operator>.</operator><name>raw</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tmq_write_raw</name><parameter_list>(<parameter><decl><type><name>TAOS</name><modifier>*</modifier></type> <name>taos</name></decl></parameter>, <parameter><decl><type><name>tmq_raw_data</name></type> <name>raw</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>taos</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_INVALID_PARA</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>raw</name><operator>.</operator><name>raw_type</name></name> <operator>==</operator> <name>TDMT_VND_CREATE_STB</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>taosCreateStb</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name><name>raw</name><operator>.</operator><name>raw</name></name></expr></argument>, <argument><expr><name><name>raw</name><operator>.</operator><name>raw_len</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>raw</name><operator>.</operator><name>raw_type</name></name> <operator>==</operator> <name>TDMT_VND_ALTER_STB</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>taosCreateStb</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name><name>raw</name><operator>.</operator><name>raw</name></name></expr></argument>, <argument><expr><name><name>raw</name><operator>.</operator><name>raw_len</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>raw</name><operator>.</operator><name>raw_type</name></name> <operator>==</operator> <name>TDMT_VND_DROP_STB</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>taosDropStb</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name><name>raw</name><operator>.</operator><name>raw</name></name></expr></argument>, <argument><expr><name><name>raw</name><operator>.</operator><name>raw_len</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>raw</name><operator>.</operator><name>raw_type</name></name> <operator>==</operator> <name>TDMT_VND_CREATE_TABLE</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>taosCreateTable</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name><name>raw</name><operator>.</operator><name>raw</name></name></expr></argument>, <argument><expr><name><name>raw</name><operator>.</operator><name>raw_len</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>raw</name><operator>.</operator><name>raw_type</name></name> <operator>==</operator> <name>TDMT_VND_ALTER_TABLE</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>taosAlterTable</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name><name>raw</name><operator>.</operator><name>raw</name></name></expr></argument>, <argument><expr><name><name>raw</name><operator>.</operator><name>raw_len</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>raw</name><operator>.</operator><name>raw_type</name></name> <operator>==</operator> <name>TDMT_VND_DROP_TABLE</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>taosDropTable</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name><name>raw</name><operator>.</operator><name>raw</name></name></expr></argument>, <argument><expr><name><name>raw</name><operator>.</operator><name>raw_len</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>raw</name><operator>.</operator><name>raw_type</name></name> <operator>==</operator> <name>TDMT_VND_DELETE</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>taosDeleteData</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name><name>raw</name><operator>.</operator><name>raw</name></name></expr></argument>, <argument><expr><name><name>raw</name><operator>.</operator><name>raw_len</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>raw</name><operator>.</operator><name>raw_type</name></name> <operator>==</operator> <name>RES_TYPE__TMQ</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>tmqWriteRawDataImpl</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name><name>raw</name><operator>.</operator><name>raw</name></name></expr></argument>, <argument><expr><name><name>raw</name><operator>.</operator><name>raw_len</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>raw</name><operator>.</operator><name>raw_type</name></name> <operator>==</operator> <name>RES_TYPE__TMQ_METADATA</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>tmqWriteRawMetaDataImpl</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name><name>raw</name><operator>.</operator><name>raw</name></name></expr></argument>, <argument><expr><name><name>raw</name><operator>.</operator><name>raw_len</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_INVALID_PARA</name></expr>;</return>
</block_content>}</block></function>
</unit>
