<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/util/src/tarray.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tarray.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcoding.h"</cpp:file></cpp:include>

<comment type="line">// todo refactor API</comment>

<function><type><name>SArray</name><modifier>*</modifier></type> <name>taosArrayInit</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>elemSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>elemSize</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <name>TARRAY_MIN_SIZE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>size</name> <operator>=</operator> <name>TARRAY_MIN_SIZE</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pArray</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SArray</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pArray</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pArray</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pArray</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>elemSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pArray</name><operator>-&gt;</operator><name>pData</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pArray</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pArray</name><operator>-&gt;</operator><name>elemSize</name></name> <operator>=</operator> <name>elemSize</name></expr>;</expr_stmt>
  <return>return <expr><name>pArray</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>taosArrayResize</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pArray</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pArray</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <name><name>pArray</name><operator>-&gt;</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><name><name>pArray</name><operator>-&gt;</operator><name>capacity</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <operator>(</operator><name>size</name> <operator>&lt;&lt;</operator> <literal type="number">1u</literal><operator>)</operator></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>tmp</name> <init>= <expr><call><name>taosMemoryRealloc</name><argument_list>(<argument><expr><name><name>pArray</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name>size</name> <operator>*</operator> <name><name>pArray</name><operator>-&gt;</operator><name>elemSize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>  <comment type="line">// reallocate failed, the original buffer remains</comment>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pArray</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pArray</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosArrayEnsureCap</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pArray</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>newCap</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>newCap</name> <operator>&gt;</operator> <name><name>pArray</name><operator>-&gt;</operator><name>capacity</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>tsize</name> <init>= <expr><operator>(</operator><name><name>pArray</name><operator>-&gt;</operator><name>capacity</name></name> <operator>&lt;&lt;</operator> <literal type="number">1u</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>newCap</name> <operator>&gt;</operator> <name>tsize</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>tsize</name> <operator>=</operator> <operator>(</operator><name>tsize</name> <operator>&lt;&lt;</operator> <literal type="number">1u</literal><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><name><name>pArray</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <call><name>taosMemoryRealloc</name><argument_list>(<argument><expr><name><name>pArray</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name>tsize</name> <operator>*</operator> <name><name>pArray</name><operator>-&gt;</operator><name>elemSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pArray</name><operator>-&gt;</operator><name>pData</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pArray</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <name>tsize</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>taosArrayAddBatch</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pArray</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pData</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>nEles</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pData</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosArrayEnsureCap</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name><name>pArray</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <name>nEles</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>dst</name> <init>= <expr><call><name>TARRAY_GET_ELEM</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name><name>pArray</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name><name>pArray</name><operator>-&gt;</operator><name>elemSize</name></name> <operator>*</operator> <name>nEles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pArray</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <name>nEles</name></expr>;</expr_stmt>
  <return>return <expr><name>dst</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosArrayRemoveDuplicate</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pArray</name></decl></parameter>, <parameter><decl><type><name>__compar_fn_t</name></type> <name>comparFn</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>fp</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><name><name>pArray</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p1</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p2</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>comparFn</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// do nothing</comment>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>pos</name> <operator>+</operator> <literal type="number">1</literal> <operator>!=</operator> <name>i</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>fp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>fp</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>taosArraySet</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pos</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>pos</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name>fp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pArray</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>fp</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pArray</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosArrayRemoveDuplicateP</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pArray</name></decl></parameter>, <parameter><decl><type><name>__compar_fn_t</name></type> <name>comparFn</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>fp</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><name><name>pArray</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p1</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p2</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>comparFn</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// do nothing</comment>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>pos</name> <operator>+</operator> <literal type="number">1</literal> <operator>!=</operator> <name>i</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>fp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>fp</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>taosArraySet</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pos</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>pos</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name>fp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pArray</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>fp</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pArray</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>taosArrayAddAll</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pArray</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SArray</name><modifier>*</modifier></type> <name>pInput</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pInput</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>taosArrayAddBatch</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name><name>pInput</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pInput</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>taosArrayReserve</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pArray</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>taosArrayEnsureCap</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name><name>pArray</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <name>num</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>dst</name> <init>= <expr><call><name>TARRAY_GET_ELEM</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name><name>pArray</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pArray</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <name>num</name></expr>;</expr_stmt>

  <return>return <expr><name>dst</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>taosArrayPop</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pArray</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pArray</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pArray</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pArray</name><operator>-&gt;</operator><name>size</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <return>return <expr><call><name>TARRAY_GET_ELEM</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name><name>pArray</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>taosArrayGet</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SArray</name><modifier>*</modifier></type> <name>pArray</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pArray</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>index</name> <operator>&lt;</operator> <name><name>pArray</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>TARRAY_GET_ELEM</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>taosArrayGetP</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SArray</name><modifier>*</modifier></type> <name>pArray</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>index</name> <operator>&lt;</operator> <name><name>pArray</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>d</name> <init>= <expr><call><name>TARRAY_GET_ELEM</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <return>return <expr><operator>*</operator><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><name>d</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>taosArrayGetLast</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SArray</name><modifier>*</modifier></type> <name>pArray</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>TARRAY_GET_ELEM</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name><name>pArray</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>size_t</name></type> <name>taosArrayGetSize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SArray</name><modifier>*</modifier></type> <name>pArray</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pArray</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name><name>pArray</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosArraySetSize</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pArray</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>size</name> <operator>&lt;=</operator> <name><name>pArray</name><operator>-&gt;</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pArray</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>taosArrayInsert</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pArray</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pArray</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pData</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <name><name>pArray</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pArray</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <name><name>pArray</name><operator>-&gt;</operator><name>capacity</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>taosArrayResize</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>dst</name> <init>= <expr><call><name>TARRAY_GET_ELEM</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>remain</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name><name>pArray</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>index</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name><name>pArray</name><operator>-&gt;</operator><name>elemSize</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>dst</name></expr></argument>, <argument><expr><name><name>pArray</name><operator>-&gt;</operator><name>elemSize</name></name> <operator>*</operator> <name>remain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name><name>pArray</name><operator>-&gt;</operator><name>elemSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pArray</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <return>return <expr><name>dst</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosArraySet</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pArray</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>index</name> <operator>&lt;</operator> <name><name>pArray</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>TARRAY_GET_ELEM</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name><name>pArray</name><operator>-&gt;</operator><name>elemSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosArrayPopFrontBatch</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pArray</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>cnt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>cnt</name> <operator>&lt;=</operator> <name><name>pArray</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pArray</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>pArray</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>cnt</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pArray</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>cnt</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>pArray</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>pArray</name><operator>-&gt;</operator><name>pData</name></name> <operator>+</operator> <name>cnt</name> <operator>*</operator> <name><name>pArray</name><operator>-&gt;</operator><name>elemSize</name></name></expr></argument>, <argument><expr><name><name>pArray</name><operator>-&gt;</operator><name>size</name></name> <operator>*</operator> <name><name>pArray</name><operator>-&gt;</operator><name>elemSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosArrayPopTailBatch</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pArray</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>cnt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>cnt</name> <operator>&lt;=</operator> <name><name>pArray</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pArray</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>pArray</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>cnt</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosArrayRemove</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pArray</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>index</name> <operator>&lt;</operator> <name><name>pArray</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <name><name>pArray</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayPop</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>remain</name> <init>= <expr><name><name>pArray</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>index</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>pArray</name><operator>-&gt;</operator><name>pData</name></name> <operator>+</operator> <name>index</name> <operator>*</operator> <name><name>pArray</name><operator>-&gt;</operator><name>elemSize</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>pArray</name><operator>-&gt;</operator><name>pData</name></name> <operator>+</operator> <operator>(</operator><name>index</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>pArray</name><operator>-&gt;</operator><name>elemSize</name></name></expr></argument>,
          <argument><expr><name>remain</name> <operator>*</operator> <name><name>pArray</name><operator>-&gt;</operator><name>elemSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pArray</name><operator>-&gt;</operator><name>size</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SArray</name><modifier>*</modifier></type> <name>taosArrayFromList</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>elemSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>src</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>elemSize</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pDst</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>elemSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pDst</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>elemSize</name> <operator>*</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDst</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

  <return>return <expr><name>pDst</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SArray</name><modifier>*</modifier></type> <name>taosArrayDup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SArray</name><modifier>*</modifier></type> <name>pSrc</name></decl></parameter>, <parameter><decl><type><name>__array_item_dup_fn_t</name></type> <name>fn</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pSrc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pSrc</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>  <comment type="line">// empty array list</comment>
    <return>return <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>pSrc</name><operator>-&gt;</operator><name>elemSize</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>dst</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><name><name>pSrc</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>pSrc</name><operator>-&gt;</operator><name>elemSize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>fn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pSrc</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pSrc</name><operator>-&gt;</operator><name>elemSize</name></name> <operator>*</operator> <name><name>pSrc</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pSrc</name><operator>-&gt;</operator><name>elemSize</name></name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pSrc</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>fn</name><argument_list>(<argument><expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>pSrc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>dst</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>dst</name><operator>-&gt;</operator><name>elemSize</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>elemSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>pSrc</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

  <return>return <expr><name>dst</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosArrayClear</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pArray</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pArray</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>pArray</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosArrayClearEx</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pArray</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>fp</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pArray</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pArray</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pArray</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>fp</name><argument_list>(<argument><expr><call><name>TARRAY_GET_ELEM</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pArray</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosArrayClearP</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pArray</name></decl></parameter>, <parameter><decl><type><name>FDelete</name></type> <name>fp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pArray</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pArray</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pArray</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>fp</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>TARRAY_GET_ELEM</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pArray</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>taosArrayDestroy</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pArray</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pArray</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pArray</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosArrayDestroyP</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pArray</name></decl></parameter>, <parameter><decl><type><name>FDelete</name></type> <name>fp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pArray</name></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pArray</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>fp</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>TARRAY_GET_ELEM</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosArrayDestroyEx</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pArray</name></decl></parameter>, <parameter><decl><type><name>FDelete</name></type> <name>fp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pArray</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pArray</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>fp</name><argument_list>(<argument><expr><call><name>TARRAY_GET_ELEM</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosArraySort</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pArray</name></decl></parameter>, <parameter><decl><type><name>__compar_fn_t</name></type> <name>compar</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pArray</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>compar</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosSort</name><argument_list>(<argument><expr><name><name>pArray</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pArray</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>pArray</name><operator>-&gt;</operator><name>elemSize</name></name></expr></argument>, <argument><expr><name>compar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>taosArraySearch</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SArray</name><modifier>*</modifier></type> <name>pArray</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>__compar_fn_t</name></type> <name>comparFn</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pArray</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>comparFn</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>key</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>taosbsearch</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>pArray</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pArray</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>pArray</name><operator>-&gt;</operator><name>elemSize</name></name></expr></argument>, <argument><expr><name>comparFn</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosArraySearchIdx</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SArray</name><modifier>*</modifier></type> <name>pArray</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>__compar_fn_t</name></type> <name>comparFn</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>item</name> <init>= <expr><call><name>taosArraySearch</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>comparFn</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><ternary><condition><expr><name>item</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>item</name> <operator>-</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>pArray</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator> <operator>/</operator> <name><name>pArray</name><operator>-&gt;</operator><name>elemSize</name></name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>taosArrayPartition</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pArray</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>j</name></decl></parameter>, <parameter><decl><type><name>__ext_compar_fn_t</name></type> <name>fn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>userData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>key</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>j</name></expr>)</condition> <block>{<block_content>
    <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>j</name> <operator>&amp;&amp;</operator> <call><name>fn</name><argument_list>(<argument><expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>userData</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>j</name><operator>--</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>j</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>a</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>taosArraySet</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>j</name> <operator>&amp;&amp;</operator> <call><name>fn</name><argument_list>(<argument><expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>userData</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>j</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>a</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>taosArraySet</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>taosArraySet</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>taosArrayQuicksortImpl</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pArray</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>low</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>high</name></decl></parameter>, <parameter><decl><type><name>__ext_compar_fn_t</name></type> <name>fn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>low</name> <operator>&lt;</operator> <name>high</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>idx</name> <init>= <expr><call><name>taosArrayPartition</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>low</name></expr></argument>, <argument><expr><name>high</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosArrayQuicksortImpl</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>low</name></expr></argument>, <argument><expr><name>idx</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayQuicksortImpl</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>high</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>taosArrayQuickSort</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pArray</name></decl></parameter>, <parameter><decl><type><name>__ext_compar_fn_t</name></type> <name>fn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pArray</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosArrayQuicksortImpl</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>taosArrayInsertSort</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pArray</name></decl></parameter>, <parameter><decl><type><name>__ext_compar_fn_t</name></type> <name>fn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pArray</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>pArray</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><name>i</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>fn</name><argument_list>(<argument><expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>a</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>b</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>taosArraySet</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosArraySet</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>
  <return>return;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>taosEncodeArray</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SArray</name><modifier>*</modifier></type> <name>pArray</name></decl></parameter>, <parameter><decl><type><name>FEncode</name></type> <name>encode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>tlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>sz</name> <init>= <expr><name><name>pArray</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <call><name>taosEncodeFixedI32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>tlen</name> <operator>+=</operator> <call><name>encode</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>tlen</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>taosDecodeArray</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier><modifier>*</modifier></type> <name>pArray</name></decl></parameter>, <parameter><decl><type><name>FDecode</name></type> <name>decode</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dataSz</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>sz</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>taosDecodeFixedI32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pArray</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>sz</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dataSz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>decode</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><operator>*</operator><name>pArray</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>buf</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// todo remove it</comment>
<comment type="line">// order array&lt;type *&gt;</comment>
<function><type><name>void</name></type> <name>taosArraySortPWithExt</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pArray</name></decl></parameter>, <parameter><decl><type><name>__ext_compar_fn_t</name></type> <name>fn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><ternary><condition><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><call><name>taosArrayQuickSort</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>taosArrayInsertSort</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taosArraySwap</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>b</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>t</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>uint32_t</name></type> <name>cap</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>capacity</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>capacity</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <name>cap</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>uint32_t</name></type> <name>elem</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>elemSize</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>elemSize</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>elemSize</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>elemSize</name></name> <operator>=</operator> <name>elem</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>pData</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
